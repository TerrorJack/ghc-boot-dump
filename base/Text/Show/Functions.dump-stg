
==================== Pre unarise: ====================
2018-03-16 16:07:02.525851274 UTC

Text.Show.Functions.$fShow(->)4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<function>"#;

Text.Show.Functions.$fShow(->)3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Text.Show.Functions.$fShow(->)4;

Text.Show.Functions.$fShow(->)2
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ Text.Show.Functions.$fShow(->)3 eta_B1;

Text.Show.Functions.$fShow(->)_$cshowsPrec
  :: forall a b. GHC.Types.Int -> (a -> b) -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_sc8lf ds1_sc8lg eta_B1]
        Text.Show.Functions.$fShow(->)2 eta_B1;

Text.Show.Functions.$fShow(->)_$cshow
  :: forall a b. (a -> b) -> GHC.Base.String
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [x_sc8lh] Text.Show.Functions.$fShow(->)3;

Text.Show.Functions.$fShow(->)1
  :: forall a b. (a -> b) -> [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=2, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_sc8li eta_B1] Text.Show.Functions.$fShow(->)2 eta_B1;

Text.Show.Functions.$fShow(->)_$cshowList
  :: forall a b. [a -> b] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sc8lj s_sc8lk]
        GHC.Show.showList__
            Text.Show.Functions.$fShow(->)1 ls_sc8lj s_sc8lk;

Text.Show.Functions.$fShow(->) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b. GHC.Show.Show (a -> b)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Text.Show.Functions.$fShow(->)_$cshowsPrec
                                    Text.Show.Functions.$fShow(->)_$cshow
                                    Text.Show.Functions.$fShow(->)_$cshowList];

Text.Show.Functions.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Text.Show.Functions.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Show.Functions.$trModule4];

Text.Show.Functions.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text.Show.Functions"#;

Text.Show.Functions.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Show.Functions.$trModule2];

Text.Show.Functions.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Text.Show.Functions.$trModule3
                                     Text.Show.Functions.$trModule1];


==================== STG syntax: ====================
2018-03-16 16:07:02.527275675 UTC

Text.Show.Functions.$fShow(->)4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<function>"#;

Text.Show.Functions.$fShow(->)3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Text.Show.Functions.$fShow(->)4;

Text.Show.Functions.$fShow(->)2
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ Text.Show.Functions.$fShow(->)3 eta_B1;

Text.Show.Functions.$fShow(->)_$cshowsPrec
  :: forall a b. GHC.Types.Int -> (a -> b) -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_sc8lf ds1_sc8lg eta_B1]
        Text.Show.Functions.$fShow(->)2 eta_B1;

Text.Show.Functions.$fShow(->)_$cshow
  :: forall a b. (a -> b) -> GHC.Base.String
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [x_sc8lh] Text.Show.Functions.$fShow(->)3;

Text.Show.Functions.$fShow(->)1
  :: forall a b. (a -> b) -> [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=2, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_sc8li eta_B1] Text.Show.Functions.$fShow(->)2 eta_B1;

Text.Show.Functions.$fShow(->)_$cshowList
  :: forall a b. [a -> b] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sc8lj s_sc8lk]
        GHC.Show.showList__
            Text.Show.Functions.$fShow(->)1 ls_sc8lj s_sc8lk;

Text.Show.Functions.$fShow(->) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b. GHC.Show.Show (a -> b)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Text.Show.Functions.$fShow(->)_$cshowsPrec
                                    Text.Show.Functions.$fShow(->)_$cshow
                                    Text.Show.Functions.$fShow(->)_$cshowList];

Text.Show.Functions.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Text.Show.Functions.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Show.Functions.$trModule4];

Text.Show.Functions.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text.Show.Functions"#;

Text.Show.Functions.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Show.Functions.$trModule2];

Text.Show.Functions.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Text.Show.Functions.$trModule3
                                     Text.Show.Functions.$trModule1];


==================== Pre unarise: ====================
2018-03-16 16:07:02.613904804 UTC

Text.Show.Functions.$fShow(->)4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<function>"#;

Text.Show.Functions.$fShow(->)3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Text.Show.Functions.$fShow(->)4;

Text.Show.Functions.$fShow(->)2
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ Text.Show.Functions.$fShow(->)3 eta_B1;

Text.Show.Functions.$fShow(->)_$cshowsPrec
  :: forall a b. GHC.Types.Int -> (a -> b) -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_sc8o4 ds1_sc8o5 eta_B1]
        Text.Show.Functions.$fShow(->)2 eta_B1;

Text.Show.Functions.$fShow(->)_$cshow
  :: forall a b. (a -> b) -> GHC.Base.String
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [x_sc8o6] Text.Show.Functions.$fShow(->)3;

Text.Show.Functions.$fShow(->)1
  :: forall a b. (a -> b) -> [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=2, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_sc8o7 eta_B1] Text.Show.Functions.$fShow(->)2 eta_B1;

Text.Show.Functions.$fShow(->)_$cshowList
  :: forall a b. [a -> b] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sc8o8 s_sc8o9]
        GHC.Show.showList__
            Text.Show.Functions.$fShow(->)1 ls_sc8o8 s_sc8o9;

Text.Show.Functions.$fShow(->) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b. GHC.Show.Show (a -> b)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Text.Show.Functions.$fShow(->)_$cshowsPrec
                                    Text.Show.Functions.$fShow(->)_$cshow
                                    Text.Show.Functions.$fShow(->)_$cshowList];

Text.Show.Functions.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Text.Show.Functions.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Show.Functions.$trModule4];

Text.Show.Functions.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text.Show.Functions"#;

Text.Show.Functions.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Show.Functions.$trModule2];

Text.Show.Functions.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Text.Show.Functions.$trModule3
                                     Text.Show.Functions.$trModule1];


==================== STG syntax: ====================
2018-03-16 16:07:02.615527496 UTC

Text.Show.Functions.$fShow(->)4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<function>"#;

Text.Show.Functions.$fShow(->)3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# Text.Show.Functions.$fShow(->)4;

Text.Show.Functions.$fShow(->)2
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ Text.Show.Functions.$fShow(->)3 eta_B1;

Text.Show.Functions.$fShow(->)_$cshowsPrec
  :: forall a b. GHC.Types.Int -> (a -> b) -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_sc8o4 ds1_sc8o5 eta_B1]
        Text.Show.Functions.$fShow(->)2 eta_B1;

Text.Show.Functions.$fShow(->)_$cshow
  :: forall a b. (a -> b) -> GHC.Base.String
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [x_sc8o6] Text.Show.Functions.$fShow(->)3;

Text.Show.Functions.$fShow(->)1
  :: forall a b. (a -> b) -> [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=2, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_sc8o7 eta_B1] Text.Show.Functions.$fShow(->)2 eta_B1;

Text.Show.Functions.$fShow(->)_$cshowList
  :: forall a b. [a -> b] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sc8o8 s_sc8o9]
        GHC.Show.showList__
            Text.Show.Functions.$fShow(->)1 ls_sc8o8 s_sc8o9;

Text.Show.Functions.$fShow(->) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b. GHC.Show.Show (a -> b)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Text.Show.Functions.$fShow(->)_$cshowsPrec
                                    Text.Show.Functions.$fShow(->)_$cshow
                                    Text.Show.Functions.$fShow(->)_$cshowList];

Text.Show.Functions.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Text.Show.Functions.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Show.Functions.$trModule4];

Text.Show.Functions.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text.Show.Functions"#;

Text.Show.Functions.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Show.Functions.$trModule2];

Text.Show.Functions.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Text.Show.Functions.$trModule3
                                     Text.Show.Functions.$trModule1];

