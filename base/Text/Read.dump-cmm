
==================== Output Cmm ====================
2018-03-16 16:00:16.82436079 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:16.825387328 UTC

[section ""data" . Text.Read.reads_closure" {
     Text.Read.reads_closure:
         const Text.Read.reads_info;
 },
 Text.Read.reads_entry() //  [R2]
         { info_tbl: [(c5hnT,
                       label: Text.Read.reads_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hnT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hnU; else goto c5hnV;
       c5hnU: // global
           R2 = R2;
           R1 = Text.Read.reads_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hnV: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.826249002 UTC

[section ""cstring" . Text.Read.readEither6_bytes" {
     Text.Read.readEither6_bytes:
         I8[] [80,114,101,108,117,100,101,46,114,101,97,100,58,32,110,111,32,112,97,114,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.827016926 UTC

[section ""data" . Text.Read.readEither5_closure" {
     Text.Read.readEither5_closure:
         const Text.Read.readEither5_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.readEither5_entry() //  [R1]
         { info_tbl: [(c5ho2,
                       label: Text.Read.readEither5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ho2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ho3; else goto c5ho4;
       c5ho3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5ho4: // global
           (_c5hnZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5hnZ::I64 == 0) goto c5ho1; else goto c5ho0;
       c5ho1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5ho0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5hnZ::I64;
           R2 = Text.Read.readEither6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.828008534 UTC

[section ""data" . Text.Read.readEither4_closure" {
     Text.Read.readEither4_closure:
         const Data.Either.Left_con_info;
         const Text.Read.readEither5_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.828617659 UTC

[section ""cstring" . Text.Read.readEither3_bytes" {
     Text.Read.readEither3_bytes:
         I8[] [80,114,101,108,117,100,101,46,114,101,97,100,58,32,97,109,98,105,103,117,111,117,115,32,112,97,114,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.829443045 UTC

[section ""data" . Text.Read.readEither2_closure" {
     Text.Read.readEither2_closure:
         const Text.Read.readEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.readEither2_entry() //  [R1]
         { info_tbl: [(c5hob,
                       label: Text.Read.readEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hob: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hoc; else goto c5hod;
       c5hoc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hod: // global
           (_c5ho8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5ho8::I64 == 0) goto c5hoa; else goto c5ho9;
       c5hoa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5ho9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5ho8::I64;
           R2 = Text.Read.readEither3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.83039266 UTC

[section ""data" . Text.Read.readEither1_closure" {
     Text.Read.readEither1_closure:
         const Data.Either.Left_con_info;
         const Text.Read.readEither2_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.831449064 UTC

[section ""data" . Text.Read.readEither7_closure" {
     Text.Read.readEither7_closure:
         const Text.Read.readEither7_info;
 },
 k_s5hng_entry() //  [R1]
         { info_tbl: [(c5hoo,
                       label: k_s5hng_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hoo: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5hnj_entry() //  [R1, R2]
         { info_tbl: [(c5how,
                       label: sat_s5hnj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5how: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.readEither7_entry() //  [R2]
         { info_tbl: [(c5hoA,
                       label: Text.Read.readEither7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hoA: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5hoE; else goto c5hoD;
       c5hoE: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Text.Read.readEither7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hoD: // global
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = Text.ParserCombinators.ReadP.Fail_closure+3;
           I64[Hp - 40] = k_s5hng_info;
           P64[Hp - 32] = Hp - 60;
           I64[Hp - 24] = sat_s5hnj_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.833555355 UTC

[section ""data" . Text.Read.readEither8_closure" {
     Text.Read.readEither8_closure:
         const Text.Read.readEither8_info;
 },
 sat_s5hns_entry() //  [R1]
         { info_tbl: [(c5hp3,
                       label: sat_s5hns_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hp3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hp4; else goto c5hp5;
       c5hp4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hp5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.readEither8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.readEither8_entry() //  [R2]
         { info_tbl: [(c5hpa,
                       label: Text.Read.readEither8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hpa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5hpb; else goto u5hps;
       c5hpb: // global
           R2 = R2;
           R1 = Text.Read.readEither8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5hps: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5hoG() args: 0, res: 0, upd: 0;
     }
 },
 _c5hoG() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hoG: // global
           _s5hnk::P64 = P64[Sp];
           I64[Sp] = block_c5hoJ_info;
           R1 = _s5hnk::P64;
           if (R1 & 7 != 0) goto u5hpu; else goto c5hoK;
       u5hpu: // global
           call _c5hoJ(R1) args: 0, res: 0, upd: 0;
       c5hoK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hoJ() //  [R1]
         { info_tbl: [(c5hoJ,
                       label: block_c5hoJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hoJ: // global
           if (R1 & 7 == 1) goto c5hp7; else goto c5hp8;
       c5hp7: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hp8: // global
           I64[Sp - 8] = block_c5hoP_info;
           _s5hnn::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5hnn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hpv; else goto c5hoQ;
       u5hpv: // global
           call _c5hoP(R1) args: 0, res: 0, upd: 0;
       c5hoQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hoP() //  [R1]
         { info_tbl: [(c5hoP,
                       label: block_c5hoP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hoP: // global
           I64[Sp - 8] = block_c5hoU_info;
           _s5hnp::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s5hnp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hpw; else goto c5hoV;
       u5hpw: // global
           call _c5hoU(R1) args: 0, res: 0, upd: 0;
       c5hoV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hoU() //  [R1]
         { info_tbl: [(c5hoU,
                       label: block_c5hoU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hoU: // global
           _s5hnn::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5hpj; else goto c5hpq;
       c5hpj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5hpm; else goto c5hpl;
       c5hpm: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5hpl: // global
           I64[Hp - 40] = sat_s5hns_info;
           P64[Hp - 24] = _s5hnn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hpq: // global
           P64[Sp + 16] = _s5hnn::P64;
           Sp = Sp + 16;
           call _c5hoG() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.836302257 UTC

[section ""data" . Text.Read.readEither_closure" {
     Text.Read.readEither_closure:
         const Text.Read.readEither_info;
         const 0;
 },
 Text.Read.readEither_entry() //  [R2, R3]
         { info_tbl: [(c5hpF,
                       label: Text.Read.readEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hpF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5hpJ; else goto c5hpK;
       c5hpJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.readEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hpK: // global
           I64[Sp - 16] = block_c5hpD_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           P64[Sp - 24] = Text.Read.readEither7_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5hpD() //  [R1]
         { info_tbl: [(c5hpD,
                       label: block_c5hpD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hpD: // global
           _s5hnw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5hpI_info;
           R3 = _s5hnw::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hpI() //  [R1]
         { info_tbl: [(c5hpI,
                       label: block_c5hpI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hpI: // global
           I64[Sp] = block_c5hpP_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hpP() //  [R1]
         { info_tbl: [(c5hpP,
                       label: block_c5hpP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hpP: // global
           if (R1 & 7 == 1) goto c5hpW; else goto c5hq1;
       c5hpW: // global
           R1 = Text.Read.readEither4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hq1: // global
           I64[Sp - 8] = block_c5hpZ_info;
           _s5hnA::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s5hnA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hqi; else goto c5hq2;
       u5hqi: // global
           call _c5hpZ(R1) args: 0, res: 0, upd: 0;
       c5hq2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hpZ() //  [R1]
         { info_tbl: [(c5hpZ,
                       label: block_c5hpZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hpZ: // global
           if (R1 & 7 == 1) goto c5hq8; else goto c5hqf;
       c5hq8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5hqb; else goto c5hqa;
       c5hqb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5hqa: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hqf: // global
           R1 = Text.Read.readEither1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.838674922 UTC

[section ""data" . Text.Read.readMaybe_closure" {
     Text.Read.readMaybe_closure:
         const Text.Read.readMaybe_info;
         const 0;
 },
 Text.Read.readMaybe_entry() //  [R2, R3]
         { info_tbl: [(c5hqu,
                       label: Text.Read.readMaybe_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hqu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hqv; else goto c5hqw;
       c5hqv: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.readMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hqw: // global
           I64[Sp - 8] = block_c5hqo_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.readEither_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hqo() //  [R1]
         { info_tbl: [(c5hqo,
                       label: block_c5hqo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hqo: // global
           if (R1 & 7 == 1) goto c5hqr; else goto c5hqs;
       c5hqr: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hqs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5hqF; else goto c5hqE;
       c5hqF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5hqE: // global
           _s5hnJ::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s5hnJ::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.840183498 UTC

[section ""data" . Text.Read.read_closure" {
     Text.Read.read_closure:
         const Text.Read.read_info;
         const 0;
 },
 Text.Read.read_entry() //  [R2, R3]
         { info_tbl: [(c5hqQ,
                       label: Text.Read.read_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hqQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hqR; else goto c5hqS;
       c5hqR: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.read_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hqS: // global
           I64[Sp - 8] = block_c5hqK_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.readEither_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hqK() //  [R1]
         { info_tbl: [(c5hqK,
                       label: block_c5hqK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hqK: // global
           if (R1 & 7 == 1) goto c5hqN; else goto c5hqO;
       c5hqN: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
       c5hqO: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.841348956 UTC

[section ""cstring" . Text.Read.$trModule4_bytes" {
     Text.Read.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.841913758 UTC

[section ""data" . Text.Read.$trModule3_closure" {
     Text.Read.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.84244567 UTC

[section ""cstring" . Text.Read.$trModule2_bytes" {
     Text.Read.$trModule2_bytes:
         I8[] [84,101,120,116,46,82,101,97,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.843003946 UTC

[section ""data" . Text.Read.$trModule1_closure" {
     Text.Read.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.84356268 UTC

[section ""data" . Text.Read.$trModule_closure" {
     Text.Read.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.Read.$trModule3_closure+1;
         const Text.Read.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.844172758 UTC

[section ""relreadonly" . S5hqj_srt" {
     S5hqj_srt:
         const Text.Read.readEither_closure;
         const Text.Read.readEither1_closure;
         const Text.Read.readEither4_closure;
         const Text.Read.readMaybe_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Read.read_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.844780267 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:16.845649762 UTC

[section ""data" . Text.Read.reads_closure" {
     Text.Read.reads_closure:
         const Text.Read.reads_info;
 },
 Text.Read.reads_entry() //  [R2]
         { info_tbl: [(c5hr3,
                       label: Text.Read.reads_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hr3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hr4; else goto c5hr5;
       c5hr4: // global
           R2 = R2;
           R1 = Text.Read.reads_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hr5: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.846732187 UTC

[section ""cstring" . Text.Read.readEither6_bytes" {
     Text.Read.readEither6_bytes:
         I8[] [80,114,101,108,117,100,101,46,114,101,97,100,58,32,110,111,32,112,97,114,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.84754138 UTC

[section ""data" . Text.Read.readEither5_closure" {
     Text.Read.readEither5_closure:
         const Text.Read.readEither5_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.readEither5_entry() //  [R1]
         { info_tbl: [(c5hrc,
                       label: Text.Read.readEither5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hrc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hrd; else goto c5hre;
       c5hrd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hre: // global
           (_c5hr9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5hr9::I64 == 0) goto c5hrb; else goto c5hra;
       c5hrb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5hra: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5hr9::I64;
           R2 = Text.Read.readEither6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.84850775 UTC

[section ""data" . Text.Read.readEither4_closure" {
     Text.Read.readEither4_closure:
         const Data.Either.Left_con_info;
         const Text.Read.readEither5_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.849092068 UTC

[section ""cstring" . Text.Read.readEither3_bytes" {
     Text.Read.readEither3_bytes:
         I8[] [80,114,101,108,117,100,101,46,114,101,97,100,58,32,97,109,98,105,103,117,111,117,115,32,112,97,114,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.849985056 UTC

[section ""data" . Text.Read.readEither2_closure" {
     Text.Read.readEither2_closure:
         const Text.Read.readEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.readEither2_entry() //  [R1]
         { info_tbl: [(c5hrl,
                       label: Text.Read.readEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hrl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hrm; else goto c5hrn;
       c5hrm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hrn: // global
           (_c5hri::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5hri::I64 == 0) goto c5hrk; else goto c5hrj;
       c5hrk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5hrj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5hri::I64;
           R2 = Text.Read.readEither3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.851112485 UTC

[section ""data" . Text.Read.readEither1_closure" {
     Text.Read.readEither1_closure:
         const Data.Either.Left_con_info;
         const Text.Read.readEither2_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.852125981 UTC

[section ""data" . Text.Read.readEither7_closure" {
     Text.Read.readEither7_closure:
         const Text.Read.readEither7_info;
 },
 k_s5hng_entry() //  [R1]
         { info_tbl: [(c5hry,
                       label: k_s5hng_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hry: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5hnj_entry() //  [R1, R2]
         { info_tbl: [(c5hrG,
                       label: sat_s5hnj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hrG: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.readEither7_entry() //  [R2]
         { info_tbl: [(c5hrK,
                       label: Text.Read.readEither7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hrK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5hrO; else goto c5hrN;
       c5hrO: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Text.Read.readEither7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hrN: // global
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = Text.ParserCombinators.ReadP.Fail_closure+3;
           I64[Hp - 40] = k_s5hng_info;
           P64[Hp - 32] = Hp - 60;
           I64[Hp - 24] = sat_s5hnj_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.854347526 UTC

[section ""data" . Text.Read.readEither8_closure" {
     Text.Read.readEither8_closure:
         const Text.Read.readEither8_info;
 },
 sat_s5hns_entry() //  [R1]
         { info_tbl: [(c5hsd,
                       label: sat_s5hns_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hsd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hse; else goto c5hsf;
       c5hse: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hsf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.readEither8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.readEither8_entry() //  [R2]
         { info_tbl: [(c5hsk,
                       label: Text.Read.readEither8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hsk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5hsl; else goto u5hsC;
       c5hsl: // global
           R2 = R2;
           R1 = Text.Read.readEither8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5hsC: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5hrQ() args: 0, res: 0, upd: 0;
     }
 },
 _c5hrQ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hrQ: // global
           _s5hnk::P64 = P64[Sp];
           I64[Sp] = block_c5hrT_info;
           R1 = _s5hnk::P64;
           if (R1 & 7 != 0) goto u5hsE; else goto c5hrU;
       u5hsE: // global
           call _c5hrT(R1) args: 0, res: 0, upd: 0;
       c5hrU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hrT() //  [R1]
         { info_tbl: [(c5hrT,
                       label: block_c5hrT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hrT: // global
           if (R1 & 7 == 1) goto c5hsh; else goto c5hsi;
       c5hsh: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hsi: // global
           I64[Sp - 8] = block_c5hrZ_info;
           _s5hnn::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5hnn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hsF; else goto c5hs0;
       u5hsF: // global
           call _c5hrZ(R1) args: 0, res: 0, upd: 0;
       c5hs0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hrZ() //  [R1]
         { info_tbl: [(c5hrZ,
                       label: block_c5hrZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hrZ: // global
           I64[Sp - 8] = block_c5hs4_info;
           _s5hnp::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s5hnp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hsG; else goto c5hs5;
       u5hsG: // global
           call _c5hs4(R1) args: 0, res: 0, upd: 0;
       c5hs5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hs4() //  [R1]
         { info_tbl: [(c5hs4,
                       label: block_c5hs4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hs4: // global
           _s5hnn::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5hst; else goto c5hsA;
       c5hst: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5hsw; else goto c5hsv;
       c5hsw: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5hsv: // global
           I64[Hp - 40] = sat_s5hns_info;
           P64[Hp - 24] = _s5hnn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hsA: // global
           P64[Sp + 16] = _s5hnn::P64;
           Sp = Sp + 16;
           call _c5hrQ() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.857466014 UTC

[section ""data" . Text.Read.readEither_closure" {
     Text.Read.readEither_closure:
         const Text.Read.readEither_info;
         const 0;
 },
 Text.Read.readEither_entry() //  [R2, R3]
         { info_tbl: [(c5hsP,
                       label: Text.Read.readEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hsP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5hsT; else goto c5hsU;
       c5hsT: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.readEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hsU: // global
           I64[Sp - 16] = block_c5hsN_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           P64[Sp - 24] = Text.Read.readEither7_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5hsN() //  [R1]
         { info_tbl: [(c5hsN,
                       label: block_c5hsN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hsN: // global
           _s5hnw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5hsS_info;
           R3 = _s5hnw::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hsS() //  [R1]
         { info_tbl: [(c5hsS,
                       label: block_c5hsS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hsS: // global
           I64[Sp] = block_c5hsZ_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hsZ() //  [R1]
         { info_tbl: [(c5hsZ,
                       label: block_c5hsZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hsZ: // global
           if (R1 & 7 == 1) goto c5ht6; else goto c5htb;
       c5ht6: // global
           R1 = Text.Read.readEither4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5htb: // global
           I64[Sp - 8] = block_c5ht9_info;
           _s5hnA::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s5hnA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hts; else goto c5htc;
       u5hts: // global
           call _c5ht9(R1) args: 0, res: 0, upd: 0;
       c5htc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ht9() //  [R1]
         { info_tbl: [(c5ht9,
                       label: block_c5ht9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ht9: // global
           if (R1 & 7 == 1) goto c5hti; else goto c5htp;
       c5hti: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5htl; else goto c5htk;
       c5htl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5htk: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5htp: // global
           R1 = Text.Read.readEither1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.859896315 UTC

[section ""data" . Text.Read.readMaybe_closure" {
     Text.Read.readMaybe_closure:
         const Text.Read.readMaybe_info;
         const 0;
 },
 Text.Read.readMaybe_entry() //  [R2, R3]
         { info_tbl: [(c5htD,
                       label: Text.Read.readMaybe_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5htD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5htE; else goto c5htF;
       c5htE: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.readMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5htF: // global
           I64[Sp - 8] = block_c5htx_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.readEither_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5htx() //  [R1]
         { info_tbl: [(c5htx,
                       label: block_c5htx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5htx: // global
           if (R1 & 7 == 1) goto c5htA; else goto c5htB;
       c5htA: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5htB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5htO; else goto c5htN;
       c5htO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5htN: // global
           _s5hnJ::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s5hnJ::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.862042659 UTC

[section ""data" . Text.Read.read_closure" {
     Text.Read.read_closure:
         const Text.Read.read_info;
         const 0;
 },
 Text.Read.read_entry() //  [R2, R3]
         { info_tbl: [(c5htZ,
                       label: Text.Read.read_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5htZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hu0; else goto c5hu1;
       c5hu0: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.read_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hu1: // global
           I64[Sp - 8] = block_c5htT_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.readEither_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5htT() //  [R1]
         { info_tbl: [(c5htT,
                       label: block_c5htT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5htT: // global
           if (R1 & 7 == 1) goto c5htW; else goto c5htX;
       c5htW: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
       c5htX: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.864434027 UTC

[section ""cstring" . Text.Read.$trModule4_bytes" {
     Text.Read.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.865128836 UTC

[section ""data" . Text.Read.$trModule3_closure" {
     Text.Read.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.865870962 UTC

[section ""cstring" . Text.Read.$trModule2_bytes" {
     Text.Read.$trModule2_bytes:
         I8[] [84,101,120,116,46,82,101,97,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.866609749 UTC

[section ""data" . Text.Read.$trModule1_closure" {
     Text.Read.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.867243109 UTC

[section ""data" . Text.Read.$trModule_closure" {
     Text.Read.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.Read.$trModule3_closure+1;
         const Text.Read.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.867827367 UTC

[section ""relreadonly" . S5hqj_srt" {
     S5hqj_srt:
         const Text.Read.readEither_closure;
         const Text.Read.readEither1_closure;
         const Text.Read.readEither4_closure;
         const Text.Read.readMaybe_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Read.read_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.868654111 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:16.870403724 UTC

[section ""data" . Text.Read.reads_closure" {
     Text.Read.reads_closure:
         const Text.Read.reads_info;
 },
 Text.Read.reads_entry() //  [R2]
         { info_tbl: [(c5huc,
                       label: Text.Read.reads_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5huc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hud; else goto c5hue;
       c5hud: // global
           R2 = R2;
           R1 = Text.Read.reads_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hue: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.87485216 UTC

[section ""cstring" . Text.Read.readEither6_bytes" {
     Text.Read.readEither6_bytes:
         I8[] [80,114,101,108,117,100,101,46,114,101,97,100,58,32,110,111,32,112,97,114,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.877009305 UTC

[section ""data" . Text.Read.readEither5_closure" {
     Text.Read.readEither5_closure:
         const Text.Read.readEither5_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.readEither5_entry() //  [R1]
         { info_tbl: [(c5hur,
                       label: Text.Read.readEither5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hur: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hus; else goto c5hut;
       c5hus: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hut: // global
           (_c5huo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5huo::I64 == 0) goto c5huq; else goto c5hup;
       c5huq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5hup: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5huo::I64;
           R2 = Text.Read.readEither6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.881870531 UTC

[section ""data" . Text.Read.readEither4_closure" {
     Text.Read.readEither4_closure:
         const Data.Either.Left_con_info;
         const Text.Read.readEither5_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.88368807 UTC

[section ""cstring" . Text.Read.readEither3_bytes" {
     Text.Read.readEither3_bytes:
         I8[] [80,114,101,108,117,100,101,46,114,101,97,100,58,32,97,109,98,105,103,117,111,117,115,32,112,97,114,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.88576797 UTC

[section ""data" . Text.Read.readEither2_closure" {
     Text.Read.readEither2_closure:
         const Text.Read.readEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.readEither2_entry() //  [R1]
         { info_tbl: [(c5huJ,
                       label: Text.Read.readEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5huJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5huK; else goto c5huL;
       c5huK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5huL: // global
           (_c5huG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5huG::I64 == 0) goto c5huI; else goto c5huH;
       c5huI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5huH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5huG::I64;
           R2 = Text.Read.readEither3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.88990028 UTC

[section ""data" . Text.Read.readEither1_closure" {
     Text.Read.readEither1_closure:
         const Data.Either.Left_con_info;
         const Text.Read.readEither2_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.892166992 UTC

[section ""data" . Text.Read.readEither7_closure" {
     Text.Read.readEither7_closure:
         const Text.Read.readEither7_info;
 },
 k_s5hng_entry() //  [R1]
         { info_tbl: [(c5hv4,
                       label: k_s5hng_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hv4: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5hnj_entry() //  [R1, R2]
         { info_tbl: [(c5hvc,
                       label: sat_s5hnj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hvc: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.readEither7_entry() //  [R2]
         { info_tbl: [(c5hvg,
                       label: Text.Read.readEither7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hvg: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5hvk; else goto c5hvj;
       c5hvk: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Text.Read.readEither7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hvj: // global
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = Text.ParserCombinators.ReadP.Fail_closure+3;
           I64[Hp - 40] = k_s5hng_info;
           P64[Hp - 32] = Hp - 60;
           I64[Hp - 24] = sat_s5hnj_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.901413326 UTC

[section ""data" . Text.Read.readEither8_closure" {
     Text.Read.readEither8_closure:
         const Text.Read.readEither8_info;
 },
 sat_s5hns_entry() //  [R1]
         { info_tbl: [(c5hvY,
                       label: sat_s5hns_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hvY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hvZ; else goto c5hw0;
       c5hvZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hw0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.readEither8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.readEither8_entry() //  [R2]
         { info_tbl: [(c5hw5,
                       label: Text.Read.readEither8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hw5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5hw6; else goto u5hwn;
       c5hw6: // global
           R2 = R2;
           R1 = Text.Read.readEither8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5hwn: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5hvB() args: 0, res: 0, upd: 0;
     }
 },
 _c5hvB() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hvB: // global
           _s5hnk::P64 = P64[Sp];
           I64[Sp] = block_c5hvE_info;
           R1 = _s5hnk::P64;
           if (R1 & 7 != 0) goto u5hwp; else goto c5hvF;
       u5hwp: // global
           call _c5hvE(R1) args: 0, res: 0, upd: 0;
       c5hvF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hvE() //  [R1]
         { info_tbl: [(c5hvE,
                       label: block_c5hvE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hvE: // global
           if (R1 & 7 == 1) goto c5hw2; else goto c5hw3;
       c5hw2: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hw3: // global
           I64[Sp - 8] = block_c5hvK_info;
           _s5hnn::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5hnn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hwq; else goto c5hvL;
       u5hwq: // global
           call _c5hvK(R1) args: 0, res: 0, upd: 0;
       c5hvL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hvK() //  [R1]
         { info_tbl: [(c5hvK,
                       label: block_c5hvK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hvK: // global
           I64[Sp - 8] = block_c5hvP_info;
           _s5hnp::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s5hnp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hwr; else goto c5hvQ;
       u5hwr: // global
           call _c5hvP(R1) args: 0, res: 0, upd: 0;
       c5hvQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hvP() //  [R1]
         { info_tbl: [(c5hvP,
                       label: block_c5hvP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hvP: // global
           _s5hnn::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5hwe; else goto c5hwl;
       c5hwe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5hwh; else goto c5hwg;
       c5hwh: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5hwg: // global
           I64[Hp - 40] = sat_s5hns_info;
           P64[Hp - 24] = _s5hnn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hwl: // global
           P64[Sp + 16] = _s5hnn::P64;
           Sp = Sp + 16;
           call _c5hvB() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.914848028 UTC

[section ""data" . Text.Read.readEither_closure" {
     Text.Read.readEither_closure:
         const Text.Read.readEither_info;
         const 0;
 },
 Text.Read.readEither_entry() //  [R2, R3]
         { info_tbl: [(c5hx5,
                       label: Text.Read.readEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hx5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5hx9; else goto c5hxa;
       c5hx9: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.readEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hxa: // global
           I64[Sp - 16] = block_c5hx3_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           P64[Sp - 24] = Text.Read.readEither7_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5hx3() //  [R1]
         { info_tbl: [(c5hx3,
                       label: block_c5hx3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hx3: // global
           _s5hnw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5hx8_info;
           R3 = _s5hnw::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hx8() //  [R1]
         { info_tbl: [(c5hx8,
                       label: block_c5hx8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hx8: // global
           I64[Sp] = block_c5hxf_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hxf() //  [R1]
         { info_tbl: [(c5hxf,
                       label: block_c5hxf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hxf: // global
           if (R1 & 7 == 1) goto c5hxm; else goto c5hxr;
       c5hxm: // global
           R1 = Text.Read.readEither4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hxr: // global
           I64[Sp - 8] = block_c5hxp_info;
           _s5hnA::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s5hnA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hxI; else goto c5hxs;
       u5hxI: // global
           call _c5hxp(R1) args: 0, res: 0, upd: 0;
       c5hxs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hxp() //  [R1]
         { info_tbl: [(c5hxp,
                       label: block_c5hxp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hxp: // global
           if (R1 & 7 == 1) goto c5hxy; else goto c5hxF;
       c5hxy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5hxB; else goto c5hxA;
       c5hxB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5hxA: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hxF: // global
           R1 = Text.Read.readEither1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.927496065 UTC

[section ""data" . Text.Read.readMaybe_closure" {
     Text.Read.readMaybe_closure:
         const Text.Read.readMaybe_info;
         const 0;
 },
 Text.Read.readMaybe_entry() //  [R2, R3]
         { info_tbl: [(c5hyj,
                       label: Text.Read.readMaybe_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hyj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hyk; else goto c5hyl;
       c5hyk: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.readMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hyl: // global
           I64[Sp - 8] = block_c5hyd_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.readEither_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hyd() //  [R1]
         { info_tbl: [(c5hyd,
                       label: block_c5hyd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hyd: // global
           if (R1 & 7 == 1) goto c5hyg; else goto c5hyh;
       c5hyg: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hyh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5hyu; else goto c5hyt;
       c5hyu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5hyt: // global
           _s5hnJ::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s5hnJ::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.934109287 UTC

[section ""data" . Text.Read.read_closure" {
     Text.Read.read_closure:
         const Text.Read.read_info;
         const 0;
 },
 Text.Read.read_entry() //  [R2, R3]
         { info_tbl: [(c5hyR,
                       label: Text.Read.read_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hyR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hyS; else goto c5hyT;
       c5hyS: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.read_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hyT: // global
           I64[Sp - 8] = block_c5hyL_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.readEither_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hyL() //  [R1]
         { info_tbl: [(c5hyL,
                       label: block_c5hyL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hyL: // global
           if (R1 & 7 == 1) goto c5hyO; else goto c5hyP;
       c5hyO: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
       c5hyP: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.940402726 UTC

[section ""cstring" . Text.Read.$trModule4_bytes" {
     Text.Read.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.942206417 UTC

[section ""data" . Text.Read.$trModule3_closure" {
     Text.Read.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.943892692 UTC

[section ""cstring" . Text.Read.$trModule2_bytes" {
     Text.Read.$trModule2_bytes:
         I8[] [84,101,120,116,46,82,101,97,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.946191948 UTC

[section ""data" . Text.Read.$trModule1_closure" {
     Text.Read.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.948029209 UTC

[section ""data" . Text.Read.$trModule_closure" {
     Text.Read.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.Read.$trModule3_closure+1;
         const Text.Read.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:16.949819272 UTC

[section ""relreadonly" . S5hqj_srt" {
     S5hqj_srt:
         const Text.Read.readEither_closure;
         const Text.Read.readEither1_closure;
         const Text.Read.readEither4_closure;
         const Text.Read.readMaybe_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Read.read_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.104519527 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:17.107476992 UTC

[section ""data" . Text.Read.reads_closure" {
     Text.Read.reads_closure:
         const Text.Read.reads_info;
 },
 Text.Read.reads_entry() //  [R2]
         { info_tbl: [(c5hzW,
                       label: Text.Read.reads_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hzW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hzX; else goto c5hzY;
       c5hzX: // global
           R2 = R2;
           R1 = Text.Read.reads_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hzY: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.115423254 UTC

[section ""cstring" . Text.Read.readEither6_bytes" {
     Text.Read.readEither6_bytes:
         I8[] [80,114,101,108,117,100,101,46,114,101,97,100,58,32,110,111,32,112,97,114,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.118626141 UTC

[section ""data" . Text.Read.readEither5_closure" {
     Text.Read.readEither5_closure:
         const Text.Read.readEither5_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.readEither5_entry() //  [R1]
         { info_tbl: [(c5hAd,
                       label: Text.Read.readEither5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hAd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hAe; else goto c5hAf;
       c5hAe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hAf: // global
           (_c5hAa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5hAa::I64 == 0) goto c5hAc; else goto c5hAb;
       c5hAc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5hAb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5hAa::I64;
           R2 = Text.Read.readEither6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.124536665 UTC

[section ""data" . Text.Read.readEither4_closure" {
     Text.Read.readEither4_closure:
         const Data.Either.Left_con_info;
         const Text.Read.readEither5_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.126890937 UTC

[section ""cstring" . Text.Read.readEither3_bytes" {
     Text.Read.readEither3_bytes:
         I8[] [80,114,101,108,117,100,101,46,114,101,97,100,58,32,97,109,98,105,103,117,111,117,115,32,112,97,114,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.129345064 UTC

[section ""data" . Text.Read.readEither2_closure" {
     Text.Read.readEither2_closure:
         const Text.Read.readEither2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.readEither2_entry() //  [R1]
         { info_tbl: [(c5hAw,
                       label: Text.Read.readEither2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hAw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hAx; else goto c5hAy;
       c5hAx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hAy: // global
           (_c5hAt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5hAt::I64 == 0) goto c5hAv; else goto c5hAu;
       c5hAv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5hAu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5hAt::I64;
           R2 = Text.Read.readEither3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.136086559 UTC

[section ""data" . Text.Read.readEither1_closure" {
     Text.Read.readEither1_closure:
         const Data.Either.Left_con_info;
         const Text.Read.readEither2_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.140429691 UTC

[section ""data" . Text.Read.readEither7_closure" {
     Text.Read.readEither7_closure:
         const Text.Read.readEither7_info;
 },
 k_s5hzj_entry() //  [R1]
         { info_tbl: [(c5hAS,
                       label: k_s5hzj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hAS: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s5hzm_entry() //  [R1, R2]
         { info_tbl: [(c5hB0,
                       label: sat_s5hzm_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hB0: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.readEither7_entry() //  [R2]
         { info_tbl: [(c5hB4,
                       label: Text.Read.readEither7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hB4: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c5hB8; else goto c5hB7;
       c5hB8: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Text.Read.readEither7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5hB7: // global
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = Text.ParserCombinators.ReadP.Fail_closure+3;
           I64[Hp - 40] = k_s5hzj_info;
           P64[Hp - 32] = Hp - 60;
           I64[Hp - 24] = sat_s5hzm_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.153721254 UTC

[section ""data" . Text.Read.readEither8_closure" {
     Text.Read.readEither8_closure:
         const Text.Read.readEither8_info;
 },
 sat_s5hzv_entry() //  [R1]
         { info_tbl: [(c5hBS,
                       label: sat_s5hzv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hBS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5hBT; else goto c5hBU;
       c5hBT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5hBU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.readEither8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.readEither8_entry() //  [R2]
         { info_tbl: [(c5hBZ,
                       label: Text.Read.readEither8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hBZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5hC0; else goto u5hCh;
       c5hC0: // global
           R2 = R2;
           R1 = Text.Read.readEither8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u5hCh: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c5hBv() args: 0, res: 0, upd: 0;
     }
 },
 _c5hBv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hBv: // global
           _s5hzn::P64 = P64[Sp];
           I64[Sp] = block_c5hBy_info;
           R1 = _s5hzn::P64;
           if (R1 & 7 != 0) goto u5hCj; else goto c5hBz;
       u5hCj: // global
           call _c5hBy(R1) args: 0, res: 0, upd: 0;
       c5hBz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hBy() //  [R1]
         { info_tbl: [(c5hBy,
                       label: block_c5hBy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hBy: // global
           if (R1 & 7 == 1) goto c5hBW; else goto c5hBX;
       c5hBW: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hBX: // global
           I64[Sp - 8] = block_c5hBE_info;
           _s5hzq::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5hzq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hCk; else goto c5hBF;
       u5hCk: // global
           call _c5hBE(R1) args: 0, res: 0, upd: 0;
       c5hBF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hBE() //  [R1]
         { info_tbl: [(c5hBE,
                       label: block_c5hBE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hBE: // global
           I64[Sp - 8] = block_c5hBJ_info;
           _s5hzs::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s5hzs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hCl; else goto c5hBK;
       u5hCl: // global
           call _c5hBJ(R1) args: 0, res: 0, upd: 0;
       c5hBK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hBJ() //  [R1]
         { info_tbl: [(c5hBJ,
                       label: block_c5hBJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hBJ: // global
           _s5hzq::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c5hC8; else goto c5hCf;
       c5hC8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c5hCb; else goto c5hCa;
       c5hCb: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5hCa: // global
           I64[Hp - 40] = sat_s5hzv_info;
           P64[Hp - 24] = _s5hzq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hCf: // global
           P64[Sp + 16] = _s5hzq::P64;
           Sp = Sp + 16;
           call _c5hBv() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.177082081 UTC

[section ""data" . Text.Read.readEither_closure" {
     Text.Read.readEither_closure:
         const Text.Read.readEither_info;
         const 0;
 },
 Text.Read.readEither_entry() //  [R2, R3]
         { info_tbl: [(c5hD6,
                       label: Text.Read.readEither_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hD6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5hDa; else goto c5hDb;
       c5hDa: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.readEither_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hDb: // global
           I64[Sp - 16] = block_c5hD4_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           P64[Sp - 24] = Text.Read.readEither7_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c5hD4() //  [R1]
         { info_tbl: [(c5hD4,
                       label: block_c5hD4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hD4: // global
           _s5hzz::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5hD9_info;
           R3 = _s5hzz::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hD9() //  [R1]
         { info_tbl: [(c5hD9,
                       label: block_c5hD9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hD9: // global
           I64[Sp] = block_c5hDg_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hDg() //  [R1]
         { info_tbl: [(c5hDg,
                       label: block_c5hDg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hDg: // global
           if (R1 & 7 == 1) goto c5hDn; else goto c5hDs;
       c5hDn: // global
           R1 = Text.Read.readEither4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hDs: // global
           I64[Sp - 8] = block_c5hDq_info;
           _s5hzD::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s5hzD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5hDJ; else goto c5hDt;
       u5hDJ: // global
           call _c5hDq(R1) args: 0, res: 0, upd: 0;
       c5hDt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5hDq() //  [R1]
         { info_tbl: [(c5hDq,
                       label: block_c5hDq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hDq: // global
           if (R1 & 7 == 1) goto c5hDz; else goto c5hDG;
       c5hDz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5hDC; else goto c5hDB;
       c5hDC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5hDB: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hDG: // global
           R1 = Text.Read.readEither1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.190818763 UTC

[section ""data" . Text.Read.readMaybe_closure" {
     Text.Read.readMaybe_closure:
         const Text.Read.readMaybe_info;
         const 0;
 },
 Text.Read.readMaybe_entry() //  [R2, R3]
         { info_tbl: [(c5hEt,
                       label: Text.Read.readMaybe_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hEt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hEu; else goto c5hEv;
       c5hEu: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.readMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hEv: // global
           I64[Sp - 8] = block_c5hEn_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.readEither_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hEn() //  [R1]
         { info_tbl: [(c5hEn,
                       label: block_c5hEn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hEn: // global
           if (R1 & 7 == 1) goto c5hEq; else goto c5hEr;
       c5hEq: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5hEr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5hEE; else goto c5hED;
       c5hEE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5hED: // global
           _s5hzM::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s5hzM::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.197161669 UTC

[section ""data" . Text.Read.read_closure" {
     Text.Read.read_closure:
         const Text.Read.read_info;
         const 0;
 },
 Text.Read.read_entry() //  [R2, R3]
         { info_tbl: [(c5hF4,
                       label: Text.Read.read_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hF4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5hF5; else goto c5hF6;
       c5hF5: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.read_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5hF6: // global
           I64[Sp - 8] = block_c5hEY_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.readEither_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5hEY() //  [R1]
         { info_tbl: [(c5hEY,
                       label: block_c5hEY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5hEY: // global
           if (R1 & 7 == 1) goto c5hF1; else goto c5hF2;
       c5hF1: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
       c5hF2: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.20272477 UTC

[section ""cstring" . Text.Read.$trModule4_bytes" {
     Text.Read.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.204382944 UTC

[section ""data" . Text.Read.$trModule3_closure" {
     Text.Read.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.206086507 UTC

[section ""cstring" . Text.Read.$trModule2_bytes" {
     Text.Read.$trModule2_bytes:
         I8[] [84,101,120,116,46,82,101,97,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.207742213 UTC

[section ""data" . Text.Read.$trModule1_closure" {
     Text.Read.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.209992322 UTC

[section ""data" . Text.Read.$trModule_closure" {
     Text.Read.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.Read.$trModule3_closure+1;
         const Text.Read.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:17.211751779 UTC

[section ""relreadonly" . S5hDK_srt" {
     S5hDK_srt:
         const Text.Read.readEither_closure;
         const Text.Read.readEither1_closure;
         const Text.Read.readEither4_closure;
         const Text.Read.readMaybe_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Read.read_closure;
 }]

