
==================== Raw Cmm ====================
2018-03-16 15:58:11.617442612 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:58:11.618666208 UTC

[section ""cstring" . Text.Read.Lex.$trModule4_bytes" {
     Text.Read.Lex.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.620633006 UTC

[section ""data" . Text.Read.Lex.$trModule3_closure" {
     Text.Read.Lex.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.622519828 UTC

[section ""cstring" . Text.Read.Lex.$trModule2_bytes" {
     Text.Read.Lex.$trModule2_bytes:
         I8[] [84,101,120,116,46,82,101,97,100,46,76,101,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.624732632 UTC

[section ""data" . Text.Read.Lex.$trModule1_closure" {
     Text.Read.Lex.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.626492076 UTC

[section ""data" . Text.Read.Lex.$trModule_closure" {
     Text.Read.Lex.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.Read.Lex.$trModule3_closure+1;
         const Text.Read.Lex.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.628296381 UTC

[section ""data" . $krep_r3y8E_closure" {
     $krep_r3y8E_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.630167963 UTC

[section ""data" . $krep1_r3y8F_closure" {
     $krep1_r3y8F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.632048971 UTC

[section ""data" . $krep2_r3y8G_closure" {
     $krep2_r3y8G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.63472175 UTC

[section ""data" . $krep3_r3y8H_closure" {
     $krep3_r3y8H_closure:
         const :_con_info;
         const $krep_r3y8E_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.636496736 UTC

[section ""data" . $krep4_r3y8I_closure" {
     $krep4_r3y8I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_r3y8H_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.63830669 UTC

[section ""data" . $krep5_r3y8J_closure" {
     $krep5_r3y8J_closure:
         const :_con_info;
         const $krep1_r3y8F_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.640095164 UTC

[section ""data" . $krep6_r3y8K_closure" {
     $krep6_r3y8K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep5_r3y8J_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.641989003 UTC

[section ""data" . $krep7_r3y8L_closure" {
     $krep7_r3y8L_closure:
         const :_con_info;
         const $krep6_r3y8K_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.644116163 UTC

[section ""data" . $krep8_r3y8M_closure" {
     $krep8_r3y8M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep7_r3y8L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.645919323 UTC

[section ""data" . $krep9_r3y8N_closure" {
     $krep9_r3y8N_closure:
         const :_con_info;
         const $krep2_r3y8G_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.647698227 UTC

[section ""data" . $krep10_r3y8O_closure" {
     $krep10_r3y8O_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep9_r3y8N_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.649815189 UTC

[section ""cstring" . Text.Read.Lex.$tcNumber2_bytes" {
     Text.Read.Lex.$tcNumber2_bytes:
         I8[] [78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.651537233 UTC

[section ""data" . Text.Read.Lex.$tcNumber1_closure" {
     Text.Read.Lex.$tcNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tcNumber2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.653763874 UTC

[section ""data" . Text.Read.Lex.$tcNumber_closure" {
     Text.Read.Lex.$tcNumber_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tcNumber1_closure+1;
         const GHC.Types.krep$*_closure;
         const 309030926258572567;
         const 15861928963352354800;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.655620733 UTC

[section ""data" . $krep11_r3y8P_closure" {
     $krep11_r3y8P_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Read.Lex.$tcNumber_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.657463802 UTC

[section ""data" . $krep12_r3y8Q_closure" {
     $krep12_r3y8Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3y8I_closure+1;
         const $krep11_r3y8P_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.659240206 UTC

[section ""data" . $krep13_r3y8R_closure" {
     $krep13_r3y8R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r3y8M_closure+1;
         const $krep12_r3y8Q_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.660972932 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal1_closure" {
     Text.Read.Lex.$tc'MkDecimal1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r3y8K_closure+1;
         const $krep13_r3y8R_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.663210715 UTC

[section ""cstring" . Text.Read.Lex.$tc'MkDecimal3_bytes" {
     Text.Read.Lex.$tc'MkDecimal3_bytes:
         I8[] [39,77,107,68,101,99,105,109,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.664876499 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal2_closure" {
     Text.Read.Lex.$tc'MkDecimal2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'MkDecimal3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.666984492 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal_closure" {
     Text.Read.Lex.$tc'MkDecimal_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'MkDecimal2_closure+1;
         const Text.Read.Lex.$tc'MkDecimal1_closure+4;
         const 3768064156751246198;
         const 12661213050981530502;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.668776357 UTC

[section ""data" . $krep14_r3y8S_closure" {
     $krep14_r3y8S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r3y8K_closure+1;
         const $krep11_r3y8P_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.670478041 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber1_closure" {
     Text.Read.Lex.$tc'MkNumber1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3y8F_closure+1;
         const $krep14_r3y8S_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.672571433 UTC

[section ""cstring" . Text.Read.Lex.$tc'MkNumber3_bytes" {
     Text.Read.Lex.$tc'MkNumber3_bytes:
         I8[] [39,77,107,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.674240811 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber2_closure" {
     Text.Read.Lex.$tc'MkNumber2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'MkNumber3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.675926519 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber_closure" {
     Text.Read.Lex.$tc'MkNumber_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'MkNumber2_closure+1;
         const Text.Read.Lex.$tc'MkNumber1_closure+4;
         const 13396293166029931455;
         const 9655480518931438202;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.677762188 UTC

[section ""cstring" . Text.Read.Lex.$tcLexeme2_bytes" {
     Text.Read.Lex.$tcLexeme2_bytes:
         I8[] [76,101,120,101,109,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.679474192 UTC

[section ""data" . Text.Read.Lex.$tcLexeme1_closure" {
     Text.Read.Lex.$tcLexeme1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tcLexeme2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.681228735 UTC

[section ""data" . Text.Read.Lex.$tcLexeme_closure" {
     Text.Read.Lex.$tcLexeme_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tcLexeme1_closure+1;
         const GHC.Types.krep$*_closure;
         const 80462090517814070;
         const 11862718491065697853;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.684059265 UTC

[section ""data" . Text.Read.Lex.$tc'EOF1_closure" {
     Text.Read.Lex.$tc'EOF1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Read.Lex.$tcLexeme_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.685817086 UTC

[section ""cstring" . Text.Read.Lex.$tc'EOF3_bytes" {
     Text.Read.Lex.$tc'EOF3_bytes:
         I8[] [39,69,79,70]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.687483294 UTC

[section ""data" . Text.Read.Lex.$tc'EOF2_closure" {
     Text.Read.Lex.$tc'EOF2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'EOF3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.689321489 UTC

[section ""data" . Text.Read.Lex.$tc'EOF_closure" {
     Text.Read.Lex.$tc'EOF_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'EOF2_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3510729917506789415;
         const 3927434500167946503;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.691207544 UTC

[section ""data" . Text.Read.Lex.$tc'Ident1_closure" {
     Text.Read.Lex.$tc'Ident1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r3y8O_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.693445736 UTC

[section ""cstring" . Text.Read.Lex.$tc'String2_bytes" {
     Text.Read.Lex.$tc'String2_bytes:
         I8[] [39,83,116,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.695150913 UTC

[section ""data" . Text.Read.Lex.$tc'String1_closure" {
     Text.Read.Lex.$tc'String1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'String2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.697025985 UTC

[section ""data" . Text.Read.Lex.$tc'String_closure" {
     Text.Read.Lex.$tc'String_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'String1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 4234975262003182519;
         const 13764813366371540099;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.6989142 UTC

[section ""cstring" . Text.Read.Lex.$tc'Punc2_bytes" {
     Text.Read.Lex.$tc'Punc2_bytes:
         I8[] [39,80,117,110,99]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.70059548 UTC

[section ""data" . Text.Read.Lex.$tc'Punc1_closure" {
     Text.Read.Lex.$tc'Punc1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Punc2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.703732017 UTC

[section ""data" . Text.Read.Lex.$tc'Punc_closure" {
     Text.Read.Lex.$tc'Punc_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Punc1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 12518860736485891069;
         const 4367633479442506190;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.705607368 UTC

[section ""cstring" . Text.Read.Lex.$tc'Ident3_bytes" {
     Text.Read.Lex.$tc'Ident3_bytes:
         I8[] [39,73,100,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.707235467 UTC

[section ""data" . Text.Read.Lex.$tc'Ident2_closure" {
     Text.Read.Lex.$tc'Ident2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Ident3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.708974662 UTC

[section ""data" . Text.Read.Lex.$tc'Ident_closure" {
     Text.Read.Lex.$tc'Ident_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Ident2_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 17378133866674838049;
         const 11361322998352874125;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.710849092 UTC

[section ""cstring" . Text.Read.Lex.$tc'Symbol2_bytes" {
     Text.Read.Lex.$tc'Symbol2_bytes:
         I8[] [39,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.712937307 UTC

[section ""data" . Text.Read.Lex.$tc'Symbol1_closure" {
     Text.Read.Lex.$tc'Symbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Symbol2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.714775771 UTC

[section ""data" . Text.Read.Lex.$tc'Symbol_closure" {
     Text.Read.Lex.$tc'Symbol_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Symbol1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 434905475898525586;
         const 17609692850475477756;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.716563718 UTC

[section ""data" . Text.Read.Lex.$tc'Char1_closure" {
     Text.Read.Lex.$tc'Char1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3y8G_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.719030302 UTC

[section ""cstring" . Text.Read.Lex.$tc'Char3_bytes" {
     Text.Read.Lex.$tc'Char3_bytes:
         I8[] [39,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.720831239 UTC

[section ""data" . Text.Read.Lex.$tc'Char2_closure" {
     Text.Read.Lex.$tc'Char2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Char3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.723128361 UTC

[section ""data" . Text.Read.Lex.$tc'Char_closure" {
     Text.Read.Lex.$tc'Char_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Char2_closure+1;
         const Text.Read.Lex.$tc'Char1_closure+4;
         const 4794546904228625478;
         const 396576625805862141;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.725001723 UTC

[section ""data" . Text.Read.Lex.$tc'Number1_closure" {
     Text.Read.Lex.$tc'Number1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r3y8P_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.726843401 UTC

[section ""cstring" . Text.Read.Lex.$tc'Number3_bytes" {
     Text.Read.Lex.$tc'Number3_bytes:
         I8[] [39,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.728687978 UTC

[section ""data" . Text.Read.Lex.$tc'Number2_closure" {
     Text.Read.Lex.$tc'Number2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Number3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.730838818 UTC

[section ""data" . Text.Read.Lex.$tc'Number_closure" {
     Text.Read.Lex.$tc'Number_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Number2_closure+1;
         const Text.Read.Lex.$tc'Number1_closure+4;
         const 3115835552307058655;
         const 14198768466951480548;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.733083422 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme9_bytes" {
     Text.Read.Lex.$fShowLexeme9_bytes:
         I8[] [77,107,68,101,99,105,109,97,108,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.735521819 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme8_closure" {
     Text.Read.Lex.$fShowLexeme8_closure:
         const Text.Read.Lex.$fShowLexeme8_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme8_entry() //  [R1]
         { []
         }
     {offset
       c3CM3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CM4; else goto c3CM5;
       c3CM4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CM5: // global
           (_c3CM0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3CM0::I64 == 0) goto c3CM2; else goto c3CM1;
       c3CM2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3CM1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3CM0::I64;
           R2 = Text.Read.Lex.$fShowLexeme9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme8_info" {
     Text.Read.Lex.$fShowLexeme8_info:
         const Text.Read.Lex.$fShowLexeme8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.739264238 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme10_closure" {
     Text.Read.Lex.$fShowLexeme10_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.741062201 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme11_bytes" {
     Text.Read.Lex.$fShowLexeme11_bytes:
         I8[] [77,107,78,117,109,98,101,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.758328313 UTC

[section ""data" . Text.Read.Lex.$w$cshowsPrec_closure" {
     Text.Read.Lex.$w$cshowsPrec_closure:
         const Text.Read.Lex.$w$cshowsPrec_info;
         const 0;
 },
 sat_s3ydC_entry() //  [R1]
         { []
         }
     {offset
       c3CNi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3CNp; else goto c3CNq;
       c3CNp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CNq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3CNf_info;
           _s3ydr::P64 = P64[R1 + 16];
           _s3ydv::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3ydr::P64;
           P64[Sp - 24] = _s3ydv::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3CNx; else goto c3CNg;
       u3CNx: // global
           call _c3CNf(R1) args: 0, res: 0, upd: 0;
       c3CNg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ydC_info" {
     sat_s3ydC_info:
         const sat_s3ydC_entry;
         const 3;
         const 15;
 },
 _c3CNf() //  [R1]
         { []
         }
     {offset
       c3CNf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CNt; else goto c3CNs;
       c3CNt: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3CNs: // global
           _s3ydx::I64 = I64[R1 + 7];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3CNm_info;
           R4 = Hp - 24;
           R3 = _s3ydx::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3CNf_info" {
     block_c3CNf_info:
         const _c3CNf;
         const 2;
         const 30;
 },
 _c3CNm() //  [R1, R2]
         { []
         }
     {offset
       c3CNm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CNw; else goto c3CNv;
       c3CNw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3CNv: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3CNm_info" {
     block_c3CNm_info:
         const _c3CNm;
         const 0;
         const 30;
 },
 showl_s3ydr_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CNC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3CND; else goto c3CNE;
       c3CND: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CNE: // global
           I64[Sp - 24] = block_c3CN5_info;
           _s3ydr::P64 = R1;
           _s3ydq::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3ydq::P64;
           P64[Sp - 8] = _s3ydr::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3CNL; else goto c3CN6;
       u3CNL: // global
           call _c3CN5(R1) args: 0, res: 0, upd: 0;
       c3CN6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_s3ydr_info" {
     showl_s3ydr_info:
         const showl_s3ydr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3CN5() //  [R1]
         { []
         }
     {offset
       c3CN5: // global
           if (R1 & 7 == 1) goto c3CNz; else goto c3CNA;
       c3CNz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CNA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3CNK; else goto c3CNJ;
       c3CNK: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CNJ: // global
           _s3ydu::P64 = P64[R1 + 6];
           _s3ydv::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s3ydC_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3ydu::P64;
           P64[Hp - 24] = _s3ydv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3CN5_info" {
     block_c3CN5_info:
         const _c3CN5;
         const 2;
         const 30;
 },
 sat_s3ydD_entry() //  [R1]
         { []
         }
     {offset
       c3CNM: // global
           _s3ydD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CNN; else goto c3CNO;
       c3CNO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3CNQ; else goto c3CNP;
       c3CNQ: // global
           HpAlloc = 40;
           goto c3CNN;
       c3CNN: // global
           R1 = _s3ydD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CNP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ydD::P64;
           _s3ydi::P64 = P64[_s3ydD::P64 + 16];
           _s3ydn::P64 = P64[_s3ydD::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure;
           P64[Hp - 16] = _s3ydi::P64;
           I64[Hp - 8] = showl_s3ydr_info;
           P64[Hp] = Hp - 30;
           R2 = _s3ydn::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_s3ydr_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ydD_info" {
     sat_s3ydD_info:
         const sat_s3ydD_entry;
         const 2;
         const 18;
 },
 sat_s3ydH_entry() //  [R1]
         { []
         }
     {offset
       c3CNR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3CNV; else goto c3CNW;
       c3CNV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CNW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3CMQ_info;
           _s3ydi::P64 = P64[R1 + 16];
           _s3ydn::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3ydi::P64;
           P64[Sp - 24] = _s3ydn::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3CO3; else goto c3CMR;
       u3CO3: // global
           call _c3CMQ(R1) args: 0, res: 0, upd: 0;
       c3CMR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ydH_info" {
     sat_s3ydH_info:
         const sat_s3ydH_entry;
         const 3;
         const 15;
 },
 _c3CMQ() //  [R1]
         { []
         }
     {offset
       c3CMQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CNZ; else goto c3CNY;
       c3CNZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3CNY: // global
           _s3ydp::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_s3ydD_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3CNS_info;
           R4 = Hp - 24;
           R3 = _s3ydp::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3CMQ_info" {
     block_c3CMQ_info:
         const _c3CMQ;
         const 2;
         const 30;
 },
 _c3CNS() //  [R1, R2]
         { []
         }
     {offset
       c3CNS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CO2; else goto c3CO1;
       c3CO2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3CO1: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3CNS_info" {
     block_c3CNS_info:
         const _c3CNS;
         const 0;
         const 30;
 },
 sat_s3ydI_entry() //  [R1]
         { []
         }
     {offset
       c3CO8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3CO9; else goto c3COa;
       c3CO9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3COa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3CMG_info;
           _s3ydi::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3ydi::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3COh; else goto c3CMH;
       u3COh: // global
           call _c3CMG(R1) args: 0, res: 0, upd: 0;
       c3CMH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ydI_info" {
     sat_s3ydI_info:
         const sat_s3ydI_entry;
         const 2;
         const 18;
 },
 _c3CMG() //  [R1]
         { []
         }
     {offset
       c3CMG: // global
           _s3ydi::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3CO5; else goto c3CO6;
       c3CO5: // global
           R3 = _s3ydi::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       c3CO6: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3COg; else goto c3COf;
       c3COg: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3COf: // global
           _s3ydm::P64 = P64[R1 + 6];
           _s3ydn::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s3ydH_info;
           P64[Hp - 40] = _s3ydi::P64;
           P64[Hp - 32] = _s3ydm::P64;
           P64[Hp - 24] = _s3ydn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3CMG_info" {
     block_c3CMG_info:
         const _c3CMG;
         const 1;
         const 30;
 },
 sat_s3ydN_entry() //  [R1]
         { []
         }
     {offset
       c3COi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3COn; else goto c3COo;
       c3COn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3COo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3CMx_info;
           _s3ydg::P64 = P64[R1 + 24];
           _s3ydi::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s3ydg::P64;
           P64[Sp - 24] = _s3ydi::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3COv; else goto c3CMy;
       u3COv: // global
           call _c3CMx(R1) args: 0, res: 0, upd: 0;
       c3CMy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ydN_info" {
     sat_s3ydN_info:
         const sat_s3ydN_entry;
         const 3;
         const 15;
 },
 _c3CMx() //  [R1]
         { []
         }
     {offset
       c3CMx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3COr; else goto c3COq;
       c3COr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3COq: // global
           _s3ydk::I64 = I64[R1 + 7];
           I64[Hp - 48] = sat_s3ydI_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp + 16] = block_c3COk_info;
           R4 = Hp - 14;
           R3 = _s3ydk::I64;
           R2 = 11;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3CMx_info" {
     block_c3CMx_info:
         const _c3CMx;
         const 2;
         const 30;
 },
 _c3COk() //  [R1, R2]
         { []
         }
     {offset
       c3COk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3COu; else goto c3COt;
       c3COu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3COt: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3COk_info" {
     block_c3COk_info:
         const _c3COk;
         const 0;
         const 30;
 },
 p_s3ydh_entry() //  [R1, R2]
         { []
         }
     {offset
       c3COw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3COA; else goto c3COz;
       c3COA: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3COz: // global
           _s3ydf::P64 = P64[R1 + 7];
           _s3ydg::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s3ydN_info;
           P64[Hp - 16] = _s3ydf::P64;
           P64[Hp - 8] = _s3ydg::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = Text.Read.Lex.$fShowLexeme11_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3ydh_info" {
     p_s3ydh_info:
         const p_s3ydh_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3ydR_entry() //  [R1]
         { []
         }
     {offset
       c3COP: // global
           _s3ydR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3COQ; else goto c3COR;
       c3COR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3COT; else goto c3COS;
       c3COT: // global
           HpAlloc = 24;
           goto c3COQ;
       c3COQ: // global
           R1 = _s3ydR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3COS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ydR::P64;
           _s3ydh::P64 = P64[_s3ydR::P64 + 16];
           _s3ydP::P64 = P64[_s3ydR::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3ydP::P64;
           R2 = Hp - 14;
           R1 = _s3ydh::P64;
           Sp = Sp - 16;
           call p_s3ydh_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ydR_info" {
     sat_s3ydR_info:
         const sat_s3ydR_entry;
         const 2;
         const 18;
 },
 sat_s3ydS_entry() //  [R1, R2]
         { []
         }
     {offset
       c3COV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3COZ; else goto c3COY;
       c3COZ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3COY: // global
           _s3ydh::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3ydR_info;
           P64[Hp - 32] = _s3ydh::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ydS_info" {
     sat_s3ydS_info:
         const sat_s3ydS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 f_s3ydW_entry() //  [R1]
         { []
         }
     {offset
       c3CP6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CP7; else goto c3CP8;
       c3CP7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CP8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = Text.Read.Lex.$fShowLexeme10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s3ydW_info" {
     f_s3ydW_info:
         const f_s3ydW_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt;
 },
 g_s3ydX_entry() //  [R1]
         { []
         }
     {offset
       c3CPd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CPe; else goto c3CPf;
       c3CPe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CPf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = Text.Read.Lex.$fShowLexeme10_closure+1;
           R2 = GHC.Show.$fShowInteger_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s3ydX_info" {
     g_s3ydX_info:
         const g_s3ydX_entry;
         const 1;
         const 12884901904;
         const S3yFW_srt;
 },
 sat_s3ye2_entry() //  [R1]
         { []
         }
     {offset
       c3CPr: // global
           _s3ye2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CPs; else goto c3CPt;
       c3CPt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CPv; else goto c3CPu;
       c3CPv: // global
           HpAlloc = 56;
           goto c3CPs;
       c3CPs: // global
           R1 = _s3ye2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CPu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ye2::P64;
           _s3ydW::P64 = P64[_s3ye2::P64 + 16];
           _s3ydX::P64 = P64[_s3ye2::P64 + 24];
           _s3ydZ::P64 = P64[_s3ye2::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ydX::P64;
           P64[Hp - 24] = _s3ydZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _s3ydW::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ye2_info" {
     sat_s3ye2_info:
         const sat_s3ye2_entry;
         const 3;
         const 15;
 },
 g1_s3ydY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CPx: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3CPB; else goto c3CPA;
       c3CPB: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CPA: // global
           _s3ydT::P64 = P64[R1 + 7];
           _s3ydW::P64 = P64[R1 + 15];
           _s3ydX::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_s3ye2_info;
           P64[Hp - 40] = _s3ydW::P64;
           P64[Hp - 32] = _s3ydX::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 56;
           R4 = Hp - 14;
           R3 = _s3ydT::P64;
           R2 = GHC.Show.$fShowInt1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g1_s3ydY_info" {
     g1_s3ydY_info:
         const g1_s3ydY_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3ye6_entry() //  [R1]
         { []
         }
     {offset
       c3CPO: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_s3ydY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ye6_info" {
     sat_s3ye6_info:
         const sat_s3ye6_entry;
         const 2;
         const 18;
 },
 sat_s3ye7_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CPR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CPV; else goto c3CPU;
       c3CPV: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CPU: // global
           _s3ydY::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3ye6_info;
           P64[Hp - 8] = _s3ydY::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme8_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ye7_info" {
     sat_s3ye7_info:
         const sat_s3ye7_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+16;
 },
 sat_s3yea_entry() //  [R1]
         { []
         }
     {offset
       c3CQb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CQf; else goto c3CQe;
       c3CQf: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CQe: // global
           _s3ydY::P64 = P64[R1 + 16];
           _s3ye8::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3ye8::P64;
           R2 = Hp - 14;
           R1 = _s3ydY::P64;
           call g1_s3ydY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yea_info" {
     sat_s3yea_info:
         const sat_s3yea_entry;
         const 2;
         const 18;
 },
 sat_s3yeb_entry() //  [R1]
         { []
         }
     {offset
       c3CQg: // global
           _s3yeb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CQh; else goto c3CQi;
       c3CQi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CQk; else goto c3CQj;
       c3CQk: // global
           HpAlloc = 32;
           goto c3CQh;
       c3CQh: // global
           R1 = _s3yeb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CQj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeb::P64;
           _s3ydY::P64 = P64[_s3yeb::P64 + 16];
           _s3ye8::P64 = P64[_s3yeb::P64 + 24];
           I64[Hp - 24] = sat_s3yea_info;
           P64[Hp - 8] = _s3ydY::P64;
           P64[Hp] = _s3ye8::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme8_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yeb_info" {
     sat_s3yeb_info:
         const sat_s3yeb_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+16;
 },
 sat_s3yec_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CQm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CQq; else goto c3CQp;
       c3CQq: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CQp: // global
           _s3ydY::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeb_info;
           P64[Hp - 32] = _s3ydY::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yec_info" {
     sat_s3yec_info:
         const sat_s3yec_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+16;
 },
 Text.Read.Lex.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3CQv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CQw; else goto c3CQx;
       c3CQw: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3CQx: // global
           I64[Sp - 16] = block_c3CMj_info;
           R1 = R3;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CQK; else goto c3CMk;
       u3CQK: // global
           call _c3CMj(R1) args: 0, res: 0, upd: 0;
       c3CMk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$w$cshowsPrec_info" {
     Text.Read.Lex.$w$cshowsPrec_info:
         const Text.Read.Lex.$w$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 8589934605;
         const S3yFW_srt;
 },
 _c3CMj() //  [R1]
         { []
         }
     {offset
       c3CMj: // global
           _s3ydc::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c3CQs; else goto c3CQt;
       c3CQs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3CQA; else goto c3CQz;
       c3CQA: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CQz: // global
           _s3ydf::P64 = P64[R1 + 7];
           _s3ydg::P64 = P64[R1 + 15];
           I64[Hp - 32] = p_s3ydh_info;
           P64[Hp - 24] = _s3ydf::P64;
           P64[Hp - 16] = _s3ydg::P64;
           _c3CMo::P64 = Hp - 31;
           if (%MO_S_Lt_W64(_s3ydc::I64, 11)) goto c3CQC; else goto c3CQD;
       c3CQC: // global
           Hp = Hp - 16;
           R1 = _c3CMo::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CQD: // global
           I64[Hp - 8] = sat_s3ydS_info;
           P64[Hp] = _c3CMo::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CQt: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3CQG; else goto c3CQF;
       c3CQG: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CQF: // global
           _s3ydT::P64 = P64[R1 + 6];
           _s3ydU::P64 = P64[R1 + 14];
           _s3ydV::P64 = P64[R1 + 22];
           I64[Hp - 88] = f_s3ydW_info;
           P64[Hp - 72] = _s3ydU::P64;
           I64[Hp - 64] = g_s3ydX_info;
           P64[Hp - 48] = _s3ydV::P64;
           I64[Hp - 40] = g1_s3ydY_info;
           P64[Hp - 32] = _s3ydT::P64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 64;
           _c3CPg::P64 = Hp - 39;
           if (%MO_S_Lt_W64(_s3ydc::I64, 11)) goto c3CQI; else goto c3CQJ;
       c3CQI: // global
           I64[Hp - 8] = sat_s3ye7_info;
           P64[Hp] = _c3CPg::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CQJ: // global
           I64[Hp - 8] = sat_s3yec_info;
           P64[Hp] = _c3CPg::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3CMj_info" {
     block_c3CMj_info:
         const _c3CMj;
         const 65;
         const 30064771102;
         const S3yFW_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.813109042 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshowsPrec_closure" {
     Text.Read.Lex.$fShowNumber_$cshowsPrec_closure:
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3CT6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CT7; else goto c3CT8;
       c3CT7: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fShowNumber_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3CT8: // global
           I64[Sp - 16] = block_c3CT3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CTc; else goto c3CT4;
       u3CTc: // global
           call _c3CT3(R1) args: 0, res: 0, upd: 0;
       c3CT4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowNumber_$cshowsPrec_info" {
     Text.Read.Lex.$fShowNumber_$cshowsPrec_info:
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3yFW_srt+24;
 },
 _c3CT3() //  [R1]
         { []
         }
     {offset
       c3CT3: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3CT3_info" {
     block_c3CT3_info:
         const _c3CT3;
         const 1;
         const 4294967326;
         const S3yFW_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.818586262 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme2_closure" {
     Text.Read.Lex.$fShowLexeme2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.820731368 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshow_closure" {
     Text.Read.Lex.$fShowNumber_$cshow_closure:
         const Text.Read.Lex.$fShowNumber_$cshow_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c3CTr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CTs; else goto c3CTt;
       c3CTs: // global
           R2 = R2;
           R1 = Text.Read.Lex.$fShowNumber_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CTt: // global
           R3 = R2;
           R2 = 0;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowNumber_$cshow_info" {
     Text.Read.Lex.$fShowNumber_$cshow_info:
         const Text.Read.Lex.$fShowNumber_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S3yFW_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.825365504 UTC

[section ""data" . Text.Read.Lex.$fShowNumber1_closure" {
     Text.Read.Lex.$fShowNumber1_closure:
         const Text.Read.Lex.$fShowNumber1_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber1_entry() //  [R2]
         { []
         }
     {offset
       c3CTD: // global
           R3 = R2;
           R2 = 0;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowNumber1_info" {
     Text.Read.Lex.$fShowNumber1_info:
         const Text.Read.Lex.$fShowNumber1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3yFW_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.829200669 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshowList_closure" {
     Text.Read.Lex.$fShowNumber_$cshowList_closure:
         const Text.Read.Lex.$fShowNumber_$cshowList_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c3CTO: // global
           R4 = R3;
           R3 = R2;
           R2 = Text.Read.Lex.$fShowNumber1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowNumber_$cshowList_info" {
     Text.Read.Lex.$fShowNumber_$cshowList_info:
         const Text.Read.Lex.$fShowNumber_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3yFW_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.832410024 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_closure" {
     Text.Read.Lex.$fShowNumber_closure:
         const GHC.Show.C:Show_con_info;
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_closure+2;
         const Text.Read.Lex.$fShowNumber_$cshow_closure+1;
         const Text.Read.Lex.$fShowNumber_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.834215241 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme7_bytes" {
     Text.Read.Lex.$fShowLexeme7_bytes:
         I8[] [78,117,109,98,101,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.836557636 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme6_closure" {
     Text.Read.Lex.$fShowLexeme6_closure:
         const Text.Read.Lex.$fShowLexeme6_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme6_entry() //  [R1]
         { []
         }
     {offset
       c3CU3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CU4; else goto c3CU5;
       c3CU4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CU5: // global
           (_c3CU0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3CU0::I64 == 0) goto c3CU2; else goto c3CU1;
       c3CU2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3CU1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3CU0::I64;
           R2 = Text.Read.Lex.$fShowLexeme7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme6_info" {
     Text.Read.Lex.$fShowLexeme6_info:
         const Text.Read.Lex.$fShowLexeme6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.840658294 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme5_bytes" {
     Text.Read.Lex.$fShowLexeme5_bytes:
         I8[] [69,79,70]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.843180201 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme4_closure" {
     Text.Read.Lex.$fShowLexeme4_closure:
         const Text.Read.Lex.$fShowLexeme4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme4_entry() //  [R1]
         { []
         }
     {offset
       c3CUk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CUl; else goto c3CUm;
       c3CUl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CUm: // global
           (_c3CUh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3CUh::I64 == 0) goto c3CUj; else goto c3CUi;
       c3CUj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3CUi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3CUh::I64;
           R2 = Text.Read.Lex.$fShowLexeme5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme4_info" {
     Text.Read.Lex.$fShowLexeme4_info:
         const Text.Read.Lex.$fShowLexeme4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.847198149 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme3_closure" {
     Text.Read.Lex.$fShowLexeme3_closure:
         const Text.Read.Lex.$fShowLexeme3_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme3_entry() //  [R2]
         { []
         }
     {offset
       c3CUy: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme3_info" {
     Text.Read.Lex.$fShowLexeme3_info:
         const Text.Read.Lex.$fShowLexeme3_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3yFW_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.850837225 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme16_bytes" {
     Text.Read.Lex.$fShowLexeme16_bytes:
         I8[] [67,104,97,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.852460535 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme15_bytes" {
     Text.Read.Lex.$fShowLexeme15_bytes:
         I8[] [83,116,114,105,110,103,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.85467976 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme14_bytes" {
     Text.Read.Lex.$fShowLexeme14_bytes:
         I8[] [80,117,110,99,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.856286524 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme13_bytes" {
     Text.Read.Lex.$fShowLexeme13_bytes:
         I8[] [73,100,101,110,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.857991585 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme12_bytes" {
     Text.Read.Lex.$fShowLexeme12_bytes:
         I8[] [83,121,109,98,111,108,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.882616561 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure" {
     Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure:
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_info;
         const 0;
 },
 sat_s3yev_entry() //  [R1]
         { []
         }
     {offset
       c3CVd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3CVe; else goto c3CVf;
       c3CVe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CVf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3CVa_info;
           _s3yes::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yes::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3CVj; else goto c3CVb;
       u3CVj: // global
           call _c3CVa(R1) args: 0, res: 0, upd: 0;
       c3CVb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yev_info" {
     sat_s3yev_info:
         const sat_s3yev_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+64;
 },
 _c3CVa() //  [R1]
         { []
         }
     {offset
       c3CVa: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3CVa_info" {
     block_c3CVa_info:
         const _c3CVa;
         const 1;
         const 4294967326;
         const S3yFW_srt+64;
 },
 sat_s3yew_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CVk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CVo; else goto c3CVn;
       c3CVo: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CVn: // global
           _s3yeo::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3yev_info;
           P64[Hp - 8] = _s3yeo::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yew_info" {
     sat_s3yew_info:
         const sat_s3yew_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+64;
 },
 sat_s3yeB_entry() //  [R1]
         { []
         }
     {offset
       c3CVG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3CVK; else goto c3CVL;
       c3CVK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CVL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3CVD_info;
           _s3yex::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yex::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3CVP; else goto c3CVE;
       u3CVP: // global
           call _c3CVD(R1) args: 0, res: 0, upd: 0;
       c3CVE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yeB_info" {
     sat_s3yeB_info:
         const sat_s3yeB_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+64;
 },
 _c3CVD() //  [R1]
         { []
         }
     {offset
       c3CVD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CVO; else goto c3CVN;
       c3CVO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3CVN: // global
           _s3yez::I64 = I64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 14;
           R2 = _s3yez::I64;
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3CVD_info" {
     block_c3CVD_info:
         const _c3CVD;
         const 1;
         const 4294967326;
         const S3yFW_srt+64;
 },
 sat_s3yeC_entry() //  [R1]
         { []
         }
     {offset
       c3CVQ: // global
           _s3yeC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CVR; else goto c3CVS;
       c3CVS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CVU; else goto c3CVT;
       c3CVU: // global
           HpAlloc = 32;
           goto c3CVR;
       c3CVR: // global
           R1 = _s3yeC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CVT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeC::P64;
           _s3yeo::P64 = P64[_s3yeC::P64 + 16];
           _s3yex::P64 = P64[_s3yeC::P64 + 24];
           I64[Hp - 24] = sat_s3yeB_info;
           P64[Hp - 8] = _s3yeo::P64;
           P64[Hp] = _s3yex::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yeC_info" {
     sat_s3yeC_info:
         const sat_s3yeC_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+64;
 },
 sat_s3yeD_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CVW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CW0; else goto c3CVZ;
       c3CW0: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CVZ: // global
           _s3yeo::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeC_info;
           P64[Hp - 32] = _s3yeo::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yeD_info" {
     sat_s3yeD_info:
         const sat_s3yeD_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+64;
 },
 sat_s3yeK_entry() //  [R1]
         { []
         }
     {offset
       c3CWl: // global
           _s3yeK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CWm; else goto c3CWn;
       c3CWn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CWp; else goto c3CWo;
       c3CWp: // global
           HpAlloc = 24;
           goto c3CWm;
       c3CWm: // global
           R1 = _s3yeK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CWo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeK::P64;
           _s3yeE::P64 = P64[_s3yeK::P64 + 16];
           _s3yeI::P64 = P64[_s3yeK::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yeI::P64;
           R3 = Hp - 14;
           R2 = _s3yeE::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yeK_info" {
     sat_s3yeK_info:
         const sat_s3yeK_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+72;
 },
 sat_s3yeM_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CWr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CWv; else goto c3CWu;
       c3CWv: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CWu: // global
           _s3yeE::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeK_info;
           P64[Hp - 32] = _s3yeE::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yeM_info" {
     sat_s3yeM_info:
         const sat_s3yeM_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+72;
 },
 sat_s3yeQ_entry() //  [R1]
         { []
         }
     {offset
       c3CWM: // global
           _s3yeQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CWN; else goto c3CWO;
       c3CWO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3CWQ; else goto c3CWP;
       c3CWQ: // global
           HpAlloc = 48;
           goto c3CWN;
       c3CWN: // global
           R1 = _s3yeQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CWP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeQ::P64;
           _s3yeE::P64 = P64[_s3yeQ::P64 + 16];
           _s3yeN::P64 = P64[_s3yeQ::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yeN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yeE::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yeQ_info" {
     sat_s3yeQ_info:
         const sat_s3yeQ_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+72;
 },
 sat_s3yeS_entry() //  [R1]
         { []
         }
     {offset
       c3CWS: // global
           _s3yeS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CWT; else goto c3CWU;
       c3CWU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CWW; else goto c3CWV;
       c3CWW: // global
           HpAlloc = 56;
           goto c3CWT;
       c3CWT: // global
           R1 = _s3yeS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CWV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeS::P64;
           _s3yeE::P64 = P64[_s3yeS::P64 + 16];
           _s3yeN::P64 = P64[_s3yeS::P64 + 24];
           I64[Hp - 48] = sat_s3yeQ_info;
           P64[Hp - 32] = _s3yeE::P64;
           P64[Hp - 24] = _s3yeN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yeS_info" {
     sat_s3yeS_info:
         const sat_s3yeS_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+72;
 },
 sat_s3yeT_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CWY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CX2; else goto c3CX1;
       c3CX2: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CX1: // global
           _s3yeE::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeS_info;
           P64[Hp - 32] = _s3yeE::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yeT_info" {
     sat_s3yeT_info:
         const sat_s3yeT_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+72;
 },
 sat_s3yf0_entry() //  [R1]
         { []
         }
     {offset
       c3CXn: // global
           _s3yf0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CXo; else goto c3CXp;
       c3CXp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CXr; else goto c3CXq;
       c3CXr: // global
           HpAlloc = 24;
           goto c3CXo;
       c3CXo: // global
           R1 = _s3yf0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CXq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yf0::P64;
           _s3yeU::P64 = P64[_s3yf0::P64 + 16];
           _s3yeY::P64 = P64[_s3yf0::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yeY::P64;
           R3 = Hp - 14;
           R2 = _s3yeU::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yf0_info" {
     sat_s3yf0_info:
         const sat_s3yf0_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+72;
 },
 sat_s3yf2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CXt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CXx; else goto c3CXw;
       c3CXx: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CXw: // global
           _s3yeU::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yf0_info;
           P64[Hp - 32] = _s3yeU::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yf2_info" {
     sat_s3yf2_info:
         const sat_s3yf2_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+72;
 },
 sat_s3yf6_entry() //  [R1]
         { []
         }
     {offset
       c3CXO: // global
           _s3yf6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CXP; else goto c3CXQ;
       c3CXQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3CXS; else goto c3CXR;
       c3CXS: // global
           HpAlloc = 48;
           goto c3CXP;
       c3CXP: // global
           R1 = _s3yf6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CXR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yf6::P64;
           _s3yeU::P64 = P64[_s3yf6::P64 + 16];
           _s3yf3::P64 = P64[_s3yf6::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yf3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yeU::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yf6_info" {
     sat_s3yf6_info:
         const sat_s3yf6_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+72;
 },
 sat_s3yf8_entry() //  [R1]
         { []
         }
     {offset
       c3CXU: // global
           _s3yf8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CXV; else goto c3CXW;
       c3CXW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CXY; else goto c3CXX;
       c3CXY: // global
           HpAlloc = 56;
           goto c3CXV;
       c3CXV: // global
           R1 = _s3yf8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CXX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yf8::P64;
           _s3yeU::P64 = P64[_s3yf8::P64 + 16];
           _s3yf3::P64 = P64[_s3yf8::P64 + 24];
           I64[Hp - 48] = sat_s3yf6_info;
           P64[Hp - 32] = _s3yeU::P64;
           P64[Hp - 24] = _s3yf3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yf8_info" {
     sat_s3yf8_info:
         const sat_s3yf8_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+72;
 },
 sat_s3yf9_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CY0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CY4; else goto c3CY3;
       c3CY4: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CY3: // global
           _s3yeU::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yf8_info;
           P64[Hp - 32] = _s3yeU::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yf9_info" {
     sat_s3yf9_info:
         const sat_s3yf9_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+72;
 },
 sat_s3yfg_entry() //  [R1]
         { []
         }
     {offset
       c3CYp: // global
           _s3yfg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CYq; else goto c3CYr;
       c3CYr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CYt; else goto c3CYs;
       c3CYt: // global
           HpAlloc = 24;
           goto c3CYq;
       c3CYq: // global
           R1 = _s3yfg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CYs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfg::P64;
           _s3yfa::P64 = P64[_s3yfg::P64 + 16];
           _s3yfe::P64 = P64[_s3yfg::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yfe::P64;
           R3 = Hp - 14;
           R2 = _s3yfa::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yfg_info" {
     sat_s3yfg_info:
         const sat_s3yfg_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+72;
 },
 sat_s3yfi_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CYv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CYz; else goto c3CYy;
       c3CYz: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CYy: // global
           _s3yfa::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfg_info;
           P64[Hp - 32] = _s3yfa::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yfi_info" {
     sat_s3yfi_info:
         const sat_s3yfi_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+72;
 },
 sat_s3yfm_entry() //  [R1]
         { []
         }
     {offset
       c3CYQ: // global
           _s3yfm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CYR; else goto c3CYS;
       c3CYS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3CYU; else goto c3CYT;
       c3CYU: // global
           HpAlloc = 48;
           goto c3CYR;
       c3CYR: // global
           R1 = _s3yfm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CYT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfm::P64;
           _s3yfa::P64 = P64[_s3yfm::P64 + 16];
           _s3yfj::P64 = P64[_s3yfm::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yfj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yfa::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yfm_info" {
     sat_s3yfm_info:
         const sat_s3yfm_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+72;
 },
 sat_s3yfo_entry() //  [R1]
         { []
         }
     {offset
       c3CYW: // global
           _s3yfo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CYX; else goto c3CYY;
       c3CYY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CZ0; else goto c3CYZ;
       c3CZ0: // global
           HpAlloc = 56;
           goto c3CYX;
       c3CYX: // global
           R1 = _s3yfo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CYZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfo::P64;
           _s3yfa::P64 = P64[_s3yfo::P64 + 16];
           _s3yfj::P64 = P64[_s3yfo::P64 + 24];
           I64[Hp - 48] = sat_s3yfm_info;
           P64[Hp - 32] = _s3yfa::P64;
           P64[Hp - 24] = _s3yfj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yfo_info" {
     sat_s3yfo_info:
         const sat_s3yfo_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+72;
 },
 sat_s3yfp_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CZ2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CZ6; else goto c3CZ5;
       c3CZ6: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CZ5: // global
           _s3yfa::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfo_info;
           P64[Hp - 32] = _s3yfa::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yfp_info" {
     sat_s3yfp_info:
         const sat_s3yfp_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+72;
 },
 sat_s3yfw_entry() //  [R1]
         { []
         }
     {offset
       c3CZr: // global
           _s3yfw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CZs; else goto c3CZt;
       c3CZt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CZv; else goto c3CZu;
       c3CZv: // global
           HpAlloc = 24;
           goto c3CZs;
       c3CZs: // global
           R1 = _s3yfw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CZu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfw::P64;
           _s3yfq::P64 = P64[_s3yfw::P64 + 16];
           _s3yfu::P64 = P64[_s3yfw::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yfu::P64;
           R3 = Hp - 14;
           R2 = _s3yfq::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yfw_info" {
     sat_s3yfw_info:
         const sat_s3yfw_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+72;
 },
 sat_s3yfy_entry() //  [R1, R2]
         { []
         }
     {offset
       c3CZx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CZB; else goto c3CZA;
       c3CZB: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CZA: // global
           _s3yfq::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfw_info;
           P64[Hp - 32] = _s3yfq::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yfy_info" {
     sat_s3yfy_info:
         const sat_s3yfy_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+72;
 },
 sat_s3yfC_entry() //  [R1]
         { []
         }
     {offset
       c3CZS: // global
           _s3yfC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CZT; else goto c3CZU;
       c3CZU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3CZW; else goto c3CZV;
       c3CZW: // global
           HpAlloc = 48;
           goto c3CZT;
       c3CZT: // global
           R1 = _s3yfC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CZV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfC::P64;
           _s3yfq::P64 = P64[_s3yfC::P64 + 16];
           _s3yfz::P64 = P64[_s3yfC::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yfz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yfq::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yfC_info" {
     sat_s3yfC_info:
         const sat_s3yfC_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+72;
 },
 sat_s3yfE_entry() //  [R1]
         { []
         }
     {offset
       c3CZY: // global
           _s3yfE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CZZ; else goto c3D00;
       c3D00: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3D02; else goto c3D01;
       c3D02: // global
           HpAlloc = 56;
           goto c3CZZ;
       c3CZZ: // global
           R1 = _s3yfE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D01: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfE::P64;
           _s3yfq::P64 = P64[_s3yfE::P64 + 16];
           _s3yfz::P64 = P64[_s3yfE::P64 + 24];
           I64[Hp - 48] = sat_s3yfC_info;
           P64[Hp - 32] = _s3yfq::P64;
           P64[Hp - 24] = _s3yfz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yfE_info" {
     sat_s3yfE_info:
         const sat_s3yfE_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+72;
 },
 sat_s3yfF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3D04: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3D08; else goto c3D07;
       c3D08: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3D07: // global
           _s3yfq::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfE_info;
           P64[Hp - 32] = _s3yfq::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yfF_info" {
     sat_s3yfF_info:
         const sat_s3yfF_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+72;
 },
 g_s3yfJ_entry() //  [R1]
         { []
         }
     {offset
       c3D0k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D0l; else goto c3D0m;
       c3D0l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D0m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s3yfJ_info" {
     g_s3yfJ_info:
         const g_s3yfJ_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+24;
 },
 sat_s3yfM_entry() //  [R1]
         { []
         }
     {offset
       c3D0z: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yfM_info" {
     sat_s3yfM_info:
         const sat_s3yfM_entry;
         const 2;
         const 18;
 },
 sat_s3yfN_entry() //  [R1, R2]
         { []
         }
     {offset
       c3D0C: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3D0G; else goto c3D0F;
       c3D0G: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3D0F: // global
           _s3yfJ::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3yfM_info;
           P64[Hp - 8] = _s3yfJ::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yfN_info" {
     sat_s3yfN_info:
         const sat_s3yfN_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+80;
 },
 sat_s3yfQ_entry() //  [R1]
         { []
         }
     {offset
       c3D0W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3D10; else goto c3D0Z;
       c3D10: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D0Z: // global
           _s3yfJ::P64 = P64[R1 + 16];
           _s3yfO::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3yfO::P64;
           R2 = Hp - 14;
           R1 = _s3yfJ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yfQ_info" {
     sat_s3yfQ_info:
         const sat_s3yfQ_entry;
         const 2;
         const 18;
 },
 sat_s3yfR_entry() //  [R1]
         { []
         }
     {offset
       c3D11: // global
           _s3yfR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3D12; else goto c3D13;
       c3D13: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3D15; else goto c3D14;
       c3D15: // global
           HpAlloc = 32;
           goto c3D12;
       c3D12: // global
           R1 = _s3yfR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D14: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfR::P64;
           _s3yfJ::P64 = P64[_s3yfR::P64 + 16];
           _s3yfO::P64 = P64[_s3yfR::P64 + 24];
           I64[Hp - 24] = sat_s3yfQ_info;
           P64[Hp - 8] = _s3yfJ::P64;
           P64[Hp] = _s3yfO::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yfR_info" {
     sat_s3yfR_info:
         const sat_s3yfR_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+80;
 },
 sat_s3yfS_entry() //  [R1, R2]
         { []
         }
     {offset
       c3D17: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3D1b; else goto c3D1a;
       c3D1b: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3D1a: // global
           _s3yfJ::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfR_info;
           P64[Hp - 32] = _s3yfJ::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yfS_info" {
     sat_s3yfS_info:
         const sat_s3yfS_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+80;
 },
 Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3D1l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D1m; else goto c3D1n;
       c3D1m: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3D1n: // global
           I64[Sp - 16] = block_c3CUO_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3D2d; else goto c3CUP;
       u3D2d: // global
           call _c3CUO(R1) args: 0, res: 0, upd: 0;
       c3CUP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme_$cshowsPrec_info" {
     Text.Read.Lex.$fShowLexeme_$cshowsPrec_info:
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry;
         const 0;
         const 4264902524942;
         const 8589934607;
         const S3yFW_srt+24;
 },
 _c3CUO() //  [R1]
         { []
         }
     {offset
       c3CUO: // global
           _s3yel::P64 = P64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3D1d;
               case 2 : goto c3D1e;
               case 3 : goto c3D1f;
               case 4 : goto c3D1g;
               case 5 : goto c3D1h;
               case 6 : goto c3D1i;
               case 7 : goto c3D1j;
           }
       c3D1j: // global
           R1 = Text.Read.Lex.$fShowLexeme3_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D1i: // global
           I64[Sp] = block_c3D0b_info;
           _s3yfG::P64 = P64[R1 + 2];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yfG::P64;
           if (R1 & 7 != 0) goto u3D2c; else goto c3D0c;
       u3D2c: // global
           call _c3D0b(R1) args: 0, res: 0, upd: 0;
       c3D0c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3D1h: // global
           I64[Sp] = block_c3CZ9_info;
           _s3yfq::P64 = P64[R1 + 3];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yfq::P64;
           if (R1 & 7 != 0) goto u3D2b; else goto c3CZa;
       u3D2b: // global
           call _c3CZ9(R1) args: 0, res: 0, upd: 0;
       c3CZa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3D1g: // global
           I64[Sp] = block_c3CY7_info;
           _s3yfa::P64 = P64[R1 + 4];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yfa::P64;
           if (R1 & 7 != 0) goto u3D2a; else goto c3CY8;
       u3D2a: // global
           call _c3CY7(R1) args: 0, res: 0, upd: 0;
       c3CY8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3D1f: // global
           I64[Sp] = block_c3CX5_info;
           _s3yeU::P64 = P64[R1 + 5];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yeU::P64;
           if (R1 & 7 != 0) goto u3D29; else goto c3CX6;
       u3D29: // global
           call _c3CX5(R1) args: 0, res: 0, upd: 0;
       c3CX6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3D1e: // global
           I64[Sp] = block_c3CW3_info;
           _s3yeE::P64 = P64[R1 + 6];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yeE::P64;
           if (R1 & 7 != 0) goto u3D28; else goto c3CW4;
       u3D28: // global
           call _c3CW3(R1) args: 0, res: 0, upd: 0;
       c3CW4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3D1d: // global
           I64[Sp] = block_c3CUT_info;
           _s3yeo::P64 = P64[R1 + 7];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yeo::P64;
           if (R1 & 7 != 0) goto u3D27; else goto c3CUU;
       u3D27: // global
           call _c3CUT(R1) args: 0, res: 0, upd: 0;
       c3CUU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3CUO_info" {
     block_c3CUO_info:
         const _c3CUO;
         const 1;
         const 3165390897182;
         const S3yFW_srt+24;
 },
 _c3D0b() //  [R1]
         { []
         }
     {offset
       c3D0b: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3D20; else goto c3D1Z;
       c3D20: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D1Z: // global
           _s3yfI::I64 = I64[R1 + 7];
           I64[Hp - 32] = g_s3yfJ_info;
           P64[Hp - 16] = P64[Sp + 8];
           _c3D0g::P64 = Hp - 32;
           if (%MO_S_Lt_W64(_s3yfI::I64, 11)) goto c3D22; else goto c3D23;
       c3D22: // global
           I64[Hp - 8] = sat_s3yfN_info;
           P64[Hp] = _c3D0g::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D23: // global
           I64[Hp - 8] = sat_s3yfS_info;
           P64[Hp] = _c3D0g::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3D0b_info" {
     block_c3D0b_info:
         const _c3D0b;
         const 1;
         const 554050781214;
         const S3yFW_srt+24;
 },
 _c3CZ9() //  [R1]
         { []
         }
     {offset
       c3CZ9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3D1T; else goto c3D1S;
       c3D1T: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D1S: // global
           _s3yfq::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3D1V; else goto c3D1W;
       c3D1V: // global
           I64[Hp - 8] = sat_s3yfy_info;
           P64[Hp] = _s3yfq::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D1W: // global
           I64[Hp - 8] = sat_s3yfF_info;
           P64[Hp] = _s3yfq::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3CZ9_info" {
     block_c3CZ9_info:
         const _c3CZ9;
         const 1;
         const 4294967326;
         const S3yFW_srt+72;
 },
 _c3CY7() //  [R1]
         { []
         }
     {offset
       c3CY7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3D1M; else goto c3D1L;
       c3D1M: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D1L: // global
           _s3yfa::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3D1O; else goto c3D1P;
       c3D1O: // global
           I64[Hp - 8] = sat_s3yfi_info;
           P64[Hp] = _s3yfa::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D1P: // global
           I64[Hp - 8] = sat_s3yfp_info;
           P64[Hp] = _s3yfa::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3CY7_info" {
     block_c3CY7_info:
         const _c3CY7;
         const 1;
         const 4294967326;
         const S3yFW_srt+72;
 },
 _c3CX5() //  [R1]
         { []
         }
     {offset
       c3CX5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3D1F; else goto c3D1E;
       c3D1F: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D1E: // global
           _s3yeU::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3D1H; else goto c3D1I;
       c3D1H: // global
           I64[Hp - 8] = sat_s3yf2_info;
           P64[Hp] = _s3yeU::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D1I: // global
           I64[Hp - 8] = sat_s3yf9_info;
           P64[Hp] = _s3yeU::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3CX5_info" {
     block_c3CX5_info:
         const _c3CX5;
         const 1;
         const 4294967326;
         const S3yFW_srt+72;
 },
 _c3CW3() //  [R1]
         { []
         }
     {offset
       c3CW3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3D1y; else goto c3D1x;
       c3D1y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D1x: // global
           _s3yeE::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3D1A; else goto c3D1B;
       c3D1A: // global
           I64[Hp - 8] = sat_s3yeM_info;
           P64[Hp] = _s3yeE::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D1B: // global
           I64[Hp - 8] = sat_s3yeT_info;
           P64[Hp] = _s3yeE::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3CW3_info" {
     block_c3CW3_info:
         const _c3CW3;
         const 1;
         const 4294967326;
         const S3yFW_srt+72;
 },
 _c3CUT() //  [R1]
         { []
         }
     {offset
       c3CUT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3D1r; else goto c3D1q;
       c3D1r: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D1q: // global
           _s3yeo::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3D1t; else goto c3D1u;
       c3D1t: // global
           I64[Hp - 8] = sat_s3yew_info;
           P64[Hp] = _s3yeo::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D1u: // global
           I64[Hp - 8] = sat_s3yeD_info;
           P64[Hp] = _s3yeo::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3CUT_info" {
     block_c3CUT_info:
         const _c3CUT;
         const 1;
         const 4294967326;
         const S3yFW_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.961094036 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme17_closure" {
     Text.Read.Lex.$fShowLexeme17_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.969030557 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshow_closure" {
     Text.Read.Lex.$fShowLexeme_$cshow_closure:
         const Text.Read.Lex.$fShowLexeme_$cshow_info;
         const 0;
 },
 sat_s3yfY_entry() //  [R1]
         { []
         }
     {offset
       c3D5C: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3D5D; else goto c3D5E;
       c3D5D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D5E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3D5z_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3D5I; else goto c3D5A;
       u3D5I: // global
           call _c3D5z(R1) args: 0, res: 0, upd: 0;
       c3D5A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yfY_info" {
     sat_s3yfY_info:
         const sat_s3yfY_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+64;
 },
 _c3D5z() //  [R1]
         { []
         }
     {offset
       c3D5z: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3D5z_info" {
     block_c3D5z_info:
         const _c3D5z;
         const 0;
         const 4294967326;
         const S3yFW_srt+64;
 },
 sat_s3yg0_entry() //  [R1]
         { []
         }
     {offset
       c3D5P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D5Q; else goto c3D5R;
       c3D5Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D5R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yg0_info" {
     sat_s3yg0_info:
         const sat_s3yg0_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+72;
 },
 sat_s3yg3_entry() //  [R1]
         { []
         }
     {offset
       c3D5Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D5Z; else goto c3D60;
       c3D5Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D60: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yg3_info" {
     sat_s3yg3_info:
         const sat_s3yg3_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+72;
 },
 sat_s3yg6_entry() //  [R1]
         { []
         }
     {offset
       c3D67: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D68; else goto c3D69;
       c3D68: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D69: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yg6_info" {
     sat_s3yg6_info:
         const sat_s3yg6_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+72;
 },
 sat_s3yg9_entry() //  [R1]
         { []
         }
     {offset
       c3D6g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D6h; else goto c3D6i;
       c3D6h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D6i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yg9_info" {
     sat_s3yg9_info:
         const sat_s3yg9_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+72;
 },
 sat_s3ygc_entry() //  [R1]
         { []
         }
     {offset
       c3D6p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D6q; else goto c3D6r;
       c3D6q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D6r: // global
           R3 = P64[R1 + 16];
           R2 = 11;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ygc_info" {
     sat_s3ygc_info:
         const sat_s3ygc_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+24;
 },
 Text.Read.Lex.$fShowLexeme_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c3D6B: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3D6C; else goto c3D6D;
       c3D6C: // global
           R2 = R2;
           R1 = Text.Read.Lex.$fShowLexeme_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3D6D: // global
           I64[Sp - 8] = block_c3D5q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3D73; else goto c3D5r;
       u3D73: // global
           call _c3D5q(R1) args: 0, res: 0, upd: 0;
       c3D5r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme_$cshow_info" {
     Text.Read.Lex.$fShowLexeme_$cshow_info:
         const Text.Read.Lex.$fShowLexeme_$cshow_entry;
         const 0;
         const 5433133629454;
         const 4294967301;
         const S3yFW_srt+24;
 },
 _c3D5q() //  [R1]
         { []
         }
     {offset
       c3D5q: // global
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3D6t;
               case 2 : goto c3D6u;
               case 3 : goto c3D6v;
               case 4 : goto c3D6w;
               case 5 : goto c3D6x;
               case 6 : goto c3D6y;
               case 7 : goto c3D6z;
           }
       c3D6z: // global
           R1 = Text.Read.Lex.$fShowLexeme4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3D6y: // global
           Hp = Hp + 24;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3D6Z; else goto c3D6Y;
       c3D6Y: // global
           _s3ygb::P64 = P64[_s3yfU::P64 + 2];
           I64[Hp - 16] = sat_s3ygc_info;
           P64[Hp] = _s3ygb::P64;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3D6x: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3D6W; else goto c3D6V;
       c3D6V: // global
           _s3yg8::P64 = P64[_s3yfU::P64 + 3];
           I64[Hp - 40] = sat_s3yg9_info;
           P64[Hp - 24] = _s3yg8::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3D6w: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3D6W; else goto c3D6R;
       c3D6R: // global
           _s3yg5::P64 = P64[_s3yfU::P64 + 4];
           I64[Hp - 40] = sat_s3yg6_info;
           P64[Hp - 24] = _s3yg5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3D6v: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3D6W; else goto c3D6N;
       c3D6N: // global
           _s3yg2::P64 = P64[_s3yfU::P64 + 5];
           I64[Hp - 40] = sat_s3yg3_info;
           P64[Hp - 24] = _s3yg2::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3D6u: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3D6W; else goto c3D6J;
       c3D6W: // global
           HpAlloc = 48;
           R1 = _s3yfU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D6J: // global
           _s3yfZ::P64 = P64[_s3yfU::P64 + 6];
           I64[Hp - 40] = sat_s3yg0_info;
           P64[Hp - 24] = _s3yfZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3D6t: // global
           Hp = Hp + 24;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3D6Z; else goto c3D6F;
       c3D6Z: // global
           HpAlloc = 24;
           R1 = _s3yfU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D6F: // global
           _s3yfV::P64 = P64[_s3yfU::P64 + 7];
           I64[Hp - 16] = sat_s3yfY_info;
           P64[Hp] = _s3yfV::P64;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3D5q_info" {
     block_c3D5q_info:
         const _c3D5q;
         const 0;
         const 1035087118366;
         const S3yFW_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.988786291 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme1_closure" {
     Text.Read.Lex.$fShowLexeme1_closure:
         const Text.Read.Lex.$fShowLexeme1_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme1_entry() //  [R2]
         { []
         }
     {offset
       c3D7R: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme2_closure+1;
           call Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme1_info" {
     Text.Read.Lex.$fShowLexeme1_info:
         const Text.Read.Lex.$fShowLexeme1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3yFW_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.992242302 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshowList_closure" {
     Text.Read.Lex.$fShowLexeme_$cshowList_closure:
         const Text.Read.Lex.$fShowLexeme_$cshowList_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c3D82: // global
           R4 = R3;
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme_$cshowList_info" {
     Text.Read.Lex.$fShowLexeme_$cshowList_info:
         const Text.Read.Lex.$fShowLexeme_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3yFW_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.995682833 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_closure" {
     Text.Read.Lex.$fShowLexeme_closure:
         const GHC.Show.C:Show_con_info;
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure+2;
         const Text.Read.Lex.$fShowLexeme_$cshow_closure+1;
         const Text.Read.Lex.$fShowLexeme_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:11.99742594 UTC

[section ""cstring" . Text.Read.Lex.isSymbolChar4_bytes" {
     Text.Read.Lex.isSymbolChar4_bytes:
         I8[] [44,59,40,41,91,93,123,125,96]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.000094661 UTC

[section ""data" . Text.Read.Lex.isSymbolChar3_closure" {
     Text.Read.Lex.isSymbolChar3_closure:
         const Text.Read.Lex.isSymbolChar3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.isSymbolChar3_entry() //  [R1]
         { []
         }
     {offset
       c3D8h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D8i; else goto c3D8j;
       c3D8i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D8j: // global
           (_c3D8e::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3D8e::I64 == 0) goto c3D8g; else goto c3D8f;
       c3D8g: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3D8f: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3D8e::I64;
           R2 = Text.Read.Lex.isSymbolChar4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.isSymbolChar3_info" {
     Text.Read.Lex.isSymbolChar3_info:
         const Text.Read.Lex.isSymbolChar3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.003615935 UTC

[section ""cstring" . Text.Read.Lex.isSymbolChar2_bytes" {
     Text.Read.Lex.isSymbolChar2_bytes:
         I8[] [39,34]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.006235406 UTC

[section ""data" . Text.Read.Lex.isSymbolChar1_closure" {
     Text.Read.Lex.isSymbolChar1_closure:
         const Text.Read.Lex.isSymbolChar1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.isSymbolChar1_entry() //  [R1]
         { []
         }
     {offset
       c3D8y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D8z; else goto c3D8A;
       c3D8z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D8A: // global
           (_c3D8v::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3D8v::I64 == 0) goto c3D8x; else goto c3D8w;
       c3D8x: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3D8w: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3D8v::I64;
           R2 = Text.Read.Lex.isSymbolChar2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.isSymbolChar1_info" {
     Text.Read.Lex.isSymbolChar1_info:
         const Text.Read.Lex.isSymbolChar1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.012743548 UTC

[section ""data" . Text.Read.Lex.isSymbolChar_closure" {
     Text.Read.Lex.isSymbolChar_closure:
         const Text.Read.Lex.isSymbolChar_info;
         const 0;
 },
 Text.Read.Lex.isSymbolChar_entry() //  [R2]
         { []
         }
     {offset
       c3D8S: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3D8T; else goto c3D8U;
       c3D8T: // global
           R2 = R2;
           R1 = Text.Read.Lex.isSymbolChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3D8U: // global
           I64[Sp - 16] = block_c3D8M_info;
           R4 = Text.Read.Lex.isSymbolChar3_closure;
           R3 = R2;
           _s3ygf::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 8] = _s3ygf::P64;
           Sp = Sp - 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.isSymbolChar_info" {
     Text.Read.Lex.isSymbolChar_info:
         const Text.Read.Lex.isSymbolChar_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S3yFW_srt+120;
 },
 _c3D8M() //  [R1]
         { []
         }
     {offset
       c3D8M: // global
           if (R1 & 7 == 1) goto c3D8P; else goto u3D9Z;
       c3D8P: // global
           _s3ygf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3D8X_info;
           R1 = _s3ygf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Dac; else goto c3D8Z;
       u3Dac: // global
           call _c3D8X(R1) args: 0, res: 0, upd: 0;
       c3D8Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3D9Z: // global
           Sp = Sp + 16;
           call _c3D8Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3D8M_info" {
     block_c3D8M_info:
         const _c3D8M;
         const 1;
         const 21474836510;
         const S3yFW_srt+120;
 },
 _c3D8X() //  [R1]
         { []
         }
     {offset
       c3D8X: // global
           I64[Sp - 16] = block_c3D93_info;
           _s3ygi::I64 = I64[R1 + 7];
           R2 = _s3ygi::I64;
           I64[Sp - 8] = _s3ygi::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3D8X_info" {
     block_c3D8X_info:
         const _c3D8X;
         const 0;
         const 21474836510;
         const S3yFW_srt+120;
 },
 _c3D93() //  [R1]
         { []
         }
     {offset
       c3D93: // global
           _c3D9V::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c3D9V::I64 < 22) goto u3D9X; else goto u3Da0;
       u3D9X: // global
           if (_c3D9V::I64 < 11) goto u3Da1; else goto u3D9Y;
       u3Da1: // global
           Sp = Sp + 24;
           goto u3Dai;
       u3D9Y: // global
           switch [11 .. 21] _c3D9V::I64 {
               case 11 : goto c3D9i;
               case 12 : goto u3Da7;
               case 17 : goto c3D9r;
               case 18, 19, 20, 21 : goto u3Da7;
               default: {goto u3Da2;}
           }
       c3D9r: // global
           _s3ygh::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3D9p_info;
           R4 = Text.Read.Lex.isSymbolChar1_closure;
           R3 = _s3ygh::P64;
           R2 = GHC.Classes.$fEqChar_closure;
           Sp = Sp + 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       u3Da7: // global
           Sp = Sp + 24;
           goto u3Daj;
       c3D9i: // global
           if (I64[Sp + 8] == 95) goto u3Daa; else goto u3Dab;
       u3Daa: // global
           Sp = Sp + 24;
           goto u3Dai;
       u3Dab: // global
           Sp = Sp + 24;
           goto u3Daj;
       u3Daj: // global
           call _c3D9R() args: 0, res: 0, upd: 0;
       u3Da2: // global
           Sp = Sp + 24;
           goto u3Dai;
       u3Da0: // global
           Sp = Sp + 24;
           goto u3Dai;
       u3Dai: // global
           call _c3D8Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3D93_info" {
     block_c3D93_info:
         const _c3D93;
         const 66;
         const 4294967326;
         const S3yFW_srt+136;
 },
 _c3D9p() //  [R1]
         { []
         }
     {offset
       c3D9p: // global
           if (R1 & 7 == 1) goto u3Da8; else goto u3Da9;
       u3Da8: // global
           Sp = Sp + 8;
           call _c3D9R() args: 0, res: 0, upd: 0;
       u3Da9: // global
           Sp = Sp + 8;
           call _c3D8Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3D9p_info" {
     block_c3D9p_info:
         const _c3D9p;
         const 0;
         const 30;
 },
 _c3D9R() //  []
         { []
         }
     {offset
       c3D9R: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3D8Q() //  []
         { []
         }
     {offset
       c3D8Q: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.024778544 UTC

[section ""cstring" . lvl_r3y8T_bytes" {
     lvl_r3y8T_bytes:
         I8[] [95,39]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.027037144 UTC

[section ""data" . lvl1_r3y8U_closure" {
     lvl1_r3y8U_closure:
         const lvl1_r3y8U_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3y8U_entry() //  [R1]
         { []
         }
     {offset
       c3DaY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DaZ; else goto c3Db0;
       c3DaZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Db0: // global
           (_c3DaV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DaV::I64 == 0) goto c3DaX; else goto c3DaW;
       c3DaX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DaW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DaV::I64;
           R2 = lvl_r3y8T_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r3y8U_info" {
     lvl1_r3y8U_info:
         const lvl1_r3y8U_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.031543114 UTC

[section ""data" . $wisIdfChar_r3y8V_closure" {
     $wisIdfChar_r3y8V_closure:
         const $wisIdfChar_r3y8V_info;
         const 0;
 },
 $wisIdfChar_r3y8V_entry() //  [R2]
         { []
         }
     {offset
       c3Dbe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Dbi; else goto c3Dbh;
       c3Dbi: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = $wisIdfChar_r3y8V_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Dbh: // global
           (_s3ygr::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(R2);
           if (_s3ygr::I64 == 0) goto c3Dbs; else goto c3Dbo;
       c3Dbs: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R2;
           R4 = lvl1_r3y8U_closure;
           R3 = Hp - 7;
           R2 = GHC.Classes.$fEqChar_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3Dbo: // global
           Hp = Hp - 16;
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wisIdfChar_r3y8V_info" {
     $wisIdfChar_r3y8V_info:
         const $wisIdfChar_r3y8V_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const S3yFW_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.036192923 UTC

[section ""data" . isIdfChar_r3y8W_closure" {
     isIdfChar_r3y8W_closure:
         const isIdfChar_r3y8W_info;
         const 0;
 },
 isIdfChar_r3y8W_entry() //  [R2]
         { []
         }
     {offset
       c3DbF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DbG; else goto c3DbH;
       c3DbG: // global
           R2 = R2;
           R1 = isIdfChar_r3y8W_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3DbH: // global
           I64[Sp - 8] = block_c3DbC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DbL; else goto c3DbD;
       u3DbL: // global
           call _c3DbC(R1) args: 0, res: 0, upd: 0;
       c3DbD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . isIdfChar_r3y8W_info" {
     isIdfChar_r3y8W_info:
         const isIdfChar_r3y8W_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+160;
 },
 _c3DbC() //  [R1]
         { []
         }
     {offset
       c3DbC: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call $wisIdfChar_r3y8V_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DbC_info" {
     block_c3DbC_info:
         const _c3DbC;
         const 0;
         const 4294967326;
         const S3yFW_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.040979853 UTC

[section ""cstring" . reserved_ops_r3y8X_bytes" {
     reserved_ops_r3y8X_bytes:
         I8[] [46,46]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.043994785 UTC

[section ""data" . reserved_ops1_r3y8Y_closure" {
     reserved_ops1_r3y8Y_closure:
         const reserved_ops1_r3y8Y_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops1_r3y8Y_entry() //  [R1]
         { []
         }
     {offset
       c3Dc2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Dc3; else goto c3Dc4;
       c3Dc3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dc4: // global
           (_c3DbZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DbZ::I64 == 0) goto c3Dc1; else goto c3Dc0;
       c3Dc1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Dc0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DbZ::I64;
           R2 = reserved_ops_r3y8X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops1_r3y8Y_info" {
     reserved_ops1_r3y8Y_info:
         const reserved_ops1_r3y8Y_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.047458227 UTC

[section ""cstring" . reserved_ops2_r3y8Z_bytes" {
     reserved_ops2_r3y8Z_bytes:
         I8[] [58,58]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.049714286 UTC

[section ""data" . reserved_ops3_r3y90_closure" {
     reserved_ops3_r3y90_closure:
         const reserved_ops3_r3y90_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops3_r3y90_entry() //  [R1]
         { []
         }
     {offset
       c3Dcj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Dck; else goto c3Dcl;
       c3Dck: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dcl: // global
           (_c3Dcg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Dcg::I64 == 0) goto c3Dci; else goto c3Dch;
       c3Dci: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Dch: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Dcg::I64;
           R2 = reserved_ops2_r3y8Z_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops3_r3y90_info" {
     reserved_ops3_r3y90_info:
         const reserved_ops3_r3y90_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.054249762 UTC

[section ""cstring" . reserved_ops4_r3y91_bytes" {
     reserved_ops4_r3y91_bytes:
         I8[] [61]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.056452094 UTC

[section ""data" . reserved_ops5_r3y92_closure" {
     reserved_ops5_r3y92_closure:
         const reserved_ops5_r3y92_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops5_r3y92_entry() //  [R1]
         { []
         }
     {offset
       c3DcA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DcB; else goto c3DcC;
       c3DcB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DcC: // global
           (_c3Dcx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Dcx::I64 == 0) goto c3Dcz; else goto c3Dcy;
       c3Dcz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Dcy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Dcx::I64;
           R2 = reserved_ops4_r3y91_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops5_r3y92_info" {
     reserved_ops5_r3y92_info:
         const reserved_ops5_r3y92_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.059920281 UTC

[section ""cstring" . reserved_ops6_r3y93_bytes" {
     reserved_ops6_r3y93_bytes:
         I8[] [92]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.06211513 UTC

[section ""data" . reserved_ops7_r3y94_closure" {
     reserved_ops7_r3y94_closure:
         const reserved_ops7_r3y94_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops7_r3y94_entry() //  [R1]
         { []
         }
     {offset
       c3DcR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DcS; else goto c3DcT;
       c3DcS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DcT: // global
           (_c3DcO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DcO::I64 == 0) goto c3DcQ; else goto c3DcP;
       c3DcQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DcP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DcO::I64;
           R2 = reserved_ops6_r3y93_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops7_r3y94_info" {
     reserved_ops7_r3y94_info:
         const reserved_ops7_r3y94_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.066097347 UTC

[section ""cstring" . reserved_ops8_r3y95_bytes" {
     reserved_ops8_r3y95_bytes:
         I8[] [124]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.068284579 UTC

[section ""data" . reserved_ops9_r3y96_closure" {
     reserved_ops9_r3y96_closure:
         const reserved_ops9_r3y96_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops9_r3y96_entry() //  [R1]
         { []
         }
     {offset
       c3Dd8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Dd9; else goto c3Dda;
       c3Dd9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dda: // global
           (_c3Dd5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Dd5::I64 == 0) goto c3Dd7; else goto c3Dd6;
       c3Dd7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Dd6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Dd5::I64;
           R2 = reserved_ops8_r3y95_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops9_r3y96_info" {
     reserved_ops9_r3y96_info:
         const reserved_ops9_r3y96_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.072107851 UTC

[section ""cstring" . reserved_ops10_r3y97_bytes" {
     reserved_ops10_r3y97_bytes:
         I8[] [60,45]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.074811642 UTC

[section ""data" . reserved_ops11_r3y98_closure" {
     reserved_ops11_r3y98_closure:
         const reserved_ops11_r3y98_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops11_r3y98_entry() //  [R1]
         { []
         }
     {offset
       c3Ddp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ddq; else goto c3Ddr;
       c3Ddq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ddr: // global
           (_c3Ddm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ddm::I64 == 0) goto c3Ddo; else goto c3Ddn;
       c3Ddo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ddn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ddm::I64;
           R2 = reserved_ops10_r3y97_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops11_r3y98_info" {
     reserved_ops11_r3y98_info:
         const reserved_ops11_r3y98_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.078295819 UTC

[section ""cstring" . reserved_ops12_r3y99_bytes" {
     reserved_ops12_r3y99_bytes:
         I8[] [45,62]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.080487162 UTC

[section ""data" . reserved_ops13_r3y9a_closure" {
     reserved_ops13_r3y9a_closure:
         const reserved_ops13_r3y9a_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops13_r3y9a_entry() //  [R1]
         { []
         }
     {offset
       c3DdG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DdH; else goto c3DdI;
       c3DdH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DdI: // global
           (_c3DdD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DdD::I64 == 0) goto c3DdF; else goto c3DdE;
       c3DdF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DdE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DdD::I64;
           R2 = reserved_ops12_r3y99_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops13_r3y9a_info" {
     reserved_ops13_r3y9a_info:
         const reserved_ops13_r3y9a_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.084788288 UTC

[section ""cstring" . reserved_ops14_r3y9b_bytes" {
     reserved_ops14_r3y9b_bytes:
         I8[] [64]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.087031023 UTC

[section ""data" . reserved_ops15_r3y9c_closure" {
     reserved_ops15_r3y9c_closure:
         const reserved_ops15_r3y9c_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops15_r3y9c_entry() //  [R1]
         { []
         }
     {offset
       c3DdX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DdY; else goto c3DdZ;
       c3DdY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DdZ: // global
           (_c3DdU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DdU::I64 == 0) goto c3DdW; else goto c3DdV;
       c3DdW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DdV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DdU::I64;
           R2 = reserved_ops14_r3y9b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops15_r3y9c_info" {
     reserved_ops15_r3y9c_info:
         const reserved_ops15_r3y9c_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.090537572 UTC

[section ""cstring" . reserved_ops16_r3y9d_bytes" {
     reserved_ops16_r3y9d_bytes:
         I8[] [126]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.092713448 UTC

[section ""data" . reserved_ops17_r3y9e_closure" {
     reserved_ops17_r3y9e_closure:
         const reserved_ops17_r3y9e_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops17_r3y9e_entry() //  [R1]
         { []
         }
     {offset
       c3Dee: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Def; else goto c3Deg;
       c3Def: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Deg: // global
           (_c3Deb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Deb::I64 == 0) goto c3Ded; else goto c3Dec;
       c3Ded: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Dec: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Deb::I64;
           R2 = reserved_ops16_r3y9d_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops17_r3y9e_info" {
     reserved_ops17_r3y9e_info:
         const reserved_ops17_r3y9e_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.096743752 UTC

[section ""cstring" . reserved_ops18_r3y9f_bytes" {
     reserved_ops18_r3y9f_bytes:
         I8[] [61,62]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.099221823 UTC

[section ""data" . reserved_ops19_r3y9g_closure" {
     reserved_ops19_r3y9g_closure:
         const reserved_ops19_r3y9g_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops19_r3y9g_entry() //  [R1]
         { []
         }
     {offset
       c3Dev: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Dew; else goto c3Dex;
       c3Dew: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dex: // global
           (_c3Des::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Des::I64 == 0) goto c3Deu; else goto c3Det;
       c3Deu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Det: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Des::I64;
           R2 = reserved_ops18_r3y9f_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops19_r3y9g_info" {
     reserved_ops19_r3y9g_info:
         const reserved_ops19_r3y9g_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.102805348 UTC

[section ""data" . reserved_ops20_r3y9h_closure" {
     reserved_ops20_r3y9h_closure:
         const :_con_info;
         const reserved_ops19_r3y9g_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.104640954 UTC

[section ""data" . reserved_ops21_r3y9i_closure" {
     reserved_ops21_r3y9i_closure:
         const :_con_info;
         const reserved_ops17_r3y9e_closure;
         const reserved_ops20_r3y9h_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.106768366 UTC

[section ""data" . reserved_ops22_r3y9j_closure" {
     reserved_ops22_r3y9j_closure:
         const :_con_info;
         const reserved_ops15_r3y9c_closure;
         const reserved_ops21_r3y9i_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.108482099 UTC

[section ""data" . reserved_ops23_r3y9k_closure" {
     reserved_ops23_r3y9k_closure:
         const :_con_info;
         const reserved_ops13_r3y9a_closure;
         const reserved_ops22_r3y9j_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.110212502 UTC

[section ""data" . reserved_ops24_r3y9l_closure" {
     reserved_ops24_r3y9l_closure:
         const :_con_info;
         const reserved_ops11_r3y98_closure;
         const reserved_ops23_r3y9k_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.111955739 UTC

[section ""data" . reserved_ops25_r3y9m_closure" {
     reserved_ops25_r3y9m_closure:
         const :_con_info;
         const reserved_ops9_r3y96_closure;
         const reserved_ops24_r3y9l_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.114180552 UTC

[section ""data" . reserved_ops26_r3y9n_closure" {
     reserved_ops26_r3y9n_closure:
         const :_con_info;
         const reserved_ops7_r3y94_closure;
         const reserved_ops25_r3y9m_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.115892553 UTC

[section ""data" . reserved_ops27_r3y9o_closure" {
     reserved_ops27_r3y9o_closure:
         const :_con_info;
         const reserved_ops5_r3y92_closure;
         const reserved_ops26_r3y9n_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.117999795 UTC

[section ""data" . reserved_ops28_r3y9p_closure" {
     reserved_ops28_r3y9p_closure:
         const :_con_info;
         const reserved_ops3_r3y90_closure;
         const reserved_ops27_r3y9o_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.119753744 UTC

[section ""data" . reserved_ops29_r3y9q_closure" {
     reserved_ops29_r3y9q_closure:
         const :_con_info;
         const reserved_ops1_r3y8Y_closure;
         const reserved_ops28_r3y9p_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.127736298 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c==1_closure" {
     Text.Read.Lex.$fEqLexeme_$c==1_closure:
         const Text.Read.Lex.$fEqLexeme_$c==1_info;
 },
 Text.Read.Lex.$fEqLexeme_$c==1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Df0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Df1; else goto c3Df2;
       c3Df1: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c==1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Df2: // global
           I64[Sp - 16] = block_c3DeT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DhN; else goto c3DeU;
       u3DhN: // global
           call _c3DeT(R1) args: 0, res: 0, upd: 0;
       c3DeU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fEqLexeme_$c==1_info" {
     Text.Read.Lex.$fEqLexeme_$c==1_info:
         const Text.Read.Lex.$fEqLexeme_$c==1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3DeT() //  [R1]
         { []
         }
     {offset
       c3DeT: // global
           _s3ygy::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3DeX; else goto c3DeY;
       c3DeX: // global
           I64[Sp - 8] = block_c3Df5_info;
           _s3ygA::P64 = P64[R1 + 7];
           _s3ygB::P64 = P64[R1 + 15];
           R1 = _s3ygy::P64;
           P64[Sp] = _s3ygB::P64;
           P64[Sp + 8] = _s3ygA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DhL; else goto c3Df7;
       u3DhL: // global
           call _c3Df5(R1) args: 0, res: 0, upd: 0;
       c3Df7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3DeY: // global
           I64[Sp - 16] = block_c3DfB_info;
           _s3ygN::P64 = P64[R1 + 6];
           _s3ygO::P64 = P64[R1 + 14];
           _s3ygP::P64 = P64[R1 + 22];
           R1 = _s3ygy::P64;
           P64[Sp - 8] = _s3ygP::P64;
           P64[Sp] = _s3ygO::P64;
           P64[Sp + 8] = _s3ygN::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DhM; else goto c3DfD;
       u3DhM: // global
           call _c3DfB(R1) args: 0, res: 0, upd: 0;
       c3DfD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DeT_info" {
     block_c3DeT_info:
         const _c3DeT;
         const 1;
         const 30;
 },
 _c3Df5() //  [R1]
         { []
         }
     {offset
       c3Df5: // global
           if (R1 & 7 == 1) goto c3Dfj; else goto u3DhJ;
       c3Dfj: // global
           I64[Sp - 8] = block_c3Dfb_info;
           _s3ygD::P64 = P64[R1 + 7];
           _s3ygE::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s3ygE::P64;
           P64[Sp + 16] = _s3ygD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DhO; else goto c3Dfc;
       u3DhO: // global
           call _c3Dfb(R1) args: 0, res: 0, upd: 0;
       c3Dfc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3DhJ: // global
           Sp = Sp + 24;
           call _c3Dhl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Df5_info" {
     block_c3Df5_info:
         const _c3Df5;
         const 2;
         const 30;
 },
 _c3Dfb() //  [R1]
         { []
         }
     {offset
       c3Dfb: // global
           I64[Sp] = block_c3Dfg_info;
           _s3ygG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s3ygG::I64;
           if (R1 & 7 != 0) goto u3DhQ; else goto c3Dfl;
       u3DhQ: // global
           call _c3Dfg(R1) args: 0, res: 0, upd: 0;
       c3Dfl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Dfb_info" {
     block_c3Dfb_info:
         const _c3Dfb;
         const 3;
         const 30;
 },
 _c3Dfg() //  [R1]
         { []
         }
     {offset
       c3Dfg: // global
           if (I64[Sp + 24] == I64[R1 + 7]) goto c3Dfu; else goto u3DhK;
       c3Dfu: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
       u3DhK: // global
           Sp = Sp + 32;
           call _c3Dhl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Dfg_info" {
     block_c3Dfg_info:
         const _c3Dfg;
         const 259;
         const 30;
 },
 _c3DfB() //  [R1]
         { []
         }
     {offset
       c3DfB: // global
           if (R1 & 7 == 1) goto u3DhA; else goto c3DfO;
       u3DhA: // global
           Sp = Sp + 32;
           call _c3Dhl() args: 0, res: 0, upd: 0;
       c3DfO: // global
           I64[Sp - 8] = block_c3DfM_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 22];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 8;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DfB_info" {
     block_c3DfB_info:
         const _c3DfB;
         const 3;
         const 30;
 },
 _c3DfM() //  [R1]
         { []
         }
     {offset
       c3DfM: // global
           if (R1 & 7 == 1) goto u3DhB; else goto c3DgF;
       u3DhB: // global
           Sp = Sp + 40;
           call _c3Dhl() args: 0, res: 0, upd: 0;
       c3DgF: // global
           I64[Sp] = block_c3DfZ_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3DhT; else goto c3DgG;
       u3DhT: // global
           call _c3DfZ(R1) args: 0, res: 0, upd: 0;
       c3DgG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DfM_info" {
     block_c3DfM_info:
         const _c3DfM;
         const 4;
         const 30;
 },
 _c3DfZ() //  [R1]
         { []
         }
     {offset
       c3DfZ: // global
           _s3ygU::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c3DgN; else goto c3Dh3;
       c3DgN: // global
           I64[Sp] = block_c3DgK_info;
           R1 = _s3ygU::P64;
           if (R1 & 7 != 0) goto u3DhV; else goto c3DgO;
       u3DhV: // global
           call _c3DgK(R1) args: 0, res: 0, upd: 0;
       c3DgO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dh3: // global
           I64[Sp] = block_c3Dh1_info;
           _s3yh7::P64 = P64[R1 + 6];
           R1 = _s3ygU::P64;
           P64[Sp + 32] = _s3yh7::P64;
           if (R1 & 7 != 0) goto u3DhW; else goto c3Dh4;
       u3DhW: // global
           call _c3Dh1(R1) args: 0, res: 0, upd: 0;
       c3Dh4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DfZ_info" {
     block_c3DfZ_info:
         const _c3DfZ;
         const 260;
         const 30;
 },
 _c3DgK() //  [R1]
         { []
         }
     {offset
       c3DgK: // global
           if (R1 & 7 == 1) goto u3DhF; else goto u3DhG;
       u3DhF: // global
           Sp = Sp + 8;
           call _s3ygX() args: 0, res: 0, upd: 0;
       u3DhG: // global
           Sp = Sp + 40;
           call _c3Dhl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DgK_info" {
     block_c3DgK_info:
         const _c3DgK;
         const 772;
         const 30;
 },
 _c3Dh1() //  [R1]
         { []
         }
     {offset
       c3Dh1: // global
           if (R1 & 7 == 1) goto u3DhC; else goto c3Dhf;
       u3DhC: // global
           Sp = Sp + 40;
           call _c3Dhl() args: 0, res: 0, upd: 0;
       c3Dhf: // global
           I64[Sp] = block_c3Dhd_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 32];
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Dh1_info" {
     block_c3Dh1_info:
         const _c3Dh1;
         const 260;
         const 30;
 },
 _c3Dhd() //  [R1]
         { []
         }
     {offset
       c3Dhd: // global
           if (R1 & 7 == 1) goto u3DhD; else goto u3DhE;
       u3DhD: // global
           Sp = Sp + 40;
           call _c3Dhl() args: 0, res: 0, upd: 0;
       u3DhE: // global
           Sp = Sp + 8;
           call _s3ygX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Dhd_info" {
     block_c3Dhd_info:
         const _c3Dhd;
         const 772;
         const 30;
 },
 _s3ygX() //  []
         { []
         }
     {offset
       s3ygX: // global
           I64[Sp - 8] = block_c3Dg4_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Di6; else goto c3Dg6;
       u3Di6: // global
           call _c3Dg4(R1) args: 0, res: 0, upd: 0;
       c3Dg6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dg4() //  [R1]
         { []
         }
     {offset
       c3Dg4: // global
           _s3ygV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3Dgd; else goto c3Dgt;
       c3Dgd: // global
           I64[Sp + 32] = block_c3Dga_info;
           R1 = _s3ygV::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3DhX; else goto c3Dge;
       u3DhX: // global
           call _c3Dga(R1) args: 0, res: 0, upd: 0;
       c3Dge: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dgt: // global
           I64[Sp + 24] = block_c3Dgr_info;
           _s3yh1::P64 = P64[R1 + 6];
           R1 = _s3ygV::P64;
           P64[Sp + 32] = _s3yh1::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3DhY; else goto c3Dgu;
       u3DhY: // global
           call _c3Dgr(R1) args: 0, res: 0, upd: 0;
       c3Dgu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Dg4_info" {
     block_c3Dg4_info:
         const _c3Dg4;
         const 900;
         const 30;
 },
 _c3Dga() //  [R1]
         { []
         }
     {offset
       c3Dga: // global
           if (R1 & 7 == 1) goto c3Dgk; else goto u3DhI;
       c3Dgk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3DhI: // global
           Sp = Sp + 8;
           call _c3Dhl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Dga_info" {
     block_c3Dga_info:
         const _c3Dga;
         const 0;
         const 30;
 },
 _c3Dgr() //  [R1]
         { []
         }
     {offset
       c3Dgr: // global
           if (R1 & 7 == 1) goto u3DhH; else goto c3DgE;
       u3DhH: // global
           Sp = Sp + 16;
           call _c3Dhl() args: 0, res: 0, upd: 0;
       c3DgE: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Dgr_info" {
     block_c3Dgr_info:
         const _c3Dgr;
         const 1;
         const 30;
 },
 _c3Dhl() //  []
         { []
         }
     {offset
       c3Dhl: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.156484378 UTC

[section ""data" . Text.Read.Lex.$fEqNumber_$c/=_closure" {
     Text.Read.Lex.$fEqNumber_$c/=_closure:
         const Text.Read.Lex.$fEqNumber_$c/=_info;
 },
 Text.Read.Lex.$fEqNumber_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c3DjF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DjG; else goto c3DjH;
       c3DjG: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqNumber_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DjH: // global
           I64[Sp - 8] = block_c3Djz_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$fEqLexeme_$c==1_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fEqNumber_$c/=_info" {
     Text.Read.Lex.$fEqNumber_$c/=_info:
         const Text.Read.Lex.$fEqNumber_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3Djz() //  [R1]
         { []
         }
     {offset
       c3Djz: // global
           if (R1 & 7 == 1) goto c3DjC; else goto c3DjD;
       c3DjC: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DjD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Djz_info" {
     block_c3Djz_info:
         const _c3Djz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.161353405 UTC

[section ""data" . Text.Read.Lex.$fEqNumber_closure" {
     Text.Read.Lex.$fEqNumber_closure:
         const GHC.Classes.C:Eq_con_info;
         const Text.Read.Lex.$fEqLexeme_$c==1_closure+2;
         const Text.Read.Lex.$fEqNumber_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.168014098 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c==_closure" {
     Text.Read.Lex.$fEqLexeme_$c==_closure:
         const Text.Read.Lex.$fEqLexeme_$c==_info;
 },
 Text.Read.Lex.$fEqLexeme_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Dkh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Dki; else goto c3Dkj;
       c3Dki: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Dkj: // global
           I64[Sp - 16] = block_c3Dk5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Dmm; else goto c3Dk6;
       u3Dmm: // global
           call _c3Dk5(R1) args: 0, res: 0, upd: 0;
       c3Dk6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fEqLexeme_$c==_info" {
     Text.Read.Lex.$fEqLexeme_$c==_info:
         const Text.Read.Lex.$fEqLexeme_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3Dk5() //  [R1]
         { []
         }
     {offset
       c3Dk5: // global
           _s3yhf::P64 = P64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3Dk9;
               case 2 : goto c3Dka;
               case 3 : goto c3Dkb;
               case 4 : goto c3Dkc;
               case 5 : goto c3Dkd;
               case 6 : goto c3Dke;
               case 7 : goto c3Dkf;
           }
       c3Dkf: // global
           I64[Sp + 8] = block_c3DlO_info;
           R1 = _s3yhf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Dml; else goto c3DlQ;
       u3Dml: // global
           call _c3DlO(R1) args: 0, res: 0, upd: 0;
       c3DlQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dke: // global
           I64[Sp] = block_c3Dlz_info;
           _s3yhw::P64 = P64[R1 + 2];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhw::P64;
           if (R1 & 7 != 0) goto u3Dmk; else goto c3DlB;
       u3Dmk: // global
           call _c3Dlz(R1) args: 0, res: 0, upd: 0;
       c3DlB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dkd: // global
           I64[Sp] = block_c3Dlk_info;
           _s3yht::P64 = P64[R1 + 3];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yht::P64;
           if (R1 & 7 != 0) goto u3Dmj; else goto c3Dlm;
       u3Dmj: // global
           call _c3Dlk(R1) args: 0, res: 0, upd: 0;
       c3Dlm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dkc: // global
           I64[Sp] = block_c3Dl5_info;
           _s3yhq::P64 = P64[R1 + 4];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhq::P64;
           if (R1 & 7 != 0) goto u3Dmi; else goto c3Dl7;
       u3Dmi: // global
           call _c3Dl5(R1) args: 0, res: 0, upd: 0;
       c3Dl7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dkb: // global
           I64[Sp] = block_c3DkQ_info;
           _s3yhn::P64 = P64[R1 + 5];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhn::P64;
           if (R1 & 7 != 0) goto u3Dmh; else goto c3DkS;
       u3Dmh: // global
           call _c3DkQ(R1) args: 0, res: 0, upd: 0;
       c3DkS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dka: // global
           I64[Sp] = block_c3DkB_info;
           _s3yhk::P64 = P64[R1 + 6];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhk::P64;
           if (R1 & 7 != 0) goto u3Dmg; else goto c3DkD;
       u3Dmg: // global
           call _c3DkB(R1) args: 0, res: 0, upd: 0;
       c3DkD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dk9: // global
           I64[Sp] = block_c3Dkm_info;
           _s3yhh::P64 = P64[R1 + 7];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhh::P64;
           if (R1 & 7 != 0) goto u3Dmf; else goto c3Dko;
       u3Dmf: // global
           call _c3Dkm(R1) args: 0, res: 0, upd: 0;
       c3Dko: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Dk5_info" {
     block_c3Dk5_info:
         const _c3Dk5;
         const 1;
         const 30;
 },
 _c3DlO() //  [R1]
         { []
         }
     {offset
       c3DlO: // global
           if (R1 & 7 == 7) goto c3Dm0; else goto u3Dm8;
       c3Dm0: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Dm8: // global
           Sp = Sp + 8;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DlO_info" {
     block_c3DlO_info:
         const _c3DlO;
         const 0;
         const 30;
 },
 _c3Dlz() //  [R1]
         { []
         }
     {offset
       c3Dlz: // global
           if (R1 & 7 == 6) goto c3DlL; else goto u3Dm9;
       c3DlL: // global
           R3 = P64[R1 + 2];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.Read.Lex.$fEqLexeme_$c==1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       u3Dm9: // global
           Sp = Sp + 16;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Dlz_info" {
     block_c3Dlz_info:
         const _c3Dlz;
         const 1;
         const 30;
 },
 _c3Dlk() //  [R1]
         { []
         }
     {offset
       c3Dlk: // global
           if (R1 & 7 == 5) goto c3Dlw; else goto u3Dma;
       c3Dlw: // global
           R3 = P64[R1 + 3];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3Dma: // global
           Sp = Sp + 16;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Dlk_info" {
     block_c3Dlk_info:
         const _c3Dlk;
         const 1;
         const 30;
 },
 _c3Dl5() //  [R1]
         { []
         }
     {offset
       c3Dl5: // global
           if (R1 & 7 == 4) goto c3Dlh; else goto u3Dmb;
       c3Dlh: // global
           R3 = P64[R1 + 4];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3Dmb: // global
           Sp = Sp + 16;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Dl5_info" {
     block_c3Dl5_info:
         const _c3Dl5;
         const 1;
         const 30;
 },
 _c3DkQ() //  [R1]
         { []
         }
     {offset
       c3DkQ: // global
           if (R1 & 7 == 3) goto c3Dl2; else goto u3Dmc;
       c3Dl2: // global
           R3 = P64[R1 + 5];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3Dmc: // global
           Sp = Sp + 16;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DkQ_info" {
     block_c3DkQ_info:
         const _c3DkQ;
         const 1;
         const 30;
 },
 _c3DkB() //  [R1]
         { []
         }
     {offset
       c3DkB: // global
           if (R1 & 7 == 2) goto c3DkN; else goto u3Dmd;
       c3DkN: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3Dmd: // global
           Sp = Sp + 16;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DkB_info" {
     block_c3DkB_info:
         const _c3DkB;
         const 1;
         const 30;
 },
 _c3Dkm() //  [R1]
         { []
         }
     {offset
       c3Dkm: // global
           if (R1 & 7 == 1) goto c3Dky; else goto u3Dme;
       c3Dky: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.eqChar_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3Dme: // global
           Sp = Sp + 16;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Dkm_info" {
     block_c3Dkm_info:
         const _c3Dkm;
         const 1;
         const 30;
 },
 _c3DlW() //  []
         { []
         }
     {offset
       c3DlW: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.188609002 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c/=_closure" {
     Text.Read.Lex.$fEqLexeme_$c/=_closure:
         const Text.Read.Lex.$fEqLexeme_$c/=_info;
 },
 Text.Read.Lex.$fEqLexeme_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c3DnA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DnB; else goto c3DnC;
       c3DnB: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DnC: // global
           I64[Sp - 8] = block_c3Dnu_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$fEqLexeme_$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fEqLexeme_$c/=_info" {
     Text.Read.Lex.$fEqLexeme_$c/=_info:
         const Text.Read.Lex.$fEqLexeme_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3Dnu() //  [R1]
         { []
         }
     {offset
       c3Dnu: // global
           if (R1 & 7 == 1) goto c3Dnx; else goto c3Dny;
       c3Dnx: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Dny: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Dnu_info" {
     block_c3Dnu_info:
         const _c3Dnu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.193587146 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_closure" {
     Text.Read.Lex.$fEqLexeme_closure:
         const GHC.Classes.C:Eq_con_info;
         const Text.Read.Lex.$fEqLexeme_$c==_closure+2;
         const Text.Read.Lex.$fEqLexeme_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.195993228 UTC

[section ""data" . Text.Read.Lex.numberToFixed2_closure" {
     Text.Read.Lex.numberToFixed2_closure:
         const Text.Read.Lex.numberToFixed2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToFixed2_entry() //  [R1]
         { []
         }
     {offset
       c3Do2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Do3; else goto c3Do4;
       c3Do3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Do4: // global
           (_c3DnZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DnZ::I64 == 0) goto c3Do1; else goto c3Do0;
       c3Do1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Do0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DnZ::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToFixed2_info" {
     Text.Read.Lex.numberToFixed2_info:
         const Text.Read.Lex.numberToFixed2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.200343187 UTC

[section ""cstring" . lvl2_r3y9r_bytes" {
     lvl2_r3y9r_bytes:
         I8[] [116,104,105,115,32,115,104,111,117,108,100,32,110,111,116,32,104,97,112,112,101,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.202946432 UTC

[section ""data" . lvl3_r3y9s_closure" {
     lvl3_r3y9s_closure:
         const lvl3_r3y9s_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r3y9s_entry() //  [R1]
         { []
         }
     {offset
       c3Dol: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Dom; else goto c3Don;
       c3Dom: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Don: // global
           (_c3Dog::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Dog::I64 == 0) goto c3Doi; else goto c3Doh;
       c3Doi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Doh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Dog::I64;
           I64[Sp - 24] = block_c3Doj_info;
           R2 = lvl2_r3y9r_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r3y9s_info" {
     lvl3_r3y9s_info:
         const lvl3_r3y9s_entry;
         const 0;
         const 4294967317;
         const S3yFW_srt+176;
 },
 _c3Doj() //  [R1]
         { []
         }
     {offset
       c3Doj: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Doj_info" {
     block_c3Doj_info:
         const _c3Doj;
         const 0;
         const 4294967326;
         const S3yFW_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.210867342 UTC

[section ""data" . combine_r3y9t_closure" {
     combine_r3y9t_closure:
         const combine_r3y9t_info;
         const 0;
 },
 sat_s3yhO_entry() //  [R1]
         { []
         }
     {offset
       c3Dp3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Dp4; else goto c3Dp5;
       c3Dp4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dp5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call combine_r3y9t_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yhO_info" {
     sat_s3yhO_info:
         const sat_s3yhO_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+184;
 },
 combine_r3y9t_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Dpa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Dpb; else goto c3Dpc;
       c3Dpb: // global
           R3 = R3;
           R2 = R2;
           R1 = combine_r3y9t_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Dpc: // global
           I64[Sp - 16] = block_c3DoF_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Dpt; else goto c3DoG;
       u3Dpt: // global
           call _c3DoF(R1) args: 0, res: 0, upd: 0;
       c3DoG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . combine_r3y9t_info" {
     combine_r3y9t_info:
         const combine_r3y9t_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const S3yFW_srt+184;
 },
 _c3DoF() //  [R1]
         { []
         }
     {offset
       c3DoF: // global
           if (R1 & 7 == 1) goto c3Dp7; else goto c3Dp8;
       c3Dp7: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Dp8: // global
           I64[Sp - 8] = block_c3DoL_info;
           _s3yhH::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3yhH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Dps; else goto c3DoM;
       u3Dps: // global
           call _c3DoL(R1) args: 0, res: 0, upd: 0;
       c3DoM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DoF_info" {
     block_c3DoF_info:
         const _c3DoF;
         const 1;
         const 64424509470;
         const S3yFW_srt+184;
 },
 _c3DoL() //  [R1]
         { []
         }
     {offset
       c3DoL: // global
           if (R1 & 7 == 1) goto c3Dpj; else goto c3Dpm;
       c3Dpj: // global
           R1 = lvl3_r3y9s_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Dpm: // global
           I64[Sp - 8] = block_c3DoR_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DoL_info" {
     block_c3DoL_info:
         const _c3DoL;
         const 2;
         const 64424509470;
         const S3yFW_srt+184;
 },
 _c3DoR() //  [R1]
         { []
         }
     {offset
       c3DoR: // global
           I64[Sp] = block_c3DoV_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DoR_info" {
     block_c3DoR_info:
         const _c3DoR;
         const 3;
         const 12884901918;
         const S3yFW_srt+184;
 },
 _c3DoV() //  [R1]
         { []
         }
     {offset
       c3DoV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Dpq; else goto c3Dpp;
       c3Dpq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Dpp: // global
           I64[Hp - 48] = sat_s3yhO_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DoV_info" {
     block_c3DoV_info:
         const _c3DoV;
         const 131;
         const 4294967326;
         const S3yFW_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.228554184 UTC

[section ""data" . Text.Read.Lex.numberToFixed_go_closure" {
     Text.Read.Lex.numberToFixed_go_closure:
         const Text.Read.Lex.numberToFixed_go_info;
         const 0;
 },
 Text.Read.Lex.numberToFixed_go_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Dr7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Dr8; else goto u3Ds5;
       c3Dr8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_go_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3Ds5: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3Dq4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToFixed_go_info" {
     Text.Read.Lex.numberToFixed_go_info:
         const Text.Read.Lex.numberToFixed_go_entry;
         const 0;
         const 236223201294;
         const 12884901911;
         const S3yFW_srt+184;
 },
 _c3Dq4() //  []
         { []
         }
     {offset
       c3Dq4: // global
           I64[Sp - 8] = block_c3Dq7_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Dsc; else goto c3Dq8;
       u3Dsc: // global
           call _c3Dq7(R1) args: 0, res: 0, upd: 0;
       c3Dq8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dq7() //  [R1]
         { []
         }
     {offset
       c3Dq7: // global
           if (R1 & 7 == 1) goto c3Dr4; else goto c3Dr5;
       c3Dr4: // global
           R1 = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Dr5: // global
           I64[Sp - 8] = block_c3Dqd_info;
           _s3yhS::P64 = R1;
           _s3yhT::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3yhT::P64;
           P64[Sp + 24] = _s3yhS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Dsd; else goto c3Dqe;
       u3Dsd: // global
           call _c3Dqd(R1) args: 0, res: 0, upd: 0;
       c3Dqe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Dq7_info" {
     block_c3Dq7_info:
         const _c3Dq7;
         const 259;
         const 167503724574;
         const S3yFW_srt+184;
 },
 _c3Dqd() //  [R1]
         { []
         }
     {offset
       c3Dqd: // global
           if (R1 & 7 == 1) goto c3Drg; else goto c3Dri;
       c3Drg: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Dri: // global
           I64[Sp + 8] = block_c3Dqj_info;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Dse; else goto c3Dqk;
       u3Dse: // global
           call _c3Dqj(R1) args: 0, res: 0, upd: 0;
       c3Dqk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Dqd_info" {
     block_c3Dqd_info:
         const _c3Dqd;
         const 4;
         const 167503724574;
         const S3yFW_srt+184;
 },
 _c3Dqj() //  [R1]
         { []
         }
     {offset
       c3Dqj: // global
           _s3yhZ::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_s3yhZ::I64, 40)) goto c3DrN; else goto c3DrO;
       c3DrN: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 8;
           call _c3Drn() args: 0, res: 0, upd: 0;
       c3DrO: // global
           I64[Sp] = block_c3Dqs_info;
           _s3yhP::P64 = P64[Sp + 8];
           R3 = _s3yhP::P64;
           R2 = _s3yhP::P64;
           I64[Sp + 16] = _s3yhZ::I64;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Dqj_info" {
     block_c3Dqj_info:
         const _c3Dqj;
         const 131;
         const 167503724574;
         const S3yFW_srt+184;
 },
 _c3Drn() //  []
         { []
         }
     {offset
       c3Drn: // global
           I64[Sp - 8] = block_c3Drp_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Dsl; else goto c3Drr;
       u3Dsl: // global
           call _c3Drp(R1) args: 0, res: 0, upd: 0;
       c3Drr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Drp() //  [R1]
         { []
         }
     {offset
       c3Drp: // global
           _s3yi2::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3Drx; else goto c3DrG;
       c3Drx: // global
           R1 = _s3yi2::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3DrG: // global
           I64[Sp] = block_c3DrA_info;
           R3 = P64[Sp + 8];
           R2 = _s3yi2::P64;
           P64[Sp + 16] = P64[R1 + 14];
           P64[Sp + 24] = P64[R1 + 6];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Drp_info" {
     block_c3Drp_info:
         const _c3Drp;
         const 131;
         const 12884901918;
         const S3yFW_srt+192;
 },
 _c3DrA() //  [R1]
         { []
         }
     {offset
       c3DrA: // global
           I64[Sp] = block_c3DrE_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DrA_info" {
     block_c3DrA_info:
         const _c3DrA;
         const 3;
         const 12884901918;
         const S3yFW_srt+192;
 },
 _c3DrE() //  [R1]
         { []
         }
     {offset
       c3DrE: // global
           P64[Sp + 24] = R1;
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp + 8;
           call _c3Drn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DrE_info" {
     block_c3DrE_info:
         const _c3DrE;
         const 259;
         const 12884901918;
         const S3yFW_srt+192;
 },
 _c3Dqs() //  [R1]
         { []
         }
     {offset
       c3Dqs: // global
           _s3yhZ::I64 = I64[Sp + 16];
           _s3yia::I64 = _s3yhZ::I64 - (_s3yhZ::I64 + (_s3yhZ::I64 >> 63)) & (-2);
           if (_s3yia::I64 == 0) goto c3DrY; else goto u3Ds8;
       c3DrY: // global
           _s3yhP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3DqS_info;
           R3 = P64[Sp + 24];
           R2 = _s3yhP::P64;
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call combine_r3y9t_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3Ds8: // global
           I64[Sp - 8] = _s3yia::I64;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c3DqA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Dqs_info" {
     block_c3Dqs_info:
         const _c3Dqs;
         const 131;
         const 167503724574;
         const S3yFW_srt+184;
 },
 _c3DqS() //  [R1]
         { []
         }
     {offset
       c3DqS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ds2; else goto c3Ds1;
       c3Ds2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ds1: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3yig::I64 = I64[Sp + 8] + 1;
           I64[Hp] = %MO_S_Shr_W64(_s3yig::I64 + (_s3yig::I64 >> 63), 1);
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = R1;
           call _c3Dq4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DqS_info" {
     block_c3DqS_info:
         const _c3DqS;
         const 66;
         const 167503724574;
         const S3yFW_srt+184;
 },
 _c3DqA() //  []
         { []
         }
     {offset
       c3DqA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DrU; else goto c3DrT;
       c3DrU: // global
           HpAlloc = 24;
           _s3yia::I64 = I64[Sp];
           I64[Sp] = block_c3Dqz_info;
           R1 = _s3yia::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DrT: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Text.Read.Lex.numberToFixed2_closure;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3DqD_info;
           R3 = Hp - 14;
           R2 = P64[Sp + 16];
           call combine_r3y9t_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dqz() //  [R1]
         { []
         }
     {offset
       c3Dqz: // global
           I64[Sp] = R1;
           call _c3DqA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Dqz_info" {
     block_c3Dqz_info:
         const _c3Dqz;
         const 260;
         const 167503724574;
         const S3yFW_srt+184;
 },
 _c3DqD() //  [R1]
         { []
         }
     {offset
       c3DqD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DrX; else goto c3DrW;
       c3DrX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DrW: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3yib::I64 = I64[Sp + 24] + 1;
           I64[Hp] = %MO_S_Shr_W64(_s3yib::I64 + (_s3yib::I64 >> 63), 1);
           P64[Sp + 16] = P64[Sp + 8];
           P64[Sp + 24] = Hp - 7;
           P64[Sp + 32] = R1;
           Sp = Sp + 16;
           call _c3Dq4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DqD_info" {
     block_c3DqD_info:
         const _c3DqD;
         const 900;
         const 167503724574;
         const S3yFW_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.254521603 UTC

[section ""data" . Text.Read.Lex.valInteger_closure" {
     Text.Read.Lex.valInteger_closure:
         const Text.Read.Lex.valInteger_info;
         const 0;
 },
 sat_s3yin_entry() //  [R1]
         { []
         }
     {offset
       c3DtR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DtV; else goto c3DtW;
       c3DtV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DtW: // global
           I64[Sp - 8] = block_c3DtP_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yin_info" {
     sat_s3yin_info:
         const sat_s3yin_entry;
         const 1;
         const 16;
 },
 _c3DtP() //  [R1]
         { []
         }
     {offset
       c3DtP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DtZ; else goto c3DtY;
       c3DtZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DtY: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DtP_info" {
     block_c3DtP_info:
         const _c3DtP;
         const 0;
         const 30;
 },
 Text.Read.Lex.valInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Du0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Du1; else goto c3Du2;
       c3Du1: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.valInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Du2: // global
           I64[Sp - 24] = block_c3DtH_info;
           _s3yil::P64 = R3;
           R3 = R3;
           _s3yik::P64 = R2;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 16] = _s3yik::P64;
           P64[Sp - 8] = _s3yil::P64;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.valInteger_info" {
     Text.Read.Lex.valInteger_info:
         const Text.Read.Lex.valInteger_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S3yFW_srt+216;
 },
 _c3DtH() //  [R1]
         { []
         }
     {offset
       c3DtH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Du5; else goto c3Du4;
       c3Du5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Du4: // global
           I64[Hp - 16] = sat_s3yin_info;
           P64[Hp] = P64[Sp + 16];
           R4 = R1;
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DtH_info" {
     block_c3DtH_info:
         const _c3DtH;
         const 2;
         const 4294967326;
         const S3yFW_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.268271752 UTC

[section ""data" . Text.Read.Lex.$w$sreadIntP_closure" {
     Text.Read.Lex.$w$sreadIntP_closure:
         const Text.Read.Lex.$w$sreadIntP_info;
         const 0;
 },
 sat_s3yiz_entry() //  [R1]
         { []
         }
     {offset
       c3DuZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Dv3; else goto c3Dv4;
       c3Dv3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dv4: // global
           I64[Sp - 8] = block_c3DuX_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yiz_info" {
     sat_s3yiz_info:
         const sat_s3yiz_entry;
         const 1;
         const 16;
 },
 _c3DuX() //  [R1]
         { []
         }
     {offset
       c3DuX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Dv7; else goto c3Dv6;
       c3Dv7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Dv6: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DuX_info" {
     block_c3DuX_info:
         const _c3DuX;
         const 0;
         const 30;
 },
 sat_s3yiB_entry() //  [R1]
         { []
         }
     {offset
       c3Dv8: // global
           _s3yiB::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3Dv9; else goto c3Dva;
       c3Dva: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Dvc; else goto c3Dvb;
       c3Dvc: // global
           HpAlloc = 24;
           goto c3Dv9;
       c3Dv9: // global
           R1 = _s3yiB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dvb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yiB::P64;
           _s3yip::P64 = P64[_s3yiB::P64 + 16];
           _s3yir::P64 = P64[_s3yiB::P64 + 24];
           _s3yit::P64 = P64[_s3yiB::P64 + 32];
           _s3yiv::P64 = P64[_s3yiB::P64 + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yit::P64;
           P64[Hp] = _s3yiv::P64;
           I64[Sp - 32] = block_c3DuL_info;
           R3 = Hp - 14;
           R2 = _s3yir::P64;
           P64[Sp - 24] = _s3yip::P64;
           Sp = Sp - 32;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yiB_info" {
     sat_s3yiB_info:
         const sat_s3yiB_entry;
         const 4;
         const 4294967311;
         const S3yFW_srt+216;
 },
 _c3DuL() //  [R1]
         { []
         }
     {offset
       c3DuL: // global
           I64[Sp - 8] = block_c3DuP_info;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DuL_info" {
     block_c3DuL_info:
         const _c3DuL;
         const 1;
         const 4294967326;
         const S3yFW_srt+216;
 },
 _c3DuP() //  [R1]
         { []
         }
     {offset
       c3DuP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Dvg; else goto c3Dvf;
       c3Dvg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Dvf: // global
           I64[Hp - 16] = sat_s3yiz_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DuP_info" {
     block_c3DuP_info:
         const _c3DuP;
         const 2;
         const 4294967326;
         const S3yFW_srt+216;
 },
 sat_s3yiC_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Dvh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Dvl; else goto c3Dvk;
       c3Dvl: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Dvk: // global
           _s3yip::P64 = P64[R1 + 7];
           _s3yir::P64 = P64[R1 + 15];
           _s3yis::P64 = P64[R1 + 23];
           _s3yit::P64 = P64[R1 + 31];
           I64[Hp - 40] = sat_s3yiB_info;
           P64[Hp - 24] = _s3yip::P64;
           P64[Hp - 16] = _s3yir::P64;
           P64[Hp - 8] = _s3yit::P64;
           P64[Hp] = R2;
           R2 = Hp - 40;
           R1 = _s3yis::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yiC_info" {
     sat_s3yiC_info:
         const sat_s3yiC_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3yFW_srt+216;
 },
 sat_s3yiF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Dvq: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3Dvr; else goto c3Dvs;
       c3Dvr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Dvs: // global
           I64[Sp - 48] = block_c3Duw_info;
           _s3yit::P64 = R2;
           R2 = R2;
           _s3yip::P64 = P64[R1 + 7];
           _s3yiq::P64 = P64[R1 + 15];
           _s3yir::P64 = P64[R1 + 23];
           _s3yis::P64 = P64[R1 + 31];
           R1 = _s3yiq::P64;
           P64[Sp - 40] = _s3yip::P64;
           P64[Sp - 32] = _s3yiq::P64;
           P64[Sp - 24] = _s3yir::P64;
           P64[Sp - 16] = _s3yis::P64;
           P64[Sp - 8] = _s3yit::P64;
           Sp = Sp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yiF_info" {
     sat_s3yiF_info:
         const sat_s3yiF_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3yFW_srt+216;
 },
 _c3Duw() //  [R1]
         { []
         }
     {offset
       c3Duw: // global
           if (R1 & 7 == 1) goto c3Dvn; else goto c3Dvo;
       c3Dvn: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Dvo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3DvA; else goto c3Dvz;
       c3DvA: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Dvz: // global
           I64[Hp - 32] = sat_s3yiC_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           I64[Sp + 40] = block_c3Dvv_info;
           R3 = Hp - 31;
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Duw_info" {
     block_c3Duw_info:
         const _c3Duw;
         const 5;
         const 4294967326;
         const S3yFW_srt+216;
 },
 _c3Dvv() //  [R1]
         { []
         }
     {offset
       c3Dvv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DvD; else goto c3DvC;
       c3DvD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DvC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Dvv_info" {
     block_c3Dvv_info:
         const _c3Dvv;
         const 0;
         const 30;
 },
 Text.Read.Lex.$w$sreadIntP_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3DvE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3DvI; else goto c3DvH;
       c3DvI: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$sreadIntP_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DvH: // global
           I64[Hp - 32] = sat_s3yiF_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$w$sreadIntP_info" {
     Text.Read.Lex.$w$sreadIntP_info:
         const Text.Read.Lex.$w$sreadIntP_entry;
         const 0;
         const 38654705678;
         const 17179869208;
         const S3yFW_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.289175593 UTC

[section ""data" . Text.Read.Lex.readIntP1_closure" {
     Text.Read.Lex.readIntP1_closure:
         const Text.Read.Lex.readIntP1_info;
         const 0;
 },
 Text.Read.Lex.readIntP1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3Dwz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DwA; else goto c3DwB;
       c3DwA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readIntP1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DwB: // global
           I64[Sp - 8] = block_c3Dww_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readIntP1_info" {
     Text.Read.Lex.readIntP1_info:
         const Text.Read.Lex.readIntP1_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S3yFW_srt+240;
 },
 _c3Dww() //  [R1]
         { []
         }
     {offset
       c3Dww: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DwE; else goto c3DwD;
       c3DwE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DwD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Dww_info" {
     block_c3Dww_info:
         const _c3Dww;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.295566495 UTC

[section ""data" . Text.Read.Lex.readIntP_$sreadIntP_closure" {
     Text.Read.Lex.readIntP_$sreadIntP_closure:
         const Text.Read.Lex.readIntP_$sreadIntP_info;
         const 0;
 },
 Text.Read.Lex.readIntP_$sreadIntP_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3DwS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readIntP1_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readIntP_$sreadIntP_info" {
     Text.Read.Lex.readIntP_$sreadIntP_info:
         const Text.Read.Lex.readIntP_$sreadIntP_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3yFW_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.306461505 UTC

[section ""data" . Text.Read.Lex.$wreadIntP_closure" {
     Text.Read.Lex.$wreadIntP_closure:
         const Text.Read.Lex.$wreadIntP_info;
         const 0;
 },
 lvl116_s3yiR_entry() //  [R1]
         { []
         }
     {offset
       c3Dx7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Dx8; else goto c3Dx9;
       c3Dx8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dx9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yiR_info" {
     lvl116_s3yiR_info:
         const lvl116_s3yiR_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+224;
 },
 sat_s3yj4_entry() //  [R1]
         { []
         }
     {offset
       c3DxU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DxV; else goto c3DxW;
       c3DxV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DxW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3DxR_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Dy0; else goto c3DxS;
       u3Dy0: // global
           call _c3DxR(R1) args: 0, res: 0, upd: 0;
       c3DxS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yj4_info" {
     sat_s3yj4_info:
         const sat_s3yj4_entry;
         const 1;
         const 16;
 },
 _c3DxR() //  [R1]
         { []
         }
     {offset
       c3DxR: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DxR_info" {
     block_c3DxR_info:
         const _c3DxR;
         const 0;
         const 30;
 },
 sat_s3yj5_entry() //  [R1]
         { []
         }
     {offset
       c3Dy1: // global
           _s3yj5::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Dy2; else goto c3Dy3;
       c3Dy3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Dy5; else goto c3Dy4;
       c3Dy5: // global
           HpAlloc = 24;
           goto c3Dy2;
       c3Dy2: // global
           R1 = _s3yj5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dy4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yj5::P64;
           _s3yiM::P64 = P64[_s3yj5::P64 + 16];
           _s3yiZ::P64 = P64[_s3yj5::P64 + 24];
           I64[Hp - 16] = sat_s3yj4_info;
           P64[Hp] = _s3yiZ::P64;
           R2 = _s3yiM::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yj5_info" {
     sat_s3yj5_info:
         const sat_s3yj5_entry;
         const 2;
         const 18;
 },
 sat_s3yj1_entry() //  [R1]
         { []
         }
     {offset
       c3Dya: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Dyb; else goto c3Dyc;
       c3Dyb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dyc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yj1_info" {
     sat_s3yj1_info:
         const sat_s3yj1_entry;
         const 3;
         const 15;
 },
 sat_s3yj9_entry() //  [R1]
         { []
         }
     {offset
       c3Dyd: // global
           _s3yj9::P64 = R1;
           if ((Sp + -72) < SpLim) (likely: False) goto c3Dye; else goto c3Dyf;
       c3Dyf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Dyh; else goto c3Dyg;
       c3Dyh: // global
           HpAlloc = 24;
           goto c3Dye;
       c3Dye: // global
           R1 = _s3yj9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dyg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yj9::P64;
           _s3yiM::P64 = P64[_s3yj9::P64 + 16];
           _s3yiN::P64 = P64[_s3yj9::P64 + 24];
           _s3yiP::P64 = P64[_s3yj9::P64 + 32];
           _s3yiR::P64 = P64[_s3yj9::P64 + 40];
           _s3yiS::P64 = P64[_s3yj9::P64 + 48];
           _s3yiU::P64 = P64[_s3yj9::P64 + 56];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yiS::P64;
           P64[Hp] = _s3yiU::P64;
           I64[Sp - 48] = block_c3Dxu_info;
           R3 = Hp - 14;
           R2 = _s3yiP::P64;
           P64[Sp - 40] = _s3yiM::P64;
           P64[Sp - 32] = _s3yiN::P64;
           P64[Sp - 24] = _s3yiR::P64;
           Sp = Sp - 48;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yj9_info" {
     sat_s3yj9_info:
         const sat_s3yj9_entry;
         const 6;
         const 15;
 },
 _c3Dxu() //  [R1]
         { []
         }
     {offset
       c3Dxu: // global
           P64[Sp] = R1;
           P64[Sp + 24] = P64[Sp + 24];
           call _c3DxB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Dxu_info" {
     block_c3Dxu_info:
         const _c3Dxu;
         const 3;
         const 30;
 },
 _c3DxB() //  []
         { []
         }
     {offset
       c3DxB: // global
           _s3yiX::P64 = P64[Sp];
           I64[Sp] = block_c3DxD_info;
           R1 = _s3yiX::P64;
           if (R1 & 7 != 0) goto u3Dyz; else goto c3DxE;
       u3Dyz: // global
           call _c3DxD(R1) args: 0, res: 0, upd: 0;
       c3DxE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3DxD() //  [R1]
         { []
         }
     {offset
       c3DxD: // global
           _s3yiW::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3Dyn; else goto c3Dyp;
       c3Dyn: // global
           R1 = _s3yiW::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c3Dyp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Dys; else goto c3Dyr;
       c3Dys: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Dyr: // global
           _s3yiZ::P64 = P64[R1 + 6];
           _s3yj0::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_s3yj5_info;
           _s3yiM::P64 = P64[Sp + 8];
           P64[Hp - 48] = _s3yiM::P64;
           P64[Hp - 40] = _s3yiZ::P64;
           I64[Hp - 32] = sat_s3yj1_info;
           P64[Hp - 16] = _s3yiM::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s3yiW::P64;
           I64[Sp] = block_c3Dyo_info;
           R2 = _s3yiM::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 64;
           P64[Sp + 24] = _s3yj0::P64;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DxD_info" {
     block_c3DxD_info:
         const _c3DxD;
         const 3;
         const 30;
 },
 _c3Dyo() //  [R1]
         { []
         }
     {offset
       c3Dyo: // global
           _s3yiX::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp] = _s3yiX::P64;
           call _c3DxB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Dyo_info" {
     block_c3Dyo_info:
         const _c3Dyo;
         const 3;
         const 30;
 },
 sat_s3yja_entry() //  [R1, R2]
         { []
         }
     {offset
       c3DyB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3DyF; else goto c3DyE;
       c3DyF: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3DyE: // global
           _s3yiM::P64 = P64[R1 + 7];
           _s3yiN::P64 = P64[R1 + 15];
           _s3yiP::P64 = P64[R1 + 23];
           _s3yiQ::P64 = P64[R1 + 31];
           _s3yiR::P64 = P64[R1 + 39];
           _s3yiS::P64 = P64[R1 + 47];
           I64[Hp - 56] = sat_s3yj9_info;
           P64[Hp - 40] = _s3yiM::P64;
           P64[Hp - 32] = _s3yiN::P64;
           P64[Hp - 24] = _s3yiP::P64;
           P64[Hp - 16] = _s3yiR::P64;
           P64[Hp - 8] = _s3yiS::P64;
           P64[Hp] = R2;
           R2 = Hp - 56;
           R1 = _s3yiQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yja_info" {
     sat_s3yja_info:
         const sat_s3yja_entry;
         const 6;
         const 8;
         const 4294967301;
 },
 sat_s3yjd_entry() //  [R1, R2]
         { []
         }
     {offset
       c3DyK: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3DyL; else goto c3DyM;
       c3DyL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3DyM: // global
           I64[Sp - 64] = block_c3Dxf_info;
           _s3yiS::P64 = R2;
           R2 = R2;
           _s3yiM::P64 = P64[R1 + 7];
           _s3yiN::P64 = P64[R1 + 15];
           _s3yiO::P64 = P64[R1 + 23];
           _s3yiP::P64 = P64[R1 + 31];
           _s3yiQ::P64 = P64[R1 + 39];
           _s3yiR::P64 = P64[R1 + 47];
           R1 = _s3yiO::P64;
           P64[Sp - 56] = _s3yiM::P64;
           P64[Sp - 48] = _s3yiN::P64;
           P64[Sp - 40] = _s3yiO::P64;
           P64[Sp - 32] = _s3yiP::P64;
           P64[Sp - 24] = _s3yiQ::P64;
           P64[Sp - 16] = _s3yiR::P64;
           P64[Sp - 8] = _s3yiS::P64;
           Sp = Sp - 64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yjd_info" {
     sat_s3yjd_info:
         const sat_s3yjd_entry;
         const 6;
         const 8;
         const 4294967301;
 },
 _c3Dxf() //  [R1]
         { []
         }
     {offset
       c3Dxf: // global
           if (R1 & 7 == 1) goto c3DyH; else goto c3DyI;
       c3DyH: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DyI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3DyU; else goto c3DyT;
       c3DyU: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DyT: // global
           I64[Hp - 48] = sat_s3yja_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           I64[Sp + 56] = block_c3DyP_info;
           R3 = Hp - 47;
           R2 = P64[Sp + 24];
           Sp = Sp + 56;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Dxf_info" {
     block_c3Dxf_info:
         const _c3Dxf;
         const 7;
         const 30;
 },
 _c3DyP() //  [R1]
         { []
         }
     {offset
       c3DyP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DyX; else goto c3DyW;
       c3DyX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DyW: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DyP_info" {
     block_c3DyP_info:
         const _c3DyP;
         const 0;
         const 30;
 },
 Text.Read.Lex.$wreadIntP_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3DyY: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Dz2; else goto c3Dz1;
       c3Dz2: // global
           HpAlloc = 80;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wreadIntP_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Dz1: // global
           I64[Hp - 72] = lvl116_s3yiR_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3yjd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = Hp - 72;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wreadIntP_info" {
     Text.Read.Lex.$wreadIntP_info:
         const Text.Read.Lex.$wreadIntP_entry;
         const 0;
         const 73014444046;
         const 21474836505;
         const S3yFW_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.336458864 UTC

[section ""data" . Text.Read.Lex.readIntP2_closure" {
     Text.Read.Lex.readIntP2_closure:
         const Text.Read.Lex.readIntP2_info;
         const 0;
 },
 Text.Read.Lex.readIntP2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3DAm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DAn; else goto c3DAo;
       c3DAn: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readIntP2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DAo: // global
           I64[Sp - 8] = block_c3DAj_info;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readIntP2_info" {
     Text.Read.Lex.readIntP2_info:
         const Text.Read.Lex.readIntP2_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S3yFW_srt+256;
 },
 _c3DAj() //  [R1]
         { []
         }
     {offset
       c3DAj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DAr; else goto c3DAq;
       c3DAr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DAq: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DAj_info" {
     block_c3DAj_info:
         const _c3DAj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.342273236 UTC

[section ""data" . Text.Read.Lex.readIntP_closure" {
     Text.Read.Lex.readIntP_closure:
         const Text.Read.Lex.readIntP_info;
         const 0;
 },
 Text.Read.Lex.readIntP_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3DAF: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readIntP2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readIntP_info" {
     Text.Read.Lex.readIntP_info:
         const Text.Read.Lex.readIntP_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const S3yFW_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.345461735 UTC

[section ""data" . sat_s3yjl_closure" {
     sat_s3yjl_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.347662185 UTC

[section ""data" . sat_s3yjm_closure" {
     sat_s3yjm_closure:
         const :_con_info;
         const sat_s3yjl_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.350154475 UTC

[section ""data" . Text.Read.Lex.numberToFixed1_closure" {
     Text.Read.Lex.numberToFixed1_closure:
         const Text.Read.Lex.numberToFixed1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToFixed1_entry() //  [R1]
         { []
         }
     {offset
       c3DAU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DAV; else goto c3DAW;
       c3DAV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DAW: // global
           (_c3DAR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DAR::I64 == 0) goto c3DAT; else goto c3DAS;
       c3DAT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DAS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DAR::I64;
           R3 = sat_s3yjm_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToFixed1_info" {
     Text.Read.Lex.numberToFixed1_info:
         const Text.Read.Lex.numberToFixed1_entry;
         const 0;
         const 4294967317;
         const S3yFW_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.359349162 UTC

[section ""data" . Text.Read.Lex.numberToInteger_closure" {
     Text.Read.Lex.numberToInteger_closure:
         const Text.Read.Lex.numberToInteger_info;
         const 0;
 },
 sat_s3yjt_entry() //  [R1]
         { []
         }
     {offset
       c3DBr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DBv; else goto c3DBw;
       c3DBv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DBw: // global
           I64[Sp - 8] = block_c3DBp_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yjt_info" {
     sat_s3yjt_info:
         const sat_s3yjt_entry;
         const 1;
         const 16;
 },
 _c3DBp() //  [R1]
         { []
         }
     {offset
       c3DBp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DBz; else goto c3DBy;
       c3DBz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DBy: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DBp_info" {
     block_c3DBp_info:
         const _c3DBp;
         const 0;
         const 30;
 },
 sat_s3yjr_entry() //  [R1]
         { []
         }
     {offset
       c3DBE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DBF; else goto c3DBG;
       c3DBF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DBG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yjr_info" {
     sat_s3yjr_info:
         const sat_s3yjr_entry;
         const 1;
         const 16;
 },
 sat_s3yjv_entry() //  [R1]
         { []
         }
     {offset
       c3DBH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3DBI; else goto c3DBJ;
       c3DBI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DBJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3DBh_info;
           _s3yjq::P64 = P64[R1 + 24];
           R3 = _s3yjq::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s3yjq::P64;
           Sp = Sp - 40;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yjv_info" {
     sat_s3yjv_info:
         const sat_s3yjv_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+216;
 },
 _c3DBh() //  [R1]
         { []
         }
     {offset
       c3DBh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3DBM; else goto c3DBL;
       c3DBM: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3DBL: // global
           I64[Hp - 40] = sat_s3yjt_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_s3yjr_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DBh_info" {
     block_c3DBh_info:
         const _c3DBh;
         const 2;
         const 4294967326;
         const S3yFW_srt+216;
 },
 sat_s3yjB_entry() //  [R1]
         { []
         }
     {offset
       c3DC3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DC4; else goto c3DC5;
       c3DC4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DC5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yjB_info" {
     sat_s3yjB_info:
         const sat_s3yjB_entry;
         const 1;
         const 279172874256;
         const S3yFW_srt+232;
 },
 Text.Read.Lex.numberToInteger_entry() //  [R2]
         { []
         }
     {offset
       c3DCa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DCb; else goto c3DCc;
       c3DCb: // global
           R2 = R2;
           R1 = Text.Read.Lex.numberToInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3DCc: // global
           I64[Sp - 8] = block_c3DB8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DCH; else goto c3DB9;
       u3DCH: // global
           call _c3DB8(R1) args: 0, res: 0, upd: 0;
       c3DB9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToInteger_info" {
     Text.Read.Lex.numberToInteger_info:
         const Text.Read.Lex.numberToInteger_entry;
         const 0;
         const 3320009719822;
         const 4294967301;
         const S3yFW_srt+216;
 },
 _c3DB8() //  [R1]
         { []
         }
     {offset
       c3DB8: // global
           if (R1 & 7 == 1) goto c3DC7; else goto c3DC8;
       c3DC7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3DCg; else goto c3DCf;
       c3DCg: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DCf: // global
           _s3yjp::P64 = P64[R1 + 7];
           _s3yjq::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3yjv_info;
           P64[Hp - 24] = _s3yjp::P64;
           P64[Hp - 16] = _s3yjq::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DC8: // global
           I64[Sp - 16] = block_c3DBP_info;
           _s3yjw::P64 = P64[R1 + 6];
           _s3yjy::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3yjy::P64;
           P64[Sp] = _s3yjw::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DCD; else goto c3DBQ;
       u3DCD: // global
           call _c3DBP(R1) args: 0, res: 0, upd: 0;
       c3DBQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DB8_info" {
     block_c3DB8_info:
         const _c3DB8;
         const 0;
         const 1120986464286;
         const S3yFW_srt+216;
 },
 _c3DBP() //  [R1]
         { []
         }
     {offset
       c3DBP: // global
           if (R1 & 7 == 1) goto c3DCk; else goto u3DCB;
       c3DCk: // global
           _s3yjy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3DBU_info;
           R1 = _s3yjy::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3DCE; else goto c3DBV;
       u3DCE: // global
           call _c3DBU(R1) args: 0, res: 0, upd: 0;
       c3DBV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3DCB: // global
           Sp = Sp + 24;
           call _c3DCy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DBP_info" {
     block_c3DBP_info:
         const _c3DBP;
         const 2;
         const 279172874270;
         const S3yFW_srt+232;
 },
 _c3DBU() //  [R1]
         { []
         }
     {offset
       c3DBU: // global
           if (R1 & 7 == 1) goto c3DCn; else goto u3DCC;
       c3DCn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3DCq; else goto c3DCp;
       c3DCq: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DCp: // global
           I64[Hp - 32] = sat_s3yjB_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3DCC: // global
           Sp = Sp + 16;
           call _c3DCy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DBU_info" {
     block_c3DBU_info:
         const _c3DBU;
         const 1;
         const 279172874270;
         const S3yFW_srt+232;
 },
 _c3DCy() //  []
         { []
         }
     {offset
       c3DCy: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.380501887 UTC

[section ""data" . sat_s3yjE_closure" {
     sat_s3yjE_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.382312541 UTC

[section ""data" . sat_s3yjF_closure" {
     sat_s3yjF_closure:
         const :_con_info;
         const sat_s3yjE_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.384830394 UTC

[section ""data" . lvl4_r3y9u_closure" {
     lvl4_r3y9u_closure:
         const lvl4_r3y9u_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r3y9u_entry() //  [R1]
         { []
         }
     {offset
       c3DDL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DDM; else goto c3DDN;
       c3DDM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DDN: // global
           (_c3DDI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DDI::I64 == 0) goto c3DDK; else goto c3DDJ;
       c3DDK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DDJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DDI::I64;
           R3 = sat_s3yjF_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r3y9u_info" {
     lvl4_r3y9u_info:
         const lvl4_r3y9u_entry;
         const 0;
         const 4294967317;
         const S3yFW_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.393204397 UTC

[section ""data" . $wfracExp_r3y9v_closure" {
     $wfracExp_r3y9v_closure:
         const $wfracExp_r3y9v_info;
         const 0;
 },
 $wfracExp_r3y9v_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3DE6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3DE7; else goto u3DFp;
       c3DE7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wfracExp_r3y9v_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3DFp: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3DDW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wfracExp_r3y9v_info" {
     $wfracExp_r3y9v_info:
         const $wfracExp_r3y9v_entry;
         const 0;
         const 4442108580593678;
         const 12884901911;
         const S3yFW_srt+192;
 },
 _c3DDW() //  []
         { []
         }
     {offset
       c3DDW: // global
           I64[Sp - 8] = block_c3DDZ_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DFr; else goto c3DE0;
       u3DFr: // global
           call _c3DDZ(R1) args: 0, res: 0, upd: 0;
       c3DE0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DDZ() //  [R1]
         { []
         }
     {offset
       c3DDZ: // global
           _s3yjG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3DE3; else goto c3DE4;
       c3DE3: // global
           I64[Sp] = block_c3DEb_info;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           R2 = _s3yjG::P64;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c3DE4: // global
           I64[Sp] = block_c3DEY_info;
           R3 = lvl4_r3y9u_closure;
           R2 = _s3yjG::P64;
           P64[Sp + 8] = P64[R1 + 14];
           P64[Sp + 24] = P64[R1 + 6];
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DDZ_info" {
     block_c3DDZ_info:
         const _c3DDZ;
         const 259;
         const 2190308766908446;
         const S3yFW_srt+192;
 },
 _c3DEb() //  [R1]
         { []
         }
     {offset
       c3DEb: // global
           _s3yjG::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3DEN; else goto c3DEn;
       c3DEN: // global
           I64[Sp + 8] = block_c3DEv_info;
           R2 = _s3yjG::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c3DEn: // global
           I64[Sp + 8] = block_c3DEg_info;
           R3 = _s3yjG::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DEb_info" {
     block_c3DEb_info:
         const _c3DEb;
         const 259;
         const 496983550722078;
         const S3yFW_srt+200;
 },
 _c3DEv() //  [R1]
         { []
         }
     {offset
       c3DEv: // global
           I64[Sp] = block_c3DEz_info;
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DEv_info" {
     block_c3DEv_info:
         const _c3DEv;
         const 130;
         const 356246062366750;
         const S3yFW_srt+200;
 },
 _c3DEz() //  [R1]
         { []
         }
     {offset
       c3DEz: // global
           I64[Sp] = block_c3DED_info;
           R2 = R1;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DEz_info" {
     block_c3DEz_info:
         const _c3DEz;
         const 130;
         const 70373039144990;
         const S3yFW_srt+200;
 },
 _c3DED() //  [R1]
         { []
         }
     {offset
       c3DED: // global
           I64[Sp] = block_c3DEH_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DED_info" {
     block_c3DED_info:
         const _c3DED;
         const 2;
         const 70373039144990;
         const S3yFW_srt+200;
 },
 _c3DEH() //  [R1]
         { []
         }
     {offset
       c3DEH: // global
           _s3yjH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3DEL_info;
           R3 = R1;
           R2 = _s3yjH::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DEH_info" {
     block_c3DEH_info:
         const _c3DEH;
         const 2;
         const 70373039144990;
         const S3yFW_srt+200;
 },
 _c3DEL() //  [R1]
         { []
         }
     {offset
       c3DEL: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DEL_info" {
     block_c3DEL_info:
         const _c3DEL;
         const 1;
         const 4294967326;
         const S3yFW_srt+312;
 },
 _c3DEg() //  [R1]
         { []
         }
     {offset
       c3DEg: // global
           I64[Sp + 16] = block_c3DEk_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DEg_info" {
     block_c3DEg_info:
         const _c3DEg;
         const 130;
         const 140741783322654;
         const S3yFW_srt+200;
 },
 _c3DEk() //  [R1]
         { []
         }
     {offset
       c3DEk: // global
           R2 = GHC.Real.$fEnumRatio1_closure;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DEk_info" {
     block_c3DEk_info:
         const _c3DEk;
         const 0;
         const 4294967326;
         const S3yFW_srt+320;
 },
 _c3DEY() //  [R1]
         { []
         }
     {offset
       c3DEY: // global
           I64[Sp] = block_c3DF2_info;
           _s3yjU::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3yjU::P64;
           if (R1 & 7 != 0) goto u3DFt; else goto c3DF3;
       u3DFt: // global
           call _c3DF2(R1) args: 0, res: 0, upd: 0;
       c3DF3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DEY_info" {
     block_c3DEY_info:
         const _c3DEY;
         const 3;
         const 2190308766908446;
         const S3yFW_srt+192;
 },
 _c3DF2() //  [R1]
         { []
         }
     {offset
       c3DF2: // global
           I64[Sp] = block_c3DF7_info;
           R2 = I64[R1 + 7];
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DF2_info" {
     block_c3DF2_info:
         const _c3DF2;
         const 3;
         const 2190308766908446;
         const S3yFW_srt+192;
 },
 _c3DF7() //  [R1]
         { []
         }
     {offset
       c3DF7: // global
           I64[Sp] = block_c3DFb_info;
           R3 = Text.Read.Lex.numberToFixed1_closure;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DF7_info" {
     block_c3DF7_info:
         const _c3DF7;
         const 3;
         const 2190308766908446;
         const S3yFW_srt+192;
 },
 _c3DFb() //  [R1]
         { []
         }
     {offset
       c3DFb: // global
           I64[Sp] = block_c3DFf_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DFb_info" {
     block_c3DFb_info:
         const _c3DFb;
         const 3;
         const 2190308766908446;
         const S3yFW_srt+192;
 },
 _c3DFf() //  [R1]
         { []
         }
     {offset
       c3DFf: // global
           _s3yjI::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = R1;
           P64[Sp + 24] = _s3yjI::P64;
           Sp = Sp + 8;
           call _c3DDW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DFf_info" {
     block_c3DFf_info:
         const _c3DFf;
         const 131;
         const 2190308766908446;
         const S3yFW_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.422522914 UTC

[section ""data" . Text.Read.Lex.numberToFixed_integerTake_closure" {
     Text.Read.Lex.numberToFixed_integerTake_closure:
         const Text.Read.Lex.numberToFixed_integerTake_info;
         const 0;
 },
 sat_s3yk7_entry() //  [R1]
         { []
         }
     {offset
       c3DGK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3DGL; else goto c3DGM;
       c3DGL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DGM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3DGI_info;
           R3 = lvl4_r3y9u_closure;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yk7_info" {
     sat_s3yk7_info:
         const sat_s3yk7_entry;
         const 2;
         const 347892350994;
         const S3yFW_srt+304;
 },
 _c3DGI() //  [R1]
         { []
         }
     {offset
       c3DGI: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_integerTake_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DGI_info" {
     block_c3DGI_info:
         const _c3DGI;
         const 1;
         const 4294967326;
         const S3yFW_srt+352;
 },
 Text.Read.Lex.numberToFixed_integerTake_entry() //  [R2, R3]
         { []
         }
     {offset
       c3DGT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DGU; else goto c3DGV;
       c3DGU: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_integerTake_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DGV: // global
           I64[Sp - 24] = block_c3DGu_info;
           _s3yk1::P64 = R3;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           _s3yk0::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3yk0::P64;
           P64[Sp - 8] = _s3yk1::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToFixed_integerTake_info" {
     Text.Read.Lex.numberToFixed_integerTake_info:
         const Text.Read.Lex.numberToFixed_integerTake_entry;
         const 0;
         const 356246062366734;
         const 8589934607;
         const S3yFW_srt+224;
 },
 _c3DGu() //  [R1]
         { []
         }
     {offset
       c3DGu: // global
           if (R1 == 1) goto u3DHa; else goto c3DGR;
       u3DHa: // global
           Sp = Sp + 24;
           call _c3DGS() args: 0, res: 0, upd: 0;
       c3DGR: // global
           I64[Sp] = block_c3DGy_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3DHc; else goto c3DGz;
       u3DHc: // global
           call _c3DGy(R1) args: 0, res: 0, upd: 0;
       c3DGz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DGu_info" {
     block_c3DGu_info:
         const _c3DGu;
         const 2;
         const 347892351006;
         const S3yFW_srt+304;
 },
 _c3DGy() //  [R1]
         { []
         }
     {offset
       c3DGy: // global
           if (R1 & 7 == 1) goto u3DHb; else goto c3DH2;
       u3DHb: // global
           Sp = Sp + 24;
           call _c3DGS() args: 0, res: 0, upd: 0;
       c3DH2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3DH5; else goto c3DH4;
       c3DH5: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DH4: // global
           _s3yk4::P64 = P64[R1 + 6];
           _s3yk5::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s3yk7_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s3yk5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yk4::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DGy_info" {
     block_c3DGy_info:
         const _c3DGy;
         const 130;
         const 347892351006;
         const S3yFW_srt+304;
 },
 _c3DGS() //  []
         { []
         }
     {offset
       c3DGS: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.434080615 UTC

[section ""data" . Text.Read.Lex.numberToFixed_xs_closure" {
     Text.Read.Lex.numberToFixed_xs_closure:
         const :_con_info;
         const Text.Read.Lex.$fShowLexeme2_closure+1;
         const Text.Read.Lex.numberToFixed_xs_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.444842574 UTC

[section ""data" . Text.Read.Lex.numberToFixed_closure" {
     Text.Read.Lex.numberToFixed_closure:
         const Text.Read.Lex.numberToFixed_info;
         const 0;
 },
 sat_s3ykf_entry() //  [R1]
         { []
         }
     {offset
       c3DI5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DI9; else goto c3DIa;
       c3DI9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DIa: // global
           I64[Sp - 8] = block_c3DI3_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ykf_info" {
     sat_s3ykf_info:
         const sat_s3ykf_entry;
         const 1;
         const 16;
 },
 _c3DI3() //  [R1]
         { []
         }
     {offset
       c3DI3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DId; else goto c3DIc;
       c3DId: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DIc: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DI3_info" {
     block_c3DI3_info:
         const _c3DI3;
         const 0;
         const 30;
 },
 sat_s3ykd_entry() //  [R1]
         { []
         }
     {offset
       c3DIi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DIj; else goto c3DIk;
       c3DIj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DIk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ykd_info" {
     sat_s3ykd_info:
         const sat_s3ykd_entry;
         const 1;
         const 16;
 },
 sat_s3ykh_entry() //  [R1]
         { []
         }
     {offset
       c3DIl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3DIm; else goto c3DIn;
       c3DIm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DIn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3DHV_info;
           _s3ykc::P64 = P64[R1 + 24];
           R3 = _s3ykc::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s3ykc::P64;
           Sp = Sp - 40;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ykh_info" {
     sat_s3ykh_info:
         const sat_s3ykh_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+216;
 },
 _c3DHV() //  [R1]
         { []
         }
     {offset
       c3DHV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3DIq; else goto c3DIp;
       c3DIq: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3DIp: // global
           I64[Hp - 40] = sat_s3ykf_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_s3ykd_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DHV_info" {
     block_c3DHV_info:
         const _c3DHV;
         const 2;
         const 4294967326;
         const S3yFW_srt+216;
 },
 sat_s3yko_entry() //  [R1]
         { []
         }
     {offset
       c3DIH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DII; else goto c3DIJ;
       c3DII: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DIJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yko_info" {
     sat_s3yko_info:
         const sat_s3yko_entry;
         const 1;
         const 279172874256;
         const S3yFW_srt+232;
 },
 sat_s3ykv_entry() //  [R1]
         { []
         }
     {offset
       c3DIZ: // global
           R3 = Text.Read.Lex.numberToFixed_xs_closure+2;
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ykv_info" {
     sat_s3ykv_info:
         const sat_s3ykv_entry;
         const 1;
         const 16;
 },
 sat_s3ykx_entry() //  [R1]
         { []
         }
     {offset
       c3DJg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DJk; else goto c3DJl;
       c3DJk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DJl: // global
           I64[Sp - 8] = block_c3DJe_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ykx_info" {
     sat_s3ykx_info:
         const sat_s3ykx_entry;
         const 1;
         const 16;
 },
 _c3DJe() //  [R1]
         { []
         }
     {offset
       c3DJe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DJo; else goto c3DJn;
       c3DJo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DJn: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DJe_info" {
     block_c3DJe_info:
         const _c3DJe;
         const 0;
         const 30;
 },
 sat_s3ykz_entry() //  [R1]
         { []
         }
     {offset
       c3DJp: // global
           _s3ykz::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3DJq; else goto c3DJr;
       c3DJr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DJt; else goto c3DJs;
       c3DJt: // global
           HpAlloc = 24;
           goto c3DJq;
       c3DJq: // global
           R1 = _s3ykz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DJs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ykz::P64;
           _s3yk8::P64 = P64[_s3ykz::P64 + 16];
           _s3ykr::P64 = P64[_s3ykz::P64 + 24];
           I64[Hp - 16] = sat_s3ykv_info;
           P64[Hp] = _s3ykr::P64;
           I64[Sp - 24] = block_c3DJ2_info;
           R3 = Hp - 16;
           R2 = _s3yk8::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.numberToFixed_integerTake_entry(R3,
                                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ykz_info" {
     sat_s3ykz_info:
         const sat_s3ykz_entry;
         const 2;
         const 564053760016402;
         const S3yFW_srt+216;
 },
 _c3DJ2() //  [R1]
         { []
         }
     {offset
       c3DJ2: // global
           I64[Sp - 8] = block_c3DJ6_info;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DJ2_info" {
     block_c3DJ2_info:
         const _c3DJ2;
         const 0;
         const 1103806595102;
         const S3yFW_srt+216;
 },
 _c3DJ6() //  [R1]
         { []
         }
     {offset
       c3DJ6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DJx; else goto c3DJw;
       c3DJx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3DJw: // global
           I64[Hp - 16] = sat_s3ykx_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DJ6_info" {
     block_c3DJ6_info:
         const _c3DJ6;
         const 1;
         const 1103806595102;
         const S3yFW_srt+216;
 },
 sat_s3ykt_entry() //  [R1]
         { []
         }
     {offset
       c3DJC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DJD; else goto c3DJE;
       c3DJD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DJE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ykt_info" {
     sat_s3ykt_info:
         const sat_s3ykt_entry;
         const 1;
         const 279172874256;
         const S3yFW_srt+232;
 },
 Text.Read.Lex.numberToFixed_entry() //  [R2, R3]
         { []
         }
     {offset
       c3DJJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3DJK; else goto c3DJL;
       c3DJK: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DJL: // global
           I64[Sp - 16] = block_c3DHM_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DKt; else goto c3DHN;
       u3DKt: // global
           call _c3DHM(R1) args: 0, res: 0, upd: 0;
       c3DHN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToFixed_info" {
     Text.Read.Lex.numberToFixed_info:
         const Text.Read.Lex.numberToFixed_entry;
         const 0;
         const 1689979436662798;
         const 8589934607;
         const S3yFW_srt+216;
 },
 _c3DHM() //  [R1]
         { []
         }
     {offset
       c3DHM: // global
           if (R1 & 7 == 1) goto c3DJG; else goto c3DJH;
       c3DJG: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3DJQ; else goto c3DJP;
       c3DJQ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DJP: // global
           _s3ykb::P64 = P64[R1 + 7];
           _s3ykc::P64 = P64[R1 + 15];
           I64[Hp - 64] = sat_s3ykh_info;
           P64[Hp - 48] = _s3ykb::P64;
           P64[Hp - 40] = _s3ykc::P64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = Text.Read.Lex.numberToFixed2_closure;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DJH: // global
           I64[Sp - 16] = block_c3DIt_info;
           _s3ykj::P64 = P64[R1 + 6];
           _s3ykl::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3ykl::P64;
           P64[Sp] = _s3ykj::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DKo; else goto c3DIu;
       u3DKo: // global
           call _c3DIt(R1) args: 0, res: 0, upd: 0;
       c3DIu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DHM_info" {
     block_c3DHM_info:
         const _c3DHM;
         const 1;
         const 564079529820190;
         const S3yFW_srt+216;
 },
 _c3DIt() //  [R1]
         { []
         }
     {offset
       c3DIt: // global
           _s3ykl::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3DJU; else goto c3DK7;
       c3DJU: // global
           I64[Sp + 8] = block_c3DIy_info;
           R1 = _s3ykl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3DKp; else goto c3DIz;
       u3DKp: // global
           call _c3DIy(R1) args: 0, res: 0, upd: 0;
       c3DIz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3DK7: // global
           I64[Sp] = block_c3DIM_info;
           _s3ykr::P64 = P64[R1 + 6];
           R1 = _s3ykl::P64;
           P64[Sp + 8] = _s3ykr::P64;
           if (R1 & 7 != 0) goto u3DKq; else goto c3DIN;
       u3DKq: // global
           call _c3DIM(R1) args: 0, res: 0, upd: 0;
       c3DIN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DIt_info" {
     block_c3DIt_info:
         const _c3DIt;
         const 3;
         const 564079529820190;
         const S3yFW_srt+216;
 },
 _c3DIy() //  [R1]
         { []
         }
     {offset
       c3DIy: // global
           if (R1 & 7 == 1) goto c3DJY; else goto u3DKn;
       c3DJY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3DK1; else goto c3DK0;
       c3DK1: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DK0: // global
           I64[Hp - 56] = sat_s3yko_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Text.Read.Lex.numberToFixed2_closure;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3DKn: // global
           Sp = Sp + 24;
           call _c3DKi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DIy_info" {
     block_c3DIy_info:
         const _c3DIy;
         const 130;
         const 562640715806;
         const S3yFW_srt+224;
 },
 _c3DIM() //  [R1]
         { []
         }
     {offset
       c3DIM: // global
           if (R1 & 7 == 1) goto c3DKb; else goto u3DKm;
       c3DKb: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3DKe; else goto c3DKd;
       c3DKe: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DKd: // global
           I64[Hp - 88] = sat_s3ykz_info;
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sat_s3ykt_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 88;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3DKm: // global
           Sp = Sp + 32;
           call _c3DKi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DIM_info" {
     block_c3DIM_info:
         const _c3DIM;
         const 3;
         const 564070939885598;
         const S3yFW_srt+216;
 },
 _c3DKi() //  []
         { []
         }
     {offset
       c3DKi: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.488233733 UTC

[section ""data" . Text.Read.Lex.$wnumberToRational_closure" {
     Text.Read.Lex.$wnumberToRational_closure:
         const Text.Read.Lex.$wnumberToRational_info;
         const 0;
 },
 sat_s3ykK_entry() //  [R1]
         { []
         }
     {offset
       c3DMn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DMr; else goto c3DMs;
       c3DMr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DMs: // global
           I64[Sp - 8] = block_c3DMl_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ykK_info" {
     sat_s3ykK_info:
         const sat_s3ykK_entry;
         const 1;
         const 16;
 },
 _c3DMl() //  [R1]
         { []
         }
     {offset
       c3DMl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DMv; else goto c3DMu;
       c3DMv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DMu: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DMl_info" {
     block_c3DMl_info:
         const _c3DMl;
         const 0;
         const 30;
 },
 sat_s3ykI_entry() //  [R1]
         { []
         }
     {offset
       c3DMD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DME; else goto c3DMF;
       c3DME: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DMF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3DMA_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3DMJ; else goto c3DMB;
       u3DMJ: // global
           call _c3DMA(R1) args: 0, res: 0, upd: 0;
       c3DMB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ykI_info" {
     sat_s3ykI_info:
         const sat_s3ykI_entry;
         const 1;
         const 16;
 },
 _c3DMA() //  [R1]
         { []
         }
     {offset
       c3DMA: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DMA_info" {
     block_c3DMA_info:
         const _c3DMA;
         const 0;
         const 30;
 },
 Text.Read.Lex.$wnumberToRational_entry() //  [R2]
         { []
         }
     {offset
       c3DMO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DMP; else goto c3DMQ;
       c3DMP: // global
           R2 = R2;
           R1 = Text.Read.Lex.$wnumberToRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3DMQ: // global
           I64[Sp - 8] = block_c3DM8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DP5; else goto c3DM9;
       u3DP5: // global
           call _c3DM8(R1) args: 0, res: 0, upd: 0;
       c3DM9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wnumberToRational_info" {
     Text.Read.Lex.$wnumberToRational_info:
         const Text.Read.Lex.$wnumberToRational_entry;
         const 0;
         const 11052415436455950;
         const 4294967301;
         const S3yFW_srt+200;
 },
 _c3DM8() //  [R1]
         { []
         }
     {offset
       c3DM8: // global
           if (R1 & 7 == 1) goto c3DML; else goto c3DMM;
       c3DML: // global
           I64[Sp - 16] = block_c3DMd_info;
           _s3ykF::P64 = P64[R1 + 15];
           R3 = _s3ykF::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 8] = _s3ykF::P64;
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3DMM: // global
           I64[Sp - 16] = block_c3DN7_info;
           _s3ykO::P64 = P64[R1 + 6];
           _s3ykQ::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3ykQ::P64;
           P64[Sp] = _s3ykO::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DP4; else goto c3DN9;
       u3DP4: // global
           call _c3DN7(R1) args: 0, res: 0, upd: 0;
       c3DN9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DM8_info" {
     block_c3DM8_info:
         const _c3DM8;
         const 0;
         const 2045216181714974;
         const S3yFW_srt+200;
 },
 _c3DMd() //  [R1]
         { []
         }
     {offset
       c3DMd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3DMZ; else goto c3DMY;
       c3DMZ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DMY: // global
           I64[Hp - 40] = sat_s3ykK_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = sat_s3ykI_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3DMR_info;
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DMd_info" {
     block_c3DMd_info:
         const _c3DMd;
         const 2;
         const 633340172435486;
         const S3yFW_srt+200;
 },
 _c3DMR() //  [R1]
         { []
         }
     {offset
       c3DMR: // global
           I64[Sp] = block_c3DMV_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DMR_info" {
     block_c3DMR_info:
         const _c3DMR;
         const 0;
         const 633322992566302;
         const S3yFW_srt+200;
 },
 _c3DMV() //  [R1]
         { []
         }
     {offset
       c3DMV: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DMV_info" {
     block_c3DMV_info:
         const _c3DMV;
         const 0;
         const 38654705694;
         const S3yFW_srt+312;
 },
 _c3DN7() //  [R1]
         { []
         }
     {offset
       c3DN7: // global
           _s3ykQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3DNg; else goto c3DOF;
       c3DNg: // global
           I64[Sp + 8] = block_c3DNd_info;
           R1 = _s3ykQ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3DP6; else goto c3DNh;
       u3DP6: // global
           call _c3DNd(R1) args: 0, res: 0, upd: 0;
       c3DNh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3DOF: // global
           I64[Sp] = block_c3DOD_info;
           _s3yl7::P64 = P64[R1 + 6];
           R1 = _s3ykQ::P64;
           P64[Sp + 8] = _s3yl7::P64;
           if (R1 & 7 != 0) goto u3DP7; else goto c3DOG;
       u3DP7: // global
           call _c3DOD(R1) args: 0, res: 0, upd: 0;
       c3DOG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DN7_info" {
     block_c3DN7_info:
         const _c3DN7;
         const 2;
         const 2045199001845790;
         const S3yFW_srt+200;
 },
 _c3DNd() //  [R1]
         { []
         }
     {offset
       c3DNd: // global
           if (R1 & 7 == 1) goto c3DNs; else goto c3DNC;
       c3DNs: // global
           _s3ykO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3DNl_info;
           R3 = _s3ykO::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
       c3DNC: // global
           I64[Sp - 8] = block_c3DNA_info;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           _s3ykV::P64 = P64[R1 + 6];
           R2 = _s3ykV::P64;
           P64[Sp] = _s3ykV::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DNd_info" {
     block_c3DNd_info:
         const _c3DNd;
         const 1;
         const 919299095003166;
         const S3yFW_srt+200;
 },
 _c3DNl() //  [R1]
         { []
         }
     {offset
       c3DNl: // global
           I64[Sp] = block_c3DNp_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DNl_info" {
     block_c3DNl_info:
         const _c3DNl;
         const 0;
         const 633322992566302;
         const S3yFW_srt+200;
 },
 _c3DNp() //  [R1]
         { []
         }
     {offset
       c3DNp: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DNp_info" {
     block_c3DNp_info:
         const _c3DNp;
         const 0;
         const 38654705694;
         const S3yFW_srt+312;
 },
 _c3DNA() //  [R1]
         { []
         }
     {offset
       c3DNA: // global
           _s3ykV::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3DOt; else goto c3DO3;
       c3DOt: // global
           I64[Sp + 8] = block_c3DOf_info;
           R3 = _s3ykV::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3DO3: // global
           I64[Sp + 8] = block_c3DNG_info;
           R2 = _s3ykV::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DNA_info" {
     block_c3DNA_info:
         const _c3DNA;
         const 2;
         const 919264735264798;
         const S3yFW_srt+200;
 },
 _c3DOf() //  [R1]
         { []
         }
     {offset
       c3DOf: // global
           I64[Sp] = block_c3DOj_info;
           R3 = P64[Sp + 8];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 8] = R1;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DOf_info" {
     block_c3DOf_info:
         const _c3DOf;
         const 1;
         const 637789758554142;
         const S3yFW_srt+200;
 },
 _c3DOj() //  [R1]
         { []
         }
     {offset
       c3DOj: // global
           _s3yl4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3DOn_info;
           R3 = _s3yl4::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DOj_info" {
     block_c3DOj_info:
         const _c3DOj;
         const 1;
         const 633322992566302;
         const S3yFW_srt+200;
 },
 _c3DOn() //  [R1]
         { []
         }
     {offset
       c3DOn: // global
           I64[Sp] = block_c3DOr_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DOn_info" {
     block_c3DOn_info:
         const _c3DOn;
         const 0;
         const 633322992566302;
         const S3yFW_srt+200;
 },
 _c3DOr() //  [R1]
         { []
         }
     {offset
       c3DOr: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DOr_info" {
     block_c3DOr_info:
         const _c3DOr;
         const 0;
         const 38654705694;
         const S3yFW_srt+312;
 },
 _c3DNG() //  [R1]
         { []
         }
     {offset
       c3DNG: // global
           I64[Sp] = block_c3DNK_info;
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DNG_info" {
     block_c3DNG_info:
         const _c3DNG;
         const 1;
         const 356314781843486;
         const S3yFW_srt+200;
 },
 _c3DNK() //  [R1]
         { []
         }
     {offset
       c3DNK: // global
           I64[Sp - 8] = block_c3DNO_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DNK_info" {
     block_c3DNK_info:
         const _c3DNK;
         const 1;
         const 74839805132830;
         const S3yFW_srt+200;
 },
 _c3DNO() //  [R1]
         { []
         }
     {offset
       c3DNO: // global
           I64[Sp] = block_c3DNS_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DNO_info" {
     block_c3DNO_info:
         const _c3DNO;
         const 2;
         const 74839805132830;
         const S3yFW_srt+200;
 },
 _c3DNS() //  [R1]
         { []
         }
     {offset
       c3DNS: // global
           I64[Sp] = block_c3DNW_info;
           R3 = P64[Sp + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 16] = R1;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DNS_info" {
     block_c3DNS_info:
         const _c3DNS;
         const 2;
         const 74839805132830;
         const S3yFW_srt+200;
 },
 _c3DNW() //  [R1]
         { []
         }
     {offset
       c3DNW: // global
           I64[Sp] = block_c3DO0_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DNW_info" {
     block_c3DNW_info:
         const _c3DNW;
         const 2;
         const 70373039144990;
         const S3yFW_srt+200;
 },
 _c3DO0() //  [R1]
         { []
         }
     {offset
       c3DO0: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DO0_info" {
     block_c3DO0_info:
         const _c3DO0;
         const 130;
         const 4294967326;
         const S3yFW_srt+312;
 },
 _c3DOD() //  [R1]
         { []
         }
     {offset
       c3DOD: // global
           _s3ykO::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c3DON; else goto c3DOW;
       c3DON: // global
           I64[Sp] = block_c3DOK_info;
           R3 = _s3ykO::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
       c3DOW: // global
           I64[Sp] = block_c3DOU_info;
           R3 = _s3ykO::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 16] = P64[R1 + 6];
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DOD_info" {
     block_c3DOD_info:
         const _c3DOD;
         const 2;
         const 141300129071134;
         const S3yFW_srt+224;
 },
 _c3DOK() //  [R1]
         { []
         }
     {offset
       c3DOK: // global
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 24;
           call $wfracExp_r3y9v_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DOK_info" {
     block_c3DOK_info:
         const _c3DOK;
         const 130;
         const 140741783322654;
         const S3yFW_srt+224;
 },
 _c3DOU() //  [R1]
         { []
         }
     {offset
       c3DOU: // global
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call $wfracExp_r3y9v_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DOU_info" {
     block_c3DOU_info:
         const _c3DOU;
         const 2;
         const 4294967326;
         const S3yFW_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.53558759 UTC

[section ""data" . Text.Read.Lex.numberToRational_closure" {
     Text.Read.Lex.numberToRational_closure:
         const Text.Read.Lex.numberToRational_info;
         const 0;
 },
 Text.Read.Lex.numberToRational_entry() //  [R2]
         { []
         }
     {offset
       c3DQU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DQV; else goto c3DQW;
       c3DQV: // global
           R2 = R2;
           R1 = Text.Read.Lex.numberToRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3DQW: // global
           I64[Sp - 8] = block_c3DQR_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToRational_info" {
     Text.Read.Lex.numberToRational_info:
         const Text.Read.Lex.numberToRational_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+368;
 },
 _c3DQR() //  [R1, R2]
         { []
         }
     {offset
       c3DQR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DQZ; else goto c3DQY;
       c3DQZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3DQY: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DQR_info" {
     block_c3DQR_info:
         const _c3DQR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.540901057 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational3_closure" {
     Text.Read.Lex.numberToRangedRational3_closure:
         const GHC.Real.:%_con_info;
         const Text.Read.Lex.numberToFixed2_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.542910803 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational2_closure" {
     Text.Read.Lex.numberToRangedRational2_closure:
         const GHC.Base.Just_con_info;
         const Text.Read.Lex.numberToRangedRational3_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.545579718 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational1_closure" {
     Text.Read.Lex.numberToRangedRational1_closure:
         const Text.Read.Lex.numberToRangedRational1_info;
 },
 Text.Read.Lex.numberToRangedRational1_entry() //  [R2]
         { []
         }
     {offset
       c3DRf: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme2_closure+1;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToRangedRational1_info" {
     Text.Read.Lex.numberToRangedRational1_info:
         const Text.Read.Lex.numberToRangedRational1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.548853425 UTC

[section ""data" . sat_s3yli_closure" {
     sat_s3yli_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.551314457 UTC

[section ""data" . sat_s3ylj_closure" {
     sat_s3ylj_closure:
         const :_con_info;
         const sat_s3yli_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.553158056 UTC

[section ""data" . sat_s3ylh_closure" {
     sat_s3ylh_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.555411683 UTC

[section ""data" . sat_s3ylk_closure" {
     sat_s3ylk_closure:
         const :_con_info;
         const sat_s3ylh_closure+1;
         const sat_s3ylj_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.557145611 UTC

[section ""data" . sat_s3ylg_closure" {
     sat_s3ylg_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.558917662 UTC

[section ""data" . sat_s3yll_closure" {
     sat_s3yll_closure:
         const :_con_info;
         const sat_s3ylg_closure+1;
         const sat_s3ylk_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.561448891 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational4_closure" {
     Text.Read.Lex.numberToRangedRational4_closure:
         const Text.Read.Lex.numberToRangedRational4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational4_entry() //  [R1]
         { []
         }
     {offset
       c3DRy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DRz; else goto c3DRA;
       c3DRz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DRA: // global
           (_c3DRv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DRv::I64 == 0) goto c3DRx; else goto c3DRw;
       c3DRx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DRw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DRv::I64;
           R3 = sat_s3yll_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToRangedRational4_info" {
     Text.Read.Lex.numberToRangedRational4_info:
         const Text.Read.Lex.numberToRangedRational4_entry;
         const 0;
         const 4294967317;
         const S3yFW_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.565849491 UTC

[section ""data" . sat_s3ylo_closure" {
     sat_s3ylo_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.567609367 UTC

[section ""data" . sat_s3ylp_closure" {
     sat_s3ylp_closure:
         const :_con_info;
         const sat_s3ylo_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.569402114 UTC

[section ""data" . sat_s3yln_closure" {
     sat_s3yln_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.571191433 UTC

[section ""data" . sat_s3ylq_closure" {
     sat_s3ylq_closure:
         const :_con_info;
         const sat_s3yln_closure+1;
         const sat_s3ylp_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.57383749 UTC

[section ""data" . sat_s3ylm_closure" {
     sat_s3ylm_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.575528115 UTC

[section ""data" . sat_s3ylr_closure" {
     sat_s3ylr_closure:
         const :_con_info;
         const sat_s3ylm_closure+1;
         const sat_s3ylq_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.578117944 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational5_closure" {
     Text.Read.Lex.numberToRangedRational5_closure:
         const Text.Read.Lex.numberToRangedRational5_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational5_entry() //  [R1]
         { []
         }
     {offset
       c3DRU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DRV; else goto c3DRW;
       c3DRV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DRW: // global
           (_c3DRR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DRR::I64 == 0) goto c3DRT; else goto c3DRS;
       c3DRT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DRS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DRR::I64;
           R3 = sat_s3ylr_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToRangedRational5_info" {
     Text.Read.Lex.numberToRangedRational5_info:
         const Text.Read.Lex.numberToRangedRational5_entry;
         const 0;
         const 4294967317;
         const S3yFW_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.591367388 UTC

[section ""data" . Text.Read.Lex.$wnumberToRangedRational_closure" {
     Text.Read.Lex.$wnumberToRangedRational_closure:
         const Text.Read.Lex.$wnumberToRangedRational_info;
         const 0;
 },
 sat_s3ylB_entry() //  [R1]
         { []
         }
     {offset
       c3DSk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DSl; else goto c3DSm;
       c3DSl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DSm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3DSh_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ylB_info" {
     sat_s3ylB_info:
         const sat_s3ylB_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+368;
 },
 _c3DSh() //  [R1, R2]
         { []
         }
     {offset
       c3DSh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DSp; else goto c3DSo;
       c3DSp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3DSo: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DSh_info" {
     block_c3DSh_info:
         const _c3DSh;
         const 0;
         const 30;
 },
 sat_s3ylJ_entry() //  [R1]
         { []
         }
     {offset
       c3DSE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DSF; else goto c3DSG;
       c3DSF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DSG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3DSB_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ylJ_info" {
     sat_s3ylJ_info:
         const sat_s3ylJ_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+368;
 },
 _c3DSB() //  [R1, R2]
         { []
         }
     {offset
       c3DSB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DSJ; else goto c3DSI;
       c3DSJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3DSI: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DSB_info" {
     block_c3DSB_info:
         const _c3DSB;
         const 0;
         const 30;
 },
 sat_s3ym2_entry() //  [R1]
         { []
         }
     {offset
       c3DTz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DTA; else goto c3DTB;
       c3DTA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DTB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3DTw_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ym2_info" {
     sat_s3ym2_info:
         const sat_s3ym2_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+368;
 },
 _c3DTw() //  [R1, R2]
         { []
         }
     {offset
       c3DTw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DTE; else goto c3DTD;
       c3DTE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3DTD: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DTw_info" {
     block_c3DTw_info:
         const _c3DTw;
         const 0;
         const 30;
 },
 Text.Read.Lex.$wnumberToRangedRational_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3DTJ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3DTK; else goto c3DTL;
       c3DTK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wnumberToRangedRational_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DTL: // global
           I64[Sp - 24] = block_c3DS8_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3DVt; else goto c3DS9;
       u3DVt: // global
           call _c3DS8(R1) args: 0, res: 0, upd: 0;
       c3DS9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wnumberToRangedRational_info" {
     Text.Read.Lex.$wnumberToRangedRational_info:
         const Text.Read.Lex.$wnumberToRangedRational_entry;
         const 0;
         const 1035087118350;
         const 12884901911;
         const S3yFW_srt+368;
 },
 _c3DS8() //  [R1]
         { []
         }
     {offset
       c3DS8: // global
           if (R1 & 7 == 1) goto c3DTG; else goto c3DTH;
       c3DTG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3DTP; else goto c3DTO;
       c3DTP: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DTO: // global
           I64[Hp - 32] = sat_s3ylB_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DTH: // global
           I64[Sp - 24] = block_c3DSs_info;
           _s3ylv::P64 = R1;
           _s3ylC::P64 = P64[R1 + 6];
           _s3ylD::P64 = P64[R1 + 14];
           R1 = P64[R1 + 22];
           P64[Sp - 16] = _s3ylC::P64;
           P64[Sp - 8] = _s3ylD::P64;
           P64[Sp] = _s3ylv::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3DVo; else goto c3DSt;
       u3DVo: // global
           call _c3DSs(R1) args: 0, res: 0, upd: 0;
       c3DSt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DS8_info" {
     block_c3DS8_info:
         const _c3DS8;
         const 2;
         const 966367641630;
         const S3yFW_srt+368;
 },
 _c3DSs() //  [R1]
         { []
         }
     {offset
       c3DSs: // global
           if (R1 & 7 == 1) goto c3DTT; else goto c3DTY;
       c3DTT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3DTW; else goto c3DTV;
       c3DTW: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DTV: // global
           I64[Hp - 32] = sat_s3ylJ_info;
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DTY: // global
           I64[Sp - 8] = block_c3DSM_info;
           R3 = Text.Read.Lex.numberToRangedRational5_closure;
           _s3ylK::P64 = P64[R1 + 6];
           R2 = _s3ylK::P64;
           P64[Sp] = _s3ylK::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DSs_info" {
     block_c3DSs_info:
         const _c3DSs;
         const 5;
         const 966367641630;
         const S3yFW_srt+368;
 },
 _c3DSM() //  [R1]
         { []
         }
     {offset
       c3DSM: // global
           if (R1 == 1) goto u3DVh; else goto c3DU1;
       u3DVh: // global
           Sp = Sp + 56;
           call _c3DVb() args: 0, res: 0, upd: 0;
       c3DU1: // global
           I64[Sp] = block_c3DSQ_info;
           R3 = Text.Read.Lex.numberToRangedRational4_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DSM_info" {
     block_c3DSM_info:
         const _c3DSM;
         const 6;
         const 416611827742;
         const S3yFW_srt+368;
 },
 _c3DSQ() //  [R1]
         { []
         }
     {offset
       c3DSQ: // global
           if (R1 == 1) goto u3DVi; else goto c3DUi;
       u3DVi: // global
           Sp = Sp + 56;
           call _c3DVb() args: 0, res: 0, upd: 0;
       c3DUi: // global
           I64[Sp] = block_c3DU2_info;
           R3 = P64[Sp + 16];
           R2 = Text.Read.Lex.numberToRangedRational1_closure+1;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DSQ_info" {
     block_c3DSQ_info:
         const _c3DSQ;
         const 6;
         const 141733920798;
         const S3yFW_srt+368;
 },
 _c3DU2() //  [R1]
         { []
         }
     {offset
       c3DU2: // global
           if (R1 & 7 == 1) goto c3DUp; else goto c3DUZ;
       c3DUp: // global
           I64[Sp] = block_c3DUm_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3DVu; else goto c3DUq;
       u3DVu: // global
           call _c3DUm(R1) args: 0, res: 0, upd: 0;
       c3DUq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3DUZ: // global
           I64[Sp] = block_c3DUX_info;
           R3 = 0;
           R2 = R1;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DU2_info" {
     block_c3DU2_info:
         const _c3DU2;
         const 134;
         const 141733920798;
         const S3yFW_srt+368;
 },
 _c3DUm() //  [R1]
         { []
         }
     {offset
       c3DUm: // global
           if (R1 & 7 == 1) goto u3DVk; else goto c3DUD;
       u3DVk: // global
           Sp = Sp + 56;
           call _c3DUL() args: 0, res: 0, upd: 0;
       c3DUD: // global
           I64[Sp] = block_c3DUz_info;
           R3 = P64[R1 + 6];
           R2 = Text.Read.Lex.numberToRangedRational1_closure+1;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DUm_info" {
     block_c3DUm_info:
         const _c3DUm;
         const 390;
         const 141733920798;
         const S3yFW_srt+368;
 },
 _c3DUz() //  [R1, R2]
         { []
         }
     {offset
       c3DUz: // global
           I64[Sp] = block_c3DUB_info;
           _s3ym7::P64 = R1;
           R1 = R2;
           P64[Sp + 24] = _s3ym7::P64;
           if (R1 & 7 != 0) goto u3DVw; else goto c3DUF;
       u3DVw: // global
           call _c3DUB(R1) args: 0, res: 0, upd: 0;
       c3DUF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DUz_info" {
     block_c3DUz_info:
         const _c3DUz;
         const 390;
         const 141733920798;
         const S3yFW_srt+368;
 },
 _c3DUB() //  [R1]
         { []
         }
     {offset
       c3DUB: // global
           if (R1 & 7 == 1) goto u3DVl; else goto c3DUQ;
       u3DVl: // global
           Sp = Sp + 56;
           call _c3DUL() args: 0, res: 0, upd: 0;
       c3DUQ: // global
           I64[Sp] = block_c3DUO_info;
           R3 = 0;
           R2 = P64[Sp + 24];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DUB_info" {
     block_c3DUB_info:
         const _c3DUB;
         const 134;
         const 141733920798;
         const S3yFW_srt+368;
 },
 _c3DUL() //  []
         { []
         }
     {offset
       c3DUL: // global
           R1 = Text.Read.Lex.numberToRangedRational2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3DUO() //  [R1]
         { []
         }
     {offset
       c3DUO: // global
           I64[Sp + 24] = -R1;
           Sp = Sp + 8;
           call _s3ylN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DUO_info" {
     block_c3DUO_info:
         const _c3DUO;
         const 390;
         const 141733920798;
         const S3yFW_srt+368;
 },
 _c3DUX() //  [R1]
         { []
         }
     {offset
       c3DUX: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _s3ylN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DUX_info" {
     block_c3DUX_info:
         const _c3DUX;
         const 390;
         const 141733920798;
         const S3yFW_srt+368;
 },
 _s3ylN() //  []
         { []
         }
     {offset
       s3ylN: // global
           I64[Sp - 8] = block_c3DSZ_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DVA; else goto c3DT0;
       u3DVA: // global
           call _c3DSZ(R1) args: 0, res: 0, upd: 0;
       c3DT0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DSZ() //  [R1]
         { []
         }
     {offset
       c3DSZ: // global
           I64[Sp + 16] = block_c3DT4_info;
           R2 = P64[Sp + 8];
           I64[Sp + 48] = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DSZ_info" {
     block_c3DSZ_info:
         const _c3DSZ;
         const 2438;
         const 141733920798;
         const S3yFW_srt+368;
 },
 _c3DT4() //  [R1]
         { []
         }
     {offset
       c3DT4: // global
           _s3ylS::I64 = I64[Sp + 8] + R1;
           if (%MO_S_Le_W64(_s3ylS::I64,
                            I64[Sp + 32] + 3)) goto c3DU8; else goto u3DVn;
       c3DU8: // global
           I64[Sp + 8] = block_c3DTh_info;
           R1 = P64[Sp + 24];
           I64[Sp + 32] = _s3ylS::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3DVr; else goto c3DTi;
       u3DVr: // global
           call _c3DTh(R1) args: 0, res: 0, upd: 0;
       c3DTi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3DVn: // global
           Sp = Sp + 40;
           call _c3DVb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3DT4_info" {
     block_c3DT4_info:
         const _c3DT4;
         const 580;
         const 141733920798;
         const S3yFW_srt+368;
 },
 _c3DTh() //  [R1]
         { []
         }
     {offset
       c3DTh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3DUb; else goto c3DUa;
       c3DUb: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DUa: // global
           if (%MO_S_Ge_W64(I64[Sp + 24],
                            I64[R1 + 7] - 3)) goto c3DUe; else goto c3DUf;
       c3DUe: // global
           I64[Hp - 32] = sat_s3ym2_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DUf: // global
           Hp = Hp - 40;
           R1 = Text.Read.Lex.numberToRangedRational2_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DTh_info" {
     block_c3DTh_info:
         const _c3DTh;
         const 387;
         const 141733920798;
         const S3yFW_srt+368;
 },
 _c3DVb() //  []
         { []
         }
     {offset
       c3DVb: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.632449959 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational_closure" {
     Text.Read.Lex.numberToRangedRational_closure:
         const Text.Read.Lex.numberToRangedRational_info;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational_entry() //  [R2, R3]
         { []
         }
     {offset
       c3DXs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DXt; else goto c3DXu;
       c3DXt: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToRangedRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DXu: // global
           I64[Sp - 16] = block_c3DXp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DXy; else goto c3DXq;
       u3DXy: // global
           call _c3DXp(R1) args: 0, res: 0, upd: 0;
       c3DXq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToRangedRational_info" {
     Text.Read.Lex.numberToRangedRational_info:
         const Text.Read.Lex.numberToRangedRational_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S3yFW_srt+400;
 },
 _c3DXp() //  [R1]
         { []
         }
     {offset
       c3DXp: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call Text.Read.Lex.$wnumberToRangedRational_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DXp_info" {
     block_c3DXp_info:
         const _c3DXp;
         const 1;
         const 4294967326;
         const S3yFW_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.638153619 UTC

[section ""cstring" . lvl5_r3y9w_bytes" {
     lvl5_r3y9w_bytes:
         I8[] [118,97,108,68,105,103,58,32,66,97,100,32,98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.640849848 UTC

[section ""data" . Text.Read.Lex.readDecP2_closure" {
     Text.Read.Lex.readDecP2_closure:
         const Text.Read.Lex.readDecP2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP2_entry() //  [R1]
         { []
         }
     {offset
       c3DXR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DXS; else goto c3DXT;
       c3DXS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DXT: // global
           (_c3DXM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DXM::I64 == 0) goto c3DXO; else goto c3DXN;
       c3DXO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DXN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DXM::I64;
           I64[Sp - 24] = block_c3DXP_info;
           R2 = lvl5_r3y9w_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP2_info" {
     Text.Read.Lex.readDecP2_info:
         const Text.Read.Lex.readDecP2_entry;
         const 0;
         const 4294967317;
         const S3yFW_srt+440;
 },
 _c3DXP() //  [R1]
         { []
         }
     {offset
       c3DXP: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3DXP_info" {
     block_c3DXP_info:
         const _c3DXP;
         const 0;
         const 4294967326;
         const S3yFW_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.646600727 UTC

[section ""data" . sat_s3ymn_closure" {
     sat_s3ymn_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.648375716 UTC

[section ""data" . sat_s3ymo_closure" {
     sat_s3ymo_closure:
         const :_con_info;
         const sat_s3ymn_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.651232356 UTC

[section ""data" . Text.Read.Lex.readDecP3_closure" {
     Text.Read.Lex.readDecP3_closure:
         const Text.Read.Lex.readDecP3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP3_entry() //  [R1]
         { []
         }
     {offset
       c3DYf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DYg; else goto c3DYh;
       c3DYg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DYh: // global
           (_c3DYc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DYc::I64 == 0) goto c3DYe; else goto c3DYd;
       c3DYe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DYd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DYc::I64;
           R3 = sat_s3ymo_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP3_info" {
     Text.Read.Lex.readDecP3_info:
         const Text.Read.Lex.readDecP3_entry;
         const 0;
         const 4294967317;
         const S3yFW_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.655535465 UTC

[section ""data" . sat_s3ymp_closure" {
     sat_s3ymp_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.657316778 UTC

[section ""data" . sat_s3ymq_closure" {
     sat_s3ymq_closure:
         const :_con_info;
         const sat_s3ymp_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.659912194 UTC

[section ""data" . Text.Read.Lex.readDecP4_closure" {
     Text.Read.Lex.readDecP4_closure:
         const Text.Read.Lex.readDecP4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP4_entry() //  [R1]
         { []
         }
     {offset
       c3DYx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DYy; else goto c3DYz;
       c3DYy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DYz: // global
           (_c3DYu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DYu::I64 == 0) goto c3DYw; else goto c3DYv;
       c3DYw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DYv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DYu::I64;
           R3 = sat_s3ymq_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP4_info" {
     Text.Read.Lex.readDecP4_info:
         const Text.Read.Lex.readDecP4_entry;
         const 0;
         const 4294967317;
         const S3yFW_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.66895591 UTC

[section ""data" . Text.Read.Lex.$w$svalDig_closure" {
     Text.Read.Lex.$w$svalDig_closure:
         const Text.Read.Lex.$w$svalDig_info;
         const 0;
 },
 Text.Read.Lex.$w$svalDig_entry() //  [R2, R3]
         { []
         }
     {offset
       c3DYQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DYR; else goto c3DYS;
       c3DYR: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$svalDig_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DYS: // global
           I64[Sp - 24] = block_c3DYL_info;
           _s3yms::I64 = R3;
           R3 = Text.Read.Lex.readDecP4_closure;
           _s3ymr::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3ymr::P64;
           I64[Sp - 8] = _s3yms::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$w$svalDig_info" {
     Text.Read.Lex.$w$svalDig_info:
         const Text.Read.Lex.$w$svalDig_entry;
         const 0;
         const 540431959579426830;
         const 8589934606;
         const S3yFW_srt+280;
 },
 _c3DYL() //  [R1]
         { []
         }
     {offset
       c3DYL: // global
           if (R1 == 1) goto c3DYP; else goto c3DYO;
       c3DYP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E1c; else goto c3E1b;
       c3E1c: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3E1b: // global
           _s3yms::I64 = I64[Sp + 16];
           if (48 > _s3yms::I64) goto u3E1D; else goto c3E1y;
       u3E1D: // global
           Sp = Sp + 24;
           goto u3E1G;
       c3E1y: // global
           if (_s3yms::I64 > 55) goto u3E1E; else goto c3E1x;
       u3E1E: // global
           Sp = Sp + 24;
           goto u3E1G;
       u3E1G: // global
           call _c3E1m() args: 0, res: 0, upd: 0;
       c3E1x: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DYO: // global
           I64[Sp] = block_c3DYV_info;
           R3 = Text.Read.Lex.numberToFixed1_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DYL_info" {
     block_c3DYL_info:
         const _c3DYL;
         const 130;
         const 216172786408751134;
         const S3yFW_srt+280;
 },
 _c3DYV() //  [R1]
         { []
         }
     {offset
       c3DYV: // global
           if (R1 == 1) goto c3E0G; else goto c3DZ3;
       c3E0G: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E0L; else goto c3E0K;
       c3E0L: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3E0K: // global
           _s3yms::I64 = I64[Sp + 16];
           if (48 > _s3yms::I64) goto u3E1B; else goto c3E17;
       u3E1B: // global
           Sp = Sp + 24;
           goto u3E1I;
       c3E17: // global
           if (_s3yms::I64 > 57) goto u3E1C; else goto c3E16;
       u3E1C: // global
           Sp = Sp + 24;
           goto u3E1I;
       u3E1I: // global
           call _c3E1m() args: 0, res: 0, upd: 0;
       c3E16: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DZ3: // global
           _s3ymr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3DZ0_info;
           R3 = Text.Read.Lex.readDecP3_closure;
           R2 = _s3ymr::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DYV_info" {
     block_c3DYV_info:
         const _c3DYV;
         const 130;
         const 12884901918;
         const S3yFW_srt+472;
 },
 _c3DZ0() //  [R1]
         { []
         }
     {offset
       c3DZ0: // global
           if (R1 == 1) goto c3DZa; else goto c3DZ9;
       c3DZa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3DZf; else goto c3DZe;
       c3DZf: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DZe: // global
           _s3yms::I64 = I64[Sp + 8];
           if (48 > _s3yms::I64) goto c3E0t; else goto c3E0F;
       c3E0F: // global
           if (_s3yms::I64 > 57) goto c3E0t; else goto c3E0E;
       c3E0t: // global
           Hp = Hp - 32;
           call _c3DZj() args: 0, res: 0, upd: 0;
       c3E0E: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DZ9: // global
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DZ0_info" {
     block_c3DZ0_info:
         const _c3DZ0;
         const 65;
         const 4294967326;
         const S3yFW_srt+472;
 },
 _c3DZj() //  []
         { []
         }
     {offset
       c3DZj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3DZn; else goto c3DZm;
       c3DZn: // global
           HpAlloc = 32;
           I64[Sp] = block_c3DZj_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3DZm: // global
           _s3yms::I64 = I64[Sp + 8];
           if (97 > _s3yms::I64) goto c3E04; else goto c3E0j;
       c3E0j: // global
           if (_s3yms::I64 > 102) goto c3E04; else goto c3E0i;
       c3E04: // global
           Hp = Hp - 32;
           call _c3DZr() args: 0, res: 0, upd: 0;
       c3E0i: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 87;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DZj_info" {
     block_c3DZj_info:
         const _c3DZj;
         const 65;
         const 30;
 },
 _c3DZr() //  []
         { []
         }
     {offset
       c3DZr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3DZv; else goto c3DZu;
       c3DZv: // global
           HpAlloc = 32;
           I64[Sp] = block_c3DZr_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3DZu: // global
           _s3yms::I64 = I64[Sp + 8];
           if (65 > _s3yms::I64) goto u3E1z; else goto c3DZU;
       u3E1z: // global
           Sp = Sp + 16;
           goto u3E1M;
       c3DZU: // global
           if (_s3yms::I64 > 70) goto u3E1A; else goto c3DZT;
       u3E1A: // global
           Sp = Sp + 16;
           goto u3E1M;
       u3E1M: // global
           call _c3E1m() args: 0, res: 0, upd: 0;
       c3DZT: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 55;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3DZr_info" {
     block_c3DZr_info:
         const _c3DZr;
         const 65;
         const 30;
 },
 _c3E1m() //  []
         { []
         }
     {offset
       c3E1m: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.69328952 UTC

[section ""data" . Text.Read.Lex.$wvalDig_closure" {
     Text.Read.Lex.$wvalDig_closure:
         const Text.Read.Lex.$wvalDig_info;
         const 0;
 },
 Text.Read.Lex.$wvalDig_slow() //  [R1]
         { []
         }
     {offset
       c3E2r: // global
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yn3_entry() //  [R1]
         { []
         }
     {offset
       c3E2z: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3E2A; else goto c3E2B;
       c3E2A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3E2B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yn3_info" {
     sat_s3yn3_info:
         const sat_s3yn3_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+488;
 },
 sat_s3yn5_entry() //  [R1]
         { []
         }
     {offset
       c3E2K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3E2L; else goto c3E2M;
       c3E2L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3E2M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yn5_info" {
     sat_s3yn5_info:
         const sat_s3yn5_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+280;
 },
 sat_s3yn7_entry() //  [R1]
         { []
         }
     {offset
       c3E2V: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3E2W; else goto c3E2X;
       c3E2W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3E2X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yn7_info" {
     sat_s3yn7_info:
         const sat_s3yn7_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+480;
 },
 Text.Read.Lex.$wvalDig_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3E32: // global
           _s3yn2::I64 = R5;
           _s3yn1::P64 = R4;
           _s3yn0::P64 = R3;
           _s3ymZ::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c3E33; else goto c3E34;
       c3E34: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3E36; else goto c3E35;
       c3E36: // global
           HpAlloc = 24;
           goto c3E33;
       c3E33: // global
           R1 = Text.Read.Lex.$wvalDig_closure;
           P64[Sp - 32] = _s3ymZ::P64;
           P64[Sp - 24] = _s3yn0::P64;
           P64[Sp - 16] = _s3yn1::P64;
           I64[Sp - 8] = _s3yn2::I64;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3E35: // global
           I64[Hp - 16] = sat_s3yn3_info;
           P64[Hp] = _s3yn0::P64;
           I64[Sp - 40] = block_c3E2C_info;
           R2 = _s3ymZ::P64;
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = _s3yn1::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 32] = _s3ymZ::P64;
           P64[Sp - 24] = _s3yn0::P64;
           P64[Sp - 16] = _s3yn1::P64;
           I64[Sp - 8] = _s3yn2::I64;
           Sp = Sp - 64;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wvalDig_info" {
     Text.Read.Lex.$wvalDig_info:
         const Text.Read.Lex.$wvalDig_entry;
         const 0;
         const 1080863914863886350;
         const 17179869184;
         const S3yFW_srt+280;
         const 516;
         const Text.Read.Lex.$wvalDig_slow;
 },
 _c3E2C() //  [R1]
         { []
         }
     {offset
       c3E2C: // global
           if (R1 & 7 == 1) goto c3E2Z; else goto c3E30;
       c3E2Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3E39; else goto c3E38;
       c3E39: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3E38: // global
           I64[Hp - 16] = sat_s3yn5_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c3E2N_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c3E30: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E5o; else goto c3E5n;
       c3E5o: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3E5n: // global
           _s3yn2::I64 = I64[Sp + 32];
           if (48 > _s3yn2::I64) goto u3E5N; else goto c3E5K;
       u3E5N: // global
           Sp = Sp + 40;
           goto u3E5U;
       c3E5K: // global
           if (_s3yn2::I64 > 55) goto u3E5O; else goto c3E5J;
       u3E5O: // global
           Sp = Sp + 40;
           goto u3E5U;
       u3E5U: // global
           call _c3E5y() args: 0, res: 0, upd: 0;
       c3E5J: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E2C_info" {
     block_c3E2C_info:
         const _c3E2C;
         const 516;
         const 216172786408751134;
         const S3yFW_srt+280;
 },
 _c3E2N() //  [R1]
         { []
         }
     {offset
       c3E2N: // global
           if (R1 & 7 == 1) goto c3E3c; else goto c3E4S;
       c3E3c: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3E3f; else goto c3E3e;
       c3E3f: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3E3e: // global
           I64[Hp - 16] = sat_s3yn7_info;
           P64[Hp] = P64[Sp + 16];
           _s3yn1::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3E3a_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s3yn1::P64;
           P64[Sp + 16] = Hp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c3E4S: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E4X; else goto c3E4W;
       c3E4X: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3E4W: // global
           _s3yn2::I64 = I64[Sp + 32];
           if (48 > _s3yn2::I64) goto u3E5P; else goto c3E5j;
       u3E5P: // global
           Sp = Sp + 40;
           goto u3E5W;
       c3E5j: // global
           if (_s3yn2::I64 > 57) goto u3E5Q; else goto c3E5i;
       u3E5Q: // global
           Sp = Sp + 40;
           goto u3E5W;
       u3E5W: // global
           call _c3E5y() args: 0, res: 0, upd: 0;
       c3E5i: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E2N_info" {
     block_c3E2N_info:
         const _c3E2N;
         const 516;
         const 12884901918;
         const S3yFW_srt+472;
 },
 _c3E3a() //  [R1]
         { []
         }
     {offset
       c3E3a: // global
           if (R1 & 7 == 1) goto c3E3l; else goto c3E3m;
       c3E3l: // global
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3E3m: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E3r; else goto c3E3q;
       c3E3r: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3E3q: // global
           _s3yn2::I64 = I64[Sp + 8];
           if (48 > _s3yn2::I64) goto c3E4F; else goto c3E4R;
       c3E4R: // global
           if (_s3yn2::I64 > 57) goto c3E4F; else goto c3E4Q;
       c3E4F: // global
           Hp = Hp - 32;
           call _c3E3v() args: 0, res: 0, upd: 0;
       c3E4Q: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E3a_info" {
     block_c3E3a_info:
         const _c3E3a;
         const 65;
         const 4294967326;
         const S3yFW_srt+472;
 },
 _c3E3v() //  []
         { []
         }
     {offset
       c3E3v: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E3z; else goto c3E3y;
       c3E3z: // global
           HpAlloc = 32;
           I64[Sp] = block_c3E3v_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3E3y: // global
           _s3yn2::I64 = I64[Sp + 8];
           if (97 > _s3yn2::I64) goto c3E4g; else goto c3E4v;
       c3E4v: // global
           if (_s3yn2::I64 > 102) goto c3E4g; else goto c3E4u;
       c3E4g: // global
           Hp = Hp - 32;
           call _c3E3D() args: 0, res: 0, upd: 0;
       c3E4u: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 87;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E3v_info" {
     block_c3E3v_info:
         const _c3E3v;
         const 65;
         const 30;
 },
 _c3E3D() //  []
         { []
         }
     {offset
       c3E3D: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E3H; else goto c3E3G;
       c3E3H: // global
           HpAlloc = 32;
           I64[Sp] = block_c3E3D_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3E3G: // global
           _s3yn2::I64 = I64[Sp + 8];
           if (65 > _s3yn2::I64) goto u3E5R; else goto c3E46;
       u3E5R: // global
           Sp = Sp + 16;
           goto u3E60;
       c3E46: // global
           if (_s3yn2::I64 > 70) goto u3E5S; else goto c3E45;
       u3E5S: // global
           Sp = Sp + 16;
           goto u3E60;
       u3E60: // global
           call _c3E5y() args: 0, res: 0, upd: 0;
       c3E45: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 55;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E3D_info" {
     block_c3E3D_info:
         const _c3E3D;
         const 65;
         const 30;
 },
 _c3E5y() //  []
         { []
         }
     {offset
       c3E5y: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.719271831 UTC

[section ""data" . Text.Read.Lex.$w$sreadIntP'_closure" {
     Text.Read.Lex.$w$sreadIntP'_closure:
         const Text.Read.Lex.$w$sreadIntP'_info;
         const 0;
 },
 sat_s3ynP_entry() //  [R1, R2]
         { []
         }
     {offset
       c3E7g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3E7h; else goto c3E7i;
       c3E7h: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3E7i: // global
           I64[Sp - 16] = block_c3E7d_info;
           _s3ynC::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ynC::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3E7y; else goto c3E7e;
       u3E7y: // global
           call _c3E7d(R1) args: 0, res: 0, upd: 0;
       c3E7e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ynP_info" {
     sat_s3ynP_info:
         const sat_s3ynP_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+464;
 },
 _c3E7d() //  [R1]
         { []
         }
     {offset
       c3E7d: // global
           _s3ynC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3E7l_info;
           R3 = I64[R1 + 7];
           R2 = _s3ynC::P64;
           Sp = Sp + 8;
           call Text.Read.Lex.$w$svalDig_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E7d_info" {
     block_c3E7d_info:
         const _c3E7d;
         const 1;
         const 4294967326;
         const S3yFW_srt+464;
 },
 _c3E7l() //  [R1]
         { []
         }
     {offset
       c3E7l: // global
           if (R1 & 7 == 1) goto c3E7s; else goto c3E7w;
       c3E7s: // global
           R1 = Text.Read.Lex.$fShowLexeme2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3E7w: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E7l_info" {
     block_c3E7l_info:
         const _c3E7l;
         const 0;
         const 30;
 },
 sat_s3ynJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3E7H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3E7I; else goto c3E7J;
       c3E7I: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3E7J: // global
           I64[Sp - 16] = block_c3E7E_info;
           _s3ynC::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ynC::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3E7Z; else goto c3E7F;
       u3E7Z: // global
           call _c3E7E(R1) args: 0, res: 0, upd: 0;
       c3E7F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ynJ_info" {
     sat_s3ynJ_info:
         const sat_s3ynJ_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+464;
 },
 _c3E7E() //  [R1]
         { []
         }
     {offset
       c3E7E: // global
           _s3ynC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3E7M_info;
           R3 = I64[R1 + 7];
           R2 = _s3ynC::P64;
           Sp = Sp + 8;
           call Text.Read.Lex.$w$svalDig_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E7E_info" {
     block_c3E7E_info:
         const _c3E7E;
         const 1;
         const 4294967326;
         const S3yFW_srt+464;
 },
 _c3E7M() //  [R1]
         { []
         }
     {offset
       c3E7M: // global
           if (R1 & 7 == 1) goto c3E7T; else goto c3E7X;
       c3E7T: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3E7X: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E7M_info" {
     block_c3E7M_info:
         const _c3E7M;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3E85_srtd" {
     u3E85_srtd:
         const S3yFW_srt+240;
         const 34;
         const 8858370049;
 },
 Text.Read.Lex.$w$sreadIntP'_entry() //  [R2, R3]
         { []
         }
     {offset
       c3E80: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E84; else goto c3E83;
       c3E84: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$sreadIntP'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3E83: // global
           I64[Hp - 24] = sat_s3ynP_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3ynJ_info;
           P64[Hp] = R2;
           R5 = R3;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = R2;
           call Text.Read.Lex.$w$sreadIntP_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$w$sreadIntP'_info" {
     Text.Read.Lex.$w$sreadIntP'_info:
         const Text.Read.Lex.$w$sreadIntP'_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3E85_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.737952096 UTC

[section ""data" . Text.Read.Lex.$wreadIntP'_closure" {
     Text.Read.Lex.$wreadIntP'_closure:
         const Text.Read.Lex.$wreadIntP'_info;
         const 0;
 },
 sat_s3yo5_entry() //  [R1, R2]
         { []
         }
     {offset
       c3E8S: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3E8T; else goto c3E8U;
       c3E8T: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3E8U: // global
           I64[Sp - 32] = block_c3E8P_info;
           _s3ynQ::P64 = P64[R1 + 7];
           _s3ynR::P64 = P64[R1 + 15];
           _s3ynS::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3ynQ::P64;
           P64[Sp - 16] = _s3ynR::P64;
           P64[Sp - 8] = _s3ynS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3E9a; else goto c3E8Q;
       u3E9a: // global
           call _c3E8P(R1) args: 0, res: 0, upd: 0;
       c3E8Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yo5_info" {
     sat_s3yo5_info:
         const sat_s3yo5_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3yFW_srt+496;
 },
 _c3E8P() //  [R1]
         { []
         }
     {offset
       c3E8P: // global
           _s3ynS::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3E8X_info;
           R5 = I64[R1 + 7];
           R4 = _s3ynS::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E8P_info" {
     block_c3E8P_info:
         const _c3E8P;
         const 3;
         const 4294967326;
         const S3yFW_srt+496;
 },
 _c3E8X() //  [R1]
         { []
         }
     {offset
       c3E8X: // global
           if (R1 & 7 == 1) goto c3E94; else goto c3E98;
       c3E94: // global
           R1 = Text.Read.Lex.$fShowLexeme2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3E98: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E8X_info" {
     block_c3E8X_info:
         const _c3E8X;
         const 0;
         const 30;
 },
 sat_s3ynZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3E9j: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3E9k; else goto c3E9l;
       c3E9k: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3E9l: // global
           I64[Sp - 32] = block_c3E9g_info;
           _s3ynQ::P64 = P64[R1 + 7];
           _s3ynR::P64 = P64[R1 + 15];
           _s3ynS::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3ynQ::P64;
           P64[Sp - 16] = _s3ynR::P64;
           P64[Sp - 8] = _s3ynS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3E9B; else goto c3E9h;
       u3E9B: // global
           call _c3E9g(R1) args: 0, res: 0, upd: 0;
       c3E9h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ynZ_info" {
     sat_s3ynZ_info:
         const sat_s3ynZ_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3yFW_srt+496;
 },
 _c3E9g() //  [R1]
         { []
         }
     {offset
       c3E9g: // global
           _s3ynS::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3E9o_info;
           R5 = I64[R1 + 7];
           R4 = _s3ynS::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E9g_info" {
     block_c3E9g_info:
         const _c3E9g;
         const 3;
         const 4294967326;
         const S3yFW_srt+496;
 },
 _c3E9o() //  [R1]
         { []
         }
     {offset
       c3E9o: // global
           if (R1 & 7 == 1) goto c3E9v; else goto c3E9z;
       c3E9v: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3E9z: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3E9o_info" {
     block_c3E9o_info:
         const _c3E9o;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3E9H_srtd" {
     u3E9H_srtd:
         const S3yFW_srt+256;
         const 33;
         const 5368709121;
 },
 Text.Read.Lex.$wreadIntP'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3E9C: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3E9G; else goto c3E9F;
       c3E9G: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wreadIntP'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3E9F: // global
           I64[Hp - 56] = sat_s3yo5_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3ynZ_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R6 = R5;
           R5 = Hp - 55;
           _s3ynS::P64 = R4;
           R4 = Hp - 23;
           _s3ynR::P64 = R3;
           R3 = _s3ynS::P64;
           R2 = _s3ynR::P64;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wreadIntP'_info" {
     Text.Read.Lex.$wreadIntP'_info:
         const Text.Read.Lex.$wreadIntP'_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u3E9H_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.754375312 UTC

[section ""data" . Text.Read.Lex.readDecP6_closure" {
     Text.Read.Lex.readDecP6_closure:
         const Text.Read.Lex.readDecP6_info;
         const 0;
 },
 Text.Read.Lex.readDecP6_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3Eap: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Eaq; else goto c3Ear;
       c3Eaq: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readDecP6_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ear: // global
           I64[Sp - 8] = block_c3Eam_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP6_info" {
     Text.Read.Lex.readDecP6_info:
         const Text.Read.Lex.readDecP6_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S3yFW_srt+512;
 },
 _c3Eam() //  [R1]
         { []
         }
     {offset
       c3Eam: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Eau; else goto c3Eat;
       c3Eau: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Eat: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Eam_info" {
     block_c3Eam_info:
         const _c3Eam;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.760933023 UTC

[section ""data" . Text.Read.Lex.readOctP1_closure" {
     Text.Read.Lex.readOctP1_closure:
         const Text.Read.Lex.readOctP1_info;
         const 0;
 },
 Text.Read.Lex.readOctP1_entry() //  [R2]
         { []
         }
     {offset
       c3EaL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3EaM; else goto c3EaN;
       c3EaM: // global
           R2 = R2;
           R1 = Text.Read.Lex.readOctP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EaN: // global
           I64[Sp - 8] = block_c3EaI_info;
           R3 = R2;
           R2 = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readOctP1_info" {
     Text.Read.Lex.readOctP1_info:
         const Text.Read.Lex.readOctP1_entry;
         const 0;
         const 158913789966;
         const 4294967301;
         const S3yFW_srt+488;
 },
 _c3EaI() //  [R1]
         { []
         }
     {offset
       c3EaI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EaQ; else goto c3EaP;
       c3EaQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EaP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EaI_info" {
     block_c3EaI_info:
         const _c3EaI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.766776112 UTC

[section ""data" . Text.Read.Lex.readOctP_$sreadOctP_closure" {
     Text.Read.Lex.readOctP_$sreadOctP_closure:
         const Text.Read.Lex.readOctP_$sreadOctP_info;
         const 0;
 },
 Text.Read.Lex.readOctP_$sreadOctP_entry() //  [R2]
         { []
         }
     {offset
       c3Eb4: // global
           R2 = R2;
           call Text.Read.Lex.readOctP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readOctP_$sreadOctP_info" {
     Text.Read.Lex.readOctP_$sreadOctP_info:
         const Text.Read.Lex.readOctP_$sreadOctP_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3yFW_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.772289418 UTC

[section ""data" . Text.Read.Lex.readOctP2_closure" {
     Text.Read.Lex.readOctP2_closure:
         const Text.Read.Lex.readOctP2_info;
         const 0;
 },
 w2_s3yoh_entry() //  [R1]
         { []
         }
     {offset
       c3Ebj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Ebk; else goto c3Ebl;
       c3Ebk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ebl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_s3yoh_info" {
     w2_s3yoh_info:
         const w2_s3yoh_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+488;
 },
 sat_s3yol_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ebu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ebv; else goto c3Ebw;
       c3Ebv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ebw: // global
           I64[Sp - 8] = block_c3Ebr_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yol_info" {
     sat_s3yol_info:
         const sat_s3yol_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3yFW_srt+512;
 },
 _c3Ebr() //  [R1]
         { []
         }
     {offset
       c3Ebr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ebz; else goto c3Eby;
       c3Ebz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Eby: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ebr_info" {
     block_c3Ebr_info:
         const _c3Ebr;
         const 0;
         const 30;
 },
 Text.Read.Lex.readOctP2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3EbA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3EbE; else goto c3EbD;
       c3EbE: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readOctP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3EbD: // global
           I64[Hp - 48] = w2_s3yoh_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yol_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readOctP2_info" {
     Text.Read.Lex.readOctP2_info:
         const Text.Read.Lex.readOctP2_entry;
         const 0;
         const 313532612622;
         const 8589934607;
         const S3yFW_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.782572421 UTC

[section ""data" . Text.Read.Lex.readOctP_closure" {
     Text.Read.Lex.readOctP_closure:
         const Text.Read.Lex.readOctP_info;
         const 0;
 },
 Text.Read.Lex.readOctP_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Ec1: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readOctP2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readOctP_info" {
     Text.Read.Lex.readOctP_info:
         const Text.Read.Lex.readOctP_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3yFW_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.78677288 UTC

[section ""data" . Text.Read.Lex.readDecP1_closure" {
     Text.Read.Lex.readDecP1_closure:
         const Text.Read.Lex.readDecP1_info;
         const 0;
 },
 section ""relreadonly" . u3Ecl_srtd" {
     u3Ecl_srtd:
         const S3yFW_srt+280;
         const 34;
         const 8858370049;
 },
 Text.Read.Lex.readDecP1_entry() //  [R2]
         { []
         }
     {offset
       c3Ecf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ecg; else goto c3Ech;
       c3Ecg: // global
           R2 = R2;
           R1 = Text.Read.Lex.readDecP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ech: // global
           I64[Sp - 8] = block_c3Ecc_info;
           R3 = R2;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP1_info" {
     Text.Read.Lex.readDecP1_info:
         const Text.Read.Lex.readDecP1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3Ecl_srtd;
 },
 _c3Ecc() //  [R1]
         { []
         }
     {offset
       c3Ecc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Eck; else goto c3Ecj;
       c3Eck: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ecj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ecc_info" {
     block_c3Ecc_info:
         const _c3Ecc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.793382624 UTC

[section ""data" . Text.Read.Lex.readDecP_$sreadDecP_closure" {
     Text.Read.Lex.readDecP_$sreadDecP_closure:
         const Text.Read.Lex.readDecP_$sreadDecP_info;
         const 0;
 },
 Text.Read.Lex.readDecP_$sreadDecP_entry() //  [R2]
         { []
         }
     {offset
       c3EcA: // global
           R2 = R2;
           call Text.Read.Lex.readDecP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP_$sreadDecP_info" {
     Text.Read.Lex.readDecP_$sreadDecP_info:
         const Text.Read.Lex.readDecP_$sreadDecP_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3yFW_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.798641592 UTC

[section ""data" . Text.Read.Lex.readDecP5_closure" {
     Text.Read.Lex.readDecP5_closure:
         const Text.Read.Lex.readDecP5_info;
         const 0;
 },
 w2_s3yor_entry() //  [R1]
         { []
         }
     {offset
       c3EcP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3EcQ; else goto c3EcR;
       c3EcQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EcR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_s3yor_info" {
     w2_s3yor_info:
         const w2_s3yor_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+552;
 },
 sat_s3yov_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ed0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ed1; else goto c3Ed2;
       c3Ed1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ed2: // global
           I64[Sp - 8] = block_c3EcX_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yov_info" {
     sat_s3yov_info:
         const sat_s3yov_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3yFW_srt+512;
 },
 _c3EcX() //  [R1]
         { []
         }
     {offset
       c3EcX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ed5; else goto c3Ed4;
       c3Ed5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ed4: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EcX_info" {
     block_c3EcX_info:
         const _c3EcX;
         const 0;
         const 30;
 },
 Text.Read.Lex.readDecP5_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Ed6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Eda; else goto c3Ed9;
       c3Eda: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readDecP5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ed9: // global
           I64[Hp - 48] = w2_s3yor_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yov_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP5_info" {
     Text.Read.Lex.readDecP5_info:
         const Text.Read.Lex.readDecP5_entry;
         const 0;
         const 416611827726;
         const 8589934607;
         const S3yFW_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.808700507 UTC

[section ""data" . Text.Read.Lex.readDecP_closure" {
     Text.Read.Lex.readDecP_closure:
         const Text.Read.Lex.readDecP_info;
         const 0;
 },
 Text.Read.Lex.readDecP_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Edx: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readDecP5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP_info" {
     Text.Read.Lex.readDecP_info:
         const Text.Read.Lex.readDecP_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3yFW_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.813736345 UTC

[section ""data" . Text.Read.Lex.readHexP1_closure" {
     Text.Read.Lex.readHexP1_closure:
         const Text.Read.Lex.readHexP1_info;
         const 0;
 },
 Text.Read.Lex.readHexP1_entry() //  [R2]
         { []
         }
     {offset
       c3EdL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3EdM; else goto c3EdN;
       c3EdM: // global
           R2 = R2;
           R1 = Text.Read.Lex.readHexP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EdN: // global
           I64[Sp - 8] = block_c3EdI_info;
           R3 = R2;
           R2 = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readHexP1_info" {
     Text.Read.Lex.readHexP1_info:
         const Text.Read.Lex.readHexP1_entry;
         const 0;
         const 8834747727886;
         const 4294967301;
         const S3yFW_srt+480;
 },
 _c3EdI() //  [R1]
         { []
         }
     {offset
       c3EdI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EdQ; else goto c3EdP;
       c3EdQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EdP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EdI_info" {
     block_c3EdI_info:
         const _c3EdI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.819285554 UTC

[section ""data" . Text.Read.Lex.readHexP_$sreadHexP_closure" {
     Text.Read.Lex.readHexP_$sreadHexP_closure:
         const Text.Read.Lex.readHexP_$sreadHexP_info;
         const 0;
 },
 Text.Read.Lex.readHexP_$sreadHexP_entry() //  [R2]
         { []
         }
     {offset
       c3Ee4: // global
           R2 = R2;
           call Text.Read.Lex.readHexP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readHexP_$sreadHexP_info" {
     Text.Read.Lex.readHexP_$sreadHexP_info:
         const Text.Read.Lex.readHexP_$sreadHexP_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3yFW_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.824916869 UTC

[section ""data" . Text.Read.Lex.readHexP2_closure" {
     Text.Read.Lex.readHexP2_closure:
         const Text.Read.Lex.readHexP2_info;
         const 0;
 },
 w2_s3yoB_entry() //  [R1]
         { []
         }
     {offset
       c3Eej: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Eek; else goto c3Eel;
       c3Eek: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Eel: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_s3yoB_info" {
     w2_s3yoB_info:
         const w2_s3yoB_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+480;
 },
 sat_s3yoF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Eeu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Eev; else goto c3Eew;
       c3Eev: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Eew: // global
           I64[Sp - 8] = block_c3Eer_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yoF_info" {
     sat_s3yoF_info:
         const sat_s3yoF_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3yFW_srt+512;
 },
 _c3Eer() //  [R1]
         { []
         }
     {offset
       c3Eer: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Eez; else goto c3Eey;
       c3Eez: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Eey: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Eer_info" {
     block_c3Eer_info:
         const _c3Eer;
         const 0;
         const 30;
 },
 Text.Read.Lex.readHexP2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3EeA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3EeE; else goto c3EeD;
       c3EeE: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readHexP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3EeD: // global
           I64[Hp - 48] = w2_s3yoB_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yoF_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readHexP2_info" {
     Text.Read.Lex.readHexP2_info:
         const Text.Read.Lex.readHexP2_entry;
         const 0;
         const 17665200488462;
         const 8589934607;
         const S3yFW_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.834784672 UTC

[section ""data" . Text.Read.Lex.readHexP_closure" {
     Text.Read.Lex.readHexP_closure:
         const Text.Read.Lex.readHexP_info;
         const 0;
 },
 Text.Read.Lex.readHexP_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Ef1: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readHexP2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readHexP_info" {
     Text.Read.Lex.readHexP_info:
         const Text.Read.Lex.readHexP_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3yFW_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.850215831 UTC

[section ""data" . $wlexDigits_r3y9x_closure" {
     $wlexDigits_r3y9x_closure:
         const $wlexDigits_r3y9x_info;
         const 0;
 },
 lvl116_s3yoI_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Efo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Efp; else goto c3Efq;
       c3Efp: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Efq: // global
           I64[Sp - 16] = block_c3Efh_info;
           _s3yoH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yoH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Efx; else goto c3Efi;
       u3Efx: // global
           call _c3Efh(R1) args: 0, res: 0, upd: 0;
       c3Efi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl116_s3yoI_info" {
     lvl116_s3yoI_info:
         const lvl116_s3yoI_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Efh() //  [R1]
         { []
         }
     {offset
       c3Efh: // global
           if (R1 & 7 == 1) goto c3Efl; else goto c3Efm;
       c3Efl: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Efm: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Efh_info" {
     block_c3Efh_info:
         const _c3Efh;
         const 1;
         const 30;
 },
 sat_s3yoS_entry() //  [R1]
         { []
         }
     {offset
       c3EfM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EfN; else goto c3EfO;
       c3EfN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EfO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yoS_info" {
     sat_s3yoS_info:
         const sat_s3yoS_entry;
         const 1;
         const 16;
 },
 sat_s3yp4_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Egg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Egk; else goto c3Egj;
       c3Egk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Egj: // global
           _s3yoP::P64 = P64[R1 + 7];
           _s3yp0::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yp0::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3yoP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yp4_info" {
     sat_s3yp4_info:
         const sat_s3yp4_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 lvl117_s3yp1_entry() //  [R1]
         { []
         }
     {offset
       c3Egl: // global
           _s3yp1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Egm; else goto c3Egn;
       c3Egn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Egp; else goto c3Ego;
       c3Egp: // global
           HpAlloc = 24;
           goto c3Egm;
       c3Egm: // global
           R1 = _s3yp1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ego: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yp1::P64;
           _s3yoN::P64 = P64[_s3yp1::P64 + 16];
           _s3yoP::P64 = P64[_s3yp1::P64 + 24];
           _s3yoQ::P64 = P64[_s3yp1::P64 + 32];
           _s3yoU::P64 = P64[_s3yp1::P64 + 40];
           _s3yp0::P64 = P64[_s3yp1::P64 + 48];
           I64[Hp - 16] = sat_s3yp4_info;
           P64[Hp - 8] = _s3yoP::P64;
           P64[Hp] = _s3yp0::P64;
           R4 = _s3yoQ::P64;
           R3 = Hp - 15;
           R2 = _s3yoU::P64;
           R1 = _s3yoN::P64;
           Sp = Sp - 16;
           call scan_s3yoN_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3yp1_info" {
     lvl117_s3yp1_info:
         const lvl117_s3yp1_entry;
         const 5;
         const 4294967311;
         const S3yFW_srt+472;
 },
 sat_s3yp6_entry() //  [R1]
         { []
         }
     {offset
       c3Egv: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yp6_info" {
     sat_s3yp6_info:
         const sat_s3yp6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3ypa_entry() //  [R1]
         { []
         }
     {offset
       c3EgI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EgJ; else goto c3EgK;
       c3EgJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EgK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ypa_info" {
     sat_s3ypa_info:
         const sat_s3ypa_entry;
         const 1;
         const 16;
 },
 sat_s3ypc_entry() //  [R1]
         { []
         }
     {offset
       c3EgT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EgU; else goto c3EgV;
       c3EgU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EgV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ypc_info" {
     sat_s3ypc_info:
         const sat_s3ypc_entry;
         const 1;
         const 16;
 },
 sat_s3yph_entry() //  [R1]
         { []
         }
     {offset
       c3Eh4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Eh5; else goto c3Eh6;
       c3Eh5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Eh6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yph_info" {
     sat_s3yph_info:
         const sat_s3yph_entry;
         const 1;
         const 16;
 },
 sat_s3ypj_entry() //  [R1]
         { []
         }
     {offset
       c3Ehf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ehg; else goto c3Ehh;
       c3Ehg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ehh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ypj_info" {
     sat_s3ypj_info:
         const sat_s3ypj_entry;
         const 1;
         const 16;
 },
 sat_s3ypq_entry() //  [R1]
         { []
         }
     {offset
       c3EhA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EhB; else goto c3EhC;
       c3EhB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EhC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ypq_info" {
     sat_s3ypq_info:
         const sat_s3ypq_entry;
         const 1;
         const 16;
 },
 sat_s3yps_entry() //  [R1]
         { []
         }
     {offset
       c3EhL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EhM; else goto c3EhN;
       c3EhM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EhN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yps_info" {
     sat_s3yps_info:
         const sat_s3yps_entry;
         const 1;
         const 16;
 },
 scan_s3yoN_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c3EhS: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3EhT; else goto c3EhU;
       c3EhT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3EhU: // global
           I64[Sp - 40] = block_c3EfD_info;
           _s3yoN::P64 = R1;
           _s3yoG::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3yoG::P64;
           P64[Sp - 24] = _s3yoN::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3Ek4; else goto c3EfE;
       u3Ek4: // global
           call _c3EfD(R1) args: 0, res: 0, upd: 0;
       c3EfE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . scan_s3yoN_info" {
     scan_s3yoN_info:
         const scan_s3yoN_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S3yFW_srt+472;
 },
 _c3EfD() //  [R1]
         { []
         }
     {offset
       c3EfD: // global
           if (R1 & 7 == 1) goto c3EhP; else goto c3EhQ;
       c3EhP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3EhX; else goto c3EhW;
       c3EhX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EhW: // global
           I64[Hp - 16] = sat_s3yoS_info;
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 16;
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3EhQ: // global
           I64[Sp - 8] = block_c3EfR_info;
           _s3yoT::P64 = P64[R1 + 6];
           _s3yoU::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s3yoU::P64;
           P64[Sp + 8] = _s3yoT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3EjU; else goto c3EfS;
       u3EjU: // global
           call _c3EfR(R1) args: 0, res: 0, upd: 0;
       c3EfS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EfD_info" {
     block_c3EfD_info:
         const _c3EfD;
         const 4;
         const 4294967326;
         const S3yFW_srt+472;
 },
 _c3EfR() //  [R1]
         { []
         }
     {offset
       c3EfR: // global
           I64[Sp] = block_c3EfW_info;
           _s3yoW::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3yoW::I64;
           if (R1 & 7 != 0) goto u3EjV; else goto c3EfX;
       u3EjV: // global
           call _c3EfW(R1) args: 0, res: 0, upd: 0;
       c3EfX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EfR_info" {
     block_c3EfR_info:
         const _c3EfR;
         const 5;
         const 4294967326;
         const S3yFW_srt+472;
 },
 _c3EfW() //  [R1]
         { []
         }
     {offset
       c3EfW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Ei2; else goto c3Ei1;
       c3Ei2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ei1: // global
           _s3yoY::I64 = I64[R1 + 7];
           _s3yp7::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s3yp7::I64, 11)) goto u3EjK; else goto u3EjM;
       u3EjK: // global
           _s3yoP::P64 = P64[Sp + 32];
           _s3yoQ::P64 = P64[Sp + 40];
           if (%MO_S_Lt_W64(_s3yp7::I64, 10)) goto u3EjL; else goto c3Eim;
       u3EjL: // global
           if (_s3yp7::I64 != 8) goto c3Ei8; else goto c3Eif;
       c3Eif: // global
           if (48 > _s3yoY::I64) goto c3Eia; else goto c3Eie;
       c3Eia: // global
           I64[Hp - 16] = sat_s3ypa_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Eie: // global
           if (_s3yoY::I64 > 55) goto c3Eic; else goto c3Eid;
       c3Eic: // global
           I64[Hp - 16] = sat_s3ypc_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Eid: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 48;
           _c3EjJ::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3EjJ::P64;
           Sp = Sp + 8;
           goto u3EjZ;
       c3Eim: // global
           if (48 > _s3yoY::I64) goto c3Eih; else goto c3Eil;
       c3Eih: // global
           I64[Hp - 16] = sat_s3yph_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Eil: // global
           if (_s3yoY::I64 > 57) goto c3Eij; else goto c3Eik;
       c3Eij: // global
           I64[Hp - 16] = sat_s3ypj_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Eik: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 48;
           _c3EjD::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3EjD::P64;
           Sp = Sp + 8;
           goto u3EjZ;
       u3EjM: // global
           if (_s3yp7::I64 != 16) goto c3Ei8; else goto c3EiX;
       c3Ei8: // global
           Hp = Hp - 24;
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3EiX: // global
           if (48 > _s3yoY::I64) goto c3EiU; else goto c3EiW;
       c3EiW: // global
           if (_s3yoY::I64 > 57) goto c3EiU; else goto c3EiV;
       c3EiU: // global
           Hp = Hp - 24;
           I64[Sp + 16] = _s3yoY::I64;
           call _c3Ehm() args: 0, res: 0, upd: 0;
       c3EiV: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 48;
           _c3Ejf::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3Ejf::P64;
           Sp = Sp + 8;
           goto u3EjZ;
       u3EjZ: // global
           call _c3Eg4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3EfW_info" {
     block_c3EfW_info:
         const _c3EfW;
         const 133;
         const 4294967326;
         const S3yFW_srt+472;
 },
 _c3Ehm() //  []
         { []
         }
     {offset
       c3Ehm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Eip; else goto c3Eio;
       c3Eip: // global
           HpAlloc = 16;
           I64[Sp] = block_c3Ehm_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Eio: // global
           _s3yoY::I64 = I64[Sp + 16];
           if (97 > _s3yoY::I64) goto c3EiI; else goto c3EiK;
       c3EiK: // global
           if (_s3yoY::I64 > 102) goto c3EiI; else goto c3EiJ;
       c3EiI: // global
           Hp = Hp - 16;
           call _c3Ehr() args: 0, res: 0, upd: 0;
       c3EiJ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3yoY::I64 - 87;
           P64[Sp + 16] = Hp - 7;
           Sp = Sp + 8;
           call _c3Eg4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Ehm_info" {
     block_c3Ehm_info:
         const _c3Ehm;
         const 133;
         const 4294967326;
         const S3yFW_srt+472;
 },
 _c3Ehr() //  []
         { []
         }
     {offset
       c3Ehr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Eis; else goto c3Eir;
       c3Eis: // global
           HpAlloc = 24;
           I64[Sp] = block_c3Ehr_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Eir: // global
           _s3yoP::P64 = P64[Sp + 32];
           _s3yoQ::P64 = P64[Sp + 40];
           _s3yoY::I64 = I64[Sp + 16];
           if (65 > _s3yoY::I64) goto c3Eiu; else goto c3Eiy;
       c3Eiu: // global
           I64[Hp - 16] = sat_s3ypq_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Eiy: // global
           if (_s3yoY::I64 > 70) goto c3Eiw; else goto c3Eix;
       c3Eiw: // global
           I64[Hp - 16] = sat_s3yps_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Eix: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 55;
           _c3Ejx::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3Ejx::P64;
           Sp = Sp + 8;
           call _c3Eg4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Ehr_info" {
     block_c3Ehr_info:
         const _c3Ehr;
         const 133;
         const 4294967326;
         const S3yFW_srt+472;
 },
 _c3Eg4() //  []
         { []
         }
     {offset
       c3Eg4: // global
           Hp = Hp + 88;
           _s3yp0::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c3Ei6; else goto c3Ei5;
       c3Ei6: // global
           HpAlloc = 88;
           I64[Sp - 8] = block_c3Eg3_info;
           R1 = _s3yp0::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ei5: // global
           I64[Hp - 80] = lvl117_s3yp1_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = _s3yp0::P64;
           I64[Hp - 24] = sat_s3yp6_info;
           P64[Hp - 16] = Hp - 80;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Eg3() //  [R1]
         { []
         }
     {offset
       c3Eg3: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c3Eg4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Eg3_info" {
     block_c3Eg3_info:
         const _c3Eg3;
         const 133;
         const 4294967326;
         const S3yFW_srt+472;
 },
 sat_s3ypJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Eka: // global
           R4 = P64[R1 + 7];
           R3 = GHC.Base.id_closure+1;
           R2 = R2;
           R1 = P64[R1 + 15];
           call scan_s3yoN_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ypJ_info" {
     sat_s3ypJ_info:
         const sat_s3ypJ_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3yFW_srt+472;
 },
 $wlexDigits_r3y9x_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Ekd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Ekh; else goto c3Ekg;
       c3Ekh: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = $wlexDigits_r3y9x_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ekg: // global
           I64[Hp - 48] = lvl116_s3yoI_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = scan_s3yoN_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3ypJ_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 29;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlexDigits_r3y9x_info" {
     $wlexDigits_r3y9x_info:
         const $wlexDigits_r3y9x_entry;
         const 0;
         const 70373039144974;
         const 8589934607;
         const S3yFW_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.89375802 UTC

[section ""data" . a1_r3y9y_closure" {
     a1_r3y9y_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.895886049 UTC

[section ""data" . a2_r3y9z_closure" {
     a2_r3y9z_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.903998025 UTC

[section ""data" . $wlexHexOct_r3y9A_closure" {
     $wlexHexOct_r3y9A_closure:
         const $wlexHexOct_r3y9A_info;
         const 0;
 },
 sat_s3ypP_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Emg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Emk; else goto c3Emj;
       c3Emk: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Emj: // global
           _s3ypK::P64 = P64[R1 + 7];
           I64[Hp - 32] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 24] = a2_r3y9z_closure+1;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 2;
           R1 = _s3ypK::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ypP_info" {
     sat_s3ypP_info:
         const sat_s3ypP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl116_s3ypL_entry() //  [R1]
         { []
         }
     {offset
       c3Emo: // global
           _s3ypL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Emp; else goto c3Emq;
       c3Emq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ems; else goto c3Emr;
       c3Ems: // global
           HpAlloc = 16;
           goto c3Emp;
       c3Emp: // global
           R1 = _s3ypL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Emr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ypL::P64;
           _s3ypK::P64 = P64[_s3ypL::P64 + 16];
           I64[Hp - 8] = sat_s3ypP_info;
           P64[Hp] = _s3ypK::P64;
           I64[Sp - 24] = block_c3Eml_info;
           R3 = Hp - 7;
           R2 = a2_r3y9z_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ypL_info" {
     lvl116_s3ypL_info:
         const lvl116_s3ypL_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+584;
 },
 _c3Eml() //  [R1]
         { []
         }
     {offset
       c3Eml: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Emv; else goto c3Emu;
       c3Emv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Emu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Eml_info" {
     block_c3Eml_info:
         const _c3Eml;
         const 0;
         const 30;
 },
 sat_s3ypW_entry() //  [R1, R2]
         { []
         }
     {offset
       c3EmH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EmL; else goto c3EmK;
       c3EmL: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EmK: // global
           _s3ypK::P64 = P64[R1 + 7];
           I64[Hp - 32] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 24] = a1_r3y9y_closure+1;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 2;
           R1 = _s3ypK::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ypW_info" {
     sat_s3ypW_info:
         const sat_s3ypW_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl117_s3ypS_entry() //  [R1]
         { []
         }
     {offset
       c3EmP: // global
           _s3ypS::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3EmQ; else goto c3EmR;
       c3EmR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EmT; else goto c3EmS;
       c3EmT: // global
           HpAlloc = 16;
           goto c3EmQ;
       c3EmQ: // global
           R1 = _s3ypS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EmS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ypS::P64;
           _s3ypK::P64 = P64[_s3ypS::P64 + 16];
           I64[Hp - 8] = sat_s3ypW_info;
           P64[Hp] = _s3ypK::P64;
           I64[Sp - 24] = block_c3EmM_info;
           R3 = Hp - 7;
           R2 = a1_r3y9y_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3ypS_info" {
     lvl117_s3ypS_info:
         const lvl117_s3ypS_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+584;
 },
 _c3EmM() //  [R1]
         { []
         }
     {offset
       c3EmM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EmW; else goto c3EmV;
       c3EmW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3EmV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3EmM_info" {
     block_c3EmM_info:
         const _c3EmM;
         const 0;
         const 30;
 },
 lvl118_s3ypZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3En5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3En6; else goto c3En7;
       c3En6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3En7: // global
           I64[Sp - 24] = block_c3En2_info;
           _s3ypL::P64 = P64[R1 + 7];
           _s3ypS::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ypL::P64;
           P64[Sp - 8] = _s3ypS::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Enn; else goto c3En3;
       u3Enn: // global
           call _c3En2(R1) args: 0, res: 0, upd: 0;
       c3En3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl118_s3ypZ_info" {
     lvl118_s3ypZ_info:
         const lvl118_s3ypZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3En2() //  [R1]
         { []
         }
     {offset
       c3En2: // global
           _s3ypL::P64 = P64[Sp + 8];
           _s3yq3::I64 = I64[R1 + 7];
           if (_s3yq3::I64 < 120) goto u3Eni; else goto u3Enm;
       u3Eni: // global
           _s3ypS::P64 = P64[Sp + 16];
           if (_s3yq3::I64 < 89) goto u3Enj; else goto u3Enl;
       u3Enj: // global
           if (_s3yq3::I64 >= 88) goto c3Enh; else goto u3Enk;
       u3Enk: // global
           if (_s3yq3::I64 != 79) goto c3End; else goto c3Eng;
       u3Enl: // global
           if (_s3yq3::I64 != 111) goto c3End; else goto c3Eng;
       c3Eng: // global
           R1 = _s3ypS::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Enm: // global
           if (_s3yq3::I64 < 121) goto c3Enh; else goto c3End;
       c3Enh: // global
           R1 = _s3ypL::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3End: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3En2_info" {
     block_c3En2_info:
         const _c3En2;
         const 2;
         const 30;
 },
 sat_s3yq9_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Enx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Eny; else goto c3Enz;
       c3Eny: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Enz: // global
           I64[Sp - 16] = block_c3Enu_info;
           _s3yq4::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yq4::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3EnH; else goto c3Env;
       u3EnH: // global
           call _c3Enu(R1) args: 0, res: 0, upd: 0;
       c3Env: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yq9_info" {
     sat_s3yq9_info:
         const sat_s3yq9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Enu() //  [R1]
         { []
         }
     {offset
       c3Enu: // global
           if (I64[R1 + 7] == 48) goto c3EnG; else goto c3EnF;
       c3EnG: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3EnF: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Enu_info" {
     block_c3Enu_info:
         const _c3Enu;
         const 1;
         const 30;
 },
 $wlexHexOct_r3y9A_entry() //  [R2]
         { []
         }
     {offset
       c3EnI: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3EnM; else goto c3EnL;
       c3EnM: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = $wlexHexOct_r3y9A_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EnL: // global
           I64[Hp - 96] = lvl116_s3ypL_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = lvl117_s3ypS_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = lvl118_s3ypZ_info;
           P64[Hp - 40] = Hp - 96;
           P64[Hp - 32] = Hp - 72;
           I64[Hp - 24] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = sat_s3yq9_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlexHexOct_r3y9A_info" {
     $wlexHexOct_r3y9A_info:
         const $wlexHexOct_r3y9A_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.932395839 UTC

[section ""data" . lexHexOct_r3y9B_closure" {
     lexHexOct_r3y9B_closure:
         const lexHexOct_r3y9B_info;
         const 0;
 },
 lexHexOct_r3y9B_entry() //  [R2]
         { []
         }
     {offset
       c3EoO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3EoP; else goto c3EoQ;
       c3EoP: // global
           R2 = R2;
           R1 = lexHexOct_r3y9B_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EoQ: // global
           I64[Sp - 8] = block_c3EoL_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexHexOct_r3y9A_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lexHexOct_r3y9B_info" {
     lexHexOct_r3y9B_info:
         const lexHexOct_r3y9B_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+592;
 },
 _c3EoL() //  [R1]
         { []
         }
     {offset
       c3EoL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EoT; else goto c3EoS;
       c3EoT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EoS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EoL_info" {
     block_c3EoL_info:
         const _c3EoL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.940218982 UTC

[section ""data" . lvl6_r3y9C_closure" {
     lvl6_r3y9C_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.948418229 UTC

[section ""data" . $wlexFrac_r3y9D_closure" {
     $wlexFrac_r3y9D_closure:
         const $wlexFrac_r3y9D_info;
         const 0;
 },
 sat_s3yqh_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Epi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Epm; else goto c3Epl;
       c3Epm: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Epl: // global
           _s3yqd::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s3yqd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yqh_info" {
     sat_s3yqh_info:
         const sat_s3yqh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl116_s3yqe_entry() //  [R1]
         { []
         }
     {offset
       c3Epq: // global
           _s3yqe::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Epr; else goto c3Eps;
       c3Eps: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Epu; else goto c3Ept;
       c3Epu: // global
           HpAlloc = 16;
           goto c3Epr;
       c3Epr: // global
           R1 = _s3yqe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ept: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yqe::P64;
           _s3yqd::P64 = P64[_s3yqe::P64 + 16];
           I64[Hp - 8] = sat_s3yqh_info;
           P64[Hp] = _s3yqd::P64;
           I64[Sp - 24] = block_c3Epn_info;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yqe_info" {
     lvl116_s3yqe_info:
         const lvl116_s3yqe_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+584;
 },
 _c3Epn() //  [R1]
         { []
         }
     {offset
       c3Epn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Epx; else goto c3Epw;
       c3Epx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Epw: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Epn_info" {
     block_c3Epn_info:
         const _c3Epn;
         const 0;
         const 30;
 },
 sat_s3yqo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3EpG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EpH; else goto c3EpI;
       c3EpH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EpI: // global
           I64[Sp - 16] = block_c3EpD_info;
           _s3yqe::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yqe::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3EpQ; else goto c3EpE;
       u3EpQ: // global
           call _c3EpD(R1) args: 0, res: 0, upd: 0;
       c3EpE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yqo_info" {
     sat_s3yqo_info:
         const sat_s3yqo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3EpD() //  [R1]
         { []
         }
     {offset
       c3EpD: // global
           if (I64[R1 + 7] == 46) goto c3EpP; else goto c3EpO;
       c3EpP: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3EpO: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EpD_info" {
     block_c3EpD_info:
         const _c3EpD;
         const 1;
         const 30;
 },
 $wlexFrac_r3y9D_entry() //  [R2]
         { []
         }
     {offset
       c3EpR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EpV; else goto c3EpU;
       c3EpV: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = $wlexFrac_r3y9D_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EpU: // global
           I64[Hp - 32] = lvl116_s3yqe_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3yqo_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlexFrac_r3y9D_info" {
     $wlexFrac_r3y9D_info:
         const $wlexFrac_r3y9D_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S3yFW_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.969206777 UTC

[section ""data" . lexFrac_r3y9E_closure" {
     lexFrac_r3y9E_closure:
         const lexFrac_r3y9E_info;
         const 0;
 },
 lexFrac_r3y9E_entry() //  [R2]
         { []
         }
     {offset
       c3Eqv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Eqw; else goto c3Eqx;
       c3Eqw: // global
           R2 = R2;
           R1 = lexFrac_r3y9E_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Eqx: // global
           I64[Sp - 8] = block_c3Eqs_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexFrac_r3y9D_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lexFrac_r3y9E_info" {
     lexFrac_r3y9E_info:
         const lexFrac_r3y9E_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+608;
 },
 _c3Eqs() //  [R1]
         { []
         }
     {offset
       c3Eqs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EqA; else goto c3Eqz;
       c3EqA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Eqz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Eqs_info" {
     block_c3Eqs_info:
         const _c3Eqs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.977843107 UTC

[section ""cstring" . m1_r3y9F_bytes" {
     m1_r3y9F_bytes:
         I8[] [83,79,72]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.980317671 UTC

[section ""data" . m2_r3y9G_closure" {
     m2_r3y9G_closure:
         const m2_r3y9G_info;
         const 0;
         const 0;
         const 0;
 },
 m2_r3y9G_entry() //  [R1]
         { []
         }
     {offset
       c3EqR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EqS; else goto c3EqT;
       c3EqS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EqT: // global
           (_c3EqO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EqO::I64 == 0) goto c3EqQ; else goto c3EqP;
       c3EqQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EqP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EqO::I64;
           R2 = m1_r3y9F_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m2_r3y9G_info" {
     m2_r3y9G_info:
         const m2_r3y9G_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.984186536 UTC

[section ""data" . x_r3y9H_closure" {
     x_r3y9H_closure:
         const GHC.Types.C#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.986382933 UTC

[section ""cstring" . m3_r3y9I_bytes" {
     m3_r3y9I_bytes:
         I8[] [83,79]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.988737366 UTC

[section ""data" . m4_r3y9J_closure" {
     m4_r3y9J_closure:
         const m4_r3y9J_info;
         const 0;
         const 0;
         const 0;
 },
 m4_r3y9J_entry() //  [R1]
         { []
         }
     {offset
       c3Er9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Era; else goto c3Erb;
       c3Era: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Erb: // global
           (_c3Er6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Er6::I64 == 0) goto c3Er8; else goto c3Er7;
       c3Er8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Er7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Er6::I64;
           R2 = m3_r3y9I_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m4_r3y9J_info" {
     m4_r3y9J_info:
         const m4_r3y9J_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.992770917 UTC

[section ""data" . x1_r3y9K_closure" {
     x1_r3y9K_closure:
         const GHC.Types.C#_con_info;
         const 14;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.994668467 UTC

[section ""cstring" . m5_r3y9L_bytes" {
     m5_r3y9L_bytes:
         I8[] [78,85,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:12.997605336 UTC

[section ""data" . m6_r3y9M_closure" {
     m6_r3y9M_closure:
         const m6_r3y9M_info;
         const 0;
         const 0;
         const 0;
 },
 m6_r3y9M_entry() //  [R1]
         { []
         }
     {offset
       c3Err: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ers; else goto c3Ert;
       c3Ers: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ert: // global
           (_c3Ero::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ero::I64 == 0) goto c3Erq; else goto c3Erp;
       c3Erq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Erp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ero::I64;
           R2 = m5_r3y9L_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m6_r3y9M_info" {
     m6_r3y9M_info:
         const m6_r3y9M_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.001299573 UTC

[section ""data" . x2_r3y9N_closure" {
     x2_r3y9N_closure:
         const GHC.Types.C#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.002981105 UTC

[section ""cstring" . m7_r3y9O_bytes" {
     m7_r3y9O_bytes:
         I8[] [83,84,88]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.005546954 UTC

[section ""data" . m8_r3y9P_closure" {
     m8_r3y9P_closure:
         const m8_r3y9P_info;
         const 0;
         const 0;
         const 0;
 },
 m8_r3y9P_entry() //  [R1]
         { []
         }
     {offset
       c3ErJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ErK; else goto c3ErL;
       c3ErK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ErL: // global
           (_c3ErG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ErG::I64 == 0) goto c3ErI; else goto c3ErH;
       c3ErI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ErH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ErG::I64;
           R2 = m7_r3y9O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m8_r3y9P_info" {
     m8_r3y9P_info:
         const m8_r3y9P_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.009684621 UTC

[section ""data" . x3_r3y9Q_closure" {
     x3_r3y9Q_closure:
         const GHC.Types.C#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.011384291 UTC

[section ""cstring" . m9_r3y9R_bytes" {
     m9_r3y9R_bytes:
         I8[] [69,84,88]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.013926831 UTC

[section ""data" . m10_r3y9S_closure" {
     m10_r3y9S_closure:
         const m10_r3y9S_info;
         const 0;
         const 0;
         const 0;
 },
 m10_r3y9S_entry() //  [R1]
         { []
         }
     {offset
       c3Es1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Es2; else goto c3Es3;
       c3Es2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Es3: // global
           (_c3ErY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ErY::I64 == 0) goto c3Es0; else goto c3ErZ;
       c3Es0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ErZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ErY::I64;
           R2 = m9_r3y9R_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m10_r3y9S_info" {
     m10_r3y9S_info:
         const m10_r3y9S_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.018075872 UTC

[section ""data" . x4_r3y9T_closure" {
     x4_r3y9T_closure:
         const GHC.Types.C#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.019717707 UTC

[section ""cstring" . m11_r3y9U_bytes" {
     m11_r3y9U_bytes:
         I8[] [69,79,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.02259749 UTC

[section ""data" . m12_r3y9V_closure" {
     m12_r3y9V_closure:
         const m12_r3y9V_info;
         const 0;
         const 0;
         const 0;
 },
 m12_r3y9V_entry() //  [R1]
         { []
         }
     {offset
       c3Esj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Esk; else goto c3Esl;
       c3Esk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Esl: // global
           (_c3Esg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Esg::I64 == 0) goto c3Esi; else goto c3Esh;
       c3Esi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Esh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Esg::I64;
           R2 = m11_r3y9U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m12_r3y9V_info" {
     m12_r3y9V_info:
         const m12_r3y9V_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.026817979 UTC

[section ""data" . x5_r3y9W_closure" {
     x5_r3y9W_closure:
         const GHC.Types.C#_con_info;
         const 4;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.028533589 UTC

[section ""cstring" . m13_r3y9X_bytes" {
     m13_r3y9X_bytes:
         I8[] [69,78,81]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.030993861 UTC

[section ""data" . m14_r3y9Y_closure" {
     m14_r3y9Y_closure:
         const m14_r3y9Y_info;
         const 0;
         const 0;
         const 0;
 },
 m14_r3y9Y_entry() //  [R1]
         { []
         }
     {offset
       c3EsB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EsC; else goto c3EsD;
       c3EsC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EsD: // global
           (_c3Esy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Esy::I64 == 0) goto c3EsA; else goto c3Esz;
       c3EsA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Esz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Esy::I64;
           R2 = m13_r3y9X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m14_r3y9Y_info" {
     m14_r3y9Y_info:
         const m14_r3y9Y_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.035582949 UTC

[section ""data" . x6_r3y9Z_closure" {
     x6_r3y9Z_closure:
         const GHC.Types.C#_con_info;
         const 5;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.037812147 UTC

[section ""cstring" . m15_r3ya0_bytes" {
     m15_r3ya0_bytes:
         I8[] [65,67,75]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.040214496 UTC

[section ""data" . m16_r3ya1_closure" {
     m16_r3ya1_closure:
         const m16_r3ya1_info;
         const 0;
         const 0;
         const 0;
 },
 m16_r3ya1_entry() //  [R1]
         { []
         }
     {offset
       c3EsT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EsU; else goto c3EsV;
       c3EsU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EsV: // global
           (_c3EsQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EsQ::I64 == 0) goto c3EsS; else goto c3EsR;
       c3EsS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EsR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EsQ::I64;
           R2 = m15_r3ya0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m16_r3ya1_info" {
     m16_r3ya1_info:
         const m16_r3ya1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.043981466 UTC

[section ""data" . x7_r3ya2_closure" {
     x7_r3ya2_closure:
         const GHC.Types.C#_con_info;
         const 6;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.0462899 UTC

[section ""cstring" . m17_r3ya3_bytes" {
     m17_r3ya3_bytes:
         I8[] [66,69,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.049030731 UTC

[section ""data" . m18_r3ya4_closure" {
     m18_r3ya4_closure:
         const m18_r3ya4_info;
         const 0;
         const 0;
         const 0;
 },
 m18_r3ya4_entry() //  [R1]
         { []
         }
     {offset
       c3Etb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Etc; else goto c3Etd;
       c3Etc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Etd: // global
           (_c3Et8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Et8::I64 == 0) goto c3Eta; else goto c3Et9;
       c3Eta: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Et9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Et8::I64;
           R2 = m17_r3ya3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m18_r3ya4_info" {
     m18_r3ya4_info:
         const m18_r3ya4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.05274447 UTC

[section ""data" . x8_r3ya5_closure" {
     x8_r3ya5_closure:
         const GHC.Types.C#_con_info;
         const 7;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.054523918 UTC

[section ""cstring" . m19_r3ya6_bytes" {
     m19_r3ya6_bytes:
         I8[] [66,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.057468142 UTC

[section ""data" . m20_r3ya7_closure" {
     m20_r3ya7_closure:
         const m20_r3ya7_info;
         const 0;
         const 0;
         const 0;
 },
 m20_r3ya7_entry() //  [R1]
         { []
         }
     {offset
       c3Ett: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Etu; else goto c3Etv;
       c3Etu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Etv: // global
           (_c3Etq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Etq::I64 == 0) goto c3Ets; else goto c3Etr;
       c3Ets: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Etr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Etq::I64;
           R2 = m19_r3ya6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m20_r3ya7_info" {
     m20_r3ya7_info:
         const m20_r3ya7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.061101724 UTC

[section ""data" . x9_r3ya8_closure" {
     x9_r3ya8_closure:
         const GHC.Types.C#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.063032392 UTC

[section ""cstring" . m21_r3ya9_bytes" {
     m21_r3ya9_bytes:
         I8[] [72,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.065503859 UTC

[section ""data" . m22_r3yaa_closure" {
     m22_r3yaa_closure:
         const m22_r3yaa_info;
         const 0;
         const 0;
         const 0;
 },
 m22_r3yaa_entry() //  [R1]
         { []
         }
     {offset
       c3EtL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EtM; else goto c3EtN;
       c3EtM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EtN: // global
           (_c3EtI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EtI::I64 == 0) goto c3EtK; else goto c3EtJ;
       c3EtK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EtJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EtI::I64;
           R2 = m21_r3ya9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m22_r3yaa_info" {
     m22_r3yaa_info:
         const m22_r3yaa_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.069735878 UTC

[section ""data" . x10_r3yab_closure" {
     x10_r3yab_closure:
         const GHC.Types.C#_con_info;
         const 9;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.07149507 UTC

[section ""cstring" . m23_r3yac_bytes" {
     m23_r3yac_bytes:
         I8[] [76,70]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.07402441 UTC

[section ""data" . m24_r3yad_closure" {
     m24_r3yad_closure:
         const m24_r3yad_info;
         const 0;
         const 0;
         const 0;
 },
 m24_r3yad_entry() //  [R1]
         { []
         }
     {offset
       c3Eu3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Eu4; else goto c3Eu5;
       c3Eu4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Eu5: // global
           (_c3Eu0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Eu0::I64 == 0) goto c3Eu2; else goto c3Eu1;
       c3Eu2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Eu1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Eu0::I64;
           R2 = m23_r3yac_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m24_r3yad_info" {
     m24_r3yad_info:
         const m24_r3yad_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.078252951 UTC

[section ""data" . x11_r3yae_closure" {
     x11_r3yae_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.080026792 UTC

[section ""cstring" . m25_r3yaf_bytes" {
     m25_r3yaf_bytes:
         I8[] [86,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.082524706 UTC

[section ""data" . m26_r3yag_closure" {
     m26_r3yag_closure:
         const m26_r3yag_info;
         const 0;
         const 0;
         const 0;
 },
 m26_r3yag_entry() //  [R1]
         { []
         }
     {offset
       c3Eul: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Eum; else goto c3Eun;
       c3Eum: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Eun: // global
           (_c3Eui::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Eui::I64 == 0) goto c3Euk; else goto c3Euj;
       c3Euk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Euj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Eui::I64;
           R2 = m25_r3yaf_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m26_r3yag_info" {
     m26_r3yag_info:
         const m26_r3yag_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.086999547 UTC

[section ""data" . x12_r3yah_closure" {
     x12_r3yah_closure:
         const GHC.Types.C#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.088734374 UTC

[section ""cstring" . m27_r3yai_bytes" {
     m27_r3yai_bytes:
         I8[] [70,70]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.09112708 UTC

[section ""data" . m28_r3yaj_closure" {
     m28_r3yaj_closure:
         const m28_r3yaj_info;
         const 0;
         const 0;
         const 0;
 },
 m28_r3yaj_entry() //  [R1]
         { []
         }
     {offset
       c3EuD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EuE; else goto c3EuF;
       c3EuE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EuF: // global
           (_c3EuA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EuA::I64 == 0) goto c3EuC; else goto c3EuB;
       c3EuC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EuB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EuA::I64;
           R2 = m27_r3yai_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m28_r3yaj_info" {
     m28_r3yaj_info:
         const m28_r3yaj_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.094923462 UTC

[section ""data" . x13_r3yak_closure" {
     x13_r3yak_closure:
         const GHC.Types.C#_con_info;
         const 12;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.097110648 UTC

[section ""cstring" . m29_r3yal_bytes" {
     m29_r3yal_bytes:
         I8[] [67,82]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.100127106 UTC

[section ""data" . m30_r3yam_closure" {
     m30_r3yam_closure:
         const m30_r3yam_info;
         const 0;
         const 0;
         const 0;
 },
 m30_r3yam_entry() //  [R1]
         { []
         }
     {offset
       c3EuV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EuW; else goto c3EuX;
       c3EuW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EuX: // global
           (_c3EuS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EuS::I64 == 0) goto c3EuU; else goto c3EuT;
       c3EuU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EuT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EuS::I64;
           R2 = m29_r3yal_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m30_r3yam_info" {
     m30_r3yam_info:
         const m30_r3yam_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.10395708 UTC

[section ""data" . x14_r3yan_closure" {
     x14_r3yan_closure:
         const GHC.Types.C#_con_info;
         const 13;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.10579611 UTC

[section ""cstring" . m31_r3yao_bytes" {
     m31_r3yao_bytes:
         I8[] [83,73]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.10861309 UTC

[section ""data" . m32_r3yap_closure" {
     m32_r3yap_closure:
         const m32_r3yap_info;
         const 0;
         const 0;
         const 0;
 },
 m32_r3yap_entry() //  [R1]
         { []
         }
     {offset
       c3Evd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Eve; else goto c3Evf;
       c3Eve: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Evf: // global
           (_c3Eva::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Eva::I64 == 0) goto c3Evc; else goto c3Evb;
       c3Evc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Evb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Eva::I64;
           R2 = m31_r3yao_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m32_r3yap_info" {
     m32_r3yap_info:
         const m32_r3yap_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.113304634 UTC

[section ""data" . x15_r3yaq_closure" {
     x15_r3yaq_closure:
         const GHC.Types.C#_con_info;
         const 15;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.115042462 UTC

[section ""cstring" . m33_r3yar_bytes" {
     m33_r3yar_bytes:
         I8[] [68,76,69]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.118020984 UTC

[section ""data" . m34_r3yas_closure" {
     m34_r3yas_closure:
         const m34_r3yas_info;
         const 0;
         const 0;
         const 0;
 },
 m34_r3yas_entry() //  [R1]
         { []
         }
     {offset
       c3Evv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Evw; else goto c3Evx;
       c3Evw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Evx: // global
           (_c3Evs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Evs::I64 == 0) goto c3Evu; else goto c3Evt;
       c3Evu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Evt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Evs::I64;
           R2 = m33_r3yar_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m34_r3yas_info" {
     m34_r3yas_info:
         const m34_r3yas_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.121971481 UTC

[section ""data" . x16_r3yat_closure" {
     x16_r3yat_closure:
         const GHC.Types.C#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.123728783 UTC

[section ""cstring" . m35_r3yau_bytes" {
     m35_r3yau_bytes:
         I8[] [68,67,49]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.126271978 UTC

[section ""data" . m36_r3yav_closure" {
     m36_r3yav_closure:
         const m36_r3yav_info;
         const 0;
         const 0;
         const 0;
 },
 m36_r3yav_entry() //  [R1]
         { []
         }
     {offset
       c3EvN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EvO; else goto c3EvP;
       c3EvO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EvP: // global
           (_c3EvK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EvK::I64 == 0) goto c3EvM; else goto c3EvL;
       c3EvM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EvL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EvK::I64;
           R2 = m35_r3yau_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m36_r3yav_info" {
     m36_r3yav_info:
         const m36_r3yav_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.130464211 UTC

[section ""data" . x17_r3yaw_closure" {
     x17_r3yaw_closure:
         const GHC.Types.C#_con_info;
         const 17;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.132209356 UTC

[section ""cstring" . m37_r3yax_bytes" {
     m37_r3yax_bytes:
         I8[] [68,67,50]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.134676187 UTC

[section ""data" . m38_r3yay_closure" {
     m38_r3yay_closure:
         const m38_r3yay_info;
         const 0;
         const 0;
         const 0;
 },
 m38_r3yay_entry() //  [R1]
         { []
         }
     {offset
       c3Ew5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ew6; else goto c3Ew7;
       c3Ew6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ew7: // global
           (_c3Ew2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ew2::I64 == 0) goto c3Ew4; else goto c3Ew3;
       c3Ew4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ew3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ew2::I64;
           R2 = m37_r3yax_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m38_r3yay_info" {
     m38_r3yay_info:
         const m38_r3yay_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.139173803 UTC

[section ""data" . x18_r3yaz_closure" {
     x18_r3yaz_closure:
         const GHC.Types.C#_con_info;
         const 18;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.140864561 UTC

[section ""cstring" . m39_r3yaA_bytes" {
     m39_r3yaA_bytes:
         I8[] [68,67,51]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.143312167 UTC

[section ""data" . m40_r3yaB_closure" {
     m40_r3yaB_closure:
         const m40_r3yaB_info;
         const 0;
         const 0;
         const 0;
 },
 m40_r3yaB_entry() //  [R1]
         { []
         }
     {offset
       c3Ewn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ewo; else goto c3Ewp;
       c3Ewo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ewp: // global
           (_c3Ewk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ewk::I64 == 0) goto c3Ewm; else goto c3Ewl;
       c3Ewm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ewl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ewk::I64;
           R2 = m39_r3yaA_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m40_r3yaB_info" {
     m40_r3yaB_info:
         const m40_r3yaB_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.147535487 UTC

[section ""data" . x19_r3yaC_closure" {
     x19_r3yaC_closure:
         const GHC.Types.C#_con_info;
         const 19;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.149182707 UTC

[section ""cstring" . m41_r3yaD_bytes" {
     m41_r3yaD_bytes:
         I8[] [68,67,52]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.151859094 UTC

[section ""data" . m42_r3yaE_closure" {
     m42_r3yaE_closure:
         const m42_r3yaE_info;
         const 0;
         const 0;
         const 0;
 },
 m42_r3yaE_entry() //  [R1]
         { []
         }
     {offset
       c3EwF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EwG; else goto c3EwH;
       c3EwG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EwH: // global
           (_c3EwC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EwC::I64 == 0) goto c3EwE; else goto c3EwD;
       c3EwE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EwD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EwC::I64;
           R2 = m41_r3yaD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m42_r3yaE_info" {
     m42_r3yaE_info:
         const m42_r3yaE_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.156109418 UTC

[section ""data" . x20_r3yaF_closure" {
     x20_r3yaF_closure:
         const GHC.Types.C#_con_info;
         const 20;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.157919062 UTC

[section ""cstring" . m43_r3yaG_bytes" {
     m43_r3yaG_bytes:
         I8[] [78,65,75]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.160340467 UTC

[section ""data" . m44_r3yaH_closure" {
     m44_r3yaH_closure:
         const m44_r3yaH_info;
         const 0;
         const 0;
         const 0;
 },
 m44_r3yaH_entry() //  [R1]
         { []
         }
     {offset
       c3EwX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EwY; else goto c3EwZ;
       c3EwY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EwZ: // global
           (_c3EwU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EwU::I64 == 0) goto c3EwW; else goto c3EwV;
       c3EwW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EwV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EwU::I64;
           R2 = m43_r3yaG_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m44_r3yaH_info" {
     m44_r3yaH_info:
         const m44_r3yaH_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.164171116 UTC

[section ""data" . x21_r3yaI_closure" {
     x21_r3yaI_closure:
         const GHC.Types.C#_con_info;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.166645995 UTC

[section ""cstring" . m45_r3yaJ_bytes" {
     m45_r3yaJ_bytes:
         I8[] [83,89,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.169070008 UTC

[section ""data" . m46_r3yaK_closure" {
     m46_r3yaK_closure:
         const m46_r3yaK_info;
         const 0;
         const 0;
         const 0;
 },
 m46_r3yaK_entry() //  [R1]
         { []
         }
     {offset
       c3Exf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Exg; else goto c3Exh;
       c3Exg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Exh: // global
           (_c3Exc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Exc::I64 == 0) goto c3Exe; else goto c3Exd;
       c3Exe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Exd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Exc::I64;
           R2 = m45_r3yaJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m46_r3yaK_info" {
     m46_r3yaK_info:
         const m46_r3yaK_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.172870497 UTC

[section ""data" . x22_r3yaL_closure" {
     x22_r3yaL_closure:
         const GHC.Types.C#_con_info;
         const 22;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.174730516 UTC

[section ""cstring" . m47_r3yaM_bytes" {
     m47_r3yaM_bytes:
         I8[] [69,84,66]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.177479879 UTC

[section ""data" . m48_r3yaN_closure" {
     m48_r3yaN_closure:
         const m48_r3yaN_info;
         const 0;
         const 0;
         const 0;
 },
 m48_r3yaN_entry() //  [R1]
         { []
         }
     {offset
       c3Exx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Exy; else goto c3Exz;
       c3Exy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Exz: // global
           (_c3Exu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Exu::I64 == 0) goto c3Exw; else goto c3Exv;
       c3Exw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Exv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Exu::I64;
           R2 = m47_r3yaM_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m48_r3yaN_info" {
     m48_r3yaN_info:
         const m48_r3yaN_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.181893633 UTC

[section ""data" . x23_r3yaO_closure" {
     x23_r3yaO_closure:
         const GHC.Types.C#_con_info;
         const 23;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.183596495 UTC

[section ""cstring" . m49_r3yaP_bytes" {
     m49_r3yaP_bytes:
         I8[] [67,65,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.186479122 UTC

[section ""data" . m50_r3yaQ_closure" {
     m50_r3yaQ_closure:
         const m50_r3yaQ_info;
         const 0;
         const 0;
         const 0;
 },
 m50_r3yaQ_entry() //  [R1]
         { []
         }
     {offset
       c3ExP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ExQ; else goto c3ExR;
       c3ExQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ExR: // global
           (_c3ExM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ExM::I64 == 0) goto c3ExO; else goto c3ExN;
       c3ExO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ExN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ExM::I64;
           R2 = m49_r3yaP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m50_r3yaQ_info" {
     m50_r3yaQ_info:
         const m50_r3yaQ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.190177163 UTC

[section ""data" . x24_r3yaR_closure" {
     x24_r3yaR_closure:
         const GHC.Types.C#_con_info;
         const 24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.191959662 UTC

[section ""cstring" . m51_r3yaS_bytes" {
     m51_r3yaS_bytes:
         I8[] [69,77]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.194450516 UTC

[section ""data" . m52_r3yaT_closure" {
     m52_r3yaT_closure:
         const m52_r3yaT_info;
         const 0;
         const 0;
         const 0;
 },
 m52_r3yaT_entry() //  [R1]
         { []
         }
     {offset
       c3Ey7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ey8; else goto c3Ey9;
       c3Ey8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ey9: // global
           (_c3Ey4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ey4::I64 == 0) goto c3Ey6; else goto c3Ey5;
       c3Ey6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ey5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ey4::I64;
           R2 = m51_r3yaS_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m52_r3yaT_info" {
     m52_r3yaT_info:
         const m52_r3yaT_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.198526625 UTC

[section ""data" . x25_r3yaU_closure" {
     x25_r3yaU_closure:
         const GHC.Types.C#_con_info;
         const 25;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.200130851 UTC

[section ""cstring" . m53_r3yaV_bytes" {
     m53_r3yaV_bytes:
         I8[] [83,85,66]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.203027888 UTC

[section ""data" . m54_r3yaW_closure" {
     m54_r3yaW_closure:
         const m54_r3yaW_info;
         const 0;
         const 0;
         const 0;
 },
 m54_r3yaW_entry() //  [R1]
         { []
         }
     {offset
       c3Eyp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Eyq; else goto c3Eyr;
       c3Eyq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Eyr: // global
           (_c3Eym::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Eym::I64 == 0) goto c3Eyo; else goto c3Eyn;
       c3Eyo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Eyn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Eym::I64;
           R2 = m53_r3yaV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m54_r3yaW_info" {
     m54_r3yaW_info:
         const m54_r3yaW_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.20733297 UTC

[section ""data" . x26_r3yaX_closure" {
     x26_r3yaX_closure:
         const GHC.Types.C#_con_info;
         const 26;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.209093953 UTC

[section ""cstring" . m55_r3yaY_bytes" {
     m55_r3yaY_bytes:
         I8[] [69,83,67]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.211641529 UTC

[section ""data" . m56_r3yaZ_closure" {
     m56_r3yaZ_closure:
         const m56_r3yaZ_info;
         const 0;
         const 0;
         const 0;
 },
 m56_r3yaZ_entry() //  [R1]
         { []
         }
     {offset
       c3EyH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EyI; else goto c3EyJ;
       c3EyI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EyJ: // global
           (_c3EyE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EyE::I64 == 0) goto c3EyG; else goto c3EyF;
       c3EyG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EyF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EyE::I64;
           R2 = m55_r3yaY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m56_r3yaZ_info" {
     m56_r3yaZ_info:
         const m56_r3yaZ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.216135963 UTC

[section ""data" . x27_r3yb0_closure" {
     x27_r3yb0_closure:
         const GHC.Types.C#_con_info;
         const 27;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.217912183 UTC

[section ""cstring" . m57_r3yb1_bytes" {
     m57_r3yb1_bytes:
         I8[] [70,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.220373504 UTC

[section ""data" . m58_r3yb2_closure" {
     m58_r3yb2_closure:
         const m58_r3yb2_info;
         const 0;
         const 0;
         const 0;
 },
 m58_r3yb2_entry() //  [R1]
         { []
         }
     {offset
       c3EyZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ez0; else goto c3Ez1;
       c3Ez0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ez1: // global
           (_c3EyW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EyW::I64 == 0) goto c3EyY; else goto c3EyX;
       c3EyY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EyX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EyW::I64;
           R2 = m57_r3yb1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m58_r3yb2_info" {
     m58_r3yb2_info:
         const m58_r3yb2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.22414339 UTC

[section ""data" . x28_r3yb3_closure" {
     x28_r3yb3_closure:
         const GHC.Types.C#_con_info;
         const 28;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.226362041 UTC

[section ""cstring" . m59_r3yb4_bytes" {
     m59_r3yb4_bytes:
         I8[] [71,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.228788304 UTC

[section ""data" . m60_r3yb5_closure" {
     m60_r3yb5_closure:
         const m60_r3yb5_info;
         const 0;
         const 0;
         const 0;
 },
 m60_r3yb5_entry() //  [R1]
         { []
         }
     {offset
       c3Ezh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ezi; else goto c3Ezj;
       c3Ezi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ezj: // global
           (_c3Eze::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Eze::I64 == 0) goto c3Ezg; else goto c3Ezf;
       c3Ezg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ezf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Eze::I64;
           R2 = m59_r3yb4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m60_r3yb5_info" {
     m60_r3yb5_info:
         const m60_r3yb5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.232741248 UTC

[section ""data" . x29_r3yb6_closure" {
     x29_r3yb6_closure:
         const GHC.Types.C#_con_info;
         const 29;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.234945893 UTC

[section ""cstring" . m61_r3yb7_bytes" {
     m61_r3yb7_bytes:
         I8[] [82,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.237398218 UTC

[section ""data" . m62_r3yb8_closure" {
     m62_r3yb8_closure:
         const m62_r3yb8_info;
         const 0;
         const 0;
         const 0;
 },
 m62_r3yb8_entry() //  [R1]
         { []
         }
     {offset
       c3Ezz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EzA; else goto c3EzB;
       c3EzA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EzB: // global
           (_c3Ezw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ezw::I64 == 0) goto c3Ezy; else goto c3Ezx;
       c3Ezy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ezx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ezw::I64;
           R2 = m61_r3yb7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m62_r3yb8_info" {
     m62_r3yb8_info:
         const m62_r3yb8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.241103088 UTC

[section ""data" . x30_r3yb9_closure" {
     x30_r3yb9_closure:
         const GHC.Types.C#_con_info;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.243319406 UTC

[section ""cstring" . m63_r3yba_bytes" {
     m63_r3yba_bytes:
         I8[] [85,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.246190212 UTC

[section ""data" . m64_r3ybb_closure" {
     m64_r3ybb_closure:
         const m64_r3ybb_info;
         const 0;
         const 0;
         const 0;
 },
 m64_r3ybb_entry() //  [R1]
         { []
         }
     {offset
       c3EzR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EzS; else goto c3EzT;
       c3EzS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EzT: // global
           (_c3EzO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EzO::I64 == 0) goto c3EzQ; else goto c3EzP;
       c3EzQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EzP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EzO::I64;
           R2 = m63_r3yba_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m64_r3ybb_info" {
     m64_r3ybb_info:
         const m64_r3ybb_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.249787339 UTC

[section ""data" . x31_r3ybc_closure" {
     x31_r3ybc_closure:
         const GHC.Types.C#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.251533188 UTC

[section ""cstring" . m65_r3ybd_bytes" {
     m65_r3ybd_bytes:
         I8[] [83,80]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.254436547 UTC

[section ""data" . m66_r3ybe_closure" {
     m66_r3ybe_closure:
         const m66_r3ybe_info;
         const 0;
         const 0;
         const 0;
 },
 m66_r3ybe_entry() //  [R1]
         { []
         }
     {offset
       c3EA9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EAa; else goto c3EAb;
       c3EAa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EAb: // global
           (_c3EA6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EA6::I64 == 0) goto c3EA8; else goto c3EA7;
       c3EA8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EA7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EA6::I64;
           R2 = m65_r3ybd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m66_r3ybe_info" {
     m66_r3ybe_info:
         const m66_r3ybe_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.258205935 UTC

[section ""data" . x32_r3ybf_closure" {
     x32_r3ybf_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.259918302 UTC

[section ""cstring" . m67_r3ybg_bytes" {
     m67_r3ybg_bytes:
         I8[] [68,69,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.262817031 UTC

[section ""data" . m68_r3ybh_closure" {
     m68_r3ybh_closure:
         const m68_r3ybh_info;
         const 0;
         const 0;
         const 0;
 },
 m68_r3ybh_entry() //  [R1]
         { []
         }
     {offset
       c3EAr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EAs; else goto c3EAt;
       c3EAs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EAt: // global
           (_c3EAo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EAo::I64 == 0) goto c3EAq; else goto c3EAp;
       c3EAq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EAp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EAo::I64;
           R2 = m67_r3ybg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m68_r3ybh_info" {
     m68_r3ybh_info:
         const m68_r3ybh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.267020054 UTC

[section ""data" . x33_r3ybi_closure" {
     x33_r3ybi_closure:
         const GHC.Types.C#_con_info;
         const 127;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.268739126 UTC

[section ""data" . sat_s3yqs_closure" {
     sat_s3yqs_closure:
         const GHC.Types.I#_con_info;
         const 1114111;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.27055338 UTC

[section ""data" . sat_s3yqt_closure" {
     sat_s3yqt_closure:
         const :_con_info;
         const sat_s3yqs_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.274191216 UTC

[section ""data" . lvl7_r3ybj_closure" {
     lvl7_r3ybj_closure:
         const lvl7_r3ybj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r3ybj_entry() //  [R1]
         { []
         }
     {offset
       c3EAK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EAL; else goto c3EAM;
       c3EAL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EAM: // global
           (_c3EAH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EAH::I64 == 0) goto c3EAJ; else goto c3EAI;
       c3EAJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EAI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EAH::I64;
           R3 = sat_s3yqt_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r3ybj_info" {
     lvl7_r3ybj_info:
         const lvl7_r3ybj_entry;
         const 0;
         const 4294967317;
         const S3yFW_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.277994048 UTC

[section ""data" . lvl8_r3ybk_closure" {
     lvl8_r3ybk_closure:
         const GHC.Types.C#_con_info;
         const 34;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.279730551 UTC

[section ""data" . lvl9_r3ybl_closure" {
     lvl9_r3ybl_closure:
         const (,)_con_info;
         const lvl8_r3ybk_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.281533288 UTC

[section ""data" . lvl10_r3ybm_closure" {
     lvl10_r3ybm_closure:
         const GHC.Types.C#_con_info;
         const 39;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.283738056 UTC

[section ""data" . lvl11_r3ybn_closure" {
     lvl11_r3ybn_closure:
         const (,)_con_info;
         const lvl10_r3ybm_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.286207764 UTC

[section ""data" . lvl12_r3ybo_closure" {
     lvl12_r3ybo_closure:
         const GHC.Types.C#_con_info;
         const 92;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.28787045 UTC

[section ""data" . lvl13_r3ybp_closure" {
     lvl13_r3ybp_closure:
         const (,)_con_info;
         const lvl12_r3ybo_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.289611811 UTC

[section ""data" . lvl14_r3ybq_closure" {
     lvl14_r3ybq_closure:
         const (,)_con_info;
         const x8_r3ya5_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.291446009 UTC

[section ""data" . lvl15_r3ybr_closure" {
     lvl15_r3ybr_closure:
         const (,)_con_info;
         const x9_r3ya8_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.293625511 UTC

[section ""data" . lvl16_r3ybs_closure" {
     lvl16_r3ybs_closure:
         const (,)_con_info;
         const x13_r3yak_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.295436664 UTC

[section ""data" . lvl17_r3ybt_closure" {
     lvl17_r3ybt_closure:
         const (,)_con_info;
         const x11_r3yae_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.297141628 UTC

[section ""data" . lvl18_r3ybu_closure" {
     lvl18_r3ybu_closure:
         const (,)_con_info;
         const x14_r3yan_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.299109656 UTC

[section ""data" . lvl19_r3ybv_closure" {
     lvl19_r3ybv_closure:
         const (,)_con_info;
         const x10_r3yab_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.301313658 UTC

[section ""data" . lvl20_r3ybw_closure" {
     lvl20_r3ybw_closure:
         const (,)_con_info;
         const x12_r3yah_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.303048047 UTC

[section ""data" . lvl21_r3ybx_closure" {
     lvl21_r3ybx_closure:
         const (,)_con_info;
         const x2_r3y9N_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.304738503 UTC

[section ""data" . lvl22_r3yby_closure" {
     lvl22_r3yby_closure:
         const (,)_con_info;
         const x_r3y9H_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.306605776 UTC

[section ""data" . lvl23_r3ybz_closure" {
     lvl23_r3ybz_closure:
         const (,)_con_info;
         const x3_r3y9Q_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.308317433 UTC

[section ""data" . lvl24_r3ybA_closure" {
     lvl24_r3ybA_closure:
         const (,)_con_info;
         const x4_r3y9T_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.311009886 UTC

[section ""data" . lvl25_r3ybB_closure" {
     lvl25_r3ybB_closure:
         const (,)_con_info;
         const x5_r3y9W_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.314408417 UTC

[section ""data" . lvl26_r3ybC_closure" {
     lvl26_r3ybC_closure:
         const (,)_con_info;
         const x6_r3y9Z_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.317100028 UTC

[section ""data" . lvl27_r3ybD_closure" {
     lvl27_r3ybD_closure:
         const (,)_con_info;
         const x7_r3ya2_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.31998915 UTC

[section ""data" . lvl28_r3ybE_closure" {
     lvl28_r3ybE_closure:
         const (,)_con_info;
         const x1_r3y9K_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.322741864 UTC

[section ""data" . lvl29_r3ybF_closure" {
     lvl29_r3ybF_closure:
         const (,)_con_info;
         const x15_r3yaq_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.32598273 UTC

[section ""data" . lvl30_r3ybG_closure" {
     lvl30_r3ybG_closure:
         const (,)_con_info;
         const x16_r3yat_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.328816455 UTC

[section ""data" . lvl31_r3ybH_closure" {
     lvl31_r3ybH_closure:
         const (,)_con_info;
         const x17_r3yaw_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.331506128 UTC

[section ""data" . lvl32_r3ybI_closure" {
     lvl32_r3ybI_closure:
         const (,)_con_info;
         const x18_r3yaz_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.333801798 UTC

[section ""data" . lvl33_r3ybJ_closure" {
     lvl33_r3ybJ_closure:
         const (,)_con_info;
         const x19_r3yaC_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.336171776 UTC

[section ""data" . lvl34_r3ybK_closure" {
     lvl34_r3ybK_closure:
         const (,)_con_info;
         const x20_r3yaF_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.338962152 UTC

[section ""data" . lvl35_r3ybL_closure" {
     lvl35_r3ybL_closure:
         const (,)_con_info;
         const x21_r3yaI_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.341154569 UTC

[section ""data" . lvl36_r3ybM_closure" {
     lvl36_r3ybM_closure:
         const (,)_con_info;
         const x22_r3yaL_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.343446764 UTC

[section ""data" . lvl37_r3ybN_closure" {
     lvl37_r3ybN_closure:
         const (,)_con_info;
         const x23_r3yaO_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.345214639 UTC

[section ""data" . lvl38_r3ybO_closure" {
     lvl38_r3ybO_closure:
         const (,)_con_info;
         const x24_r3yaR_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.347471767 UTC

[section ""data" . lvl39_r3ybP_closure" {
     lvl39_r3ybP_closure:
         const (,)_con_info;
         const x25_r3yaU_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.349236265 UTC

[section ""data" . lvl40_r3ybQ_closure" {
     lvl40_r3ybQ_closure:
         const (,)_con_info;
         const x26_r3yaX_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.351206601 UTC

[section ""data" . lvl41_r3ybR_closure" {
     lvl41_r3ybR_closure:
         const (,)_con_info;
         const x27_r3yb0_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.352948977 UTC

[section ""data" . lvl42_r3ybS_closure" {
     lvl42_r3ybS_closure:
         const (,)_con_info;
         const x28_r3yb3_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.354749602 UTC

[section ""data" . lvl43_r3ybT_closure" {
     lvl43_r3ybT_closure:
         const (,)_con_info;
         const x29_r3yb6_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.356929011 UTC

[section ""data" . lvl44_r3ybU_closure" {
     lvl44_r3ybU_closure:
         const (,)_con_info;
         const x30_r3yb9_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.359173777 UTC

[section ""data" . lvl45_r3ybV_closure" {
     lvl45_r3ybV_closure:
         const (,)_con_info;
         const x31_r3ybc_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.36261415 UTC

[section ""data" . w1_r3ybW_closure" {
     w1_r3ybW_closure:
         const w1_r3ybW_info;
         const 0;
 },
 lvl116_s3yqv_entry() //  [R1]
         { []
         }
     {offset
       c3EBE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EBF; else goto c3EBG;
       c3EBF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EBG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x1_r3y9K_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yqv_info" {
     lvl116_s3yqv_info:
         const lvl116_s3yqv_entry;
         const 1;
         const 16;
 },
 sat_s3yqx_entry() //  [R1]
         { []
         }
     {offset
       c3EBM: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yqx_info" {
     sat_s3yqx_info:
         const sat_s3yqx_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w1_r3ybW_entry() //  [R2]
         { []
         }
     {offset
       c3EBS: // global
           _s3yqu::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EBT; else goto c3EBU;
       c3EBU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EBW; else goto c3EBV;
       c3EBW: // global
           HpAlloc = 40;
           goto c3EBT;
       c3EBT: // global
           R2 = _s3yqu::P64;
           R1 = w1_r3ybW_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EBV: // global
           I64[Hp - 32] = lvl116_s3yqv_info;
           P64[Hp - 16] = _s3yqu::P64;
           I64[Hp - 8] = sat_s3yqx_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EBP_info;
           R3 = Hp - 7;
           R2 = m4_r3y9J_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w1_r3ybW_info" {
     w1_r3ybW_info:
         const w1_r3ybW_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+632;
 },
 _c3EBP() //  [R1]
         { []
         }
     {offset
       c3EBP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EBZ; else goto c3EBY;
       c3EBZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EBY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EBP_info" {
     block_c3EBP_info:
         const _c3EBP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.372909636 UTC

[section ""data" . w_r3ybX_closure" {
     w_r3ybX_closure:
         const w_r3ybX_info;
         const 0;
 },
 lvl116_s3yqB_entry() //  [R1]
         { []
         }
     {offset
       c3ECr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ECs; else goto c3ECt;
       c3ECs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ECt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x_r3y9H_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yqB_info" {
     lvl116_s3yqB_info:
         const lvl116_s3yqB_entry;
         const 1;
         const 16;
 },
 sat_s3yqD_entry() //  [R1]
         { []
         }
     {offset
       c3ECz: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yqD_info" {
     sat_s3yqD_info:
         const sat_s3yqD_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w_r3ybX_entry() //  [R2]
         { []
         }
     {offset
       c3ECF: // global
           _s3yqA::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ECG; else goto c3ECH;
       c3ECH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ECJ; else goto c3ECI;
       c3ECJ: // global
           HpAlloc = 40;
           goto c3ECG;
       c3ECG: // global
           R2 = _s3yqA::P64;
           R1 = w_r3ybX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ECI: // global
           I64[Hp - 32] = lvl116_s3yqB_info;
           P64[Hp - 16] = _s3yqA::P64;
           I64[Hp - 8] = sat_s3yqD_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ECC_info;
           R3 = Hp - 7;
           R2 = m2_r3y9G_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w_r3ybX_info" {
     w_r3ybX_info:
         const w_r3ybX_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+648;
 },
 _c3ECC() //  [R1]
         { []
         }
     {offset
       c3ECC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ECM; else goto c3ECL;
       c3ECM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ECL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ECC_info" {
     block_c3ECC_info:
         const _c3ECC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.3828922 UTC

[section ""data" . lvl46_r3ybY_closure" {
     lvl46_r3ybY_closure:
         const lvl46_r3ybY_info;
         const 0;
 },
 lvl46_r3ybY_entry() //  [R2]
         { []
         }
     {offset
       c3EDd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3EDe; else goto c3EDf;
       c3EDe: // global
           R2 = R2;
           R1 = lvl46_r3ybY_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EDf: // global
           I64[Sp - 8] = block_c3EDa_info;
           R4 = R2;
           R3 = w1_r3ybW_closure+1;
           R2 = w_r3ybX_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl46_r3ybY_info" {
     lvl46_r3ybY_info:
         const lvl46_r3ybY_entry;
         const 0;
         const 124554051598;
         const 4294967301;
         const S3yFW_srt+640;
 },
 _c3EDa() //  [R1]
         { []
         }
     {offset
       c3EDa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EDi; else goto c3EDh;
       c3EDi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EDh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EDa_info" {
     block_c3EDa_info:
         const _c3EDa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.390255196 UTC

[section ""data" . lvl47_r3ybZ_closure" {
     lvl47_r3ybZ_closure:
         const lvl47_r3ybZ_info;
         const 0;
 },
 lvl116_s3yqK_entry() //  [R1]
         { []
         }
     {offset
       c3EDA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EDB; else goto c3EDC;
       c3EDB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EDC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x2_r3y9N_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yqK_info" {
     lvl116_s3yqK_info:
         const lvl116_s3yqK_entry;
         const 1;
         const 16;
 },
 sat_s3yqM_entry() //  [R1]
         { []
         }
     {offset
       c3EDI: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yqM_info" {
     sat_s3yqM_info:
         const sat_s3yqM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl47_r3ybZ_entry() //  [R2]
         { []
         }
     {offset
       c3EDO: // global
           _s3yqJ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EDP; else goto c3EDQ;
       c3EDQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EDS; else goto c3EDR;
       c3EDS: // global
           HpAlloc = 40;
           goto c3EDP;
       c3EDP: // global
           R2 = _s3yqJ::P64;
           R1 = lvl47_r3ybZ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EDR: // global
           I64[Hp - 32] = lvl116_s3yqK_info;
           P64[Hp - 16] = _s3yqJ::P64;
           I64[Hp - 8] = sat_s3yqM_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EDL_info;
           R3 = Hp - 7;
           R2 = m6_r3y9M_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl47_r3ybZ_info" {
     lvl47_r3ybZ_info:
         const lvl47_r3ybZ_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+680;
 },
 _c3EDL() //  [R1]
         { []
         }
     {offset
       c3EDL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EDV; else goto c3EDU;
       c3EDV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EDU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EDL_info" {
     block_c3EDL_info:
         const _c3EDL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.400588784 UTC

[section ""data" . lvl48_r3yc0_closure" {
     lvl48_r3yc0_closure:
         const lvl48_r3yc0_info;
         const 0;
 },
 lvl116_s3yqQ_entry() //  [R1]
         { []
         }
     {offset
       c3EEn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EEo; else goto c3EEp;
       c3EEo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EEp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x3_r3y9Q_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yqQ_info" {
     lvl116_s3yqQ_info:
         const lvl116_s3yqQ_entry;
         const 1;
         const 16;
 },
 sat_s3yqS_entry() //  [R1]
         { []
         }
     {offset
       c3EEv: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yqS_info" {
     sat_s3yqS_info:
         const sat_s3yqS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl48_r3yc0_entry() //  [R2]
         { []
         }
     {offset
       c3EEB: // global
           _s3yqP::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EEC; else goto c3EED;
       c3EED: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EEF; else goto c3EEE;
       c3EEF: // global
           HpAlloc = 40;
           goto c3EEC;
       c3EEC: // global
           R2 = _s3yqP::P64;
           R1 = lvl48_r3yc0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EEE: // global
           I64[Hp - 32] = lvl116_s3yqQ_info;
           P64[Hp - 16] = _s3yqP::P64;
           I64[Hp - 8] = sat_s3yqS_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EEy_info;
           R3 = Hp - 7;
           R2 = m8_r3y9P_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl48_r3yc0_info" {
     lvl48_r3yc0_info:
         const lvl48_r3yc0_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+696;
 },
 _c3EEy() //  [R1]
         { []
         }
     {offset
       c3EEy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EEI; else goto c3EEH;
       c3EEI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EEH: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EEy_info" {
     block_c3EEy_info:
         const _c3EEy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.411390826 UTC

[section ""data" . lvl49_r3yc1_closure" {
     lvl49_r3yc1_closure:
         const lvl49_r3yc1_info;
         const 0;
 },
 lvl116_s3yqW_entry() //  [R1]
         { []
         }
     {offset
       c3EFa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EFb; else goto c3EFc;
       c3EFb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EFc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x4_r3y9T_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yqW_info" {
     lvl116_s3yqW_info:
         const lvl116_s3yqW_entry;
         const 1;
         const 16;
 },
 sat_s3yqY_entry() //  [R1]
         { []
         }
     {offset
       c3EFi: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yqY_info" {
     sat_s3yqY_info:
         const sat_s3yqY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl49_r3yc1_entry() //  [R2]
         { []
         }
     {offset
       c3EFo: // global
           _s3yqV::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EFp; else goto c3EFq;
       c3EFq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EFs; else goto c3EFr;
       c3EFs: // global
           HpAlloc = 40;
           goto c3EFp;
       c3EFp: // global
           R2 = _s3yqV::P64;
           R1 = lvl49_r3yc1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EFr: // global
           I64[Hp - 32] = lvl116_s3yqW_info;
           P64[Hp - 16] = _s3yqV::P64;
           I64[Hp - 8] = sat_s3yqY_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EFl_info;
           R3 = Hp - 7;
           R2 = m10_r3y9S_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl49_r3yc1_info" {
     lvl49_r3yc1_info:
         const lvl49_r3yc1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+712;
 },
 _c3EFl() //  [R1]
         { []
         }
     {offset
       c3EFl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EFv; else goto c3EFu;
       c3EFv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EFu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EFl_info" {
     block_c3EFl_info:
         const _c3EFl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.422116639 UTC

[section ""data" . lvl50_r3yc2_closure" {
     lvl50_r3yc2_closure:
         const lvl50_r3yc2_info;
         const 0;
 },
 lvl116_s3yr2_entry() //  [R1]
         { []
         }
     {offset
       c3EFX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EFY; else goto c3EFZ;
       c3EFY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EFZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x5_r3y9W_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yr2_info" {
     lvl116_s3yr2_info:
         const lvl116_s3yr2_entry;
         const 1;
         const 16;
 },
 sat_s3yr4_entry() //  [R1]
         { []
         }
     {offset
       c3EG5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yr4_info" {
     sat_s3yr4_info:
         const sat_s3yr4_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl50_r3yc2_entry() //  [R2]
         { []
         }
     {offset
       c3EGb: // global
           _s3yr1::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EGc; else goto c3EGd;
       c3EGd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EGf; else goto c3EGe;
       c3EGf: // global
           HpAlloc = 40;
           goto c3EGc;
       c3EGc: // global
           R2 = _s3yr1::P64;
           R1 = lvl50_r3yc2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EGe: // global
           I64[Hp - 32] = lvl116_s3yr2_info;
           P64[Hp - 16] = _s3yr1::P64;
           I64[Hp - 8] = sat_s3yr4_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EG8_info;
           R3 = Hp - 7;
           R2 = m12_r3y9V_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl50_r3yc2_info" {
     lvl50_r3yc2_info:
         const lvl50_r3yc2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+728;
 },
 _c3EG8() //  [R1]
         { []
         }
     {offset
       c3EG8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EGi; else goto c3EGh;
       c3EGi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EGh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EG8_info" {
     block_c3EG8_info:
         const _c3EG8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.432517301 UTC

[section ""data" . lvl51_r3yc3_closure" {
     lvl51_r3yc3_closure:
         const lvl51_r3yc3_info;
         const 0;
 },
 lvl116_s3yr8_entry() //  [R1]
         { []
         }
     {offset
       c3EGK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EGL; else goto c3EGM;
       c3EGL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EGM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x6_r3y9Z_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yr8_info" {
     lvl116_s3yr8_info:
         const lvl116_s3yr8_entry;
         const 1;
         const 16;
 },
 sat_s3yra_entry() //  [R1]
         { []
         }
     {offset
       c3EGS: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yra_info" {
     sat_s3yra_info:
         const sat_s3yra_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl51_r3yc3_entry() //  [R2]
         { []
         }
     {offset
       c3EGY: // global
           _s3yr7::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EGZ; else goto c3EH0;
       c3EH0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EH2; else goto c3EH1;
       c3EH2: // global
           HpAlloc = 40;
           goto c3EGZ;
       c3EGZ: // global
           R2 = _s3yr7::P64;
           R1 = lvl51_r3yc3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EH1: // global
           I64[Hp - 32] = lvl116_s3yr8_info;
           P64[Hp - 16] = _s3yr7::P64;
           I64[Hp - 8] = sat_s3yra_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EGV_info;
           R3 = Hp - 7;
           R2 = m14_r3y9Y_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl51_r3yc3_info" {
     lvl51_r3yc3_info:
         const lvl51_r3yc3_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+744;
 },
 _c3EGV() //  [R1]
         { []
         }
     {offset
       c3EGV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EH5; else goto c3EH4;
       c3EH5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EH4: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EGV_info" {
     block_c3EGV_info:
         const _c3EGV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.443178025 UTC

[section ""data" . lvl52_r3yc4_closure" {
     lvl52_r3yc4_closure:
         const lvl52_r3yc4_info;
         const 0;
 },
 lvl116_s3yre_entry() //  [R1]
         { []
         }
     {offset
       c3EHx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EHy; else goto c3EHz;
       c3EHy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EHz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x7_r3ya2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yre_info" {
     lvl116_s3yre_info:
         const lvl116_s3yre_entry;
         const 1;
         const 16;
 },
 sat_s3yrg_entry() //  [R1]
         { []
         }
     {offset
       c3EHF: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yrg_info" {
     sat_s3yrg_info:
         const sat_s3yrg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl52_r3yc4_entry() //  [R2]
         { []
         }
     {offset
       c3EHL: // global
           _s3yrd::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EHM; else goto c3EHN;
       c3EHN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EHP; else goto c3EHO;
       c3EHP: // global
           HpAlloc = 40;
           goto c3EHM;
       c3EHM: // global
           R2 = _s3yrd::P64;
           R1 = lvl52_r3yc4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EHO: // global
           I64[Hp - 32] = lvl116_s3yre_info;
           P64[Hp - 16] = _s3yrd::P64;
           I64[Hp - 8] = sat_s3yrg_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EHI_info;
           R3 = Hp - 7;
           R2 = m16_r3ya1_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl52_r3yc4_info" {
     lvl52_r3yc4_info:
         const lvl52_r3yc4_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+760;
 },
 _c3EHI() //  [R1]
         { []
         }
     {offset
       c3EHI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EHS; else goto c3EHR;
       c3EHS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EHR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EHI_info" {
     block_c3EHI_info:
         const _c3EHI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.453535626 UTC

[section ""data" . lvl53_r3yc5_closure" {
     lvl53_r3yc5_closure:
         const lvl53_r3yc5_info;
         const 0;
 },
 lvl116_s3yrk_entry() //  [R1]
         { []
         }
     {offset
       c3EIk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EIl; else goto c3EIm;
       c3EIl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EIm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x8_r3ya5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yrk_info" {
     lvl116_s3yrk_info:
         const lvl116_s3yrk_entry;
         const 1;
         const 16;
 },
 sat_s3yrm_entry() //  [R1]
         { []
         }
     {offset
       c3EIs: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yrm_info" {
     sat_s3yrm_info:
         const sat_s3yrm_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl53_r3yc5_entry() //  [R2]
         { []
         }
     {offset
       c3EIy: // global
           _s3yrj::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EIz; else goto c3EIA;
       c3EIA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EIC; else goto c3EIB;
       c3EIC: // global
           HpAlloc = 40;
           goto c3EIz;
       c3EIz: // global
           R2 = _s3yrj::P64;
           R1 = lvl53_r3yc5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EIB: // global
           I64[Hp - 32] = lvl116_s3yrk_info;
           P64[Hp - 16] = _s3yrj::P64;
           I64[Hp - 8] = sat_s3yrm_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EIv_info;
           R3 = Hp - 7;
           R2 = m18_r3ya4_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl53_r3yc5_info" {
     lvl53_r3yc5_info:
         const lvl53_r3yc5_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+776;
 },
 _c3EIv() //  [R1]
         { []
         }
     {offset
       c3EIv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EIF; else goto c3EIE;
       c3EIF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EIE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EIv_info" {
     block_c3EIv_info:
         const _c3EIv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.464359674 UTC

[section ""data" . lvl54_r3yc6_closure" {
     lvl54_r3yc6_closure:
         const lvl54_r3yc6_info;
         const 0;
 },
 lvl116_s3yrq_entry() //  [R1]
         { []
         }
     {offset
       c3EJ7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EJ8; else goto c3EJ9;
       c3EJ8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EJ9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x9_r3ya8_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yrq_info" {
     lvl116_s3yrq_info:
         const lvl116_s3yrq_entry;
         const 1;
         const 16;
 },
 sat_s3yrs_entry() //  [R1]
         { []
         }
     {offset
       c3EJf: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yrs_info" {
     sat_s3yrs_info:
         const sat_s3yrs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl54_r3yc6_entry() //  [R2]
         { []
         }
     {offset
       c3EJl: // global
           _s3yrp::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EJm; else goto c3EJn;
       c3EJn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EJp; else goto c3EJo;
       c3EJp: // global
           HpAlloc = 40;
           goto c3EJm;
       c3EJm: // global
           R2 = _s3yrp::P64;
           R1 = lvl54_r3yc6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EJo: // global
           I64[Hp - 32] = lvl116_s3yrq_info;
           P64[Hp - 16] = _s3yrp::P64;
           I64[Hp - 8] = sat_s3yrs_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EJi_info;
           R3 = Hp - 7;
           R2 = m20_r3ya7_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl54_r3yc6_info" {
     lvl54_r3yc6_info:
         const lvl54_r3yc6_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+792;
 },
 _c3EJi() //  [R1]
         { []
         }
     {offset
       c3EJi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EJs; else goto c3EJr;
       c3EJs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EJr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EJi_info" {
     block_c3EJi_info:
         const _c3EJi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.475597795 UTC

[section ""data" . lvl55_r3yc7_closure" {
     lvl55_r3yc7_closure:
         const lvl55_r3yc7_info;
         const 0;
 },
 lvl116_s3yrw_entry() //  [R1]
         { []
         }
     {offset
       c3EJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EJV; else goto c3EJW;
       c3EJV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EJW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x10_r3yab_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yrw_info" {
     lvl116_s3yrw_info:
         const lvl116_s3yrw_entry;
         const 1;
         const 16;
 },
 sat_s3yry_entry() //  [R1]
         { []
         }
     {offset
       c3EK2: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yry_info" {
     sat_s3yry_info:
         const sat_s3yry_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl55_r3yc7_entry() //  [R2]
         { []
         }
     {offset
       c3EK8: // global
           _s3yrv::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EK9; else goto c3EKa;
       c3EKa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EKc; else goto c3EKb;
       c3EKc: // global
           HpAlloc = 40;
           goto c3EK9;
       c3EK9: // global
           R2 = _s3yrv::P64;
           R1 = lvl55_r3yc7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EKb: // global
           I64[Hp - 32] = lvl116_s3yrw_info;
           P64[Hp - 16] = _s3yrv::P64;
           I64[Hp - 8] = sat_s3yry_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EK5_info;
           R3 = Hp - 7;
           R2 = m22_r3yaa_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl55_r3yc7_info" {
     lvl55_r3yc7_info:
         const lvl55_r3yc7_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+808;
 },
 _c3EK5() //  [R1]
         { []
         }
     {offset
       c3EK5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EKf; else goto c3EKe;
       c3EKf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EKe: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EK5_info" {
     block_c3EK5_info:
         const _c3EK5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.486328574 UTC

[section ""data" . lvl56_r3yc8_closure" {
     lvl56_r3yc8_closure:
         const lvl56_r3yc8_info;
         const 0;
 },
 lvl116_s3yrC_entry() //  [R1]
         { []
         }
     {offset
       c3EKH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EKI; else goto c3EKJ;
       c3EKI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EKJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x11_r3yae_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yrC_info" {
     lvl116_s3yrC_info:
         const lvl116_s3yrC_entry;
         const 1;
         const 16;
 },
 sat_s3yrE_entry() //  [R1]
         { []
         }
     {offset
       c3EKP: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yrE_info" {
     sat_s3yrE_info:
         const sat_s3yrE_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl56_r3yc8_entry() //  [R2]
         { []
         }
     {offset
       c3EKV: // global
           _s3yrB::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EKW; else goto c3EKX;
       c3EKX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EKZ; else goto c3EKY;
       c3EKZ: // global
           HpAlloc = 40;
           goto c3EKW;
       c3EKW: // global
           R2 = _s3yrB::P64;
           R1 = lvl56_r3yc8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EKY: // global
           I64[Hp - 32] = lvl116_s3yrC_info;
           P64[Hp - 16] = _s3yrB::P64;
           I64[Hp - 8] = sat_s3yrE_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EKS_info;
           R3 = Hp - 7;
           R2 = m24_r3yad_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl56_r3yc8_info" {
     lvl56_r3yc8_info:
         const lvl56_r3yc8_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+824;
 },
 _c3EKS() //  [R1]
         { []
         }
     {offset
       c3EKS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EL2; else goto c3EL1;
       c3EL2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EL1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EKS_info" {
     block_c3EKS_info:
         const _c3EKS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.496943668 UTC

[section ""data" . lvl57_r3yc9_closure" {
     lvl57_r3yc9_closure:
         const lvl57_r3yc9_info;
         const 0;
 },
 lvl116_s3yrI_entry() //  [R1]
         { []
         }
     {offset
       c3ELu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ELv; else goto c3ELw;
       c3ELv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ELw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x12_r3yah_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yrI_info" {
     lvl116_s3yrI_info:
         const lvl116_s3yrI_entry;
         const 1;
         const 16;
 },
 sat_s3yrK_entry() //  [R1]
         { []
         }
     {offset
       c3ELC: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yrK_info" {
     sat_s3yrK_info:
         const sat_s3yrK_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl57_r3yc9_entry() //  [R2]
         { []
         }
     {offset
       c3ELI: // global
           _s3yrH::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ELJ; else goto c3ELK;
       c3ELK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ELM; else goto c3ELL;
       c3ELM: // global
           HpAlloc = 40;
           goto c3ELJ;
       c3ELJ: // global
           R2 = _s3yrH::P64;
           R1 = lvl57_r3yc9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ELL: // global
           I64[Hp - 32] = lvl116_s3yrI_info;
           P64[Hp - 16] = _s3yrH::P64;
           I64[Hp - 8] = sat_s3yrK_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ELF_info;
           R3 = Hp - 7;
           R2 = m26_r3yag_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl57_r3yc9_info" {
     lvl57_r3yc9_info:
         const lvl57_r3yc9_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+840;
 },
 _c3ELF() //  [R1]
         { []
         }
     {offset
       c3ELF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ELP; else goto c3ELO;
       c3ELP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ELO: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ELF_info" {
     block_c3ELF_info:
         const _c3ELF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.507704568 UTC

[section ""data" . lvl58_r3yca_closure" {
     lvl58_r3yca_closure:
         const lvl58_r3yca_info;
         const 0;
 },
 lvl116_s3yrO_entry() //  [R1]
         { []
         }
     {offset
       c3EMh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EMi; else goto c3EMj;
       c3EMi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EMj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x13_r3yak_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yrO_info" {
     lvl116_s3yrO_info:
         const lvl116_s3yrO_entry;
         const 1;
         const 16;
 },
 sat_s3yrQ_entry() //  [R1]
         { []
         }
     {offset
       c3EMp: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yrQ_info" {
     sat_s3yrQ_info:
         const sat_s3yrQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl58_r3yca_entry() //  [R2]
         { []
         }
     {offset
       c3EMv: // global
           _s3yrN::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EMw; else goto c3EMx;
       c3EMx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EMz; else goto c3EMy;
       c3EMz: // global
           HpAlloc = 40;
           goto c3EMw;
       c3EMw: // global
           R2 = _s3yrN::P64;
           R1 = lvl58_r3yca_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EMy: // global
           I64[Hp - 32] = lvl116_s3yrO_info;
           P64[Hp - 16] = _s3yrN::P64;
           I64[Hp - 8] = sat_s3yrQ_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EMs_info;
           R3 = Hp - 7;
           R2 = m28_r3yaj_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl58_r3yca_info" {
     lvl58_r3yca_info:
         const lvl58_r3yca_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+856;
 },
 _c3EMs() //  [R1]
         { []
         }
     {offset
       c3EMs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EMC; else goto c3EMB;
       c3EMC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EMB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EMs_info" {
     block_c3EMs_info:
         const _c3EMs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.518623879 UTC

[section ""data" . lvl59_r3ycb_closure" {
     lvl59_r3ycb_closure:
         const lvl59_r3ycb_info;
         const 0;
 },
 lvl116_s3yrU_entry() //  [R1]
         { []
         }
     {offset
       c3EN4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EN5; else goto c3EN6;
       c3EN5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EN6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x14_r3yan_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yrU_info" {
     lvl116_s3yrU_info:
         const lvl116_s3yrU_entry;
         const 1;
         const 16;
 },
 sat_s3yrW_entry() //  [R1]
         { []
         }
     {offset
       c3ENc: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yrW_info" {
     sat_s3yrW_info:
         const sat_s3yrW_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl59_r3ycb_entry() //  [R2]
         { []
         }
     {offset
       c3ENi: // global
           _s3yrT::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ENj; else goto c3ENk;
       c3ENk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ENm; else goto c3ENl;
       c3ENm: // global
           HpAlloc = 40;
           goto c3ENj;
       c3ENj: // global
           R2 = _s3yrT::P64;
           R1 = lvl59_r3ycb_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ENl: // global
           I64[Hp - 32] = lvl116_s3yrU_info;
           P64[Hp - 16] = _s3yrT::P64;
           I64[Hp - 8] = sat_s3yrW_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ENf_info;
           R3 = Hp - 7;
           R2 = m30_r3yam_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl59_r3ycb_info" {
     lvl59_r3ycb_info:
         const lvl59_r3ycb_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+872;
 },
 _c3ENf() //  [R1]
         { []
         }
     {offset
       c3ENf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ENp; else goto c3ENo;
       c3ENp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ENo: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ENf_info" {
     block_c3ENf_info:
         const _c3ENf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.529565484 UTC

[section ""data" . lvl60_r3ycc_closure" {
     lvl60_r3ycc_closure:
         const lvl60_r3ycc_info;
         const 0;
 },
 lvl116_s3ys0_entry() //  [R1]
         { []
         }
     {offset
       c3ENR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ENS; else goto c3ENT;
       c3ENS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ENT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x15_r3yaq_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ys0_info" {
     lvl116_s3ys0_info:
         const lvl116_s3ys0_entry;
         const 1;
         const 16;
 },
 sat_s3ys2_entry() //  [R1]
         { []
         }
     {offset
       c3ENZ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ys2_info" {
     sat_s3ys2_info:
         const sat_s3ys2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl60_r3ycc_entry() //  [R2]
         { []
         }
     {offset
       c3EO5: // global
           _s3yrZ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EO6; else goto c3EO7;
       c3EO7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EO9; else goto c3EO8;
       c3EO9: // global
           HpAlloc = 40;
           goto c3EO6;
       c3EO6: // global
           R2 = _s3yrZ::P64;
           R1 = lvl60_r3ycc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EO8: // global
           I64[Hp - 32] = lvl116_s3ys0_info;
           P64[Hp - 16] = _s3yrZ::P64;
           I64[Hp - 8] = sat_s3ys2_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EO2_info;
           R3 = Hp - 7;
           R2 = m32_r3yap_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl60_r3ycc_info" {
     lvl60_r3ycc_info:
         const lvl60_r3ycc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+888;
 },
 _c3EO2() //  [R1]
         { []
         }
     {offset
       c3EO2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EOc; else goto c3EOb;
       c3EOc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EOb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EO2_info" {
     block_c3EO2_info:
         const _c3EO2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.541523623 UTC

[section ""data" . lvl61_r3ycd_closure" {
     lvl61_r3ycd_closure:
         const lvl61_r3ycd_info;
         const 0;
 },
 lvl116_s3ys6_entry() //  [R1]
         { []
         }
     {offset
       c3EOE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EOF; else goto c3EOG;
       c3EOF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EOG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x16_r3yat_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ys6_info" {
     lvl116_s3ys6_info:
         const lvl116_s3ys6_entry;
         const 1;
         const 16;
 },
 sat_s3ys8_entry() //  [R1]
         { []
         }
     {offset
       c3EOM: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ys8_info" {
     sat_s3ys8_info:
         const sat_s3ys8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl61_r3ycd_entry() //  [R2]
         { []
         }
     {offset
       c3EOS: // global
           _s3ys5::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EOT; else goto c3EOU;
       c3EOU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EOW; else goto c3EOV;
       c3EOW: // global
           HpAlloc = 40;
           goto c3EOT;
       c3EOT: // global
           R2 = _s3ys5::P64;
           R1 = lvl61_r3ycd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EOV: // global
           I64[Hp - 32] = lvl116_s3ys6_info;
           P64[Hp - 16] = _s3ys5::P64;
           I64[Hp - 8] = sat_s3ys8_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EOP_info;
           R3 = Hp - 7;
           R2 = m34_r3yas_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl61_r3ycd_info" {
     lvl61_r3ycd_info:
         const lvl61_r3ycd_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+904;
 },
 _c3EOP() //  [R1]
         { []
         }
     {offset
       c3EOP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EOZ; else goto c3EOY;
       c3EOZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EOY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EOP_info" {
     block_c3EOP_info:
         const _c3EOP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.552560668 UTC

[section ""data" . lvl62_r3yce_closure" {
     lvl62_r3yce_closure:
         const lvl62_r3yce_info;
         const 0;
 },
 lvl116_s3ysc_entry() //  [R1]
         { []
         }
     {offset
       c3EPr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EPs; else goto c3EPt;
       c3EPs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EPt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x17_r3yaw_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ysc_info" {
     lvl116_s3ysc_info:
         const lvl116_s3ysc_entry;
         const 1;
         const 16;
 },
 sat_s3yse_entry() //  [R1]
         { []
         }
     {offset
       c3EPz: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yse_info" {
     sat_s3yse_info:
         const sat_s3yse_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl62_r3yce_entry() //  [R2]
         { []
         }
     {offset
       c3EPF: // global
           _s3ysb::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EPG; else goto c3EPH;
       c3EPH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EPJ; else goto c3EPI;
       c3EPJ: // global
           HpAlloc = 40;
           goto c3EPG;
       c3EPG: // global
           R2 = _s3ysb::P64;
           R1 = lvl62_r3yce_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EPI: // global
           I64[Hp - 32] = lvl116_s3ysc_info;
           P64[Hp - 16] = _s3ysb::P64;
           I64[Hp - 8] = sat_s3yse_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EPC_info;
           R3 = Hp - 7;
           R2 = m36_r3yav_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl62_r3yce_info" {
     lvl62_r3yce_info:
         const lvl62_r3yce_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+920;
 },
 _c3EPC() //  [R1]
         { []
         }
     {offset
       c3EPC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EPM; else goto c3EPL;
       c3EPM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EPL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EPC_info" {
     block_c3EPC_info:
         const _c3EPC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.563568418 UTC

[section ""data" . lvl63_r3ycf_closure" {
     lvl63_r3ycf_closure:
         const lvl63_r3ycf_info;
         const 0;
 },
 lvl116_s3ysi_entry() //  [R1]
         { []
         }
     {offset
       c3EQe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EQf; else goto c3EQg;
       c3EQf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EQg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x18_r3yaz_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ysi_info" {
     lvl116_s3ysi_info:
         const lvl116_s3ysi_entry;
         const 1;
         const 16;
 },
 sat_s3ysk_entry() //  [R1]
         { []
         }
     {offset
       c3EQm: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ysk_info" {
     sat_s3ysk_info:
         const sat_s3ysk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl63_r3ycf_entry() //  [R2]
         { []
         }
     {offset
       c3EQs: // global
           _s3ysh::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EQt; else goto c3EQu;
       c3EQu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EQw; else goto c3EQv;
       c3EQw: // global
           HpAlloc = 40;
           goto c3EQt;
       c3EQt: // global
           R2 = _s3ysh::P64;
           R1 = lvl63_r3ycf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EQv: // global
           I64[Hp - 32] = lvl116_s3ysi_info;
           P64[Hp - 16] = _s3ysh::P64;
           I64[Hp - 8] = sat_s3ysk_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EQp_info;
           R3 = Hp - 7;
           R2 = m38_r3yay_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl63_r3ycf_info" {
     lvl63_r3ycf_info:
         const lvl63_r3ycf_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+936;
 },
 _c3EQp() //  [R1]
         { []
         }
     {offset
       c3EQp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EQz; else goto c3EQy;
       c3EQz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EQy: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EQp_info" {
     block_c3EQp_info:
         const _c3EQp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.574839812 UTC

[section ""data" . lvl64_r3ycg_closure" {
     lvl64_r3ycg_closure:
         const lvl64_r3ycg_info;
         const 0;
 },
 lvl116_s3yso_entry() //  [R1]
         { []
         }
     {offset
       c3ER1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ER2; else goto c3ER3;
       c3ER2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ER3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x19_r3yaC_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yso_info" {
     lvl116_s3yso_info:
         const lvl116_s3yso_entry;
         const 1;
         const 16;
 },
 sat_s3ysq_entry() //  [R1]
         { []
         }
     {offset
       c3ER9: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ysq_info" {
     sat_s3ysq_info:
         const sat_s3ysq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl64_r3ycg_entry() //  [R2]
         { []
         }
     {offset
       c3ERf: // global
           _s3ysn::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ERg; else goto c3ERh;
       c3ERh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ERj; else goto c3ERi;
       c3ERj: // global
           HpAlloc = 40;
           goto c3ERg;
       c3ERg: // global
           R2 = _s3ysn::P64;
           R1 = lvl64_r3ycg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ERi: // global
           I64[Hp - 32] = lvl116_s3yso_info;
           P64[Hp - 16] = _s3ysn::P64;
           I64[Hp - 8] = sat_s3ysq_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ERc_info;
           R3 = Hp - 7;
           R2 = m40_r3yaB_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl64_r3ycg_info" {
     lvl64_r3ycg_info:
         const lvl64_r3ycg_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+952;
 },
 _c3ERc() //  [R1]
         { []
         }
     {offset
       c3ERc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ERm; else goto c3ERl;
       c3ERm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ERl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ERc_info" {
     block_c3ERc_info:
         const _c3ERc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.586102992 UTC

[section ""data" . lvl65_r3ych_closure" {
     lvl65_r3ych_closure:
         const lvl65_r3ych_info;
         const 0;
 },
 lvl116_s3ysu_entry() //  [R1]
         { []
         }
     {offset
       c3ERO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ERP; else goto c3ERQ;
       c3ERP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ERQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x20_r3yaF_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ysu_info" {
     lvl116_s3ysu_info:
         const lvl116_s3ysu_entry;
         const 1;
         const 16;
 },
 sat_s3ysw_entry() //  [R1]
         { []
         }
     {offset
       c3ERW: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ysw_info" {
     sat_s3ysw_info:
         const sat_s3ysw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl65_r3ych_entry() //  [R2]
         { []
         }
     {offset
       c3ES2: // global
           _s3yst::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ES3; else goto c3ES4;
       c3ES4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ES6; else goto c3ES5;
       c3ES6: // global
           HpAlloc = 40;
           goto c3ES3;
       c3ES3: // global
           R2 = _s3yst::P64;
           R1 = lvl65_r3ych_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ES5: // global
           I64[Hp - 32] = lvl116_s3ysu_info;
           P64[Hp - 16] = _s3yst::P64;
           I64[Hp - 8] = sat_s3ysw_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ERZ_info;
           R3 = Hp - 7;
           R2 = m42_r3yaE_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl65_r3ych_info" {
     lvl65_r3ych_info:
         const lvl65_r3ych_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+968;
 },
 _c3ERZ() //  [R1]
         { []
         }
     {offset
       c3ERZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ES9; else goto c3ES8;
       c3ES9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ES8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ERZ_info" {
     block_c3ERZ_info:
         const _c3ERZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.597058086 UTC

[section ""data" . lvl66_r3yci_closure" {
     lvl66_r3yci_closure:
         const lvl66_r3yci_info;
         const 0;
 },
 lvl116_s3ysA_entry() //  [R1]
         { []
         }
     {offset
       c3ESB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ESC; else goto c3ESD;
       c3ESC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ESD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x21_r3yaI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ysA_info" {
     lvl116_s3ysA_info:
         const lvl116_s3ysA_entry;
         const 1;
         const 16;
 },
 sat_s3ysC_entry() //  [R1]
         { []
         }
     {offset
       c3ESJ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ysC_info" {
     sat_s3ysC_info:
         const sat_s3ysC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl66_r3yci_entry() //  [R2]
         { []
         }
     {offset
       c3ESP: // global
           _s3ysz::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ESQ; else goto c3ESR;
       c3ESR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EST; else goto c3ESS;
       c3EST: // global
           HpAlloc = 40;
           goto c3ESQ;
       c3ESQ: // global
           R2 = _s3ysz::P64;
           R1 = lvl66_r3yci_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ESS: // global
           I64[Hp - 32] = lvl116_s3ysA_info;
           P64[Hp - 16] = _s3ysz::P64;
           I64[Hp - 8] = sat_s3ysC_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ESM_info;
           R3 = Hp - 7;
           R2 = m44_r3yaH_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl66_r3yci_info" {
     lvl66_r3yci_info:
         const lvl66_r3yci_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+984;
 },
 _c3ESM() //  [R1]
         { []
         }
     {offset
       c3ESM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ESW; else goto c3ESV;
       c3ESW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ESV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ESM_info" {
     block_c3ESM_info:
         const _c3ESM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.608117205 UTC

[section ""data" . lvl67_r3ycj_closure" {
     lvl67_r3ycj_closure:
         const lvl67_r3ycj_info;
         const 0;
 },
 lvl116_s3ysG_entry() //  [R1]
         { []
         }
     {offset
       c3ETo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ETp; else goto c3ETq;
       c3ETp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ETq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x22_r3yaL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ysG_info" {
     lvl116_s3ysG_info:
         const lvl116_s3ysG_entry;
         const 1;
         const 16;
 },
 sat_s3ysI_entry() //  [R1]
         { []
         }
     {offset
       c3ETw: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ysI_info" {
     sat_s3ysI_info:
         const sat_s3ysI_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl67_r3ycj_entry() //  [R2]
         { []
         }
     {offset
       c3ETC: // global
           _s3ysF::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ETD; else goto c3ETE;
       c3ETE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ETG; else goto c3ETF;
       c3ETG: // global
           HpAlloc = 40;
           goto c3ETD;
       c3ETD: // global
           R2 = _s3ysF::P64;
           R1 = lvl67_r3ycj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ETF: // global
           I64[Hp - 32] = lvl116_s3ysG_info;
           P64[Hp - 16] = _s3ysF::P64;
           I64[Hp - 8] = sat_s3ysI_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ETz_info;
           R3 = Hp - 7;
           R2 = m46_r3yaK_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl67_r3ycj_info" {
     lvl67_r3ycj_info:
         const lvl67_r3ycj_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1000;
 },
 _c3ETz() //  [R1]
         { []
         }
     {offset
       c3ETz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ETJ; else goto c3ETI;
       c3ETJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ETI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ETz_info" {
     block_c3ETz_info:
         const _c3ETz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.619039108 UTC

[section ""data" . lvl68_r3yck_closure" {
     lvl68_r3yck_closure:
         const lvl68_r3yck_info;
         const 0;
 },
 lvl116_s3ysM_entry() //  [R1]
         { []
         }
     {offset
       c3EUb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EUc; else goto c3EUd;
       c3EUc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EUd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x23_r3yaO_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ysM_info" {
     lvl116_s3ysM_info:
         const lvl116_s3ysM_entry;
         const 1;
         const 16;
 },
 sat_s3ysO_entry() //  [R1]
         { []
         }
     {offset
       c3EUj: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ysO_info" {
     sat_s3ysO_info:
         const sat_s3ysO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl68_r3yck_entry() //  [R2]
         { []
         }
     {offset
       c3EUp: // global
           _s3ysL::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EUq; else goto c3EUr;
       c3EUr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EUt; else goto c3EUs;
       c3EUt: // global
           HpAlloc = 40;
           goto c3EUq;
       c3EUq: // global
           R2 = _s3ysL::P64;
           R1 = lvl68_r3yck_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EUs: // global
           I64[Hp - 32] = lvl116_s3ysM_info;
           P64[Hp - 16] = _s3ysL::P64;
           I64[Hp - 8] = sat_s3ysO_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EUm_info;
           R3 = Hp - 7;
           R2 = m48_r3yaN_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl68_r3yck_info" {
     lvl68_r3yck_info:
         const lvl68_r3yck_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1016;
 },
 _c3EUm() //  [R1]
         { []
         }
     {offset
       c3EUm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EUw; else goto c3EUv;
       c3EUw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EUv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EUm_info" {
     block_c3EUm_info:
         const _c3EUm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.63056928 UTC

[section ""data" . lvl69_r3ycl_closure" {
     lvl69_r3ycl_closure:
         const lvl69_r3ycl_info;
         const 0;
 },
 lvl116_s3ysS_entry() //  [R1]
         { []
         }
     {offset
       c3EUY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EUZ; else goto c3EV0;
       c3EUZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EV0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x24_r3yaR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ysS_info" {
     lvl116_s3ysS_info:
         const lvl116_s3ysS_entry;
         const 1;
         const 16;
 },
 sat_s3ysU_entry() //  [R1]
         { []
         }
     {offset
       c3EV6: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ysU_info" {
     sat_s3ysU_info:
         const sat_s3ysU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl69_r3ycl_entry() //  [R2]
         { []
         }
     {offset
       c3EVc: // global
           _s3ysR::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EVd; else goto c3EVe;
       c3EVe: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EVg; else goto c3EVf;
       c3EVg: // global
           HpAlloc = 40;
           goto c3EVd;
       c3EVd: // global
           R2 = _s3ysR::P64;
           R1 = lvl69_r3ycl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EVf: // global
           I64[Hp - 32] = lvl116_s3ysS_info;
           P64[Hp - 16] = _s3ysR::P64;
           I64[Hp - 8] = sat_s3ysU_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EV9_info;
           R3 = Hp - 7;
           R2 = m50_r3yaQ_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl69_r3ycl_info" {
     lvl69_r3ycl_info:
         const lvl69_r3ycl_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1032;
 },
 _c3EV9() //  [R1]
         { []
         }
     {offset
       c3EV9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EVj; else goto c3EVi;
       c3EVj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EVi: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EV9_info" {
     block_c3EV9_info:
         const _c3EV9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.641603363 UTC

[section ""data" . lvl70_r3ycm_closure" {
     lvl70_r3ycm_closure:
         const lvl70_r3ycm_info;
         const 0;
 },
 lvl116_s3ysY_entry() //  [R1]
         { []
         }
     {offset
       c3EVL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EVM; else goto c3EVN;
       c3EVM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EVN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x25_r3yaU_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ysY_info" {
     lvl116_s3ysY_info:
         const lvl116_s3ysY_entry;
         const 1;
         const 16;
 },
 sat_s3yt0_entry() //  [R1]
         { []
         }
     {offset
       c3EVT: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yt0_info" {
     sat_s3yt0_info:
         const sat_s3yt0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl70_r3ycm_entry() //  [R2]
         { []
         }
     {offset
       c3EVZ: // global
           _s3ysX::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EW0; else goto c3EW1;
       c3EW1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EW3; else goto c3EW2;
       c3EW3: // global
           HpAlloc = 40;
           goto c3EW0;
       c3EW0: // global
           R2 = _s3ysX::P64;
           R1 = lvl70_r3ycm_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EW2: // global
           I64[Hp - 32] = lvl116_s3ysY_info;
           P64[Hp - 16] = _s3ysX::P64;
           I64[Hp - 8] = sat_s3yt0_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EVW_info;
           R3 = Hp - 7;
           R2 = m52_r3yaT_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl70_r3ycm_info" {
     lvl70_r3ycm_info:
         const lvl70_r3ycm_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1048;
 },
 _c3EVW() //  [R1]
         { []
         }
     {offset
       c3EVW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EW6; else goto c3EW5;
       c3EW6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EW5: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EVW_info" {
     block_c3EVW_info:
         const _c3EVW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.65239266 UTC

[section ""data" . lvl71_r3ycn_closure" {
     lvl71_r3ycn_closure:
         const lvl71_r3ycn_info;
         const 0;
 },
 lvl116_s3yt4_entry() //  [R1]
         { []
         }
     {offset
       c3EWy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EWz; else goto c3EWA;
       c3EWz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EWA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x26_r3yaX_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yt4_info" {
     lvl116_s3yt4_info:
         const lvl116_s3yt4_entry;
         const 1;
         const 16;
 },
 sat_s3yt6_entry() //  [R1]
         { []
         }
     {offset
       c3EWG: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yt6_info" {
     sat_s3yt6_info:
         const sat_s3yt6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl71_r3ycn_entry() //  [R2]
         { []
         }
     {offset
       c3EWM: // global
           _s3yt3::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EWN; else goto c3EWO;
       c3EWO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EWQ; else goto c3EWP;
       c3EWQ: // global
           HpAlloc = 40;
           goto c3EWN;
       c3EWN: // global
           R2 = _s3yt3::P64;
           R1 = lvl71_r3ycn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EWP: // global
           I64[Hp - 32] = lvl116_s3yt4_info;
           P64[Hp - 16] = _s3yt3::P64;
           I64[Hp - 8] = sat_s3yt6_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EWJ_info;
           R3 = Hp - 7;
           R2 = m54_r3yaW_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl71_r3ycn_info" {
     lvl71_r3ycn_info:
         const lvl71_r3ycn_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1064;
 },
 _c3EWJ() //  [R1]
         { []
         }
     {offset
       c3EWJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EWT; else goto c3EWS;
       c3EWT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EWS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EWJ_info" {
     block_c3EWJ_info:
         const _c3EWJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.663566009 UTC

[section ""data" . lvl72_r3yco_closure" {
     lvl72_r3yco_closure:
         const lvl72_r3yco_info;
         const 0;
 },
 lvl116_s3yta_entry() //  [R1]
         { []
         }
     {offset
       c3EXl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EXm; else goto c3EXn;
       c3EXm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EXn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x27_r3yb0_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yta_info" {
     lvl116_s3yta_info:
         const lvl116_s3yta_entry;
         const 1;
         const 16;
 },
 sat_s3ytc_entry() //  [R1]
         { []
         }
     {offset
       c3EXt: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ytc_info" {
     sat_s3ytc_info:
         const sat_s3ytc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl72_r3yco_entry() //  [R2]
         { []
         }
     {offset
       c3EXz: // global
           _s3yt9::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EXA; else goto c3EXB;
       c3EXB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EXD; else goto c3EXC;
       c3EXD: // global
           HpAlloc = 40;
           goto c3EXA;
       c3EXA: // global
           R2 = _s3yt9::P64;
           R1 = lvl72_r3yco_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EXC: // global
           I64[Hp - 32] = lvl116_s3yta_info;
           P64[Hp - 16] = _s3yt9::P64;
           I64[Hp - 8] = sat_s3ytc_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EXw_info;
           R3 = Hp - 7;
           R2 = m56_r3yaZ_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl72_r3yco_info" {
     lvl72_r3yco_info:
         const lvl72_r3yco_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1080;
 },
 _c3EXw() //  [R1]
         { []
         }
     {offset
       c3EXw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EXG; else goto c3EXF;
       c3EXG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EXF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EXw_info" {
     block_c3EXw_info:
         const _c3EXw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.67433767 UTC

[section ""data" . lvl73_r3ycp_closure" {
     lvl73_r3ycp_closure:
         const lvl73_r3ycp_info;
         const 0;
 },
 lvl116_s3ytg_entry() //  [R1]
         { []
         }
     {offset
       c3EY8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EY9; else goto c3EYa;
       c3EY9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EYa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x28_r3yb3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ytg_info" {
     lvl116_s3ytg_info:
         const lvl116_s3ytg_entry;
         const 1;
         const 16;
 },
 sat_s3yti_entry() //  [R1]
         { []
         }
     {offset
       c3EYg: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yti_info" {
     sat_s3yti_info:
         const sat_s3yti_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl73_r3ycp_entry() //  [R2]
         { []
         }
     {offset
       c3EYm: // global
           _s3ytf::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EYn; else goto c3EYo;
       c3EYo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EYq; else goto c3EYp;
       c3EYq: // global
           HpAlloc = 40;
           goto c3EYn;
       c3EYn: // global
           R2 = _s3ytf::P64;
           R1 = lvl73_r3ycp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EYp: // global
           I64[Hp - 32] = lvl116_s3ytg_info;
           P64[Hp - 16] = _s3ytf::P64;
           I64[Hp - 8] = sat_s3yti_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EYj_info;
           R3 = Hp - 7;
           R2 = m58_r3yb2_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl73_r3ycp_info" {
     lvl73_r3ycp_info:
         const lvl73_r3ycp_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1096;
 },
 _c3EYj() //  [R1]
         { []
         }
     {offset
       c3EYj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EYt; else goto c3EYs;
       c3EYt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EYs: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EYj_info" {
     block_c3EYj_info:
         const _c3EYj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.685675006 UTC

[section ""data" . lvl74_r3ycq_closure" {
     lvl74_r3ycq_closure:
         const lvl74_r3ycq_info;
         const 0;
 },
 lvl116_s3ytm_entry() //  [R1]
         { []
         }
     {offset
       c3EYV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EYW; else goto c3EYX;
       c3EYW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EYX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x29_r3yb6_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ytm_info" {
     lvl116_s3ytm_info:
         const lvl116_s3ytm_entry;
         const 1;
         const 16;
 },
 sat_s3yto_entry() //  [R1]
         { []
         }
     {offset
       c3EZ3: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yto_info" {
     sat_s3yto_info:
         const sat_s3yto_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl74_r3ycq_entry() //  [R2]
         { []
         }
     {offset
       c3EZ9: // global
           _s3ytl::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EZa; else goto c3EZb;
       c3EZb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EZd; else goto c3EZc;
       c3EZd: // global
           HpAlloc = 40;
           goto c3EZa;
       c3EZa: // global
           R2 = _s3ytl::P64;
           R1 = lvl74_r3ycq_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EZc: // global
           I64[Hp - 32] = lvl116_s3ytm_info;
           P64[Hp - 16] = _s3ytl::P64;
           I64[Hp - 8] = sat_s3yto_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EZ6_info;
           R3 = Hp - 7;
           R2 = m60_r3yb5_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl74_r3ycq_info" {
     lvl74_r3ycq_info:
         const lvl74_r3ycq_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1112;
 },
 _c3EZ6() //  [R1]
         { []
         }
     {offset
       c3EZ6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EZg; else goto c3EZf;
       c3EZg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EZf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EZ6_info" {
     block_c3EZ6_info:
         const _c3EZ6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.696987956 UTC

[section ""data" . lvl75_r3ycr_closure" {
     lvl75_r3ycr_closure:
         const lvl75_r3ycr_info;
         const 0;
 },
 lvl116_s3yts_entry() //  [R1]
         { []
         }
     {offset
       c3EZI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EZJ; else goto c3EZK;
       c3EZJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EZK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x30_r3yb9_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yts_info" {
     lvl116_s3yts_info:
         const lvl116_s3yts_entry;
         const 1;
         const 16;
 },
 sat_s3ytu_entry() //  [R1]
         { []
         }
     {offset
       c3EZQ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ytu_info" {
     sat_s3ytu_info:
         const sat_s3ytu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl75_r3ycr_entry() //  [R2]
         { []
         }
     {offset
       c3EZW: // global
           _s3ytr::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EZX; else goto c3EZY;
       c3EZY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3F00; else goto c3EZZ;
       c3F00: // global
           HpAlloc = 40;
           goto c3EZX;
       c3EZX: // global
           R2 = _s3ytr::P64;
           R1 = lvl75_r3ycr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EZZ: // global
           I64[Hp - 32] = lvl116_s3yts_info;
           P64[Hp - 16] = _s3ytr::P64;
           I64[Hp - 8] = sat_s3ytu_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EZT_info;
           R3 = Hp - 7;
           R2 = m62_r3yb8_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl75_r3ycr_info" {
     lvl75_r3ycr_info:
         const lvl75_r3ycr_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1128;
 },
 _c3EZT() //  [R1]
         { []
         }
     {offset
       c3EZT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3F03; else goto c3F02;
       c3F03: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3F02: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3EZT_info" {
     block_c3EZT_info:
         const _c3EZT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.708612 UTC

[section ""data" . lvl76_r3ycs_closure" {
     lvl76_r3ycs_closure:
         const lvl76_r3ycs_info;
         const 0;
 },
 lvl116_s3yty_entry() //  [R1]
         { []
         }
     {offset
       c3F0v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F0w; else goto c3F0x;
       c3F0w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F0x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x31_r3ybc_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yty_info" {
     lvl116_s3yty_info:
         const lvl116_s3yty_entry;
         const 1;
         const 16;
 },
 sat_s3ytA_entry() //  [R1]
         { []
         }
     {offset
       c3F0D: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ytA_info" {
     sat_s3ytA_info:
         const sat_s3ytA_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl76_r3ycs_entry() //  [R2]
         { []
         }
     {offset
       c3F0J: // global
           _s3ytx::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3F0K; else goto c3F0L;
       c3F0L: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3F0N; else goto c3F0M;
       c3F0N: // global
           HpAlloc = 40;
           goto c3F0K;
       c3F0K: // global
           R2 = _s3ytx::P64;
           R1 = lvl76_r3ycs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F0M: // global
           I64[Hp - 32] = lvl116_s3yty_info;
           P64[Hp - 16] = _s3ytx::P64;
           I64[Hp - 8] = sat_s3ytA_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3F0G_info;
           R3 = Hp - 7;
           R2 = m64_r3ybb_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl76_r3ycs_info" {
     lvl76_r3ycs_info:
         const lvl76_r3ycs_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1144;
 },
 _c3F0G() //  [R1]
         { []
         }
     {offset
       c3F0G: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3F0Q; else goto c3F0P;
       c3F0Q: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3F0P: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3F0G_info" {
     block_c3F0G_info:
         const _c3F0G;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.719413585 UTC

[section ""data" . lvl77_r3yct_closure" {
     lvl77_r3yct_closure:
         const lvl77_r3yct_info;
         const 0;
 },
 lvl116_s3ytE_entry() //  [R1]
         { []
         }
     {offset
       c3F1i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F1j; else goto c3F1k;
       c3F1j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F1k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x32_r3ybf_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ytE_info" {
     lvl116_s3ytE_info:
         const lvl116_s3ytE_entry;
         const 1;
         const 16;
 },
 sat_s3ytG_entry() //  [R1]
         { []
         }
     {offset
       c3F1q: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ytG_info" {
     sat_s3ytG_info:
         const sat_s3ytG_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl77_r3yct_entry() //  [R2]
         { []
         }
     {offset
       c3F1w: // global
           _s3ytD::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3F1x; else goto c3F1y;
       c3F1y: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3F1A; else goto c3F1z;
       c3F1A: // global
           HpAlloc = 40;
           goto c3F1x;
       c3F1x: // global
           R2 = _s3ytD::P64;
           R1 = lvl77_r3yct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F1z: // global
           I64[Hp - 32] = lvl116_s3ytE_info;
           P64[Hp - 16] = _s3ytD::P64;
           I64[Hp - 8] = sat_s3ytG_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3F1t_info;
           R3 = Hp - 7;
           R2 = m66_r3ybe_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl77_r3yct_info" {
     lvl77_r3yct_info:
         const lvl77_r3yct_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1160;
 },
 _c3F1t() //  [R1]
         { []
         }
     {offset
       c3F1t: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3F1D; else goto c3F1C;
       c3F1D: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3F1C: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3F1t_info" {
     block_c3F1t_info:
         const _c3F1t;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.730698112 UTC

[section ""data" . lvl78_r3ycu_closure" {
     lvl78_r3ycu_closure:
         const lvl78_r3ycu_info;
         const 0;
 },
 lvl116_s3ytK_entry() //  [R1]
         { []
         }
     {offset
       c3F25: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F26; else goto c3F27;
       c3F26: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F27: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x33_r3ybi_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ytK_info" {
     lvl116_s3ytK_info:
         const lvl116_s3ytK_entry;
         const 1;
         const 16;
 },
 sat_s3ytM_entry() //  [R1]
         { []
         }
     {offset
       c3F2d: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ytM_info" {
     sat_s3ytM_info:
         const sat_s3ytM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl78_r3ycu_entry() //  [R2]
         { []
         }
     {offset
       c3F2j: // global
           _s3ytJ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3F2k; else goto c3F2l;
       c3F2l: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3F2n; else goto c3F2m;
       c3F2n: // global
           HpAlloc = 40;
           goto c3F2k;
       c3F2k: // global
           R2 = _s3ytJ::P64;
           R1 = lvl78_r3ycu_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F2m: // global
           I64[Hp - 32] = lvl116_s3ytK_info;
           P64[Hp - 16] = _s3ytJ::P64;
           I64[Hp - 8] = sat_s3ytM_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3F2g_info;
           R3 = Hp - 7;
           R2 = m68_r3ybh_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl78_r3ycu_info" {
     lvl78_r3ycu_info:
         const lvl78_r3ycu_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1176;
 },
 _c3F2g() //  [R1]
         { []
         }
     {offset
       c3F2g: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3F2q; else goto c3F2p;
       c3F2q: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3F2p: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3F2g_info" {
     block_c3F2g_info:
         const _c3F2g;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.739684679 UTC

[section ""data" . lvl79_r3ycv_closure" {
     lvl79_r3ycv_closure:
         const :_con_info;
         const lvl78_r3ycu_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.741866853 UTC

[section ""data" . lvl80_r3ycw_closure" {
     lvl80_r3ycw_closure:
         const :_con_info;
         const lvl77_r3yct_closure+1;
         const lvl79_r3ycv_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.743718499 UTC

[section ""data" . lvl81_r3ycx_closure" {
     lvl81_r3ycx_closure:
         const :_con_info;
         const lvl76_r3ycs_closure+1;
         const lvl80_r3ycw_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.745538035 UTC

[section ""data" . lvl82_r3ycy_closure" {
     lvl82_r3ycy_closure:
         const :_con_info;
         const lvl75_r3ycr_closure+1;
         const lvl81_r3ycx_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.747733757 UTC

[section ""data" . lvl83_r3ycz_closure" {
     lvl83_r3ycz_closure:
         const :_con_info;
         const lvl74_r3ycq_closure+1;
         const lvl82_r3ycy_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.749507201 UTC

[section ""data" . lvl84_r3ycA_closure" {
     lvl84_r3ycA_closure:
         const :_con_info;
         const lvl73_r3ycp_closure+1;
         const lvl83_r3ycz_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.751169631 UTC

[section ""data" . lvl85_r3ycB_closure" {
     lvl85_r3ycB_closure:
         const :_con_info;
         const lvl72_r3yco_closure+1;
         const lvl84_r3ycA_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.752887788 UTC

[section ""data" . lvl86_r3ycC_closure" {
     lvl86_r3ycC_closure:
         const :_con_info;
         const lvl71_r3ycn_closure+1;
         const lvl85_r3ycB_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.754658417 UTC

[section ""data" . lvl87_r3ycD_closure" {
     lvl87_r3ycD_closure:
         const :_con_info;
         const lvl70_r3ycm_closure+1;
         const lvl86_r3ycC_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.756776372 UTC

[section ""data" . lvl88_r3ycE_closure" {
     lvl88_r3ycE_closure:
         const :_con_info;
         const lvl69_r3ycl_closure+1;
         const lvl87_r3ycD_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.758506236 UTC

[section ""data" . lvl89_r3ycF_closure" {
     lvl89_r3ycF_closure:
         const :_con_info;
         const lvl68_r3yck_closure+1;
         const lvl88_r3ycE_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.760239852 UTC

[section ""data" . lvl90_r3ycG_closure" {
     lvl90_r3ycG_closure:
         const :_con_info;
         const lvl67_r3ycj_closure+1;
         const lvl89_r3ycF_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.762055588 UTC

[section ""data" . lvl91_r3ycH_closure" {
     lvl91_r3ycH_closure:
         const :_con_info;
         const lvl66_r3yci_closure+1;
         const lvl90_r3ycG_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.764334001 UTC

[section ""data" . lvl92_r3ycI_closure" {
     lvl92_r3ycI_closure:
         const :_con_info;
         const lvl65_r3ych_closure+1;
         const lvl91_r3ycH_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.766137974 UTC

[section ""data" . lvl93_r3ycJ_closure" {
     lvl93_r3ycJ_closure:
         const :_con_info;
         const lvl64_r3ycg_closure+1;
         const lvl92_r3ycI_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.767910444 UTC

[section ""data" . lvl94_r3ycK_closure" {
     lvl94_r3ycK_closure:
         const :_con_info;
         const lvl63_r3ycf_closure+1;
         const lvl93_r3ycJ_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.769732024 UTC

[section ""data" . lvl95_r3ycL_closure" {
     lvl95_r3ycL_closure:
         const :_con_info;
         const lvl62_r3yce_closure+1;
         const lvl94_r3ycK_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.771537904 UTC

[section ""data" . lvl96_r3ycM_closure" {
     lvl96_r3ycM_closure:
         const :_con_info;
         const lvl61_r3ycd_closure+1;
         const lvl95_r3ycL_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.773808802 UTC

[section ""data" . lvl97_r3ycN_closure" {
     lvl97_r3ycN_closure:
         const :_con_info;
         const lvl60_r3ycc_closure+1;
         const lvl96_r3ycM_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.775573256 UTC

[section ""data" . lvl98_r3ycO_closure" {
     lvl98_r3ycO_closure:
         const :_con_info;
         const lvl59_r3ycb_closure+1;
         const lvl97_r3ycN_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.777816206 UTC

[section ""data" . lvl99_r3ycP_closure" {
     lvl99_r3ycP_closure:
         const :_con_info;
         const lvl58_r3yca_closure+1;
         const lvl98_r3ycO_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.779643601 UTC

[section ""data" . lvl100_r3ycQ_closure" {
     lvl100_r3ycQ_closure:
         const :_con_info;
         const lvl57_r3yc9_closure+1;
         const lvl99_r3ycP_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.781974595 UTC

[section ""data" . lvl101_r3ycR_closure" {
     lvl101_r3ycR_closure:
         const :_con_info;
         const lvl56_r3yc8_closure+1;
         const lvl100_r3ycQ_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.783751043 UTC

[section ""data" . lvl102_r3ycS_closure" {
     lvl102_r3ycS_closure:
         const :_con_info;
         const lvl55_r3yc7_closure+1;
         const lvl101_r3ycR_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.785593372 UTC

[section ""data" . lvl103_r3ycT_closure" {
     lvl103_r3ycT_closure:
         const :_con_info;
         const lvl54_r3yc6_closure+1;
         const lvl102_r3ycS_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.7874191 UTC

[section ""data" . lvl104_r3ycU_closure" {
     lvl104_r3ycU_closure:
         const :_con_info;
         const lvl53_r3yc5_closure+1;
         const lvl103_r3ycT_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.789356353 UTC

[section ""data" . lvl105_r3ycV_closure" {
     lvl105_r3ycV_closure:
         const :_con_info;
         const lvl52_r3yc4_closure+1;
         const lvl104_r3ycU_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.791618621 UTC

[section ""data" . lvl106_r3ycW_closure" {
     lvl106_r3ycW_closure:
         const :_con_info;
         const lvl51_r3yc3_closure+1;
         const lvl105_r3ycV_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.794515959 UTC

[section ""data" . lvl107_r3ycX_closure" {
     lvl107_r3ycX_closure:
         const :_con_info;
         const lvl50_r3yc2_closure+1;
         const lvl106_r3ycW_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.79630642 UTC

[section ""data" . lvl108_r3ycY_closure" {
     lvl108_r3ycY_closure:
         const :_con_info;
         const lvl49_r3yc1_closure+1;
         const lvl107_r3ycX_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.798216362 UTC

[section ""data" . lvl109_r3ycZ_closure" {
     lvl109_r3ycZ_closure:
         const :_con_info;
         const lvl48_r3yc0_closure+1;
         const lvl108_r3ycY_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.800471985 UTC

[section ""data" . lvl110_r3yd0_closure" {
     lvl110_r3yd0_closure:
         const :_con_info;
         const lvl47_r3ybZ_closure+1;
         const lvl109_r3ycZ_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.802258822 UTC

[section ""data" . lvl111_r3yd1_closure" {
     lvl111_r3yd1_closure:
         const :_con_info;
         const lvl46_r3ybY_closure+1;
         const lvl110_r3yd0_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.806998922 UTC

[section ""data" . lvl112_r3yd2_closure" {
     lvl112_r3yd2_closure:
         const lvl112_r3yd2_info;
 },
 lvl116_s3ytQ_entry() //  [R1]
         { []
         }
     {offset
       c3F3p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F3q; else goto c3F3r;
       c3F3q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F3r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = a2_r3y9z_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ytQ_info" {
     lvl116_s3ytQ_info:
         const lvl116_s3ytQ_entry;
         const 1;
         const 16;
 },
 lvl117_s3ytR_entry() //  [R1]
         { []
         }
     {offset
       c3F3w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F3x; else goto c3F3y;
       c3F3x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F3y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = a1_r3y9y_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3ytR_info" {
     lvl117_s3ytR_info:
         const lvl117_s3ytR_entry;
         const 1;
         const 16;
 },
 sat_s3ytW_entry() //  [R1, R2]
         { []
         }
     {offset
       c3F3H: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3F3I; else goto c3F3J;
       c3F3I: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F3J: // global
           I64[Sp - 24] = block_c3F3E_info;
           _s3ytQ::P64 = P64[R1 + 7];
           _s3ytR::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ytQ::P64;
           P64[Sp - 8] = _s3ytR::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3F3Z; else goto c3F3F;
       u3F3Z: // global
           call _c3F3E(R1) args: 0, res: 0, upd: 0;
       c3F3F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ytW_info" {
     sat_s3ytW_info:
         const sat_s3ytW_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3F3E() //  [R1]
         { []
         }
     {offset
       c3F3E: // global
           _s3ytQ::P64 = P64[Sp + 8];
           _s3ytV::I64 = I64[R1 + 7];
           if (_s3ytV::I64 < 120) goto u3F3U; else goto u3F3Y;
       u3F3U: // global
           _s3ytR::P64 = P64[Sp + 16];
           if (_s3ytV::I64 < 89) goto u3F3V; else goto u3F3X;
       u3F3V: // global
           if (_s3ytV::I64 >= 88) goto c3F3T; else goto u3F3W;
       u3F3W: // global
           if (_s3ytV::I64 != 79) goto c3F3P; else goto c3F3S;
       u3F3X: // global
           if (_s3ytV::I64 != 111) goto c3F3P; else goto c3F3S;
       c3F3S: // global
           R1 = _s3ytR::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3F3Y: // global
           if (_s3ytV::I64 < 121) goto c3F3T; else goto c3F3P;
       c3F3T: // global
           R1 = _s3ytQ::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3F3P: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3F3E_info" {
     block_c3F3E_info:
         const _c3F3E;
         const 2;
         const 30;
 },
 lvl112_r3yd2_entry() //  [R2]
         { []
         }
     {offset
       c3F41: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3F45; else goto c3F44;
       c3F45: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = lvl112_r3yd2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F44: // global
           I64[Hp - 80] = lvl116_s3ytQ_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = lvl117_s3ytR_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s3ytW_info;
           P64[Hp - 24] = Hp - 80;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl112_r3yd2_info" {
     lvl112_r3yd2_info:
         const lvl112_r3yd2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.818616029 UTC

[section ""data" . lvl113_r3yd3_closure" {
     lvl113_r3yd3_closure:
         const lvl113_r3yd3_info;
 },
 lvl113_r3yd3_entry() //  [R2]
         { []
         }
     {offset
       c3F4D: // global
           _s3ytX::P64 = R2;
           R2 = lvl6_r3y9C_closure+1;
           R1 = _s3ytX::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl113_r3yd3_info" {
     lvl113_r3yd3_info:
         const lvl113_r3yd3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.853153441 UTC

[section ""data" . Text.Read.Lex.lexChar2_closure" {
     Text.Read.Lex.lexChar2_closure:
         const Text.Read.Lex.lexChar2_info;
         const 0;
 },
 lvl116_s3ytZ_entry() //  [R1]
         { []
         }
     {offset
       c3F4S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F4T; else goto c3F4U;
       c3F4T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F4U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl18_r3ybu_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ytZ_info" {
     lvl116_s3ytZ_info:
         const lvl116_s3ytZ_entry;
         const 1;
         const 16;
 },
 lvl117_s3yu0_entry() //  [R1]
         { []
         }
     {offset
       c3F4Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F50; else goto c3F51;
       c3F50: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F51: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl16_r3ybs_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3yu0_info" {
     lvl117_s3yu0_info:
         const lvl117_s3yu0_entry;
         const 1;
         const 16;
 },
 lvl118_s3yu1_entry() //  [R1]
         { []
         }
     {offset
       c3F56: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F57; else goto c3F58;
       c3F57: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F58: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl20_r3ybw_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl118_s3yu1_info" {
     lvl118_s3yu1_info:
         const lvl118_s3yu1_entry;
         const 1;
         const 16;
 },
 lvl119_s3yu2_entry() //  [R1]
         { []
         }
     {offset
       c3F5d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5e; else goto c3F5f;
       c3F5e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl17_r3ybt_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl119_s3yu2_info" {
     lvl119_s3yu2_info:
         const lvl119_s3yu2_entry;
         const 1;
         const 16;
 },
 lvl120_s3yu3_entry() //  [R1]
         { []
         }
     {offset
       c3F5k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5l; else goto c3F5m;
       c3F5l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl19_r3ybv_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl120_s3yu3_info" {
     lvl120_s3yu3_info:
         const lvl120_s3yu3_entry;
         const 1;
         const 16;
 },
 lvl121_s3yu4_entry() //  [R1]
         { []
         }
     {offset
       c3F5r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5s; else goto c3F5t;
       c3F5s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl15_r3ybr_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl121_s3yu4_info" {
     lvl121_s3yu4_info:
         const lvl121_s3yu4_entry;
         const 1;
         const 16;
 },
 lvl122_s3yu5_entry() //  [R1]
         { []
         }
     {offset
       c3F5y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5z; else goto c3F5A;
       c3F5z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl14_r3ybq_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl122_s3yu5_info" {
     lvl122_s3yu5_info:
         const lvl122_s3yu5_entry;
         const 1;
         const 16;
 },
 lvl123_s3yu6_entry() //  [R1]
         { []
         }
     {offset
       c3F5F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5G; else goto c3F5H;
       c3F5G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl13_r3ybp_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl123_s3yu6_info" {
     lvl123_s3yu6_info:
         const lvl123_s3yu6_entry;
         const 1;
         const 16;
 },
 lvl124_s3yu7_entry() //  [R1]
         { []
         }
     {offset
       c3F5M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5N; else goto c3F5O;
       c3F5N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl11_r3ybn_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl124_s3yu7_info" {
     lvl124_s3yu7_info:
         const lvl124_s3yu7_entry;
         const 1;
         const 16;
 },
 lvl125_s3yu8_entry() //  [R1]
         { []
         }
     {offset
       c3F5T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5U; else goto c3F5V;
       c3F5U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl9_r3ybl_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl125_s3yu8_info" {
     lvl125_s3yu8_info:
         const lvl125_s3yu8_entry;
         const 1;
         const 16;
 },
 lvl126_s3yug_entry() //  [R1]
         { []
         }
     {offset
       c3F6c: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3F6d; else goto c3F6e;
       c3F6d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F6e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3F69_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3F6i; else goto c3F6a;
       u3F6i: // global
           call _c3F69(R1) args: 0, res: 0, upd: 0;
       c3F6a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl126_s3yug_info" {
     lvl126_s3yug_info:
         const lvl126_s3yug_entry;
         const 1;
         const 16;
 },
 _c3F69() //  [R1]
         { []
         }
     {offset
       c3F69: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3F69_info" {
     block_c3F69_info:
         const _c3F69;
         const 0;
         const 30;
 },
 sat_s3yuq_entry() //  [R1]
         { []
         }
     {offset
       c3F6D: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3F6E; else goto c3F6F;
       c3F6E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F6F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3F6B_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yuq_info" {
     sat_s3yuq_info:
         const sat_s3yuq_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+1192;
 },
 _c3F6B() //  [R1]
         { []
         }
     {offset
       c3F6B: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3F6K; else goto c3F6J;
       c3F6K: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3F6J: // global
           if (R1 > 1114111) goto c3F6R; else goto c3F6Y;
       c3F6R: // global
           Hp = Hp - 16;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c3F6Y: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3F6B_info" {
     block_c3F6B_info:
         const _c3F6B;
         const 0;
         const 4294967326;
         const S3yFW_srt+1192;
 },
 section ""relreadonly" . u3FcU_srtd" {
     u3FcU_srtd:
         const S3yFW_srt+232;
         const 122;
         const 1;
         const 216172782113783808;
 },
 sat_s3yus_entry() //  [R1, R2]
         { []
         }
     {offset
       c3F6Z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3F70; else goto c3F71;
       c3F70: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F71: // global
           I64[Sp - 16] = block_c3F6o_info;
           R3 = R2;
           R2 = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yus_info" {
     sat_s3yus_info:
         const sat_s3yus_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const u3FcU_srtd;
 },
 _c3F6o() //  [R1]
         { []
         }
     {offset
       c3F6o: // global
           I64[Sp - 8] = block_c3F6s_info;
           R3 = lvl7_r3ybj_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3F6o_info" {
     block_c3F6o_info:
         const _c3F6o;
         const 1;
         const 12884901918;
         const S3yFW_srt+1192;
 },
 _c3F6s() //  [R1]
         { []
         }
     {offset
       c3F6s: // global
           if (R1 == 1) goto c3F78; else goto c3F76;
       c3F78: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3F7b; else goto c3F7a;
       c3F7b: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3F7a: // global
           I64[Hp - 40] = sat_s3yuq_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = Hp - 15;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3F76: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3F6s_info" {
     block_c3F6s_info:
         const _c3F6s;
         const 2;
         const 4294967326;
         const S3yFW_srt+1192;
 },
 section ""relreadonly" . u3FcV_srtd" {
     u3FcV_srtd:
         const S3yFW_srt+232;
         const 122;
         const 17592186044417;
         const 216172782113783808;
 },
 sat_s3yuv_entry() //  [R1, R2]
         { []
         }
     {offset
       c3F7f: // global
           _s3yuf::P64 = R2;
           _s3yuv::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3F7g; else goto c3F7h;
       c3F7h: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3F7j; else goto c3F7i;
       c3F7j: // global
           HpAlloc = 48;
           goto c3F7g;
       c3F7g: // global
           R2 = _s3yuf::P64;
           R1 = _s3yuv::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F7i: // global
           _s3ytY::P64 = P64[_s3yuv::P64 + 7];
           I64[Hp - 40] = lvl126_s3yug_info;
           P64[Hp - 24] = _s3yuf::P64;
           I64[Hp - 16] = sat_s3yus_info;
           P64[Hp - 8] = _s3ytY::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_c3F7c_info;
           R3 = Hp - 15;
           R2 = _s3yuf::P64;
           Sp = Sp - 8;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yuv_info" {
     sat_s3yuv_info:
         const sat_s3yuv_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3FcV_srtd;
 },
 _c3F7c() //  [R1]
         { []
         }
     {offset
       c3F7c: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3F7m; else goto c3F7l;
       c3F7m: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3F7l: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3F7c_info" {
     block_c3F7c_info:
         const _c3F7c;
         const 0;
         const 30;
 },
 lvl126_s3yuz_entry() //  [R1]
         { []
         }
     {offset
       c3F7x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F7y; else goto c3F7z;
       c3F7y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F7z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl45_r3ybV_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl126_s3yuz_info" {
     lvl126_s3yuz_info:
         const lvl126_s3yuz_entry;
         const 1;
         const 16;
 },
 lvl127_s3yuA_entry() //  [R1]
         { []
         }
     {offset
       c3F7E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F7F; else goto c3F7G;
       c3F7F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F7G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl44_r3ybU_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl127_s3yuA_info" {
     lvl127_s3yuA_info:
         const lvl127_s3yuA_entry;
         const 1;
         const 16;
 },
 lvl128_s3yuB_entry() //  [R1]
         { []
         }
     {offset
       c3F7L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F7M; else goto c3F7N;
       c3F7M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F7N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl43_r3ybT_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl128_s3yuB_info" {
     lvl128_s3yuB_info:
         const lvl128_s3yuB_entry;
         const 1;
         const 16;
 },
 lvl129_s3yuC_entry() //  [R1]
         { []
         }
     {offset
       c3F7S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F7T; else goto c3F7U;
       c3F7T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F7U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl42_r3ybS_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl129_s3yuC_info" {
     lvl129_s3yuC_info:
         const lvl129_s3yuC_entry;
         const 1;
         const 16;
 },
 lvl130_s3yuD_entry() //  [R1]
         { []
         }
     {offset
       c3F7Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F80; else goto c3F81;
       c3F80: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F81: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl41_r3ybR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl130_s3yuD_info" {
     lvl130_s3yuD_info:
         const lvl130_s3yuD_entry;
         const 1;
         const 16;
 },
 lvl131_s3yuE_entry() //  [R1]
         { []
         }
     {offset
       c3F86: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F87; else goto c3F88;
       c3F87: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F88: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl40_r3ybQ_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl131_s3yuE_info" {
     lvl131_s3yuE_info:
         const lvl131_s3yuE_entry;
         const 1;
         const 16;
 },
 lvl132_s3yuF_entry() //  [R1]
         { []
         }
     {offset
       c3F8d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8e; else goto c3F8f;
       c3F8e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl39_r3ybP_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl132_s3yuF_info" {
     lvl132_s3yuF_info:
         const lvl132_s3yuF_entry;
         const 1;
         const 16;
 },
 lvl133_s3yuG_entry() //  [R1]
         { []
         }
     {offset
       c3F8k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8l; else goto c3F8m;
       c3F8l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl38_r3ybO_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl133_s3yuG_info" {
     lvl133_s3yuG_info:
         const lvl133_s3yuG_entry;
         const 1;
         const 16;
 },
 lvl134_s3yuH_entry() //  [R1]
         { []
         }
     {offset
       c3F8r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8s; else goto c3F8t;
       c3F8s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl37_r3ybN_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl134_s3yuH_info" {
     lvl134_s3yuH_info:
         const lvl134_s3yuH_entry;
         const 1;
         const 16;
 },
 lvl135_s3yuI_entry() //  [R1]
         { []
         }
     {offset
       c3F8y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8z; else goto c3F8A;
       c3F8z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl36_r3ybM_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl135_s3yuI_info" {
     lvl135_s3yuI_info:
         const lvl135_s3yuI_entry;
         const 1;
         const 16;
 },
 lvl136_s3yuJ_entry() //  [R1]
         { []
         }
     {offset
       c3F8F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8G; else goto c3F8H;
       c3F8G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl35_r3ybL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl136_s3yuJ_info" {
     lvl136_s3yuJ_info:
         const lvl136_s3yuJ_entry;
         const 1;
         const 16;
 },
 lvl137_s3yuK_entry() //  [R1]
         { []
         }
     {offset
       c3F8M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8N; else goto c3F8O;
       c3F8N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl34_r3ybK_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl137_s3yuK_info" {
     lvl137_s3yuK_info:
         const lvl137_s3yuK_entry;
         const 1;
         const 16;
 },
 lvl138_s3yuL_entry() //  [R1]
         { []
         }
     {offset
       c3F8T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8U; else goto c3F8V;
       c3F8U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl33_r3ybJ_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl138_s3yuL_info" {
     lvl138_s3yuL_info:
         const lvl138_s3yuL_entry;
         const 1;
         const 16;
 },
 lvl139_s3yuM_entry() //  [R1]
         { []
         }
     {offset
       c3F90: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F91; else goto c3F92;
       c3F91: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F92: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl32_r3ybI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl139_s3yuM_info" {
     lvl139_s3yuM_info:
         const lvl139_s3yuM_entry;
         const 1;
         const 16;
 },
 lvl140_s3yuN_entry() //  [R1]
         { []
         }
     {offset
       c3F97: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F98; else goto c3F99;
       c3F98: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F99: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl31_r3ybH_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl140_s3yuN_info" {
     lvl140_s3yuN_info:
         const lvl140_s3yuN_entry;
         const 1;
         const 16;
 },
 lvl141_s3yuO_entry() //  [R1]
         { []
         }
     {offset
       c3F9e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9f; else goto c3F9g;
       c3F9f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl30_r3ybG_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl141_s3yuO_info" {
     lvl141_s3yuO_info:
         const lvl141_s3yuO_entry;
         const 1;
         const 16;
 },
 lvl142_s3yuP_entry() //  [R1]
         { []
         }
     {offset
       c3F9l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9m; else goto c3F9n;
       c3F9m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl29_r3ybF_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl142_s3yuP_info" {
     lvl142_s3yuP_info:
         const lvl142_s3yuP_entry;
         const 1;
         const 16;
 },
 lvl143_s3yuQ_entry() //  [R1]
         { []
         }
     {offset
       c3F9s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9t; else goto c3F9u;
       c3F9t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl28_r3ybE_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl143_s3yuQ_info" {
     lvl143_s3yuQ_info:
         const lvl143_s3yuQ_entry;
         const 1;
         const 16;
 },
 lvl144_s3yuR_entry() //  [R1]
         { []
         }
     {offset
       c3F9z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9A; else goto c3F9B;
       c3F9A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl27_r3ybD_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl144_s3yuR_info" {
     lvl144_s3yuR_info:
         const lvl144_s3yuR_entry;
         const 1;
         const 16;
 },
 lvl145_s3yuS_entry() //  [R1]
         { []
         }
     {offset
       c3F9G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9H; else goto c3F9I;
       c3F9H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl26_r3ybC_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl145_s3yuS_info" {
     lvl145_s3yuS_info:
         const lvl145_s3yuS_entry;
         const 1;
         const 16;
 },
 lvl146_s3yuT_entry() //  [R1]
         { []
         }
     {offset
       c3F9N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9O; else goto c3F9P;
       c3F9O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl25_r3ybB_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl146_s3yuT_info" {
     lvl146_s3yuT_info:
         const lvl146_s3yuT_entry;
         const 1;
         const 16;
 },
 lvl147_s3yuU_entry() //  [R1]
         { []
         }
     {offset
       c3F9U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9V; else goto c3F9W;
       c3F9V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl24_r3ybA_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl147_s3yuU_info" {
     lvl147_s3yuU_info:
         const lvl147_s3yuU_entry;
         const 1;
         const 16;
 },
 lvl148_s3yuV_entry() //  [R1]
         { []
         }
     {offset
       c3Fa1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fa2; else goto c3Fa3;
       c3Fa2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fa3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl23_r3ybz_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl148_s3yuV_info" {
     lvl148_s3yuV_info:
         const lvl148_s3yuV_entry;
         const 1;
         const 16;
 },
 lvl149_s3yuW_entry() //  [R1]
         { []
         }
     {offset
       c3Fa8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fa9; else goto c3Faa;
       c3Fa9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Faa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl22_r3yby_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl149_s3yuW_info" {
     lvl149_s3yuW_info:
         const lvl149_s3yuW_entry;
         const 1;
         const 16;
 },
 lvl150_s3yuX_entry() //  [R1]
         { []
         }
     {offset
       c3Faf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fag; else goto c3Fah;
       c3Fag: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fah: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl21_r3ybx_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl150_s3yuX_info" {
     lvl150_s3yuX_info:
         const lvl150_s3yuX_entry;
         const 1;
         const 16;
 },
 $wlvl1_s3yuY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FaW: // global
           if (R2 >= 96) goto c3Fap; else goto u3FaZ;
       u3FaZ: // global
           if (R2 < 64) goto c3Fap; else goto u3Fb0;
       c3Fap: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Fb0: // global
           switch [64 .. 95] R2 {
               case 64 : goto c3Faq;
               case 65 : goto c3Far;
               case 66 : goto c3Fas;
               case 67 : goto c3Fat;
               case 68 : goto c3Fau;
               case 69 : goto c3Fav;
               case 70 : goto c3Faw;
               case 71 : goto c3Fax;
               case 72 : goto c3Fay;
               case 73 : goto c3Faz;
               case 74 : goto c3FaA;
               case 75 : goto c3FaB;
               case 76 : goto c3FaC;
               case 77 : goto c3FaD;
               case 78 : goto c3FaE;
               case 79 : goto c3FaF;
               case 80 : goto c3FaG;
               case 81 : goto c3FaH;
               case 82 : goto c3FaI;
               case 83 : goto c3FaJ;
               case 84 : goto c3FaK;
               case 85 : goto c3FaL;
               case 86 : goto c3FaM;
               case 87 : goto c3FaN;
               case 88 : goto c3FaO;
               case 89 : goto c3FaP;
               case 90 : goto c3FaQ;
               case 91 : goto c3FaR;
               case 92 : goto c3FaS;
               case 93 : goto c3FaT;
               case 94 : goto c3FaU;
               case 95 : goto c3FaV;
           }
       c3FaV: // global
           R1 = P64[R1 + 63] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaU: // global
           R1 = P64[R1 + 71] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaT: // global
           R1 = P64[R1 + 79] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaS: // global
           R1 = P64[R1 + 87] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaR: // global
           R1 = P64[R1 + 95] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaQ: // global
           R1 = P64[R1 + 103] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaP: // global
           R1 = P64[R1 + 111] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaO: // global
           R1 = P64[R1 + 119] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaN: // global
           R1 = P64[R1 + 127] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaM: // global
           R1 = P64[R1 + 135] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaL: // global
           R1 = P64[R1 + 143] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaK: // global
           R1 = P64[R1 + 151] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaJ: // global
           R1 = P64[R1 + 159] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaI: // global
           R1 = P64[R1 + 167] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaH: // global
           R1 = P64[R1 + 175] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaG: // global
           R1 = P64[R1 + 183] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaF: // global
           R1 = P64[R1 + 191] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaE: // global
           R1 = P64[R1 + 199] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaD: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaC: // global
           R1 = P64[R1 + 15] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaB: // global
           R1 = P64[R1 + 23] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaA: // global
           R1 = P64[R1 + 31] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Faz: // global
           R1 = P64[R1 + 39] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fay: // global
           R1 = P64[R1 + 47] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fax: // global
           R1 = P64[R1 + 55] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Faw: // global
           R1 = P64[R1 + 207] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fav: // global
           R1 = P64[R1 + 215] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fau: // global
           R1 = P64[R1 + 223] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fat: // global
           R1 = P64[R1 + 231] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fas: // global
           R1 = P64[R1 + 239] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Far: // global
           R1 = P64[R1 + 247] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Faq: // global
           R1 = P64[R1 + 255] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl1_s3yuY_info" {
     $wlvl1_s3yuY_info:
         const $wlvl1_s3yuY_entry;
         const 32;
         const 8;
         const 4294967300;
 },
 lvl151_s3yv1_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Fb9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fba; else goto c3Fbb;
       c3Fba: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fbb: // global
           I64[Sp - 16] = block_c3Fb6_info;
           _s3yuY::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yuY::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Fbf; else goto c3Fb7;
       u3Fbf: // global
           call _c3Fb6(R1) args: 0, res: 0, upd: 0;
       c3Fb7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl151_s3yv1_info" {
     lvl151_s3yv1_info:
         const lvl151_s3yv1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Fb6() //  [R1]
         { []
         }
     {offset
       c3Fb6: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wlvl1_s3yuY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Fb6_info" {
     block_c3Fb6_info:
         const _c3Fb6;
         const 1;
         const 30;
 },
 sat_s3yve_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Fbr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Fbv; else goto c3Fbu;
       c3Fbv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fbu: // global
           _s3ytY::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = Hp - 15;
           R1 = _s3ytY::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yve_info" {
     sat_s3yve_info:
         const sat_s3yve_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3yvf_entry() //  [R1]
         { []
         }
     {offset
       c3Fbw: // global
           _s3yvf::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Fbx; else goto c3Fby;
       c3Fby: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FbA; else goto c3Fbz;
       c3FbA: // global
           HpAlloc = 16;
           goto c3Fbx;
       c3Fbx: // global
           R1 = _s3yvf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fbz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvf::P64;
           _s3ytY::P64 = P64[_s3yvf::P64 + 16];
           I64[Hp - 8] = sat_s3yve_info;
           P64[Hp] = _s3ytY::P64;
           R2 = lvl111_r3yd1_closure+2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.choice_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yvf_info" {
     sat_s3yvf_info:
         const sat_s3yvf_entry;
         const 1;
         const 12884901904;
         const S3yFW_srt+1208;
 },
 sat_s3yva_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FbJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FbK; else goto c3FbL;
       c3FbK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FbL: // global
           I64[Sp - 16] = block_c3FbG_info;
           _s3yv5::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yv5::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FbT; else goto c3FbH;
       u3FbT: // global
           call _c3FbG(R1) args: 0, res: 0, upd: 0;
       c3FbH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yva_info" {
     sat_s3yva_info:
         const sat_s3yva_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FbG() //  [R1]
         { []
         }
     {offset
       c3FbG: // global
           if (I64[R1 + 7] == 94) goto c3FbS; else goto c3FbR;
       c3FbS: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FbR: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FbG_info" {
     block_c3FbG_info:
         const _c3FbG;
         const 1;
         const 30;
 },
 sat_s3yvg_entry() //  [R1]
         { []
         }
     {offset
       c3FbV: // global
           _s3yvg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FbW; else goto c3FbX;
       c3FbX: // global
           Hp = Hp + 952;
           if (Hp > HpLim) (likely: False) goto c3FbZ; else goto c3FbY;
       c3FbZ: // global
           HpAlloc = 952;
           goto c3FbW;
       c3FbW: // global
           R1 = _s3yvg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FbY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvg::P64;
           _s3ytY::P64 = P64[_s3yvg::P64 + 16];
           _s3ytZ::P64 = P64[_s3yvg::P64 + 24];
           _s3yu0::P64 = P64[_s3yvg::P64 + 32];
           _s3yu1::P64 = P64[_s3yvg::P64 + 40];
           _s3yu2::P64 = P64[_s3yvg::P64 + 48];
           _s3yu3::P64 = P64[_s3yvg::P64 + 56];
           _s3yu4::P64 = P64[_s3yvg::P64 + 64];
           _s3yu5::P64 = P64[_s3yvg::P64 + 72];
           I64[Hp - 944] = lvl126_s3yuz_info;
           P64[Hp - 928] = _s3ytY::P64;
           I64[Hp - 920] = lvl127_s3yuA_info;
           P64[Hp - 904] = _s3ytY::P64;
           I64[Hp - 896] = lvl128_s3yuB_info;
           P64[Hp - 880] = _s3ytY::P64;
           I64[Hp - 872] = lvl129_s3yuC_info;
           P64[Hp - 856] = _s3ytY::P64;
           I64[Hp - 848] = lvl130_s3yuD_info;
           P64[Hp - 832] = _s3ytY::P64;
           I64[Hp - 824] = lvl131_s3yuE_info;
           P64[Hp - 808] = _s3ytY::P64;
           I64[Hp - 800] = lvl132_s3yuF_info;
           P64[Hp - 784] = _s3ytY::P64;
           I64[Hp - 776] = lvl133_s3yuG_info;
           P64[Hp - 760] = _s3ytY::P64;
           I64[Hp - 752] = lvl134_s3yuH_info;
           P64[Hp - 736] = _s3ytY::P64;
           I64[Hp - 728] = lvl135_s3yuI_info;
           P64[Hp - 712] = _s3ytY::P64;
           I64[Hp - 704] = lvl136_s3yuJ_info;
           P64[Hp - 688] = _s3ytY::P64;
           I64[Hp - 680] = lvl137_s3yuK_info;
           P64[Hp - 664] = _s3ytY::P64;
           I64[Hp - 656] = lvl138_s3yuL_info;
           P64[Hp - 640] = _s3ytY::P64;
           I64[Hp - 632] = lvl139_s3yuM_info;
           P64[Hp - 616] = _s3ytY::P64;
           I64[Hp - 608] = lvl140_s3yuN_info;
           P64[Hp - 592] = _s3ytY::P64;
           I64[Hp - 584] = lvl141_s3yuO_info;
           P64[Hp - 568] = _s3ytY::P64;
           I64[Hp - 560] = lvl142_s3yuP_info;
           P64[Hp - 544] = _s3ytY::P64;
           I64[Hp - 536] = lvl143_s3yuQ_info;
           P64[Hp - 520] = _s3ytY::P64;
           I64[Hp - 512] = lvl144_s3yuR_info;
           P64[Hp - 496] = _s3ytY::P64;
           I64[Hp - 488] = lvl145_s3yuS_info;
           P64[Hp - 472] = _s3ytY::P64;
           I64[Hp - 464] = lvl146_s3yuT_info;
           P64[Hp - 448] = _s3ytY::P64;
           I64[Hp - 440] = lvl147_s3yuU_info;
           P64[Hp - 424] = _s3ytY::P64;
           I64[Hp - 416] = lvl148_s3yuV_info;
           P64[Hp - 400] = _s3ytY::P64;
           I64[Hp - 392] = lvl149_s3yuW_info;
           P64[Hp - 376] = _s3ytY::P64;
           I64[Hp - 368] = lvl150_s3yuX_info;
           P64[Hp - 352] = _s3ytY::P64;
           I64[Hp - 344] = $wlvl1_s3yuY_info;
           P64[Hp - 336] = _s3ytZ::P64;
           P64[Hp - 328] = _s3yu0::P64;
           P64[Hp - 320] = _s3yu1::P64;
           P64[Hp - 312] = _s3yu2::P64;
           P64[Hp - 304] = _s3yu3::P64;
           P64[Hp - 296] = _s3yu4::P64;
           P64[Hp - 288] = _s3yu5::P64;
           P64[Hp - 280] = Hp - 944;
           P64[Hp - 272] = Hp - 920;
           P64[Hp - 264] = Hp - 896;
           P64[Hp - 256] = Hp - 872;
           P64[Hp - 248] = Hp - 848;
           P64[Hp - 240] = Hp - 824;
           P64[Hp - 232] = Hp - 800;
           P64[Hp - 224] = Hp - 776;
           P64[Hp - 216] = Hp - 752;
           P64[Hp - 208] = Hp - 728;
           P64[Hp - 200] = Hp - 704;
           P64[Hp - 192] = Hp - 680;
           P64[Hp - 184] = Hp - 656;
           P64[Hp - 176] = Hp - 632;
           P64[Hp - 168] = Hp - 608;
           P64[Hp - 160] = Hp - 584;
           P64[Hp - 152] = Hp - 560;
           P64[Hp - 144] = Hp - 536;
           P64[Hp - 136] = Hp - 512;
           P64[Hp - 128] = Hp - 488;
           P64[Hp - 120] = Hp - 464;
           P64[Hp - 112] = Hp - 440;
           P64[Hp - 104] = Hp - 416;
           P64[Hp - 96] = Hp - 392;
           P64[Hp - 88] = Hp - 368;
           I64[Hp - 80] = lvl151_s3yv1_info;
           P64[Hp - 72] = Hp - 343;
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 56] = Hp - 79;
           I64[Hp - 48] = sat_s3yvf_info;
           P64[Hp - 32] = _s3ytY::P64;
           I64[Hp - 24] = sat_s3yva_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yvg_info" {
     sat_s3yvg_info:
         const sat_s3yvg_entry;
         const 8;
         const 30064771087;
         const S3yFW_srt+1208;
 },
 section ""relreadonly" . u3FcW_srtd" {
     u3FcW_srtd:
         const S3yFW_srt+232;
         const 125;
         const 18031990695526401;
         const 2233785415175766016;
 },
 sat_s3yvh_entry() //  [R1]
         { []
         }
     {offset
       c3Fc1: // global
           _s3yvh::P64 = R1;
           if ((Sp + -88) < SpLim) (likely: False) goto c3Fc2; else goto c3Fc3;
       c3Fc3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fc5; else goto c3Fc4;
       c3Fc5: // global
           HpAlloc = 16;
           goto c3Fc2;
       c3Fc2: // global
           R1 = _s3yvh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fc4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvh::P64;
           _s3ytY::P64 = P64[_s3yvh::P64 + 16];
           _s3ytZ::P64 = P64[_s3yvh::P64 + 24];
           _s3yu0::P64 = P64[_s3yvh::P64 + 32];
           _s3yu1::P64 = P64[_s3yvh::P64 + 40];
           _s3yu2::P64 = P64[_s3yvh::P64 + 48];
           _s3yu3::P64 = P64[_s3yvh::P64 + 56];
           _s3yu4::P64 = P64[_s3yvh::P64 + 64];
           _s3yu5::P64 = P64[_s3yvh::P64 + 72];
           I64[Hp - 8] = sat_s3yuv_info;
           P64[Hp] = _s3ytY::P64;
           I64[Sp - 88] = block_c3F7n_info;
           R4 = Hp - 7;
           R3 = lvl113_r3yd3_closure+1;
           R2 = lvl112_r3yd2_closure+1;
           P64[Sp - 80] = _s3ytY::P64;
           P64[Sp - 72] = _s3ytZ::P64;
           P64[Sp - 64] = _s3yu0::P64;
           P64[Sp - 56] = _s3yu1::P64;
           P64[Sp - 48] = _s3yu2::P64;
           P64[Sp - 40] = _s3yu3::P64;
           P64[Sp - 32] = _s3yu4::P64;
           P64[Sp - 24] = _s3yu5::P64;
           Sp = Sp - 88;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yvh_info" {
     sat_s3yvh_info:
         const sat_s3yvh_entry;
         const 8;
         const 18446744069414584335;
         const u3FcW_srtd;
 },
 _c3F7n() //  [R1]
         { []
         }
     {offset
       c3F7n: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Fc8; else goto c3Fc7;
       c3Fc8: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Fc7: // global
           I64[Hp - 88] = sat_s3yvg_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 88;
           R2 = Hp - 6;
           Sp = Sp + 72;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3F7n_info" {
     block_c3F7n_info:
         const _c3F7n;
         const 8;
         const 30064771102;
         const S3yFW_srt+1208;
 },
 sat_s3yud_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Fch: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3Fci; else goto c3Fcj;
       c3Fci: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fcj: // global
           I64[Sp - 88] = block_c3Fce_info;
           _s3ytZ::P64 = P64[R1 + 7];
           _s3yu0::P64 = P64[R1 + 15];
           _s3yu1::P64 = P64[R1 + 23];
           _s3yu2::P64 = P64[R1 + 31];
           _s3yu3::P64 = P64[R1 + 39];
           _s3yu4::P64 = P64[R1 + 47];
           _s3yu5::P64 = P64[R1 + 55];
           _s3yu6::P64 = P64[R1 + 63];
           _s3yu7::P64 = P64[R1 + 71];
           _s3yu8::P64 = P64[R1 + 79];
           R1 = R2;
           P64[Sp - 80] = _s3ytZ::P64;
           P64[Sp - 72] = _s3yu0::P64;
           P64[Sp - 64] = _s3yu1::P64;
           P64[Sp - 56] = _s3yu2::P64;
           P64[Sp - 48] = _s3yu3::P64;
           P64[Sp - 40] = _s3yu4::P64;
           P64[Sp - 32] = _s3yu5::P64;
           P64[Sp - 24] = _s3yu6::P64;
           P64[Sp - 16] = _s3yu7::P64;
           P64[Sp - 8] = _s3yu8::P64;
           Sp = Sp - 88;
           if (R1 & 7 != 0) goto u3FcN; else goto c3Fcf;
       u3FcN: // global
           call _c3Fce(R1) args: 0, res: 0, upd: 0;
       c3Fcf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yud_info" {
     sat_s3yud_info:
         const sat_s3yud_entry;
         const 10;
         const 8;
         const 4294967301;
 },
 _c3Fce() //  [R1]
         { []
         }
     {offset
       c3Fce: // global
           _s3yuc::I64 = I64[R1 + 7];
           if (_s3yuc::I64 < 99) goto u3FcA; else goto u3FcG;
       u3FcA: // global
           if (_s3yuc::I64 < 97) goto u3FcB; else goto u3FcF;
       u3FcB: // global
           if (_s3yuc::I64 < 40) goto u3FcC; else goto u3FcE;
       u3FcC: // global
           if (_s3yuc::I64 < 39) goto u3FcD; else goto c3Fcr;
       u3FcD: // global
           if (_s3yuc::I64 != 34) goto c3Fcp; else goto c3Fcq;
       c3Fcq: // global
           R1 = P64[Sp + 80] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fcr: // global
           R1 = P64[Sp + 72] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FcE: // global
           if (_s3yuc::I64 != 92) goto c3Fcp; else goto c3Fcs;
       c3Fcs: // global
           R1 = P64[Sp + 64] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FcF: // global
           if (_s3yuc::I64 < 98) goto c3Fct; else goto c3Fcu;
       c3Fct: // global
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fcu: // global
           R1 = P64[Sp + 48] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FcG: // global
           if (_s3yuc::I64 < 116) goto u3FcH; else goto u3FcL;
       u3FcH: // global
           if (_s3yuc::I64 < 111) goto u3FcI; else goto u3FcK;
       u3FcI: // global
           if (_s3yuc::I64 < 110) goto u3FcJ; else goto c3Fcw;
       u3FcJ: // global
           if (_s3yuc::I64 != 102) goto c3Fcp; else goto c3Fcv;
       c3Fcv: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fcw: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FcK: // global
           if (_s3yuc::I64 != 114) goto c3Fcp; else goto c3Fcx;
       c3Fcx: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FcL: // global
           if (_s3yuc::I64 < 117) goto c3Fcy; else goto u3FcM;
       c3Fcy: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FcM: // global
           if (_s3yuc::I64 != 118) goto c3Fcp; else goto c3Fcz;
       c3Fcp: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Fcz: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Fce_info" {
     block_c3Fce_info:
         const _c3Fce;
         const 10;
         const 30;
 },
 section ""relreadonly" . u3FcX_srtd" {
     u3FcX_srtd:
         const S3yFW_srt+232;
         const 126;
         const 18031990695526401;
         const 4539628424389459968;
 },
 Text.Read.Lex.lexChar2_entry() //  [R2]
         { []
         }
     {offset
       c3FcP: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto c3FcT; else goto c3FcS;
       c3FcT: // global
           HpAlloc = 424;
           R2 = R2;
           R1 = Text.Read.Lex.lexChar2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FcS: // global
           I64[Hp - 416] = lvl116_s3ytZ_info;
           P64[Hp - 400] = R2;
           I64[Hp - 392] = lvl117_s3yu0_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = lvl118_s3yu1_info;
           P64[Hp - 352] = R2;
           I64[Hp - 344] = lvl119_s3yu2_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = lvl120_s3yu3_info;
           P64[Hp - 304] = R2;
           I64[Hp - 296] = lvl121_s3yu4_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = lvl122_s3yu5_info;
           P64[Hp - 256] = R2;
           I64[Hp - 248] = lvl123_s3yu6_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = lvl124_s3yu7_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = lvl125_s3yu8_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s3yvh_info;
           P64[Hp - 160] = R2;
           _c3F4O::P64 = Hp - 416;
           P64[Hp - 152] = _c3F4O::P64;
           _c3F4V::P64 = Hp - 392;
           P64[Hp - 144] = _c3F4V::P64;
           _c3F52::P64 = Hp - 368;
           P64[Hp - 136] = _c3F52::P64;
           _c3F59::P64 = Hp - 344;
           P64[Hp - 128] = _c3F59::P64;
           _c3F5g::P64 = Hp - 320;
           P64[Hp - 120] = _c3F5g::P64;
           _c3F5n::P64 = Hp - 296;
           P64[Hp - 112] = _c3F5n::P64;
           _c3F5u::P64 = Hp - 272;
           P64[Hp - 104] = _c3F5u::P64;
           I64[Hp - 96] = sat_s3yud_info;
           P64[Hp - 88] = _c3F4O::P64;
           P64[Hp - 80] = _c3F4V::P64;
           P64[Hp - 72] = _c3F52::P64;
           P64[Hp - 64] = _c3F59::P64;
           P64[Hp - 56] = _c3F5g::P64;
           P64[Hp - 48] = _c3F5n::P64;
           P64[Hp - 40] = _c3F5u::P64;
           P64[Hp - 32] = Hp - 248;
           P64[Hp - 24] = Hp - 224;
           P64[Hp - 16] = Hp - 200;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 95;
           R3 = Hp - 176;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lexChar2_info" {
     Text.Read.Lex.lexChar2_info:
         const Text.Read.Lex.lexChar2_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3FcX_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.966403775 UTC

[section ""cstring" . Text.Read.Lex.lexChar4_bytes" {
     Text.Read.Lex.lexChar4_bytes:
         I8[] [92,38]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.968780044 UTC

[section ""data" . Text.Read.Lex.lexChar3_closure" {
     Text.Read.Lex.lexChar3_closure:
         const Text.Read.Lex.lexChar3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.lexChar3_entry() //  [R1]
         { []
         }
     {offset
       c3FiX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FiY; else goto c3FiZ;
       c3FiY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FiZ: // global
           (_c3FiU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3FiU::I64 == 0) goto c3FiW; else goto c3FiV;
       c3FiW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3FiV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3FiU::I64;
           R2 = Text.Read.Lex.lexChar4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lexChar3_info" {
     Text.Read.Lex.lexChar3_info:
         const Text.Read.Lex.lexChar3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:13.978319371 UTC

[section ""data" . Text.Read.Lex.$wlvl_closure" {
     Text.Read.Lex.$wlvl_closure:
         const Text.Read.Lex.$wlvl_info;
         const 0;
 },
 lvl116_s3yvj_entry() //  [R1]
         { []
         }
     {offset
       c3Fji: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Fjj; else goto c3Fjk;
       c3Fjj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fjk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Fjf_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wconsumeEmpties_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yvj_info" {
     lvl116_s3yvj_info:
         const lvl116_s3yvj_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+1240;
 },
 _c3Fjf() //  [R1]
         { []
         }
     {offset
       c3Fjf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fjn; else goto c3Fjm;
       c3Fjn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Fjm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Fjf_info" {
     block_c3Fjf_info:
         const _c3Fjf;
         const 0;
         const 30;
 },
 sat_s3yvn_entry() //  [R1]
         { []
         }
     {offset
       c3Fjt: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yvn_info" {
     sat_s3yvn_info:
         const sat_s3yvn_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.Read.Lex.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c3Fjw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3FjA; else goto c3Fjz;
       c3FjA: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Text.Read.Lex.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fjz: // global
           I64[Hp - 32] = lvl116_s3yvj_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3yvn_info;
           P64[Hp] = Hp - 32;
           R3 = Hp - 7;
           R2 = Text.Read.Lex.lexChar3_closure;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wlvl_info" {
     Text.Read.Lex.$wlvl_info:
         const Text.Read.Lex.$wlvl_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S3yFW_srt+1240;
 },
 section ""data" . Text.Read.Lex.$wconsumeEmpties_closure" {
     Text.Read.Lex.$wconsumeEmpties_closure:
         const Text.Read.Lex.$wconsumeEmpties_info;
         const 0;
 },
 lvl116_s3yvp_entry() //  [R1]
         { []
         }
     {offset
       c3FjM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3FjN; else goto c3FjO;
       c3FjN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FjO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3FjJ_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yvp_info" {
     lvl116_s3yvp_info:
         const lvl116_s3yvp_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+1248;
 },
 _c3FjJ() //  [R1]
         { []
         }
     {offset
       c3FjJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FjR; else goto c3FjQ;
       c3FjR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3FjQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3FjJ_info" {
     block_c3FjJ_info:
         const _c3FjJ;
         const 0;
         const 30;
 },
 lvl117_s3yvs_entry() //  [R1]
         { []
         }
     {offset
       c3FjW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FjX; else goto c3FjY;
       c3FjX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FjY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3yvs_info" {
     lvl117_s3yvs_info:
         const lvl117_s3yvs_entry;
         const 1;
         const 16;
 },
 sat_s3yvG_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Fkb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Fkc; else goto c3Fkd;
       c3Fkc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fkd: // global
           I64[Sp - 24] = block_c3Fk4_info;
           _s3yvp::P64 = P64[R1 + 7];
           _s3yvs::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yvp::P64;
           P64[Sp - 8] = _s3yvs::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3FkZ; else goto c3Fk5;
       u3FkZ: // global
           call _c3Fk4(R1) args: 0, res: 0, upd: 0;
       c3Fk5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yvG_info" {
     sat_s3yvG_info:
         const sat_s3yvG_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3Fk4() //  [R1]
         { []
         }
     {offset
       c3Fk4: // global
           if (R1 & 7 == 1) goto u3FkT; else goto c3Fk9;
       u3FkT: // global
           Sp = Sp + 16;
           call _c3FkQ() args: 0, res: 0, upd: 0;
       c3Fk9: // global
           I64[Sp - 8] = block_c3Fkj_info;
           _s3yvw::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3yvw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3FkX; else goto c3Fkl;
       u3FkX: // global
           call _c3Fkj(R1) args: 0, res: 0, upd: 0;
       c3Fkl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Fk4_info" {
     block_c3Fk4_info:
         const _c3Fk4;
         const 2;
         const 30;
 },
 _c3Fkj() //  [R1]
         { []
         }
     {offset
       c3Fkj: // global
           if (I64[R1 + 7] == 92) goto c3Fkw; else goto u3FkU;
       c3Fkw: // global
           _s3yvw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Fkv_info;
           R1 = _s3yvw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Fl0; else goto c3Fkx;
       u3Fl0: // global
           call _c3Fkv(R1) args: 0, res: 0, upd: 0;
       c3Fkx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3FkU: // global
           Sp = Sp + 24;
           call _c3FkQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Fkj_info" {
     block_c3Fkj_info:
         const _c3Fkj;
         const 3;
         const 30;
 },
 _c3Fkv() //  [R1]
         { []
         }
     {offset
       c3Fkv: // global
           if (R1 & 7 == 1) goto u3FkV; else goto c3FkI;
       u3FkV: // global
           Sp = Sp + 16;
           call _c3FkQ() args: 0, res: 0, upd: 0;
       c3FkI: // global
           I64[Sp] = block_c3FkG_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3Fl2; else goto c3FkJ;
       u3Fl2: // global
           call _c3FkG(R1) args: 0, res: 0, upd: 0;
       c3FkJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Fkv_info" {
     block_c3Fkv_info:
         const _c3Fkv;
         const 2;
         const 30;
 },
 _c3FkG() //  [R1]
         { []
         }
     {offset
       c3FkG: // global
           if (I64[R1 + 7] == 38) goto c3FkR; else goto u3FkW;
       c3FkR: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FkW: // global
           Sp = Sp + 16;
           call _c3FkQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3FkG_info" {
     block_c3FkG_info:
         const _c3FkG;
         const 2;
         const 30;
 },
 _c3FkQ() //  []
         { []
         }
     {offset
       c3FkQ: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wconsumeEmpties_entry() //  [R2]
         { []
         }
     {offset
       c3Fl5: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Fl9; else goto c3Fl8;
       c3Fl9: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Text.Read.Lex.$wconsumeEmpties_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fl8: // global
           I64[Hp - 64] = lvl116_s3yvp_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl117_s3yvs_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3yvG_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wconsumeEmpties_info" {
     Text.Read.Lex.$wconsumeEmpties_info:
         const Text.Read.Lex.$wconsumeEmpties_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.00575804 UTC

[section ""data" . Text.Read.Lex.lexChar5_closure" {
     Text.Read.Lex.lexChar5_closure:
         const Text.Read.Lex.lexChar5_info;
         const 0;
 },
 Text.Read.Lex.lexChar5_entry() //  [R2]
         { []
         }
     {offset
       c3Fmm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Fmn; else goto c3Fmo;
       c3Fmn: // global
           R2 = R2;
           R1 = Text.Read.Lex.lexChar5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fmo: // global
           I64[Sp - 8] = block_c3Fmj_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wconsumeEmpties_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lexChar5_info" {
     Text.Read.Lex.lexChar5_info:
         const Text.Read.Lex.lexChar5_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S3yFW_srt+1240;
 },
 _c3Fmj() //  [R1]
         { []
         }
     {offset
       c3Fmj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fmr; else goto c3Fmq;
       c3Fmr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Fmq: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Fmj_info" {
     block_c3Fmj_info:
         const _c3Fmj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.020955271 UTC

[section ""data" . Text.Read.Lex.$wlexChar_closure" {
     Text.Read.Lex.$wlexChar_closure:
         const Text.Read.Lex.$wlexChar_info;
         const 0;
 },
 sat_s3yvU_entry() //  [R1]
         { []
         }
     {offset
       c3Fn3: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yvU_info" {
     sat_s3yvU_info:
         const sat_s3yvU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl118_s3yvS_entry() //  [R1]
         { []
         }
     {offset
       c3Fn9: // global
           _s3yvS::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Fna; else goto c3Fnb;
       c3Fnb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fnd; else goto c3Fnc;
       c3Fnd: // global
           HpAlloc = 16;
           goto c3Fna;
       c3Fna: // global
           R1 = _s3yvS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fnc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvS::P64;
           _s3yvR::P64 = P64[_s3yvS::P64 + 16];
           I64[Hp - 8] = sat_s3yvU_info;
           P64[Hp] = _s3yvR::P64;
           I64[Sp - 24] = block_c3Fn6_info;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl118_s3yvS_info" {
     lvl118_s3yvS_info:
         const lvl118_s3yvS_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+1248;
 },
 _c3Fn6() //  [R1]
         { []
         }
     {offset
       c3Fn6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fng; else goto c3Fnf;
       c3Fng: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Fnf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Fn6_info" {
     block_c3Fn6_info:
         const _c3Fn6;
         const 0;
         const 30;
 },
 sat_s3ywa_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Fnt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Fnu; else goto c3Fnv;
       c3Fnu: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fnv: // global
           I64[Sp - 24] = block_c3Fnm_info;
           _s3yvR::P64 = P64[R1 + 7];
           _s3yvS::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yvR::P64;
           P64[Sp - 8] = _s3yvS::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Foh; else goto c3Fnn;
       u3Foh: // global
           call _c3Fnm(R1) args: 0, res: 0, upd: 0;
       c3Fnn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ywa_info" {
     sat_s3ywa_info:
         const sat_s3ywa_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3Fnm() //  [R1]
         { []
         }
     {offset
       c3Fnm: // global
           if (R1 & 7 == 1) goto u3Fob; else goto c3Fnr;
       u3Fob: // global
           Sp = Sp + 8;
           call _c3Fo8() args: 0, res: 0, upd: 0;
       c3Fnr: // global
           I64[Sp - 8] = block_c3FnB_info;
           _s3yw0::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3yw0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Fof; else goto c3FnD;
       u3Fof: // global
           call _c3FnB(R1) args: 0, res: 0, upd: 0;
       c3FnD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Fnm_info" {
     block_c3Fnm_info:
         const _c3Fnm;
         const 2;
         const 30;
 },
 _c3FnB() //  [R1]
         { []
         }
     {offset
       c3FnB: // global
           if (I64[R1 + 7] == 92) goto c3FnO; else goto u3Foc;
       c3FnO: // global
           _s3yw0::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3FnN_info;
           R1 = _s3yw0::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Foi; else goto c3FnP;
       u3Foi: // global
           call _c3FnN(R1) args: 0, res: 0, upd: 0;
       c3FnP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Foc: // global
           Sp = Sp + 16;
           call _c3Fo8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3FnB_info" {
     block_c3FnB_info:
         const _c3FnB;
         const 3;
         const 30;
 },
 _c3FnN() //  [R1]
         { []
         }
     {offset
       c3FnN: // global
           if (R1 & 7 == 1) goto u3Fod; else goto c3Fo0;
       u3Fod: // global
           Sp = Sp + 8;
           call _c3Fo8() args: 0, res: 0, upd: 0;
       c3Fo0: // global
           I64[Sp] = block_c3FnY_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3Fok; else goto c3Fo1;
       u3Fok: // global
           call _c3FnY(R1) args: 0, res: 0, upd: 0;
       c3Fo1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FnN_info" {
     block_c3FnN_info:
         const _c3FnN;
         const 2;
         const 30;
 },
 _c3FnY() //  [R1]
         { []
         }
     {offset
       c3FnY: // global
           if (I64[R1 + 7] == 38) goto c3Fo9; else goto u3Foe;
       c3Fo9: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Foe: // global
           Sp = Sp + 8;
           call _c3Fo8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3FnY_info" {
     block_c3FnY_info:
         const _c3FnY;
         const 2;
         const 30;
 },
 _c3Fo8() //  []
         { []
         }
     {offset
       c3Fo8: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k_s3yvM_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Fon: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fop; else goto c3Foq;
       c3Fop: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Foq: // global
           I64[Sp - 16] = block_c3FmO_info;
           _s3yvK::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yvK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Fou; else goto c3FmP;
       u3Fou: // global
           call _c3FmO(R1) args: 0, res: 0, upd: 0;
       c3FmP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . k_s3yvM_info" {
     k_s3yvM_info:
         const k_s3yvM_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+1248;
 },
 _c3FmO() //  [R1]
         { []
         }
     {offset
       c3FmO: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Fot; else goto c3Fos;
       c3Fot: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Fos: // global
           _s3yvP::P64 = P64[R1 + 7];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _s3yvP::P64;
           I64[Hp - 56] = lvl118_s3yvS_info;
           _c3FmT::P64 = Hp - 88;
           P64[Hp - 40] = _c3FmT::P64;
           I64[Hp - 32] = sat_s3ywa_info;
           P64[Hp - 24] = _c3FmT::P64;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FmO_info" {
     block_c3FmO_info:
         const _c3FmO;
         const 1;
         const 4294967326;
         const S3yFW_srt+1248;
 },
 lvl116_s3yvL_entry() //  [R1]
         { []
         }
     {offset
       c3Fov: // global
           _s3yvL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fow; else goto c3Fox;
       c3Fox: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Foz; else goto c3Foy;
       c3Foz: // global
           HpAlloc = 16;
           goto c3Fow;
       c3Fow: // global
           R1 = _s3yvL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Foy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvL::P64;
           _s3yvK::P64 = P64[_s3yvL::P64 + 16];
           I64[Hp - 8] = k_s3yvM_info;
           P64[Hp] = _s3yvK::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yvL_info" {
     lvl116_s3yvL_info:
         const lvl116_s3yvL_entry;
         const 1;
         const 21474836496;
         const S3yFW_srt+1232;
 },
 sat_s3ywi_entry() //  [R1]
         { []
         }
     {offset
       c3FoW: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ywi_info" {
     sat_s3ywi_info:
         const sat_s3ywi_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl118_s3ywg_entry() //  [R1]
         { []
         }
     {offset
       c3Fp2: // global
           _s3ywg::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Fp3; else goto c3Fp4;
       c3Fp4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fp6; else goto c3Fp5;
       c3Fp6: // global
           HpAlloc = 16;
           goto c3Fp3;
       c3Fp3: // global
           R1 = _s3ywg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fp5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ywg::P64;
           _s3ywf::P64 = P64[_s3ywg::P64 + 16];
           I64[Hp - 8] = sat_s3ywi_info;
           P64[Hp] = _s3ywf::P64;
           I64[Sp - 24] = block_c3FoZ_info;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl118_s3ywg_info" {
     lvl118_s3ywg_info:
         const lvl118_s3ywg_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+1248;
 },
 _c3FoZ() //  [R1]
         { []
         }
     {offset
       c3FoZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fp9; else goto c3Fp8;
       c3Fp9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Fp8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3FoZ_info" {
     block_c3FoZ_info:
         const _c3FoZ;
         const 0;
         const 30;
 },
 sat_s3ywy_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Fpm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Fpn; else goto c3Fpo;
       c3Fpn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fpo: // global
           I64[Sp - 24] = block_c3Fpf_info;
           _s3ywf::P64 = P64[R1 + 7];
           _s3ywg::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ywf::P64;
           P64[Sp - 8] = _s3ywg::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Fqa; else goto c3Fpg;
       u3Fqa: // global
           call _c3Fpf(R1) args: 0, res: 0, upd: 0;
       c3Fpg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ywy_info" {
     sat_s3ywy_info:
         const sat_s3ywy_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3Fpf() //  [R1]
         { []
         }
     {offset
       c3Fpf: // global
           if (R1 & 7 == 1) goto u3Fq4; else goto c3Fpk;
       u3Fq4: // global
           Sp = Sp + 8;
           call _c3Fq1() args: 0, res: 0, upd: 0;
       c3Fpk: // global
           I64[Sp - 8] = block_c3Fpu_info;
           _s3ywo::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3ywo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Fq8; else goto c3Fpw;
       u3Fq8: // global
           call _c3Fpu(R1) args: 0, res: 0, upd: 0;
       c3Fpw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Fpf_info" {
     block_c3Fpf_info:
         const _c3Fpf;
         const 2;
         const 30;
 },
 _c3Fpu() //  [R1]
         { []
         }
     {offset
       c3Fpu: // global
           if (I64[R1 + 7] == 92) goto c3FpH; else goto u3Fq5;
       c3FpH: // global
           _s3ywo::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3FpG_info;
           R1 = _s3ywo::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Fqb; else goto c3FpI;
       u3Fqb: // global
           call _c3FpG(R1) args: 0, res: 0, upd: 0;
       c3FpI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Fq5: // global
           Sp = Sp + 16;
           call _c3Fq1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Fpu_info" {
     block_c3Fpu_info:
         const _c3Fpu;
         const 3;
         const 30;
 },
 _c3FpG() //  [R1]
         { []
         }
     {offset
       c3FpG: // global
           if (R1 & 7 == 1) goto u3Fq6; else goto c3FpT;
       u3Fq6: // global
           Sp = Sp + 8;
           call _c3Fq1() args: 0, res: 0, upd: 0;
       c3FpT: // global
           I64[Sp] = block_c3FpR_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3Fqd; else goto c3FpU;
       u3Fqd: // global
           call _c3FpR(R1) args: 0, res: 0, upd: 0;
       c3FpU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FpG_info" {
     block_c3FpG_info:
         const _c3FpG;
         const 2;
         const 30;
 },
 _c3FpR() //  [R1]
         { []
         }
     {offset
       c3FpR: // global
           if (I64[R1 + 7] == 38) goto c3Fq2; else goto u3Fq7;
       c3Fq2: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Fq7: // global
           Sp = Sp + 8;
           call _c3Fq1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3FpR_info" {
     block_c3FpR_info:
         const _c3FpR;
         const 2;
         const 30;
 },
 _c3Fq1() //  []
         { []
         }
     {offset
       c3Fq1: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ywz_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Fqg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Fqh; else goto c3Fqi;
       c3Fqh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fqi: // global
           I64[Sp - 24] = block_c3FoF_info;
           _s3yvK::P64 = P64[R1 + 7];
           _s3yvL::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yvK::P64;
           P64[Sp - 8] = _s3yvL::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Fqq; else goto c3FoG;
       u3Fqq: // global
           call _c3FoF(R1) args: 0, res: 0, upd: 0;
       c3FoG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ywz_info" {
     sat_s3ywz_info:
         const sat_s3ywz_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3yFW_srt+1248;
 },
 _c3FoF() //  [R1]
         { []
         }
     {offset
       c3FoF: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Fql; else goto c3Fqk;
       c3Fql: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Fqk: // global
           if (I64[R1 + 7] == 92) goto c3Fqp; else goto c3Fqo;
       c3Fqp: // global
           Hp = Hp - 96;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fqo: // global
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = lvl118_s3ywg_info;
           _c3FoM::P64 = Hp - 88;
           P64[Hp - 40] = _c3FoM::P64;
           I64[Hp - 32] = sat_s3ywy_info;
           P64[Hp - 24] = _c3FoM::P64;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FoF_info" {
     block_c3FoF_info:
         const _c3FoF;
         const 2;
         const 4294967326;
         const S3yFW_srt+1248;
 },
 Text.Read.Lex.$wlexChar_entry() //  [R2]
         { []
         }
     {offset
       c3Fqr: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Fqv; else goto c3Fqu;
       c3Fqv: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Text.Read.Lex.$wlexChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fqu: // global
           I64[Hp - 40] = lvl116_s3yvL_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3ywz_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wlexChar_info" {
     Text.Read.Lex.$wlexChar_info:
         const Text.Read.Lex.$wlexChar_entry;
         const 0;
         const 158913789966;
         const 4294967301;
         const S3yFW_srt+1232;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.071308223 UTC

[section ""data" . Text.Read.Lex.lexChar1_closure" {
     Text.Read.Lex.lexChar1_closure:
         const Text.Read.Lex.lexChar1_info;
         const 0;
 },
 Text.Read.Lex.lexChar1_entry() //  [R2]
         { []
         }
     {offset
       c3FsB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3FsC; else goto c3FsD;
       c3FsC: // global
           R2 = R2;
           R1 = Text.Read.Lex.lexChar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FsD: // global
           I64[Sp - 8] = block_c3Fsy_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wlexChar_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lexChar1_info" {
     Text.Read.Lex.lexChar1_info:
         const Text.Read.Lex.lexChar1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1272;
 },
 _c3Fsy() //  [R1]
         { []
         }
     {offset
       c3Fsy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FsG; else goto c3FsF;
       c3FsG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FsF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Fsy_info" {
     block_c3Fsy_info:
         const _c3Fsy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.077353574 UTC

[section ""data" . Text.Read.Lex.lexChar_closure" {
     Text.Read.Lex.lexChar_closure:
         const Text.Read.Lex.lexChar_info;
         const 0;
 },
 Text.Read.Lex.lexChar_entry() //  [R2]
         { []
         }
     {offset
       c3FsU: // global
           R2 = R2;
           call Text.Read.Lex.lexChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lexChar_info" {
     Text.Read.Lex.lexChar_info:
         const Text.Read.Lex.lexChar_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3yFW_srt+1280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.088861803 UTC

[section ""data" . lexStrItem_r3yd4_closure" {
     lexStrItem_r3yd4_closure:
         const lexStrItem_r3yd4_info;
         const 0;
 },
 lvl116_s3ywE_entry() //  [R1]
         { []
         }
     {offset
       c3Ft9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fta; else goto c3Ftb;
       c3Fta: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ftb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call lexStrItem_r3yd4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3ywE_info" {
     lvl116_s3ywE_info:
         const lvl116_s3ywE_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+1288;
 },
 lvl117_s3ywF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ftk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ftl; else goto c3Ftm;
       c3Ftl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ftm: // global
           I64[Sp - 16] = block_c3Fth_info;
           _s3ywE::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ywE::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Ftu; else goto c3Fti;
       u3Ftu: // global
           call _c3Fth(R1) args: 0, res: 0, upd: 0;
       c3Fti: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl117_s3ywF_info" {
     lvl117_s3ywF_info:
         const lvl117_s3ywF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Fth() //  [R1]
         { []
         }
     {offset
       c3Fth: // global
           if (I64[R1 + 7] == 92) goto c3Ftt; else goto c3Fts;
       c3Ftt: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fts: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Fth_info" {
     block_c3Fth_info:
         const _c3Fth;
         const 1;
         const 30;
 },
 k1_s3ywL_entry() //  [R1]
         { []
         }
     {offset
       c3FtB: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_s3ywL_info" {
     k1_s3ywL_info:
         const k1_s3ywL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl119_s3ywN_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FtJ: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl119_s3ywN_info" {
     lvl119_s3ywN_info:
         const lvl119_s3ywN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 $wlvl1_s3ywP_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FtV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FtZ; else goto c3FtY;
       c3FtZ: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FtY: // global
           if (R2 == 38) goto c3FtU; else goto c3FtT;
       c3FtU: // global
           _s3ywE::P64 = P64[R1 + 7];
           Hp = Hp - 16;
           R1 = _s3ywE::P64 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FtT: // global
           _s3ywN::P64 = P64[R1 + 15];
           if (R2 > 887) goto c3Fum; else goto c3FuN;
       c3Fum: // global
           (_s3ywZ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(R2);
           if (_s3ywZ::I64 == 0) goto c3Fuy; else goto c3Fuj;
       c3Fuj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FuN: // global
           if (R2 == 32) goto c3FuM; else goto c3FuJ;
       c3FuM: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FuJ: // global
           if ((R2 + -9) > 4) goto c3FuE; else goto c3FuH;
       c3FuE: // global
           if (R2 != 160) goto c3Fuy; else goto c3FuC;
       c3Fuy: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FuC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FuH: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl1_s3ywP_info" {
     $wlvl1_s3ywP_info:
         const $wlvl1_s3ywP_entry;
         const 2;
         const 11;
         const 4294967300;
 },
 lvl120_s3yx5_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FuW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FuX; else goto c3FuY;
       c3FuX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FuY: // global
           I64[Sp - 16] = block_c3FuT_info;
           _s3ywP::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ywP::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Fv2; else goto c3FuU;
       u3Fv2: // global
           call _c3FuT(R1) args: 0, res: 0, upd: 0;
       c3FuU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl120_s3yx5_info" {
     lvl120_s3yx5_info:
         const lvl120_s3yx5_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FuT() //  [R1]
         { []
         }
     {offset
       c3FuT: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wlvl1_s3ywP_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FuT_info" {
     block_c3FuT_info:
         const _c3FuT;
         const 1;
         const 30;
 },
 lvl122_s3yxa_entry() //  [R1]
         { []
         }
     {offset
       c3Fv8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fv9; else goto c3Fva;
       c3Fv9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fva: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl122_s3yxa_info" {
     lvl122_s3yxa_info:
         const lvl122_s3yxa_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+1232;
 },
 sat_s3yxm_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Fvj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Fvk; else goto c3Fvl;
       c3Fvk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fvl: // global
           I64[Sp - 24] = block_c3Fvg_info;
           _s3ywD::P64 = P64[R1 + 7];
           _s3yxa::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ywD::P64;
           P64[Sp - 8] = _s3yxa::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Fvx; else goto c3Fvh;
       u3Fvx: // global
           call _c3Fvg(R1) args: 0, res: 0, upd: 0;
       c3Fvh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yxm_info" {
     sat_s3yxm_info:
         const sat_s3yxm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3Fvg() //  [R1]
         { []
         }
     {offset
       c3Fvg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Fvq; else goto c3Fvp;
       c3Fvq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Fvp: // global
           if (I64[R1 + 7] == 92) goto c3Fvw; else goto c3Fvv;
       c3Fvw: // global
           Hp = Hp - 24;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fvv: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = Hp - 15;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Fvg_info" {
     block_c3Fvg_info:
         const _c3Fvg;
         const 2;
         const 30;
 },
 sat_s3yxf_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FvH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FvI; else goto c3FvJ;
       c3FvI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FvJ: // global
           I64[Sp - 16] = block_c3FvE_info;
           _s3yx9::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yx9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FvR; else goto c3FvF;
       u3FvR: // global
           call _c3FvE(R1) args: 0, res: 0, upd: 0;
       c3FvF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yxf_info" {
     sat_s3yxf_info:
         const sat_s3yxf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FvE() //  [R1]
         { []
         }
     {offset
       c3FvE: // global
           if (I64[R1 + 7] == 92) goto c3FvQ; else goto c3FvP;
       c3FvQ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FvP: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FvE_info" {
     block_c3FvE_info:
         const _c3FvE;
         const 1;
         const 30;
 },
 lexStrItem_r3yd4_entry() //  [R2]
         { []
         }
     {offset
       c3FvT: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto c3FvX; else goto c3FvW;
       c3FvX: // global
           HpAlloc = 240;
           R2 = R2;
           R1 = lexStrItem_r3yd4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FvW: // global
           I64[Hp - 232] = lvl116_s3ywE_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = lvl117_s3ywF_info;
           _c3Ft5::P64 = Hp - 232;
           P64[Hp - 200] = _c3Ft5::P64;
           I64[Hp - 192] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 184] = Hp - 207;
           I64[Hp - 176] = k1_s3ywL_info;
           P64[Hp - 168] = Hp - 191;
           I64[Hp - 160] = lvl119_s3ywN_info;
           P64[Hp - 152] = Hp - 175;
           I64[Hp - 144] = $wlvl1_s3ywP_info;
           P64[Hp - 136] = _c3Ft5::P64;
           P64[Hp - 128] = Hp - 159;
           I64[Hp - 120] = lvl120_s3yx5_info;
           P64[Hp - 112] = Hp - 143;
           I64[Hp - 104] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 96] = Hp - 119;
           I64[Hp - 88] = lvl122_s3yxa_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s3yxm_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = sat_s3yxf_info;
           P64[Hp - 16] = Hp - 103;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 39;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lexStrItem_r3yd4_info" {
     lexStrItem_r3yd4_info:
         const lexStrItem_r3yd4_entry;
         const 0;
         const 1112396529678;
         const 4294967301;
         const S3yFW_srt+1224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.121457935 UTC

[section ""data" . body_r3yd5_closure" {
     body_r3yd5_closure:
         const body_r3yd5_info;
         const 0;
 },
 sat_s3yxr_entry() //  [R1]
         { []
         }
     {offset
       c3Fxr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fxs; else goto c3Fxt;
       c3Fxs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fxt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yxr_info" {
     sat_s3yxr_info:
         const sat_s3yxr_entry;
         const 1;
         const 16;
 },
 lvl116_s3yxq_entry() //  [R1]
         { []
         }
     {offset
       c3Fxv: // global
           _s3yxq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fxw; else goto c3Fxx;
       c3Fxx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Fxz; else goto c3Fxy;
       c3Fxz: // global
           HpAlloc = 40;
           goto c3Fxw;
       c3Fxw: // global
           R1 = _s3yxq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fxy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yxq::P64;
           _s3yxo::P64 = P64[_s3yxq::P64 + 16];
           _s3yxp::P64 = P64[_s3yxq::P64 + 24];
           I64[Hp - 32] = sat_s3yxr_info;
           P64[Hp - 16] = _s3yxo::P64;
           I64[Hp - 8] = Text.Read.Lex.String_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           R1 = _s3yxp::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yxq_info" {
     lvl116_s3yxq_info:
         const lvl116_s3yxq_entry;
         const 2;
         const 18;
 },
 sat_s3yxC_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Fy0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Fy4; else goto c3Fy3;
       c3Fy4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fy3: // global
           _s3yxo::P64 = P64[R1 + 7];
           _s3yxx::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yxx::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3yxo::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yxC_info" {
     sat_s3yxC_info:
         const sat_s3yxC_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3yxF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Fy5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Fy6; else goto c3Fy7;
       c3Fy6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fy7: // global
           I64[Sp - 32] = block_c3FxF_info;
           _s3yxo::P64 = P64[R1 + 7];
           _s3yxp::P64 = P64[R1 + 15];
           _s3yxq::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3yxo::P64;
           P64[Sp - 16] = _s3yxp::P64;
           P64[Sp - 8] = _s3yxq::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3FyB; else goto c3FxG;
       u3FyB: // global
           call _c3FxF(R1) args: 0, res: 0, upd: 0;
       c3FxG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yxF_info" {
     sat_s3yxF_info:
         const sat_s3yxF_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3yFW_srt+1296;
 },
 _c3FxF() //  [R1]
         { []
         }
     {offset
       c3FxF: // global
           I64[Sp - 8] = block_c3FxK_info;
           _s3yxw::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3yxw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Fyy; else goto c3FxL;
       u3Fyy: // global
           call _c3FxK(R1) args: 0, res: 0, upd: 0;
       c3FxL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FxF_info" {
     block_c3FxF_info:
         const _c3FxF;
         const 3;
         const 4294967326;
         const S3yFW_srt+1296;
 },
 _c3FxK() //  [R1]
         { []
         }
     {offset
       c3FxK: // global
           if (I64[R1 + 7] == 34) goto c3Fyj; else goto u3Fyw;
       c3Fyj: // global
           I64[Sp] = block_c3Fyi_info;
           _s3yxx::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3yxx::P64;
           if (R1 & 7 != 0) goto u3Fyz; else goto c3Fyk;
       u3Fyz: // global
           call _c3Fyi(R1) args: 0, res: 0, upd: 0;
       c3Fyk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Fyw: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3FxS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3FxK_info" {
     block_c3FxK_info:
         const _c3FxK;
         const 4;
         const 4294967326;
         const S3yFW_srt+1296;
 },
 _c3Fyi() //  [R1]
         { []
         }
     {offset
       c3Fyi: // global
           if (R1 & 7 == 1) goto c3Fyq; else goto u3Fyx;
       c3Fyq: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Fyx: // global
           P64[Sp + 32] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c3FxS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Fyi_info" {
     block_c3Fyi_info:
         const _c3Fyi;
         const 4;
         const 4294967326;
         const S3yFW_srt+1296;
 },
 _c3FxS() //  []
         { []
         }
     {offset
       c3FxS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Fyc; else goto c3Fyb;
       c3Fyc: // global
           HpAlloc = 24;
           I64[Sp] = block_c3FxS_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Fyb: // global
           I64[Hp - 16] = sat_s3yxC_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = Hp - 15;
           Sp = Sp + 32;
           call body_r3yd5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FxS_info" {
     block_c3FxS_info:
         const _c3FxS;
         const 3;
         const 4294967326;
         const S3yFW_srt+1296;
 },
 body_r3yd5_entry() //  [R2, R3]
         { []
         }
     {offset
       c3FyD: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3FyH; else goto c3FyG;
       c3FyH: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = body_r3yd5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3FyG: // global
           I64[Hp - 56] = lvl116_s3yxq_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yxF_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R2 = Hp - 23;
           call lexStrItem_r3yd4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . body_r3yd5_info" {
     body_r3yd5_info:
         const body_r3yd5_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3yFW_srt+1288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.150145427 UTC

[section ""data" . lexExp_r3yd6_closure" {
     lexExp_r3yd6_closure:
         const lexExp_r3yd6_info;
         const 0;
 },
 sat_s3yxP_entry() //  [R1]
         { []
         }
     {offset
       c3FzO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3FzP; else goto c3FzQ;
       c3FzP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FzQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3FzL_info;
           _s3yxK::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yxK::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3FA5; else goto c3FzM;
       u3FA5: // global
           call _c3FzL(R1) args: 0, res: 0, upd: 0;
       c3FzM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yxP_info" {
     sat_s3yxP_info:
         const sat_s3yxP_entry;
         const 2;
         const 12884901906;
         const S3yFW_srt+1304;
 },
 _c3FzL() //  [R1]
         { []
         }
     {offset
       c3FzL: // global
           _s3yxK::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 45) goto c3FA0; else goto c3FzW;
       c3FA0: // global
           I64[Sp + 8] = block_c3FzZ_info;
           R3 = _s3yxK::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 24;
       c3FzW: // global
           R3 = _s3yxK::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3FzL_info" {
     block_c3FzL_info:
         const _c3FzL;
         const 1;
         const 12884901918;
         const S3yFW_srt+1304;
 },
 _c3FzZ() //  [R1]
         { []
         }
     {offset
       c3FzZ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3FzZ_info" {
     block_c3FzZ_info:
         const _c3FzZ;
         const 0;
         const 30;
 },
 sat_s3yxR_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FA7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3FAb; else goto c3FAa;
       c3FAb: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FAa: // global
           _s3yxG::P64 = P64[R1 + 7];
           _s3yxJ::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3yxP_info;
           P64[Hp - 24] = _s3yxJ::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 6;
           R1 = _s3yxG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yxR_info" {
     sat_s3yxR_info:
         const sat_s3yxR_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const S3yFW_srt+1304;
 },
 section ""relreadonly" . u3FCr_srtd" {
     u3FCr_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 k1_s3yxI_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FAf: // global
           _s3yxJ::P64 = R2;
           _s3yxI::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3FAg; else goto c3FAh;
       c3FAh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FAj; else goto c3FAi;
       c3FAj: // global
           HpAlloc = 24;
           goto c3FAg;
       c3FAg: // global
           R2 = _s3yxJ::P64;
           R1 = _s3yxI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FAi: // global
           _s3yxG::P64 = P64[_s3yxI::P64 + 7];
           I64[Hp - 16] = sat_s3yxR_info;
           P64[Hp - 8] = _s3yxG::P64;
           P64[Hp] = _s3yxJ::P64;
           I64[Sp - 8] = block_c3FAc_info;
           R3 = Hp - 15;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 8;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . k1_s3yxI_info" {
     k1_s3yxI_info:
         const k1_s3yxI_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3FCr_srtd;
 },
 _c3FAc() //  [R1]
         { []
         }
     {offset
       c3FAc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FAm; else goto c3FAl;
       c3FAm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FAl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FAc_info" {
     block_c3FAc_info:
         const _c3FAc;
         const 0;
         const 30;
 },
 sat_s3yy8_entry() //  [R1]
         { []
         }
     {offset
       c3FAA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FAB; else goto c3FAC;
       c3FAB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FAC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yy8_info" {
     sat_s3yy8_info:
         const sat_s3yy8_entry;
         const 1;
         const 12884901904;
         const S3yFW_srt+1304;
 },
 sat_s3yya_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FAE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3FAI; else goto c3FAH;
       c3FAI: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FAH: // global
           _s3yxG::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_s3yy8_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           R1 = _s3yxG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yya_info" {
     sat_s3yya_info:
         const sat_s3yya_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S3yFW_srt+1304;
 },
 section ""relreadonly" . u3FCs_srtd" {
     u3FCs_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3yyd_entry() //  [R1]
         { []
         }
     {offset
       c3FAM: // global
           _s3yyd::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3FAN; else goto c3FAO;
       c3FAO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FAQ; else goto c3FAP;
       c3FAQ: // global
           HpAlloc = 16;
           goto c3FAN;
       c3FAN: // global
           R1 = _s3yyd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FAP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yyd::P64;
           _s3yxG::P64 = P64[_s3yyd::P64 + 16];
           I64[Hp - 8] = sat_s3yya_info;
           P64[Hp] = _s3yxG::P64;
           I64[Sp - 24] = block_c3FAJ_info;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yyd_info" {
     sat_s3yyd_info:
         const sat_s3yyd_entry;
         const 1;
         const 18446744069414584336;
         const u3FCs_srtd;
 },
 _c3FAJ() //  [R1]
         { []
         }
     {offset
       c3FAJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FAT; else goto c3FAS;
       c3FAT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3FAS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3FAJ_info" {
     block_c3FAJ_info:
         const _c3FAJ;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3FCt_srtd" {
     u3FCt_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3yy4_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FB2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FB3; else goto c3FB4;
       c3FB3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FB4: // global
           I64[Sp - 16] = block_c3FAZ_info;
           _s3yxI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FBc; else goto c3FB0;
       u3FBc: // global
           call _c3FAZ(R1) args: 0, res: 0, upd: 0;
       c3FB0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yy4_info" {
     sat_s3yy4_info:
         const sat_s3yy4_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3FCt_srtd;
 },
 section ""relreadonly" . u3FCu_srtd" {
     u3FCu_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 _c3FAZ() //  [R1]
         { []
         }
     {offset
       c3FAZ: // global
           if (I64[R1 + 7] == 43) goto c3FBb; else goto c3FBa;
       c3FBb: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call k1_s3yxI_entry(R2, R1) args: 8, res: 0, upd: 8;
       c3FBa: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FAZ_info" {
     block_c3FAZ_info:
         const _c3FAZ;
         const 1;
         const 18446744069414584350;
         const u3FCu_srtd;
 },
 section ""relreadonly" . u3FCv_srtd" {
     u3FCv_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3yxY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FBm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FBn; else goto c3FBo;
       c3FBn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FBo: // global
           I64[Sp - 16] = block_c3FBj_info;
           _s3yxI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FBw; else goto c3FBk;
       u3FBw: // global
           call _c3FBj(R1) args: 0, res: 0, upd: 0;
       c3FBk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yxY_info" {
     sat_s3yxY_info:
         const sat_s3yxY_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3FCv_srtd;
 },
 section ""relreadonly" . u3FCw_srtd" {
     u3FCw_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 _c3FBj() //  [R1]
         { []
         }
     {offset
       c3FBj: // global
           if (I64[R1 + 7] == 45) goto c3FBv; else goto c3FBu;
       c3FBv: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call k1_s3yxI_entry(R2, R1) args: 8, res: 0, upd: 8;
       c3FBu: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FBj_info" {
     block_c3FBj_info:
         const _c3FBj;
         const 1;
         const 18446744069414584350;
         const u3FCw_srtd;
 },
 section ""relreadonly" . u3FCx_srtd" {
     u3FCx_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201392128;
 },
 lvl116_s3yxH_entry() //  [R1]
         { []
         }
     {offset
       c3FBA: // global
           _s3yxH::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3FBB; else goto c3FBC;
       c3FBC: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3FBE; else goto c3FBD;
       c3FBE: // global
           HpAlloc = 104;
           goto c3FBB;
       c3FBB: // global
           R1 = _s3yxH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FBD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yxH::P64;
           _s3yxG::P64 = P64[_s3yxH::P64 + 16];
           I64[Hp - 96] = k1_s3yxI_info;
           P64[Hp - 88] = _s3yxG::P64;
           I64[Hp - 80] = sat_s3yyd_info;
           P64[Hp - 64] = _s3yxG::P64;
           I64[Hp - 56] = sat_s3yy4_info;
           _c3Fzx::P64 = Hp - 95;
           P64[Hp - 48] = _c3Fzx::P64;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = sat_s3yxY_info;
           P64[Hp - 16] = _c3Fzx::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 32] = block_c3FBy_info;
           R3 = Hp - 39;
           R2 = Hp - 7;
           P64[Sp - 24] = Hp - 80;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yxH_info" {
     lvl116_s3yxH_info:
         const lvl116_s3yxH_entry;
         const 1;
         const 18446744069414584336;
         const u3FCx_srtd;
 },
 _c3FBy() //  [R1]
         { []
         }
     {offset
       c3FBy: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3FBy_info" {
     block_c3FBy_info:
         const _c3FBy;
         const 1;
         const 4294967326;
         const S3yFW_srt+1224;
 },
 sat_s3yyo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FBQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FBR; else goto c3FBS;
       c3FBR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FBS: // global
           I64[Sp - 16] = block_c3FBN_info;
           _s3yxH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FC0; else goto c3FBO;
       u3FC0: // global
           call _c3FBN(R1) args: 0, res: 0, upd: 0;
       c3FBO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yyo_info" {
     sat_s3yyo_info:
         const sat_s3yyo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FBN() //  [R1]
         { []
         }
     {offset
       c3FBN: // global
           if (I64[R1 + 7] == 69) goto c3FBZ; else goto c3FBY;
       c3FBZ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FBY: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FBN_info" {
     block_c3FBN_info:
         const _c3FBN;
         const 1;
         const 30;
 },
 sat_s3yyi_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FCa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FCb; else goto c3FCc;
       c3FCb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FCc: // global
           I64[Sp - 16] = block_c3FC7_info;
           _s3yxH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FCk; else goto c3FC8;
       u3FCk: // global
           call _c3FC7(R1) args: 0, res: 0, upd: 0;
       c3FC8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yyi_info" {
     sat_s3yyi_info:
         const sat_s3yyi_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FC7() //  [R1]
         { []
         }
     {offset
       c3FC7: // global
           if (I64[R1 + 7] == 101) goto c3FCj; else goto c3FCi;
       c3FCj: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FCi: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FC7_info" {
     block_c3FC7_info:
         const _c3FC7;
         const 1;
         const 30;
 },
 section ""relreadonly" . u3FCy_srtd" {
     u3FCy_srtd:
         const S3yFW_srt+584;
         const 93;
         const 1;
         const 469827584;
 },
 lexExp_r3yd6_entry() //  [R2]
         { []
         }
     {offset
       c3FCm: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3FCq; else goto c3FCp;
       c3FCq: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = lexExp_r3yd6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FCp: // global
           I64[Hp - 80] = lvl116_s3yxH_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s3yyo_info;
           _c3Fzt::P64 = Hp - 80;
           P64[Hp - 48] = _c3Fzt::P64;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = sat_s3yyi_info;
           P64[Hp - 16] = _c3Fzt::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 39;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lexExp_r3yd6_info" {
     lexExp_r3yd6_info:
         const lexExp_r3yd6_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3FCy_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.196277111 UTC

[section ""data" . lvl114_r3yd7_closure" {
     lvl114_r3yd7_closure:
         const lvl114_r3yd7_info;
 },
 lvl114_r3yd7_entry() //  [R2]
         { []
         }
     {offset
       c3FEi: // global
           _s3yyq::P64 = R2;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _s3yyq::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl114_r3yd7_info" {
     lvl114_r3yd7_info:
         const lvl114_r3yd7_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.202085177 UTC

[section ""data" . lvl115_r3yd8_closure" {
     lvl115_r3yd8_closure:
         const lvl115_r3yd8_info;
 },
 lvl115_r3yd8_entry() //  [R2]
         { []
         }
     {offset
       c3FEt: // global
           _s3yyr::P64 = R2;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _s3yyr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl115_r3yd8_info" {
     lvl115_r3yd8_info:
         const lvl115_r3yd8_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.212993431 UTC

[section ""data" . $wlexDecNumber_r3yd9_closure" {
     $wlexDecNumber_r3yd9_closure:
         const $wlexDecNumber_r3yd9_info;
         const 0;
 },
 sat_s3yyy_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FEV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3FEZ; else goto c3FEY;
       c3FEZ: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FEY: // global
           _s3yys::P64 = P64[R1 + 7];
           _s3yyt::P64 = P64[R1 + 15];
           _s3yyu::P64 = P64[R1 + 23];
           I64[Hp - 40] = Text.Read.Lex.MkDecimal_con_info;
           P64[Hp - 32] = _s3yyt::P64;
           P64[Hp - 24] = _s3yyu::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 38;
           R2 = Hp - 2;
           R1 = _s3yys::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yyy_info" {
     sat_s3yyy_info:
         const sat_s3yyy_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 section ""relreadonly" . u3FFr_srtd" {
     u3FFr_srtd:
         const S3yFW_srt+664;
         const 83;
         const 1;
         const 262144;
 },
 sat_s3yyB_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FF3: // global
           _s3yyu::P64 = R2;
           _s3yyB::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3FF4; else goto c3FF5;
       c3FF5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3FF7; else goto c3FF6;
       c3FF7: // global
           HpAlloc = 32;
           goto c3FF4;
       c3FF4: // global
           R2 = _s3yyu::P64;
           R1 = _s3yyB::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FF6: // global
           _s3yys::P64 = P64[_s3yyB::P64 + 7];
           _s3yyt::P64 = P64[_s3yyB::P64 + 15];
           I64[Hp - 24] = sat_s3yyy_info;
           P64[Hp - 16] = _s3yys::P64;
           P64[Hp - 8] = _s3yyt::P64;
           P64[Hp] = _s3yyu::P64;
           I64[Sp - 8] = block_c3FF0_info;
           R4 = Hp - 23;
           R3 = lvl115_r3yd8_closure+1;
           R2 = lexExp_r3yd6_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yyB_info" {
     sat_s3yyB_info:
         const sat_s3yyB_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const u3FFr_srtd;
 },
 _c3FF0() //  [R1]
         { []
         }
     {offset
       c3FF0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FFa; else goto c3FF9;
       c3FFa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FF9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FF0_info" {
     block_c3FF0_info:
         const _c3FF0;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3FFs_srtd" {
     u3FFs_srtd:
         const S3yFW_srt+616;
         const 89;
         const 65;
         const 16777216;
 },
 sat_s3yyE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FFe: // global
           _s3yyt::P64 = R2;
           _s3yyE::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3FFf; else goto c3FFg;
       c3FFg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FFi; else goto c3FFh;
       c3FFi: // global
           HpAlloc = 24;
           goto c3FFf;
       c3FFf: // global
           R2 = _s3yyt::P64;
           R1 = _s3yyE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FFh: // global
           _s3yys::P64 = P64[_s3yyE::P64 + 7];
           I64[Hp - 16] = sat_s3yyB_info;
           P64[Hp - 8] = _s3yys::P64;
           P64[Hp] = _s3yyt::P64;
           I64[Sp - 8] = block_c3FFb_info;
           R4 = Hp - 15;
           R3 = lvl114_r3yd7_closure+1;
           R2 = lexFrac_r3y9E_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yyE_info" {
     sat_s3yyE_info:
         const sat_s3yyE_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3FFs_srtd;
 },
 _c3FFb() //  [R1]
         { []
         }
     {offset
       c3FFb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FFl; else goto c3FFk;
       c3FFl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FFk: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FFb_info" {
     block_c3FFb_info:
         const _c3FFb;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3FFt_srtd" {
     u3FFt_srtd:
         const S3yFW_srt+584;
         const 94;
         const 1041;
         const 805306368;
 },
 $wlexDecNumber_r3yd9_entry() //  [R2]
         { []
         }
     {offset
       c3FFm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FFq; else goto c3FFp;
       c3FFq: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = $wlexDecNumber_r3yd9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FFp: // global
           I64[Hp - 8] = sat_s3yyE_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlexDecNumber_r3yd9_info" {
     $wlexDecNumber_r3yd9_info:
         const $wlexDecNumber_r3yd9_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3FFt_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.231661382 UTC

[section ""data" . lexDecNumber_r3yda_closure" {
     lexDecNumber_r3yda_closure:
         const lexDecNumber_r3yda_info;
         const 0;
 },
 lexDecNumber_r3yda_entry() //  [R2]
         { []
         }
     {offset
       c3FG2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3FG3; else goto c3FG4;
       c3FG3: // global
           R2 = R2;
           R1 = lexDecNumber_r3yda_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FG4: // global
           I64[Sp - 8] = block_c3FFZ_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexDecNumber_r3yd9_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lexDecNumber_r3yda_info" {
     lexDecNumber_r3yda_info:
         const lexDecNumber_r3yda_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1328;
 },
 _c3FFZ() //  [R1]
         { []
         }
     {offset
       c3FFZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FG7; else goto c3FG6;
       c3FG7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FG6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FFZ_info" {
     block_c3FFZ_info:
         const _c3FFZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.260225712 UTC

[section ""data" . Text.Read.Lex.expect2_closure" {
     Text.Read.Lex.expect2_closure:
         const Text.Read.Lex.expect2_info;
         const 0;
 },
 lvl116_s3yyM_entry() //  [R1]
         { []
         }
     {offset
       c3FGv: // global
           _s3yyM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FGw; else goto c3FGx;
       c3FGx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FGz; else goto c3FGy;
       c3FGz: // global
           HpAlloc = 16;
           goto c3FGw;
       c3FGw: // global
           R1 = _s3yyM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FGy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yyM::P64;
           _s3yyI::P64 = P64[_s3yyM::P64 + 16];
           _s3yyK::P64 = P64[_s3yyM::P64 + 24];
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = _s3yyK::P64;
           R2 = Hp - 7;
           R1 = _s3yyI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yyM_info" {
     lvl116_s3yyM_info:
         const lvl116_s3yyM_entry;
         const 2;
         const 18;
 },
 sat_s3yyW_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FGU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FGV; else goto c3FGW;
       c3FGV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FGW: // global
           I64[Sp - 16] = block_c3FGR_info;
           _s3yyM::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FH4; else goto c3FGS;
       u3FH4: // global
           call _c3FGR(R1) args: 0, res: 0, upd: 0;
       c3FGS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yyW_info" {
     sat_s3yyW_info:
         const sat_s3yyW_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FGR() //  [R1]
         { []
         }
     {offset
       c3FGR: // global
           if (I64[R1 + 7] == 39) goto c3FH3; else goto c3FH2;
       c3FH3: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FH2: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FGR_info" {
     block_c3FGR_info:
         const _c3FGR;
         const 1;
         const 30;
 },
 sat_s3yz1_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FHf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FHg; else goto c3FHh;
       c3FHg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FHh: // global
           I64[Sp - 16] = block_c3FHc_info;
           _s3yyM::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FHp; else goto c3FHd;
       u3FHp: // global
           call _c3FHc(R1) args: 0, res: 0, upd: 0;
       c3FHd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yz1_info" {
     sat_s3yz1_info:
         const sat_s3yz1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FHc() //  [R1]
         { []
         }
     {offset
       c3FHc: // global
           if (I64[R1 + 7] == 39) goto c3FHo; else goto c3FHn;
       c3FHo: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FHn: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FHc_info" {
     block_c3FHc_info:
         const _c3FHc;
         const 1;
         const 30;
 },
 $wk_s3yyJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3FHu: // global
           _s3yyL::P64 = R3;
           _s3yyK::P64 = R2;
           _s3yyJ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3FHv; else goto c3FHw;
       c3FHw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3FHy; else goto c3FHx;
       c3FHy: // global
           HpAlloc = 32;
           goto c3FHv;
       c3FHv: // global
           R3 = _s3yyL::P64;
           R2 = _s3yyK::P64;
           R1 = _s3yyJ::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3FHx: // global
           _s3yyI::P64 = P64[_s3yyJ::P64 + 6];
           I64[Hp - 24] = lvl116_s3yyM_info;
           P64[Hp - 8] = _s3yyI::P64;
           P64[Hp] = _s3yyK::P64;
           I64[Sp - 24] = block_c3FGA_info;
           R1 = _s3yyL::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s3yyK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3FHM; else goto c3FGB;
       u3FHM: // global
           call _c3FGA(R1) args: 0, res: 0, upd: 0;
       c3FGB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wk_s3yyJ_info" {
     $wk_s3yyJ_info:
         const $wk_s3yyJ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3FGA() //  [R1]
         { []
         }
     {offset
       c3FGA: // global
           if (R1 & 7 == 1) goto c3FHr; else goto c3FHs;
       c3FHr: // global
           I64[Sp] = block_c3FGF_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3FHL; else goto c3FGG;
       u3FHL: // global
           call _c3FGF(R1) args: 0, res: 0, upd: 0;
       c3FGG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3FHs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3FHK; else goto c3FHJ;
       c3FHK: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FHJ: // global
           I64[Hp - 24] = sat_s3yz1_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FGA_info" {
     block_c3FGA_info:
         const _c3FGA;
         const 2;
         const 30;
 },
 _c3FGF() //  [R1]
         { []
         }
     {offset
       c3FGF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3FHC; else goto c3FHB;
       c3FHC: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FHB: // global
           if (I64[R1 + 7] == 39) goto c3FHG; else goto c3FHF;
       c3FHG: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FHF: // global
           I64[Hp - 24] = sat_s3yyW_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FGF_info" {
     block_c3FGF_info:
         const _c3FGF;
         const 130;
         const 30;
 },
 k1_s3yz2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FHV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FHW; else goto c3FHX;
       c3FHW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FHX: // global
           I64[Sp - 16] = block_c3FHS_info;
           _s3yyJ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FI1; else goto c3FHT;
       u3FI1: // global
           call _c3FHS(R1) args: 0, res: 0, upd: 0;
       c3FHT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . k1_s3yz2_info" {
     k1_s3yz2_info:
         const k1_s3yz2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FHS() //  [R1]
         { []
         }
     {offset
       c3FHS: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wk_s3yyJ_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FHS_info" {
     block_c3FHS_info:
         const _c3FHS;
         const 1;
         const 30;
 },
 lvl116_s3yz7_entry() //  [R1]
         { []
         }
     {offset
       c3FI6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FI7; else goto c3FI8;
       c3FI7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FI8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yz7_info" {
     lvl116_s3yz7_info:
         const lvl116_s3yz7_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+1232;
 },
 lvl118_s3yzd_entry() //  [R1]
         { []
         }
     {offset
       c3FIq: // global
           _s3yzd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FIr; else goto c3FIs;
       c3FIs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FIu; else goto c3FIt;
       c3FIu: // global
           HpAlloc = 16;
           goto c3FIr;
       c3FIr: // global
           R1 = _s3yzd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FIt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yzd::P64;
           _s3yyI::P64 = P64[_s3yzd::P64 + 16];
           _s3yza::P64 = P64[_s3yzd::P64 + 24];
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = _s3yza::P64;
           R2 = Hp - 7;
           R1 = _s3yyI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl118_s3yzd_info" {
     lvl118_s3yzd_info:
         const lvl118_s3yzd_entry;
         const 2;
         const 18;
 },
 sat_s3yzj_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FID: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FIE; else goto c3FIF;
       c3FIE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FIF: // global
           I64[Sp - 16] = block_c3FIA_info;
           _s3yzd::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yzd::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FIN; else goto c3FIB;
       u3FIN: // global
           call _c3FIA(R1) args: 0, res: 0, upd: 0;
       c3FIB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yzj_info" {
     sat_s3yzj_info:
         const sat_s3yzj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FIA() //  [R1]
         { []
         }
     {offset
       c3FIA: // global
           if (I64[R1 + 7] == 39) goto c3FIM; else goto c3FIL;
       c3FIM: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FIL: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FIA_info" {
     block_c3FIA_info:
         const _c3FIA;
         const 1;
         const 30;
 },
 lvl117_s3yz8_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FIO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3FIP; else goto c3FIQ;
       c3FIP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FIQ: // global
           I64[Sp - 24] = block_c3FIe_info;
           _s3yyI::P64 = P64[R1 + 7];
           _s3yz7::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yyI::P64;
           P64[Sp - 8] = _s3yz7::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3FJ0; else goto c3FIf;
       u3FJ0: // global
           call _c3FIe(R1) args: 0, res: 0, upd: 0;
       c3FIf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl117_s3yz8_info" {
     lvl117_s3yz8_info:
         const lvl117_s3yz8_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3FIe() //  [R1]
         { []
         }
     {offset
       c3FIe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3FIT; else goto c3FIS;
       c3FIT: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FIS: // global
           _s3yzc::I64 = I64[R1 + 7];
           if (_s3yzc::I64 == 39) goto c3FIX; else goto u3FIZ;
       c3FIX: // global
           Hp = Hp - 64;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3FIZ: // global
           if (_s3yzc::I64 == 92) goto c3FIY; else goto c3FIW;
       c3FIY: // global
           Hp = Hp - 64;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FIW: // global
           I64[Hp - 56] = lvl118_s3yzd_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_s3yzj_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FIe_info" {
     block_c3FIe_info:
         const _c3FIe;
         const 2;
         const 30;
 },
 lvl119_s3yzr_entry() //  [R1]
         { []
         }
     {offset
       c3FJa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FJb; else goto c3FJc;
       c3FJb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FJc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Base.id_closure+1;
           Sp = Sp - 16;
           call body_r3yd5_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl119_s3yzr_info" {
     lvl119_s3yzr_info:
         const lvl119_s3yzr_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+1296;
 },
 section ""relreadonly" . u3FMZ_srtd" {
     u3FMZ_srtd:
         const S3yFW_srt+600;
         const 93;
         const 257;
         const 268435456;
 },
 sat_s3yAb_entry() //  [R1]
         { []
         }
     {offset
       c3FJw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3FJx; else goto c3FJy;
       c3FJx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FJy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3FJt_info;
           R4 = P64[R1 + 16];
           R3 = lexDecNumber_r3yda_closure+1;
           R2 = lexHexOct_r3y9B_closure+1;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yAb_info" {
     sat_s3yAb_info:
         const sat_s3yAb_entry;
         const 1;
         const 18446744069414584336;
         const u3FMZ_srtd;
 },
 _c3FJt() //  [R1]
         { []
         }
     {offset
       c3FJt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FJB; else goto c3FJA;
       c3FJB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3FJA: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3FJt_info" {
     block_c3FJt_info:
         const _c3FJt;
         const 0;
         const 30;
 },
 sat_s3yA2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FK3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3FK7; else goto c3FK6;
       c3FK7: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FK6: // global
           _s3yyI::P64 = P64[R1 + 7];
           _s3yzR::P64 = P64[R1 + 15];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = _s3yzR::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = Hp - 30;
           R2 = Hp - 4;
           R1 = _s3yyI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yA2_info" {
     sat_s3yA2_info:
         const sat_s3yA2_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3yA7_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FK8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3FK9; else goto c3FKa;
       c3FK9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FKa: // global
           I64[Sp - 16] = block_c3FJH_info;
           _s3yyI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FKz; else goto c3FJI;
       u3FKz: // global
           call _c3FJH(R1) args: 0, res: 0, upd: 0;
       c3FJI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yA7_info" {
     sat_s3yA7_info:
         const sat_s3yA7_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+1344;
 },
 _c3FJH() //  [R1]
         { []
         }
     {offset
       c3FJH: // global
           _s3yzS::I64 = I64[R1 + 7];
           (_s3yzX::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalpha(_s3yzS::I64);
           if (_s3yzX::I64 == 0) goto c3FKu; else goto u3FKv;
       c3FKu: // global
           if (_s3yzS::I64 == 95) goto u3FKw; else goto c3FKs;
       u3FKw: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           goto u3FKy;
       c3FKs: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3FKv: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           goto u3FKy;
       u3FKy: // global
           call _c3FJU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3FJH_info" {
     block_c3FJH_info:
         const _c3FJH;
         const 1;
         const 4294967326;
         const S3yFW_srt+1344;
 },
 _c3FJU() //  []
         { []
         }
     {offset
       c3FJU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FKh; else goto c3FKg;
       c3FKh: // global
           HpAlloc = 24;
           I64[Sp] = block_c3FJU_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3FKg: // global
           I64[Hp - 16] = sat_s3yA2_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c3FKc_info;
           R3 = Hp - 15;
           R2 = isIdfChar_r3y8W_closure+1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FJU_info" {
     block_c3FJU_info:
         const _c3FJU;
         const 2;
         const 4294967326;
         const S3yFW_srt+1344;
 },
 _c3FKc() //  [R1]
         { []
         }
     {offset
       c3FKc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FKk; else goto c3FKj;
       c3FKk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FKj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FKc_info" {
     block_c3FKc_info:
         const _c3FKc;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3FN0_srtd" {
     u3FN0_srtd:
         const S3yFW_srt+600;
         const 94;
         const 257;
         const 805322752;
 },
 sat_s3yAc_entry() //  [R1]
         { []
         }
     {offset
       c3FKB: // global
           _s3yAc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FKC; else goto c3FKD;
       c3FKD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3FKF; else goto c3FKE;
       c3FKF: // global
           HpAlloc = 56;
           goto c3FKC;
       c3FKC: // global
           R1 = _s3yAc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FKE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAc::P64;
           _s3yyI::P64 = P64[_s3yAc::P64 + 16];
           I64[Hp - 48] = sat_s3yAb_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yA7_info;
           P64[Hp - 16] = _s3yyI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yAc_info" {
     sat_s3yAc_info:
         const sat_s3yAc_entry;
         const 1;
         const 18446744069414584336;
         const u3FN0_srtd;
 },
 sat_s3yzL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FL2: // global
           _s3yzG::P64 = R2;
           _s3yzL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3FL3; else goto c3FL4;
       c3FL4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FL6; else goto c3FL5;
       c3FL6: // global
           HpAlloc = 24;
           goto c3FL3;
       c3FL3: // global
           R2 = _s3yzG::P64;
           R1 = _s3yzL::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FL5: // global
           _s3yyI::P64 = P64[_s3yzL::P64 + 7];
           _s3yzE::P64 = P64[_s3yzL::P64 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yzE::P64;
           P64[Hp] = _s3yzG::P64;
           I64[Sp - 24] = block_c3FKW_info;
           R4 = reserved_ops29_r3y9q_closure+2;
           _c3FKV::P64 = Hp - 14;
           R3 = _c3FKV::P64;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           P64[Sp - 16] = _c3FKV::P64;
           P64[Sp - 8] = _s3yyI::P64;
           Sp = Sp - 24;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yzL_info" {
     sat_s3yzL_info:
         const sat_s3yzL_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3yFW_srt+1352;
 },
 _c3FKW() //  [R1]
         { []
         }
     {offset
       c3FKW: // global
           _c3FKV::P64 = P64[Sp + 8];
           _s3yyI::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c3FKZ; else goto c3FL0;
       c3FKZ: // global
           Hp = Hp + 16;
           _s3yzI::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3FLi; else goto c3FLb;
       c3FLb: // global
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = _c3FKV::P64;
           R2 = Hp - 3;
           R1 = _s3yyI::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3FL0: // global
           Hp = Hp + 16;
           _s3yzI::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3FLi; else goto c3FLh;
       c3FLi: // global
           HpAlloc = 16;
           R1 = _s3yzI::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FLh: // global
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = _c3FKV::P64;
           R2 = Hp - 5;
           R1 = _s3yyI::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FKW_info" {
     block_c3FKW_info:
         const _c3FKW;
         const 2;
         const 30;
 },
 section ""relreadonly" . u3FN1_srtd" {
     u3FN1_srtd:
         const S3yFW_srt+128;
         const 154;
         const 1;
         const 0;
         const 33554432;
 },
 sat_s3yzO_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FLn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3FLo; else goto c3FLp;
       c3FLo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FLp: // global
           I64[Sp - 24] = block_c3FKL_info;
           _s3yzE::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s3yzE::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.isSymbolChar_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yzO_info" {
     sat_s3yzO_info:
         const sat_s3yzO_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3FN1_srtd;
 },
 section ""relreadonly" . u3FN2_srtd" {
     u3FN2_srtd:
         const S3yFW_srt+128;
         const 154;
         const 1;
         const 0;
         const 33554432;
 },
 _c3FKL() //  [R1]
         { []
         }
     {offset
       c3FKL: // global
           if (R1 & 7 == 1) goto c3FLk; else goto c3FLl;
       c3FLk: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FLl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FLx; else goto c3FLw;
       c3FLx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FLw: // global
           I64[Hp - 16] = sat_s3yzL_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3FLs_info;
           R3 = Hp - 15;
           R2 = Text.Read.Lex.isSymbolChar_closure+1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FKL_info" {
     block_c3FKL_info:
         const _c3FKL;
         const 2;
         const 18446744069414584350;
         const u3FN2_srtd;
 },
 _c3FLs() //  [R1]
         { []
         }
     {offset
       c3FLs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FLA; else goto c3FLz;
       c3FLA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FLz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FLs_info" {
     block_c3FLs_info:
         const _c3FLs;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3FN3_srtd" {
     u3FN3_srtd:
         const S3yFW_srt+128;
         const 154;
         const 576460752303423489;
         const 8;
         const 58720768;
 },
 sat_s3yAd_entry() //  [R1]
         { []
         }
     {offset
       c3FLC: // global
           _s3yAd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FLD; else goto c3FLE;
       c3FLE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3FLG; else goto c3FLF;
       c3FLG: // global
           HpAlloc = 56;
           goto c3FLD;
       c3FLD: // global
           R1 = _s3yAd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FLF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAd::P64;
           _s3yyI::P64 = P64[_s3yAd::P64 + 16];
           I64[Hp - 48] = sat_s3yAc_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yzO_info;
           P64[Hp - 16] = _s3yyI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yAd_info" {
     sat_s3yAd_info:
         const sat_s3yAd_entry;
         const 1;
         const 18446744069414584336;
         const u3FN3_srtd;
 },
 sat_s3yzC_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FLS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3FLT; else goto c3FLU;
       c3FLT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FLU: // global
           I64[Sp - 24] = block_c3FLM_info;
           R4 = Text.Read.Lex.isSymbolChar3_closure;
           R3 = R2;
           _s3yzy::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s3yzy::P64;
           Sp = Sp - 24;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yzC_info" {
     sat_s3yzC_info:
         const sat_s3yzC_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3yFW_srt+1360;
 },
 _c3FLM() //  [R1]
         { []
         }
     {offset
       c3FLM: // global
           if (R1 & 7 == 1) goto c3FLP; else goto c3FLQ;
       c3FLP: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FLQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3FM4; else goto c3FM3;
       c3FM4: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FM3: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = Hp - 30;
           R2 = Hp - 5;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FLM_info" {
     block_c3FLM_info:
         const _c3FLM;
         const 2;
         const 30;
 },
 section ""relreadonly" . u3FN4_srtd" {
     u3FN4_srtd:
         const S3yFW_srt+128;
         const 155;
         const 576460752303423489;
         const 8;
         const 125829632;
 },
 sat_s3yAe_entry() //  [R1]
         { []
         }
     {offset
       c3FM6: // global
           _s3yAe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FM7; else goto c3FM8;
       c3FM8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3FMa; else goto c3FM9;
       c3FMa: // global
           HpAlloc = 56;
           goto c3FM7;
       c3FM7: // global
           R1 = _s3yAe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FM9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAe::P64;
           _s3yyI::P64 = P64[_s3yAe::P64 + 16];
           I64[Hp - 48] = sat_s3yAd_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yzC_info;
           P64[Hp - 16] = _s3yyI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yAe_info" {
     sat_s3yAe_info:
         const sat_s3yAe_entry;
         const 1;
         const 18446744069414584336;
         const u3FN4_srtd;
 },
 sat_s3yzw_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FMj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FMk; else goto c3FMl;
       c3FMk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FMl: // global
           I64[Sp - 16] = block_c3FMg_info;
           _s3yzr::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yzr::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FMt; else goto c3FMh;
       u3FMt: // global
           call _c3FMg(R1) args: 0, res: 0, upd: 0;
       c3FMh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yzw_info" {
     sat_s3yzw_info:
         const sat_s3yzw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FMg() //  [R1]
         { []
         }
     {offset
       c3FMg: // global
           if (I64[R1 + 7] == 34) goto c3FMs; else goto c3FMr;
       c3FMs: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FMr: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FMg_info" {
     block_c3FMg_info:
         const _c3FMg;
         const 1;
         const 30;
 },
 section ""relreadonly" . u3FN5_srtd" {
     u3FN5_srtd:
         const S3yFW_srt+128;
         const 155;
         const 576460752303423489;
         const 8;
         const 126091776;
 },
 sat_s3yAf_entry() //  [R1]
         { []
         }
     {offset
       c3FMv: // global
           _s3yAf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FMw; else goto c3FMx;
       c3FMx: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3FMz; else goto c3FMy;
       c3FMz: // global
           HpAlloc = 80;
           goto c3FMw;
       c3FMw: // global
           R1 = _s3yAf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FMy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAf::P64;
           _s3yyI::P64 = P64[_s3yAf::P64 + 16];
           I64[Hp - 72] = lvl119_s3yzr_info;
           P64[Hp - 56] = _s3yyI::P64;
           I64[Hp - 48] = sat_s3yAe_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yzw_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yAf_info" {
     sat_s3yAf_info:
         const sat_s3yAf_entry;
         const 1;
         const 18446744069414584336;
         const u3FN5_srtd;
 },
 sat_s3yzp_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FMI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FMJ; else goto c3FMK;
       c3FMJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FMK: // global
           I64[Sp - 16] = block_c3FMF_info;
           _s3yzk::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yzk::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FMS; else goto c3FMG;
       u3FMS: // global
           call _c3FMF(R1) args: 0, res: 0, upd: 0;
       c3FMG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yzp_info" {
     sat_s3yzp_info:
         const sat_s3yzp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FMF() //  [R1]
         { []
         }
     {offset
       c3FMF: // global
           if (I64[R1 + 7] == 39) goto c3FMR; else goto c3FMQ;
       c3FMR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FMQ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FMF_info" {
     block_c3FMF_info:
         const _c3FMF;
         const 1;
         const 30;
 },
 section ""relreadonly" . u3FN6_srtd" {
     u3FN6_srtd:
         const S3yFW_srt+128;
         const 156;
         const 576460752303423489;
         const 8;
         const 260310528;
 },
 Text.Read.Lex.expect2_entry() //  [R2]
         { []
         }
     {offset
       c3FMU: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3FMY; else goto c3FMX;
       c3FMY: // global
           HpAlloc = 152;
           R2 = R2;
           R1 = Text.Read.Lex.expect2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FMX: // global
           I64[Hp - 144] = $wk_s3yyJ_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = k1_s3yz2_info;
           P64[Hp - 120] = Hp - 142;
           I64[Hp - 112] = lvl116_s3yz7_info;
           P64[Hp - 96] = Hp - 127;
           I64[Hp - 88] = lvl117_s3yz8_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = Hp - 112;
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 56] = Hp - 87;
           I64[Hp - 48] = sat_s3yAf_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3yzp_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.expect2_info" {
     Text.Read.Lex.expect2_info:
         const Text.Read.Lex.expect2_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3FN6_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.347913699 UTC

[section ""data" . Text.Read.Lex.$wlex_closure" {
     Text.Read.Lex.$wlex_closure:
         const Text.Read.Lex.$wlex_info;
         const 0;
 },
 lvl117_s3yAi_entry() //  [R1]
         { []
         }
     {offset
       c3FQU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FQV; else goto c3FQW;
       c3FQV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FQW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3yAi_info" {
     lvl117_s3yAi_info:
         const lvl117_s3yAi_entry;
         const 1;
         const 16;
 },
 sat_s3yAp_entry() //  [R1]
         { []
         }
     {offset
       c3FR1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FR2; else goto c3FR3;
       c3FR2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FR3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yAp_info" {
     sat_s3yAp_info:
         const sat_s3yAp_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+1368;
 },
 sat_s3yAn_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FRg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FRh; else goto c3FRi;
       c3FRh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FRi: // global
           I64[Sp - 16] = block_c3FR9_info;
           _s3yAi::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yAi::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FRp; else goto c3FRa;
       u3FRp: // global
           call _c3FR9(R1) args: 0, res: 0, upd: 0;
       c3FRa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yAn_info" {
     sat_s3yAn_info:
         const sat_s3yAn_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FR9() //  [R1]
         { []
         }
     {offset
       c3FR9: // global
           if (R1 & 7 == 1) goto c3FRd; else goto c3FRe;
       c3FRd: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FRe: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FR9_info" {
     block_c3FR9_info:
         const _c3FR9;
         const 1;
         const 30;
 },
 lvl116_s3yAh_entry() //  [R1]
         { []
         }
     {offset
       c3FRr: // global
           _s3yAh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FRs; else goto c3FRt;
       c3FRt: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3FRv; else goto c3FRu;
       c3FRv: // global
           HpAlloc = 80;
           goto c3FRs;
       c3FRs: // global
           R1 = _s3yAh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FRu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAh::P64;
           _s3yAg::P64 = P64[_s3yAh::P64 + 16];
           I64[Hp - 72] = lvl117_s3yAi_info;
           P64[Hp - 56] = _s3yAg::P64;
           I64[Hp - 48] = sat_s3yAp_info;
           P64[Hp - 32] = _s3yAg::P64;
           I64[Hp - 24] = sat_s3yAn_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yAh_info" {
     lvl116_s3yAh_info:
         const lvl116_s3yAh_entry;
         const 1;
         const 1125904201809936;
         const S3yFW_srt+1224;
 },
 k_s3yAq_entry() //  [R1]
         { []
         }
     {offset
       c3FRB: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3yAq_info" {
     k_s3yAq_info:
         const k_s3yAq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3yAt_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FRJ: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yAt_info" {
     sat_s3yAt_info:
         const sat_s3yAt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.Read.Lex.$wlex_entry() //  [R2]
         { []
         }
     {offset
       c3FRM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3FRQ; else goto c3FRP;
       c3FRQ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.Read.Lex.$wlex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FRP: // global
           I64[Hp - 48] = lvl116_s3yAh_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3yAq_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3yAt_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wlex_info" {
     Text.Read.Lex.$wlex_info:
         const Text.Read.Lex.$wlex_entry;
         const 0;
         const 3377704015495182;
         const 4294967301;
         const S3yFW_srt+1224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.365437071 UTC

[section ""data" . Text.Read.Lex.lex1_closure" {
     Text.Read.Lex.lex1_closure:
         const Text.Read.Lex.lex1_info;
         const 0;
 },
 Text.Read.Lex.lex1_entry() //  [R2]
         { []
         }
     {offset
       c3FSE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3FSF; else goto c3FSG;
       c3FSF: // global
           R2 = R2;
           R1 = Text.Read.Lex.lex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FSG: // global
           I64[Sp - 8] = block_c3FSB_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wlex_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lex1_info" {
     Text.Read.Lex.lex1_info:
         const Text.Read.Lex.lex1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1376;
 },
 _c3FSB() //  [R1]
         { []
         }
     {offset
       c3FSB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FSJ; else goto c3FSI;
       c3FSJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FSI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FSB_info" {
     block_c3FSB_info:
         const _c3FSB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.371763016 UTC

[section ""data" . Text.Read.Lex.lex_closure" {
     Text.Read.Lex.lex_closure:
         const Text.Read.Lex.lex_info;
         const 0;
 },
 Text.Read.Lex.lex_entry() //  [R2]
         { []
         }
     {offset
       c3FSX: // global
           R2 = R2;
           call Text.Read.Lex.lex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lex_info" {
     Text.Read.Lex.lex_info:
         const Text.Read.Lex.lex_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3yFW_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.380816446 UTC

[section ""data" . Text.Read.Lex.$wexpect_closure" {
     Text.Read.Lex.$wexpect_closure:
         const Text.Read.Lex.$wexpect_info;
         const 0;
 },
 lvl117_s3yAA_entry() //  [R1]
         { []
         }
     {offset
       c3FTg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FTh; else goto c3FTi;
       c3FTh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FTi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3yAA_info" {
     lvl117_s3yAA_info:
         const lvl117_s3yAA_entry;
         const 1;
         const 16;
 },
 lvl118_s3yAB_entry() //  [R1]
         { []
         }
     {offset
       c3FTu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3FTv; else goto c3FTw;
       c3FTv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FTw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3FTn_info;
           _s3yAA::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yAA::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3FTD; else goto c3FTo;
       u3FTD: // global
           call _c3FTn(R1) args: 0, res: 0, upd: 0;
       c3FTo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl118_s3yAB_info" {
     lvl118_s3yAB_info:
         const lvl118_s3yAB_entry;
         const 2;
         const 18;
 },
 _c3FTn() //  [R1]
         { []
         }
     {offset
       c3FTn: // global
           if (R1 & 7 == 7) goto c3FTs; else goto c3FTr;
       c3FTs: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3FTr: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3FTn_info" {
     block_c3FTn_info:
         const _c3FTn;
         const 1;
         const 30;
 },
 sat_s3yAL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FTT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FTU; else goto c3FTV;
       c3FTU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FTV: // global
           I64[Sp - 16] = block_c3FTN_info;
           R3 = P64[R1 + 7];
           R2 = R2;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 16;
           call Text.Read.Lex.$fEqLexeme_$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yAL_info" {
     sat_s3yAL_info:
         const sat_s3yAL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3FTN() //  [R1]
         { []
         }
     {offset
       c3FTN: // global
           if (R1 & 7 == 1) goto c3FTQ; else goto c3FTR;
       c3FTQ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FTR: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FTN_info" {
     block_c3FTN_info:
         const _c3FTN;
         const 1;
         const 30;
 },
 sat_s3yAM_entry() //  [R1]
         { []
         }
     {offset
       c3FU2: // global
           _s3yAM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FU3; else goto c3FU4;
       c3FU4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FU6; else goto c3FU5;
       c3FU6: // global
           HpAlloc = 24;
           goto c3FU3;
       c3FU3: // global
           R1 = _s3yAM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FU5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAM::P64;
           _s3yAx::P64 = P64[_s3yAM::P64 + 16];
           _s3yAA::P64 = P64[_s3yAM::P64 + 24];
           I64[Hp - 16] = sat_s3yAL_info;
           P64[Hp - 8] = _s3yAx::P64;
           P64[Hp] = _s3yAA::P64;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yAM_info" {
     sat_s3yAM_info:
         const sat_s3yAM_entry;
         const 2;
         const 4294967314;
         const S3yFW_srt+1368;
 },
 sat_s3yAH_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FUj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FUk; else goto c3FUl;
       c3FUk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FUl: // global
           I64[Sp - 16] = block_c3FUc_info;
           _s3yAB::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yAB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FUs; else goto c3FUd;
       u3FUs: // global
           call _c3FUc(R1) args: 0, res: 0, upd: 0;
       c3FUd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yAH_info" {
     sat_s3yAH_info:
         const sat_s3yAH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FUc() //  [R1]
         { []
         }
     {offset
       c3FUc: // global
           if (R1 & 7 == 1) goto c3FUg; else goto c3FUh;
       c3FUg: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FUh: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FUc_info" {
     block_c3FUc_info:
         const _c3FUc;
         const 1;
         const 30;
 },
 lvl116_s3yAz_entry() //  [R1]
         { []
         }
     {offset
       c3FUu: // global
           _s3yAz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FUv; else goto c3FUw;
       c3FUw: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3FUy; else goto c3FUx;
       c3FUy: // global
           HpAlloc = 120;
           goto c3FUv;
       c3FUv: // global
           R1 = _s3yAz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FUx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAz::P64;
           _s3yAx::P64 = P64[_s3yAz::P64 + 16];
           _s3yAy::P64 = P64[_s3yAz::P64 + 24];
           I64[Hp - 112] = lvl117_s3yAA_info;
           P64[Hp - 96] = _s3yAy::P64;
           I64[Hp - 88] = lvl118_s3yAB_info;
           P64[Hp - 72] = _s3yAx::P64;
           _c3FTc::P64 = Hp - 112;
           P64[Hp - 64] = _c3FTc::P64;
           I64[Hp - 56] = sat_s3yAM_info;
           P64[Hp - 40] = _s3yAx::P64;
           P64[Hp - 32] = _c3FTc::P64;
           I64[Hp - 24] = sat_s3yAH_info;
           P64[Hp - 16] = Hp - 88;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 56;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yAz_info" {
     lvl116_s3yAz_info:
         const lvl116_s3yAz_entry;
         const 2;
         const 1125904201809938;
         const S3yFW_srt+1224;
 },
 k_s3yAN_entry() //  [R1]
         { []
         }
     {offset
       c3FUE: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3yAN_info" {
     k_s3yAN_info:
         const k_s3yAN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3yAQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FUM: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yAQ_info" {
     sat_s3yAQ_info:
         const sat_s3yAQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.Read.Lex.$wexpect_entry() //  [R2, R3]
         { []
         }
     {offset
       c3FUP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3FUT; else goto c3FUS;
       c3FUT: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wexpect_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3FUS: // global
           I64[Hp - 56] = lvl116_s3yAz_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = k_s3yAN_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = sat_s3yAQ_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wexpect_info" {
     Text.Read.Lex.$wexpect_info:
         const Text.Read.Lex.$wexpect_entry;
         const 0;
         const 10133103456550926;
         const 8589934607;
         const S3yFW_srt+1224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.406401212 UTC

[section ""data" . Text.Read.Lex.expect1_closure" {
     Text.Read.Lex.expect1_closure:
         const Text.Read.Lex.expect1_info;
         const 0;
 },
 Text.Read.Lex.expect1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3FW7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3FW8; else goto c3FW9;
       c3FW8: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.expect1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3FW9: // global
           I64[Sp - 8] = block_c3FW4_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.expect1_info" {
     Text.Read.Lex.expect1_info:
         const Text.Read.Lex.expect1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3yFW_srt+1392;
 },
 _c3FW4() //  [R1]
         { []
         }
     {offset
       c3FW4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FWc; else goto c3FWb;
       c3FWc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FWb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FW4_info" {
     block_c3FW4_info:
         const _c3FW4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.412380754 UTC

[section ""data" . Text.Read.Lex.expect_closure" {
     Text.Read.Lex.expect_closure:
         const Text.Read.Lex.expect_info;
         const 0;
 },
 Text.Read.Lex.expect_entry() //  [R2, R3]
         { []
         }
     {offset
       c3FWq: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.expect1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.expect_info" {
     Text.Read.Lex.expect_info:
         const Text.Read.Lex.expect_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3yFW_srt+1400;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.420003727 UTC

[section ""data" . Text.Read.Lex.$whsLex_closure" {
     Text.Read.Lex.$whsLex_closure:
         const Text.Read.Lex.$whsLex_info;
         const 0;
 },
 lvl117_s3yAX_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FWK: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl117_s3yAX_info" {
     lvl117_s3yAX_info:
         const lvl117_s3yAX_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3yB7_entry() //  [R1]
         { []
         }
     {offset
       c3FWX: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yB7_info" {
     sat_s3yB7_info:
         const sat_s3yB7_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3yB8_entry() //  [R1]
         { []
         }
     {offset
       c3FX0: // global
           _s3yB8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FX1; else goto c3FX2;
       c3FX2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FX4; else goto c3FX3;
       c3FX4: // global
           HpAlloc = 16;
           goto c3FX1;
       c3FX1: // global
           R1 = _s3yB8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FX3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yB8::P64;
           _s3yAZ::P64 = P64[_s3yB8::P64 + 16];
           I64[Hp - 8] = sat_s3yB7_info;
           P64[Hp] = _s3yAZ::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3yB8_info" {
     sat_s3yB8_info:
         const sat_s3yB8_entry;
         const 1;
         const 4294967312;
         const S3yFW_srt+1368;
 },
 sat_s3yB4_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FXh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FXi; else goto c3FXj;
       c3FXi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FXj: // global
           I64[Sp - 16] = block_c3FXa_info;
           _s3yAZ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yAZ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FXq; else goto c3FXb;
       u3FXq: // global
           call _c3FXa(R1) args: 0, res: 0, upd: 0;
       c3FXb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yB4_info" {
     sat_s3yB4_info:
         const sat_s3yB4_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3FXa() //  [R1]
         { []
         }
     {offset
       c3FXa: // global
           if (R1 & 7 == 1) goto c3FXe; else goto c3FXf;
       c3FXe: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FXf: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FXa_info" {
     block_c3FXa_info:
         const _c3FXa;
         const 1;
         const 30;
 },
 lvl116_s3yAW_entry() //  [R1]
         { []
         }
     {offset
       c3FXu: // global
           _s3yAW::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3FXv; else goto c3FXw;
       c3FXw: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3FXy; else goto c3FXx;
       c3FXy: // global
           HpAlloc = 96;
           goto c3FXv;
       c3FXv: // global
           R1 = _s3yAW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FXx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAW::P64;
           _s3yAV::P64 = P64[_s3yAW::P64 + 16];
           I64[Hp - 88] = lvl117_s3yAX_info;
           P64[Hp - 80] = _s3yAV::P64;
           I64[Hp - 72] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 64] = Hp - 87;
           P64[Hp - 56] = Text.ParserCombinators.ReadP.Fail_closure+3;
           I64[Hp - 48] = sat_s3yB8_info;
           _c3FWN::P64 = Hp - 68;
           P64[Hp - 32] = _c3FWN::P64;
           I64[Hp - 24] = sat_s3yB4_info;
           P64[Hp - 16] = _c3FWN::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 24] = block_c3FXs_info;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3yAW_info" {
     lvl116_s3yAW_info:
         const lvl116_s3yAW_entry;
         const 1;
         const 37154701220773904;
         const S3yFW_srt+1224;
 },
 _c3FXs() //  [R1]
         { []
         }
     {offset
       c3FXs: // global
           R3 = R1;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3FXs_info" {
     block_c3FXs_info:
         const _c3FXs;
         const 0;
         const 4294967326;
         const S3yFW_srt+1408;
 },
 k_s3yBa_entry() //  [R1]
         { []
         }
     {offset
       c3FXH: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3yBa_info" {
     k_s3yBa_info:
         const k_s3yBa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3yBd_entry() //  [R1, R2]
         { []
         }
     {offset
       c3FXP: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3yBd_info" {
     sat_s3yBd_info:
         const sat_s3yBd_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.Read.Lex.$whsLex_entry() //  [R2]
         { []
         }
     {offset
       c3FXS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3FXW; else goto c3FXV;
       c3FXW: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.Read.Lex.$whsLex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FXV: // global
           I64[Hp - 48] = lvl116_s3yAW_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3yBa_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3yBd_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$whsLex_info" {
     Text.Read.Lex.$whsLex_info:
         const Text.Read.Lex.$whsLex_entry;
         const 0;
         const 109212295258701838;
         const 4294967301;
         const S3yFW_srt+1224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.441059901 UTC

[section ""data" . Text.Read.Lex.hsLex1_closure" {
     Text.Read.Lex.hsLex1_closure:
         const Text.Read.Lex.hsLex1_info;
         const 0;
 },
 Text.Read.Lex.hsLex1_entry() //  [R2]
         { []
         }
     {offset
       c3FYP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3FYQ; else goto c3FYR;
       c3FYQ: // global
           R2 = R2;
           R1 = Text.Read.Lex.hsLex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FYR: // global
           I64[Sp - 8] = block_c3FYM_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$whsLex_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.hsLex1_info" {
     Text.Read.Lex.hsLex1_info:
         const Text.Read.Lex.hsLex1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3yFW_srt+1416;
 },
 _c3FYM() //  [R1]
         { []
         }
     {offset
       c3FYM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FYU; else goto c3FYT;
       c3FYU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FYT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3FYM_info" {
     block_c3FYM_info:
         const _c3FYM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.447383832 UTC

[section ""data" . Text.Read.Lex.hsLex_closure" {
     Text.Read.Lex.hsLex_closure:
         const Text.Read.Lex.hsLex_info;
         const 0;
 },
 Text.Read.Lex.hsLex_entry() //  [R2]
         { []
         }
     {offset
       c3FZ8: // global
           R2 = R2;
           call Text.Read.Lex.hsLex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.hsLex_info" {
     Text.Read.Lex.hsLex_info:
         const Text.Read.Lex.hsLex_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3yFW_srt+1424;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.451699155 UTC

[section ""data" . Text.Read.Lex.MkNumber_closure" {
     Text.Read.Lex.MkNumber_closure:
         const Text.Read.Lex.MkNumber_info;
 },
 Text.Read.Lex.MkNumber_entry() //  [R2, R3]
         { []
         }
     {offset
       c3FZk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FZo; else goto c3FZn;
       c3FZo: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.MkNumber_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3FZn: // global
           I64[Hp - 16] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.MkNumber_info" {
     Text.Read.Lex.MkNumber_info:
         const Text.Read.Lex.MkNumber_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.456610425 UTC

[section ""data" . Text.Read.Lex.MkDecimal_closure" {
     Text.Read.Lex.MkDecimal_closure:
         const Text.Read.Lex.MkDecimal_info;
 },
 Text.Read.Lex.MkDecimal_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3FZz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3FZD; else goto c3FZC;
       c3FZD: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.MkDecimal_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3FZC: // global
           I64[Hp - 24] = Text.Read.Lex.MkDecimal_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.MkDecimal_info" {
     Text.Read.Lex.MkDecimal_info:
         const Text.Read.Lex.MkDecimal_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.460831671 UTC

[section ""data" . Text.Read.Lex.Char_closure" {
     Text.Read.Lex.Char_closure:
         const Text.Read.Lex.Char_info;
 },
 Text.Read.Lex.Char_entry() //  [R2]
         { []
         }
     {offset
       c3FZO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FZS; else goto c3FZR;
       c3FZS: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Char_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FZR: // global
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Char_info" {
     Text.Read.Lex.Char_info:
         const Text.Read.Lex.Char_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.465550892 UTC

[section ""data" . Text.Read.Lex.String_closure" {
     Text.Read.Lex.String_closure:
         const Text.Read.Lex.String_info;
 },
 Text.Read.Lex.String_entry() //  [R2]
         { []
         }
     {offset
       c3G03: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3G07; else goto c3G06;
       c3G07: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.String_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3G06: // global
           I64[Hp - 8] = Text.Read.Lex.String_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.String_info" {
     Text.Read.Lex.String_info:
         const Text.Read.Lex.String_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.47032554 UTC

[section ""data" . Text.Read.Lex.Punc_closure" {
     Text.Read.Lex.Punc_closure:
         const Text.Read.Lex.Punc_info;
 },
 Text.Read.Lex.Punc_entry() //  [R2]
         { []
         }
     {offset
       c3G0i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3G0m; else goto c3G0l;
       c3G0m: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Punc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3G0l: // global
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Punc_info" {
     Text.Read.Lex.Punc_info:
         const Text.Read.Lex.Punc_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.474904966 UTC

[section ""data" . Text.Read.Lex.Ident_closure" {
     Text.Read.Lex.Ident_closure:
         const Text.Read.Lex.Ident_info;
 },
 Text.Read.Lex.Ident_entry() //  [R2]
         { []
         }
     {offset
       c3G0x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3G0B; else goto c3G0A;
       c3G0B: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Ident_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3G0A: // global
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = R2;
           R1 = Hp - 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Ident_info" {
     Text.Read.Lex.Ident_info:
         const Text.Read.Lex.Ident_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.478978015 UTC

[section ""data" . Text.Read.Lex.Symbol_closure" {
     Text.Read.Lex.Symbol_closure:
         const Text.Read.Lex.Symbol_info;
 },
 Text.Read.Lex.Symbol_entry() //  [R2]
         { []
         }
     {offset
       c3G0M: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3G0Q; else goto c3G0P;
       c3G0Q: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Symbol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3G0P: // global
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Symbol_info" {
     Text.Read.Lex.Symbol_info:
         const Text.Read.Lex.Symbol_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.483678688 UTC

[section ""data" . Text.Read.Lex.Number_closure" {
     Text.Read.Lex.Number_closure:
         const Text.Read.Lex.Number_info;
 },
 Text.Read.Lex.Number_entry() //  [R2]
         { []
         }
     {offset
       c3G11: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3G15; else goto c3G14;
       c3G15: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Number_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3G14: // global
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = R2;
           R1 = Hp - 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Number_info" {
     Text.Read.Lex.Number_info:
         const Text.Read.Lex.Number_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.487755751 UTC

[section ""data" . Text.Read.Lex.EOF_closure" {
     Text.Read.Lex.EOF_closure:
         const Text.Read.Lex.EOF_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.489905053 UTC

[section ""cstring" . i3CKI_str" {
     i3CKI_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,77,107,78,117,109,98,101,114]
 },
 Text.Read.Lex.MkNumber_con_entry() //  [R1]
         { []
         }
     {offset
       c3G1c: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.MkNumber_con_info" {
     Text.Read.Lex.MkNumber_con_info:
         const Text.Read.Lex.MkNumber_con_entry;
         const 2;
         const 4;
         const i3CKI_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.493615645 UTC

[section ""cstring" . i3CKK_str" {
     i3CKK_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,77,107,68,101,99,105,109,97,108]
 },
 Text.Read.Lex.MkDecimal_con_entry() //  [R1]
         { []
         }
     {offset
       c3G1i: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.MkDecimal_con_info" {
     Text.Read.Lex.MkDecimal_con_info:
         const Text.Read.Lex.MkDecimal_con_entry;
         const 3;
         const 4294967297;
         const i3CKK_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.496858807 UTC

[section ""cstring" . i3CKM_str" {
     i3CKM_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,67,104,97,114]
 },
 Text.Read.Lex.Char_con_entry() //  [R1]
         { []
         }
     {offset
       c3G1o: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Char_con_info" {
     Text.Read.Lex.Char_con_info:
         const Text.Read.Lex.Char_con_entry;
         const 1;
         const 2;
         const i3CKM_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.50042298 UTC

[section ""cstring" . i3CKO_str" {
     i3CKO_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,83,116,114,105,110,103]
 },
 Text.Read.Lex.String_con_entry() //  [R1]
         { []
         }
     {offset
       c3G1u: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.String_con_info" {
     Text.Read.Lex.String_con_info:
         const Text.Read.Lex.String_con_entry;
         const 1;
         const 4294967298;
         const i3CKO_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.504163744 UTC

[section ""cstring" . i3CKQ_str" {
     i3CKQ_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,80,117,110,99]
 },
 Text.Read.Lex.Punc_con_entry() //  [R1]
         { []
         }
     {offset
       c3G1A: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Punc_con_info" {
     Text.Read.Lex.Punc_con_info:
         const Text.Read.Lex.Punc_con_entry;
         const 1;
         const 8589934594;
         const i3CKQ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.507467699 UTC

[section ""cstring" . i3CKS_str" {
     i3CKS_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,73,100,101,110,116]
 },
 Text.Read.Lex.Ident_con_entry() //  [R1]
         { []
         }
     {offset
       c3G1G: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Ident_con_info" {
     Text.Read.Lex.Ident_con_info:
         const Text.Read.Lex.Ident_con_entry;
         const 1;
         const 12884901890;
         const i3CKS_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.511124318 UTC

[section ""cstring" . i3CKU_str" {
     i3CKU_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,83,121,109,98,111,108]
 },
 Text.Read.Lex.Symbol_con_entry() //  [R1]
         { []
         }
     {offset
       c3G1M: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Symbol_con_info" {
     Text.Read.Lex.Symbol_con_info:
         const Text.Read.Lex.Symbol_con_entry;
         const 1;
         const 17179869186;
         const i3CKU_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.51511431 UTC

[section ""cstring" . i3CKW_str" {
     i3CKW_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,78,117,109,98,101,114]
 },
 Text.Read.Lex.Number_con_entry() //  [R1]
         { []
         }
     {offset
       c3G1S: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Number_con_info" {
     Text.Read.Lex.Number_con_info:
         const Text.Read.Lex.Number_con_entry;
         const 1;
         const 21474836482;
         const i3CKW_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.518748955 UTC

[section ""cstring" . i3CKY_str" {
     i3CKY_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,69,79,70]
 },
 Text.Read.Lex.EOF_con_entry() //  [R1]
         { []
         }
     {offset
       c3G1Y: // global
           R1 = R1 + 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.EOF_con_info" {
     Text.Read.Lex.EOF_con_info:
         const Text.Read.Lex.EOF_con_entry;
         const 4294967296;
         const 25769803779;
         const i3CKY_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:14.523490576 UTC

[section ""relreadonly" . S3yFW_srt" {
     S3yFW_srt:
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.Show.$fShowInteger_closure;
         const Text.Read.Lex.$fShowLexeme8_closure;
         const Text.Read.Lex.$w$cshowsPrec_closure;
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_closure;
         const Text.Read.Lex.$fShowNumber_$cshow_closure;
         const Text.Read.Lex.$fShowNumber1_closure;
         const Text.Read.Lex.$fShowLexeme4_closure;
         const GHC.Show.$w$cshowsPrec3_closure;
         const GHC.Show.showLitString_closure;
         const Text.Read.Lex.$fShowLexeme6_closure;
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure;
         const Text.Read.Lex.$fShowLexeme3_closure;
         const Text.Read.Lex.$fShowLexeme_$cshow_closure;
         const Text.Read.Lex.$fShowLexeme1_closure;
         const GHC.Unicode.$wgeneralCategory_closure;
         const Text.Read.Lex.isSymbolChar_closure;
         const Text.Read.Lex.isSymbolChar1_closure;
         const Text.Read.Lex.isSymbolChar3_closure;
         const lvl1_r3y8U_closure;
         const $wisIdfChar_r3y8V_closure;
         const isIdfChar_r3y8W_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const combine_r3y9t_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const lvl3_r3y9s_closure;
         const Text.Read.Lex.numberToFixed_go_closure;
         const Text.Read.Lex.numberToFixed2_closure;
         const Text.Read.Lex.valInteger_closure;
         const Text.Read.Lex.$w$sreadIntP_closure;
         const Text.Read.Lex.readIntP1_closure;
         const Text.Read.Lex.$wreadIntP_closure;
         const Text.Read.Lex.readIntP2_closure;
         const sat_s3yjm_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.numberToInteger_closure;
         const sat_s3yjF_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.^_$s^_closure;
         const lvl4_r3y9u_closure;
         const $wfracExp_r3y9v_closure;
         const Text.Read.Lex.numberToFixed_integerTake_closure;
         const Text.Read.Lex.numberToFixed_closure;
         const Text.Read.Lex.$wnumberToRational_closure;
         const Text.Read.Lex.numberToRational_closure;
         const sat_s3yll_closure;
         const sat_s3ylr_closure;
         const Text.Read.Lex.$wnumberToRangedRational_closure;
         const Text.Read.Lex.numberToRangedRational2_closure;
         const Text.Read.Lex.numberToRangedRational4_closure;
         const Text.Read.Lex.numberToRangedRational5_closure;
         const Text.Read.Lex.numberToRangedRational_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const sat_s3ymo_closure;
         const sat_s3ymq_closure;
         const Text.Read.Lex.$w$svalDig_closure;
         const Text.Read.Lex.readDecP2_closure;
         const Text.Read.Lex.readDecP3_closure;
         const Text.Read.Lex.readDecP4_closure;
         const Text.Read.Lex.$wvalDig_closure;
         const Text.Read.Lex.$w$sreadIntP'_closure;
         const Text.Read.Lex.$wreadIntP'_closure;
         const Text.Read.Lex.readDecP6_closure;
         const Text.Read.Lex.readOctP1_closure;
         const Text.Read.Lex.readOctP2_closure;
         const Text.Read.Lex.readDecP1_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.readDecP5_closure;
         const Text.Read.Lex.readHexP1_closure;
         const Text.Read.Lex.readHexP2_closure;
         const $wlexDigits_r3y9x_closure;
         const $wlexHexOct_r3y9A_closure;
         const lexHexOct_r3y9B_closure;
         const $wlexFrac_r3y9D_closure;
         const lexFrac_r3y9E_closure;
         const sat_s3yqt_closure;
         const m4_r3y9J_closure;
         const w1_r3ybW_closure;
         const m2_r3y9G_closure;
         const w_r3ybX_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const lvl46_r3ybY_closure;
         const m6_r3y9M_closure;
         const lvl47_r3ybZ_closure;
         const m8_r3y9P_closure;
         const lvl48_r3yc0_closure;
         const m10_r3y9S_closure;
         const lvl49_r3yc1_closure;
         const m12_r3y9V_closure;
         const lvl50_r3yc2_closure;
         const m14_r3y9Y_closure;
         const lvl51_r3yc3_closure;
         const m16_r3ya1_closure;
         const lvl52_r3yc4_closure;
         const m18_r3ya4_closure;
         const lvl53_r3yc5_closure;
         const m20_r3ya7_closure;
         const lvl54_r3yc6_closure;
         const m22_r3yaa_closure;
         const lvl55_r3yc7_closure;
         const m24_r3yad_closure;
         const lvl56_r3yc8_closure;
         const m26_r3yag_closure;
         const lvl57_r3yc9_closure;
         const m28_r3yaj_closure;
         const lvl58_r3yca_closure;
         const m30_r3yam_closure;
         const lvl59_r3ycb_closure;
         const m32_r3yap_closure;
         const lvl60_r3ycc_closure;
         const m34_r3yas_closure;
         const lvl61_r3ycd_closure;
         const m36_r3yav_closure;
         const lvl62_r3yce_closure;
         const m38_r3yay_closure;
         const lvl63_r3ycf_closure;
         const m40_r3yaB_closure;
         const lvl64_r3ycg_closure;
         const m42_r3yaE_closure;
         const lvl65_r3ych_closure;
         const m44_r3yaH_closure;
         const lvl66_r3yci_closure;
         const m46_r3yaK_closure;
         const lvl67_r3ycj_closure;
         const m48_r3yaN_closure;
         const lvl68_r3yck_closure;
         const m50_r3yaQ_closure;
         const lvl69_r3ycl_closure;
         const m52_r3yaT_closure;
         const lvl70_r3ycm_closure;
         const m54_r3yaW_closure;
         const lvl71_r3ycn_closure;
         const m56_r3yaZ_closure;
         const lvl72_r3yco_closure;
         const m58_r3yb2_closure;
         const lvl73_r3ycp_closure;
         const m60_r3yb5_closure;
         const lvl74_r3ycq_closure;
         const m62_r3yb8_closure;
         const lvl75_r3ycr_closure;
         const m64_r3ybb_closure;
         const lvl76_r3ycs_closure;
         const m66_r3ybe_closure;
         const lvl77_r3yct_closure;
         const m68_r3ybh_closure;
         const lvl78_r3ycu_closure;
         const GHC.Char.$wlvl_closure;
         const lvl7_r3ybj_closure;
         const Text.ParserCombinators.ReadP.choice_closure;
         const lvl111_r3yd1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Text.Read.Lex.lexChar2_closure;
         const Text.Read.Lex.$wconsumeEmpties_closure;
         const Text.Read.Lex.$wlvl_closure;
         const Text.Read.Lex.lexChar3_closure;
         const Text.Read.Lex.lexChar5_closure;
         const Text.Read.Lex.$wlexChar_closure;
         const Text.Read.Lex.lexChar1_closure;
         const lexStrItem_r3yd4_closure;
         const body_r3yd5_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.valInteger_closure;
         const lexExp_r3yd6_closure;
         const $wlexDecNumber_r3yd9_closure;
         const lexDecNumber_r3yda_closure;
         const isIdfChar_r3y8W_closure;
         const reserved_ops29_r3y9q_closure;
         const Text.Read.Lex.isSymbolChar3_closure;
         const Text.Read.Lex.expect2_closure;
         const Text.Read.Lex.$wlex_closure;
         const Text.Read.Lex.lex1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Text.Read.Lex.expect1_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const Text.Read.Lex.$whsLex_closure;
         const Text.Read.Lex.hsLex1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.024295752 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:58:22.025338204 UTC

[section ""cstring" . Text.Read.Lex.$trModule4_bytes" {
     Text.Read.Lex.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.027037676 UTC

[section ""data" . Text.Read.Lex.$trModule3_closure" {
     Text.Read.Lex.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.028792823 UTC

[section ""cstring" . Text.Read.Lex.$trModule2_bytes" {
     Text.Read.Lex.$trModule2_bytes:
         I8[] [84,101,120,116,46,82,101,97,100,46,76,101,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.030611248 UTC

[section ""data" . Text.Read.Lex.$trModule1_closure" {
     Text.Read.Lex.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.032327334 UTC

[section ""data" . Text.Read.Lex.$trModule_closure" {
     Text.Read.Lex.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.Read.Lex.$trModule3_closure+1;
         const Text.Read.Lex.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.034113176 UTC

[section ""data" . $krep_r3y8E_closure" {
     $krep_r3y8E_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.035861863 UTC

[section ""data" . $krep1_r3y8F_closure" {
     $krep1_r3y8F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.037675445 UTC

[section ""data" . $krep2_r3y8G_closure" {
     $krep2_r3y8G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.039369901 UTC

[section ""data" . $krep3_r3y8H_closure" {
     $krep3_r3y8H_closure:
         const :_con_info;
         const $krep_r3y8E_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.041081506 UTC

[section ""data" . $krep4_r3y8I_closure" {
     $krep4_r3y8I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_r3y8H_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.042873142 UTC

[section ""data" . $krep5_r3y8J_closure" {
     $krep5_r3y8J_closure:
         const :_con_info;
         const $krep1_r3y8F_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.04460674 UTC

[section ""data" . $krep6_r3y8K_closure" {
     $krep6_r3y8K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep5_r3y8J_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.046423183 UTC

[section ""data" . $krep7_r3y8L_closure" {
     $krep7_r3y8L_closure:
         const :_con_info;
         const $krep6_r3y8K_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.049218474 UTC

[section ""data" . $krep8_r3y8M_closure" {
     $krep8_r3y8M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep7_r3y8L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.051071544 UTC

[section ""data" . $krep9_r3y8N_closure" {
     $krep9_r3y8N_closure:
         const :_con_info;
         const $krep2_r3y8G_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.05284396 UTC

[section ""data" . $krep10_r3y8O_closure" {
     $krep10_r3y8O_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep9_r3y8N_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.055182631 UTC

[section ""cstring" . Text.Read.Lex.$tcNumber2_bytes" {
     Text.Read.Lex.$tcNumber2_bytes:
         I8[] [78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.056891868 UTC

[section ""data" . Text.Read.Lex.$tcNumber1_closure" {
     Text.Read.Lex.$tcNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tcNumber2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.058680898 UTC

[section ""data" . Text.Read.Lex.$tcNumber_closure" {
     Text.Read.Lex.$tcNumber_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tcNumber1_closure+1;
         const GHC.Types.krep$*_closure;
         const 309030926258572567;
         const 15861928963352354800;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.060467028 UTC

[section ""data" . $krep11_r3y8P_closure" {
     $krep11_r3y8P_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Read.Lex.$tcNumber_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.062246727 UTC

[section ""data" . $krep12_r3y8Q_closure" {
     $krep12_r3y8Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3y8I_closure+1;
         const $krep11_r3y8P_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.064060138 UTC

[section ""data" . $krep13_r3y8R_closure" {
     $krep13_r3y8R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r3y8M_closure+1;
         const $krep12_r3y8Q_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.065833743 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal1_closure" {
     Text.Read.Lex.$tc'MkDecimal1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r3y8K_closure+1;
         const $krep13_r3y8R_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.067593939 UTC

[section ""cstring" . Text.Read.Lex.$tc'MkDecimal3_bytes" {
     Text.Read.Lex.$tc'MkDecimal3_bytes:
         I8[] [39,77,107,68,101,99,105,109,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.06940989 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal2_closure" {
     Text.Read.Lex.$tc'MkDecimal2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'MkDecimal3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.071207561 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal_closure" {
     Text.Read.Lex.$tc'MkDecimal_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'MkDecimal2_closure+1;
         const Text.Read.Lex.$tc'MkDecimal1_closure+4;
         const 3768064156751246198;
         const 12661213050981530502;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.072982743 UTC

[section ""data" . $krep14_r3y8S_closure" {
     $krep14_r3y8S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r3y8K_closure+1;
         const $krep11_r3y8P_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.075732992 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber1_closure" {
     Text.Read.Lex.$tc'MkNumber1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3y8F_closure+1;
         const $krep14_r3y8S_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.077466439 UTC

[section ""cstring" . Text.Read.Lex.$tc'MkNumber3_bytes" {
     Text.Read.Lex.$tc'MkNumber3_bytes:
         I8[] [39,77,107,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.079136643 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber2_closure" {
     Text.Read.Lex.$tc'MkNumber2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'MkNumber3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.080852712 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber_closure" {
     Text.Read.Lex.$tc'MkNumber_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'MkNumber2_closure+1;
         const Text.Read.Lex.$tc'MkNumber1_closure+4;
         const 13396293166029931455;
         const 9655480518931438202;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.082696103 UTC

[section ""cstring" . Text.Read.Lex.$tcLexeme2_bytes" {
     Text.Read.Lex.$tcLexeme2_bytes:
         I8[] [76,101,120,101,109,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.084389746 UTC

[section ""data" . Text.Read.Lex.$tcLexeme1_closure" {
     Text.Read.Lex.$tcLexeme1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tcLexeme2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.086704841 UTC

[section ""data" . Text.Read.Lex.$tcLexeme_closure" {
     Text.Read.Lex.$tcLexeme_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tcLexeme1_closure+1;
         const GHC.Types.krep$*_closure;
         const 80462090517814070;
         const 11862718491065697853;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.088515148 UTC

[section ""data" . Text.Read.Lex.$tc'EOF1_closure" {
     Text.Read.Lex.$tc'EOF1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Read.Lex.$tcLexeme_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.090296592 UTC

[section ""cstring" . Text.Read.Lex.$tc'EOF3_bytes" {
     Text.Read.Lex.$tc'EOF3_bytes:
         I8[] [39,69,79,70]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.091904388 UTC

[section ""data" . Text.Read.Lex.$tc'EOF2_closure" {
     Text.Read.Lex.$tc'EOF2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'EOF3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.09372213 UTC

[section ""data" . Text.Read.Lex.$tc'EOF_closure" {
     Text.Read.Lex.$tc'EOF_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'EOF2_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3510729917506789415;
         const 3927434500167946503;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.095560062 UTC

[section ""data" . Text.Read.Lex.$tc'Ident1_closure" {
     Text.Read.Lex.$tc'Ident1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r3y8O_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.097334602 UTC

[section ""cstring" . Text.Read.Lex.$tc'String2_bytes" {
     Text.Read.Lex.$tc'String2_bytes:
         I8[] [39,83,116,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.099035616 UTC

[section ""data" . Text.Read.Lex.$tc'String1_closure" {
     Text.Read.Lex.$tc'String1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'String2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.100726734 UTC

[section ""data" . Text.Read.Lex.$tc'String_closure" {
     Text.Read.Lex.$tc'String_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'String1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 4234975262003182519;
         const 13764813366371540099;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.103030606 UTC

[section ""cstring" . Text.Read.Lex.$tc'Punc2_bytes" {
     Text.Read.Lex.$tc'Punc2_bytes:
         I8[] [39,80,117,110,99]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.104683882 UTC

[section ""data" . Text.Read.Lex.$tc'Punc1_closure" {
     Text.Read.Lex.$tc'Punc1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Punc2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.106390391 UTC

[section ""data" . Text.Read.Lex.$tc'Punc_closure" {
     Text.Read.Lex.$tc'Punc_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Punc1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 12518860736485891069;
         const 4367633479442506190;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.10812888 UTC

[section ""cstring" . Text.Read.Lex.$tc'Ident3_bytes" {
     Text.Read.Lex.$tc'Ident3_bytes:
         I8[] [39,73,100,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.10982061 UTC

[section ""data" . Text.Read.Lex.$tc'Ident2_closure" {
     Text.Read.Lex.$tc'Ident2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Ident3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.111526494 UTC

[section ""data" . Text.Read.Lex.$tc'Ident_closure" {
     Text.Read.Lex.$tc'Ident_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Ident2_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 17378133866674838049;
         const 11361322998352874125;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.11336955 UTC

[section ""cstring" . Text.Read.Lex.$tc'Symbol2_bytes" {
     Text.Read.Lex.$tc'Symbol2_bytes:
         I8[] [39,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.115026974 UTC

[section ""data" . Text.Read.Lex.$tc'Symbol1_closure" {
     Text.Read.Lex.$tc'Symbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Symbol2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.116826327 UTC

[section ""data" . Text.Read.Lex.$tc'Symbol_closure" {
     Text.Read.Lex.$tc'Symbol_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Symbol1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 434905475898525586;
         const 17609692850475477756;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.118866037 UTC

[section ""data" . Text.Read.Lex.$tc'Char1_closure" {
     Text.Read.Lex.$tc'Char1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3y8G_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.12060926 UTC

[section ""cstring" . Text.Read.Lex.$tc'Char3_bytes" {
     Text.Read.Lex.$tc'Char3_bytes:
         I8[] [39,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.12229829 UTC

[section ""data" . Text.Read.Lex.$tc'Char2_closure" {
     Text.Read.Lex.$tc'Char2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Char3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.124014631 UTC

[section ""data" . Text.Read.Lex.$tc'Char_closure" {
     Text.Read.Lex.$tc'Char_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Char2_closure+1;
         const Text.Read.Lex.$tc'Char1_closure+4;
         const 4794546904228625478;
         const 396576625805862141;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.125858467 UTC

[section ""data" . Text.Read.Lex.$tc'Number1_closure" {
     Text.Read.Lex.$tc'Number1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r3y8P_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.128128505 UTC

[section ""cstring" . Text.Read.Lex.$tc'Number3_bytes" {
     Text.Read.Lex.$tc'Number3_bytes:
         I8[] [39,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.131172966 UTC

[section ""data" . Text.Read.Lex.$tc'Number2_closure" {
     Text.Read.Lex.$tc'Number2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Number3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.132924506 UTC

[section ""data" . Text.Read.Lex.$tc'Number_closure" {
     Text.Read.Lex.$tc'Number_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Number2_closure+1;
         const Text.Read.Lex.$tc'Number1_closure+4;
         const 3115835552307058655;
         const 14198768466951480548;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.134692432 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme9_bytes" {
     Text.Read.Lex.$fShowLexeme9_bytes:
         I8[] [77,107,68,101,99,105,109,97,108,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.137063463 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme8_closure" {
     Text.Read.Lex.$fShowLexeme8_closure:
         const Text.Read.Lex.$fShowLexeme8_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme8_entry() //  [R1]
         { []
         }
     {offset
       c3Gre: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Grf; else goto c3Grg;
       c3Grf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Grg: // global
           (_c3Grb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Grb::I64 == 0) goto c3Grd; else goto c3Grc;
       c3Grd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Grc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Grb::I64;
           R2 = Text.Read.Lex.$fShowLexeme9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme8_info" {
     Text.Read.Lex.$fShowLexeme8_info:
         const Text.Read.Lex.$fShowLexeme8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.140833289 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme10_closure" {
     Text.Read.Lex.$fShowLexeme10_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.142853242 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme11_bytes" {
     Text.Read.Lex.$fShowLexeme11_bytes:
         I8[] [77,107,78,117,109,98,101,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.164300794 UTC

[section ""data" . Text.Read.Lex.$w$cshowsPrec_closure" {
     Text.Read.Lex.$w$cshowsPrec_closure:
         const Text.Read.Lex.$w$cshowsPrec_info;
         const 0;
 },
 sat_s3G2v_entry() //  [R1]
         { []
         }
     {offset
       c3Gsu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3GsB; else goto c3GsC;
       c3GsB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GsC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3Gsr_info;
           _s3G2k::P64 = P64[R1 + 16];
           _s3G2o::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3G2k::P64;
           P64[Sp - 24] = _s3G2o::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3GsJ; else goto c3Gss;
       u3GsJ: // global
           call _c3Gsr(R1) args: 0, res: 0, upd: 0;
       c3Gss: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G2v_info" {
     sat_s3G2v_info:
         const sat_s3G2v_entry;
         const 3;
         const 15;
 },
 _c3Gsr() //  [R1]
         { []
         }
     {offset
       c3Gsr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3GsF; else goto c3GsE;
       c3GsF: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3GsE: // global
           _s3G2q::I64 = I64[R1 + 7];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3Gsy_info;
           R4 = Hp - 24;
           R3 = _s3G2q::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Gsr_info" {
     block_c3Gsr_info:
         const _c3Gsr;
         const 2;
         const 30;
 },
 _c3Gsy() //  [R1, R2]
         { []
         }
     {offset
       c3Gsy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GsI; else goto c3GsH;
       c3GsI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3GsH: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Gsy_info" {
     block_c3Gsy_info:
         const _c3Gsy;
         const 0;
         const 30;
 },
 showl_s3G2k_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GsO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3GsP; else goto c3GsQ;
       c3GsP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GsQ: // global
           I64[Sp - 24] = block_c3Gsh_info;
           _s3G2k::P64 = R1;
           _s3G2j::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3G2j::P64;
           P64[Sp - 8] = _s3G2k::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3GsX; else goto c3Gsi;
       u3GsX: // global
           call _c3Gsh(R1) args: 0, res: 0, upd: 0;
       c3Gsi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_s3G2k_info" {
     showl_s3G2k_info:
         const showl_s3G2k_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Gsh() //  [R1]
         { []
         }
     {offset
       c3Gsh: // global
           if (R1 & 7 == 1) goto c3GsL; else goto c3GsM;
       c3GsL: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GsM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3GsW; else goto c3GsV;
       c3GsW: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GsV: // global
           _s3G2n::P64 = P64[R1 + 6];
           _s3G2o::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s3G2v_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3G2n::P64;
           P64[Hp - 24] = _s3G2o::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Gsh_info" {
     block_c3Gsh_info:
         const _c3Gsh;
         const 2;
         const 30;
 },
 sat_s3G2w_entry() //  [R1]
         { []
         }
     {offset
       c3GsY: // global
           _s3G2w::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GsZ; else goto c3Gt0;
       c3Gt0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Gt2; else goto c3Gt1;
       c3Gt2: // global
           HpAlloc = 40;
           goto c3GsZ;
       c3GsZ: // global
           R1 = _s3G2w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gt1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G2w::P64;
           _s3G2b::P64 = P64[_s3G2w::P64 + 16];
           _s3G2g::P64 = P64[_s3G2w::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure;
           P64[Hp - 16] = _s3G2b::P64;
           I64[Hp - 8] = showl_s3G2k_info;
           P64[Hp] = Hp - 30;
           R2 = _s3G2g::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_s3G2k_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G2w_info" {
     sat_s3G2w_info:
         const sat_s3G2w_entry;
         const 2;
         const 18;
 },
 sat_s3G2A_entry() //  [R1]
         { []
         }
     {offset
       c3Gt3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Gt7; else goto c3Gt8;
       c3Gt7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gt8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3Gs2_info;
           _s3G2b::P64 = P64[R1 + 16];
           _s3G2g::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3G2b::P64;
           P64[Sp - 24] = _s3G2g::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3Gtf; else goto c3Gs3;
       u3Gtf: // global
           call _c3Gs2(R1) args: 0, res: 0, upd: 0;
       c3Gs3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G2A_info" {
     sat_s3G2A_info:
         const sat_s3G2A_entry;
         const 3;
         const 15;
 },
 _c3Gs2() //  [R1]
         { []
         }
     {offset
       c3Gs2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Gtb; else goto c3Gta;
       c3Gtb: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Gta: // global
           _s3G2i::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_s3G2w_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3Gt4_info;
           R4 = Hp - 24;
           R3 = _s3G2i::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Gs2_info" {
     block_c3Gs2_info:
         const _c3Gs2;
         const 2;
         const 30;
 },
 _c3Gt4() //  [R1, R2]
         { []
         }
     {offset
       c3Gt4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Gte; else goto c3Gtd;
       c3Gte: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3Gtd: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Gt4_info" {
     block_c3Gt4_info:
         const _c3Gt4;
         const 0;
         const 30;
 },
 sat_s3G2B_entry() //  [R1]
         { []
         }
     {offset
       c3Gtk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Gtl; else goto c3Gtm;
       c3Gtl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gtm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3GrS_info;
           _s3G2b::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3G2b::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3Gtt; else goto c3GrT;
       u3Gtt: // global
           call _c3GrS(R1) args: 0, res: 0, upd: 0;
       c3GrT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G2B_info" {
     sat_s3G2B_info:
         const sat_s3G2B_entry;
         const 2;
         const 18;
 },
 _c3GrS() //  [R1]
         { []
         }
     {offset
       c3GrS: // global
           _s3G2b::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3Gth; else goto c3Gti;
       c3Gth: // global
           R3 = _s3G2b::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       c3Gti: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Gts; else goto c3Gtr;
       c3Gts: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Gtr: // global
           _s3G2f::P64 = P64[R1 + 6];
           _s3G2g::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s3G2A_info;
           P64[Hp - 40] = _s3G2b::P64;
           P64[Hp - 32] = _s3G2f::P64;
           P64[Hp - 24] = _s3G2g::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3GrS_info" {
     block_c3GrS_info:
         const _c3GrS;
         const 1;
         const 30;
 },
 sat_s3G2G_entry() //  [R1]
         { []
         }
     {offset
       c3Gtu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Gtz; else goto c3GtA;
       c3Gtz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GtA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3GrJ_info;
           _s3G29::P64 = P64[R1 + 24];
           _s3G2b::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s3G29::P64;
           P64[Sp - 24] = _s3G2b::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3GtH; else goto c3GrK;
       u3GtH: // global
           call _c3GrJ(R1) args: 0, res: 0, upd: 0;
       c3GrK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G2G_info" {
     sat_s3G2G_info:
         const sat_s3G2G_entry;
         const 3;
         const 15;
 },
 _c3GrJ() //  [R1]
         { []
         }
     {offset
       c3GrJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GtD; else goto c3GtC;
       c3GtD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3GtC: // global
           _s3G2d::I64 = I64[R1 + 7];
           I64[Hp - 48] = sat_s3G2B_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp + 16] = block_c3Gtw_info;
           R4 = Hp - 14;
           R3 = _s3G2d::I64;
           R2 = 11;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3GrJ_info" {
     block_c3GrJ_info:
         const _c3GrJ;
         const 2;
         const 30;
 },
 _c3Gtw() //  [R1, R2]
         { []
         }
     {offset
       c3Gtw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GtG; else goto c3GtF;
       c3GtG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3GtF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Gtw_info" {
     block_c3Gtw_info:
         const _c3Gtw;
         const 0;
         const 30;
 },
 p_s3G2a_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GtI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3GtM; else goto c3GtL;
       c3GtM: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GtL: // global
           _s3G28::P64 = P64[R1 + 7];
           _s3G29::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s3G2G_info;
           P64[Hp - 16] = _s3G28::P64;
           P64[Hp - 8] = _s3G29::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = Text.Read.Lex.$fShowLexeme11_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3G2a_info" {
     p_s3G2a_info:
         const p_s3G2a_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3G2K_entry() //  [R1]
         { []
         }
     {offset
       c3Gu1: // global
           _s3G2K::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Gu2; else goto c3Gu3;
       c3Gu3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Gu5; else goto c3Gu4;
       c3Gu5: // global
           HpAlloc = 24;
           goto c3Gu2;
       c3Gu2: // global
           R1 = _s3G2K::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gu4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G2K::P64;
           _s3G2a::P64 = P64[_s3G2K::P64 + 16];
           _s3G2I::P64 = P64[_s3G2K::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3G2I::P64;
           R2 = Hp - 14;
           R1 = _s3G2a::P64;
           Sp = Sp - 16;
           call p_s3G2a_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G2K_info" {
     sat_s3G2K_info:
         const sat_s3G2K_entry;
         const 2;
         const 18;
 },
 sat_s3G2L_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Gu7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Gub; else goto c3Gua;
       c3Gub: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Gua: // global
           _s3G2a::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G2K_info;
           P64[Hp - 32] = _s3G2a::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G2L_info" {
     sat_s3G2L_info:
         const sat_s3G2L_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 f_s3G2P_entry() //  [R1]
         { []
         }
     {offset
       c3Gui: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Guj; else goto c3Guk;
       c3Guj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Guk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = Text.Read.Lex.$fShowLexeme10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s3G2P_info" {
     f_s3G2P_info:
         const f_s3G2P_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt;
 },
 g_s3G2Q_entry() //  [R1]
         { []
         }
     {offset
       c3Gup: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Guq; else goto c3Gur;
       c3Guq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gur: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = Text.Read.Lex.$fShowLexeme10_closure+1;
           R2 = GHC.Show.$fShowInteger_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s3G2Q_info" {
     g_s3G2Q_info:
         const g_s3G2Q_entry;
         const 1;
         const 12884901904;
         const S3GvX_srt;
 },
 sat_s3G2V_entry() //  [R1]
         { []
         }
     {offset
       c3GuD: // global
           _s3G2V::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GuE; else goto c3GuF;
       c3GuF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GuH; else goto c3GuG;
       c3GuH: // global
           HpAlloc = 56;
           goto c3GuE;
       c3GuE: // global
           R1 = _s3G2V::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GuG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G2V::P64;
           _s3G2P::P64 = P64[_s3G2V::P64 + 16];
           _s3G2Q::P64 = P64[_s3G2V::P64 + 24];
           _s3G2S::P64 = P64[_s3G2V::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3G2Q::P64;
           P64[Hp - 24] = _s3G2S::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _s3G2P::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G2V_info" {
     sat_s3G2V_info:
         const sat_s3G2V_entry;
         const 3;
         const 15;
 },
 g1_s3G2R_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GuJ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3GuN; else goto c3GuM;
       c3GuN: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GuM: // global
           _s3G2M::P64 = P64[R1 + 7];
           _s3G2P::P64 = P64[R1 + 15];
           _s3G2Q::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_s3G2V_info;
           P64[Hp - 40] = _s3G2P::P64;
           P64[Hp - 32] = _s3G2Q::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 56;
           R4 = Hp - 14;
           R3 = _s3G2M::P64;
           R2 = GHC.Show.$fShowInt1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g1_s3G2R_info" {
     g1_s3G2R_info:
         const g1_s3G2R_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3G2Z_entry() //  [R1]
         { []
         }
     {offset
       c3Gv0: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_s3G2R_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G2Z_info" {
     sat_s3G2Z_info:
         const sat_s3G2Z_entry;
         const 2;
         const 18;
 },
 sat_s3G30_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Gv3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Gv7; else goto c3Gv6;
       c3Gv7: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Gv6: // global
           _s3G2R::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3G2Z_info;
           P64[Hp - 8] = _s3G2R::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme8_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G30_info" {
     sat_s3G30_info:
         const sat_s3G30_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+16;
 },
 sat_s3G33_entry() //  [R1]
         { []
         }
     {offset
       c3Gvn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Gvr; else goto c3Gvq;
       c3Gvr: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gvq: // global
           _s3G2R::P64 = P64[R1 + 16];
           _s3G31::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3G31::P64;
           R2 = Hp - 14;
           R1 = _s3G2R::P64;
           call g1_s3G2R_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G33_info" {
     sat_s3G33_info:
         const sat_s3G33_entry;
         const 2;
         const 18;
 },
 sat_s3G34_entry() //  [R1]
         { []
         }
     {offset
       c3Gvs: // global
           _s3G34::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Gvt; else goto c3Gvu;
       c3Gvu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Gvw; else goto c3Gvv;
       c3Gvw: // global
           HpAlloc = 32;
           goto c3Gvt;
       c3Gvt: // global
           R1 = _s3G34::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gvv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G34::P64;
           _s3G2R::P64 = P64[_s3G34::P64 + 16];
           _s3G31::P64 = P64[_s3G34::P64 + 24];
           I64[Hp - 24] = sat_s3G33_info;
           P64[Hp - 8] = _s3G2R::P64;
           P64[Hp] = _s3G31::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme8_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G34_info" {
     sat_s3G34_info:
         const sat_s3G34_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+16;
 },
 sat_s3G35_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Gvy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GvC; else goto c3GvB;
       c3GvC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GvB: // global
           _s3G2R::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G34_info;
           P64[Hp - 32] = _s3G2R::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G35_info" {
     sat_s3G35_info:
         const sat_s3G35_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+16;
 },
 Text.Read.Lex.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3GvH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GvI; else goto c3GvJ;
       c3GvI: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3GvJ: // global
           I64[Sp - 16] = block_c3Grv_info;
           R1 = R3;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3GvW; else goto c3Grw;
       u3GvW: // global
           call _c3Grv(R1) args: 0, res: 0, upd: 0;
       c3Grw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$w$cshowsPrec_info" {
     Text.Read.Lex.$w$cshowsPrec_info:
         const Text.Read.Lex.$w$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 8589934605;
         const S3GvX_srt;
 },
 _c3Grv() //  [R1]
         { []
         }
     {offset
       c3Grv: // global
           _s3G25::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c3GvE; else goto c3GvF;
       c3GvE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3GvM; else goto c3GvL;
       c3GvM: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GvL: // global
           _s3G28::P64 = P64[R1 + 7];
           _s3G29::P64 = P64[R1 + 15];
           I64[Hp - 32] = p_s3G2a_info;
           P64[Hp - 24] = _s3G28::P64;
           P64[Hp - 16] = _s3G29::P64;
           _c3GrA::P64 = Hp - 31;
           if (%MO_S_Lt_W64(_s3G25::I64, 11)) goto c3GvO; else goto c3GvP;
       c3GvO: // global
           Hp = Hp - 16;
           R1 = _c3GrA::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GvP: // global
           I64[Hp - 8] = sat_s3G2L_info;
           P64[Hp] = _c3GrA::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GvF: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3GvS; else goto c3GvR;
       c3GvS: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GvR: // global
           _s3G2M::P64 = P64[R1 + 6];
           _s3G2N::P64 = P64[R1 + 14];
           _s3G2O::P64 = P64[R1 + 22];
           I64[Hp - 88] = f_s3G2P_info;
           P64[Hp - 72] = _s3G2N::P64;
           I64[Hp - 64] = g_s3G2Q_info;
           P64[Hp - 48] = _s3G2O::P64;
           I64[Hp - 40] = g1_s3G2R_info;
           P64[Hp - 32] = _s3G2M::P64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 64;
           _c3Gus::P64 = Hp - 39;
           if (%MO_S_Lt_W64(_s3G25::I64, 11)) goto c3GvU; else goto c3GvV;
       c3GvU: // global
           I64[Hp - 8] = sat_s3G30_info;
           P64[Hp] = _c3Gus::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GvV: // global
           I64[Hp - 8] = sat_s3G35_info;
           P64[Hp] = _c3Gus::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Grv_info" {
     block_c3Grv_info:
         const _c3Grv;
         const 65;
         const 30064771102;
         const S3GvX_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.221608603 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshowsPrec_closure" {
     Text.Read.Lex.$fShowNumber_$cshowsPrec_closure:
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Gzk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Gzl; else goto c3Gzm;
       c3Gzl: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fShowNumber_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Gzm: // global
           I64[Sp - 16] = block_c3Gzh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Gzq; else goto c3Gzi;
       u3Gzq: // global
           call _c3Gzh(R1) args: 0, res: 0, upd: 0;
       c3Gzi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowNumber_$cshowsPrec_info" {
     Text.Read.Lex.$fShowNumber_$cshowsPrec_info:
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3GvX_srt+24;
 },
 _c3Gzh() //  [R1]
         { []
         }
     {offset
       c3Gzh: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Gzh_info" {
     block_c3Gzh_info:
         const _c3Gzh;
         const 1;
         const 4294967326;
         const S3GvX_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.227030828 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme2_closure" {
     Text.Read.Lex.$fShowLexeme2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.229524005 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshow_closure" {
     Text.Read.Lex.$fShowNumber_$cshow_closure:
         const Text.Read.Lex.$fShowNumber_$cshow_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c3GzG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GzH; else goto c3GzI;
       c3GzH: // global
           R2 = R2;
           R1 = Text.Read.Lex.$fShowNumber_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GzI: // global
           R3 = R2;
           R2 = 0;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowNumber_$cshow_info" {
     Text.Read.Lex.$fShowNumber_$cshow_info:
         const Text.Read.Lex.$fShowNumber_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S3GvX_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.233602716 UTC

[section ""data" . Text.Read.Lex.$fShowNumber1_closure" {
     Text.Read.Lex.$fShowNumber1_closure:
         const Text.Read.Lex.$fShowNumber1_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber1_entry() //  [R2]
         { []
         }
     {offset
       c3GzV: // global
           R3 = R2;
           R2 = 0;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowNumber1_info" {
     Text.Read.Lex.$fShowNumber1_info:
         const Text.Read.Lex.$fShowNumber1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3GvX_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.238426737 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshowList_closure" {
     Text.Read.Lex.$fShowNumber_$cshowList_closure:
         const Text.Read.Lex.$fShowNumber_$cshowList_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c3GA6: // global
           R4 = R3;
           R3 = R2;
           R2 = Text.Read.Lex.$fShowNumber1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowNumber_$cshowList_info" {
     Text.Read.Lex.$fShowNumber_$cshowList_info:
         const Text.Read.Lex.$fShowNumber_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3GvX_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.242517252 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_closure" {
     Text.Read.Lex.$fShowNumber_closure:
         const GHC.Show.C:Show_con_info;
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_closure+2;
         const Text.Read.Lex.$fShowNumber_$cshow_closure+1;
         const Text.Read.Lex.$fShowNumber_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.244839346 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme7_bytes" {
     Text.Read.Lex.$fShowLexeme7_bytes:
         I8[] [78,117,109,98,101,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.248058464 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme6_closure" {
     Text.Read.Lex.$fShowLexeme6_closure:
         const Text.Read.Lex.$fShowLexeme6_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme6_entry() //  [R1]
         { []
         }
     {offset
       c3GAl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GAm; else goto c3GAn;
       c3GAm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GAn: // global
           (_c3GAi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GAi::I64 == 0) goto c3GAk; else goto c3GAj;
       c3GAk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GAj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GAi::I64;
           R2 = Text.Read.Lex.$fShowLexeme7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme6_info" {
     Text.Read.Lex.$fShowLexeme6_info:
         const Text.Read.Lex.$fShowLexeme6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.253489686 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme5_bytes" {
     Text.Read.Lex.$fShowLexeme5_bytes:
         I8[] [69,79,70]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.256596393 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme4_closure" {
     Text.Read.Lex.$fShowLexeme4_closure:
         const Text.Read.Lex.$fShowLexeme4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme4_entry() //  [R1]
         { []
         }
     {offset
       c3GAD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GAE; else goto c3GAF;
       c3GAE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GAF: // global
           (_c3GAA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GAA::I64 == 0) goto c3GAC; else goto c3GAB;
       c3GAC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GAB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GAA::I64;
           R2 = Text.Read.Lex.$fShowLexeme5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme4_info" {
     Text.Read.Lex.$fShowLexeme4_info:
         const Text.Read.Lex.$fShowLexeme4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.262118534 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme3_closure" {
     Text.Read.Lex.$fShowLexeme3_closure:
         const Text.Read.Lex.$fShowLexeme3_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme3_entry() //  [R2]
         { []
         }
     {offset
       c3GAS: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme3_info" {
     Text.Read.Lex.$fShowLexeme3_info:
         const Text.Read.Lex.$fShowLexeme3_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3GvX_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.267357021 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme16_bytes" {
     Text.Read.Lex.$fShowLexeme16_bytes:
         I8[] [67,104,97,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.269705483 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme15_bytes" {
     Text.Read.Lex.$fShowLexeme15_bytes:
         I8[] [83,116,114,105,110,103,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.272043291 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme14_bytes" {
     Text.Read.Lex.$fShowLexeme14_bytes:
         I8[] [80,117,110,99,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.274316978 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme13_bytes" {
     Text.Read.Lex.$fShowLexeme13_bytes:
         I8[] [73,100,101,110,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.27597917 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme12_bytes" {
     Text.Read.Lex.$fShowLexeme12_bytes:
         I8[] [83,121,109,98,111,108,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.298850851 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure" {
     Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure:
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_info;
         const 0;
 },
 sat_s3G3o_entry() //  [R1]
         { []
         }
     {offset
       c3GBx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3GBy; else goto c3GBz;
       c3GBy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GBz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3GBu_info;
           _s3G3l::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3G3l::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3GBD; else goto c3GBv;
       u3GBD: // global
           call _c3GBu(R1) args: 0, res: 0, upd: 0;
       c3GBv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G3o_info" {
     sat_s3G3o_info:
         const sat_s3G3o_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+64;
 },
 _c3GBu() //  [R1]
         { []
         }
     {offset
       c3GBu: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3GBu_info" {
     block_c3GBu_info:
         const _c3GBu;
         const 1;
         const 4294967326;
         const S3GvX_srt+64;
 },
 sat_s3G3p_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GBE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3GBI; else goto c3GBH;
       c3GBI: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GBH: // global
           _s3G3h::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3G3o_info;
           P64[Hp - 8] = _s3G3h::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G3p_info" {
     sat_s3G3p_info:
         const sat_s3G3p_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+64;
 },
 sat_s3G3u_entry() //  [R1]
         { []
         }
     {offset
       c3GC0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3GC4; else goto c3GC5;
       c3GC4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GC5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3GBX_info;
           _s3G3q::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3G3q::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3GC9; else goto c3GBY;
       u3GC9: // global
           call _c3GBX(R1) args: 0, res: 0, upd: 0;
       c3GBY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G3u_info" {
     sat_s3G3u_info:
         const sat_s3G3u_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+64;
 },
 _c3GBX() //  [R1]
         { []
         }
     {offset
       c3GBX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GC8; else goto c3GC7;
       c3GC8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3GC7: // global
           _s3G3s::I64 = I64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 14;
           R2 = _s3G3s::I64;
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3GBX_info" {
     block_c3GBX_info:
         const _c3GBX;
         const 1;
         const 4294967326;
         const S3GvX_srt+64;
 },
 sat_s3G3v_entry() //  [R1]
         { []
         }
     {offset
       c3GCa: // global
           _s3G3v::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GCb; else goto c3GCc;
       c3GCc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3GCe; else goto c3GCd;
       c3GCe: // global
           HpAlloc = 32;
           goto c3GCb;
       c3GCb: // global
           R1 = _s3G3v::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GCd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G3v::P64;
           _s3G3h::P64 = P64[_s3G3v::P64 + 16];
           _s3G3q::P64 = P64[_s3G3v::P64 + 24];
           I64[Hp - 24] = sat_s3G3u_info;
           P64[Hp - 8] = _s3G3h::P64;
           P64[Hp] = _s3G3q::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G3v_info" {
     sat_s3G3v_info:
         const sat_s3G3v_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+64;
 },
 sat_s3G3w_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GCg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GCk; else goto c3GCj;
       c3GCk: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GCj: // global
           _s3G3h::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G3v_info;
           P64[Hp - 32] = _s3G3h::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G3w_info" {
     sat_s3G3w_info:
         const sat_s3G3w_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+64;
 },
 sat_s3G3D_entry() //  [R1]
         { []
         }
     {offset
       c3GCF: // global
           _s3G3D::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GCG; else goto c3GCH;
       c3GCH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GCJ; else goto c3GCI;
       c3GCJ: // global
           HpAlloc = 24;
           goto c3GCG;
       c3GCG: // global
           R1 = _s3G3D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GCI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G3D::P64;
           _s3G3x::P64 = P64[_s3G3D::P64 + 16];
           _s3G3B::P64 = P64[_s3G3D::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3G3B::P64;
           R3 = Hp - 14;
           R2 = _s3G3x::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G3D_info" {
     sat_s3G3D_info:
         const sat_s3G3D_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+72;
 },
 sat_s3G3F_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GCL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GCP; else goto c3GCO;
       c3GCP: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GCO: // global
           _s3G3x::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G3D_info;
           P64[Hp - 32] = _s3G3x::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G3F_info" {
     sat_s3G3F_info:
         const sat_s3G3F_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+72;
 },
 sat_s3G3J_entry() //  [R1]
         { []
         }
     {offset
       c3GD6: // global
           _s3G3J::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GD7; else goto c3GD8;
       c3GD8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3GDa; else goto c3GD9;
       c3GDa: // global
           HpAlloc = 48;
           goto c3GD7;
       c3GD7: // global
           R1 = _s3G3J::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GD9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G3J::P64;
           _s3G3x::P64 = P64[_s3G3J::P64 + 16];
           _s3G3G::P64 = P64[_s3G3J::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3G3G::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3G3x::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G3J_info" {
     sat_s3G3J_info:
         const sat_s3G3J_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+72;
 },
 sat_s3G3L_entry() //  [R1]
         { []
         }
     {offset
       c3GDc: // global
           _s3G3L::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GDd; else goto c3GDe;
       c3GDe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GDg; else goto c3GDf;
       c3GDg: // global
           HpAlloc = 56;
           goto c3GDd;
       c3GDd: // global
           R1 = _s3G3L::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GDf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G3L::P64;
           _s3G3x::P64 = P64[_s3G3L::P64 + 16];
           _s3G3G::P64 = P64[_s3G3L::P64 + 24];
           I64[Hp - 48] = sat_s3G3J_info;
           P64[Hp - 32] = _s3G3x::P64;
           P64[Hp - 24] = _s3G3G::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G3L_info" {
     sat_s3G3L_info:
         const sat_s3G3L_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+72;
 },
 sat_s3G3M_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GDi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GDm; else goto c3GDl;
       c3GDm: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GDl: // global
           _s3G3x::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G3L_info;
           P64[Hp - 32] = _s3G3x::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G3M_info" {
     sat_s3G3M_info:
         const sat_s3G3M_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+72;
 },
 sat_s3G3T_entry() //  [R1]
         { []
         }
     {offset
       c3GDH: // global
           _s3G3T::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GDI; else goto c3GDJ;
       c3GDJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GDL; else goto c3GDK;
       c3GDL: // global
           HpAlloc = 24;
           goto c3GDI;
       c3GDI: // global
           R1 = _s3G3T::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GDK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G3T::P64;
           _s3G3N::P64 = P64[_s3G3T::P64 + 16];
           _s3G3R::P64 = P64[_s3G3T::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3G3R::P64;
           R3 = Hp - 14;
           R2 = _s3G3N::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G3T_info" {
     sat_s3G3T_info:
         const sat_s3G3T_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+72;
 },
 sat_s3G3V_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GDN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GDR; else goto c3GDQ;
       c3GDR: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GDQ: // global
           _s3G3N::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G3T_info;
           P64[Hp - 32] = _s3G3N::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G3V_info" {
     sat_s3G3V_info:
         const sat_s3G3V_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+72;
 },
 sat_s3G3Z_entry() //  [R1]
         { []
         }
     {offset
       c3GE8: // global
           _s3G3Z::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GE9; else goto c3GEa;
       c3GEa: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3GEc; else goto c3GEb;
       c3GEc: // global
           HpAlloc = 48;
           goto c3GE9;
       c3GE9: // global
           R1 = _s3G3Z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GEb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G3Z::P64;
           _s3G3N::P64 = P64[_s3G3Z::P64 + 16];
           _s3G3W::P64 = P64[_s3G3Z::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3G3W::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3G3N::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G3Z_info" {
     sat_s3G3Z_info:
         const sat_s3G3Z_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+72;
 },
 sat_s3G41_entry() //  [R1]
         { []
         }
     {offset
       c3GEe: // global
           _s3G41::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GEf; else goto c3GEg;
       c3GEg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GEi; else goto c3GEh;
       c3GEi: // global
           HpAlloc = 56;
           goto c3GEf;
       c3GEf: // global
           R1 = _s3G41::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GEh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G41::P64;
           _s3G3N::P64 = P64[_s3G41::P64 + 16];
           _s3G3W::P64 = P64[_s3G41::P64 + 24];
           I64[Hp - 48] = sat_s3G3Z_info;
           P64[Hp - 32] = _s3G3N::P64;
           P64[Hp - 24] = _s3G3W::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G41_info" {
     sat_s3G41_info:
         const sat_s3G41_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+72;
 },
 sat_s3G42_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GEk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GEo; else goto c3GEn;
       c3GEo: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GEn: // global
           _s3G3N::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G41_info;
           P64[Hp - 32] = _s3G3N::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G42_info" {
     sat_s3G42_info:
         const sat_s3G42_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+72;
 },
 sat_s3G49_entry() //  [R1]
         { []
         }
     {offset
       c3GEJ: // global
           _s3G49::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GEK; else goto c3GEL;
       c3GEL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GEN; else goto c3GEM;
       c3GEN: // global
           HpAlloc = 24;
           goto c3GEK;
       c3GEK: // global
           R1 = _s3G49::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GEM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G49::P64;
           _s3G43::P64 = P64[_s3G49::P64 + 16];
           _s3G47::P64 = P64[_s3G49::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3G47::P64;
           R3 = Hp - 14;
           R2 = _s3G43::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G49_info" {
     sat_s3G49_info:
         const sat_s3G49_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+72;
 },
 sat_s3G4b_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GEP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GET; else goto c3GES;
       c3GET: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GES: // global
           _s3G43::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G49_info;
           P64[Hp - 32] = _s3G43::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G4b_info" {
     sat_s3G4b_info:
         const sat_s3G4b_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+72;
 },
 sat_s3G4f_entry() //  [R1]
         { []
         }
     {offset
       c3GFa: // global
           _s3G4f::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GFb; else goto c3GFc;
       c3GFc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3GFe; else goto c3GFd;
       c3GFe: // global
           HpAlloc = 48;
           goto c3GFb;
       c3GFb: // global
           R1 = _s3G4f::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GFd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G4f::P64;
           _s3G43::P64 = P64[_s3G4f::P64 + 16];
           _s3G4c::P64 = P64[_s3G4f::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3G4c::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3G43::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G4f_info" {
     sat_s3G4f_info:
         const sat_s3G4f_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+72;
 },
 sat_s3G4h_entry() //  [R1]
         { []
         }
     {offset
       c3GFg: // global
           _s3G4h::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GFh; else goto c3GFi;
       c3GFi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GFk; else goto c3GFj;
       c3GFk: // global
           HpAlloc = 56;
           goto c3GFh;
       c3GFh: // global
           R1 = _s3G4h::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GFj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G4h::P64;
           _s3G43::P64 = P64[_s3G4h::P64 + 16];
           _s3G4c::P64 = P64[_s3G4h::P64 + 24];
           I64[Hp - 48] = sat_s3G4f_info;
           P64[Hp - 32] = _s3G43::P64;
           P64[Hp - 24] = _s3G4c::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G4h_info" {
     sat_s3G4h_info:
         const sat_s3G4h_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+72;
 },
 sat_s3G4i_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GFm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GFq; else goto c3GFp;
       c3GFq: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GFp: // global
           _s3G43::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G4h_info;
           P64[Hp - 32] = _s3G43::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G4i_info" {
     sat_s3G4i_info:
         const sat_s3G4i_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+72;
 },
 sat_s3G4p_entry() //  [R1]
         { []
         }
     {offset
       c3GFL: // global
           _s3G4p::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GFM; else goto c3GFN;
       c3GFN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GFP; else goto c3GFO;
       c3GFP: // global
           HpAlloc = 24;
           goto c3GFM;
       c3GFM: // global
           R1 = _s3G4p::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GFO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G4p::P64;
           _s3G4j::P64 = P64[_s3G4p::P64 + 16];
           _s3G4n::P64 = P64[_s3G4p::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3G4n::P64;
           R3 = Hp - 14;
           R2 = _s3G4j::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G4p_info" {
     sat_s3G4p_info:
         const sat_s3G4p_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+72;
 },
 sat_s3G4r_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GFR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GFV; else goto c3GFU;
       c3GFV: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GFU: // global
           _s3G4j::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G4p_info;
           P64[Hp - 32] = _s3G4j::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G4r_info" {
     sat_s3G4r_info:
         const sat_s3G4r_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+72;
 },
 sat_s3G4v_entry() //  [R1]
         { []
         }
     {offset
       c3GGc: // global
           _s3G4v::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GGd; else goto c3GGe;
       c3GGe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3GGg; else goto c3GGf;
       c3GGg: // global
           HpAlloc = 48;
           goto c3GGd;
       c3GGd: // global
           R1 = _s3G4v::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GGf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G4v::P64;
           _s3G4j::P64 = P64[_s3G4v::P64 + 16];
           _s3G4s::P64 = P64[_s3G4v::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3G4s::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3G4j::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G4v_info" {
     sat_s3G4v_info:
         const sat_s3G4v_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+72;
 },
 sat_s3G4x_entry() //  [R1]
         { []
         }
     {offset
       c3GGi: // global
           _s3G4x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GGj; else goto c3GGk;
       c3GGk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GGm; else goto c3GGl;
       c3GGm: // global
           HpAlloc = 56;
           goto c3GGj;
       c3GGj: // global
           R1 = _s3G4x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GGl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G4x::P64;
           _s3G4j::P64 = P64[_s3G4x::P64 + 16];
           _s3G4s::P64 = P64[_s3G4x::P64 + 24];
           I64[Hp - 48] = sat_s3G4v_info;
           P64[Hp - 32] = _s3G4j::P64;
           P64[Hp - 24] = _s3G4s::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G4x_info" {
     sat_s3G4x_info:
         const sat_s3G4x_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+72;
 },
 sat_s3G4y_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GGo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GGs; else goto c3GGr;
       c3GGs: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GGr: // global
           _s3G4j::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G4x_info;
           P64[Hp - 32] = _s3G4j::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G4y_info" {
     sat_s3G4y_info:
         const sat_s3G4y_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+72;
 },
 g_s3G4C_entry() //  [R1]
         { []
         }
     {offset
       c3GGE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GGF; else goto c3GGG;
       c3GGF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GGG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s3G4C_info" {
     g_s3G4C_info:
         const g_s3G4C_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+24;
 },
 sat_s3G4F_entry() //  [R1]
         { []
         }
     {offset
       c3GGT: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G4F_info" {
     sat_s3G4F_info:
         const sat_s3G4F_entry;
         const 2;
         const 18;
 },
 sat_s3G4G_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GGW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3GH0; else goto c3GGZ;
       c3GH0: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GGZ: // global
           _s3G4C::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3G4F_info;
           P64[Hp - 8] = _s3G4C::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G4G_info" {
     sat_s3G4G_info:
         const sat_s3G4G_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+80;
 },
 sat_s3G4J_entry() //  [R1]
         { []
         }
     {offset
       c3GHg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GHk; else goto c3GHj;
       c3GHk: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GHj: // global
           _s3G4C::P64 = P64[R1 + 16];
           _s3G4H::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3G4H::P64;
           R2 = Hp - 14;
           R1 = _s3G4C::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G4J_info" {
     sat_s3G4J_info:
         const sat_s3G4J_entry;
         const 2;
         const 18;
 },
 sat_s3G4K_entry() //  [R1]
         { []
         }
     {offset
       c3GHl: // global
           _s3G4K::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GHm; else goto c3GHn;
       c3GHn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3GHp; else goto c3GHo;
       c3GHp: // global
           HpAlloc = 32;
           goto c3GHm;
       c3GHm: // global
           R1 = _s3G4K::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GHo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G4K::P64;
           _s3G4C::P64 = P64[_s3G4K::P64 + 16];
           _s3G4H::P64 = P64[_s3G4K::P64 + 24];
           I64[Hp - 24] = sat_s3G4J_info;
           P64[Hp - 8] = _s3G4C::P64;
           P64[Hp] = _s3G4H::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G4K_info" {
     sat_s3G4K_info:
         const sat_s3G4K_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+80;
 },
 sat_s3G4L_entry() //  [R1, R2]
         { []
         }
     {offset
       c3GHr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GHv; else goto c3GHu;
       c3GHv: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GHu: // global
           _s3G4C::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G4K_info;
           P64[Hp - 32] = _s3G4C::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G4L_info" {
     sat_s3G4L_info:
         const sat_s3G4L_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+80;
 },
 Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3GHF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GHG; else goto c3GHH;
       c3GHG: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3GHH: // global
           I64[Sp - 16] = block_c3GB8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3GIx; else goto c3GB9;
       u3GIx: // global
           call _c3GB8(R1) args: 0, res: 0, upd: 0;
       c3GB9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme_$cshowsPrec_info" {
     Text.Read.Lex.$fShowLexeme_$cshowsPrec_info:
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry;
         const 0;
         const 4264902524942;
         const 8589934607;
         const S3GvX_srt+24;
 },
 _c3GB8() //  [R1]
         { []
         }
     {offset
       c3GB8: // global
           _s3G3e::P64 = P64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3GHx;
               case 2 : goto c3GHy;
               case 3 : goto c3GHz;
               case 4 : goto c3GHA;
               case 5 : goto c3GHB;
               case 6 : goto c3GHC;
               case 7 : goto c3GHD;
           }
       c3GHD: // global
           R1 = Text.Read.Lex.$fShowLexeme3_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GHC: // global
           I64[Sp] = block_c3GGv_info;
           _s3G4z::P64 = P64[R1 + 2];
           R1 = _s3G3e::P64;
           P64[Sp + 8] = _s3G4z::P64;
           if (R1 & 7 != 0) goto u3GIw; else goto c3GGw;
       u3GIw: // global
           call _c3GGv(R1) args: 0, res: 0, upd: 0;
       c3GGw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GHB: // global
           I64[Sp] = block_c3GFt_info;
           _s3G4j::P64 = P64[R1 + 3];
           R1 = _s3G3e::P64;
           P64[Sp + 8] = _s3G4j::P64;
           if (R1 & 7 != 0) goto u3GIv; else goto c3GFu;
       u3GIv: // global
           call _c3GFt(R1) args: 0, res: 0, upd: 0;
       c3GFu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GHA: // global
           I64[Sp] = block_c3GEr_info;
           _s3G43::P64 = P64[R1 + 4];
           R1 = _s3G3e::P64;
           P64[Sp + 8] = _s3G43::P64;
           if (R1 & 7 != 0) goto u3GIu; else goto c3GEs;
       u3GIu: // global
           call _c3GEr(R1) args: 0, res: 0, upd: 0;
       c3GEs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GHz: // global
           I64[Sp] = block_c3GDp_info;
           _s3G3N::P64 = P64[R1 + 5];
           R1 = _s3G3e::P64;
           P64[Sp + 8] = _s3G3N::P64;
           if (R1 & 7 != 0) goto u3GIt; else goto c3GDq;
       u3GIt: // global
           call _c3GDp(R1) args: 0, res: 0, upd: 0;
       c3GDq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GHy: // global
           I64[Sp] = block_c3GCn_info;
           _s3G3x::P64 = P64[R1 + 6];
           R1 = _s3G3e::P64;
           P64[Sp + 8] = _s3G3x::P64;
           if (R1 & 7 != 0) goto u3GIs; else goto c3GCo;
       u3GIs: // global
           call _c3GCn(R1) args: 0, res: 0, upd: 0;
       c3GCo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GHx: // global
           I64[Sp] = block_c3GBd_info;
           _s3G3h::P64 = P64[R1 + 7];
           R1 = _s3G3e::P64;
           P64[Sp + 8] = _s3G3h::P64;
           if (R1 & 7 != 0) goto u3GIr; else goto c3GBe;
       u3GIr: // global
           call _c3GBd(R1) args: 0, res: 0, upd: 0;
       c3GBe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GB8_info" {
     block_c3GB8_info:
         const _c3GB8;
         const 1;
         const 3165390897182;
         const S3GvX_srt+24;
 },
 _c3GGv() //  [R1]
         { []
         }
     {offset
       c3GGv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3GIk; else goto c3GIj;
       c3GIk: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GIj: // global
           _s3G4B::I64 = I64[R1 + 7];
           I64[Hp - 32] = g_s3G4C_info;
           P64[Hp - 16] = P64[Sp + 8];
           _c3GGA::P64 = Hp - 32;
           if (%MO_S_Lt_W64(_s3G4B::I64, 11)) goto c3GIm; else goto c3GIn;
       c3GIm: // global
           I64[Hp - 8] = sat_s3G4G_info;
           P64[Hp] = _c3GGA::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GIn: // global
           I64[Hp - 8] = sat_s3G4L_info;
           P64[Hp] = _c3GGA::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GGv_info" {
     block_c3GGv_info:
         const _c3GGv;
         const 1;
         const 554050781214;
         const S3GvX_srt+24;
 },
 _c3GFt() //  [R1]
         { []
         }
     {offset
       c3GFt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3GId; else goto c3GIc;
       c3GId: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GIc: // global
           _s3G4j::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3GIf; else goto c3GIg;
       c3GIf: // global
           I64[Hp - 8] = sat_s3G4r_info;
           P64[Hp] = _s3G4j::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GIg: // global
           I64[Hp - 8] = sat_s3G4y_info;
           P64[Hp] = _s3G4j::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GFt_info" {
     block_c3GFt_info:
         const _c3GFt;
         const 1;
         const 4294967326;
         const S3GvX_srt+72;
 },
 _c3GEr() //  [R1]
         { []
         }
     {offset
       c3GEr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3GI6; else goto c3GI5;
       c3GI6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GI5: // global
           _s3G43::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3GI8; else goto c3GI9;
       c3GI8: // global
           I64[Hp - 8] = sat_s3G4b_info;
           P64[Hp] = _s3G43::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GI9: // global
           I64[Hp - 8] = sat_s3G4i_info;
           P64[Hp] = _s3G43::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GEr_info" {
     block_c3GEr_info:
         const _c3GEr;
         const 1;
         const 4294967326;
         const S3GvX_srt+72;
 },
 _c3GDp() //  [R1]
         { []
         }
     {offset
       c3GDp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3GHZ; else goto c3GHY;
       c3GHZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GHY: // global
           _s3G3N::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3GI1; else goto c3GI2;
       c3GI1: // global
           I64[Hp - 8] = sat_s3G3V_info;
           P64[Hp] = _s3G3N::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GI2: // global
           I64[Hp - 8] = sat_s3G42_info;
           P64[Hp] = _s3G3N::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GDp_info" {
     block_c3GDp_info:
         const _c3GDp;
         const 1;
         const 4294967326;
         const S3GvX_srt+72;
 },
 _c3GCn() //  [R1]
         { []
         }
     {offset
       c3GCn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3GHS; else goto c3GHR;
       c3GHS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GHR: // global
           _s3G3x::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3GHU; else goto c3GHV;
       c3GHU: // global
           I64[Hp - 8] = sat_s3G3F_info;
           P64[Hp] = _s3G3x::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GHV: // global
           I64[Hp - 8] = sat_s3G3M_info;
           P64[Hp] = _s3G3x::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GCn_info" {
     block_c3GCn_info:
         const _c3GCn;
         const 1;
         const 4294967326;
         const S3GvX_srt+72;
 },
 _c3GBd() //  [R1]
         { []
         }
     {offset
       c3GBd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3GHL; else goto c3GHK;
       c3GHL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GHK: // global
           _s3G3h::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3GHN; else goto c3GHO;
       c3GHN: // global
           I64[Hp - 8] = sat_s3G3p_info;
           P64[Hp] = _s3G3h::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GHO: // global
           I64[Hp - 8] = sat_s3G3w_info;
           P64[Hp] = _s3G3h::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GBd_info" {
     block_c3GBd_info:
         const _c3GBd;
         const 1;
         const 4294967326;
         const S3GvX_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.407721124 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme17_closure" {
     Text.Read.Lex.$fShowLexeme17_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.416568825 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshow_closure" {
     Text.Read.Lex.$fShowLexeme_$cshow_closure:
         const Text.Read.Lex.$fShowLexeme_$cshow_info;
         const 0;
 },
 sat_s3G4R_entry() //  [R1]
         { []
         }
     {offset
       c3GNN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3GNO; else goto c3GNP;
       c3GNO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GNP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3GNK_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3GNT; else goto c3GNL;
       u3GNT: // global
           call _c3GNK(R1) args: 0, res: 0, upd: 0;
       c3GNL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G4R_info" {
     sat_s3G4R_info:
         const sat_s3G4R_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+64;
 },
 _c3GNK() //  [R1]
         { []
         }
     {offset
       c3GNK: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3GNK_info" {
     block_c3GNK_info:
         const _c3GNK;
         const 0;
         const 4294967326;
         const S3GvX_srt+64;
 },
 sat_s3G4T_entry() //  [R1]
         { []
         }
     {offset
       c3GO0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GO1; else goto c3GO2;
       c3GO1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GO2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G4T_info" {
     sat_s3G4T_info:
         const sat_s3G4T_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+72;
 },
 sat_s3G4W_entry() //  [R1]
         { []
         }
     {offset
       c3GO9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GOa; else goto c3GOb;
       c3GOa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GOb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G4W_info" {
     sat_s3G4W_info:
         const sat_s3G4W_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+72;
 },
 sat_s3G4Z_entry() //  [R1]
         { []
         }
     {offset
       c3GOi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GOj; else goto c3GOk;
       c3GOj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GOk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G4Z_info" {
     sat_s3G4Z_info:
         const sat_s3G4Z_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+72;
 },
 sat_s3G52_entry() //  [R1]
         { []
         }
     {offset
       c3GOr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GOs; else goto c3GOt;
       c3GOs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GOt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G52_info" {
     sat_s3G52_info:
         const sat_s3G52_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+72;
 },
 sat_s3G55_entry() //  [R1]
         { []
         }
     {offset
       c3GOA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GOB; else goto c3GOC;
       c3GOB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GOC: // global
           R3 = P64[R1 + 16];
           R2 = 11;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G55_info" {
     sat_s3G55_info:
         const sat_s3G55_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+24;
 },
 Text.Read.Lex.$fShowLexeme_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c3GOM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3GON; else goto c3GOO;
       c3GON: // global
           R2 = R2;
           R1 = Text.Read.Lex.$fShowLexeme_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GOO: // global
           I64[Sp - 8] = block_c3GNB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3GPe; else goto c3GNC;
       u3GPe: // global
           call _c3GNB(R1) args: 0, res: 0, upd: 0;
       c3GNC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme_$cshow_info" {
     Text.Read.Lex.$fShowLexeme_$cshow_info:
         const Text.Read.Lex.$fShowLexeme_$cshow_entry;
         const 0;
         const 5433133629454;
         const 4294967301;
         const S3GvX_srt+24;
 },
 _c3GNB() //  [R1]
         { []
         }
     {offset
       c3GNB: // global
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3GOE;
               case 2 : goto c3GOF;
               case 3 : goto c3GOG;
               case 4 : goto c3GOH;
               case 5 : goto c3GOI;
               case 6 : goto c3GOJ;
               case 7 : goto c3GOK;
           }
       c3GOK: // global
           R1 = Text.Read.Lex.$fShowLexeme4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3GOJ: // global
           Hp = Hp + 24;
           _s3G4N::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3GPa; else goto c3GP9;
       c3GP9: // global
           _s3G54::P64 = P64[_s3G4N::P64 + 2];
           I64[Hp - 16] = sat_s3G55_info;
           P64[Hp] = _s3G54::P64;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3GOI: // global
           Hp = Hp + 48;
           _s3G4N::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3GP7; else goto c3GP6;
       c3GP6: // global
           _s3G51::P64 = P64[_s3G4N::P64 + 3];
           I64[Hp - 40] = sat_s3G52_info;
           P64[Hp - 24] = _s3G51::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3GOH: // global
           Hp = Hp + 48;
           _s3G4N::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3GP7; else goto c3GP2;
       c3GP2: // global
           _s3G4Y::P64 = P64[_s3G4N::P64 + 4];
           I64[Hp - 40] = sat_s3G4Z_info;
           P64[Hp - 24] = _s3G4Y::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3GOG: // global
           Hp = Hp + 48;
           _s3G4N::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3GP7; else goto c3GOY;
       c3GOY: // global
           _s3G4V::P64 = P64[_s3G4N::P64 + 5];
           I64[Hp - 40] = sat_s3G4W_info;
           P64[Hp - 24] = _s3G4V::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3GOF: // global
           Hp = Hp + 48;
           _s3G4N::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3GP7; else goto c3GOU;
       c3GP7: // global
           HpAlloc = 48;
           R1 = _s3G4N::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GOU: // global
           _s3G4S::P64 = P64[_s3G4N::P64 + 6];
           I64[Hp - 40] = sat_s3G4T_info;
           P64[Hp - 24] = _s3G4S::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3GOE: // global
           Hp = Hp + 24;
           _s3G4N::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3GPa; else goto c3GOQ;
       c3GPa: // global
           HpAlloc = 24;
           R1 = _s3G4N::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GOQ: // global
           _s3G4O::P64 = P64[_s3G4N::P64 + 7];
           I64[Hp - 16] = sat_s3G4R_info;
           P64[Hp] = _s3G4O::P64;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GNB_info" {
     block_c3GNB_info:
         const _c3GNB;
         const 0;
         const 1035087118366;
         const S3GvX_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.440412968 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme1_closure" {
     Text.Read.Lex.$fShowLexeme1_closure:
         const Text.Read.Lex.$fShowLexeme1_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme1_entry() //  [R2]
         { []
         }
     {offset
       c3GQt: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme2_closure+1;
           call Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme1_info" {
     Text.Read.Lex.$fShowLexeme1_info:
         const Text.Read.Lex.$fShowLexeme1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3GvX_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.444815658 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshowList_closure" {
     Text.Read.Lex.$fShowLexeme_$cshowList_closure:
         const Text.Read.Lex.$fShowLexeme_$cshowList_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c3GQE: // global
           R4 = R3;
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fShowLexeme_$cshowList_info" {
     Text.Read.Lex.$fShowLexeme_$cshowList_info:
         const Text.Read.Lex.$fShowLexeme_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3GvX_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.448228344 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_closure" {
     Text.Read.Lex.$fShowLexeme_closure:
         const GHC.Show.C:Show_con_info;
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure+2;
         const Text.Read.Lex.$fShowLexeme_$cshow_closure+1;
         const Text.Read.Lex.$fShowLexeme_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.45023373 UTC

[section ""cstring" . Text.Read.Lex.isSymbolChar4_bytes" {
     Text.Read.Lex.isSymbolChar4_bytes:
         I8[] [44,59,40,41,91,93,123,125,96]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.452605846 UTC

[section ""data" . Text.Read.Lex.isSymbolChar3_closure" {
     Text.Read.Lex.isSymbolChar3_closure:
         const Text.Read.Lex.isSymbolChar3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.isSymbolChar3_entry() //  [R1]
         { []
         }
     {offset
       c3GQT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GQU; else goto c3GQV;
       c3GQU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GQV: // global
           (_c3GQQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GQQ::I64 == 0) goto c3GQS; else goto c3GQR;
       c3GQS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GQR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GQQ::I64;
           R2 = Text.Read.Lex.isSymbolChar4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.isSymbolChar3_info" {
     Text.Read.Lex.isSymbolChar3_info:
         const Text.Read.Lex.isSymbolChar3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.456425161 UTC

[section ""cstring" . Text.Read.Lex.isSymbolChar2_bytes" {
     Text.Read.Lex.isSymbolChar2_bytes:
         I8[] [39,34]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.458890212 UTC

[section ""data" . Text.Read.Lex.isSymbolChar1_closure" {
     Text.Read.Lex.isSymbolChar1_closure:
         const Text.Read.Lex.isSymbolChar1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.isSymbolChar1_entry() //  [R1]
         { []
         }
     {offset
       c3GRb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GRc; else goto c3GRd;
       c3GRc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GRd: // global
           (_c3GR8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GR8::I64 == 0) goto c3GRa; else goto c3GR9;
       c3GRa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GR9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GR8::I64;
           R2 = Text.Read.Lex.isSymbolChar2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.isSymbolChar1_info" {
     Text.Read.Lex.isSymbolChar1_info:
         const Text.Read.Lex.isSymbolChar1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.465180836 UTC

[section ""data" . Text.Read.Lex.isSymbolChar_closure" {
     Text.Read.Lex.isSymbolChar_closure:
         const Text.Read.Lex.isSymbolChar_info;
         const 0;
 },
 Text.Read.Lex.isSymbolChar_entry() //  [R2]
         { []
         }
     {offset
       c3GRw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3GRx; else goto c3GRy;
       c3GRx: // global
           R2 = R2;
           R1 = Text.Read.Lex.isSymbolChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GRy: // global
           I64[Sp - 16] = block_c3GRq_info;
           R4 = Text.Read.Lex.isSymbolChar3_closure;
           R3 = R2;
           _s3G58::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 8] = _s3G58::P64;
           Sp = Sp - 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.isSymbolChar_info" {
     Text.Read.Lex.isSymbolChar_info:
         const Text.Read.Lex.isSymbolChar_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S3GvX_srt+120;
 },
 _c3GRq() //  [R1]
         { []
         }
     {offset
       c3GRq: // global
           if (R1 & 7 == 1) goto c3GRt; else goto u3GSD;
       c3GRt: // global
           _s3G58::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3GRB_info;
           R1 = _s3G58::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3GSQ; else goto c3GRD;
       u3GSQ: // global
           call _c3GRB(R1) args: 0, res: 0, upd: 0;
       c3GRD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3GSD: // global
           Sp = Sp + 16;
           call _c3GRu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3GRq_info" {
     block_c3GRq_info:
         const _c3GRq;
         const 1;
         const 21474836510;
         const S3GvX_srt+120;
 },
 _c3GRB() //  [R1]
         { []
         }
     {offset
       c3GRB: // global
           I64[Sp - 16] = block_c3GRH_info;
           _s3G5b::I64 = I64[R1 + 7];
           R2 = _s3G5b::I64;
           I64[Sp - 8] = _s3G5b::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GRB_info" {
     block_c3GRB_info:
         const _c3GRB;
         const 0;
         const 21474836510;
         const S3GvX_srt+120;
 },
 _c3GRH() //  [R1]
         { []
         }
     {offset
       c3GRH: // global
           _c3GSz::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c3GSz::I64 < 22) goto u3GSB; else goto u3GSE;
       u3GSB: // global
           if (_c3GSz::I64 < 11) goto u3GSF; else goto u3GSC;
       u3GSF: // global
           Sp = Sp + 24;
           goto u3GSW;
       u3GSC: // global
           switch [11 .. 21] _c3GSz::I64 {
               case 11 : goto c3GRW;
               case 12 : goto u3GSL;
               case 17 : goto c3GS5;
               case 18, 19, 20, 21 : goto u3GSL;
               default: {goto u3GSG;}
           }
       c3GS5: // global
           _s3G5a::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3GS3_info;
           R4 = Text.Read.Lex.isSymbolChar1_closure;
           R3 = _s3G5a::P64;
           R2 = GHC.Classes.$fEqChar_closure;
           Sp = Sp + 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       u3GSL: // global
           Sp = Sp + 24;
           goto u3GSX;
       c3GRW: // global
           if (I64[Sp + 8] == 95) goto u3GSO; else goto u3GSP;
       u3GSO: // global
           Sp = Sp + 24;
           goto u3GSW;
       u3GSP: // global
           Sp = Sp + 24;
           goto u3GSX;
       u3GSX: // global
           call _c3GSv() args: 0, res: 0, upd: 0;
       u3GSG: // global
           Sp = Sp + 24;
           goto u3GSW;
       u3GSE: // global
           Sp = Sp + 24;
           goto u3GSW;
       u3GSW: // global
           call _c3GRu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3GRH_info" {
     block_c3GRH_info:
         const _c3GRH;
         const 66;
         const 4294967326;
         const S3GvX_srt+136;
 },
 _c3GS3() //  [R1]
         { []
         }
     {offset
       c3GS3: // global
           if (R1 & 7 == 1) goto u3GSM; else goto u3GSN;
       u3GSM: // global
           Sp = Sp + 8;
           call _c3GSv() args: 0, res: 0, upd: 0;
       u3GSN: // global
           Sp = Sp + 8;
           call _c3GRu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3GS3_info" {
     block_c3GS3_info:
         const _c3GS3;
         const 0;
         const 30;
 },
 _c3GSv() //  []
         { []
         }
     {offset
       c3GSv: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3GRu() //  []
         { []
         }
     {offset
       c3GRu: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.477489749 UTC

[section ""cstring" . lvl_r3y8T_bytes" {
     lvl_r3y8T_bytes:
         I8[] [95,39]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.479794039 UTC

[section ""data" . lvl1_r3y8U_closure" {
     lvl1_r3y8U_closure:
         const lvl1_r3y8U_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3y8U_entry() //  [R1]
         { []
         }
     {offset
       c3GTK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GTL; else goto c3GTM;
       c3GTL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GTM: // global
           (_c3GTH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GTH::I64 == 0) goto c3GTJ; else goto c3GTI;
       c3GTJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GTI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GTH::I64;
           R2 = lvl_r3y8T_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r3y8U_info" {
     lvl1_r3y8U_info:
         const lvl1_r3y8U_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.48418957 UTC

[section ""data" . $wisIdfChar_r3y8V_closure" {
     $wisIdfChar_r3y8V_closure:
         const $wisIdfChar_r3y8V_info;
         const 0;
 },
 $wisIdfChar_r3y8V_entry() //  [R2]
         { []
         }
     {offset
       c3GU1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3GU5; else goto c3GU4;
       c3GU5: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = $wisIdfChar_r3y8V_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GU4: // global
           (_s3G5k::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(R2);
           if (_s3G5k::I64 == 0) goto c3GUf; else goto c3GUb;
       c3GUf: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R2;
           R4 = lvl1_r3y8U_closure;
           R3 = Hp - 7;
           R2 = GHC.Classes.$fEqChar_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3GUb: // global
           Hp = Hp - 16;
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wisIdfChar_r3y8V_info" {
     $wisIdfChar_r3y8V_info:
         const $wisIdfChar_r3y8V_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const S3GvX_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.489039899 UTC

[section ""data" . isIdfChar_r3y8W_closure" {
     isIdfChar_r3y8W_closure:
         const isIdfChar_r3y8W_info;
         const 0;
 },
 isIdfChar_r3y8W_entry() //  [R2]
         { []
         }
     {offset
       c3GUu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3GUv; else goto c3GUw;
       c3GUv: // global
           R2 = R2;
           R1 = isIdfChar_r3y8W_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GUw: // global
           I64[Sp - 8] = block_c3GUr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3GUA; else goto c3GUs;
       u3GUA: // global
           call _c3GUr(R1) args: 0, res: 0, upd: 0;
       c3GUs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . isIdfChar_r3y8W_info" {
     isIdfChar_r3y8W_info:
         const isIdfChar_r3y8W_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+160;
 },
 _c3GUr() //  [R1]
         { []
         }
     {offset
       c3GUr: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call $wisIdfChar_r3y8V_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GUr_info" {
     block_c3GUr_info:
         const _c3GUr;
         const 0;
         const 4294967326;
         const S3GvX_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.493829407 UTC

[section ""cstring" . reserved_ops_r3y8X_bytes" {
     reserved_ops_r3y8X_bytes:
         I8[] [46,46]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.496090111 UTC

[section ""data" . reserved_ops1_r3y8Y_closure" {
     reserved_ops1_r3y8Y_closure:
         const reserved_ops1_r3y8Y_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops1_r3y8Y_entry() //  [R1]
         { []
         }
     {offset
       c3GUS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GUT; else goto c3GUU;
       c3GUT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GUU: // global
           (_c3GUP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GUP::I64 == 0) goto c3GUR; else goto c3GUQ;
       c3GUR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GUQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GUP::I64;
           R2 = reserved_ops_r3y8X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops1_r3y8Y_info" {
     reserved_ops1_r3y8Y_info:
         const reserved_ops1_r3y8Y_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.499581618 UTC

[section ""cstring" . reserved_ops2_r3y8Z_bytes" {
     reserved_ops2_r3y8Z_bytes:
         I8[] [58,58]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.501800594 UTC

[section ""data" . reserved_ops3_r3y90_closure" {
     reserved_ops3_r3y90_closure:
         const reserved_ops3_r3y90_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops3_r3y90_entry() //  [R1]
         { []
         }
     {offset
       c3GVa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GVb; else goto c3GVc;
       c3GVb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GVc: // global
           (_c3GV7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GV7::I64 == 0) goto c3GV9; else goto c3GV8;
       c3GV9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GV8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GV7::I64;
           R2 = reserved_ops2_r3y8Z_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops3_r3y90_info" {
     reserved_ops3_r3y90_info:
         const reserved_ops3_r3y90_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.505667831 UTC

[section ""cstring" . reserved_ops4_r3y91_bytes" {
     reserved_ops4_r3y91_bytes:
         I8[] [61]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.50802732 UTC

[section ""data" . reserved_ops5_r3y92_closure" {
     reserved_ops5_r3y92_closure:
         const reserved_ops5_r3y92_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops5_r3y92_entry() //  [R1]
         { []
         }
     {offset
       c3GVs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GVt; else goto c3GVu;
       c3GVt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GVu: // global
           (_c3GVp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GVp::I64 == 0) goto c3GVr; else goto c3GVq;
       c3GVr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GVq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GVp::I64;
           R2 = reserved_ops4_r3y91_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops5_r3y92_info" {
     reserved_ops5_r3y92_info:
         const reserved_ops5_r3y92_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.512319155 UTC

[section ""cstring" . reserved_ops6_r3y93_bytes" {
     reserved_ops6_r3y93_bytes:
         I8[] [92]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.514694648 UTC

[section ""data" . reserved_ops7_r3y94_closure" {
     reserved_ops7_r3y94_closure:
         const reserved_ops7_r3y94_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops7_r3y94_entry() //  [R1]
         { []
         }
     {offset
       c3GVK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GVL; else goto c3GVM;
       c3GVL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GVM: // global
           (_c3GVH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GVH::I64 == 0) goto c3GVJ; else goto c3GVI;
       c3GVJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GVI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GVH::I64;
           R2 = reserved_ops6_r3y93_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops7_r3y94_info" {
     reserved_ops7_r3y94_info:
         const reserved_ops7_r3y94_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.518285415 UTC

[section ""cstring" . reserved_ops8_r3y95_bytes" {
     reserved_ops8_r3y95_bytes:
         I8[] [124]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.520636112 UTC

[section ""data" . reserved_ops9_r3y96_closure" {
     reserved_ops9_r3y96_closure:
         const reserved_ops9_r3y96_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops9_r3y96_entry() //  [R1]
         { []
         }
     {offset
       c3GW2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GW3; else goto c3GW4;
       c3GW3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GW4: // global
           (_c3GVZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GVZ::I64 == 0) goto c3GW1; else goto c3GW0;
       c3GW1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GW0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GVZ::I64;
           R2 = reserved_ops8_r3y95_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops9_r3y96_info" {
     reserved_ops9_r3y96_info:
         const reserved_ops9_r3y96_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.524290666 UTC

[section ""cstring" . reserved_ops10_r3y97_bytes" {
     reserved_ops10_r3y97_bytes:
         I8[] [60,45]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.526687539 UTC

[section ""data" . reserved_ops11_r3y98_closure" {
     reserved_ops11_r3y98_closure:
         const reserved_ops11_r3y98_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops11_r3y98_entry() //  [R1]
         { []
         }
     {offset
       c3GWk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GWl; else goto c3GWm;
       c3GWl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GWm: // global
           (_c3GWh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GWh::I64 == 0) goto c3GWj; else goto c3GWi;
       c3GWj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GWi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GWh::I64;
           R2 = reserved_ops10_r3y97_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops11_r3y98_info" {
     reserved_ops11_r3y98_info:
         const reserved_ops11_r3y98_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.531374112 UTC

[section ""cstring" . reserved_ops12_r3y99_bytes" {
     reserved_ops12_r3y99_bytes:
         I8[] [45,62]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.533783182 UTC

[section ""data" . reserved_ops13_r3y9a_closure" {
     reserved_ops13_r3y9a_closure:
         const reserved_ops13_r3y9a_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops13_r3y9a_entry() //  [R1]
         { []
         }
     {offset
       c3GWC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GWD; else goto c3GWE;
       c3GWD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GWE: // global
           (_c3GWz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GWz::I64 == 0) goto c3GWB; else goto c3GWA;
       c3GWB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GWA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GWz::I64;
           R2 = reserved_ops12_r3y99_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops13_r3y9a_info" {
     reserved_ops13_r3y9a_info:
         const reserved_ops13_r3y9a_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.53763569 UTC

[section ""cstring" . reserved_ops14_r3y9b_bytes" {
     reserved_ops14_r3y9b_bytes:
         I8[] [64]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.539917954 UTC

[section ""data" . reserved_ops15_r3y9c_closure" {
     reserved_ops15_r3y9c_closure:
         const reserved_ops15_r3y9c_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops15_r3y9c_entry() //  [R1]
         { []
         }
     {offset
       c3GWU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GWV; else goto c3GWW;
       c3GWV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GWW: // global
           (_c3GWR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GWR::I64 == 0) goto c3GWT; else goto c3GWS;
       c3GWT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GWS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GWR::I64;
           R2 = reserved_ops14_r3y9b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops15_r3y9c_info" {
     reserved_ops15_r3y9c_info:
         const reserved_ops15_r3y9c_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.544064036 UTC

[section ""cstring" . reserved_ops16_r3y9d_bytes" {
     reserved_ops16_r3y9d_bytes:
         I8[] [126]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.546574963 UTC

[section ""data" . reserved_ops17_r3y9e_closure" {
     reserved_ops17_r3y9e_closure:
         const reserved_ops17_r3y9e_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops17_r3y9e_entry() //  [R1]
         { []
         }
     {offset
       c3GXc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GXd; else goto c3GXe;
       c3GXd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GXe: // global
           (_c3GX9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GX9::I64 == 0) goto c3GXb; else goto c3GXa;
       c3GXb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GXa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GX9::I64;
           R2 = reserved_ops16_r3y9d_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops17_r3y9e_info" {
     reserved_ops17_r3y9e_info:
         const reserved_ops17_r3y9e_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.550222599 UTC

[section ""cstring" . reserved_ops18_r3y9f_bytes" {
     reserved_ops18_r3y9f_bytes:
         I8[] [61,62]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.552581218 UTC

[section ""data" . reserved_ops19_r3y9g_closure" {
     reserved_ops19_r3y9g_closure:
         const reserved_ops19_r3y9g_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops19_r3y9g_entry() //  [R1]
         { []
         }
     {offset
       c3GXu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GXv; else goto c3GXw;
       c3GXv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GXw: // global
           (_c3GXr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GXr::I64 == 0) goto c3GXt; else goto c3GXs;
       c3GXt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GXs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GXr::I64;
           R2 = reserved_ops18_r3y9f_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reserved_ops19_r3y9g_info" {
     reserved_ops19_r3y9g_info:
         const reserved_ops19_r3y9g_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.556672811 UTC

[section ""data" . reserved_ops20_r3y9h_closure" {
     reserved_ops20_r3y9h_closure:
         const :_con_info;
         const reserved_ops19_r3y9g_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.558490764 UTC

[section ""data" . reserved_ops21_r3y9i_closure" {
     reserved_ops21_r3y9i_closure:
         const :_con_info;
         const reserved_ops17_r3y9e_closure;
         const reserved_ops20_r3y9h_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.560219018 UTC

[section ""data" . reserved_ops22_r3y9j_closure" {
     reserved_ops22_r3y9j_closure:
         const :_con_info;
         const reserved_ops15_r3y9c_closure;
         const reserved_ops21_r3y9i_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.562042049 UTC

[section ""data" . reserved_ops23_r3y9k_closure" {
     reserved_ops23_r3y9k_closure:
         const :_con_info;
         const reserved_ops13_r3y9a_closure;
         const reserved_ops22_r3y9j_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.56380956 UTC

[section ""data" . reserved_ops24_r3y9l_closure" {
     reserved_ops24_r3y9l_closure:
         const :_con_info;
         const reserved_ops11_r3y98_closure;
         const reserved_ops23_r3y9k_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.565618422 UTC

[section ""data" . reserved_ops25_r3y9m_closure" {
     reserved_ops25_r3y9m_closure:
         const :_con_info;
         const reserved_ops9_r3y96_closure;
         const reserved_ops24_r3y9l_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.567393867 UTC

[section ""data" . reserved_ops26_r3y9n_closure" {
     reserved_ops26_r3y9n_closure:
         const :_con_info;
         const reserved_ops7_r3y94_closure;
         const reserved_ops25_r3y9m_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.56921735 UTC

[section ""data" . reserved_ops27_r3y9o_closure" {
     reserved_ops27_r3y9o_closure:
         const :_con_info;
         const reserved_ops5_r3y92_closure;
         const reserved_ops26_r3y9n_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.5709822 UTC

[section ""data" . reserved_ops28_r3y9p_closure" {
     reserved_ops28_r3y9p_closure:
         const :_con_info;
         const reserved_ops3_r3y90_closure;
         const reserved_ops27_r3y9o_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.57322087 UTC

[section ""data" . reserved_ops29_r3y9q_closure" {
     reserved_ops29_r3y9q_closure:
         const :_con_info;
         const reserved_ops1_r3y8Y_closure;
         const reserved_ops28_r3y9p_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.580894544 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c==1_closure" {
     Text.Read.Lex.$fEqLexeme_$c==1_closure:
         const Text.Read.Lex.$fEqLexeme_$c==1_info;
 },
 Text.Read.Lex.$fEqLexeme_$c==1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3GY0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3GY1; else goto c3GY2;
       c3GY1: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c==1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3GY2: // global
           I64[Sp - 16] = block_c3GXT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3H0N; else goto c3GXU;
       u3H0N: // global
           call _c3GXT(R1) args: 0, res: 0, upd: 0;
       c3GXU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fEqLexeme_$c==1_info" {
     Text.Read.Lex.$fEqLexeme_$c==1_info:
         const Text.Read.Lex.$fEqLexeme_$c==1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3GXT() //  [R1]
         { []
         }
     {offset
       c3GXT: // global
           _s3G5r::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3GXX; else goto c3GXY;
       c3GXX: // global
           I64[Sp - 8] = block_c3GY5_info;
           _s3G5t::P64 = P64[R1 + 7];
           _s3G5u::P64 = P64[R1 + 15];
           R1 = _s3G5r::P64;
           P64[Sp] = _s3G5u::P64;
           P64[Sp + 8] = _s3G5t::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3H0L; else goto c3GY7;
       u3H0L: // global
           call _c3GY5(R1) args: 0, res: 0, upd: 0;
       c3GY7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GXY: // global
           I64[Sp - 16] = block_c3GYB_info;
           _s3G5G::P64 = P64[R1 + 6];
           _s3G5H::P64 = P64[R1 + 14];
           _s3G5I::P64 = P64[R1 + 22];
           R1 = _s3G5r::P64;
           P64[Sp - 8] = _s3G5I::P64;
           P64[Sp] = _s3G5H::P64;
           P64[Sp + 8] = _s3G5G::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3H0M; else goto c3GYD;
       u3H0M: // global
           call _c3GYB(R1) args: 0, res: 0, upd: 0;
       c3GYD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GXT_info" {
     block_c3GXT_info:
         const _c3GXT;
         const 1;
         const 30;
 },
 _c3GY5() //  [R1]
         { []
         }
     {offset
       c3GY5: // global
           if (R1 & 7 == 1) goto c3GYj; else goto u3H0J;
       c3GYj: // global
           I64[Sp - 8] = block_c3GYb_info;
           _s3G5w::P64 = P64[R1 + 7];
           _s3G5x::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s3G5x::P64;
           P64[Sp + 16] = _s3G5w::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3H0O; else goto c3GYc;
       u3H0O: // global
           call _c3GYb(R1) args: 0, res: 0, upd: 0;
       c3GYc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3H0J: // global
           Sp = Sp + 24;
           call _c3H0l() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3GY5_info" {
     block_c3GY5_info:
         const _c3GY5;
         const 2;
         const 30;
 },
 _c3GYb() //  [R1]
         { []
         }
     {offset
       c3GYb: // global
           I64[Sp] = block_c3GYg_info;
           _s3G5z::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s3G5z::I64;
           if (R1 & 7 != 0) goto u3H0Q; else goto c3GYl;
       u3H0Q: // global
           call _c3GYg(R1) args: 0, res: 0, upd: 0;
       c3GYl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GYb_info" {
     block_c3GYb_info:
         const _c3GYb;
         const 3;
         const 30;
 },
 _c3GYg() //  [R1]
         { []
         }
     {offset
       c3GYg: // global
           if (I64[Sp + 24] == I64[R1 + 7]) goto c3GYu; else goto u3H0K;
       c3GYu: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
       u3H0K: // global
           Sp = Sp + 32;
           call _c3H0l() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3GYg_info" {
     block_c3GYg_info:
         const _c3GYg;
         const 259;
         const 30;
 },
 _c3GYB() //  [R1]
         { []
         }
     {offset
       c3GYB: // global
           if (R1 & 7 == 1) goto u3H0A; else goto c3GYO;
       u3H0A: // global
           Sp = Sp + 32;
           call _c3H0l() args: 0, res: 0, upd: 0;
       c3GYO: // global
           I64[Sp - 8] = block_c3GYM_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 22];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 8;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GYB_info" {
     block_c3GYB_info:
         const _c3GYB;
         const 3;
         const 30;
 },
 _c3GYM() //  [R1]
         { []
         }
     {offset
       c3GYM: // global
           if (R1 & 7 == 1) goto u3H0B; else goto c3GZF;
       u3H0B: // global
           Sp = Sp + 40;
           call _c3H0l() args: 0, res: 0, upd: 0;
       c3GZF: // global
           I64[Sp] = block_c3GYZ_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3H0T; else goto c3GZG;
       u3H0T: // global
           call _c3GYZ(R1) args: 0, res: 0, upd: 0;
       c3GZG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GYM_info" {
     block_c3GYM_info:
         const _c3GYM;
         const 4;
         const 30;
 },
 _c3GYZ() //  [R1]
         { []
         }
     {offset
       c3GYZ: // global
           _s3G5N::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c3GZN; else goto c3H03;
       c3GZN: // global
           I64[Sp] = block_c3GZK_info;
           R1 = _s3G5N::P64;
           if (R1 & 7 != 0) goto u3H0V; else goto c3GZO;
       u3H0V: // global
           call _c3GZK(R1) args: 0, res: 0, upd: 0;
       c3GZO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H03: // global
           I64[Sp] = block_c3H01_info;
           _s3G60::P64 = P64[R1 + 6];
           R1 = _s3G5N::P64;
           P64[Sp + 32] = _s3G60::P64;
           if (R1 & 7 != 0) goto u3H0W; else goto c3H04;
       u3H0W: // global
           call _c3H01(R1) args: 0, res: 0, upd: 0;
       c3H04: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GYZ_info" {
     block_c3GYZ_info:
         const _c3GYZ;
         const 260;
         const 30;
 },
 _c3GZK() //  [R1]
         { []
         }
     {offset
       c3GZK: // global
           if (R1 & 7 == 1) goto u3H0F; else goto u3H0G;
       u3H0F: // global
           Sp = Sp + 8;
           call _s3G5Q() args: 0, res: 0, upd: 0;
       u3H0G: // global
           Sp = Sp + 40;
           call _c3H0l() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3GZK_info" {
     block_c3GZK_info:
         const _c3GZK;
         const 772;
         const 30;
 },
 _c3H01() //  [R1]
         { []
         }
     {offset
       c3H01: // global
           if (R1 & 7 == 1) goto u3H0C; else goto c3H0f;
       u3H0C: // global
           Sp = Sp + 40;
           call _c3H0l() args: 0, res: 0, upd: 0;
       c3H0f: // global
           I64[Sp] = block_c3H0d_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 32];
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3H01_info" {
     block_c3H01_info:
         const _c3H01;
         const 260;
         const 30;
 },
 _c3H0d() //  [R1]
         { []
         }
     {offset
       c3H0d: // global
           if (R1 & 7 == 1) goto u3H0D; else goto u3H0E;
       u3H0D: // global
           Sp = Sp + 40;
           call _c3H0l() args: 0, res: 0, upd: 0;
       u3H0E: // global
           Sp = Sp + 8;
           call _s3G5Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3H0d_info" {
     block_c3H0d_info:
         const _c3H0d;
         const 772;
         const 30;
 },
 _s3G5Q() //  []
         { []
         }
     {offset
       s3G5Q: // global
           I64[Sp - 8] = block_c3GZ4_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3H16; else goto c3GZ6;
       u3H16: // global
           call _c3GZ4(R1) args: 0, res: 0, upd: 0;
       c3GZ6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3GZ4() //  [R1]
         { []
         }
     {offset
       c3GZ4: // global
           _s3G5O::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3GZd; else goto c3GZt;
       c3GZd: // global
           I64[Sp + 32] = block_c3GZa_info;
           R1 = _s3G5O::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3H0X; else goto c3GZe;
       u3H0X: // global
           call _c3GZa(R1) args: 0, res: 0, upd: 0;
       c3GZe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GZt: // global
           I64[Sp + 24] = block_c3GZr_info;
           _s3G5U::P64 = P64[R1 + 6];
           R1 = _s3G5O::P64;
           P64[Sp + 32] = _s3G5U::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3H0Y; else goto c3GZu;
       u3H0Y: // global
           call _c3GZr(R1) args: 0, res: 0, upd: 0;
       c3GZu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GZ4_info" {
     block_c3GZ4_info:
         const _c3GZ4;
         const 900;
         const 30;
 },
 _c3GZa() //  [R1]
         { []
         }
     {offset
       c3GZa: // global
           if (R1 & 7 == 1) goto c3GZk; else goto u3H0I;
       c3GZk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3H0I: // global
           Sp = Sp + 8;
           call _c3H0l() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3GZa_info" {
     block_c3GZa_info:
         const _c3GZa;
         const 0;
         const 30;
 },
 _c3GZr() //  [R1]
         { []
         }
     {offset
       c3GZr: // global
           if (R1 & 7 == 1) goto u3H0H; else goto c3GZE;
       u3H0H: // global
           Sp = Sp + 16;
           call _c3H0l() args: 0, res: 0, upd: 0;
       c3GZE: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3GZr_info" {
     block_c3GZr_info:
         const _c3GZr;
         const 1;
         const 30;
 },
 _c3H0l() //  []
         { []
         }
     {offset
       c3H0l: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.609506753 UTC

[section ""data" . Text.Read.Lex.$fEqNumber_$c/=_closure" {
     Text.Read.Lex.$fEqNumber_$c/=_closure:
         const Text.Read.Lex.$fEqNumber_$c/=_info;
 },
 Text.Read.Lex.$fEqNumber_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c3H2U: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3H2V; else goto c3H2W;
       c3H2V: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqNumber_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3H2W: // global
           I64[Sp - 8] = block_c3H2O_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$fEqLexeme_$c==1_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fEqNumber_$c/=_info" {
     Text.Read.Lex.$fEqNumber_$c/=_info:
         const Text.Read.Lex.$fEqNumber_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3H2O() //  [R1]
         { []
         }
     {offset
       c3H2O: // global
           if (R1 & 7 == 1) goto c3H2R; else goto c3H2S;
       c3H2R: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3H2S: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3H2O_info" {
     block_c3H2O_info:
         const _c3H2O;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.615186382 UTC

[section ""data" . Text.Read.Lex.$fEqNumber_closure" {
     Text.Read.Lex.$fEqNumber_closure:
         const GHC.Classes.C:Eq_con_info;
         const Text.Read.Lex.$fEqLexeme_$c==1_closure+2;
         const Text.Read.Lex.$fEqNumber_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.621102785 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c==_closure" {
     Text.Read.Lex.$fEqLexeme_$c==_closure:
         const Text.Read.Lex.$fEqLexeme_$c==_info;
 },
 Text.Read.Lex.$fEqLexeme_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c3H3z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3H3A; else goto c3H3B;
       c3H3A: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3H3B: // global
           I64[Sp - 16] = block_c3H3n_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3H5E; else goto c3H3o;
       u3H5E: // global
           call _c3H3n(R1) args: 0, res: 0, upd: 0;
       c3H3o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fEqLexeme_$c==_info" {
     Text.Read.Lex.$fEqLexeme_$c==_info:
         const Text.Read.Lex.$fEqLexeme_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3H3n() //  [R1]
         { []
         }
     {offset
       c3H3n: // global
           _s3G68::P64 = P64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3H3r;
               case 2 : goto c3H3s;
               case 3 : goto c3H3t;
               case 4 : goto c3H3u;
               case 5 : goto c3H3v;
               case 6 : goto c3H3w;
               case 7 : goto c3H3x;
           }
       c3H3x: // global
           I64[Sp + 8] = block_c3H56_info;
           R1 = _s3G68::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3H5D; else goto c3H58;
       u3H5D: // global
           call _c3H56(R1) args: 0, res: 0, upd: 0;
       c3H58: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H3w: // global
           I64[Sp] = block_c3H4R_info;
           _s3G6p::P64 = P64[R1 + 2];
           R1 = _s3G68::P64;
           P64[Sp + 8] = _s3G6p::P64;
           if (R1 & 7 != 0) goto u3H5C; else goto c3H4T;
       u3H5C: // global
           call _c3H4R(R1) args: 0, res: 0, upd: 0;
       c3H4T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H3v: // global
           I64[Sp] = block_c3H4C_info;
           _s3G6m::P64 = P64[R1 + 3];
           R1 = _s3G68::P64;
           P64[Sp + 8] = _s3G6m::P64;
           if (R1 & 7 != 0) goto u3H5B; else goto c3H4E;
       u3H5B: // global
           call _c3H4C(R1) args: 0, res: 0, upd: 0;
       c3H4E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H3u: // global
           I64[Sp] = block_c3H4n_info;
           _s3G6j::P64 = P64[R1 + 4];
           R1 = _s3G68::P64;
           P64[Sp + 8] = _s3G6j::P64;
           if (R1 & 7 != 0) goto u3H5A; else goto c3H4p;
       u3H5A: // global
           call _c3H4n(R1) args: 0, res: 0, upd: 0;
       c3H4p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H3t: // global
           I64[Sp] = block_c3H48_info;
           _s3G6g::P64 = P64[R1 + 5];
           R1 = _s3G68::P64;
           P64[Sp + 8] = _s3G6g::P64;
           if (R1 & 7 != 0) goto u3H5z; else goto c3H4a;
       u3H5z: // global
           call _c3H48(R1) args: 0, res: 0, upd: 0;
       c3H4a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H3s: // global
           I64[Sp] = block_c3H3T_info;
           _s3G6d::P64 = P64[R1 + 6];
           R1 = _s3G68::P64;
           P64[Sp + 8] = _s3G6d::P64;
           if (R1 & 7 != 0) goto u3H5y; else goto c3H3V;
       u3H5y: // global
           call _c3H3T(R1) args: 0, res: 0, upd: 0;
       c3H3V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H3r: // global
           I64[Sp] = block_c3H3E_info;
           _s3G6a::P64 = P64[R1 + 7];
           R1 = _s3G68::P64;
           P64[Sp + 8] = _s3G6a::P64;
           if (R1 & 7 != 0) goto u3H5x; else goto c3H3G;
       u3H5x: // global
           call _c3H3E(R1) args: 0, res: 0, upd: 0;
       c3H3G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3H3n_info" {
     block_c3H3n_info:
         const _c3H3n;
         const 1;
         const 30;
 },
 _c3H56() //  [R1]
         { []
         }
     {offset
       c3H56: // global
           if (R1 & 7 == 7) goto c3H5i; else goto u3H5q;
       c3H5i: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3H5q: // global
           Sp = Sp + 8;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3H56_info" {
     block_c3H56_info:
         const _c3H56;
         const 0;
         const 30;
 },
 _c3H4R() //  [R1]
         { []
         }
     {offset
       c3H4R: // global
           if (R1 & 7 == 6) goto c3H53; else goto u3H5r;
       c3H53: // global
           R3 = P64[R1 + 2];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.Read.Lex.$fEqLexeme_$c==1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       u3H5r: // global
           Sp = Sp + 16;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3H4R_info" {
     block_c3H4R_info:
         const _c3H4R;
         const 1;
         const 30;
 },
 _c3H4C() //  [R1]
         { []
         }
     {offset
       c3H4C: // global
           if (R1 & 7 == 5) goto c3H4O; else goto u3H5s;
       c3H4O: // global
           R3 = P64[R1 + 3];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3H5s: // global
           Sp = Sp + 16;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3H4C_info" {
     block_c3H4C_info:
         const _c3H4C;
         const 1;
         const 30;
 },
 _c3H4n() //  [R1]
         { []
         }
     {offset
       c3H4n: // global
           if (R1 & 7 == 4) goto c3H4z; else goto u3H5t;
       c3H4z: // global
           R3 = P64[R1 + 4];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3H5t: // global
           Sp = Sp + 16;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3H4n_info" {
     block_c3H4n_info:
         const _c3H4n;
         const 1;
         const 30;
 },
 _c3H48() //  [R1]
         { []
         }
     {offset
       c3H48: // global
           if (R1 & 7 == 3) goto c3H4k; else goto u3H5u;
       c3H4k: // global
           R3 = P64[R1 + 5];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3H5u: // global
           Sp = Sp + 16;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3H48_info" {
     block_c3H48_info:
         const _c3H48;
         const 1;
         const 30;
 },
 _c3H3T() //  [R1]
         { []
         }
     {offset
       c3H3T: // global
           if (R1 & 7 == 2) goto c3H45; else goto u3H5v;
       c3H45: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3H5v: // global
           Sp = Sp + 16;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3H3T_info" {
     block_c3H3T_info:
         const _c3H3T;
         const 1;
         const 30;
 },
 _c3H3E() //  [R1]
         { []
         }
     {offset
       c3H3E: // global
           if (R1 & 7 == 1) goto c3H3Q; else goto u3H5w;
       c3H3Q: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.eqChar_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3H5w: // global
           Sp = Sp + 16;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3H3E_info" {
     block_c3H3E_info:
         const _c3H3E;
         const 1;
         const 30;
 },
 _c3H5e() //  []
         { []
         }
     {offset
       c3H5e: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.641081837 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c/=_closure" {
     Text.Read.Lex.$fEqLexeme_$c/=_closure:
         const Text.Read.Lex.$fEqLexeme_$c/=_info;
 },
 Text.Read.Lex.$fEqLexeme_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c3H74: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3H75; else goto c3H76;
       c3H75: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3H76: // global
           I64[Sp - 8] = block_c3H6Y_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$fEqLexeme_$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$fEqLexeme_$c/=_info" {
     Text.Read.Lex.$fEqLexeme_$c/=_info:
         const Text.Read.Lex.$fEqLexeme_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3H6Y() //  [R1]
         { []
         }
     {offset
       c3H6Y: // global
           if (R1 & 7 == 1) goto c3H71; else goto c3H72;
       c3H71: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3H72: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3H6Y_info" {
     block_c3H6Y_info:
         const _c3H6Y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.646285785 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_closure" {
     Text.Read.Lex.$fEqLexeme_closure:
         const GHC.Classes.C:Eq_con_info;
         const Text.Read.Lex.$fEqLexeme_$c==_closure+2;
         const Text.Read.Lex.$fEqLexeme_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.648815119 UTC

[section ""data" . Text.Read.Lex.numberToFixed2_closure" {
     Text.Read.Lex.numberToFixed2_closure:
         const Text.Read.Lex.numberToFixed2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToFixed2_entry() //  [R1]
         { []
         }
     {offset
       c3H7z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3H7A; else goto c3H7B;
       c3H7A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3H7B: // global
           (_c3H7w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3H7w::I64 == 0) goto c3H7y; else goto c3H7x;
       c3H7y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3H7x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3H7w::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToFixed2_info" {
     Text.Read.Lex.numberToFixed2_info:
         const Text.Read.Lex.numberToFixed2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.652814419 UTC

[section ""cstring" . lvl2_r3y9r_bytes" {
     lvl2_r3y9r_bytes:
         I8[] [116,104,105,115,32,115,104,111,117,108,100,32,110,111,116,32,104,97,112,112,101,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.656139274 UTC

[section ""data" . lvl3_r3y9s_closure" {
     lvl3_r3y9s_closure:
         const lvl3_r3y9s_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r3y9s_entry() //  [R1]
         { []
         }
     {offset
       c3H7V: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3H7W; else goto c3H7X;
       c3H7W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3H7X: // global
           (_c3H7Q::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3H7Q::I64 == 0) goto c3H7S; else goto c3H7R;
       c3H7S: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3H7R: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3H7Q::I64;
           I64[Sp - 24] = block_c3H7T_info;
           R2 = lvl2_r3y9r_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r3y9s_info" {
     lvl3_r3y9s_info:
         const lvl3_r3y9s_entry;
         const 0;
         const 4294967317;
         const S3GvX_srt+176;
 },
 _c3H7T() //  [R1]
         { []
         }
     {offset
       c3H7T: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3H7T_info" {
     block_c3H7T_info:
         const _c3H7T;
         const 0;
         const 4294967326;
         const S3GvX_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.664097492 UTC

[section ""data" . combine_r3y9t_closure" {
     combine_r3y9t_closure:
         const combine_r3y9t_info;
         const 0;
 },
 sat_s3G6H_entry() //  [R1]
         { []
         }
     {offset
       c3H8F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3H8G; else goto c3H8H;
       c3H8G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3H8H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call combine_r3y9t_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G6H_info" {
     sat_s3G6H_info:
         const sat_s3G6H_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+184;
 },
 combine_r3y9t_entry() //  [R2, R3]
         { []
         }
     {offset
       c3H8M: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3H8N; else goto c3H8O;
       c3H8N: // global
           R3 = R3;
           R2 = R2;
           R1 = combine_r3y9t_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3H8O: // global
           I64[Sp - 16] = block_c3H8h_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3H95; else goto c3H8i;
       u3H95: // global
           call _c3H8h(R1) args: 0, res: 0, upd: 0;
       c3H8i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . combine_r3y9t_info" {
     combine_r3y9t_info:
         const combine_r3y9t_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const S3GvX_srt+184;
 },
 _c3H8h() //  [R1]
         { []
         }
     {offset
       c3H8h: // global
           if (R1 & 7 == 1) goto c3H8J; else goto c3H8K;
       c3H8J: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3H8K: // global
           I64[Sp - 8] = block_c3H8n_info;
           _s3G6A::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3G6A::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3H94; else goto c3H8o;
       u3H94: // global
           call _c3H8n(R1) args: 0, res: 0, upd: 0;
       c3H8o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3H8h_info" {
     block_c3H8h_info:
         const _c3H8h;
         const 1;
         const 64424509470;
         const S3GvX_srt+184;
 },
 _c3H8n() //  [R1]
         { []
         }
     {offset
       c3H8n: // global
           if (R1 & 7 == 1) goto c3H8V; else goto c3H8Y;
       c3H8V: // global
           R1 = lvl3_r3y9s_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3H8Y: // global
           I64[Sp - 8] = block_c3H8t_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3H8n_info" {
     block_c3H8n_info:
         const _c3H8n;
         const 2;
         const 64424509470;
         const S3GvX_srt+184;
 },
 _c3H8t() //  [R1]
         { []
         }
     {offset
       c3H8t: // global
           I64[Sp] = block_c3H8x_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3H8t_info" {
     block_c3H8t_info:
         const _c3H8t;
         const 3;
         const 12884901918;
         const S3GvX_srt+184;
 },
 _c3H8x() //  [R1]
         { []
         }
     {offset
       c3H8x: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3H92; else goto c3H91;
       c3H92: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3H91: // global
           I64[Hp - 48] = sat_s3G6H_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3H8x_info" {
     block_c3H8x_info:
         const _c3H8x;
         const 131;
         const 4294967326;
         const S3GvX_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.681737359 UTC

[section ""data" . Text.Read.Lex.numberToFixed_go_closure" {
     Text.Read.Lex.numberToFixed_go_closure:
         const Text.Read.Lex.numberToFixed_go_info;
         const 0;
 },
 Text.Read.Lex.numberToFixed_go_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3HaR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3HaS; else goto u3HbP;
       c3HaS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_go_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3HbP: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3H9O() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToFixed_go_info" {
     Text.Read.Lex.numberToFixed_go_info:
         const Text.Read.Lex.numberToFixed_go_entry;
         const 0;
         const 236223201294;
         const 12884901911;
         const S3GvX_srt+184;
 },
 _c3H9O() //  []
         { []
         }
     {offset
       c3H9O: // global
           I64[Sp - 8] = block_c3H9R_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3HbW; else goto c3H9S;
       u3HbW: // global
           call _c3H9R(R1) args: 0, res: 0, upd: 0;
       c3H9S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3H9R() //  [R1]
         { []
         }
     {offset
       c3H9R: // global
           if (R1 & 7 == 1) goto c3HaO; else goto c3HaP;
       c3HaO: // global
           R1 = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3HaP: // global
           I64[Sp - 8] = block_c3H9X_info;
           _s3G6L::P64 = R1;
           _s3G6M::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3G6M::P64;
           P64[Sp + 24] = _s3G6L::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3HbX; else goto c3H9Y;
       u3HbX: // global
           call _c3H9X(R1) args: 0, res: 0, upd: 0;
       c3H9Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3H9R_info" {
     block_c3H9R_info:
         const _c3H9R;
         const 259;
         const 167503724574;
         const S3GvX_srt+184;
 },
 _c3H9X() //  [R1]
         { []
         }
     {offset
       c3H9X: // global
           if (R1 & 7 == 1) goto c3Hb0; else goto c3Hb2;
       c3Hb0: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Hb2: // global
           I64[Sp + 8] = block_c3Ha3_info;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3HbY; else goto c3Ha4;
       u3HbY: // global
           call _c3Ha3(R1) args: 0, res: 0, upd: 0;
       c3Ha4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3H9X_info" {
     block_c3H9X_info:
         const _c3H9X;
         const 4;
         const 167503724574;
         const S3GvX_srt+184;
 },
 _c3Ha3() //  [R1]
         { []
         }
     {offset
       c3Ha3: // global
           _s3G6S::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_s3G6S::I64, 40)) goto c3Hbx; else goto c3Hby;
       c3Hbx: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 8;
           call _c3Hb7() args: 0, res: 0, upd: 0;
       c3Hby: // global
           I64[Sp] = block_c3Hac_info;
           _s3G6I::P64 = P64[Sp + 8];
           R3 = _s3G6I::P64;
           R2 = _s3G6I::P64;
           I64[Sp + 16] = _s3G6S::I64;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ha3_info" {
     block_c3Ha3_info:
         const _c3Ha3;
         const 131;
         const 167503724574;
         const S3GvX_srt+184;
 },
 _c3Hb7() //  []
         { []
         }
     {offset
       c3Hb7: // global
           I64[Sp - 8] = block_c3Hb9_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Hc5; else goto c3Hbb;
       u3Hc5: // global
           call _c3Hb9(R1) args: 0, res: 0, upd: 0;
       c3Hbb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hb9() //  [R1]
         { []
         }
     {offset
       c3Hb9: // global
           _s3G6V::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3Hbh; else goto c3Hbq;
       c3Hbh: // global
           R1 = _s3G6V::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Hbq: // global
           I64[Sp] = block_c3Hbk_info;
           R3 = P64[Sp + 8];
           R2 = _s3G6V::P64;
           P64[Sp + 16] = P64[R1 + 14];
           P64[Sp + 24] = P64[R1 + 6];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hb9_info" {
     block_c3Hb9_info:
         const _c3Hb9;
         const 131;
         const 12884901918;
         const S3GvX_srt+192;
 },
 _c3Hbk() //  [R1]
         { []
         }
     {offset
       c3Hbk: // global
           I64[Sp] = block_c3Hbo_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hbk_info" {
     block_c3Hbk_info:
         const _c3Hbk;
         const 3;
         const 12884901918;
         const S3GvX_srt+192;
 },
 _c3Hbo() //  [R1]
         { []
         }
     {offset
       c3Hbo: // global
           P64[Sp + 24] = R1;
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp + 8;
           call _c3Hb7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Hbo_info" {
     block_c3Hbo_info:
         const _c3Hbo;
         const 259;
         const 12884901918;
         const S3GvX_srt+192;
 },
 _c3Hac() //  [R1]
         { []
         }
     {offset
       c3Hac: // global
           _s3G6S::I64 = I64[Sp + 16];
           _s3G73::I64 = _s3G6S::I64 - (_s3G6S::I64 + (_s3G6S::I64 >> 63)) & (-2);
           if (_s3G73::I64 == 0) goto c3HbI; else goto u3HbS;
       c3HbI: // global
           _s3G6I::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HaC_info;
           R3 = P64[Sp + 24];
           R2 = _s3G6I::P64;
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call combine_r3y9t_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3HbS: // global
           I64[Sp - 8] = _s3G73::I64;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c3Hak() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Hac_info" {
     block_c3Hac_info:
         const _c3Hac;
         const 131;
         const 167503724574;
         const S3GvX_srt+184;
 },
 _c3HaC() //  [R1]
         { []
         }
     {offset
       c3HaC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HbM; else goto c3HbL;
       c3HbM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HbL: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3G79::I64 = I64[Sp + 8] + 1;
           I64[Hp] = %MO_S_Shr_W64(_s3G79::I64 + (_s3G79::I64 >> 63), 1);
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = R1;
           call _c3H9O() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3HaC_info" {
     block_c3HaC_info:
         const _c3HaC;
         const 66;
         const 167503724574;
         const S3GvX_srt+184;
 },
 _c3Hak() //  []
         { []
         }
     {offset
       c3Hak: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HbE; else goto c3HbD;
       c3HbE: // global
           HpAlloc = 24;
           _s3G73::I64 = I64[Sp];
           I64[Sp] = block_c3Haj_info;
           R1 = _s3G73::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HbD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Text.Read.Lex.numberToFixed2_closure;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3Han_info;
           R3 = Hp - 14;
           R2 = P64[Sp + 16];
           call combine_r3y9t_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Haj() //  [R1]
         { []
         }
     {offset
       c3Haj: // global
           I64[Sp] = R1;
           call _c3Hak() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Haj_info" {
     block_c3Haj_info:
         const _c3Haj;
         const 260;
         const 167503724574;
         const S3GvX_srt+184;
 },
 _c3Han() //  [R1]
         { []
         }
     {offset
       c3Han: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HbH; else goto c3HbG;
       c3HbH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HbG: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3G74::I64 = I64[Sp + 24] + 1;
           I64[Hp] = %MO_S_Shr_W64(_s3G74::I64 + (_s3G74::I64 >> 63), 1);
           P64[Sp + 16] = P64[Sp + 8];
           P64[Sp + 24] = Hp - 7;
           P64[Sp + 32] = R1;
           Sp = Sp + 16;
           call _c3H9O() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Han_info" {
     block_c3Han_info:
         const _c3Han;
         const 900;
         const 167503724574;
         const S3GvX_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.707047194 UTC

[section ""data" . Text.Read.Lex.valInteger_closure" {
     Text.Read.Lex.valInteger_closure:
         const Text.Read.Lex.valInteger_info;
         const 0;
 },
 sat_s3G7g_entry() //  [R1]
         { []
         }
     {offset
       c3HdQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HdU; else goto c3HdV;
       c3HdU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HdV: // global
           I64[Sp - 8] = block_c3HdO_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G7g_info" {
     sat_s3G7g_info:
         const sat_s3G7g_entry;
         const 1;
         const 16;
 },
 _c3HdO() //  [R1]
         { []
         }
     {offset
       c3HdO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HdY; else goto c3HdX;
       c3HdY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HdX: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HdO_info" {
     block_c3HdO_info:
         const _c3HdO;
         const 0;
         const 30;
 },
 Text.Read.Lex.valInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       c3HdZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3He0; else goto c3He1;
       c3He0: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.valInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3He1: // global
           I64[Sp - 24] = block_c3HdG_info;
           _s3G7e::P64 = R3;
           R3 = R3;
           _s3G7d::P64 = R2;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 16] = _s3G7d::P64;
           P64[Sp - 8] = _s3G7e::P64;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.valInteger_info" {
     Text.Read.Lex.valInteger_info:
         const Text.Read.Lex.valInteger_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S3GvX_srt+216;
 },
 _c3HdG() //  [R1]
         { []
         }
     {offset
       c3HdG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3He4; else goto c3He3;
       c3He4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3He3: // global
           I64[Hp - 16] = sat_s3G7g_info;
           P64[Hp] = P64[Sp + 16];
           R4 = R1;
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HdG_info" {
     block_c3HdG_info:
         const _c3HdG;
         const 2;
         const 4294967326;
         const S3GvX_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.720500027 UTC

[section ""data" . Text.Read.Lex.$w$sreadIntP_closure" {
     Text.Read.Lex.$w$sreadIntP_closure:
         const Text.Read.Lex.$w$sreadIntP_info;
         const 0;
 },
 sat_s3G7s_entry() //  [R1]
         { []
         }
     {offset
       c3Hf3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Hf7; else goto c3Hf8;
       c3Hf7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hf8: // global
           I64[Sp - 8] = block_c3Hf1_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G7s_info" {
     sat_s3G7s_info:
         const sat_s3G7s_entry;
         const 1;
         const 16;
 },
 _c3Hf1() //  [R1]
         { []
         }
     {offset
       c3Hf1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Hfb; else goto c3Hfa;
       c3Hfb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Hfa: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hf1_info" {
     block_c3Hf1_info:
         const _c3Hf1;
         const 0;
         const 30;
 },
 sat_s3G7u_entry() //  [R1]
         { []
         }
     {offset
       c3Hfc: // global
           _s3G7u::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3Hfd; else goto c3Hfe;
       c3Hfe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Hfg; else goto c3Hff;
       c3Hfg: // global
           HpAlloc = 24;
           goto c3Hfd;
       c3Hfd: // global
           R1 = _s3G7u::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hff: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G7u::P64;
           _s3G7i::P64 = P64[_s3G7u::P64 + 16];
           _s3G7k::P64 = P64[_s3G7u::P64 + 24];
           _s3G7m::P64 = P64[_s3G7u::P64 + 32];
           _s3G7o::P64 = P64[_s3G7u::P64 + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3G7m::P64;
           P64[Hp] = _s3G7o::P64;
           I64[Sp - 32] = block_c3HeP_info;
           R3 = Hp - 14;
           R2 = _s3G7k::P64;
           P64[Sp - 24] = _s3G7i::P64;
           Sp = Sp - 32;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G7u_info" {
     sat_s3G7u_info:
         const sat_s3G7u_entry;
         const 4;
         const 4294967311;
         const S3GvX_srt+216;
 },
 _c3HeP() //  [R1]
         { []
         }
     {offset
       c3HeP: // global
           I64[Sp - 8] = block_c3HeT_info;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3HeP_info" {
     block_c3HeP_info:
         const _c3HeP;
         const 1;
         const 4294967326;
         const S3GvX_srt+216;
 },
 _c3HeT() //  [R1]
         { []
         }
     {offset
       c3HeT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Hfk; else goto c3Hfj;
       c3Hfk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Hfj: // global
           I64[Hp - 16] = sat_s3G7s_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3HeT_info" {
     block_c3HeT_info:
         const _c3HeT;
         const 2;
         const 4294967326;
         const S3GvX_srt+216;
 },
 sat_s3G7v_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Hfl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Hfp; else goto c3Hfo;
       c3Hfp: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Hfo: // global
           _s3G7i::P64 = P64[R1 + 7];
           _s3G7k::P64 = P64[R1 + 15];
           _s3G7l::P64 = P64[R1 + 23];
           _s3G7m::P64 = P64[R1 + 31];
           I64[Hp - 40] = sat_s3G7u_info;
           P64[Hp - 24] = _s3G7i::P64;
           P64[Hp - 16] = _s3G7k::P64;
           P64[Hp - 8] = _s3G7m::P64;
           P64[Hp] = R2;
           R2 = Hp - 40;
           R1 = _s3G7l::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G7v_info" {
     sat_s3G7v_info:
         const sat_s3G7v_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3GvX_srt+216;
 },
 sat_s3G7y_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Hfu: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3Hfv; else goto c3Hfw;
       c3Hfv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Hfw: // global
           I64[Sp - 48] = block_c3HeA_info;
           _s3G7m::P64 = R2;
           R2 = R2;
           _s3G7i::P64 = P64[R1 + 7];
           _s3G7j::P64 = P64[R1 + 15];
           _s3G7k::P64 = P64[R1 + 23];
           _s3G7l::P64 = P64[R1 + 31];
           R1 = _s3G7j::P64;
           P64[Sp - 40] = _s3G7i::P64;
           P64[Sp - 32] = _s3G7j::P64;
           P64[Sp - 24] = _s3G7k::P64;
           P64[Sp - 16] = _s3G7l::P64;
           P64[Sp - 8] = _s3G7m::P64;
           Sp = Sp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G7y_info" {
     sat_s3G7y_info:
         const sat_s3G7y_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3GvX_srt+216;
 },
 _c3HeA() //  [R1]
         { []
         }
     {offset
       c3HeA: // global
           if (R1 & 7 == 1) goto c3Hfr; else goto c3Hfs;
       c3Hfr: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Hfs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3HfE; else goto c3HfD;
       c3HfE: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HfD: // global
           I64[Hp - 32] = sat_s3G7v_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           I64[Sp + 40] = block_c3Hfz_info;
           R3 = Hp - 31;
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HeA_info" {
     block_c3HeA_info:
         const _c3HeA;
         const 5;
         const 4294967326;
         const S3GvX_srt+216;
 },
 _c3Hfz() //  [R1]
         { []
         }
     {offset
       c3Hfz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HfH; else goto c3HfG;
       c3HfH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HfG: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hfz_info" {
     block_c3Hfz_info:
         const _c3Hfz;
         const 0;
         const 30;
 },
 Text.Read.Lex.$w$sreadIntP_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3HfI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3HfM; else goto c3HfL;
       c3HfM: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$sreadIntP_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HfL: // global
           I64[Hp - 32] = sat_s3G7y_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$w$sreadIntP_info" {
     Text.Read.Lex.$w$sreadIntP_info:
         const Text.Read.Lex.$w$sreadIntP_entry;
         const 0;
         const 38654705678;
         const 17179869208;
         const S3GvX_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.742446887 UTC

[section ""data" . Text.Read.Lex.readIntP1_closure" {
     Text.Read.Lex.readIntP1_closure:
         const Text.Read.Lex.readIntP1_info;
         const 0;
 },
 Text.Read.Lex.readIntP1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3HgS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HgT; else goto c3HgU;
       c3HgT: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readIntP1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HgU: // global
           I64[Sp - 8] = block_c3HgP_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readIntP1_info" {
     Text.Read.Lex.readIntP1_info:
         const Text.Read.Lex.readIntP1_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S3GvX_srt+240;
 },
 _c3HgP() //  [R1]
         { []
         }
     {offset
       c3HgP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HgX; else goto c3HgW;
       c3HgX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HgW: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HgP_info" {
     block_c3HgP_info:
         const _c3HgP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.748268819 UTC

[section ""data" . Text.Read.Lex.readIntP_$sreadIntP_closure" {
     Text.Read.Lex.readIntP_$sreadIntP_closure:
         const Text.Read.Lex.readIntP_$sreadIntP_info;
         const 0;
 },
 Text.Read.Lex.readIntP_$sreadIntP_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3Hhd: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readIntP1_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readIntP_$sreadIntP_info" {
     Text.Read.Lex.readIntP_$sreadIntP_info:
         const Text.Read.Lex.readIntP_$sreadIntP_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3GvX_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.758703609 UTC

[section ""data" . Text.Read.Lex.$wreadIntP_closure" {
     Text.Read.Lex.$wreadIntP_closure:
         const Text.Read.Lex.$wreadIntP_info;
         const 0;
 },
 lvl116_s3G7K_entry() //  [R1]
         { []
         }
     {offset
       c3Hhs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Hht; else goto c3Hhu;
       c3Hht: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hhu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3G7K_info" {
     lvl116_s3G7K_info:
         const lvl116_s3G7K_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+224;
 },
 sat_s3G7X_entry() //  [R1]
         { []
         }
     {offset
       c3Hif: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Hig; else goto c3Hih;
       c3Hig: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hih: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Hic_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Hil; else goto c3Hid;
       u3Hil: // global
           call _c3Hic(R1) args: 0, res: 0, upd: 0;
       c3Hid: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G7X_info" {
     sat_s3G7X_info:
         const sat_s3G7X_entry;
         const 1;
         const 16;
 },
 _c3Hic() //  [R1]
         { []
         }
     {offset
       c3Hic: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Hic_info" {
     block_c3Hic_info:
         const _c3Hic;
         const 0;
         const 30;
 },
 sat_s3G7Y_entry() //  [R1]
         { []
         }
     {offset
       c3Him: // global
           _s3G7Y::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Hin; else goto c3Hio;
       c3Hio: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Hiq; else goto c3Hip;
       c3Hiq: // global
           HpAlloc = 24;
           goto c3Hin;
       c3Hin: // global
           R1 = _s3G7Y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hip: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G7Y::P64;
           _s3G7F::P64 = P64[_s3G7Y::P64 + 16];
           _s3G7S::P64 = P64[_s3G7Y::P64 + 24];
           I64[Hp - 16] = sat_s3G7X_info;
           P64[Hp] = _s3G7S::P64;
           R2 = _s3G7F::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G7Y_info" {
     sat_s3G7Y_info:
         const sat_s3G7Y_entry;
         const 2;
         const 18;
 },
 sat_s3G7U_entry() //  [R1]
         { []
         }
     {offset
       c3Hiv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Hiw; else goto c3Hix;
       c3Hiw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hix: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G7U_info" {
     sat_s3G7U_info:
         const sat_s3G7U_entry;
         const 3;
         const 15;
 },
 sat_s3G82_entry() //  [R1]
         { []
         }
     {offset
       c3Hiy: // global
           _s3G82::P64 = R1;
           if ((Sp + -72) < SpLim) (likely: False) goto c3Hiz; else goto c3HiA;
       c3HiA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HiC; else goto c3HiB;
       c3HiC: // global
           HpAlloc = 24;
           goto c3Hiz;
       c3Hiz: // global
           R1 = _s3G82::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HiB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G82::P64;
           _s3G7F::P64 = P64[_s3G82::P64 + 16];
           _s3G7G::P64 = P64[_s3G82::P64 + 24];
           _s3G7I::P64 = P64[_s3G82::P64 + 32];
           _s3G7K::P64 = P64[_s3G82::P64 + 40];
           _s3G7L::P64 = P64[_s3G82::P64 + 48];
           _s3G7N::P64 = P64[_s3G82::P64 + 56];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3G7L::P64;
           P64[Hp] = _s3G7N::P64;
           I64[Sp - 48] = block_c3HhP_info;
           R3 = Hp - 14;
           R2 = _s3G7I::P64;
           P64[Sp - 40] = _s3G7F::P64;
           P64[Sp - 32] = _s3G7G::P64;
           P64[Sp - 24] = _s3G7K::P64;
           Sp = Sp - 48;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G82_info" {
     sat_s3G82_info:
         const sat_s3G82_entry;
         const 6;
         const 15;
 },
 _c3HhP() //  [R1]
         { []
         }
     {offset
       c3HhP: // global
           P64[Sp] = R1;
           P64[Sp + 24] = P64[Sp + 24];
           call _c3HhW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3HhP_info" {
     block_c3HhP_info:
         const _c3HhP;
         const 3;
         const 30;
 },
 _c3HhW() //  []
         { []
         }
     {offset
       c3HhW: // global
           _s3G7Q::P64 = P64[Sp];
           I64[Sp] = block_c3HhY_info;
           R1 = _s3G7Q::P64;
           if (R1 & 7 != 0) goto u3HiU; else goto c3HhZ;
       u3HiU: // global
           call _c3HhY(R1) args: 0, res: 0, upd: 0;
       c3HhZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3HhY() //  [R1]
         { []
         }
     {offset
       c3HhY: // global
           _s3G7P::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3HiI; else goto c3HiK;
       c3HiI: // global
           R1 = _s3G7P::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c3HiK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3HiN; else goto c3HiM;
       c3HiN: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3HiM: // global
           _s3G7S::P64 = P64[R1 + 6];
           _s3G7T::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_s3G7Y_info;
           _s3G7F::P64 = P64[Sp + 8];
           P64[Hp - 48] = _s3G7F::P64;
           P64[Hp - 40] = _s3G7S::P64;
           I64[Hp - 32] = sat_s3G7U_info;
           P64[Hp - 16] = _s3G7F::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s3G7P::P64;
           I64[Sp] = block_c3HiJ_info;
           R2 = _s3G7F::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 64;
           P64[Sp + 24] = _s3G7T::P64;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3HhY_info" {
     block_c3HhY_info:
         const _c3HhY;
         const 3;
         const 30;
 },
 _c3HiJ() //  [R1]
         { []
         }
     {offset
       c3HiJ: // global
           _s3G7Q::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp] = _s3G7Q::P64;
           call _c3HhW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3HiJ_info" {
     block_c3HiJ_info:
         const _c3HiJ;
         const 3;
         const 30;
 },
 sat_s3G83_entry() //  [R1, R2]
         { []
         }
     {offset
       c3HiW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Hj0; else goto c3HiZ;
       c3Hj0: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HiZ: // global
           _s3G7F::P64 = P64[R1 + 7];
           _s3G7G::P64 = P64[R1 + 15];
           _s3G7I::P64 = P64[R1 + 23];
           _s3G7J::P64 = P64[R1 + 31];
           _s3G7K::P64 = P64[R1 + 39];
           _s3G7L::P64 = P64[R1 + 47];
           I64[Hp - 56] = sat_s3G82_info;
           P64[Hp - 40] = _s3G7F::P64;
           P64[Hp - 32] = _s3G7G::P64;
           P64[Hp - 24] = _s3G7I::P64;
           P64[Hp - 16] = _s3G7K::P64;
           P64[Hp - 8] = _s3G7L::P64;
           P64[Hp] = R2;
           R2 = Hp - 56;
           R1 = _s3G7J::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G83_info" {
     sat_s3G83_info:
         const sat_s3G83_entry;
         const 6;
         const 8;
         const 4294967301;
 },
 sat_s3G86_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Hj5: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3Hj6; else goto c3Hj7;
       c3Hj6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Hj7: // global
           I64[Sp - 64] = block_c3HhA_info;
           _s3G7L::P64 = R2;
           R2 = R2;
           _s3G7F::P64 = P64[R1 + 7];
           _s3G7G::P64 = P64[R1 + 15];
           _s3G7H::P64 = P64[R1 + 23];
           _s3G7I::P64 = P64[R1 + 31];
           _s3G7J::P64 = P64[R1 + 39];
           _s3G7K::P64 = P64[R1 + 47];
           R1 = _s3G7H::P64;
           P64[Sp - 56] = _s3G7F::P64;
           P64[Sp - 48] = _s3G7G::P64;
           P64[Sp - 40] = _s3G7H::P64;
           P64[Sp - 32] = _s3G7I::P64;
           P64[Sp - 24] = _s3G7J::P64;
           P64[Sp - 16] = _s3G7K::P64;
           P64[Sp - 8] = _s3G7L::P64;
           Sp = Sp - 64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G86_info" {
     sat_s3G86_info:
         const sat_s3G86_entry;
         const 6;
         const 8;
         const 4294967301;
 },
 _c3HhA() //  [R1]
         { []
         }
     {offset
       c3HhA: // global
           if (R1 & 7 == 1) goto c3Hj2; else goto c3Hj3;
       c3Hj2: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Hj3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Hjf; else goto c3Hje;
       c3Hjf: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hje: // global
           I64[Hp - 48] = sat_s3G83_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           I64[Sp + 56] = block_c3Hja_info;
           R3 = Hp - 47;
           R2 = P64[Sp + 24];
           Sp = Sp + 56;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HhA_info" {
     block_c3HhA_info:
         const _c3HhA;
         const 7;
         const 30;
 },
 _c3Hja() //  [R1]
         { []
         }
     {offset
       c3Hja: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Hji; else goto c3Hjh;
       c3Hji: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hjh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hja_info" {
     block_c3Hja_info:
         const _c3Hja;
         const 0;
         const 30;
 },
 Text.Read.Lex.$wreadIntP_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Hjj: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Hjn; else goto c3Hjm;
       c3Hjn: // global
           HpAlloc = 80;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wreadIntP_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Hjm: // global
           I64[Hp - 72] = lvl116_s3G7K_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3G86_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = Hp - 72;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wreadIntP_info" {
     Text.Read.Lex.$wreadIntP_info:
         const Text.Read.Lex.$wreadIntP_entry;
         const 0;
         const 73014444046;
         const 21474836505;
         const S3GvX_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.788509948 UTC

[section ""data" . Text.Read.Lex.readIntP2_closure" {
     Text.Read.Lex.readIntP2_closure:
         const Text.Read.Lex.readIntP2_info;
         const 0;
 },
 Text.Read.Lex.readIntP2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Hl7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Hl8; else goto c3Hl9;
       c3Hl8: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readIntP2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Hl9: // global
           I64[Sp - 8] = block_c3Hl4_info;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readIntP2_info" {
     Text.Read.Lex.readIntP2_info:
         const Text.Read.Lex.readIntP2_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S3GvX_srt+256;
 },
 _c3Hl4() //  [R1]
         { []
         }
     {offset
       c3Hl4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Hlc; else goto c3Hlb;
       c3Hlc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hlb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hl4_info" {
     block_c3Hl4_info:
         const _c3Hl4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.794730201 UTC

[section ""data" . Text.Read.Lex.readIntP_closure" {
     Text.Read.Lex.readIntP_closure:
         const Text.Read.Lex.readIntP_info;
         const 0;
 },
 Text.Read.Lex.readIntP_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Hls: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readIntP2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readIntP_info" {
     Text.Read.Lex.readIntP_info:
         const Text.Read.Lex.readIntP_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const S3GvX_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.798028228 UTC

[section ""data" . sat_s3G8e_closure" {
     sat_s3G8e_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.799731158 UTC

[section ""data" . sat_s3G8f_closure" {
     sat_s3G8f_closure:
         const :_con_info;
         const sat_s3G8e_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.802195002 UTC

[section ""data" . Text.Read.Lex.numberToFixed1_closure" {
     Text.Read.Lex.numberToFixed1_closure:
         const Text.Read.Lex.numberToFixed1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToFixed1_entry() //  [R1]
         { []
         }
     {offset
       c3HlH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HlI; else goto c3HlJ;
       c3HlI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HlJ: // global
           (_c3HlE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HlE::I64 == 0) goto c3HlG; else goto c3HlF;
       c3HlG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HlF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HlE::I64;
           R3 = sat_s3G8f_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToFixed1_info" {
     Text.Read.Lex.numberToFixed1_info:
         const Text.Read.Lex.numberToFixed1_entry;
         const 0;
         const 4294967317;
         const S3GvX_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.810984963 UTC

[section ""data" . Text.Read.Lex.numberToInteger_closure" {
     Text.Read.Lex.numberToInteger_closure:
         const Text.Read.Lex.numberToInteger_info;
         const 0;
 },
 sat_s3G8m_entry() //  [R1]
         { []
         }
     {offset
       c3Hmg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Hmk; else goto c3Hml;
       c3Hmk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hml: // global
           I64[Sp - 8] = block_c3Hme_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G8m_info" {
     sat_s3G8m_info:
         const sat_s3G8m_entry;
         const 1;
         const 16;
 },
 _c3Hme() //  [R1]
         { []
         }
     {offset
       c3Hme: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Hmo; else goto c3Hmn;
       c3Hmo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Hmn: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hme_info" {
     block_c3Hme_info:
         const _c3Hme;
         const 0;
         const 30;
 },
 sat_s3G8k_entry() //  [R1]
         { []
         }
     {offset
       c3Hmt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Hmu; else goto c3Hmv;
       c3Hmu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hmv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G8k_info" {
     sat_s3G8k_info:
         const sat_s3G8k_entry;
         const 1;
         const 16;
 },
 sat_s3G8o_entry() //  [R1]
         { []
         }
     {offset
       c3Hmw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Hmx; else goto c3Hmy;
       c3Hmx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hmy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3Hm6_info;
           _s3G8j::P64 = P64[R1 + 24];
           R3 = _s3G8j::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s3G8j::P64;
           Sp = Sp - 40;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G8o_info" {
     sat_s3G8o_info:
         const sat_s3G8o_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+216;
 },
 _c3Hm6() //  [R1]
         { []
         }
     {offset
       c3Hm6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3HmB; else goto c3HmA;
       c3HmB: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3HmA: // global
           I64[Hp - 40] = sat_s3G8m_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_s3G8k_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Hm6_info" {
     block_c3Hm6_info:
         const _c3Hm6;
         const 2;
         const 4294967326;
         const S3GvX_srt+216;
 },
 sat_s3G8u_entry() //  [R1]
         { []
         }
     {offset
       c3HmS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HmT; else goto c3HmU;
       c3HmT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HmU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G8u_info" {
     sat_s3G8u_info:
         const sat_s3G8u_entry;
         const 1;
         const 279172874256;
         const S3GvX_srt+232;
 },
 Text.Read.Lex.numberToInteger_entry() //  [R2]
         { []
         }
     {offset
       c3HmZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Hn0; else goto c3Hn1;
       c3Hn0: // global
           R2 = R2;
           R1 = Text.Read.Lex.numberToInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Hn1: // global
           I64[Sp - 8] = block_c3HlX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Hnw; else goto c3HlY;
       u3Hnw: // global
           call _c3HlX(R1) args: 0, res: 0, upd: 0;
       c3HlY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToInteger_info" {
     Text.Read.Lex.numberToInteger_info:
         const Text.Read.Lex.numberToInteger_entry;
         const 0;
         const 3320009719822;
         const 4294967301;
         const S3GvX_srt+216;
 },
 _c3HlX() //  [R1]
         { []
         }
     {offset
       c3HlX: // global
           if (R1 & 7 == 1) goto c3HmW; else goto c3HmX;
       c3HmW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Hn5; else goto c3Hn4;
       c3Hn5: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hn4: // global
           _s3G8i::P64 = P64[R1 + 7];
           _s3G8j::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3G8o_info;
           P64[Hp - 24] = _s3G8i::P64;
           P64[Hp - 16] = _s3G8j::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HmX: // global
           I64[Sp - 16] = block_c3HmE_info;
           _s3G8p::P64 = P64[R1 + 6];
           _s3G8r::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3G8r::P64;
           P64[Sp] = _s3G8p::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Hns; else goto c3HmF;
       u3Hns: // global
           call _c3HmE(R1) args: 0, res: 0, upd: 0;
       c3HmF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HlX_info" {
     block_c3HlX_info:
         const _c3HlX;
         const 0;
         const 1120986464286;
         const S3GvX_srt+216;
 },
 _c3HmE() //  [R1]
         { []
         }
     {offset
       c3HmE: // global
           if (R1 & 7 == 1) goto c3Hn9; else goto u3Hnq;
       c3Hn9: // global
           _s3G8r::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HmJ_info;
           R1 = _s3G8r::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Hnt; else goto c3HmK;
       u3Hnt: // global
           call _c3HmJ(R1) args: 0, res: 0, upd: 0;
       c3HmK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Hnq: // global
           Sp = Sp + 24;
           call _c3Hnn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3HmE_info" {
     block_c3HmE_info:
         const _c3HmE;
         const 2;
         const 279172874270;
         const S3GvX_srt+232;
 },
 _c3HmJ() //  [R1]
         { []
         }
     {offset
       c3HmJ: // global
           if (R1 & 7 == 1) goto c3Hnc; else goto u3Hnr;
       c3Hnc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Hnf; else goto c3Hne;
       c3Hnf: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hne: // global
           I64[Hp - 32] = sat_s3G8u_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Hnr: // global
           Sp = Sp + 16;
           call _c3Hnn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3HmJ_info" {
     block_c3HmJ_info:
         const _c3HmJ;
         const 1;
         const 279172874270;
         const S3GvX_srt+232;
 },
 _c3Hnn() //  []
         { []
         }
     {offset
       c3Hnn: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.832457318 UTC

[section ""data" . sat_s3G8x_closure" {
     sat_s3G8x_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.834188777 UTC

[section ""data" . sat_s3G8y_closure" {
     sat_s3G8y_closure:
         const :_con_info;
         const sat_s3G8x_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.836614684 UTC

[section ""data" . lvl4_r3y9u_closure" {
     lvl4_r3y9u_closure:
         const lvl4_r3y9u_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r3y9u_entry() //  [R1]
         { []
         }
     {offset
       c3HoR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HoS; else goto c3HoT;
       c3HoS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HoT: // global
           (_c3HoO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HoO::I64 == 0) goto c3HoQ; else goto c3HoP;
       c3HoQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HoP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HoO::I64;
           R3 = sat_s3G8y_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r3y9u_info" {
     lvl4_r3y9u_info:
         const lvl4_r3y9u_entry;
         const 0;
         const 4294967317;
         const S3GvX_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.844412341 UTC

[section ""data" . $wfracExp_r3y9v_closure" {
     $wfracExp_r3y9v_closure:
         const $wfracExp_r3y9v_info;
         const 0;
 },
 $wfracExp_r3y9v_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Hpe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Hpf; else goto u3Hqx;
       c3Hpf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wfracExp_r3y9v_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3Hqx: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3Hp4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wfracExp_r3y9v_info" {
     $wfracExp_r3y9v_info:
         const $wfracExp_r3y9v_entry;
         const 0;
         const 4442108580593678;
         const 12884901911;
         const S3GvX_srt+192;
 },
 _c3Hp4() //  []
         { []
         }
     {offset
       c3Hp4: // global
           I64[Sp - 8] = block_c3Hp7_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Hqz; else goto c3Hp8;
       u3Hqz: // global
           call _c3Hp7(R1) args: 0, res: 0, upd: 0;
       c3Hp8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hp7() //  [R1]
         { []
         }
     {offset
       c3Hp7: // global
           _s3G8z::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3Hpb; else goto c3Hpc;
       c3Hpb: // global
           I64[Sp] = block_c3Hpj_info;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           R2 = _s3G8z::P64;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c3Hpc: // global
           I64[Sp] = block_c3Hq6_info;
           R3 = lvl4_r3y9u_closure;
           R2 = _s3G8z::P64;
           P64[Sp + 8] = P64[R1 + 14];
           P64[Sp + 24] = P64[R1 + 6];
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hp7_info" {
     block_c3Hp7_info:
         const _c3Hp7;
         const 259;
         const 2190308766908446;
         const S3GvX_srt+192;
 },
 _c3Hpj() //  [R1]
         { []
         }
     {offset
       c3Hpj: // global
           _s3G8z::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3HpV; else goto c3Hpv;
       c3HpV: // global
           I64[Sp + 8] = block_c3HpD_info;
           R2 = _s3G8z::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c3Hpv: // global
           I64[Sp + 8] = block_c3Hpo_info;
           R3 = _s3G8z::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hpj_info" {
     block_c3Hpj_info:
         const _c3Hpj;
         const 259;
         const 496983550722078;
         const S3GvX_srt+200;
 },
 _c3HpD() //  [R1]
         { []
         }
     {offset
       c3HpD: // global
           I64[Sp] = block_c3HpH_info;
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HpD_info" {
     block_c3HpD_info:
         const _c3HpD;
         const 130;
         const 356246062366750;
         const S3GvX_srt+200;
 },
 _c3HpH() //  [R1]
         { []
         }
     {offset
       c3HpH: // global
           I64[Sp] = block_c3HpL_info;
           R2 = R1;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HpH_info" {
     block_c3HpH_info:
         const _c3HpH;
         const 130;
         const 70373039144990;
         const S3GvX_srt+200;
 },
 _c3HpL() //  [R1]
         { []
         }
     {offset
       c3HpL: // global
           I64[Sp] = block_c3HpP_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HpL_info" {
     block_c3HpL_info:
         const _c3HpL;
         const 2;
         const 70373039144990;
         const S3GvX_srt+200;
 },
 _c3HpP() //  [R1]
         { []
         }
     {offset
       c3HpP: // global
           _s3G8A::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HpT_info;
           R3 = R1;
           R2 = _s3G8A::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HpP_info" {
     block_c3HpP_info:
         const _c3HpP;
         const 2;
         const 70373039144990;
         const S3GvX_srt+200;
 },
 _c3HpT() //  [R1]
         { []
         }
     {offset
       c3HpT: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HpT_info" {
     block_c3HpT_info:
         const _c3HpT;
         const 1;
         const 4294967326;
         const S3GvX_srt+312;
 },
 _c3Hpo() //  [R1]
         { []
         }
     {offset
       c3Hpo: // global
           I64[Sp + 16] = block_c3Hps_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hpo_info" {
     block_c3Hpo_info:
         const _c3Hpo;
         const 130;
         const 140741783322654;
         const S3GvX_srt+200;
 },
 _c3Hps() //  [R1]
         { []
         }
     {offset
       c3Hps: // global
           R2 = GHC.Real.$fEnumRatio1_closure;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hps_info" {
     block_c3Hps_info:
         const _c3Hps;
         const 0;
         const 4294967326;
         const S3GvX_srt+320;
 },
 _c3Hq6() //  [R1]
         { []
         }
     {offset
       c3Hq6: // global
           I64[Sp] = block_c3Hqa_info;
           _s3G8N::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3G8N::P64;
           if (R1 & 7 != 0) goto u3HqB; else goto c3Hqb;
       u3HqB: // global
           call _c3Hqa(R1) args: 0, res: 0, upd: 0;
       c3Hqb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hq6_info" {
     block_c3Hq6_info:
         const _c3Hq6;
         const 3;
         const 2190308766908446;
         const S3GvX_srt+192;
 },
 _c3Hqa() //  [R1]
         { []
         }
     {offset
       c3Hqa: // global
           I64[Sp] = block_c3Hqf_info;
           R2 = I64[R1 + 7];
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hqa_info" {
     block_c3Hqa_info:
         const _c3Hqa;
         const 3;
         const 2190308766908446;
         const S3GvX_srt+192;
 },
 _c3Hqf() //  [R1]
         { []
         }
     {offset
       c3Hqf: // global
           I64[Sp] = block_c3Hqj_info;
           R3 = Text.Read.Lex.numberToFixed1_closure;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hqf_info" {
     block_c3Hqf_info:
         const _c3Hqf;
         const 3;
         const 2190308766908446;
         const S3GvX_srt+192;
 },
 _c3Hqj() //  [R1]
         { []
         }
     {offset
       c3Hqj: // global
           I64[Sp] = block_c3Hqn_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hqj_info" {
     block_c3Hqj_info:
         const _c3Hqj;
         const 3;
         const 2190308766908446;
         const S3GvX_srt+192;
 },
 _c3Hqn() //  [R1]
         { []
         }
     {offset
       c3Hqn: // global
           _s3G8B::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = R1;
           P64[Sp + 24] = _s3G8B::P64;
           Sp = Sp + 8;
           call _c3Hp4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Hqn_info" {
     block_c3Hqn_info:
         const _c3Hqn;
         const 131;
         const 2190308766908446;
         const S3GvX_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.873304409 UTC

[section ""data" . Text.Read.Lex.numberToFixed_integerTake_closure" {
     Text.Read.Lex.numberToFixed_integerTake_closure:
         const Text.Read.Lex.numberToFixed_integerTake_info;
         const 0;
 },
 sat_s3G90_entry() //  [R1]
         { []
         }
     {offset
       c3Hs6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Hs7; else goto c3Hs8;
       c3Hs7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hs8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3Hs4_info;
           R3 = lvl4_r3y9u_closure;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G90_info" {
     sat_s3G90_info:
         const sat_s3G90_entry;
         const 2;
         const 347892350994;
         const S3GvX_srt+304;
 },
 _c3Hs4() //  [R1]
         { []
         }
     {offset
       c3Hs4: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_integerTake_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Hs4_info" {
     block_c3Hs4_info:
         const _c3Hs4;
         const 1;
         const 4294967326;
         const S3GvX_srt+352;
 },
 Text.Read.Lex.numberToFixed_integerTake_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Hsf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Hsg; else goto c3Hsh;
       c3Hsg: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_integerTake_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Hsh: // global
           I64[Sp - 24] = block_c3HrQ_info;
           _s3G8U::P64 = R3;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           _s3G8T::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3G8T::P64;
           P64[Sp - 8] = _s3G8U::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToFixed_integerTake_info" {
     Text.Read.Lex.numberToFixed_integerTake_info:
         const Text.Read.Lex.numberToFixed_integerTake_entry;
         const 0;
         const 356246062366734;
         const 8589934607;
         const S3GvX_srt+224;
 },
 _c3HrQ() //  [R1]
         { []
         }
     {offset
       c3HrQ: // global
           if (R1 == 1) goto u3Hsw; else goto c3Hsd;
       u3Hsw: // global
           Sp = Sp + 24;
           call _c3Hse() args: 0, res: 0, upd: 0;
       c3Hsd: // global
           I64[Sp] = block_c3HrU_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3Hsy; else goto c3HrV;
       u3Hsy: // global
           call _c3HrU(R1) args: 0, res: 0, upd: 0;
       c3HrV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HrQ_info" {
     block_c3HrQ_info:
         const _c3HrQ;
         const 2;
         const 347892351006;
         const S3GvX_srt+304;
 },
 _c3HrU() //  [R1]
         { []
         }
     {offset
       c3HrU: // global
           if (R1 & 7 == 1) goto u3Hsx; else goto c3Hso;
       u3Hsx: // global
           Sp = Sp + 24;
           call _c3Hse() args: 0, res: 0, upd: 0;
       c3Hso: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Hsr; else goto c3Hsq;
       c3Hsr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hsq: // global
           _s3G8X::P64 = P64[R1 + 6];
           _s3G8Y::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s3G90_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s3G8Y::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3G8X::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HrU_info" {
     block_c3HrU_info:
         const _c3HrU;
         const 130;
         const 347892351006;
         const S3GvX_srt+304;
 },
 _c3Hse() //  []
         { []
         }
     {offset
       c3Hse: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.885300036 UTC

[section ""data" . Text.Read.Lex.numberToFixed_xs_closure" {
     Text.Read.Lex.numberToFixed_xs_closure:
         const :_con_info;
         const Text.Read.Lex.$fShowLexeme2_closure+1;
         const Text.Read.Lex.numberToFixed_xs_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.894784421 UTC

[section ""data" . Text.Read.Lex.numberToFixed_closure" {
     Text.Read.Lex.numberToFixed_closure:
         const Text.Read.Lex.numberToFixed_info;
         const 0;
 },
 sat_s3G98_entry() //  [R1]
         { []
         }
     {offset
       c3Hty: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HtC; else goto c3HtD;
       c3HtC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HtD: // global
           I64[Sp - 8] = block_c3Htw_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G98_info" {
     sat_s3G98_info:
         const sat_s3G98_entry;
         const 1;
         const 16;
 },
 _c3Htw() //  [R1]
         { []
         }
     {offset
       c3Htw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HtG; else goto c3HtF;
       c3HtG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HtF: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Htw_info" {
     block_c3Htw_info:
         const _c3Htw;
         const 0;
         const 30;
 },
 sat_s3G96_entry() //  [R1]
         { []
         }
     {offset
       c3HtL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HtM; else goto c3HtN;
       c3HtM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HtN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G96_info" {
     sat_s3G96_info:
         const sat_s3G96_entry;
         const 1;
         const 16;
 },
 sat_s3G9a_entry() //  [R1]
         { []
         }
     {offset
       c3HtO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3HtP; else goto c3HtQ;
       c3HtP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HtQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3Hto_info;
           _s3G95::P64 = P64[R1 + 24];
           R3 = _s3G95::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s3G95::P64;
           Sp = Sp - 40;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G9a_info" {
     sat_s3G9a_info:
         const sat_s3G9a_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+216;
 },
 _c3Hto() //  [R1]
         { []
         }
     {offset
       c3Hto: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3HtT; else goto c3HtS;
       c3HtT: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3HtS: // global
           I64[Hp - 40] = sat_s3G98_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_s3G96_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Hto_info" {
     block_c3Hto_info:
         const _c3Hto;
         const 2;
         const 4294967326;
         const S3GvX_srt+216;
 },
 sat_s3G9h_entry() //  [R1]
         { []
         }
     {offset
       c3Hua: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Hub; else goto c3Huc;
       c3Hub: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Huc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G9h_info" {
     sat_s3G9h_info:
         const sat_s3G9h_entry;
         const 1;
         const 279172874256;
         const S3GvX_srt+232;
 },
 sat_s3G9o_entry() //  [R1]
         { []
         }
     {offset
       c3Hus: // global
           R3 = Text.Read.Lex.numberToFixed_xs_closure+2;
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G9o_info" {
     sat_s3G9o_info:
         const sat_s3G9o_entry;
         const 1;
         const 16;
 },
 sat_s3G9q_entry() //  [R1]
         { []
         }
     {offset
       c3HuJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HuN; else goto c3HuO;
       c3HuN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HuO: // global
           I64[Sp - 8] = block_c3HuH_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G9q_info" {
     sat_s3G9q_info:
         const sat_s3G9q_entry;
         const 1;
         const 16;
 },
 _c3HuH() //  [R1]
         { []
         }
     {offset
       c3HuH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HuR; else goto c3HuQ;
       c3HuR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HuQ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HuH_info" {
     block_c3HuH_info:
         const _c3HuH;
         const 0;
         const 30;
 },
 sat_s3G9s_entry() //  [R1]
         { []
         }
     {offset
       c3HuS: // global
           _s3G9s::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3HuT; else goto c3HuU;
       c3HuU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HuW; else goto c3HuV;
       c3HuW: // global
           HpAlloc = 24;
           goto c3HuT;
       c3HuT: // global
           R1 = _s3G9s::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HuV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G9s::P64;
           _s3G91::P64 = P64[_s3G9s::P64 + 16];
           _s3G9k::P64 = P64[_s3G9s::P64 + 24];
           I64[Hp - 16] = sat_s3G9o_info;
           P64[Hp] = _s3G9k::P64;
           I64[Sp - 24] = block_c3Huv_info;
           R3 = Hp - 16;
           R2 = _s3G91::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.numberToFixed_integerTake_entry(R3,
                                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G9s_info" {
     sat_s3G9s_info:
         const sat_s3G9s_entry;
         const 2;
         const 564053760016402;
         const S3GvX_srt+216;
 },
 _c3Huv() //  [R1]
         { []
         }
     {offset
       c3Huv: // global
           I64[Sp - 8] = block_c3Huz_info;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Huv_info" {
     block_c3Huv_info:
         const _c3Huv;
         const 0;
         const 1103806595102;
         const S3GvX_srt+216;
 },
 _c3Huz() //  [R1]
         { []
         }
     {offset
       c3Huz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Hv0; else goto c3HuZ;
       c3Hv0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3HuZ: // global
           I64[Hp - 16] = sat_s3G9q_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Huz_info" {
     block_c3Huz_info:
         const _c3Huz;
         const 1;
         const 1103806595102;
         const S3GvX_srt+216;
 },
 sat_s3G9m_entry() //  [R1]
         { []
         }
     {offset
       c3Hv5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Hv6; else goto c3Hv7;
       c3Hv6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hv7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G9m_info" {
     sat_s3G9m_info:
         const sat_s3G9m_entry;
         const 1;
         const 279172874256;
         const S3GvX_srt+232;
 },
 Text.Read.Lex.numberToFixed_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Hvc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Hvd; else goto c3Hve;
       c3Hvd: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Hve: // global
           I64[Sp - 16] = block_c3Htf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3HvW; else goto c3Htg;
       u3HvW: // global
           call _c3Htf(R1) args: 0, res: 0, upd: 0;
       c3Htg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToFixed_info" {
     Text.Read.Lex.numberToFixed_info:
         const Text.Read.Lex.numberToFixed_entry;
         const 0;
         const 1689979436662798;
         const 8589934607;
         const S3GvX_srt+216;
 },
 _c3Htf() //  [R1]
         { []
         }
     {offset
       c3Htf: // global
           if (R1 & 7 == 1) goto c3Hv9; else goto c3Hva;
       c3Hv9: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Hvj; else goto c3Hvi;
       c3Hvj: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hvi: // global
           _s3G94::P64 = P64[R1 + 7];
           _s3G95::P64 = P64[R1 + 15];
           I64[Hp - 64] = sat_s3G9a_info;
           P64[Hp - 48] = _s3G94::P64;
           P64[Hp - 40] = _s3G95::P64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = Text.Read.Lex.numberToFixed2_closure;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Hva: // global
           I64[Sp - 16] = block_c3HtW_info;
           _s3G9c::P64 = P64[R1 + 6];
           _s3G9e::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3G9e::P64;
           P64[Sp] = _s3G9c::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3HvR; else goto c3HtX;
       u3HvR: // global
           call _c3HtW(R1) args: 0, res: 0, upd: 0;
       c3HtX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Htf_info" {
     block_c3Htf_info:
         const _c3Htf;
         const 1;
         const 564079529820190;
         const S3GvX_srt+216;
 },
 _c3HtW() //  [R1]
         { []
         }
     {offset
       c3HtW: // global
           _s3G9e::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3Hvn; else goto c3HvA;
       c3Hvn: // global
           I64[Sp + 8] = block_c3Hu1_info;
           R1 = _s3G9e::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3HvS; else goto c3Hu2;
       u3HvS: // global
           call _c3Hu1(R1) args: 0, res: 0, upd: 0;
       c3Hu2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3HvA: // global
           I64[Sp] = block_c3Huf_info;
           _s3G9k::P64 = P64[R1 + 6];
           R1 = _s3G9e::P64;
           P64[Sp + 8] = _s3G9k::P64;
           if (R1 & 7 != 0) goto u3HvT; else goto c3Hug;
       u3HvT: // global
           call _c3Huf(R1) args: 0, res: 0, upd: 0;
       c3Hug: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HtW_info" {
     block_c3HtW_info:
         const _c3HtW;
         const 3;
         const 564079529820190;
         const S3GvX_srt+216;
 },
 _c3Hu1() //  [R1]
         { []
         }
     {offset
       c3Hu1: // global
           if (R1 & 7 == 1) goto c3Hvr; else goto u3HvQ;
       c3Hvr: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Hvu; else goto c3Hvt;
       c3Hvu: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hvt: // global
           I64[Hp - 56] = sat_s3G9h_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Text.Read.Lex.numberToFixed2_closure;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3HvQ: // global
           Sp = Sp + 24;
           call _c3HvL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Hu1_info" {
     block_c3Hu1_info:
         const _c3Hu1;
         const 130;
         const 562640715806;
         const S3GvX_srt+224;
 },
 _c3Huf() //  [R1]
         { []
         }
     {offset
       c3Huf: // global
           if (R1 & 7 == 1) goto c3HvE; else goto u3HvP;
       c3HvE: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3HvH; else goto c3HvG;
       c3HvH: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HvG: // global
           I64[Hp - 88] = sat_s3G9s_info;
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sat_s3G9m_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 88;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3HvP: // global
           Sp = Sp + 32;
           call _c3HvL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Huf_info" {
     block_c3Huf_info:
         const _c3Huf;
         const 3;
         const 564070939885598;
         const S3GvX_srt+216;
 },
 _c3HvL() //  []
         { []
         }
     {offset
       c3HvL: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.938066778 UTC

[section ""data" . Text.Read.Lex.$wnumberToRational_closure" {
     Text.Read.Lex.$wnumberToRational_closure:
         const Text.Read.Lex.$wnumberToRational_info;
         const 0;
 },
 sat_s3G9D_entry() //  [R1]
         { []
         }
     {offset
       c3Hyp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Hyt; else goto c3Hyu;
       c3Hyt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hyu: // global
           I64[Sp - 8] = block_c3Hyn_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3G9D_info" {
     sat_s3G9D_info:
         const sat_s3G9D_entry;
         const 1;
         const 16;
 },
 _c3Hyn() //  [R1]
         { []
         }
     {offset
       c3Hyn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Hyx; else goto c3Hyw;
       c3Hyx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Hyw: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hyn_info" {
     block_c3Hyn_info:
         const _c3Hyn;
         const 0;
         const 30;
 },
 sat_s3G9B_entry() //  [R1]
         { []
         }
     {offset
       c3HyF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HyG; else goto c3HyH;
       c3HyG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HyH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3HyC_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3HyL; else goto c3HyD;
       u3HyL: // global
           call _c3HyC(R1) args: 0, res: 0, upd: 0;
       c3HyD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3G9B_info" {
     sat_s3G9B_info:
         const sat_s3G9B_entry;
         const 1;
         const 16;
 },
 _c3HyC() //  [R1]
         { []
         }
     {offset
       c3HyC: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3HyC_info" {
     block_c3HyC_info:
         const _c3HyC;
         const 0;
         const 30;
 },
 Text.Read.Lex.$wnumberToRational_entry() //  [R2]
         { []
         }
     {offset
       c3HyQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HyR; else goto c3HyS;
       c3HyR: // global
           R2 = R2;
           R1 = Text.Read.Lex.$wnumberToRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HyS: // global
           I64[Sp - 8] = block_c3Hya_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3HB7; else goto c3Hyb;
       u3HB7: // global
           call _c3Hya(R1) args: 0, res: 0, upd: 0;
       c3Hyb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wnumberToRational_info" {
     Text.Read.Lex.$wnumberToRational_info:
         const Text.Read.Lex.$wnumberToRational_entry;
         const 0;
         const 11052415436455950;
         const 4294967301;
         const S3GvX_srt+200;
 },
 _c3Hya() //  [R1]
         { []
         }
     {offset
       c3Hya: // global
           if (R1 & 7 == 1) goto c3HyN; else goto c3HyO;
       c3HyN: // global
           I64[Sp - 16] = block_c3Hyf_info;
           _s3G9y::P64 = P64[R1 + 15];
           R3 = _s3G9y::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 8] = _s3G9y::P64;
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3HyO: // global
           I64[Sp - 16] = block_c3Hz9_info;
           _s3G9H::P64 = P64[R1 + 6];
           _s3G9J::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3G9J::P64;
           P64[Sp] = _s3G9H::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3HB6; else goto c3Hzb;
       u3HB6: // global
           call _c3Hz9(R1) args: 0, res: 0, upd: 0;
       c3Hzb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hya_info" {
     block_c3Hya_info:
         const _c3Hya;
         const 0;
         const 2045216181714974;
         const S3GvX_srt+200;
 },
 _c3Hyf() //  [R1]
         { []
         }
     {offset
       c3Hyf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Hz1; else goto c3Hz0;
       c3Hz1: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hz0: // global
           I64[Hp - 40] = sat_s3G9D_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = sat_s3G9B_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3HyT_info;
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hyf_info" {
     block_c3Hyf_info:
         const _c3Hyf;
         const 2;
         const 633340172435486;
         const S3GvX_srt+200;
 },
 _c3HyT() //  [R1]
         { []
         }
     {offset
       c3HyT: // global
           I64[Sp] = block_c3HyX_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HyT_info" {
     block_c3HyT_info:
         const _c3HyT;
         const 0;
         const 633322992566302;
         const S3GvX_srt+200;
 },
 _c3HyX() //  [R1]
         { []
         }
     {offset
       c3HyX: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HyX_info" {
     block_c3HyX_info:
         const _c3HyX;
         const 0;
         const 38654705694;
         const S3GvX_srt+312;
 },
 _c3Hz9() //  [R1]
         { []
         }
     {offset
       c3Hz9: // global
           _s3G9J::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3Hzi; else goto c3HAH;
       c3Hzi: // global
           I64[Sp + 8] = block_c3Hzf_info;
           R1 = _s3G9J::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3HB8; else goto c3Hzj;
       u3HB8: // global
           call _c3Hzf(R1) args: 0, res: 0, upd: 0;
       c3Hzj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3HAH: // global
           I64[Sp] = block_c3HAF_info;
           _s3Ga0::P64 = P64[R1 + 6];
           R1 = _s3G9J::P64;
           P64[Sp + 8] = _s3Ga0::P64;
           if (R1 & 7 != 0) goto u3HB9; else goto c3HAI;
       u3HB9: // global
           call _c3HAF(R1) args: 0, res: 0, upd: 0;
       c3HAI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hz9_info" {
     block_c3Hz9_info:
         const _c3Hz9;
         const 2;
         const 2045199001845790;
         const S3GvX_srt+200;
 },
 _c3Hzf() //  [R1]
         { []
         }
     {offset
       c3Hzf: // global
           if (R1 & 7 == 1) goto c3Hzu; else goto c3HzE;
       c3Hzu: // global
           _s3G9H::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Hzn_info;
           R3 = _s3G9H::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
       c3HzE: // global
           I64[Sp - 8] = block_c3HzC_info;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           _s3G9O::P64 = P64[R1 + 6];
           R2 = _s3G9O::P64;
           P64[Sp] = _s3G9O::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hzf_info" {
     block_c3Hzf_info:
         const _c3Hzf;
         const 1;
         const 919299095003166;
         const S3GvX_srt+200;
 },
 _c3Hzn() //  [R1]
         { []
         }
     {offset
       c3Hzn: // global
           I64[Sp] = block_c3Hzr_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hzn_info" {
     block_c3Hzn_info:
         const _c3Hzn;
         const 0;
         const 633322992566302;
         const S3GvX_srt+200;
 },
 _c3Hzr() //  [R1]
         { []
         }
     {offset
       c3Hzr: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Hzr_info" {
     block_c3Hzr_info:
         const _c3Hzr;
         const 0;
         const 38654705694;
         const S3GvX_srt+312;
 },
 _c3HzC() //  [R1]
         { []
         }
     {offset
       c3HzC: // global
           _s3G9O::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3HAv; else goto c3HA5;
       c3HAv: // global
           I64[Sp + 8] = block_c3HAh_info;
           R3 = _s3G9O::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3HA5: // global
           I64[Sp + 8] = block_c3HzI_info;
           R2 = _s3G9O::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HzC_info" {
     block_c3HzC_info:
         const _c3HzC;
         const 2;
         const 919264735264798;
         const S3GvX_srt+200;
 },
 _c3HAh() //  [R1]
         { []
         }
     {offset
       c3HAh: // global
           I64[Sp] = block_c3HAl_info;
           R3 = P64[Sp + 8];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 8] = R1;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HAh_info" {
     block_c3HAh_info:
         const _c3HAh;
         const 1;
         const 637789758554142;
         const S3GvX_srt+200;
 },
 _c3HAl() //  [R1]
         { []
         }
     {offset
       c3HAl: // global
           _s3G9X::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HAp_info;
           R3 = _s3G9X::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HAl_info" {
     block_c3HAl_info:
         const _c3HAl;
         const 1;
         const 633322992566302;
         const S3GvX_srt+200;
 },
 _c3HAp() //  [R1]
         { []
         }
     {offset
       c3HAp: // global
           I64[Sp] = block_c3HAt_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HAp_info" {
     block_c3HAp_info:
         const _c3HAp;
         const 0;
         const 633322992566302;
         const S3GvX_srt+200;
 },
 _c3HAt() //  [R1]
         { []
         }
     {offset
       c3HAt: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HAt_info" {
     block_c3HAt_info:
         const _c3HAt;
         const 0;
         const 38654705694;
         const S3GvX_srt+312;
 },
 _c3HzI() //  [R1]
         { []
         }
     {offset
       c3HzI: // global
           I64[Sp] = block_c3HzM_info;
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HzI_info" {
     block_c3HzI_info:
         const _c3HzI;
         const 1;
         const 356314781843486;
         const S3GvX_srt+200;
 },
 _c3HzM() //  [R1]
         { []
         }
     {offset
       c3HzM: // global
           I64[Sp - 8] = block_c3HzQ_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HzM_info" {
     block_c3HzM_info:
         const _c3HzM;
         const 1;
         const 74839805132830;
         const S3GvX_srt+200;
 },
 _c3HzQ() //  [R1]
         { []
         }
     {offset
       c3HzQ: // global
           I64[Sp] = block_c3HzU_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HzQ_info" {
     block_c3HzQ_info:
         const _c3HzQ;
         const 2;
         const 74839805132830;
         const S3GvX_srt+200;
 },
 _c3HzU() //  [R1]
         { []
         }
     {offset
       c3HzU: // global
           I64[Sp] = block_c3HzY_info;
           R3 = P64[Sp + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 16] = R1;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HzU_info" {
     block_c3HzU_info:
         const _c3HzU;
         const 2;
         const 74839805132830;
         const S3GvX_srt+200;
 },
 _c3HzY() //  [R1]
         { []
         }
     {offset
       c3HzY: // global
           I64[Sp] = block_c3HA2_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HzY_info" {
     block_c3HzY_info:
         const _c3HzY;
         const 2;
         const 70373039144990;
         const S3GvX_srt+200;
 },
 _c3HA2() //  [R1]
         { []
         }
     {offset
       c3HA2: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HA2_info" {
     block_c3HA2_info:
         const _c3HA2;
         const 130;
         const 4294967326;
         const S3GvX_srt+312;
 },
 _c3HAF() //  [R1]
         { []
         }
     {offset
       c3HAF: // global
           _s3G9H::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c3HAP; else goto c3HAY;
       c3HAP: // global
           I64[Sp] = block_c3HAM_info;
           R3 = _s3G9H::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
       c3HAY: // global
           I64[Sp] = block_c3HAW_info;
           R3 = _s3G9H::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 16] = P64[R1 + 6];
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HAF_info" {
     block_c3HAF_info:
         const _c3HAF;
         const 2;
         const 141300129071134;
         const S3GvX_srt+224;
 },
 _c3HAM() //  [R1]
         { []
         }
     {offset
       c3HAM: // global
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 24;
           call $wfracExp_r3y9v_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HAM_info" {
     block_c3HAM_info:
         const _c3HAM;
         const 130;
         const 140741783322654;
         const S3GvX_srt+224;
 },
 _c3HAW() //  [R1]
         { []
         }
     {offset
       c3HAW: // global
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call $wfracExp_r3y9v_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HAW_info" {
     block_c3HAW_info:
         const _c3HAW;
         const 2;
         const 4294967326;
         const S3GvX_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.985702678 UTC

[section ""data" . Text.Read.Lex.numberToRational_closure" {
     Text.Read.Lex.numberToRational_closure:
         const Text.Read.Lex.numberToRational_info;
         const 0;
 },
 Text.Read.Lex.numberToRational_entry() //  [R2]
         { []
         }
     {offset
       c3HDp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HDq; else goto c3HDr;
       c3HDq: // global
           R2 = R2;
           R1 = Text.Read.Lex.numberToRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HDr: // global
           I64[Sp - 8] = block_c3HDm_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToRational_info" {
     Text.Read.Lex.numberToRational_info:
         const Text.Read.Lex.numberToRational_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+368;
 },
 _c3HDm() //  [R1, R2]
         { []
         }
     {offset
       c3HDm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HDu; else goto c3HDt;
       c3HDu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3HDt: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HDm_info" {
     block_c3HDm_info:
         const _c3HDm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.993032797 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational3_closure" {
     Text.Read.Lex.numberToRangedRational3_closure:
         const GHC.Real.:%_con_info;
         const Text.Read.Lex.numberToFixed2_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.995694155 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational2_closure" {
     Text.Read.Lex.numberToRangedRational2_closure:
         const GHC.Base.Just_con_info;
         const Text.Read.Lex.numberToRangedRational3_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:22.99784593 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational1_closure" {
     Text.Read.Lex.numberToRangedRational1_closure:
         const Text.Read.Lex.numberToRangedRational1_info;
 },
 Text.Read.Lex.numberToRangedRational1_entry() //  [R2]
         { []
         }
     {offset
       c3HDM: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme2_closure+1;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToRangedRational1_info" {
     Text.Read.Lex.numberToRangedRational1_info:
         const Text.Read.Lex.numberToRangedRational1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.000993423 UTC

[section ""data" . sat_s3Gab_closure" {
     sat_s3Gab_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.002742859 UTC

[section ""data" . sat_s3Gac_closure" {
     sat_s3Gac_closure:
         const :_con_info;
         const sat_s3Gab_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.004443741 UTC

[section ""data" . sat_s3Gaa_closure" {
     sat_s3Gaa_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.006162289 UTC

[section ""data" . sat_s3Gad_closure" {
     sat_s3Gad_closure:
         const :_con_info;
         const sat_s3Gaa_closure+1;
         const sat_s3Gac_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.007890756 UTC

[section ""data" . sat_s3Ga9_closure" {
     sat_s3Ga9_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.00996258 UTC

[section ""data" . sat_s3Gae_closure" {
     sat_s3Gae_closure:
         const :_con_info;
         const sat_s3Ga9_closure+1;
         const sat_s3Gad_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.012420132 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational4_closure" {
     Text.Read.Lex.numberToRangedRational4_closure:
         const Text.Read.Lex.numberToRangedRational4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational4_entry() //  [R1]
         { []
         }
     {offset
       c3HE5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HE6; else goto c3HE7;
       c3HE6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HE7: // global
           (_c3HE2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HE2::I64 == 0) goto c3HE4; else goto c3HE3;
       c3HE4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HE3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HE2::I64;
           R3 = sat_s3Gae_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToRangedRational4_info" {
     Text.Read.Lex.numberToRangedRational4_info:
         const Text.Read.Lex.numberToRangedRational4_entry;
         const 0;
         const 4294967317;
         const S3GvX_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.016195716 UTC

[section ""data" . sat_s3Gah_closure" {
     sat_s3Gah_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.017859858 UTC

[section ""data" . sat_s3Gai_closure" {
     sat_s3Gai_closure:
         const :_con_info;
         const sat_s3Gah_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.019480411 UTC

[section ""data" . sat_s3Gag_closure" {
     sat_s3Gag_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.021728625 UTC

[section ""data" . sat_s3Gaj_closure" {
     sat_s3Gaj_closure:
         const :_con_info;
         const sat_s3Gag_closure+1;
         const sat_s3Gai_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.023394312 UTC

[section ""data" . sat_s3Gaf_closure" {
     sat_s3Gaf_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.025062573 UTC

[section ""data" . sat_s3Gak_closure" {
     sat_s3Gak_closure:
         const :_con_info;
         const sat_s3Gaf_closure+1;
         const sat_s3Gaj_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.02745016 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational5_closure" {
     Text.Read.Lex.numberToRangedRational5_closure:
         const Text.Read.Lex.numberToRangedRational5_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational5_entry() //  [R1]
         { []
         }
     {offset
       c3HEt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HEu; else goto c3HEv;
       c3HEu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HEv: // global
           (_c3HEq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HEq::I64 == 0) goto c3HEs; else goto c3HEr;
       c3HEs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HEr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HEq::I64;
           R3 = sat_s3Gak_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToRangedRational5_info" {
     Text.Read.Lex.numberToRangedRational5_info:
         const Text.Read.Lex.numberToRangedRational5_entry;
         const 0;
         const 4294967317;
         const S3GvX_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.039467187 UTC

[section ""data" . Text.Read.Lex.$wnumberToRangedRational_closure" {
     Text.Read.Lex.$wnumberToRangedRational_closure:
         const Text.Read.Lex.$wnumberToRangedRational_info;
         const 0;
 },
 sat_s3Gau_entry() //  [R1]
         { []
         }
     {offset
       c3HEV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HEW; else goto c3HEX;
       c3HEW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HEX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3HES_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gau_info" {
     sat_s3Gau_info:
         const sat_s3Gau_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+368;
 },
 _c3HES() //  [R1, R2]
         { []
         }
     {offset
       c3HES: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HF0; else goto c3HEZ;
       c3HF0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3HEZ: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3HES_info" {
     block_c3HES_info:
         const _c3HES;
         const 0;
         const 30;
 },
 sat_s3GaC_entry() //  [R1]
         { []
         }
     {offset
       c3HFf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HFg; else goto c3HFh;
       c3HFg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HFh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3HFc_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3GaC_info" {
     sat_s3GaC_info:
         const sat_s3GaC_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+368;
 },
 _c3HFc() //  [R1, R2]
         { []
         }
     {offset
       c3HFc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HFk; else goto c3HFj;
       c3HFk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3HFj: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3HFc_info" {
     block_c3HFc_info:
         const _c3HFc;
         const 0;
         const 30;
 },
 sat_s3GaV_entry() //  [R1]
         { []
         }
     {offset
       c3HGa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HGb; else goto c3HGc;
       c3HGb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HGc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3HG7_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3GaV_info" {
     sat_s3GaV_info:
         const sat_s3GaV_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+368;
 },
 _c3HG7() //  [R1, R2]
         { []
         }
     {offset
       c3HG7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HGf; else goto c3HGe;
       c3HGf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3HGe: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3HG7_info" {
     block_c3HG7_info:
         const _c3HG7;
         const 0;
         const 30;
 },
 Text.Read.Lex.$wnumberToRangedRational_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3HGk: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3HGl; else goto c3HGm;
       c3HGl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wnumberToRangedRational_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HGm: // global
           I64[Sp - 24] = block_c3HEJ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3HI4; else goto c3HEK;
       u3HI4: // global
           call _c3HEJ(R1) args: 0, res: 0, upd: 0;
       c3HEK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wnumberToRangedRational_info" {
     Text.Read.Lex.$wnumberToRangedRational_info:
         const Text.Read.Lex.$wnumberToRangedRational_entry;
         const 0;
         const 1035087118350;
         const 12884901911;
         const S3GvX_srt+368;
 },
 _c3HEJ() //  [R1]
         { []
         }
     {offset
       c3HEJ: // global
           if (R1 & 7 == 1) goto c3HGh; else goto c3HGi;
       c3HGh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3HGq; else goto c3HGp;
       c3HGq: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HGp: // global
           I64[Hp - 32] = sat_s3Gau_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HGi: // global
           I64[Sp - 24] = block_c3HF3_info;
           _s3Gao::P64 = R1;
           _s3Gav::P64 = P64[R1 + 6];
           _s3Gaw::P64 = P64[R1 + 14];
           R1 = P64[R1 + 22];
           P64[Sp - 16] = _s3Gav::P64;
           P64[Sp - 8] = _s3Gaw::P64;
           P64[Sp] = _s3Gao::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3HHZ; else goto c3HF4;
       u3HHZ: // global
           call _c3HF3(R1) args: 0, res: 0, upd: 0;
       c3HF4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HEJ_info" {
     block_c3HEJ_info:
         const _c3HEJ;
         const 2;
         const 966367641630;
         const S3GvX_srt+368;
 },
 _c3HF3() //  [R1]
         { []
         }
     {offset
       c3HF3: // global
           if (R1 & 7 == 1) goto c3HGu; else goto c3HGz;
       c3HGu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3HGx; else goto c3HGw;
       c3HGx: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HGw: // global
           I64[Hp - 32] = sat_s3GaC_info;
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HGz: // global
           I64[Sp - 8] = block_c3HFn_info;
           R3 = Text.Read.Lex.numberToRangedRational5_closure;
           _s3GaD::P64 = P64[R1 + 6];
           R2 = _s3GaD::P64;
           P64[Sp] = _s3GaD::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HF3_info" {
     block_c3HF3_info:
         const _c3HF3;
         const 5;
         const 966367641630;
         const S3GvX_srt+368;
 },
 _c3HFn() //  [R1]
         { []
         }
     {offset
       c3HFn: // global
           if (R1 == 1) goto u3HHS; else goto c3HGC;
       u3HHS: // global
           Sp = Sp + 56;
           call _c3HHM() args: 0, res: 0, upd: 0;
       c3HGC: // global
           I64[Sp] = block_c3HFr_info;
           R3 = Text.Read.Lex.numberToRangedRational4_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HFn_info" {
     block_c3HFn_info:
         const _c3HFn;
         const 6;
         const 416611827742;
         const S3GvX_srt+368;
 },
 _c3HFr() //  [R1]
         { []
         }
     {offset
       c3HFr: // global
           if (R1 == 1) goto u3HHT; else goto c3HGT;
       u3HHT: // global
           Sp = Sp + 56;
           call _c3HHM() args: 0, res: 0, upd: 0;
       c3HGT: // global
           I64[Sp] = block_c3HGD_info;
           R3 = P64[Sp + 16];
           R2 = Text.Read.Lex.numberToRangedRational1_closure+1;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HFr_info" {
     block_c3HFr_info:
         const _c3HFr;
         const 6;
         const 141733920798;
         const S3GvX_srt+368;
 },
 _c3HGD() //  [R1]
         { []
         }
     {offset
       c3HGD: // global
           if (R1 & 7 == 1) goto c3HH0; else goto c3HHA;
       c3HH0: // global
           I64[Sp] = block_c3HGX_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3HI5; else goto c3HH1;
       u3HI5: // global
           call _c3HGX(R1) args: 0, res: 0, upd: 0;
       c3HH1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3HHA: // global
           I64[Sp] = block_c3HHy_info;
           R3 = 0;
           R2 = R1;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HGD_info" {
     block_c3HGD_info:
         const _c3HGD;
         const 134;
         const 141733920798;
         const S3GvX_srt+368;
 },
 _c3HGX() //  [R1]
         { []
         }
     {offset
       c3HGX: // global
           if (R1 & 7 == 1) goto u3HHV; else goto c3HHe;
       u3HHV: // global
           Sp = Sp + 56;
           call _c3HHm() args: 0, res: 0, upd: 0;
       c3HHe: // global
           I64[Sp] = block_c3HHa_info;
           R3 = P64[R1 + 6];
           R2 = Text.Read.Lex.numberToRangedRational1_closure+1;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HGX_info" {
     block_c3HGX_info:
         const _c3HGX;
         const 390;
         const 141733920798;
         const S3GvX_srt+368;
 },
 _c3HHa() //  [R1, R2]
         { []
         }
     {offset
       c3HHa: // global
           I64[Sp] = block_c3HHc_info;
           _s3Gb0::P64 = R1;
           R1 = R2;
           P64[Sp + 24] = _s3Gb0::P64;
           if (R1 & 7 != 0) goto u3HI7; else goto c3HHg;
       u3HI7: // global
           call _c3HHc(R1) args: 0, res: 0, upd: 0;
       c3HHg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HHa_info" {
     block_c3HHa_info:
         const _c3HHa;
         const 390;
         const 141733920798;
         const S3GvX_srt+368;
 },
 _c3HHc() //  [R1]
         { []
         }
     {offset
       c3HHc: // global
           if (R1 & 7 == 1) goto u3HHW; else goto c3HHr;
       u3HHW: // global
           Sp = Sp + 56;
           call _c3HHm() args: 0, res: 0, upd: 0;
       c3HHr: // global
           I64[Sp] = block_c3HHp_info;
           R3 = 0;
           R2 = P64[Sp + 24];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HHc_info" {
     block_c3HHc_info:
         const _c3HHc;
         const 134;
         const 141733920798;
         const S3GvX_srt+368;
 },
 _c3HHm() //  []
         { []
         }
     {offset
       c3HHm: // global
           R1 = Text.Read.Lex.numberToRangedRational2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3HHp() //  [R1]
         { []
         }
     {offset
       c3HHp: // global
           I64[Sp + 24] = -R1;
           Sp = Sp + 8;
           call _s3GaG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3HHp_info" {
     block_c3HHp_info:
         const _c3HHp;
         const 390;
         const 141733920798;
         const S3GvX_srt+368;
 },
 _c3HHy() //  [R1]
         { []
         }
     {offset
       c3HHy: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _s3GaG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3HHy_info" {
     block_c3HHy_info:
         const _c3HHy;
         const 390;
         const 141733920798;
         const S3GvX_srt+368;
 },
 _s3GaG() //  []
         { []
         }
     {offset
       s3GaG: // global
           I64[Sp - 8] = block_c3HFA_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3HIb; else goto c3HFB;
       u3HIb: // global
           call _c3HFA(R1) args: 0, res: 0, upd: 0;
       c3HFB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HFA() //  [R1]
         { []
         }
     {offset
       c3HFA: // global
           I64[Sp + 16] = block_c3HFF_info;
           R2 = P64[Sp + 8];
           I64[Sp + 48] = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HFA_info" {
     block_c3HFA_info:
         const _c3HFA;
         const 2438;
         const 141733920798;
         const S3GvX_srt+368;
 },
 _c3HFF() //  [R1]
         { []
         }
     {offset
       c3HFF: // global
           _s3GaL::I64 = I64[Sp + 8] + R1;
           if (%MO_S_Le_W64(_s3GaL::I64,
                            I64[Sp + 32] + 3)) goto c3HGJ; else goto u3HHY;
       c3HGJ: // global
           I64[Sp + 8] = block_c3HFS_info;
           R1 = P64[Sp + 24];
           I64[Sp + 32] = _s3GaL::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3HI2; else goto c3HFT;
       u3HI2: // global
           call _c3HFS(R1) args: 0, res: 0, upd: 0;
       c3HFT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3HHY: // global
           Sp = Sp + 40;
           call _c3HHM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3HFF_info" {
     block_c3HFF_info:
         const _c3HFF;
         const 580;
         const 141733920798;
         const S3GvX_srt+368;
 },
 _c3HFS() //  [R1]
         { []
         }
     {offset
       c3HFS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3HGM; else goto c3HGL;
       c3HGM: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HGL: // global
           if (%MO_S_Ge_W64(I64[Sp + 24],
                            I64[R1 + 7] - 3)) goto c3HGP; else goto c3HGQ;
       c3HGP: // global
           I64[Hp - 32] = sat_s3GaV_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HGQ: // global
           Hp = Hp - 40;
           R1 = Text.Read.Lex.numberToRangedRational2_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HFS_info" {
     block_c3HFS_info:
         const _c3HFS;
         const 387;
         const 141733920798;
         const S3GvX_srt+368;
 },
 _c3HHM() //  []
         { []
         }
     {offset
       c3HHM: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.07900977 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational_closure" {
     Text.Read.Lex.numberToRangedRational_closure:
         const Text.Read.Lex.numberToRangedRational_info;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational_entry() //  [R2, R3]
         { []
         }
     {offset
       c3HKw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HKx; else goto c3HKy;
       c3HKx: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToRangedRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HKy: // global
           I64[Sp - 16] = block_c3HKt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3HKC; else goto c3HKu;
       u3HKC: // global
           call _c3HKt(R1) args: 0, res: 0, upd: 0;
       c3HKu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.numberToRangedRational_info" {
     Text.Read.Lex.numberToRangedRational_info:
         const Text.Read.Lex.numberToRangedRational_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S3GvX_srt+400;
 },
 _c3HKt() //  [R1]
         { []
         }
     {offset
       c3HKt: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call Text.Read.Lex.$wnumberToRangedRational_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HKt_info" {
     block_c3HKt_info:
         const _c3HKt;
         const 1;
         const 4294967326;
         const S3GvX_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.0839473 UTC

[section ""cstring" . lvl5_r3y9w_bytes" {
     lvl5_r3y9w_bytes:
         I8[] [118,97,108,68,105,103,58,32,66,97,100,32,98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.086783667 UTC

[section ""data" . Text.Read.Lex.readDecP2_closure" {
     Text.Read.Lex.readDecP2_closure:
         const Text.Read.Lex.readDecP2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP2_entry() //  [R1]
         { []
         }
     {offset
       c3HKW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HKX; else goto c3HKY;
       c3HKX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HKY: // global
           (_c3HKR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HKR::I64 == 0) goto c3HKT; else goto c3HKS;
       c3HKT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HKS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HKR::I64;
           I64[Sp - 24] = block_c3HKU_info;
           R2 = lvl5_r3y9w_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP2_info" {
     Text.Read.Lex.readDecP2_info:
         const Text.Read.Lex.readDecP2_entry;
         const 0;
         const 4294967317;
         const S3GvX_srt+440;
 },
 _c3HKU() //  [R1]
         { []
         }
     {offset
       c3HKU: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3HKU_info" {
     block_c3HKU_info:
         const _c3HKU;
         const 0;
         const 4294967326;
         const S3GvX_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.091899049 UTC

[section ""data" . sat_s3Gbg_closure" {
     sat_s3Gbg_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.093984958 UTC

[section ""data" . sat_s3Gbh_closure" {
     sat_s3Gbh_closure:
         const :_con_info;
         const sat_s3Gbg_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.096410546 UTC

[section ""data" . Text.Read.Lex.readDecP3_closure" {
     Text.Read.Lex.readDecP3_closure:
         const Text.Read.Lex.readDecP3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP3_entry() //  [R1]
         { []
         }
     {offset
       c3HLm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HLn; else goto c3HLo;
       c3HLn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HLo: // global
           (_c3HLj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HLj::I64 == 0) goto c3HLl; else goto c3HLk;
       c3HLl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HLk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HLj::I64;
           R3 = sat_s3Gbh_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP3_info" {
     Text.Read.Lex.readDecP3_info:
         const Text.Read.Lex.readDecP3_entry;
         const 0;
         const 4294967317;
         const S3GvX_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.100786753 UTC

[section ""data" . sat_s3Gbi_closure" {
     sat_s3Gbi_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.102588917 UTC

[section ""data" . sat_s3Gbj_closure" {
     sat_s3Gbj_closure:
         const :_con_info;
         const sat_s3Gbi_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.10508199 UTC

[section ""data" . Text.Read.Lex.readDecP4_closure" {
     Text.Read.Lex.readDecP4_closure:
         const Text.Read.Lex.readDecP4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP4_entry() //  [R1]
         { []
         }
     {offset
       c3HLG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HLH; else goto c3HLI;
       c3HLH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HLI: // global
           (_c3HLD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HLD::I64 == 0) goto c3HLF; else goto c3HLE;
       c3HLF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HLE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HLD::I64;
           R3 = sat_s3Gbj_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP4_info" {
     Text.Read.Lex.readDecP4_info:
         const Text.Read.Lex.readDecP4_entry;
         const 0;
         const 4294967317;
         const S3GvX_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.113874357 UTC

[section ""data" . Text.Read.Lex.$w$svalDig_closure" {
     Text.Read.Lex.$w$svalDig_closure:
         const Text.Read.Lex.$w$svalDig_info;
         const 0;
 },
 Text.Read.Lex.$w$svalDig_entry() //  [R2, R3]
         { []
         }
     {offset
       c3HM1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HM2; else goto c3HM3;
       c3HM2: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$svalDig_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HM3: // global
           I64[Sp - 24] = block_c3HLW_info;
           _s3Gbl::I64 = R3;
           R3 = Text.Read.Lex.readDecP4_closure;
           _s3Gbk::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3Gbk::P64;
           I64[Sp - 8] = _s3Gbl::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$w$svalDig_info" {
     Text.Read.Lex.$w$svalDig_info:
         const Text.Read.Lex.$w$svalDig_entry;
         const 0;
         const 540431959579426830;
         const 8589934606;
         const S3GvX_srt+280;
 },
 _c3HLW() //  [R1]
         { []
         }
     {offset
       c3HLW: // global
           if (R1 == 1) goto c3HM0; else goto c3HLZ;
       c3HM0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HOn; else goto c3HOm;
       c3HOn: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HOm: // global
           _s3Gbl::I64 = I64[Sp + 16];
           if (48 > _s3Gbl::I64) goto u3HOO; else goto c3HOJ;
       u3HOO: // global
           Sp = Sp + 24;
           goto u3HOR;
       c3HOJ: // global
           if (_s3Gbl::I64 > 55) goto u3HOP; else goto c3HOI;
       u3HOP: // global
           Sp = Sp + 24;
           goto u3HOR;
       u3HOR: // global
           call _c3HOx() args: 0, res: 0, upd: 0;
       c3HOI: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3Gbl::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HLZ: // global
           I64[Sp] = block_c3HM6_info;
           R3 = Text.Read.Lex.numberToFixed1_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HLW_info" {
     block_c3HLW_info:
         const _c3HLW;
         const 130;
         const 216172786408751134;
         const S3GvX_srt+280;
 },
 _c3HM6() //  [R1]
         { []
         }
     {offset
       c3HM6: // global
           if (R1 == 1) goto c3HNR; else goto c3HMe;
       c3HNR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HNW; else goto c3HNV;
       c3HNW: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HNV: // global
           _s3Gbl::I64 = I64[Sp + 16];
           if (48 > _s3Gbl::I64) goto u3HOM; else goto c3HOi;
       u3HOM: // global
           Sp = Sp + 24;
           goto u3HOT;
       c3HOi: // global
           if (_s3Gbl::I64 > 57) goto u3HON; else goto c3HOh;
       u3HON: // global
           Sp = Sp + 24;
           goto u3HOT;
       u3HOT: // global
           call _c3HOx() args: 0, res: 0, upd: 0;
       c3HOh: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3Gbl::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HMe: // global
           _s3Gbk::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HMb_info;
           R3 = Text.Read.Lex.readDecP3_closure;
           R2 = _s3Gbk::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HM6_info" {
     block_c3HM6_info:
         const _c3HM6;
         const 130;
         const 12884901918;
         const S3GvX_srt+472;
 },
 _c3HMb() //  [R1]
         { []
         }
     {offset
       c3HMb: // global
           if (R1 == 1) goto c3HMl; else goto c3HMk;
       c3HMl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HMq; else goto c3HMp;
       c3HMq: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HMp: // global
           _s3Gbl::I64 = I64[Sp + 8];
           if (48 > _s3Gbl::I64) goto c3HNE; else goto c3HNQ;
       c3HNQ: // global
           if (_s3Gbl::I64 > 57) goto c3HNE; else goto c3HNP;
       c3HNE: // global
           Hp = Hp - 32;
           call _c3HMu() args: 0, res: 0, upd: 0;
       c3HNP: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3Gbl::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HMk: // global
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HMb_info" {
     block_c3HMb_info:
         const _c3HMb;
         const 65;
         const 4294967326;
         const S3GvX_srt+472;
 },
 _c3HMu() //  []
         { []
         }
     {offset
       c3HMu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HMy; else goto c3HMx;
       c3HMy: // global
           HpAlloc = 32;
           I64[Sp] = block_c3HMu_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3HMx: // global
           _s3Gbl::I64 = I64[Sp + 8];
           if (97 > _s3Gbl::I64) goto c3HNf; else goto c3HNu;
       c3HNu: // global
           if (_s3Gbl::I64 > 102) goto c3HNf; else goto c3HNt;
       c3HNf: // global
           Hp = Hp - 32;
           call _c3HMC() args: 0, res: 0, upd: 0;
       c3HNt: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3Gbl::I64 - 87;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HMu_info" {
     block_c3HMu_info:
         const _c3HMu;
         const 65;
         const 30;
 },
 _c3HMC() //  []
         { []
         }
     {offset
       c3HMC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HMG; else goto c3HMF;
       c3HMG: // global
           HpAlloc = 32;
           I64[Sp] = block_c3HMC_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3HMF: // global
           _s3Gbl::I64 = I64[Sp + 8];
           if (65 > _s3Gbl::I64) goto u3HOK; else goto c3HN5;
       u3HOK: // global
           Sp = Sp + 16;
           goto u3HOX;
       c3HN5: // global
           if (_s3Gbl::I64 > 70) goto u3HOL; else goto c3HN4;
       u3HOL: // global
           Sp = Sp + 16;
           goto u3HOX;
       u3HOX: // global
           call _c3HOx() args: 0, res: 0, upd: 0;
       c3HN4: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3Gbl::I64 - 55;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HMC_info" {
     block_c3HMC_info:
         const _c3HMC;
         const 65;
         const 30;
 },
 _c3HOx() //  []
         { []
         }
     {offset
       c3HOx: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.135130418 UTC

[section ""data" . Text.Read.Lex.$wvalDig_closure" {
     Text.Read.Lex.$wvalDig_closure:
         const Text.Read.Lex.$wvalDig_info;
         const 0;
 },
 Text.Read.Lex.$wvalDig_slow() //  [R1]
         { []
         }
     {offset
       c3HPS: // global
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3GbW_entry() //  [R1]
         { []
         }
     {offset
       c3HQ0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3HQ1; else goto c3HQ2;
       c3HQ1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HQ2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3GbW_info" {
     sat_s3GbW_info:
         const sat_s3GbW_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+488;
 },
 sat_s3GbY_entry() //  [R1]
         { []
         }
     {offset
       c3HQb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3HQc; else goto c3HQd;
       c3HQc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HQd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3GbY_info" {
     sat_s3GbY_info:
         const sat_s3GbY_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+280;
 },
 sat_s3Gc0_entry() //  [R1]
         { []
         }
     {offset
       c3HQm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3HQn; else goto c3HQo;
       c3HQn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HQo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gc0_info" {
     sat_s3Gc0_info:
         const sat_s3Gc0_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+480;
 },
 Text.Read.Lex.$wvalDig_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3HQt: // global
           _s3GbV::I64 = R5;
           _s3GbU::P64 = R4;
           _s3GbT::P64 = R3;
           _s3GbS::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c3HQu; else goto c3HQv;
       c3HQv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HQx; else goto c3HQw;
       c3HQx: // global
           HpAlloc = 24;
           goto c3HQu;
       c3HQu: // global
           R1 = Text.Read.Lex.$wvalDig_closure;
           P64[Sp - 32] = _s3GbS::P64;
           P64[Sp - 24] = _s3GbT::P64;
           P64[Sp - 16] = _s3GbU::P64;
           I64[Sp - 8] = _s3GbV::I64;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3HQw: // global
           I64[Hp - 16] = sat_s3GbW_info;
           P64[Hp] = _s3GbT::P64;
           I64[Sp - 40] = block_c3HQ3_info;
           R2 = _s3GbS::P64;
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = _s3GbU::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 32] = _s3GbS::P64;
           P64[Sp - 24] = _s3GbT::P64;
           P64[Sp - 16] = _s3GbU::P64;
           I64[Sp - 8] = _s3GbV::I64;
           Sp = Sp - 64;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wvalDig_info" {
     Text.Read.Lex.$wvalDig_info:
         const Text.Read.Lex.$wvalDig_entry;
         const 0;
         const 1080863914863886350;
         const 17179869184;
         const S3GvX_srt+280;
         const 516;
         const Text.Read.Lex.$wvalDig_slow;
 },
 _c3HQ3() //  [R1]
         { []
         }
     {offset
       c3HQ3: // global
           if (R1 & 7 == 1) goto c3HQq; else goto c3HQr;
       c3HQq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HQA; else goto c3HQz;
       c3HQA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HQz: // global
           I64[Hp - 16] = sat_s3GbY_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c3HQe_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c3HQr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HSP; else goto c3HSO;
       c3HSP: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HSO: // global
           _s3GbV::I64 = I64[Sp + 32];
           if (48 > _s3GbV::I64) goto u3HTe; else goto c3HTb;
       u3HTe: // global
           Sp = Sp + 40;
           goto u3HTl;
       c3HTb: // global
           if (_s3GbV::I64 > 55) goto u3HTf; else goto c3HTa;
       u3HTf: // global
           Sp = Sp + 40;
           goto u3HTl;
       u3HTl: // global
           call _c3HSZ() args: 0, res: 0, upd: 0;
       c3HTa: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3GbV::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HQ3_info" {
     block_c3HQ3_info:
         const _c3HQ3;
         const 516;
         const 216172786408751134;
         const S3GvX_srt+280;
 },
 _c3HQe() //  [R1]
         { []
         }
     {offset
       c3HQe: // global
           if (R1 & 7 == 1) goto c3HQD; else goto c3HSj;
       c3HQD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HQG; else goto c3HQF;
       c3HQG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HQF: // global
           I64[Hp - 16] = sat_s3Gc0_info;
           P64[Hp] = P64[Sp + 16];
           _s3GbU::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3HQB_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s3GbU::P64;
           P64[Sp + 16] = Hp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c3HSj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HSo; else goto c3HSn;
       c3HSo: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HSn: // global
           _s3GbV::I64 = I64[Sp + 32];
           if (48 > _s3GbV::I64) goto u3HTg; else goto c3HSK;
       u3HTg: // global
           Sp = Sp + 40;
           goto u3HTn;
       c3HSK: // global
           if (_s3GbV::I64 > 57) goto u3HTh; else goto c3HSJ;
       u3HTh: // global
           Sp = Sp + 40;
           goto u3HTn;
       u3HTn: // global
           call _c3HSZ() args: 0, res: 0, upd: 0;
       c3HSJ: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3GbV::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HQe_info" {
     block_c3HQe_info:
         const _c3HQe;
         const 516;
         const 12884901918;
         const S3GvX_srt+472;
 },
 _c3HQB() //  [R1]
         { []
         }
     {offset
       c3HQB: // global
           if (R1 & 7 == 1) goto c3HQM; else goto c3HQN;
       c3HQM: // global
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3HQN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HQS; else goto c3HQR;
       c3HQS: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HQR: // global
           _s3GbV::I64 = I64[Sp + 8];
           if (48 > _s3GbV::I64) goto c3HS6; else goto c3HSi;
       c3HSi: // global
           if (_s3GbV::I64 > 57) goto c3HS6; else goto c3HSh;
       c3HS6: // global
           Hp = Hp - 32;
           call _c3HQW() args: 0, res: 0, upd: 0;
       c3HSh: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3GbV::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HQB_info" {
     block_c3HQB_info:
         const _c3HQB;
         const 65;
         const 4294967326;
         const S3GvX_srt+472;
 },
 _c3HQW() //  []
         { []
         }
     {offset
       c3HQW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HR0; else goto c3HQZ;
       c3HR0: // global
           HpAlloc = 32;
           I64[Sp] = block_c3HQW_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3HQZ: // global
           _s3GbV::I64 = I64[Sp + 8];
           if (97 > _s3GbV::I64) goto c3HRH; else goto c3HRW;
       c3HRW: // global
           if (_s3GbV::I64 > 102) goto c3HRH; else goto c3HRV;
       c3HRH: // global
           Hp = Hp - 32;
           call _c3HR4() args: 0, res: 0, upd: 0;
       c3HRV: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3GbV::I64 - 87;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HQW_info" {
     block_c3HQW_info:
         const _c3HQW;
         const 65;
         const 30;
 },
 _c3HR4() //  []
         { []
         }
     {offset
       c3HR4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HR8; else goto c3HR7;
       c3HR8: // global
           HpAlloc = 32;
           I64[Sp] = block_c3HR4_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3HR7: // global
           _s3GbV::I64 = I64[Sp + 8];
           if (65 > _s3GbV::I64) goto u3HTi; else goto c3HRx;
       u3HTi: // global
           Sp = Sp + 16;
           goto u3HTr;
       c3HRx: // global
           if (_s3GbV::I64 > 70) goto u3HTj; else goto c3HRw;
       u3HTj: // global
           Sp = Sp + 16;
           goto u3HTr;
       u3HTr: // global
           call _c3HSZ() args: 0, res: 0, upd: 0;
       c3HRw: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3GbV::I64 - 55;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HR4_info" {
     block_c3HR4_info:
         const _c3HR4;
         const 65;
         const 30;
 },
 _c3HSZ() //  []
         { []
         }
     {offset
       c3HSZ: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.160511444 UTC

[section ""data" . Text.Read.Lex.$w$sreadIntP'_closure" {
     Text.Read.Lex.$w$sreadIntP'_closure:
         const Text.Read.Lex.$w$sreadIntP'_info;
         const 0;
 },
 sat_s3GcI_entry() //  [R1, R2]
         { []
         }
     {offset
       c3HVc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HVd; else goto c3HVe;
       c3HVd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HVe: // global
           I64[Sp - 16] = block_c3HV9_info;
           _s3Gcv::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gcv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3HVu; else goto c3HVa;
       u3HVu: // global
           call _c3HV9(R1) args: 0, res: 0, upd: 0;
       c3HVa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GcI_info" {
     sat_s3GcI_info:
         const sat_s3GcI_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+464;
 },
 _c3HV9() //  [R1]
         { []
         }
     {offset
       c3HV9: // global
           _s3Gcv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HVh_info;
           R3 = I64[R1 + 7];
           R2 = _s3Gcv::P64;
           Sp = Sp + 8;
           call Text.Read.Lex.$w$svalDig_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HV9_info" {
     block_c3HV9_info:
         const _c3HV9;
         const 1;
         const 4294967326;
         const S3GvX_srt+464;
 },
 _c3HVh() //  [R1]
         { []
         }
     {offset
       c3HVh: // global
           if (R1 & 7 == 1) goto c3HVo; else goto c3HVs;
       c3HVo: // global
           R1 = Text.Read.Lex.$fShowLexeme2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HVs: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HVh_info" {
     block_c3HVh_info:
         const _c3HVh;
         const 0;
         const 30;
 },
 sat_s3GcC_entry() //  [R1, R2]
         { []
         }
     {offset
       c3HVD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HVE; else goto c3HVF;
       c3HVE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HVF: // global
           I64[Sp - 16] = block_c3HVA_info;
           _s3Gcv::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gcv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3HVV; else goto c3HVB;
       u3HVV: // global
           call _c3HVA(R1) args: 0, res: 0, upd: 0;
       c3HVB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GcC_info" {
     sat_s3GcC_info:
         const sat_s3GcC_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+464;
 },
 _c3HVA() //  [R1]
         { []
         }
     {offset
       c3HVA: // global
           _s3Gcv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HVI_info;
           R3 = I64[R1 + 7];
           R2 = _s3Gcv::P64;
           Sp = Sp + 8;
           call Text.Read.Lex.$w$svalDig_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HVA_info" {
     block_c3HVA_info:
         const _c3HVA;
         const 1;
         const 4294967326;
         const S3GvX_srt+464;
 },
 _c3HVI() //  [R1]
         { []
         }
     {offset
       c3HVI: // global
           if (R1 & 7 == 1) goto c3HVP; else goto c3HVT;
       c3HVP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HVT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HVI_info" {
     block_c3HVI_info:
         const _c3HVI;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3HW1_srtd" {
     u3HW1_srtd:
         const S3GvX_srt+240;
         const 34;
         const 8858370049;
 },
 Text.Read.Lex.$w$sreadIntP'_entry() //  [R2, R3]
         { []
         }
     {offset
       c3HVW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HW0; else goto c3HVZ;
       c3HW0: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$sreadIntP'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HVZ: // global
           I64[Hp - 24] = sat_s3GcI_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3GcC_info;
           P64[Hp] = R2;
           R5 = R3;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = R2;
           call Text.Read.Lex.$w$sreadIntP_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$w$sreadIntP'_info" {
     Text.Read.Lex.$w$sreadIntP'_info:
         const Text.Read.Lex.$w$sreadIntP'_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3HW1_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.178041409 UTC

[section ""data" . Text.Read.Lex.$wreadIntP'_closure" {
     Text.Read.Lex.$wreadIntP'_closure:
         const Text.Read.Lex.$wreadIntP'_info;
         const 0;
 },
 sat_s3GcY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3HWW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3HWX; else goto c3HWY;
       c3HWX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HWY: // global
           I64[Sp - 32] = block_c3HWT_info;
           _s3GcJ::P64 = P64[R1 + 7];
           _s3GcK::P64 = P64[R1 + 15];
           _s3GcL::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3GcJ::P64;
           P64[Sp - 16] = _s3GcK::P64;
           P64[Sp - 8] = _s3GcL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3HXe; else goto c3HWU;
       u3HXe: // global
           call _c3HWT(R1) args: 0, res: 0, upd: 0;
       c3HWU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GcY_info" {
     sat_s3GcY_info:
         const sat_s3GcY_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3GvX_srt+496;
 },
 _c3HWT() //  [R1]
         { []
         }
     {offset
       c3HWT: // global
           _s3GcL::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3HX1_info;
           R5 = I64[R1 + 7];
           R4 = _s3GcL::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HWT_info" {
     block_c3HWT_info:
         const _c3HWT;
         const 3;
         const 4294967326;
         const S3GvX_srt+496;
 },
 _c3HX1() //  [R1]
         { []
         }
     {offset
       c3HX1: // global
           if (R1 & 7 == 1) goto c3HX8; else goto c3HXc;
       c3HX8: // global
           R1 = Text.Read.Lex.$fShowLexeme2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HXc: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HX1_info" {
     block_c3HX1_info:
         const _c3HX1;
         const 0;
         const 30;
 },
 sat_s3GcS_entry() //  [R1, R2]
         { []
         }
     {offset
       c3HXn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3HXo; else goto c3HXp;
       c3HXo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HXp: // global
           I64[Sp - 32] = block_c3HXk_info;
           _s3GcJ::P64 = P64[R1 + 7];
           _s3GcK::P64 = P64[R1 + 15];
           _s3GcL::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3GcJ::P64;
           P64[Sp - 16] = _s3GcK::P64;
           P64[Sp - 8] = _s3GcL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3HXF; else goto c3HXl;
       u3HXF: // global
           call _c3HXk(R1) args: 0, res: 0, upd: 0;
       c3HXl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GcS_info" {
     sat_s3GcS_info:
         const sat_s3GcS_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3GvX_srt+496;
 },
 _c3HXk() //  [R1]
         { []
         }
     {offset
       c3HXk: // global
           _s3GcL::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3HXs_info;
           R5 = I64[R1 + 7];
           R4 = _s3GcL::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HXk_info" {
     block_c3HXk_info:
         const _c3HXk;
         const 3;
         const 4294967326;
         const S3GvX_srt+496;
 },
 _c3HXs() //  [R1]
         { []
         }
     {offset
       c3HXs: // global
           if (R1 & 7 == 1) goto c3HXz; else goto c3HXD;
       c3HXz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HXD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HXs_info" {
     block_c3HXs_info:
         const _c3HXs;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3HXL_srtd" {
     u3HXL_srtd:
         const S3GvX_srt+256;
         const 33;
         const 5368709121;
 },
 Text.Read.Lex.$wreadIntP'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3HXG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3HXK; else goto c3HXJ;
       c3HXK: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wreadIntP'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HXJ: // global
           I64[Hp - 56] = sat_s3GcY_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3GcS_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R6 = R5;
           R5 = Hp - 55;
           _s3GcL::P64 = R4;
           R4 = Hp - 23;
           _s3GcK::P64 = R3;
           R3 = _s3GcL::P64;
           R2 = _s3GcK::P64;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wreadIntP'_info" {
     Text.Read.Lex.$wreadIntP'_info:
         const Text.Read.Lex.$wreadIntP'_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u3HXL_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.194427926 UTC

[section ""data" . Text.Read.Lex.readDecP6_closure" {
     Text.Read.Lex.readDecP6_closure:
         const Text.Read.Lex.readDecP6_info;
         const 0;
 },
 Text.Read.Lex.readDecP6_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3HYB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HYC; else goto c3HYD;
       c3HYC: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readDecP6_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HYD: // global
           I64[Sp - 8] = block_c3HYy_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP6_info" {
     Text.Read.Lex.readDecP6_info:
         const Text.Read.Lex.readDecP6_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S3GvX_srt+512;
 },
 _c3HYy() //  [R1]
         { []
         }
     {offset
       c3HYy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HYG; else goto c3HYF;
       c3HYG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HYF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HYy_info" {
     block_c3HYy_info:
         const _c3HYy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.200821822 UTC

[section ""data" . Text.Read.Lex.readOctP1_closure" {
     Text.Read.Lex.readOctP1_closure:
         const Text.Read.Lex.readOctP1_info;
         const 0;
 },
 Text.Read.Lex.readOctP1_entry() //  [R2]
         { []
         }
     {offset
       c3HYZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HZ0; else goto c3HZ1;
       c3HZ0: // global
           R2 = R2;
           R1 = Text.Read.Lex.readOctP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HZ1: // global
           I64[Sp - 8] = block_c3HYW_info;
           R3 = R2;
           R2 = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readOctP1_info" {
     Text.Read.Lex.readOctP1_info:
         const Text.Read.Lex.readOctP1_entry;
         const 0;
         const 158913789966;
         const 4294967301;
         const S3GvX_srt+488;
 },
 _c3HYW() //  [R1]
         { []
         }
     {offset
       c3HYW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HZ4; else goto c3HZ3;
       c3HZ4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HZ3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HYW_info" {
     block_c3HYW_info:
         const _c3HYW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.206366268 UTC

[section ""data" . Text.Read.Lex.readOctP_$sreadOctP_closure" {
     Text.Read.Lex.readOctP_$sreadOctP_closure:
         const Text.Read.Lex.readOctP_$sreadOctP_info;
         const 0;
 },
 Text.Read.Lex.readOctP_$sreadOctP_entry() //  [R2]
         { []
         }
     {offset
       c3HZk: // global
           R2 = R2;
           call Text.Read.Lex.readOctP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readOctP_$sreadOctP_info" {
     Text.Read.Lex.readOctP_$sreadOctP_info:
         const Text.Read.Lex.readOctP_$sreadOctP_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3GvX_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.211128791 UTC

[section ""data" . Text.Read.Lex.readOctP2_closure" {
     Text.Read.Lex.readOctP2_closure:
         const Text.Read.Lex.readOctP2_info;
         const 0;
 },
 w2_s3Gda_entry() //  [R1]
         { []
         }
     {offset
       c3HZz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3HZA; else goto c3HZB;
       c3HZA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HZB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_s3Gda_info" {
     w2_s3Gda_info:
         const w2_s3Gda_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+488;
 },
 sat_s3Gde_entry() //  [R1, R2]
         { []
         }
     {offset
       c3HZK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HZL; else goto c3HZM;
       c3HZL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HZM: // global
           I64[Sp - 8] = block_c3HZH_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gde_info" {
     sat_s3Gde_info:
         const sat_s3Gde_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3GvX_srt+512;
 },
 _c3HZH() //  [R1]
         { []
         }
     {offset
       c3HZH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HZP; else goto c3HZO;
       c3HZP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HZO: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3HZH_info" {
     block_c3HZH_info:
         const _c3HZH;
         const 0;
         const 30;
 },
 Text.Read.Lex.readOctP2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3HZQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3HZU; else goto c3HZT;
       c3HZU: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readOctP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HZT: // global
           I64[Hp - 48] = w2_s3Gda_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3Gde_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readOctP2_info" {
     Text.Read.Lex.readOctP2_info:
         const Text.Read.Lex.readOctP2_entry;
         const 0;
         const 313532612622;
         const 8589934607;
         const S3GvX_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.220424738 UTC

[section ""data" . Text.Read.Lex.readOctP_closure" {
     Text.Read.Lex.readOctP_closure:
         const Text.Read.Lex.readOctP_info;
         const 0;
 },
 Text.Read.Lex.readOctP_entry() //  [R2, R3]
         { []
         }
     {offset
       c3I0o: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readOctP2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readOctP_info" {
     Text.Read.Lex.readOctP_info:
         const Text.Read.Lex.readOctP_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3GvX_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.224453067 UTC

[section ""data" . Text.Read.Lex.readDecP1_closure" {
     Text.Read.Lex.readDecP1_closure:
         const Text.Read.Lex.readDecP1_info;
         const 0;
 },
 section ""relreadonly" . u3I0I_srtd" {
     u3I0I_srtd:
         const S3GvX_srt+280;
         const 34;
         const 8858370049;
 },
 Text.Read.Lex.readDecP1_entry() //  [R2]
         { []
         }
     {offset
       c3I0C: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3I0D; else goto c3I0E;
       c3I0D: // global
           R2 = R2;
           R1 = Text.Read.Lex.readDecP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3I0E: // global
           I64[Sp - 8] = block_c3I0z_info;
           R3 = R2;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP1_info" {
     Text.Read.Lex.readDecP1_info:
         const Text.Read.Lex.readDecP1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3I0I_srtd;
 },
 _c3I0z() //  [R1]
         { []
         }
     {offset
       c3I0z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3I0H; else goto c3I0G;
       c3I0H: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I0G: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3I0z_info" {
     block_c3I0z_info:
         const _c3I0z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.231238704 UTC

[section ""data" . Text.Read.Lex.readDecP_$sreadDecP_closure" {
     Text.Read.Lex.readDecP_$sreadDecP_closure:
         const Text.Read.Lex.readDecP_$sreadDecP_info;
         const 0;
 },
 Text.Read.Lex.readDecP_$sreadDecP_entry() //  [R2]
         { []
         }
     {offset
       c3I0Z: // global
           R2 = R2;
           call Text.Read.Lex.readDecP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP_$sreadDecP_info" {
     Text.Read.Lex.readDecP_$sreadDecP_info:
         const Text.Read.Lex.readDecP_$sreadDecP_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3GvX_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.236183135 UTC

[section ""data" . Text.Read.Lex.readDecP5_closure" {
     Text.Read.Lex.readDecP5_closure:
         const Text.Read.Lex.readDecP5_info;
         const 0;
 },
 w2_s3Gdk_entry() //  [R1]
         { []
         }
     {offset
       c3I1e: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3I1f; else goto c3I1g;
       c3I1f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I1g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_s3Gdk_info" {
     w2_s3Gdk_info:
         const w2_s3Gdk_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+552;
 },
 sat_s3Gdo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3I1p: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3I1q; else goto c3I1r;
       c3I1q: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3I1r: // global
           I64[Sp - 8] = block_c3I1m_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gdo_info" {
     sat_s3Gdo_info:
         const sat_s3Gdo_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3GvX_srt+512;
 },
 _c3I1m() //  [R1]
         { []
         }
     {offset
       c3I1m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3I1u; else goto c3I1t;
       c3I1u: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I1t: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3I1m_info" {
     block_c3I1m_info:
         const _c3I1m;
         const 0;
         const 30;
 },
 Text.Read.Lex.readDecP5_entry() //  [R2, R3]
         { []
         }
     {offset
       c3I1v: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3I1z; else goto c3I1y;
       c3I1z: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readDecP5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3I1y: // global
           I64[Hp - 48] = w2_s3Gdk_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3Gdo_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP5_info" {
     Text.Read.Lex.readDecP5_info:
         const Text.Read.Lex.readDecP5_entry;
         const 0;
         const 416611827726;
         const 8589934607;
         const S3GvX_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.245006177 UTC

[section ""data" . Text.Read.Lex.readDecP_closure" {
     Text.Read.Lex.readDecP_closure:
         const Text.Read.Lex.readDecP_info;
         const 0;
 },
 Text.Read.Lex.readDecP_entry() //  [R2, R3]
         { []
         }
     {offset
       c3I23: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readDecP5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readDecP_info" {
     Text.Read.Lex.readDecP_info:
         const Text.Read.Lex.readDecP_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3GvX_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.248961665 UTC

[section ""data" . Text.Read.Lex.readHexP1_closure" {
     Text.Read.Lex.readHexP1_closure:
         const Text.Read.Lex.readHexP1_info;
         const 0;
 },
 Text.Read.Lex.readHexP1_entry() //  [R2]
         { []
         }
     {offset
       c3I2h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3I2i; else goto c3I2j;
       c3I2i: // global
           R2 = R2;
           R1 = Text.Read.Lex.readHexP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3I2j: // global
           I64[Sp - 8] = block_c3I2e_info;
           R3 = R2;
           R2 = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readHexP1_info" {
     Text.Read.Lex.readHexP1_info:
         const Text.Read.Lex.readHexP1_entry;
         const 0;
         const 8834747727886;
         const 4294967301;
         const S3GvX_srt+480;
 },
 _c3I2e() //  [R1]
         { []
         }
     {offset
       c3I2e: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3I2m; else goto c3I2l;
       c3I2m: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I2l: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3I2e_info" {
     block_c3I2e_info:
         const _c3I2e;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.254635428 UTC

[section ""data" . Text.Read.Lex.readHexP_$sreadHexP_closure" {
     Text.Read.Lex.readHexP_$sreadHexP_closure:
         const Text.Read.Lex.readHexP_$sreadHexP_info;
         const 0;
 },
 Text.Read.Lex.readHexP_$sreadHexP_entry() //  [R2]
         { []
         }
     {offset
       c3I2C: // global
           R2 = R2;
           call Text.Read.Lex.readHexP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readHexP_$sreadHexP_info" {
     Text.Read.Lex.readHexP_$sreadHexP_info:
         const Text.Read.Lex.readHexP_$sreadHexP_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3GvX_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.25960354 UTC

[section ""data" . Text.Read.Lex.readHexP2_closure" {
     Text.Read.Lex.readHexP2_closure:
         const Text.Read.Lex.readHexP2_info;
         const 0;
 },
 w2_s3Gdu_entry() //  [R1]
         { []
         }
     {offset
       c3I2R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3I2S; else goto c3I2T;
       c3I2S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I2T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_s3Gdu_info" {
     w2_s3Gdu_info:
         const w2_s3Gdu_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+480;
 },
 sat_s3Gdy_entry() //  [R1, R2]
         { []
         }
     {offset
       c3I32: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3I33; else goto c3I34;
       c3I33: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3I34: // global
           I64[Sp - 8] = block_c3I2Z_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gdy_info" {
     sat_s3Gdy_info:
         const sat_s3Gdy_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3GvX_srt+512;
 },
 _c3I2Z() //  [R1]
         { []
         }
     {offset
       c3I2Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3I37; else goto c3I36;
       c3I37: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I36: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3I2Z_info" {
     block_c3I2Z_info:
         const _c3I2Z;
         const 0;
         const 30;
 },
 Text.Read.Lex.readHexP2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3I38: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3I3c; else goto c3I3b;
       c3I3c: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readHexP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3I3b: // global
           I64[Hp - 48] = w2_s3Gdu_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3Gdy_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readHexP2_info" {
     Text.Read.Lex.readHexP2_info:
         const Text.Read.Lex.readHexP2_entry;
         const 0;
         const 17665200488462;
         const 8589934607;
         const S3GvX_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.269229647 UTC

[section ""data" . Text.Read.Lex.readHexP_closure" {
     Text.Read.Lex.readHexP_closure:
         const Text.Read.Lex.readHexP_info;
         const 0;
 },
 Text.Read.Lex.readHexP_entry() //  [R2, R3]
         { []
         }
     {offset
       c3I3G: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readHexP2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.readHexP_info" {
     Text.Read.Lex.readHexP_info:
         const Text.Read.Lex.readHexP_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3GvX_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.284493022 UTC

[section ""data" . $wlexDigits_r3y9x_closure" {
     $wlexDigits_r3y9x_closure:
         const $wlexDigits_r3y9x_info;
         const 0;
 },
 lvl116_s3GdB_entry() //  [R1, R2]
         { []
         }
     {offset
       c3I43: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I44; else goto c3I45;
       c3I44: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3I45: // global
           I64[Sp - 16] = block_c3I3W_info;
           _s3GdA::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GdA::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3I4c; else goto c3I3X;
       u3I4c: // global
           call _c3I3W(R1) args: 0, res: 0, upd: 0;
       c3I3X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl116_s3GdB_info" {
     lvl116_s3GdB_info:
         const lvl116_s3GdB_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3I3W() //  [R1]
         { []
         }
     {offset
       c3I3W: // global
           if (R1 & 7 == 1) goto c3I40; else goto c3I41;
       c3I40: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3I41: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3I3W_info" {
     block_c3I3W_info:
         const _c3I3W;
         const 1;
         const 30;
 },
 sat_s3GdL_entry() //  [R1]
         { []
         }
     {offset
       c3I4r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I4s; else goto c3I4t;
       c3I4s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I4t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3GdL_info" {
     sat_s3GdL_info:
         const sat_s3GdL_entry;
         const 1;
         const 16;
 },
 sat_s3GdX_entry() //  [R1, R2]
         { []
         }
     {offset
       c3I4V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3I4Z; else goto c3I4Y;
       c3I4Z: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3I4Y: // global
           _s3GdI::P64 = P64[R1 + 7];
           _s3GdT::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3GdT::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3GdI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GdX_info" {
     sat_s3GdX_info:
         const sat_s3GdX_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 lvl117_s3GdU_entry() //  [R1]
         { []
         }
     {offset
       c3I50: // global
           _s3GdU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3I51; else goto c3I52;
       c3I52: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3I54; else goto c3I53;
       c3I54: // global
           HpAlloc = 24;
           goto c3I51;
       c3I51: // global
           R1 = _s3GdU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I53: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GdU::P64;
           _s3GdG::P64 = P64[_s3GdU::P64 + 16];
           _s3GdI::P64 = P64[_s3GdU::P64 + 24];
           _s3GdJ::P64 = P64[_s3GdU::P64 + 32];
           _s3GdN::P64 = P64[_s3GdU::P64 + 40];
           _s3GdT::P64 = P64[_s3GdU::P64 + 48];
           I64[Hp - 16] = sat_s3GdX_info;
           P64[Hp - 8] = _s3GdI::P64;
           P64[Hp] = _s3GdT::P64;
           R4 = _s3GdJ::P64;
           R3 = Hp - 15;
           R2 = _s3GdN::P64;
           R1 = _s3GdG::P64;
           Sp = Sp - 16;
           call scan_s3GdG_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3GdU_info" {
     lvl117_s3GdU_info:
         const lvl117_s3GdU_entry;
         const 5;
         const 4294967311;
         const S3GvX_srt+472;
 },
 sat_s3GdZ_entry() //  [R1]
         { []
         }
     {offset
       c3I5a: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GdZ_info" {
     sat_s3GdZ_info:
         const sat_s3GdZ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3Ge3_entry() //  [R1]
         { []
         }
     {offset
       c3I5n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I5o; else goto c3I5p;
       c3I5o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I5p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Ge3_info" {
     sat_s3Ge3_info:
         const sat_s3Ge3_entry;
         const 1;
         const 16;
 },
 sat_s3Ge5_entry() //  [R1]
         { []
         }
     {offset
       c3I5y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I5z; else goto c3I5A;
       c3I5z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I5A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Ge5_info" {
     sat_s3Ge5_info:
         const sat_s3Ge5_entry;
         const 1;
         const 16;
 },
 sat_s3Gea_entry() //  [R1]
         { []
         }
     {offset
       c3I5J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I5K; else goto c3I5L;
       c3I5K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I5L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gea_info" {
     sat_s3Gea_info:
         const sat_s3Gea_entry;
         const 1;
         const 16;
 },
 sat_s3Gec_entry() //  [R1]
         { []
         }
     {offset
       c3I5U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I5V; else goto c3I5W;
       c3I5V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I5W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gec_info" {
     sat_s3Gec_info:
         const sat_s3Gec_entry;
         const 1;
         const 16;
 },
 sat_s3Gej_entry() //  [R1]
         { []
         }
     {offset
       c3I6f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I6g; else goto c3I6h;
       c3I6g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I6h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gej_info" {
     sat_s3Gej_info:
         const sat_s3Gej_entry;
         const 1;
         const 16;
 },
 sat_s3Gel_entry() //  [R1]
         { []
         }
     {offset
       c3I6q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I6r; else goto c3I6s;
       c3I6r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I6s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gel_info" {
     sat_s3Gel_info:
         const sat_s3Gel_entry;
         const 1;
         const 16;
 },
 scan_s3GdG_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c3I6x: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3I6y; else goto c3I6z;
       c3I6y: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3I6z: // global
           I64[Sp - 40] = block_c3I4i_info;
           _s3GdG::P64 = R1;
           _s3Gdz::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3Gdz::P64;
           P64[Sp - 24] = _s3GdG::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3I8J; else goto c3I4j;
       u3I8J: // global
           call _c3I4i(R1) args: 0, res: 0, upd: 0;
       c3I4j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . scan_s3GdG_info" {
     scan_s3GdG_info:
         const scan_s3GdG_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S3GvX_srt+472;
 },
 _c3I4i() //  [R1]
         { []
         }
     {offset
       c3I4i: // global
           if (R1 & 7 == 1) goto c3I6u; else goto c3I6v;
       c3I6u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3I6C; else goto c3I6B;
       c3I6C: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I6B: // global
           I64[Hp - 16] = sat_s3GdL_info;
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 16;
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I6v: // global
           I64[Sp - 8] = block_c3I4w_info;
           _s3GdM::P64 = P64[R1 + 6];
           _s3GdN::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s3GdN::P64;
           P64[Sp + 8] = _s3GdM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3I8z; else goto c3I4x;
       u3I8z: // global
           call _c3I4w(R1) args: 0, res: 0, upd: 0;
       c3I4x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3I4i_info" {
     block_c3I4i_info:
         const _c3I4i;
         const 4;
         const 4294967326;
         const S3GvX_srt+472;
 },
 _c3I4w() //  [R1]
         { []
         }
     {offset
       c3I4w: // global
           I64[Sp] = block_c3I4B_info;
           _s3GdP::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3GdP::I64;
           if (R1 & 7 != 0) goto u3I8A; else goto c3I4C;
       u3I8A: // global
           call _c3I4B(R1) args: 0, res: 0, upd: 0;
       c3I4C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3I4w_info" {
     block_c3I4w_info:
         const _c3I4w;
         const 5;
         const 4294967326;
         const S3GvX_srt+472;
 },
 _c3I4B() //  [R1]
         { []
         }
     {offset
       c3I4B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3I6H; else goto c3I6G;
       c3I6H: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I6G: // global
           _s3GdR::I64 = I64[R1 + 7];
           _s3Ge0::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s3Ge0::I64, 11)) goto u3I8p; else goto u3I8r;
       u3I8p: // global
           _s3GdI::P64 = P64[Sp + 32];
           _s3GdJ::P64 = P64[Sp + 40];
           if (%MO_S_Lt_W64(_s3Ge0::I64, 10)) goto u3I8q; else goto c3I71;
       u3I8q: // global
           if (_s3Ge0::I64 != 8) goto c3I6N; else goto c3I6U;
       c3I6U: // global
           if (48 > _s3GdR::I64) goto c3I6P; else goto c3I6T;
       c3I6P: // global
           I64[Hp - 16] = sat_s3Ge3_info;
           P64[Hp] = _s3GdI::P64;
           R2 = Hp - 16;
           R1 = _s3GdJ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I6T: // global
           if (_s3GdR::I64 > 55) goto c3I6R; else goto c3I6S;
       c3I6R: // global
           I64[Hp - 16] = sat_s3Ge5_info;
           P64[Hp] = _s3GdI::P64;
           R2 = Hp - 16;
           R1 = _s3GdJ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I6S: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3GdR::I64 - 48;
           _c3I8o::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3I8o::P64;
           Sp = Sp + 8;
           goto u3I8E;
       c3I71: // global
           if (48 > _s3GdR::I64) goto c3I6W; else goto c3I70;
       c3I6W: // global
           I64[Hp - 16] = sat_s3Gea_info;
           P64[Hp] = _s3GdI::P64;
           R2 = Hp - 16;
           R1 = _s3GdJ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I70: // global
           if (_s3GdR::I64 > 57) goto c3I6Y; else goto c3I6Z;
       c3I6Y: // global
           I64[Hp - 16] = sat_s3Gec_info;
           P64[Hp] = _s3GdI::P64;
           R2 = Hp - 16;
           R1 = _s3GdJ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I6Z: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3GdR::I64 - 48;
           _c3I8i::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3I8i::P64;
           Sp = Sp + 8;
           goto u3I8E;
       u3I8r: // global
           if (_s3Ge0::I64 != 16) goto c3I6N; else goto c3I7C;
       c3I6N: // global
           Hp = Hp - 24;
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3I7C: // global
           if (48 > _s3GdR::I64) goto c3I7z; else goto c3I7B;
       c3I7B: // global
           if (_s3GdR::I64 > 57) goto c3I7z; else goto c3I7A;
       c3I7z: // global
           Hp = Hp - 24;
           I64[Sp + 16] = _s3GdR::I64;
           call _c3I61() args: 0, res: 0, upd: 0;
       c3I7A: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3GdR::I64 - 48;
           _c3I7U::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3I7U::P64;
           Sp = Sp + 8;
           goto u3I8E;
       u3I8E: // global
           call _c3I4J() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3I4B_info" {
     block_c3I4B_info:
         const _c3I4B;
         const 133;
         const 4294967326;
         const S3GvX_srt+472;
 },
 _c3I61() //  []
         { []
         }
     {offset
       c3I61: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3I74; else goto c3I73;
       c3I74: // global
           HpAlloc = 16;
           I64[Sp] = block_c3I61_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3I73: // global
           _s3GdR::I64 = I64[Sp + 16];
           if (97 > _s3GdR::I64) goto c3I7n; else goto c3I7p;
       c3I7p: // global
           if (_s3GdR::I64 > 102) goto c3I7n; else goto c3I7o;
       c3I7n: // global
           Hp = Hp - 16;
           call _c3I66() args: 0, res: 0, upd: 0;
       c3I7o: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3GdR::I64 - 87;
           P64[Sp + 16] = Hp - 7;
           Sp = Sp + 8;
           call _c3I4J() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3I61_info" {
     block_c3I61_info:
         const _c3I61;
         const 133;
         const 4294967326;
         const S3GvX_srt+472;
 },
 _c3I66() //  []
         { []
         }
     {offset
       c3I66: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3I77; else goto c3I76;
       c3I77: // global
           HpAlloc = 24;
           I64[Sp] = block_c3I66_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3I76: // global
           _s3GdI::P64 = P64[Sp + 32];
           _s3GdJ::P64 = P64[Sp + 40];
           _s3GdR::I64 = I64[Sp + 16];
           if (65 > _s3GdR::I64) goto c3I79; else goto c3I7d;
       c3I79: // global
           I64[Hp - 16] = sat_s3Gej_info;
           P64[Hp] = _s3GdI::P64;
           R2 = Hp - 16;
           R1 = _s3GdJ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I7d: // global
           if (_s3GdR::I64 > 70) goto c3I7b; else goto c3I7c;
       c3I7b: // global
           I64[Hp - 16] = sat_s3Gel_info;
           P64[Hp] = _s3GdI::P64;
           R2 = Hp - 16;
           R1 = _s3GdJ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I7c: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3GdR::I64 - 55;
           _c3I8c::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3I8c::P64;
           Sp = Sp + 8;
           call _c3I4J() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3I66_info" {
     block_c3I66_info:
         const _c3I66;
         const 133;
         const 4294967326;
         const S3GvX_srt+472;
 },
 _c3I4J() //  []
         { []
         }
     {offset
       c3I4J: // global
           Hp = Hp + 88;
           _s3GdT::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c3I6L; else goto c3I6K;
       c3I6L: // global
           HpAlloc = 88;
           I64[Sp - 8] = block_c3I4I_info;
           R1 = _s3GdT::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I6K: // global
           I64[Hp - 80] = lvl117_s3GdU_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = _s3GdT::P64;
           I64[Hp - 24] = sat_s3GdZ_info;
           P64[Hp - 16] = Hp - 80;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3I4I() //  [R1]
         { []
         }
     {offset
       c3I4I: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c3I4J() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3I4I_info" {
     block_c3I4I_info:
         const _c3I4I;
         const 133;
         const 4294967326;
         const S3GvX_srt+472;
 },
 sat_s3GeC_entry() //  [R1, R2]
         { []
         }
     {offset
       c3I8P: // global
           R4 = P64[R1 + 7];
           R3 = GHC.Base.id_closure+1;
           R2 = R2;
           R1 = P64[R1 + 15];
           call scan_s3GdG_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GeC_info" {
     sat_s3GeC_info:
         const sat_s3GeC_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3GvX_srt+472;
 },
 $wlexDigits_r3y9x_entry() //  [R2, R3]
         { []
         }
     {offset
       c3I8S: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3I8W; else goto c3I8V;
       c3I8W: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = $wlexDigits_r3y9x_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3I8V: // global
           I64[Hp - 48] = lvl116_s3GdB_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = scan_s3GdG_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3GeC_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 29;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlexDigits_r3y9x_info" {
     $wlexDigits_r3y9x_info:
         const $wlexDigits_r3y9x_entry;
         const 0;
         const 70373039144974;
         const 8589934607;
         const S3GvX_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.326419616 UTC

[section ""data" . a1_r3y9y_closure" {
     a1_r3y9y_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.328039787 UTC

[section ""data" . a2_r3y9z_closure" {
     a2_r3y9z_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.335065456 UTC

[section ""data" . $wlexHexOct_r3y9A_closure" {
     $wlexHexOct_r3y9A_closure:
         const $wlexHexOct_r3y9A_info;
         const 0;
 },
 sat_s3GeI_entry() //  [R1, R2]
         { []
         }
     {offset
       c3IbD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IbH; else goto c3IbG;
       c3IbH: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IbG: // global
           _s3GeD::P64 = P64[R1 + 7];
           I64[Hp - 32] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 24] = a2_r3y9z_closure+1;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 2;
           R1 = _s3GeD::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GeI_info" {
     sat_s3GeI_info:
         const sat_s3GeI_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl116_s3GeE_entry() //  [R1]
         { []
         }
     {offset
       c3IbL: // global
           _s3GeE::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3IbM; else goto c3IbN;
       c3IbN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IbP; else goto c3IbO;
       c3IbP: // global
           HpAlloc = 16;
           goto c3IbM;
       c3IbM: // global
           R1 = _s3GeE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IbO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GeE::P64;
           _s3GeD::P64 = P64[_s3GeE::P64 + 16];
           I64[Hp - 8] = sat_s3GeI_info;
           P64[Hp] = _s3GeD::P64;
           I64[Sp - 24] = block_c3IbI_info;
           R3 = Hp - 7;
           R2 = a2_r3y9z_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GeE_info" {
     lvl116_s3GeE_info:
         const lvl116_s3GeE_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+584;
 },
 _c3IbI() //  [R1]
         { []
         }
     {offset
       c3IbI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IbS; else goto c3IbR;
       c3IbS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3IbR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3IbI_info" {
     block_c3IbI_info:
         const _c3IbI;
         const 0;
         const 30;
 },
 sat_s3GeP_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ic4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Ic8; else goto c3Ic7;
       c3Ic8: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ic7: // global
           _s3GeD::P64 = P64[R1 + 7];
           I64[Hp - 32] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 24] = a1_r3y9y_closure+1;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 2;
           R1 = _s3GeD::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GeP_info" {
     sat_s3GeP_info:
         const sat_s3GeP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl117_s3GeL_entry() //  [R1]
         { []
         }
     {offset
       c3Icc: // global
           _s3GeL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Icd; else goto c3Ice;
       c3Ice: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Icg; else goto c3Icf;
       c3Icg: // global
           HpAlloc = 16;
           goto c3Icd;
       c3Icd: // global
           R1 = _s3GeL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Icf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GeL::P64;
           _s3GeD::P64 = P64[_s3GeL::P64 + 16];
           I64[Hp - 8] = sat_s3GeP_info;
           P64[Hp] = _s3GeD::P64;
           I64[Sp - 24] = block_c3Ic9_info;
           R3 = Hp - 7;
           R2 = a1_r3y9y_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3GeL_info" {
     lvl117_s3GeL_info:
         const lvl117_s3GeL_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+584;
 },
 _c3Ic9() //  [R1]
         { []
         }
     {offset
       c3Ic9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Icj; else goto c3Ici;
       c3Icj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Ici: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Ic9_info" {
     block_c3Ic9_info:
         const _c3Ic9;
         const 0;
         const 30;
 },
 lvl118_s3GeS_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ics: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Ict; else goto c3Icu;
       c3Ict: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Icu: // global
           I64[Sp - 24] = block_c3Icp_info;
           _s3GeE::P64 = P64[R1 + 7];
           _s3GeL::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3GeE::P64;
           P64[Sp - 8] = _s3GeL::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3IcK; else goto c3Icq;
       u3IcK: // global
           call _c3Icp(R1) args: 0, res: 0, upd: 0;
       c3Icq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl118_s3GeS_info" {
     lvl118_s3GeS_info:
         const lvl118_s3GeS_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3Icp() //  [R1]
         { []
         }
     {offset
       c3Icp: // global
           _s3GeE::P64 = P64[Sp + 8];
           _s3GeW::I64 = I64[R1 + 7];
           if (_s3GeW::I64 < 120) goto u3IcF; else goto u3IcJ;
       u3IcF: // global
           _s3GeL::P64 = P64[Sp + 16];
           if (_s3GeW::I64 < 89) goto u3IcG; else goto u3IcI;
       u3IcG: // global
           if (_s3GeW::I64 >= 88) goto c3IcE; else goto u3IcH;
       u3IcH: // global
           if (_s3GeW::I64 != 79) goto c3IcA; else goto c3IcD;
       u3IcI: // global
           if (_s3GeW::I64 != 111) goto c3IcA; else goto c3IcD;
       c3IcD: // global
           R1 = _s3GeL::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3IcJ: // global
           if (_s3GeW::I64 < 121) goto c3IcE; else goto c3IcA;
       c3IcE: // global
           R1 = _s3GeE::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3IcA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Icp_info" {
     block_c3Icp_info:
         const _c3Icp;
         const 2;
         const 30;
 },
 sat_s3Gf2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3IcU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IcV; else goto c3IcW;
       c3IcV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IcW: // global
           I64[Sp - 16] = block_c3IcR_info;
           _s3GeX::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GeX::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Id4; else goto c3IcS;
       u3Id4: // global
           call _c3IcR(R1) args: 0, res: 0, upd: 0;
       c3IcS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gf2_info" {
     sat_s3Gf2_info:
         const sat_s3Gf2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3IcR() //  [R1]
         { []
         }
     {offset
       c3IcR: // global
           if (I64[R1 + 7] == 48) goto c3Id3; else goto c3Id2;
       c3Id3: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Id2: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IcR_info" {
     block_c3IcR_info:
         const _c3IcR;
         const 1;
         const 30;
 },
 $wlexHexOct_r3y9A_entry() //  [R2]
         { []
         }
     {offset
       c3Id5: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3Id9; else goto c3Id8;
       c3Id9: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = $wlexHexOct_r3y9A_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Id8: // global
           I64[Hp - 96] = lvl116_s3GeE_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = lvl117_s3GeL_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = lvl118_s3GeS_info;
           P64[Hp - 40] = Hp - 96;
           P64[Hp - 32] = Hp - 72;
           I64[Hp - 24] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = sat_s3Gf2_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlexHexOct_r3y9A_info" {
     $wlexHexOct_r3y9A_info:
         const $wlexHexOct_r3y9A_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.358401271 UTC

[section ""data" . lexHexOct_r3y9B_closure" {
     lexHexOct_r3y9B_closure:
         const lexHexOct_r3y9B_info;
         const 0;
 },
 lexHexOct_r3y9B_entry() //  [R2]
         { []
         }
     {offset
       c3Iey: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Iez; else goto c3IeA;
       c3Iez: // global
           R2 = R2;
           R1 = lexHexOct_r3y9B_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IeA: // global
           I64[Sp - 8] = block_c3Iev_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexHexOct_r3y9A_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lexHexOct_r3y9B_info" {
     lexHexOct_r3y9B_info:
         const lexHexOct_r3y9B_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+592;
 },
 _c3Iev() //  [R1]
         { []
         }
     {offset
       c3Iev: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IeD; else goto c3IeC;
       c3IeD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IeC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Iev_info" {
     block_c3Iev_info:
         const _c3Iev;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.363395293 UTC

[section ""data" . lvl6_r3y9C_closure" {
     lvl6_r3y9C_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.367890296 UTC

[section ""data" . $wlexFrac_r3y9D_closure" {
     $wlexFrac_r3y9D_closure:
         const $wlexFrac_r3y9D_info;
         const 0;
 },
 sat_s3Gfa_entry() //  [R1, R2]
         { []
         }
     {offset
       c3If4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3If8; else goto c3If7;
       c3If8: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3If7: // global
           _s3Gf6::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s3Gf6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gfa_info" {
     sat_s3Gfa_info:
         const sat_s3Gfa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl116_s3Gf7_entry() //  [R1]
         { []
         }
     {offset
       c3Ifc: // global
           _s3Gf7::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Ifd; else goto c3Ife;
       c3Ife: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ifg; else goto c3Iff;
       c3Ifg: // global
           HpAlloc = 16;
           goto c3Ifd;
       c3Ifd: // global
           R1 = _s3Gf7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iff: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gf7::P64;
           _s3Gf6::P64 = P64[_s3Gf7::P64 + 16];
           I64[Hp - 8] = sat_s3Gfa_info;
           P64[Hp] = _s3Gf6::P64;
           I64[Sp - 24] = block_c3If9_info;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gf7_info" {
     lvl116_s3Gf7_info:
         const lvl116_s3Gf7_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+584;
 },
 _c3If9() //  [R1]
         { []
         }
     {offset
       c3If9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ifj; else goto c3Ifi;
       c3Ifj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Ifi: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3If9_info" {
     block_c3If9_info:
         const _c3If9;
         const 0;
         const 30;
 },
 sat_s3Gfh_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ifs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ift; else goto c3Ifu;
       c3Ift: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ifu: // global
           I64[Sp - 16] = block_c3Ifp_info;
           _s3Gf7::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gf7::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3IfC; else goto c3Ifq;
       u3IfC: // global
           call _c3Ifp(R1) args: 0, res: 0, upd: 0;
       c3Ifq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gfh_info" {
     sat_s3Gfh_info:
         const sat_s3Gfh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Ifp() //  [R1]
         { []
         }
     {offset
       c3Ifp: // global
           if (I64[R1 + 7] == 46) goto c3IfB; else goto c3IfA;
       c3IfB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3IfA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ifp_info" {
     block_c3Ifp_info:
         const _c3Ifp;
         const 1;
         const 30;
 },
 $wlexFrac_r3y9D_entry() //  [R2]
         { []
         }
     {offset
       c3IfD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IfH; else goto c3IfG;
       c3IfH: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = $wlexFrac_r3y9D_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IfG: // global
           I64[Hp - 32] = lvl116_s3Gf7_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3Gfh_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlexFrac_r3y9D_info" {
     $wlexFrac_r3y9D_info:
         const $wlexFrac_r3y9D_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S3GvX_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.386835018 UTC

[section ""data" . lexFrac_r3y9E_closure" {
     lexFrac_r3y9E_closure:
         const lexFrac_r3y9E_info;
         const 0;
 },
 lexFrac_r3y9E_entry() //  [R2]
         { []
         }
     {offset
       c3Igq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Igr; else goto c3Igs;
       c3Igr: // global
           R2 = R2;
           R1 = lexFrac_r3y9E_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Igs: // global
           I64[Sp - 8] = block_c3Ign_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexFrac_r3y9D_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lexFrac_r3y9E_info" {
     lexFrac_r3y9E_info:
         const lexFrac_r3y9E_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+608;
 },
 _c3Ign() //  [R1]
         { []
         }
     {offset
       c3Ign: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Igv; else goto c3Igu;
       c3Igv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Igu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ign_info" {
     block_c3Ign_info:
         const _c3Ign;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.392374562 UTC

[section ""cstring" . m1_r3y9F_bytes" {
     m1_r3y9F_bytes:
         I8[] [83,79,72]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.395331437 UTC

[section ""data" . m2_r3y9G_closure" {
     m2_r3y9G_closure:
         const m2_r3y9G_info;
         const 0;
         const 0;
         const 0;
 },
 m2_r3y9G_entry() //  [R1]
         { []
         }
     {offset
       c3IgO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IgP; else goto c3IgQ;
       c3IgP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IgQ: // global
           (_c3IgL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IgL::I64 == 0) goto c3IgN; else goto c3IgM;
       c3IgN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IgM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IgL::I64;
           R2 = m1_r3y9F_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m2_r3y9G_info" {
     m2_r3y9G_info:
         const m2_r3y9G_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.400065283 UTC

[section ""data" . x_r3y9H_closure" {
     x_r3y9H_closure:
         const GHC.Types.C#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.401964306 UTC

[section ""cstring" . m3_r3y9I_bytes" {
     m3_r3y9I_bytes:
         I8[] [83,79]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.40507159 UTC

[section ""data" . m4_r3y9J_closure" {
     m4_r3y9J_closure:
         const m4_r3y9J_info;
         const 0;
         const 0;
         const 0;
 },
 m4_r3y9J_entry() //  [R1]
         { []
         }
     {offset
       c3Ih7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ih8; else goto c3Ih9;
       c3Ih8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ih9: // global
           (_c3Ih4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ih4::I64 == 0) goto c3Ih6; else goto c3Ih5;
       c3Ih6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ih5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ih4::I64;
           R2 = m3_r3y9I_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m4_r3y9J_info" {
     m4_r3y9J_info:
         const m4_r3y9J_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.410101809 UTC

[section ""data" . x1_r3y9K_closure" {
     x1_r3y9K_closure:
         const GHC.Types.C#_con_info;
         const 14;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.412461197 UTC

[section ""cstring" . m5_r3y9L_bytes" {
     m5_r3y9L_bytes:
         I8[] [78,85,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.415125075 UTC

[section ""data" . m6_r3y9M_closure" {
     m6_r3y9M_closure:
         const m6_r3y9M_info;
         const 0;
         const 0;
         const 0;
 },
 m6_r3y9M_entry() //  [R1]
         { []
         }
     {offset
       c3Ihq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ihr; else goto c3Ihs;
       c3Ihr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ihs: // global
           (_c3Ihn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ihn::I64 == 0) goto c3Ihp; else goto c3Iho;
       c3Ihp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Iho: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ihn::I64;
           R2 = m5_r3y9L_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m6_r3y9M_info" {
     m6_r3y9M_info:
         const m6_r3y9M_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.419190918 UTC

[section ""data" . x2_r3y9N_closure" {
     x2_r3y9N_closure:
         const GHC.Types.C#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.420890269 UTC

[section ""cstring" . m7_r3y9O_bytes" {
     m7_r3y9O_bytes:
         I8[] [83,84,88]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.423344451 UTC

[section ""data" . m8_r3y9P_closure" {
     m8_r3y9P_closure:
         const m8_r3y9P_info;
         const 0;
         const 0;
         const 0;
 },
 m8_r3y9P_entry() //  [R1]
         { []
         }
     {offset
       c3IhJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IhK; else goto c3IhL;
       c3IhK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IhL: // global
           (_c3IhG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IhG::I64 == 0) goto c3IhI; else goto c3IhH;
       c3IhI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IhH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IhG::I64;
           R2 = m7_r3y9O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m8_r3y9P_info" {
     m8_r3y9P_info:
         const m8_r3y9P_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.427358831 UTC

[section ""data" . x3_r3y9Q_closure" {
     x3_r3y9Q_closure:
         const GHC.Types.C#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.429042038 UTC

[section ""cstring" . m9_r3y9R_bytes" {
     m9_r3y9R_bytes:
         I8[] [69,84,88]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.431466146 UTC

[section ""data" . m10_r3y9S_closure" {
     m10_r3y9S_closure:
         const m10_r3y9S_info;
         const 0;
         const 0;
         const 0;
 },
 m10_r3y9S_entry() //  [R1]
         { []
         }
     {offset
       c3Ii2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ii3; else goto c3Ii4;
       c3Ii3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ii4: // global
           (_c3IhZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IhZ::I64 == 0) goto c3Ii1; else goto c3Ii0;
       c3Ii1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ii0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IhZ::I64;
           R2 = m9_r3y9R_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m10_r3y9S_info" {
     m10_r3y9S_info:
         const m10_r3y9S_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.435809092 UTC

[section ""data" . x4_r3y9T_closure" {
     x4_r3y9T_closure:
         const GHC.Types.C#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.4375205 UTC

[section ""cstring" . m11_r3y9U_bytes" {
     m11_r3y9U_bytes:
         I8[] [69,79,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.439781371 UTC

[section ""data" . m12_r3y9V_closure" {
     m12_r3y9V_closure:
         const m12_r3y9V_info;
         const 0;
         const 0;
         const 0;
 },
 m12_r3y9V_entry() //  [R1]
         { []
         }
     {offset
       c3Iil: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iim; else goto c3Iin;
       c3Iim: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iin: // global
           (_c3Iii::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Iii::I64 == 0) goto c3Iik; else goto c3Iij;
       c3Iik: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Iij: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Iii::I64;
           R2 = m11_r3y9U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m12_r3y9V_info" {
     m12_r3y9V_info:
         const m12_r3y9V_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.443496966 UTC

[section ""data" . x5_r3y9W_closure" {
     x5_r3y9W_closure:
         const GHC.Types.C#_con_info;
         const 4;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.445181911 UTC

[section ""cstring" . m13_r3y9X_bytes" {
     m13_r3y9X_bytes:
         I8[] [69,78,81]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.448072686 UTC

[section ""data" . m14_r3y9Y_closure" {
     m14_r3y9Y_closure:
         const m14_r3y9Y_info;
         const 0;
         const 0;
         const 0;
 },
 m14_r3y9Y_entry() //  [R1]
         { []
         }
     {offset
       c3IiE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IiF; else goto c3IiG;
       c3IiF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IiG: // global
           (_c3IiB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IiB::I64 == 0) goto c3IiD; else goto c3IiC;
       c3IiD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IiC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IiB::I64;
           R2 = m13_r3y9X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m14_r3y9Y_info" {
     m14_r3y9Y_info:
         const m14_r3y9Y_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.451799554 UTC

[section ""data" . x6_r3y9Z_closure" {
     x6_r3y9Z_closure:
         const GHC.Types.C#_con_info;
         const 5;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.453539985 UTC

[section ""cstring" . m15_r3ya0_bytes" {
     m15_r3ya0_bytes:
         I8[] [65,67,75]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.455876396 UTC

[section ""data" . m16_r3ya1_closure" {
     m16_r3ya1_closure:
         const m16_r3ya1_info;
         const 0;
         const 0;
         const 0;
 },
 m16_r3ya1_entry() //  [R1]
         { []
         }
     {offset
       c3IiX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IiY; else goto c3IiZ;
       c3IiY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IiZ: // global
           (_c3IiU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IiU::I64 == 0) goto c3IiW; else goto c3IiV;
       c3IiW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IiV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IiU::I64;
           R2 = m15_r3ya0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m16_r3ya1_info" {
     m16_r3ya1_info:
         const m16_r3ya1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.45961194 UTC

[section ""data" . x7_r3ya2_closure" {
     x7_r3ya2_closure:
         const GHC.Types.C#_con_info;
         const 6;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.461317399 UTC

[section ""cstring" . m17_r3ya3_bytes" {
     m17_r3ya3_bytes:
         I8[] [66,69,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.46376842 UTC

[section ""data" . m18_r3ya4_closure" {
     m18_r3ya4_closure:
         const m18_r3ya4_info;
         const 0;
         const 0;
         const 0;
 },
 m18_r3ya4_entry() //  [R1]
         { []
         }
     {offset
       c3Ijg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ijh; else goto c3Iji;
       c3Ijh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iji: // global
           (_c3Ijd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ijd::I64 == 0) goto c3Ijf; else goto c3Ije;
       c3Ijf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ije: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ijd::I64;
           R2 = m17_r3ya3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m18_r3ya4_info" {
     m18_r3ya4_info:
         const m18_r3ya4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.468177709 UTC

[section ""data" . x8_r3ya5_closure" {
     x8_r3ya5_closure:
         const GHC.Types.C#_con_info;
         const 7;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.470460902 UTC

[section ""cstring" . m19_r3ya6_bytes" {
     m19_r3ya6_bytes:
         I8[] [66,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.472728358 UTC

[section ""data" . m20_r3ya7_closure" {
     m20_r3ya7_closure:
         const m20_r3ya7_info;
         const 0;
         const 0;
         const 0;
 },
 m20_r3ya7_entry() //  [R1]
         { []
         }
     {offset
       c3Ijz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IjA; else goto c3IjB;
       c3IjA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IjB: // global
           (_c3Ijw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ijw::I64 == 0) goto c3Ijy; else goto c3Ijx;
       c3Ijy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ijx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ijw::I64;
           R2 = m19_r3ya6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m20_r3ya7_info" {
     m20_r3ya7_info:
         const m20_r3ya7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.476315031 UTC

[section ""data" . x9_r3ya8_closure" {
     x9_r3ya8_closure:
         const GHC.Types.C#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.478111045 UTC

[section ""cstring" . m21_r3ya9_bytes" {
     m21_r3ya9_bytes:
         I8[] [72,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.48039769 UTC

[section ""data" . m22_r3yaa_closure" {
     m22_r3yaa_closure:
         const m22_r3yaa_info;
         const 0;
         const 0;
         const 0;
 },
 m22_r3yaa_entry() //  [R1]
         { []
         }
     {offset
       c3IjS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IjT; else goto c3IjU;
       c3IjT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IjU: // global
           (_c3IjP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IjP::I64 == 0) goto c3IjR; else goto c3IjQ;
       c3IjR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IjQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IjP::I64;
           R2 = m21_r3ya9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m22_r3yaa_info" {
     m22_r3yaa_info:
         const m22_r3yaa_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.484006983 UTC

[section ""data" . x10_r3yab_closure" {
     x10_r3yab_closure:
         const GHC.Types.C#_con_info;
         const 9;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.485707223 UTC

[section ""cstring" . m23_r3yac_bytes" {
     m23_r3yac_bytes:
         I8[] [76,70]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.487954598 UTC

[section ""data" . m24_r3yad_closure" {
     m24_r3yad_closure:
         const m24_r3yad_info;
         const 0;
         const 0;
         const 0;
 },
 m24_r3yad_entry() //  [R1]
         { []
         }
     {offset
       c3Ikb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ikc; else goto c3Ikd;
       c3Ikc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ikd: // global
           (_c3Ik8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ik8::I64 == 0) goto c3Ika; else goto c3Ik9;
       c3Ika: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ik9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ik8::I64;
           R2 = m23_r3yac_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m24_r3yad_info" {
     m24_r3yad_info:
         const m24_r3yad_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.491627976 UTC

[section ""data" . x11_r3yae_closure" {
     x11_r3yae_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.493926994 UTC

[section ""cstring" . m25_r3yaf_bytes" {
     m25_r3yaf_bytes:
         I8[] [86,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.496242253 UTC

[section ""data" . m26_r3yag_closure" {
     m26_r3yag_closure:
         const m26_r3yag_info;
         const 0;
         const 0;
         const 0;
 },
 m26_r3yag_entry() //  [R1]
         { []
         }
     {offset
       c3Iku: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ikv; else goto c3Ikw;
       c3Ikv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ikw: // global
           (_c3Ikr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ikr::I64 == 0) goto c3Ikt; else goto c3Iks;
       c3Ikt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Iks: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ikr::I64;
           R2 = m25_r3yaf_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m26_r3yag_info" {
     m26_r3yag_info:
         const m26_r3yag_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.50054434 UTC

[section ""data" . x12_r3yah_closure" {
     x12_r3yah_closure:
         const GHC.Types.C#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.502269415 UTC

[section ""cstring" . m27_r3yai_bytes" {
     m27_r3yai_bytes:
         I8[] [70,70]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.504634341 UTC

[section ""data" . m28_r3yaj_closure" {
     m28_r3yaj_closure:
         const m28_r3yaj_info;
         const 0;
         const 0;
         const 0;
 },
 m28_r3yaj_entry() //  [R1]
         { []
         }
     {offset
       c3IkN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IkO; else goto c3IkP;
       c3IkO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IkP: // global
           (_c3IkK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IkK::I64 == 0) goto c3IkM; else goto c3IkL;
       c3IkM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IkL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IkK::I64;
           R2 = m27_r3yai_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m28_r3yaj_info" {
     m28_r3yaj_info:
         const m28_r3yaj_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.508405989 UTC

[section ""data" . x13_r3yak_closure" {
     x13_r3yak_closure:
         const GHC.Types.C#_con_info;
         const 12;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.510356307 UTC

[section ""cstring" . m29_r3yal_bytes" {
     m29_r3yal_bytes:
         I8[] [67,82]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.512810102 UTC

[section ""data" . m30_r3yam_closure" {
     m30_r3yam_closure:
         const m30_r3yam_info;
         const 0;
         const 0;
         const 0;
 },
 m30_r3yam_entry() //  [R1]
         { []
         }
     {offset
       c3Il6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Il7; else goto c3Il8;
       c3Il7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Il8: // global
           (_c3Il3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Il3::I64 == 0) goto c3Il5; else goto c3Il4;
       c3Il5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Il4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Il3::I64;
           R2 = m29_r3yal_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m30_r3yam_info" {
     m30_r3yam_info:
         const m30_r3yam_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.516484141 UTC

[section ""data" . x14_r3yan_closure" {
     x14_r3yan_closure:
         const GHC.Types.C#_con_info;
         const 13;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.51824778 UTC

[section ""cstring" . m31_r3yao_bytes" {
     m31_r3yao_bytes:
         I8[] [83,73]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.520615226 UTC

[section ""data" . m32_r3yap_closure" {
     m32_r3yap_closure:
         const m32_r3yap_info;
         const 0;
         const 0;
         const 0;
 },
 m32_r3yap_entry() //  [R1]
         { []
         }
     {offset
       c3Ilp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ilq; else goto c3Ilr;
       c3Ilq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ilr: // global
           (_c3Ilm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ilm::I64 == 0) goto c3Ilo; else goto c3Iln;
       c3Ilo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Iln: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ilm::I64;
           R2 = m31_r3yao_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m32_r3yap_info" {
     m32_r3yap_info:
         const m32_r3yap_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.524784202 UTC

[section ""data" . x15_r3yaq_closure" {
     x15_r3yaq_closure:
         const GHC.Types.C#_con_info;
         const 15;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.526530968 UTC

[section ""cstring" . m33_r3yar_bytes" {
     m33_r3yar_bytes:
         I8[] [68,76,69]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.52965318 UTC

[section ""data" . m34_r3yas_closure" {
     m34_r3yas_closure:
         const m34_r3yas_info;
         const 0;
         const 0;
         const 0;
 },
 m34_r3yas_entry() //  [R1]
         { []
         }
     {offset
       c3IlI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IlJ; else goto c3IlK;
       c3IlJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IlK: // global
           (_c3IlF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IlF::I64 == 0) goto c3IlH; else goto c3IlG;
       c3IlH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IlG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IlF::I64;
           R2 = m33_r3yar_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m34_r3yas_info" {
     m34_r3yas_info:
         const m34_r3yas_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.533500897 UTC

[section ""data" . x16_r3yat_closure" {
     x16_r3yat_closure:
         const GHC.Types.C#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.53526339 UTC

[section ""cstring" . m35_r3yau_bytes" {
     m35_r3yau_bytes:
         I8[] [68,67,49]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.537789172 UTC

[section ""data" . m36_r3yav_closure" {
     m36_r3yav_closure:
         const m36_r3yav_info;
         const 0;
         const 0;
         const 0;
 },
 m36_r3yav_entry() //  [R1]
         { []
         }
     {offset
       c3Im1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Im2; else goto c3Im3;
       c3Im2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Im3: // global
           (_c3IlY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IlY::I64 == 0) goto c3Im0; else goto c3IlZ;
       c3Im0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IlZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IlY::I64;
           R2 = m35_r3yau_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m36_r3yav_info" {
     m36_r3yav_info:
         const m36_r3yav_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.542177709 UTC

[section ""data" . x17_r3yaw_closure" {
     x17_r3yaw_closure:
         const GHC.Types.C#_con_info;
         const 17;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.543875694 UTC

[section ""cstring" . m37_r3yax_bytes" {
     m37_r3yax_bytes:
         I8[] [68,67,50]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.546246519 UTC

[section ""data" . m38_r3yay_closure" {
     m38_r3yay_closure:
         const m38_r3yay_info;
         const 0;
         const 0;
         const 0;
 },
 m38_r3yay_entry() //  [R1]
         { []
         }
     {offset
       c3Imk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iml; else goto c3Imm;
       c3Iml: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Imm: // global
           (_c3Imh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Imh::I64 == 0) goto c3Imj; else goto c3Imi;
       c3Imj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Imi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Imh::I64;
           R2 = m37_r3yax_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m38_r3yay_info" {
     m38_r3yay_info:
         const m38_r3yay_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.550028678 UTC

[section ""data" . x18_r3yaz_closure" {
     x18_r3yaz_closure:
         const GHC.Types.C#_con_info;
         const 18;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.551681135 UTC

[section ""cstring" . m39_r3yaA_bytes" {
     m39_r3yaA_bytes:
         I8[] [68,67,51]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.554218712 UTC

[section ""data" . m40_r3yaB_closure" {
     m40_r3yaB_closure:
         const m40_r3yaB_info;
         const 0;
         const 0;
         const 0;
 },
 m40_r3yaB_entry() //  [R1]
         { []
         }
     {offset
       c3ImD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ImE; else goto c3ImF;
       c3ImE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ImF: // global
           (_c3ImA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ImA::I64 == 0) goto c3ImC; else goto c3ImB;
       c3ImC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ImB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ImA::I64;
           R2 = m39_r3yaA_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m40_r3yaB_info" {
     m40_r3yaB_info:
         const m40_r3yaB_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.557972269 UTC

[section ""data" . x19_r3yaC_closure" {
     x19_r3yaC_closure:
         const GHC.Types.C#_con_info;
         const 19;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.559520845 UTC

[section ""cstring" . m41_r3yaD_bytes" {
     m41_r3yaD_bytes:
         I8[] [68,67,52]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.562608469 UTC

[section ""data" . m42_r3yaE_closure" {
     m42_r3yaE_closure:
         const m42_r3yaE_info;
         const 0;
         const 0;
         const 0;
 },
 m42_r3yaE_entry() //  [R1]
         { []
         }
     {offset
       c3ImW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ImX; else goto c3ImY;
       c3ImX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ImY: // global
           (_c3ImT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ImT::I64 == 0) goto c3ImV; else goto c3ImU;
       c3ImV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ImU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ImT::I64;
           R2 = m41_r3yaD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m42_r3yaE_info" {
     m42_r3yaE_info:
         const m42_r3yaE_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.566428949 UTC

[section ""data" . x20_r3yaF_closure" {
     x20_r3yaF_closure:
         const GHC.Types.C#_con_info;
         const 20;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.568106638 UTC

[section ""cstring" . m43_r3yaG_bytes" {
     m43_r3yaG_bytes:
         I8[] [78,65,75]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.571134993 UTC

[section ""data" . m44_r3yaH_closure" {
     m44_r3yaH_closure:
         const m44_r3yaH_info;
         const 0;
         const 0;
         const 0;
 },
 m44_r3yaH_entry() //  [R1]
         { []
         }
     {offset
       c3Inf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ing; else goto c3Inh;
       c3Ing: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Inh: // global
           (_c3Inc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Inc::I64 == 0) goto c3Ine; else goto c3Ind;
       c3Ine: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ind: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Inc::I64;
           R2 = m43_r3yaG_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m44_r3yaH_info" {
     m44_r3yaH_info:
         const m44_r3yaH_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.574748463 UTC

[section ""data" . x21_r3yaI_closure" {
     x21_r3yaI_closure:
         const GHC.Types.C#_con_info;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.576448104 UTC

[section ""cstring" . m45_r3yaJ_bytes" {
     m45_r3yaJ_bytes:
         I8[] [83,89,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.578884612 UTC

[section ""data" . m46_r3yaK_closure" {
     m46_r3yaK_closure:
         const m46_r3yaK_info;
         const 0;
         const 0;
         const 0;
 },
 m46_r3yaK_entry() //  [R1]
         { []
         }
     {offset
       c3Iny: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Inz; else goto c3InA;
       c3Inz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3InA: // global
           (_c3Inv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Inv::I64 == 0) goto c3Inx; else goto c3Inw;
       c3Inx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Inw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Inv::I64;
           R2 = m45_r3yaJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m46_r3yaK_info" {
     m46_r3yaK_info:
         const m46_r3yaK_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.582569426 UTC

[section ""data" . x22_r3yaL_closure" {
     x22_r3yaL_closure:
         const GHC.Types.C#_con_info;
         const 22;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.584325708 UTC

[section ""cstring" . m47_r3yaM_bytes" {
     m47_r3yaM_bytes:
         I8[] [69,84,66]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.586776264 UTC

[section ""data" . m48_r3yaN_closure" {
     m48_r3yaN_closure:
         const m48_r3yaN_info;
         const 0;
         const 0;
         const 0;
 },
 m48_r3yaN_entry() //  [R1]
         { []
         }
     {offset
       c3InR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3InS; else goto c3InT;
       c3InS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3InT: // global
           (_c3InO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3InO::I64 == 0) goto c3InQ; else goto c3InP;
       c3InQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3InP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3InO::I64;
           R2 = m47_r3yaM_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m48_r3yaN_info" {
     m48_r3yaN_info:
         const m48_r3yaN_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.59052862 UTC

[section ""data" . x23_r3yaO_closure" {
     x23_r3yaO_closure:
         const GHC.Types.C#_con_info;
         const 23;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.592794346 UTC

[section ""cstring" . m49_r3yaP_bytes" {
     m49_r3yaP_bytes:
         I8[] [67,65,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.595861517 UTC

[section ""data" . m50_r3yaQ_closure" {
     m50_r3yaQ_closure:
         const m50_r3yaQ_info;
         const 0;
         const 0;
         const 0;
 },
 m50_r3yaQ_entry() //  [R1]
         { []
         }
     {offset
       c3Ioa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iob; else goto c3Ioc;
       c3Iob: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ioc: // global
           (_c3Io7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Io7::I64 == 0) goto c3Io9; else goto c3Io8;
       c3Io9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Io8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Io7::I64;
           R2 = m49_r3yaP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m50_r3yaQ_info" {
     m50_r3yaQ_info:
         const m50_r3yaQ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.599546457 UTC

[section ""data" . x24_r3yaR_closure" {
     x24_r3yaR_closure:
         const GHC.Types.C#_con_info;
         const 24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.601209886 UTC

[section ""cstring" . m51_r3yaS_bytes" {
     m51_r3yaS_bytes:
         I8[] [69,77]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.603641504 UTC

[section ""data" . m52_r3yaT_closure" {
     m52_r3yaT_closure:
         const m52_r3yaT_info;
         const 0;
         const 0;
         const 0;
 },
 m52_r3yaT_entry() //  [R1]
         { []
         }
     {offset
       c3Iot: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iou; else goto c3Iov;
       c3Iou: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iov: // global
           (_c3Ioq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ioq::I64 == 0) goto c3Ios; else goto c3Ior;
       c3Ios: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ior: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ioq::I64;
           R2 = m51_r3yaS_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m52_r3yaT_info" {
     m52_r3yaT_info:
         const m52_r3yaT_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.607580517 UTC

[section ""data" . x25_r3yaU_closure" {
     x25_r3yaU_closure:
         const GHC.Types.C#_con_info;
         const 25;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.609321966 UTC

[section ""cstring" . m53_r3yaV_bytes" {
     m53_r3yaV_bytes:
         I8[] [83,85,66]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.611677266 UTC

[section ""data" . m54_r3yaW_closure" {
     m54_r3yaW_closure:
         const m54_r3yaW_info;
         const 0;
         const 0;
         const 0;
 },
 m54_r3yaW_entry() //  [R1]
         { []
         }
     {offset
       c3IoM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IoN; else goto c3IoO;
       c3IoN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IoO: // global
           (_c3IoJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IoJ::I64 == 0) goto c3IoL; else goto c3IoK;
       c3IoL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IoK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IoJ::I64;
           R2 = m53_r3yaV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m54_r3yaW_info" {
     m54_r3yaW_info:
         const m54_r3yaW_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.615417245 UTC

[section ""data" . x26_r3yaX_closure" {
     x26_r3yaX_closure:
         const GHC.Types.C#_con_info;
         const 26;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.617082583 UTC

[section ""cstring" . m55_r3yaY_bytes" {
     m55_r3yaY_bytes:
         I8[] [69,83,67]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.619603436 UTC

[section ""data" . m56_r3yaZ_closure" {
     m56_r3yaZ_closure:
         const m56_r3yaZ_info;
         const 0;
         const 0;
         const 0;
 },
 m56_r3yaZ_entry() //  [R1]
         { []
         }
     {offset
       c3Ip5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ip6; else goto c3Ip7;
       c3Ip6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ip7: // global
           (_c3Ip2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ip2::I64 == 0) goto c3Ip4; else goto c3Ip3;
       c3Ip4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ip3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ip2::I64;
           R2 = m55_r3yaY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m56_r3yaZ_info" {
     m56_r3yaZ_info:
         const m56_r3yaZ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.623359393 UTC

[section ""data" . x27_r3yb0_closure" {
     x27_r3yb0_closure:
         const GHC.Types.C#_con_info;
         const 27;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.626234822 UTC

[section ""cstring" . m57_r3yb1_bytes" {
     m57_r3yb1_bytes:
         I8[] [70,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.628663943 UTC

[section ""data" . m58_r3yb2_closure" {
     m58_r3yb2_closure:
         const m58_r3yb2_info;
         const 0;
         const 0;
         const 0;
 },
 m58_r3yb2_entry() //  [R1]
         { []
         }
     {offset
       c3Ipo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ipp; else goto c3Ipq;
       c3Ipp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ipq: // global
           (_c3Ipl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ipl::I64 == 0) goto c3Ipn; else goto c3Ipm;
       c3Ipn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ipm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ipl::I64;
           R2 = m57_r3yb1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m58_r3yb2_info" {
     m58_r3yb2_info:
         const m58_r3yb2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.632414681 UTC

[section ""data" . x28_r3yb3_closure" {
     x28_r3yb3_closure:
         const GHC.Types.C#_con_info;
         const 28;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.634274444 UTC

[section ""cstring" . m59_r3yb4_bytes" {
     m59_r3yb4_bytes:
         I8[] [71,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.636578217 UTC

[section ""data" . m60_r3yb5_closure" {
     m60_r3yb5_closure:
         const m60_r3yb5_info;
         const 0;
         const 0;
         const 0;
 },
 m60_r3yb5_entry() //  [R1]
         { []
         }
     {offset
       c3IpH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IpI; else goto c3IpJ;
       c3IpI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IpJ: // global
           (_c3IpE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IpE::I64 == 0) goto c3IpG; else goto c3IpF;
       c3IpG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IpF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IpE::I64;
           R2 = m59_r3yb4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m60_r3yb5_info" {
     m60_r3yb5_info:
         const m60_r3yb5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.640489029 UTC

[section ""data" . x29_r3yb6_closure" {
     x29_r3yb6_closure:
         const GHC.Types.C#_con_info;
         const 29;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.642197214 UTC

[section ""cstring" . m61_r3yb7_bytes" {
     m61_r3yb7_bytes:
         I8[] [82,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.644573143 UTC

[section ""data" . m62_r3yb8_closure" {
     m62_r3yb8_closure:
         const m62_r3yb8_info;
         const 0;
         const 0;
         const 0;
 },
 m62_r3yb8_entry() //  [R1]
         { []
         }
     {offset
       c3Iq0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iq1; else goto c3Iq2;
       c3Iq1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iq2: // global
           (_c3IpX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IpX::I64 == 0) goto c3IpZ; else goto c3IpY;
       c3IpZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IpY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IpX::I64;
           R2 = m61_r3yb7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m62_r3yb8_info" {
     m62_r3yb8_info:
         const m62_r3yb8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.648239856 UTC

[section ""data" . x30_r3yb9_closure" {
     x30_r3yb9_closure:
         const GHC.Types.C#_con_info;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.650375378 UTC

[section ""cstring" . m63_r3yba_bytes" {
     m63_r3yba_bytes:
         I8[] [85,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.652746224 UTC

[section ""data" . m64_r3ybb_closure" {
     m64_r3ybb_closure:
         const m64_r3ybb_info;
         const 0;
         const 0;
         const 0;
 },
 m64_r3ybb_entry() //  [R1]
         { []
         }
     {offset
       c3Iqj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iqk; else goto c3Iql;
       c3Iqk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iql: // global
           (_c3Iqg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Iqg::I64 == 0) goto c3Iqi; else goto c3Iqh;
       c3Iqi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Iqh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Iqg::I64;
           R2 = m63_r3yba_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m64_r3ybb_info" {
     m64_r3ybb_info:
         const m64_r3ybb_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.657005157 UTC

[section ""data" . x31_r3ybc_closure" {
     x31_r3ybc_closure:
         const GHC.Types.C#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.658919192 UTC

[section ""cstring" . m65_r3ybd_bytes" {
     m65_r3ybd_bytes:
         I8[] [83,80]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.661366517 UTC

[section ""data" . m66_r3ybe_closure" {
     m66_r3ybe_closure:
         const m66_r3ybe_info;
         const 0;
         const 0;
         const 0;
 },
 m66_r3ybe_entry() //  [R1]
         { []
         }
     {offset
       c3IqC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IqD; else goto c3IqE;
       c3IqD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IqE: // global
           (_c3Iqz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Iqz::I64 == 0) goto c3IqB; else goto c3IqA;
       c3IqB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IqA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Iqz::I64;
           R2 = m65_r3ybd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m66_r3ybe_info" {
     m66_r3ybe_info:
         const m66_r3ybe_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.665026732 UTC

[section ""data" . x32_r3ybf_closure" {
     x32_r3ybf_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.666771565 UTC

[section ""cstring" . m67_r3ybg_bytes" {
     m67_r3ybg_bytes:
         I8[] [68,69,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.669092693 UTC

[section ""data" . m68_r3ybh_closure" {
     m68_r3ybh_closure:
         const m68_r3ybh_info;
         const 0;
         const 0;
         const 0;
 },
 m68_r3ybh_entry() //  [R1]
         { []
         }
     {offset
       c3IqV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IqW; else goto c3IqX;
       c3IqW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IqX: // global
           (_c3IqS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IqS::I64 == 0) goto c3IqU; else goto c3IqT;
       c3IqU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IqT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IqS::I64;
           R2 = m67_r3ybg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m68_r3ybh_info" {
     m68_r3ybh_info:
         const m68_r3ybh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.672722576 UTC

[section ""data" . x33_r3ybi_closure" {
     x33_r3ybi_closure:
         const GHC.Types.C#_con_info;
         const 127;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.674419425 UTC

[section ""data" . sat_s3Gfl_closure" {
     sat_s3Gfl_closure:
         const GHC.Types.I#_con_info;
         const 1114111;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.676141887 UTC

[section ""data" . sat_s3Gfm_closure" {
     sat_s3Gfm_closure:
         const :_con_info;
         const sat_s3Gfl_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.678932727 UTC

[section ""data" . lvl7_r3ybj_closure" {
     lvl7_r3ybj_closure:
         const lvl7_r3ybj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r3ybj_entry() //  [R1]
         { []
         }
     {offset
       c3Irf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Irg; else goto c3Irh;
       c3Irg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Irh: // global
           (_c3Irc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Irc::I64 == 0) goto c3Ire; else goto c3Ird;
       c3Ire: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ird: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Irc::I64;
           R3 = sat_s3Gfm_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r3ybj_info" {
     lvl7_r3ybj_info:
         const lvl7_r3ybj_entry;
         const 0;
         const 4294967317;
         const S3GvX_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.682840053 UTC

[section ""data" . lvl8_r3ybk_closure" {
     lvl8_r3ybk_closure:
         const GHC.Types.C#_con_info;
         const 34;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.684546331 UTC

[section ""data" . lvl9_r3ybl_closure" {
     lvl9_r3ybl_closure:
         const (,)_con_info;
         const lvl8_r3ybk_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.68668484 UTC

[section ""data" . lvl10_r3ybm_closure" {
     lvl10_r3ybm_closure:
         const GHC.Types.C#_con_info;
         const 39;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.689008892 UTC

[section ""data" . lvl11_r3ybn_closure" {
     lvl11_r3ybn_closure:
         const (,)_con_info;
         const lvl10_r3ybm_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.690831033 UTC

[section ""data" . lvl12_r3ybo_closure" {
     lvl12_r3ybo_closure:
         const GHC.Types.C#_con_info;
         const 92;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.692537178 UTC

[section ""data" . lvl13_r3ybp_closure" {
     lvl13_r3ybp_closure:
         const (,)_con_info;
         const lvl12_r3ybo_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.694346746 UTC

[section ""data" . lvl14_r3ybq_closure" {
     lvl14_r3ybq_closure:
         const (,)_con_info;
         const x8_r3ya5_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.696045513 UTC

[section ""data" . lvl15_r3ybr_closure" {
     lvl15_r3ybr_closure:
         const (,)_con_info;
         const x9_r3ya8_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.69790306 UTC

[section ""data" . lvl16_r3ybs_closure" {
     lvl16_r3ybs_closure:
         const (,)_con_info;
         const x13_r3yak_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.699617943 UTC

[section ""data" . lvl17_r3ybt_closure" {
     lvl17_r3ybt_closure:
         const (,)_con_info;
         const x11_r3yae_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.702272131 UTC

[section ""data" . lvl18_r3ybu_closure" {
     lvl18_r3ybu_closure:
         const (,)_con_info;
         const x14_r3yan_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.704454079 UTC

[section ""data" . lvl19_r3ybv_closure" {
     lvl19_r3ybv_closure:
         const (,)_con_info;
         const x10_r3yab_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.707125985 UTC

[section ""data" . lvl20_r3ybw_closure" {
     lvl20_r3ybw_closure:
         const (,)_con_info;
         const x12_r3yah_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.709741061 UTC

[section ""data" . lvl21_r3ybx_closure" {
     lvl21_r3ybx_closure:
         const (,)_con_info;
         const x2_r3y9N_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.712363469 UTC

[section ""data" . lvl22_r3yby_closure" {
     lvl22_r3yby_closure:
         const (,)_con_info;
         const x_r3y9H_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.715080119 UTC

[section ""data" . lvl23_r3ybz_closure" {
     lvl23_r3ybz_closure:
         const (,)_con_info;
         const x3_r3y9Q_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.717796856 UTC

[section ""data" . lvl24_r3ybA_closure" {
     lvl24_r3ybA_closure:
         const (,)_con_info;
         const x4_r3y9T_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.722057088 UTC

[section ""data" . lvl25_r3ybB_closure" {
     lvl25_r3ybB_closure:
         const (,)_con_info;
         const x5_r3y9W_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.724678417 UTC

[section ""data" . lvl26_r3ybC_closure" {
     lvl26_r3ybC_closure:
         const (,)_con_info;
         const x6_r3y9Z_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.727491392 UTC

[section ""data" . lvl27_r3ybD_closure" {
     lvl27_r3ybD_closure:
         const (,)_con_info;
         const x7_r3ya2_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.73009566 UTC

[section ""data" . lvl28_r3ybE_closure" {
     lvl28_r3ybE_closure:
         const (,)_con_info;
         const x1_r3y9K_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.732745848 UTC

[section ""data" . lvl29_r3ybF_closure" {
     lvl29_r3ybF_closure:
         const (,)_con_info;
         const x15_r3yaq_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.735415667 UTC

[section ""data" . lvl30_r3ybG_closure" {
     lvl30_r3ybG_closure:
         const (,)_con_info;
         const x16_r3yat_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.738140516 UTC

[section ""data" . lvl31_r3ybH_closure" {
     lvl31_r3ybH_closure:
         const (,)_con_info;
         const x17_r3yaw_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.740843015 UTC

[section ""data" . lvl32_r3ybI_closure" {
     lvl32_r3ybI_closure:
         const (,)_con_info;
         const x18_r3yaz_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.743840666 UTC

[section ""data" . lvl33_r3ybJ_closure" {
     lvl33_r3ybJ_closure:
         const (,)_con_info;
         const x19_r3yaC_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.7464332 UTC

[section ""data" . lvl34_r3ybK_closure" {
     lvl34_r3ybK_closure:
         const (,)_con_info;
         const x20_r3yaF_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.748986989 UTC

[section ""data" . lvl35_r3ybL_closure" {
     lvl35_r3ybL_closure:
         const (,)_con_info;
         const x21_r3yaI_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.752050174 UTC

[section ""data" . lvl36_r3ybM_closure" {
     lvl36_r3ybM_closure:
         const (,)_con_info;
         const x22_r3yaL_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.754636279 UTC

[section ""data" . lvl37_r3ybN_closure" {
     lvl37_r3ybN_closure:
         const (,)_con_info;
         const x23_r3yaO_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.757039183 UTC

[section ""data" . lvl38_r3ybO_closure" {
     lvl38_r3ybO_closure:
         const (,)_con_info;
         const x24_r3yaR_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.759597551 UTC

[section ""data" . lvl39_r3ybP_closure" {
     lvl39_r3ybP_closure:
         const (,)_con_info;
         const x25_r3yaU_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.762083163 UTC

[section ""data" . lvl40_r3ybQ_closure" {
     lvl40_r3ybQ_closure:
         const (,)_con_info;
         const x26_r3yaX_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.763841554 UTC

[section ""data" . lvl41_r3ybR_closure" {
     lvl41_r3ybR_closure:
         const (,)_con_info;
         const x27_r3yb0_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.765666506 UTC

[section ""data" . lvl42_r3ybS_closure" {
     lvl42_r3ybS_closure:
         const (,)_con_info;
         const x28_r3yb3_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.76744062 UTC

[section ""data" . lvl43_r3ybT_closure" {
     lvl43_r3ybT_closure:
         const (,)_con_info;
         const x29_r3yb6_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.769188847 UTC

[section ""data" . lvl44_r3ybU_closure" {
     lvl44_r3ybU_closure:
         const (,)_con_info;
         const x30_r3yb9_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.770965881 UTC

[section ""data" . lvl45_r3ybV_closure" {
     lvl45_r3ybV_closure:
         const (,)_con_info;
         const x31_r3ybc_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.774413241 UTC

[section ""data" . w1_r3ybW_closure" {
     w1_r3ybW_closure:
         const w1_r3ybW_info;
         const 0;
 },
 lvl116_s3Gfo_entry() //  [R1]
         { []
         }
     {offset
       c3Isb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Isc; else goto c3Isd;
       c3Isc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Isd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x1_r3y9K_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gfo_info" {
     lvl116_s3Gfo_info:
         const lvl116_s3Gfo_entry;
         const 1;
         const 16;
 },
 sat_s3Gfq_entry() //  [R1]
         { []
         }
     {offset
       c3Isj: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gfq_info" {
     sat_s3Gfq_info:
         const sat_s3Gfq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w1_r3ybW_entry() //  [R2]
         { []
         }
     {offset
       c3Isp: // global
           _s3Gfn::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Isq; else goto c3Isr;
       c3Isr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Ist; else goto c3Iss;
       c3Ist: // global
           HpAlloc = 40;
           goto c3Isq;
       c3Isq: // global
           R2 = _s3Gfn::P64;
           R1 = w1_r3ybW_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Iss: // global
           I64[Hp - 32] = lvl116_s3Gfo_info;
           P64[Hp - 16] = _s3Gfn::P64;
           I64[Hp - 8] = sat_s3Gfq_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3Ism_info;
           R3 = Hp - 7;
           R2 = m4_r3y9J_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w1_r3ybW_info" {
     w1_r3ybW_info:
         const w1_r3ybW_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+632;
 },
 _c3Ism() //  [R1]
         { []
         }
     {offset
       c3Ism: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Isw; else goto c3Isv;
       c3Isw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Isv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ism_info" {
     block_c3Ism_info:
         const _c3Ism;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.784478582 UTC

[section ""data" . w_r3ybX_closure" {
     w_r3ybX_closure:
         const w_r3ybX_info;
         const 0;
 },
 lvl116_s3Gfu_entry() //  [R1]
         { []
         }
     {offset
       c3It3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3It4; else goto c3It5;
       c3It4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3It5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x_r3y9H_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gfu_info" {
     lvl116_s3Gfu_info:
         const lvl116_s3Gfu_entry;
         const 1;
         const 16;
 },
 sat_s3Gfw_entry() //  [R1]
         { []
         }
     {offset
       c3Itb: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gfw_info" {
     sat_s3Gfw_info:
         const sat_s3Gfw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w_r3ybX_entry() //  [R2]
         { []
         }
     {offset
       c3Ith: // global
           _s3Gft::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Iti; else goto c3Itj;
       c3Itj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Itl; else goto c3Itk;
       c3Itl: // global
           HpAlloc = 40;
           goto c3Iti;
       c3Iti: // global
           R2 = _s3Gft::P64;
           R1 = w_r3ybX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Itk: // global
           I64[Hp - 32] = lvl116_s3Gfu_info;
           P64[Hp - 16] = _s3Gft::P64;
           I64[Hp - 8] = sat_s3Gfw_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3Ite_info;
           R3 = Hp - 7;
           R2 = m2_r3y9G_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w_r3ybX_info" {
     w_r3ybX_info:
         const w_r3ybX_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+648;
 },
 _c3Ite() //  [R1]
         { []
         }
     {offset
       c3Ite: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ito; else goto c3Itn;
       c3Ito: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Itn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ite_info" {
     block_c3Ite_info:
         const _c3Ite;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.794607864 UTC

[section ""data" . lvl46_r3ybY_closure" {
     lvl46_r3ybY_closure:
         const lvl46_r3ybY_info;
         const 0;
 },
 lvl46_r3ybY_entry() //  [R2]
         { []
         }
     {offset
       c3ItU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ItV; else goto c3ItW;
       c3ItV: // global
           R2 = R2;
           R1 = lvl46_r3ybY_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ItW: // global
           I64[Sp - 8] = block_c3ItR_info;
           R4 = R2;
           R3 = w1_r3ybW_closure+1;
           R2 = w_r3ybX_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl46_r3ybY_info" {
     lvl46_r3ybY_info:
         const lvl46_r3ybY_entry;
         const 0;
         const 124554051598;
         const 4294967301;
         const S3GvX_srt+640;
 },
 _c3ItR() //  [R1]
         { []
         }
     {offset
       c3ItR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ItZ; else goto c3ItY;
       c3ItZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ItY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ItR_info" {
     block_c3ItR_info:
         const _c3ItR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.801447813 UTC

[section ""data" . lvl47_r3ybZ_closure" {
     lvl47_r3ybZ_closure:
         const lvl47_r3ybZ_info;
         const 0;
 },
 lvl116_s3GfD_entry() //  [R1]
         { []
         }
     {offset
       c3Iuj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iuk; else goto c3Iul;
       c3Iuk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iul: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x2_r3y9N_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GfD_info" {
     lvl116_s3GfD_info:
         const lvl116_s3GfD_entry;
         const 1;
         const 16;
 },
 sat_s3GfF_entry() //  [R1]
         { []
         }
     {offset
       c3Iur: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GfF_info" {
     sat_s3GfF_info:
         const sat_s3GfF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl47_r3ybZ_entry() //  [R2]
         { []
         }
     {offset
       c3Iux: // global
           _s3GfC::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Iuy; else goto c3Iuz;
       c3Iuz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IuB; else goto c3IuA;
       c3IuB: // global
           HpAlloc = 40;
           goto c3Iuy;
       c3Iuy: // global
           R2 = _s3GfC::P64;
           R1 = lvl47_r3ybZ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IuA: // global
           I64[Hp - 32] = lvl116_s3GfD_info;
           P64[Hp - 16] = _s3GfC::P64;
           I64[Hp - 8] = sat_s3GfF_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3Iuu_info;
           R3 = Hp - 7;
           R2 = m6_r3y9M_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl47_r3ybZ_info" {
     lvl47_r3ybZ_info:
         const lvl47_r3ybZ_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+680;
 },
 _c3Iuu() //  [R1]
         { []
         }
     {offset
       c3Iuu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IuE; else goto c3IuD;
       c3IuE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IuD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Iuu_info" {
     block_c3Iuu_info:
         const _c3Iuu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.811457209 UTC

[section ""data" . lvl48_r3yc0_closure" {
     lvl48_r3yc0_closure:
         const lvl48_r3yc0_info;
         const 0;
 },
 lvl116_s3GfJ_entry() //  [R1]
         { []
         }
     {offset
       c3Ivb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ivc; else goto c3Ivd;
       c3Ivc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ivd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x3_r3y9Q_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GfJ_info" {
     lvl116_s3GfJ_info:
         const lvl116_s3GfJ_entry;
         const 1;
         const 16;
 },
 sat_s3GfL_entry() //  [R1]
         { []
         }
     {offset
       c3Ivj: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GfL_info" {
     sat_s3GfL_info:
         const sat_s3GfL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl48_r3yc0_entry() //  [R2]
         { []
         }
     {offset
       c3Ivp: // global
           _s3GfI::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ivq; else goto c3Ivr;
       c3Ivr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Ivt; else goto c3Ivs;
       c3Ivt: // global
           HpAlloc = 40;
           goto c3Ivq;
       c3Ivq: // global
           R2 = _s3GfI::P64;
           R1 = lvl48_r3yc0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ivs: // global
           I64[Hp - 32] = lvl116_s3GfJ_info;
           P64[Hp - 16] = _s3GfI::P64;
           I64[Hp - 8] = sat_s3GfL_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3Ivm_info;
           R3 = Hp - 7;
           R2 = m8_r3y9P_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl48_r3yc0_info" {
     lvl48_r3yc0_info:
         const lvl48_r3yc0_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+696;
 },
 _c3Ivm() //  [R1]
         { []
         }
     {offset
       c3Ivm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ivw; else goto c3Ivv;
       c3Ivw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ivv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ivm_info" {
     block_c3Ivm_info:
         const _c3Ivm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.821731031 UTC

[section ""data" . lvl49_r3yc1_closure" {
     lvl49_r3yc1_closure:
         const lvl49_r3yc1_info;
         const 0;
 },
 lvl116_s3GfP_entry() //  [R1]
         { []
         }
     {offset
       c3Iw3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iw4; else goto c3Iw5;
       c3Iw4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iw5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x4_r3y9T_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GfP_info" {
     lvl116_s3GfP_info:
         const lvl116_s3GfP_entry;
         const 1;
         const 16;
 },
 sat_s3GfR_entry() //  [R1]
         { []
         }
     {offset
       c3Iwb: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GfR_info" {
     sat_s3GfR_info:
         const sat_s3GfR_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl49_r3yc1_entry() //  [R2]
         { []
         }
     {offset
       c3Iwh: // global
           _s3GfO::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Iwi; else goto c3Iwj;
       c3Iwj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Iwl; else goto c3Iwk;
       c3Iwl: // global
           HpAlloc = 40;
           goto c3Iwi;
       c3Iwi: // global
           R2 = _s3GfO::P64;
           R1 = lvl49_r3yc1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Iwk: // global
           I64[Hp - 32] = lvl116_s3GfP_info;
           P64[Hp - 16] = _s3GfO::P64;
           I64[Hp - 8] = sat_s3GfR_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3Iwe_info;
           R3 = Hp - 7;
           R2 = m10_r3y9S_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl49_r3yc1_info" {
     lvl49_r3yc1_info:
         const lvl49_r3yc1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+712;
 },
 _c3Iwe() //  [R1]
         { []
         }
     {offset
       c3Iwe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Iwo; else goto c3Iwn;
       c3Iwo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Iwn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Iwe_info" {
     block_c3Iwe_info:
         const _c3Iwe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.831920487 UTC

[section ""data" . lvl50_r3yc2_closure" {
     lvl50_r3yc2_closure:
         const lvl50_r3yc2_info;
         const 0;
 },
 lvl116_s3GfV_entry() //  [R1]
         { []
         }
     {offset
       c3IwV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IwW; else goto c3IwX;
       c3IwW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IwX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x5_r3y9W_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GfV_info" {
     lvl116_s3GfV_info:
         const lvl116_s3GfV_entry;
         const 1;
         const 16;
 },
 sat_s3GfX_entry() //  [R1]
         { []
         }
     {offset
       c3Ix3: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GfX_info" {
     sat_s3GfX_info:
         const sat_s3GfX_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl50_r3yc2_entry() //  [R2]
         { []
         }
     {offset
       c3Ix9: // global
           _s3GfU::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ixa; else goto c3Ixb;
       c3Ixb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Ixd; else goto c3Ixc;
       c3Ixd: // global
           HpAlloc = 40;
           goto c3Ixa;
       c3Ixa: // global
           R2 = _s3GfU::P64;
           R1 = lvl50_r3yc2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ixc: // global
           I64[Hp - 32] = lvl116_s3GfV_info;
           P64[Hp - 16] = _s3GfU::P64;
           I64[Hp - 8] = sat_s3GfX_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3Ix6_info;
           R3 = Hp - 7;
           R2 = m12_r3y9V_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl50_r3yc2_info" {
     lvl50_r3yc2_info:
         const lvl50_r3yc2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+728;
 },
 _c3Ix6() //  [R1]
         { []
         }
     {offset
       c3Ix6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ixg; else goto c3Ixf;
       c3Ixg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ixf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ix6_info" {
     block_c3Ix6_info:
         const _c3Ix6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.842972386 UTC

[section ""data" . lvl51_r3yc3_closure" {
     lvl51_r3yc3_closure:
         const lvl51_r3yc3_info;
         const 0;
 },
 lvl116_s3Gg1_entry() //  [R1]
         { []
         }
     {offset
       c3IxN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IxO; else goto c3IxP;
       c3IxO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IxP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x6_r3y9Z_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gg1_info" {
     lvl116_s3Gg1_info:
         const lvl116_s3Gg1_entry;
         const 1;
         const 16;
 },
 sat_s3Gg3_entry() //  [R1]
         { []
         }
     {offset
       c3IxV: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gg3_info" {
     sat_s3Gg3_info:
         const sat_s3Gg3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl51_r3yc3_entry() //  [R2]
         { []
         }
     {offset
       c3Iy1: // global
           _s3Gg0::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Iy2; else goto c3Iy3;
       c3Iy3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Iy5; else goto c3Iy4;
       c3Iy5: // global
           HpAlloc = 40;
           goto c3Iy2;
       c3Iy2: // global
           R2 = _s3Gg0::P64;
           R1 = lvl51_r3yc3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Iy4: // global
           I64[Hp - 32] = lvl116_s3Gg1_info;
           P64[Hp - 16] = _s3Gg0::P64;
           I64[Hp - 8] = sat_s3Gg3_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IxY_info;
           R3 = Hp - 7;
           R2 = m14_r3y9Y_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl51_r3yc3_info" {
     lvl51_r3yc3_info:
         const lvl51_r3yc3_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+744;
 },
 _c3IxY() //  [R1]
         { []
         }
     {offset
       c3IxY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Iy8; else goto c3Iy7;
       c3Iy8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Iy7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IxY_info" {
     block_c3IxY_info:
         const _c3IxY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.854082029 UTC

[section ""data" . lvl52_r3yc4_closure" {
     lvl52_r3yc4_closure:
         const lvl52_r3yc4_info;
         const 0;
 },
 lvl116_s3Gg7_entry() //  [R1]
         { []
         }
     {offset
       c3IyF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IyG; else goto c3IyH;
       c3IyG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IyH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x7_r3ya2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gg7_info" {
     lvl116_s3Gg7_info:
         const lvl116_s3Gg7_entry;
         const 1;
         const 16;
 },
 sat_s3Gg9_entry() //  [R1]
         { []
         }
     {offset
       c3IyN: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gg9_info" {
     sat_s3Gg9_info:
         const sat_s3Gg9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl52_r3yc4_entry() //  [R2]
         { []
         }
     {offset
       c3IyT: // global
           _s3Gg6::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IyU; else goto c3IyV;
       c3IyV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IyX; else goto c3IyW;
       c3IyX: // global
           HpAlloc = 40;
           goto c3IyU;
       c3IyU: // global
           R2 = _s3Gg6::P64;
           R1 = lvl52_r3yc4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IyW: // global
           I64[Hp - 32] = lvl116_s3Gg7_info;
           P64[Hp - 16] = _s3Gg6::P64;
           I64[Hp - 8] = sat_s3Gg9_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IyQ_info;
           R3 = Hp - 7;
           R2 = m16_r3ya1_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl52_r3yc4_info" {
     lvl52_r3yc4_info:
         const lvl52_r3yc4_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+760;
 },
 _c3IyQ() //  [R1]
         { []
         }
     {offset
       c3IyQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Iz0; else goto c3IyZ;
       c3Iz0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IyZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IyQ_info" {
     block_c3IyQ_info:
         const _c3IyQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.86454819 UTC

[section ""data" . lvl53_r3yc5_closure" {
     lvl53_r3yc5_closure:
         const lvl53_r3yc5_info;
         const 0;
 },
 lvl116_s3Ggd_entry() //  [R1]
         { []
         }
     {offset
       c3Izx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Izy; else goto c3Izz;
       c3Izy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Izz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x8_r3ya5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Ggd_info" {
     lvl116_s3Ggd_info:
         const lvl116_s3Ggd_entry;
         const 1;
         const 16;
 },
 sat_s3Ggf_entry() //  [R1]
         { []
         }
     {offset
       c3IzF: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ggf_info" {
     sat_s3Ggf_info:
         const sat_s3Ggf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl53_r3yc5_entry() //  [R2]
         { []
         }
     {offset
       c3IzL: // global
           _s3Ggc::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IzM; else goto c3IzN;
       c3IzN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IzP; else goto c3IzO;
       c3IzP: // global
           HpAlloc = 40;
           goto c3IzM;
       c3IzM: // global
           R2 = _s3Ggc::P64;
           R1 = lvl53_r3yc5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IzO: // global
           I64[Hp - 32] = lvl116_s3Ggd_info;
           P64[Hp - 16] = _s3Ggc::P64;
           I64[Hp - 8] = sat_s3Ggf_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IzI_info;
           R3 = Hp - 7;
           R2 = m18_r3ya4_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl53_r3yc5_info" {
     lvl53_r3yc5_info:
         const lvl53_r3yc5_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+776;
 },
 _c3IzI() //  [R1]
         { []
         }
     {offset
       c3IzI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IzS; else goto c3IzR;
       c3IzS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IzR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IzI_info" {
     block_c3IzI_info:
         const _c3IzI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.875355199 UTC

[section ""data" . lvl54_r3yc6_closure" {
     lvl54_r3yc6_closure:
         const lvl54_r3yc6_info;
         const 0;
 },
 lvl116_s3Ggj_entry() //  [R1]
         { []
         }
     {offset
       c3IAp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IAq; else goto c3IAr;
       c3IAq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IAr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x9_r3ya8_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Ggj_info" {
     lvl116_s3Ggj_info:
         const lvl116_s3Ggj_entry;
         const 1;
         const 16;
 },
 sat_s3Ggl_entry() //  [R1]
         { []
         }
     {offset
       c3IAx: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ggl_info" {
     sat_s3Ggl_info:
         const sat_s3Ggl_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl54_r3yc6_entry() //  [R2]
         { []
         }
     {offset
       c3IAD: // global
           _s3Ggi::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IAE; else goto c3IAF;
       c3IAF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IAH; else goto c3IAG;
       c3IAH: // global
           HpAlloc = 40;
           goto c3IAE;
       c3IAE: // global
           R2 = _s3Ggi::P64;
           R1 = lvl54_r3yc6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IAG: // global
           I64[Hp - 32] = lvl116_s3Ggj_info;
           P64[Hp - 16] = _s3Ggi::P64;
           I64[Hp - 8] = sat_s3Ggl_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IAA_info;
           R3 = Hp - 7;
           R2 = m20_r3ya7_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl54_r3yc6_info" {
     lvl54_r3yc6_info:
         const lvl54_r3yc6_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+792;
 },
 _c3IAA() //  [R1]
         { []
         }
     {offset
       c3IAA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IAK; else goto c3IAJ;
       c3IAK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IAJ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IAA_info" {
     block_c3IAA_info:
         const _c3IAA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.885595006 UTC

[section ""data" . lvl55_r3yc7_closure" {
     lvl55_r3yc7_closure:
         const lvl55_r3yc7_info;
         const 0;
 },
 lvl116_s3Ggp_entry() //  [R1]
         { []
         }
     {offset
       c3IBh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IBi; else goto c3IBj;
       c3IBi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IBj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x10_r3yab_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Ggp_info" {
     lvl116_s3Ggp_info:
         const lvl116_s3Ggp_entry;
         const 1;
         const 16;
 },
 sat_s3Ggr_entry() //  [R1]
         { []
         }
     {offset
       c3IBp: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ggr_info" {
     sat_s3Ggr_info:
         const sat_s3Ggr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl55_r3yc7_entry() //  [R2]
         { []
         }
     {offset
       c3IBv: // global
           _s3Ggo::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IBw; else goto c3IBx;
       c3IBx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IBz; else goto c3IBy;
       c3IBz: // global
           HpAlloc = 40;
           goto c3IBw;
       c3IBw: // global
           R2 = _s3Ggo::P64;
           R1 = lvl55_r3yc7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IBy: // global
           I64[Hp - 32] = lvl116_s3Ggp_info;
           P64[Hp - 16] = _s3Ggo::P64;
           I64[Hp - 8] = sat_s3Ggr_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IBs_info;
           R3 = Hp - 7;
           R2 = m22_r3yaa_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl55_r3yc7_info" {
     lvl55_r3yc7_info:
         const lvl55_r3yc7_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+808;
 },
 _c3IBs() //  [R1]
         { []
         }
     {offset
       c3IBs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IBC; else goto c3IBB;
       c3IBC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IBB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IBs_info" {
     block_c3IBs_info:
         const _c3IBs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.895693364 UTC

[section ""data" . lvl56_r3yc8_closure" {
     lvl56_r3yc8_closure:
         const lvl56_r3yc8_info;
         const 0;
 },
 lvl116_s3Ggv_entry() //  [R1]
         { []
         }
     {offset
       c3IC9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ICa; else goto c3ICb;
       c3ICa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ICb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x11_r3yae_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Ggv_info" {
     lvl116_s3Ggv_info:
         const lvl116_s3Ggv_entry;
         const 1;
         const 16;
 },
 sat_s3Ggx_entry() //  [R1]
         { []
         }
     {offset
       c3ICh: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ggx_info" {
     sat_s3Ggx_info:
         const sat_s3Ggx_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl56_r3yc8_entry() //  [R2]
         { []
         }
     {offset
       c3ICn: // global
           _s3Ggu::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ICo; else goto c3ICp;
       c3ICp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ICr; else goto c3ICq;
       c3ICr: // global
           HpAlloc = 40;
           goto c3ICo;
       c3ICo: // global
           R2 = _s3Ggu::P64;
           R1 = lvl56_r3yc8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ICq: // global
           I64[Hp - 32] = lvl116_s3Ggv_info;
           P64[Hp - 16] = _s3Ggu::P64;
           I64[Hp - 8] = sat_s3Ggx_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ICk_info;
           R3 = Hp - 7;
           R2 = m24_r3yad_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl56_r3yc8_info" {
     lvl56_r3yc8_info:
         const lvl56_r3yc8_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+824;
 },
 _c3ICk() //  [R1]
         { []
         }
     {offset
       c3ICk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ICu; else goto c3ICt;
       c3ICu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ICt: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ICk_info" {
     block_c3ICk_info:
         const _c3ICk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.905667514 UTC

[section ""data" . lvl57_r3yc9_closure" {
     lvl57_r3yc9_closure:
         const lvl57_r3yc9_info;
         const 0;
 },
 lvl116_s3GgB_entry() //  [R1]
         { []
         }
     {offset
       c3ID1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ID2; else goto c3ID3;
       c3ID2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ID3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x12_r3yah_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GgB_info" {
     lvl116_s3GgB_info:
         const lvl116_s3GgB_entry;
         const 1;
         const 16;
 },
 sat_s3GgD_entry() //  [R1]
         { []
         }
     {offset
       c3ID9: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GgD_info" {
     sat_s3GgD_info:
         const sat_s3GgD_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl57_r3yc9_entry() //  [R2]
         { []
         }
     {offset
       c3IDf: // global
           _s3GgA::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IDg; else goto c3IDh;
       c3IDh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IDj; else goto c3IDi;
       c3IDj: // global
           HpAlloc = 40;
           goto c3IDg;
       c3IDg: // global
           R2 = _s3GgA::P64;
           R1 = lvl57_r3yc9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IDi: // global
           I64[Hp - 32] = lvl116_s3GgB_info;
           P64[Hp - 16] = _s3GgA::P64;
           I64[Hp - 8] = sat_s3GgD_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IDc_info;
           R3 = Hp - 7;
           R2 = m26_r3yag_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl57_r3yc9_info" {
     lvl57_r3yc9_info:
         const lvl57_r3yc9_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+840;
 },
 _c3IDc() //  [R1]
         { []
         }
     {offset
       c3IDc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IDm; else goto c3IDl;
       c3IDm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IDl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IDc_info" {
     block_c3IDc_info:
         const _c3IDc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.916213796 UTC

[section ""data" . lvl58_r3yca_closure" {
     lvl58_r3yca_closure:
         const lvl58_r3yca_info;
         const 0;
 },
 lvl116_s3GgH_entry() //  [R1]
         { []
         }
     {offset
       c3IDT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IDU; else goto c3IDV;
       c3IDU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IDV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x13_r3yak_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GgH_info" {
     lvl116_s3GgH_info:
         const lvl116_s3GgH_entry;
         const 1;
         const 16;
 },
 sat_s3GgJ_entry() //  [R1]
         { []
         }
     {offset
       c3IE1: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GgJ_info" {
     sat_s3GgJ_info:
         const sat_s3GgJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl58_r3yca_entry() //  [R2]
         { []
         }
     {offset
       c3IE7: // global
           _s3GgG::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IE8; else goto c3IE9;
       c3IE9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IEb; else goto c3IEa;
       c3IEb: // global
           HpAlloc = 40;
           goto c3IE8;
       c3IE8: // global
           R2 = _s3GgG::P64;
           R1 = lvl58_r3yca_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IEa: // global
           I64[Hp - 32] = lvl116_s3GgH_info;
           P64[Hp - 16] = _s3GgG::P64;
           I64[Hp - 8] = sat_s3GgJ_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IE4_info;
           R3 = Hp - 7;
           R2 = m28_r3yaj_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl58_r3yca_info" {
     lvl58_r3yca_info:
         const lvl58_r3yca_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+856;
 },
 _c3IE4() //  [R1]
         { []
         }
     {offset
       c3IE4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IEe; else goto c3IEd;
       c3IEe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IEd: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IE4_info" {
     block_c3IE4_info:
         const _c3IE4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.926260168 UTC

[section ""data" . lvl59_r3ycb_closure" {
     lvl59_r3ycb_closure:
         const lvl59_r3ycb_info;
         const 0;
 },
 lvl116_s3GgN_entry() //  [R1]
         { []
         }
     {offset
       c3IEL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IEM; else goto c3IEN;
       c3IEM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IEN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x14_r3yan_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GgN_info" {
     lvl116_s3GgN_info:
         const lvl116_s3GgN_entry;
         const 1;
         const 16;
 },
 sat_s3GgP_entry() //  [R1]
         { []
         }
     {offset
       c3IET: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GgP_info" {
     sat_s3GgP_info:
         const sat_s3GgP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl59_r3ycb_entry() //  [R2]
         { []
         }
     {offset
       c3IEZ: // global
           _s3GgM::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IF0; else goto c3IF1;
       c3IF1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IF3; else goto c3IF2;
       c3IF3: // global
           HpAlloc = 40;
           goto c3IF0;
       c3IF0: // global
           R2 = _s3GgM::P64;
           R1 = lvl59_r3ycb_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IF2: // global
           I64[Hp - 32] = lvl116_s3GgN_info;
           P64[Hp - 16] = _s3GgM::P64;
           I64[Hp - 8] = sat_s3GgP_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IEW_info;
           R3 = Hp - 7;
           R2 = m30_r3yam_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl59_r3ycb_info" {
     lvl59_r3ycb_info:
         const lvl59_r3ycb_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+872;
 },
 _c3IEW() //  [R1]
         { []
         }
     {offset
       c3IEW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IF6; else goto c3IF5;
       c3IF6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IF5: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IEW_info" {
     block_c3IEW_info:
         const _c3IEW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.935894356 UTC

[section ""data" . lvl60_r3ycc_closure" {
     lvl60_r3ycc_closure:
         const lvl60_r3ycc_info;
         const 0;
 },
 lvl116_s3GgT_entry() //  [R1]
         { []
         }
     {offset
       c3IFD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IFE; else goto c3IFF;
       c3IFE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IFF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x15_r3yaq_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GgT_info" {
     lvl116_s3GgT_info:
         const lvl116_s3GgT_entry;
         const 1;
         const 16;
 },
 sat_s3GgV_entry() //  [R1]
         { []
         }
     {offset
       c3IFL: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GgV_info" {
     sat_s3GgV_info:
         const sat_s3GgV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl60_r3ycc_entry() //  [R2]
         { []
         }
     {offset
       c3IFR: // global
           _s3GgS::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IFS; else goto c3IFT;
       c3IFT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IFV; else goto c3IFU;
       c3IFV: // global
           HpAlloc = 40;
           goto c3IFS;
       c3IFS: // global
           R2 = _s3GgS::P64;
           R1 = lvl60_r3ycc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IFU: // global
           I64[Hp - 32] = lvl116_s3GgT_info;
           P64[Hp - 16] = _s3GgS::P64;
           I64[Hp - 8] = sat_s3GgV_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IFO_info;
           R3 = Hp - 7;
           R2 = m32_r3yap_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl60_r3ycc_info" {
     lvl60_r3ycc_info:
         const lvl60_r3ycc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+888;
 },
 _c3IFO() //  [R1]
         { []
         }
     {offset
       c3IFO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IFY; else goto c3IFX;
       c3IFY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IFX: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IFO_info" {
     block_c3IFO_info:
         const _c3IFO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.946263357 UTC

[section ""data" . lvl61_r3ycd_closure" {
     lvl61_r3ycd_closure:
         const lvl61_r3ycd_info;
         const 0;
 },
 lvl116_s3GgZ_entry() //  [R1]
         { []
         }
     {offset
       c3IGv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IGw; else goto c3IGx;
       c3IGw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IGx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x16_r3yat_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GgZ_info" {
     lvl116_s3GgZ_info:
         const lvl116_s3GgZ_entry;
         const 1;
         const 16;
 },
 sat_s3Gh1_entry() //  [R1]
         { []
         }
     {offset
       c3IGD: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gh1_info" {
     sat_s3Gh1_info:
         const sat_s3Gh1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl61_r3ycd_entry() //  [R2]
         { []
         }
     {offset
       c3IGJ: // global
           _s3GgY::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IGK; else goto c3IGL;
       c3IGL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IGN; else goto c3IGM;
       c3IGN: // global
           HpAlloc = 40;
           goto c3IGK;
       c3IGK: // global
           R2 = _s3GgY::P64;
           R1 = lvl61_r3ycd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IGM: // global
           I64[Hp - 32] = lvl116_s3GgZ_info;
           P64[Hp - 16] = _s3GgY::P64;
           I64[Hp - 8] = sat_s3Gh1_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IGG_info;
           R3 = Hp - 7;
           R2 = m34_r3yas_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl61_r3ycd_info" {
     lvl61_r3ycd_info:
         const lvl61_r3ycd_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+904;
 },
 _c3IGG() //  [R1]
         { []
         }
     {offset
       c3IGG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IGQ; else goto c3IGP;
       c3IGQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IGP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IGG_info" {
     block_c3IGG_info:
         const _c3IGG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.956752845 UTC

[section ""data" . lvl62_r3yce_closure" {
     lvl62_r3yce_closure:
         const lvl62_r3yce_info;
         const 0;
 },
 lvl116_s3Gh5_entry() //  [R1]
         { []
         }
     {offset
       c3IHn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IHo; else goto c3IHp;
       c3IHo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IHp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x17_r3yaw_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gh5_info" {
     lvl116_s3Gh5_info:
         const lvl116_s3Gh5_entry;
         const 1;
         const 16;
 },
 sat_s3Gh7_entry() //  [R1]
         { []
         }
     {offset
       c3IHv: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gh7_info" {
     sat_s3Gh7_info:
         const sat_s3Gh7_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl62_r3yce_entry() //  [R2]
         { []
         }
     {offset
       c3IHB: // global
           _s3Gh4::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IHC; else goto c3IHD;
       c3IHD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IHF; else goto c3IHE;
       c3IHF: // global
           HpAlloc = 40;
           goto c3IHC;
       c3IHC: // global
           R2 = _s3Gh4::P64;
           R1 = lvl62_r3yce_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IHE: // global
           I64[Hp - 32] = lvl116_s3Gh5_info;
           P64[Hp - 16] = _s3Gh4::P64;
           I64[Hp - 8] = sat_s3Gh7_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IHy_info;
           R3 = Hp - 7;
           R2 = m36_r3yav_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl62_r3yce_info" {
     lvl62_r3yce_info:
         const lvl62_r3yce_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+920;
 },
 _c3IHy() //  [R1]
         { []
         }
     {offset
       c3IHy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IHI; else goto c3IHH;
       c3IHI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IHH: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IHy_info" {
     block_c3IHy_info:
         const _c3IHy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.966904177 UTC

[section ""data" . lvl63_r3ycf_closure" {
     lvl63_r3ycf_closure:
         const lvl63_r3ycf_info;
         const 0;
 },
 lvl116_s3Ghb_entry() //  [R1]
         { []
         }
     {offset
       c3IIf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IIg; else goto c3IIh;
       c3IIg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IIh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x18_r3yaz_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Ghb_info" {
     lvl116_s3Ghb_info:
         const lvl116_s3Ghb_entry;
         const 1;
         const 16;
 },
 sat_s3Ghd_entry() //  [R1]
         { []
         }
     {offset
       c3IIn: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ghd_info" {
     sat_s3Ghd_info:
         const sat_s3Ghd_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl63_r3ycf_entry() //  [R2]
         { []
         }
     {offset
       c3IIt: // global
           _s3Gha::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IIu; else goto c3IIv;
       c3IIv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IIx; else goto c3IIw;
       c3IIx: // global
           HpAlloc = 40;
           goto c3IIu;
       c3IIu: // global
           R2 = _s3Gha::P64;
           R1 = lvl63_r3ycf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IIw: // global
           I64[Hp - 32] = lvl116_s3Ghb_info;
           P64[Hp - 16] = _s3Gha::P64;
           I64[Hp - 8] = sat_s3Ghd_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IIq_info;
           R3 = Hp - 7;
           R2 = m38_r3yay_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl63_r3ycf_info" {
     lvl63_r3ycf_info:
         const lvl63_r3ycf_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+936;
 },
 _c3IIq() //  [R1]
         { []
         }
     {offset
       c3IIq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IIA; else goto c3IIz;
       c3IIA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IIz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IIq_info" {
     block_c3IIq_info:
         const _c3IIq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.976639602 UTC

[section ""data" . lvl64_r3ycg_closure" {
     lvl64_r3ycg_closure:
         const lvl64_r3ycg_info;
         const 0;
 },
 lvl116_s3Ghh_entry() //  [R1]
         { []
         }
     {offset
       c3IJ7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IJ8; else goto c3IJ9;
       c3IJ8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IJ9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x19_r3yaC_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Ghh_info" {
     lvl116_s3Ghh_info:
         const lvl116_s3Ghh_entry;
         const 1;
         const 16;
 },
 sat_s3Ghj_entry() //  [R1]
         { []
         }
     {offset
       c3IJf: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ghj_info" {
     sat_s3Ghj_info:
         const sat_s3Ghj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl64_r3ycg_entry() //  [R2]
         { []
         }
     {offset
       c3IJl: // global
           _s3Ghg::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IJm; else goto c3IJn;
       c3IJn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IJp; else goto c3IJo;
       c3IJp: // global
           HpAlloc = 40;
           goto c3IJm;
       c3IJm: // global
           R2 = _s3Ghg::P64;
           R1 = lvl64_r3ycg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IJo: // global
           I64[Hp - 32] = lvl116_s3Ghh_info;
           P64[Hp - 16] = _s3Ghg::P64;
           I64[Hp - 8] = sat_s3Ghj_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IJi_info;
           R3 = Hp - 7;
           R2 = m40_r3yaB_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl64_r3ycg_info" {
     lvl64_r3ycg_info:
         const lvl64_r3ycg_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+952;
 },
 _c3IJi() //  [R1]
         { []
         }
     {offset
       c3IJi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IJs; else goto c3IJr;
       c3IJs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IJr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IJi_info" {
     block_c3IJi_info:
         const _c3IJi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.986310208 UTC

[section ""data" . lvl65_r3ych_closure" {
     lvl65_r3ych_closure:
         const lvl65_r3ych_info;
         const 0;
 },
 lvl116_s3Ghn_entry() //  [R1]
         { []
         }
     {offset
       c3IJZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IK0; else goto c3IK1;
       c3IK0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IK1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x20_r3yaF_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Ghn_info" {
     lvl116_s3Ghn_info:
         const lvl116_s3Ghn_entry;
         const 1;
         const 16;
 },
 sat_s3Ghp_entry() //  [R1]
         { []
         }
     {offset
       c3IK7: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ghp_info" {
     sat_s3Ghp_info:
         const sat_s3Ghp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl65_r3ych_entry() //  [R2]
         { []
         }
     {offset
       c3IKd: // global
           _s3Ghm::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IKe; else goto c3IKf;
       c3IKf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IKh; else goto c3IKg;
       c3IKh: // global
           HpAlloc = 40;
           goto c3IKe;
       c3IKe: // global
           R2 = _s3Ghm::P64;
           R1 = lvl65_r3ych_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IKg: // global
           I64[Hp - 32] = lvl116_s3Ghn_info;
           P64[Hp - 16] = _s3Ghm::P64;
           I64[Hp - 8] = sat_s3Ghp_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IKa_info;
           R3 = Hp - 7;
           R2 = m42_r3yaE_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl65_r3ych_info" {
     lvl65_r3ych_info:
         const lvl65_r3ych_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+968;
 },
 _c3IKa() //  [R1]
         { []
         }
     {offset
       c3IKa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IKk; else goto c3IKj;
       c3IKk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IKj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IKa_info" {
     block_c3IKa_info:
         const _c3IKa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:23.996622245 UTC

[section ""data" . lvl66_r3yci_closure" {
     lvl66_r3yci_closure:
         const lvl66_r3yci_info;
         const 0;
 },
 lvl116_s3Ght_entry() //  [R1]
         { []
         }
     {offset
       c3IKR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IKS; else goto c3IKT;
       c3IKS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IKT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x21_r3yaI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Ght_info" {
     lvl116_s3Ght_info:
         const lvl116_s3Ght_entry;
         const 1;
         const 16;
 },
 sat_s3Ghv_entry() //  [R1]
         { []
         }
     {offset
       c3IKZ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ghv_info" {
     sat_s3Ghv_info:
         const sat_s3Ghv_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl66_r3yci_entry() //  [R2]
         { []
         }
     {offset
       c3IL5: // global
           _s3Ghs::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IL6; else goto c3IL7;
       c3IL7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IL9; else goto c3IL8;
       c3IL9: // global
           HpAlloc = 40;
           goto c3IL6;
       c3IL6: // global
           R2 = _s3Ghs::P64;
           R1 = lvl66_r3yci_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IL8: // global
           I64[Hp - 32] = lvl116_s3Ght_info;
           P64[Hp - 16] = _s3Ghs::P64;
           I64[Hp - 8] = sat_s3Ghv_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IL2_info;
           R3 = Hp - 7;
           R2 = m44_r3yaH_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl66_r3yci_info" {
     lvl66_r3yci_info:
         const lvl66_r3yci_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+984;
 },
 _c3IL2() //  [R1]
         { []
         }
     {offset
       c3IL2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ILc; else goto c3ILb;
       c3ILc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ILb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IL2_info" {
     block_c3IL2_info:
         const _c3IL2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.006449108 UTC

[section ""data" . lvl67_r3ycj_closure" {
     lvl67_r3ycj_closure:
         const lvl67_r3ycj_info;
         const 0;
 },
 lvl116_s3Ghz_entry() //  [R1]
         { []
         }
     {offset
       c3ILJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ILK; else goto c3ILL;
       c3ILK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ILL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x22_r3yaL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Ghz_info" {
     lvl116_s3Ghz_info:
         const lvl116_s3Ghz_entry;
         const 1;
         const 16;
 },
 sat_s3GhB_entry() //  [R1]
         { []
         }
     {offset
       c3ILR: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GhB_info" {
     sat_s3GhB_info:
         const sat_s3GhB_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl67_r3ycj_entry() //  [R2]
         { []
         }
     {offset
       c3ILX: // global
           _s3Ghy::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ILY; else goto c3ILZ;
       c3ILZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IM1; else goto c3IM0;
       c3IM1: // global
           HpAlloc = 40;
           goto c3ILY;
       c3ILY: // global
           R2 = _s3Ghy::P64;
           R1 = lvl67_r3ycj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IM0: // global
           I64[Hp - 32] = lvl116_s3Ghz_info;
           P64[Hp - 16] = _s3Ghy::P64;
           I64[Hp - 8] = sat_s3GhB_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ILU_info;
           R3 = Hp - 7;
           R2 = m46_r3yaK_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl67_r3ycj_info" {
     lvl67_r3ycj_info:
         const lvl67_r3ycj_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1000;
 },
 _c3ILU() //  [R1]
         { []
         }
     {offset
       c3ILU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IM4; else goto c3IM3;
       c3IM4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IM3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ILU_info" {
     block_c3ILU_info:
         const _c3ILU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.016104214 UTC

[section ""data" . lvl68_r3yck_closure" {
     lvl68_r3yck_closure:
         const lvl68_r3yck_info;
         const 0;
 },
 lvl116_s3GhF_entry() //  [R1]
         { []
         }
     {offset
       c3IMB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IMC; else goto c3IMD;
       c3IMC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IMD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x23_r3yaO_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GhF_info" {
     lvl116_s3GhF_info:
         const lvl116_s3GhF_entry;
         const 1;
         const 16;
 },
 sat_s3GhH_entry() //  [R1]
         { []
         }
     {offset
       c3IMJ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GhH_info" {
     sat_s3GhH_info:
         const sat_s3GhH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl68_r3yck_entry() //  [R2]
         { []
         }
     {offset
       c3IMP: // global
           _s3GhE::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IMQ; else goto c3IMR;
       c3IMR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IMT; else goto c3IMS;
       c3IMT: // global
           HpAlloc = 40;
           goto c3IMQ;
       c3IMQ: // global
           R2 = _s3GhE::P64;
           R1 = lvl68_r3yck_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IMS: // global
           I64[Hp - 32] = lvl116_s3GhF_info;
           P64[Hp - 16] = _s3GhE::P64;
           I64[Hp - 8] = sat_s3GhH_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IMM_info;
           R3 = Hp - 7;
           R2 = m48_r3yaN_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl68_r3yck_info" {
     lvl68_r3yck_info:
         const lvl68_r3yck_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1016;
 },
 _c3IMM() //  [R1]
         { []
         }
     {offset
       c3IMM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IMW; else goto c3IMV;
       c3IMW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IMV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IMM_info" {
     block_c3IMM_info:
         const _c3IMM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.026479824 UTC

[section ""data" . lvl69_r3ycl_closure" {
     lvl69_r3ycl_closure:
         const lvl69_r3ycl_info;
         const 0;
 },
 lvl116_s3GhL_entry() //  [R1]
         { []
         }
     {offset
       c3INt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3INu; else goto c3INv;
       c3INu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3INv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x24_r3yaR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GhL_info" {
     lvl116_s3GhL_info:
         const lvl116_s3GhL_entry;
         const 1;
         const 16;
 },
 sat_s3GhN_entry() //  [R1]
         { []
         }
     {offset
       c3INB: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GhN_info" {
     sat_s3GhN_info:
         const sat_s3GhN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl69_r3ycl_entry() //  [R2]
         { []
         }
     {offset
       c3INH: // global
           _s3GhK::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3INI; else goto c3INJ;
       c3INJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3INL; else goto c3INK;
       c3INL: // global
           HpAlloc = 40;
           goto c3INI;
       c3INI: // global
           R2 = _s3GhK::P64;
           R1 = lvl69_r3ycl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3INK: // global
           I64[Hp - 32] = lvl116_s3GhL_info;
           P64[Hp - 16] = _s3GhK::P64;
           I64[Hp - 8] = sat_s3GhN_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3INE_info;
           R3 = Hp - 7;
           R2 = m50_r3yaQ_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl69_r3ycl_info" {
     lvl69_r3ycl_info:
         const lvl69_r3ycl_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1032;
 },
 _c3INE() //  [R1]
         { []
         }
     {offset
       c3INE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3INO; else goto c3INN;
       c3INO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3INN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3INE_info" {
     block_c3INE_info:
         const _c3INE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.037161762 UTC

[section ""data" . lvl70_r3ycm_closure" {
     lvl70_r3ycm_closure:
         const lvl70_r3ycm_info;
         const 0;
 },
 lvl116_s3GhR_entry() //  [R1]
         { []
         }
     {offset
       c3IOl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IOm; else goto c3IOn;
       c3IOm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IOn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x25_r3yaU_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GhR_info" {
     lvl116_s3GhR_info:
         const lvl116_s3GhR_entry;
         const 1;
         const 16;
 },
 sat_s3GhT_entry() //  [R1]
         { []
         }
     {offset
       c3IOt: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GhT_info" {
     sat_s3GhT_info:
         const sat_s3GhT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl70_r3ycm_entry() //  [R2]
         { []
         }
     {offset
       c3IOz: // global
           _s3GhQ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IOA; else goto c3IOB;
       c3IOB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IOD; else goto c3IOC;
       c3IOD: // global
           HpAlloc = 40;
           goto c3IOA;
       c3IOA: // global
           R2 = _s3GhQ::P64;
           R1 = lvl70_r3ycm_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IOC: // global
           I64[Hp - 32] = lvl116_s3GhR_info;
           P64[Hp - 16] = _s3GhQ::P64;
           I64[Hp - 8] = sat_s3GhT_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IOw_info;
           R3 = Hp - 7;
           R2 = m52_r3yaT_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl70_r3ycm_info" {
     lvl70_r3ycm_info:
         const lvl70_r3ycm_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1048;
 },
 _c3IOw() //  [R1]
         { []
         }
     {offset
       c3IOw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IOG; else goto c3IOF;
       c3IOG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IOF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IOw_info" {
     block_c3IOw_info:
         const _c3IOw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.047327461 UTC

[section ""data" . lvl71_r3ycn_closure" {
     lvl71_r3ycn_closure:
         const lvl71_r3ycn_info;
         const 0;
 },
 lvl116_s3GhX_entry() //  [R1]
         { []
         }
     {offset
       c3IPd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IPe; else goto c3IPf;
       c3IPe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IPf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x26_r3yaX_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GhX_info" {
     lvl116_s3GhX_info:
         const lvl116_s3GhX_entry;
         const 1;
         const 16;
 },
 sat_s3GhZ_entry() //  [R1]
         { []
         }
     {offset
       c3IPl: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GhZ_info" {
     sat_s3GhZ_info:
         const sat_s3GhZ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl71_r3ycn_entry() //  [R2]
         { []
         }
     {offset
       c3IPr: // global
           _s3GhW::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IPs; else goto c3IPt;
       c3IPt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IPv; else goto c3IPu;
       c3IPv: // global
           HpAlloc = 40;
           goto c3IPs;
       c3IPs: // global
           R2 = _s3GhW::P64;
           R1 = lvl71_r3ycn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IPu: // global
           I64[Hp - 32] = lvl116_s3GhX_info;
           P64[Hp - 16] = _s3GhW::P64;
           I64[Hp - 8] = sat_s3GhZ_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IPo_info;
           R3 = Hp - 7;
           R2 = m54_r3yaW_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl71_r3ycn_info" {
     lvl71_r3ycn_info:
         const lvl71_r3ycn_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1064;
 },
 _c3IPo() //  [R1]
         { []
         }
     {offset
       c3IPo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IPy; else goto c3IPx;
       c3IPy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IPx: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IPo_info" {
     block_c3IPo_info:
         const _c3IPo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.057072474 UTC

[section ""data" . lvl72_r3yco_closure" {
     lvl72_r3yco_closure:
         const lvl72_r3yco_info;
         const 0;
 },
 lvl116_s3Gi3_entry() //  [R1]
         { []
         }
     {offset
       c3IQ5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IQ6; else goto c3IQ7;
       c3IQ6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IQ7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x27_r3yb0_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gi3_info" {
     lvl116_s3Gi3_info:
         const lvl116_s3Gi3_entry;
         const 1;
         const 16;
 },
 sat_s3Gi5_entry() //  [R1]
         { []
         }
     {offset
       c3IQd: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gi5_info" {
     sat_s3Gi5_info:
         const sat_s3Gi5_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl72_r3yco_entry() //  [R2]
         { []
         }
     {offset
       c3IQj: // global
           _s3Gi2::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IQk; else goto c3IQl;
       c3IQl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IQn; else goto c3IQm;
       c3IQn: // global
           HpAlloc = 40;
           goto c3IQk;
       c3IQk: // global
           R2 = _s3Gi2::P64;
           R1 = lvl72_r3yco_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IQm: // global
           I64[Hp - 32] = lvl116_s3Gi3_info;
           P64[Hp - 16] = _s3Gi2::P64;
           I64[Hp - 8] = sat_s3Gi5_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IQg_info;
           R3 = Hp - 7;
           R2 = m56_r3yaZ_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl72_r3yco_info" {
     lvl72_r3yco_info:
         const lvl72_r3yco_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1080;
 },
 _c3IQg() //  [R1]
         { []
         }
     {offset
       c3IQg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IQq; else goto c3IQp;
       c3IQq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IQp: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IQg_info" {
     block_c3IQg_info:
         const _c3IQg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.067225545 UTC

[section ""data" . lvl73_r3ycp_closure" {
     lvl73_r3ycp_closure:
         const lvl73_r3ycp_info;
         const 0;
 },
 lvl116_s3Gi9_entry() //  [R1]
         { []
         }
     {offset
       c3IQX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IQY; else goto c3IQZ;
       c3IQY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IQZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x28_r3yb3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gi9_info" {
     lvl116_s3Gi9_info:
         const lvl116_s3Gi9_entry;
         const 1;
         const 16;
 },
 sat_s3Gib_entry() //  [R1]
         { []
         }
     {offset
       c3IR5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gib_info" {
     sat_s3Gib_info:
         const sat_s3Gib_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl73_r3ycp_entry() //  [R2]
         { []
         }
     {offset
       c3IRb: // global
           _s3Gi8::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IRc; else goto c3IRd;
       c3IRd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IRf; else goto c3IRe;
       c3IRf: // global
           HpAlloc = 40;
           goto c3IRc;
       c3IRc: // global
           R2 = _s3Gi8::P64;
           R1 = lvl73_r3ycp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IRe: // global
           I64[Hp - 32] = lvl116_s3Gi9_info;
           P64[Hp - 16] = _s3Gi8::P64;
           I64[Hp - 8] = sat_s3Gib_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IR8_info;
           R3 = Hp - 7;
           R2 = m58_r3yb2_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl73_r3ycp_info" {
     lvl73_r3ycp_info:
         const lvl73_r3ycp_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1096;
 },
 _c3IR8() //  [R1]
         { []
         }
     {offset
       c3IR8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IRi; else goto c3IRh;
       c3IRi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IRh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IR8_info" {
     block_c3IR8_info:
         const _c3IR8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.078311707 UTC

[section ""data" . lvl74_r3ycq_closure" {
     lvl74_r3ycq_closure:
         const lvl74_r3ycq_info;
         const 0;
 },
 lvl116_s3Gif_entry() //  [R1]
         { []
         }
     {offset
       c3IRP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IRQ; else goto c3IRR;
       c3IRQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IRR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x29_r3yb6_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gif_info" {
     lvl116_s3Gif_info:
         const lvl116_s3Gif_entry;
         const 1;
         const 16;
 },
 sat_s3Gih_entry() //  [R1]
         { []
         }
     {offset
       c3IRX: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gih_info" {
     sat_s3Gih_info:
         const sat_s3Gih_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl74_r3ycq_entry() //  [R2]
         { []
         }
     {offset
       c3IS3: // global
           _s3Gie::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IS4; else goto c3IS5;
       c3IS5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IS7; else goto c3IS6;
       c3IS7: // global
           HpAlloc = 40;
           goto c3IS4;
       c3IS4: // global
           R2 = _s3Gie::P64;
           R1 = lvl74_r3ycq_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IS6: // global
           I64[Hp - 32] = lvl116_s3Gif_info;
           P64[Hp - 16] = _s3Gie::P64;
           I64[Hp - 8] = sat_s3Gih_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IS0_info;
           R3 = Hp - 7;
           R2 = m60_r3yb5_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl74_r3ycq_info" {
     lvl74_r3ycq_info:
         const lvl74_r3ycq_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1112;
 },
 _c3IS0() //  [R1]
         { []
         }
     {offset
       c3IS0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ISa; else goto c3IS9;
       c3ISa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IS9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IS0_info" {
     block_c3IS0_info:
         const _c3IS0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.088266793 UTC

[section ""data" . lvl75_r3ycr_closure" {
     lvl75_r3ycr_closure:
         const lvl75_r3ycr_info;
         const 0;
 },
 lvl116_s3Gil_entry() //  [R1]
         { []
         }
     {offset
       c3ISH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ISI; else goto c3ISJ;
       c3ISI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ISJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x30_r3yb9_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gil_info" {
     lvl116_s3Gil_info:
         const lvl116_s3Gil_entry;
         const 1;
         const 16;
 },
 sat_s3Gin_entry() //  [R1]
         { []
         }
     {offset
       c3ISP: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gin_info" {
     sat_s3Gin_info:
         const sat_s3Gin_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl75_r3ycr_entry() //  [R2]
         { []
         }
     {offset
       c3ISV: // global
           _s3Gik::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ISW; else goto c3ISX;
       c3ISX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ISZ; else goto c3ISY;
       c3ISZ: // global
           HpAlloc = 40;
           goto c3ISW;
       c3ISW: // global
           R2 = _s3Gik::P64;
           R1 = lvl75_r3ycr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ISY: // global
           I64[Hp - 32] = lvl116_s3Gil_info;
           P64[Hp - 16] = _s3Gik::P64;
           I64[Hp - 8] = sat_s3Gin_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ISS_info;
           R3 = Hp - 7;
           R2 = m62_r3yb8_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl75_r3ycr_info" {
     lvl75_r3ycr_info:
         const lvl75_r3ycr_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1128;
 },
 _c3ISS() //  [R1]
         { []
         }
     {offset
       c3ISS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IT2; else goto c3IT1;
       c3IT2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IT1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ISS_info" {
     block_c3ISS_info:
         const _c3ISS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.100862423 UTC

[section ""data" . lvl76_r3ycs_closure" {
     lvl76_r3ycs_closure:
         const lvl76_r3ycs_info;
         const 0;
 },
 lvl116_s3Gir_entry() //  [R1]
         { []
         }
     {offset
       c3ITz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ITA; else goto c3ITB;
       c3ITA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ITB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x31_r3ybc_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gir_info" {
     lvl116_s3Gir_info:
         const lvl116_s3Gir_entry;
         const 1;
         const 16;
 },
 sat_s3Git_entry() //  [R1]
         { []
         }
     {offset
       c3ITH: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Git_info" {
     sat_s3Git_info:
         const sat_s3Git_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl76_r3ycs_entry() //  [R2]
         { []
         }
     {offset
       c3ITN: // global
           _s3Giq::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ITO; else goto c3ITP;
       c3ITP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ITR; else goto c3ITQ;
       c3ITR: // global
           HpAlloc = 40;
           goto c3ITO;
       c3ITO: // global
           R2 = _s3Giq::P64;
           R1 = lvl76_r3ycs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ITQ: // global
           I64[Hp - 32] = lvl116_s3Gir_info;
           P64[Hp - 16] = _s3Giq::P64;
           I64[Hp - 8] = sat_s3Git_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ITK_info;
           R3 = Hp - 7;
           R2 = m64_r3ybb_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl76_r3ycs_info" {
     lvl76_r3ycs_info:
         const lvl76_r3ycs_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1144;
 },
 _c3ITK() //  [R1]
         { []
         }
     {offset
       c3ITK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ITU; else goto c3ITT;
       c3ITU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ITT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ITK_info" {
     block_c3ITK_info:
         const _c3ITK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.116484332 UTC

[section ""data" . lvl77_r3yct_closure" {
     lvl77_r3yct_closure:
         const lvl77_r3yct_info;
         const 0;
 },
 lvl116_s3Gix_entry() //  [R1]
         { []
         }
     {offset
       c3IUr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IUs; else goto c3IUt;
       c3IUs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IUt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x32_r3ybf_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gix_info" {
     lvl116_s3Gix_info:
         const lvl116_s3Gix_entry;
         const 1;
         const 16;
 },
 sat_s3Giz_entry() //  [R1]
         { []
         }
     {offset
       c3IUz: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Giz_info" {
     sat_s3Giz_info:
         const sat_s3Giz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl77_r3yct_entry() //  [R2]
         { []
         }
     {offset
       c3IUF: // global
           _s3Giw::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IUG; else goto c3IUH;
       c3IUH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IUJ; else goto c3IUI;
       c3IUJ: // global
           HpAlloc = 40;
           goto c3IUG;
       c3IUG: // global
           R2 = _s3Giw::P64;
           R1 = lvl77_r3yct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IUI: // global
           I64[Hp - 32] = lvl116_s3Gix_info;
           P64[Hp - 16] = _s3Giw::P64;
           I64[Hp - 8] = sat_s3Giz_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IUC_info;
           R3 = Hp - 7;
           R2 = m66_r3ybe_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl77_r3yct_info" {
     lvl77_r3yct_info:
         const lvl77_r3yct_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1160;
 },
 _c3IUC() //  [R1]
         { []
         }
     {offset
       c3IUC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IUM; else goto c3IUL;
       c3IUM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IUL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IUC_info" {
     block_c3IUC_info:
         const _c3IUC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.133119998 UTC

[section ""data" . lvl78_r3ycu_closure" {
     lvl78_r3ycu_closure:
         const lvl78_r3ycu_info;
         const 0;
 },
 lvl116_s3GiD_entry() //  [R1]
         { []
         }
     {offset
       c3IVj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IVk; else goto c3IVl;
       c3IVk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IVl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x33_r3ybi_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GiD_info" {
     lvl116_s3GiD_info:
         const lvl116_s3GiD_entry;
         const 1;
         const 16;
 },
 sat_s3GiF_entry() //  [R1]
         { []
         }
     {offset
       c3IVr: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GiF_info" {
     sat_s3GiF_info:
         const sat_s3GiF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl78_r3ycu_entry() //  [R2]
         { []
         }
     {offset
       c3IVx: // global
           _s3GiC::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IVy; else goto c3IVz;
       c3IVz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IVB; else goto c3IVA;
       c3IVB: // global
           HpAlloc = 40;
           goto c3IVy;
       c3IVy: // global
           R2 = _s3GiC::P64;
           R1 = lvl78_r3ycu_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IVA: // global
           I64[Hp - 32] = lvl116_s3GiD_info;
           P64[Hp - 16] = _s3GiC::P64;
           I64[Hp - 8] = sat_s3GiF_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IVu_info;
           R3 = Hp - 7;
           R2 = m68_r3ybh_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl78_r3ycu_info" {
     lvl78_r3ycu_info:
         const lvl78_r3ycu_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1176;
 },
 _c3IVu() //  [R1]
         { []
         }
     {offset
       c3IVu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IVE; else goto c3IVD;
       c3IVE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IVD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IVu_info" {
     block_c3IVu_info:
         const _c3IVu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.146054362 UTC

[section ""data" . lvl79_r3ycv_closure" {
     lvl79_r3ycv_closure:
         const :_con_info;
         const lvl78_r3ycu_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.14774496 UTC

[section ""data" . lvl80_r3ycw_closure" {
     lvl80_r3ycw_closure:
         const :_con_info;
         const lvl77_r3yct_closure+1;
         const lvl79_r3ycv_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.149503485 UTC

[section ""data" . lvl81_r3ycx_closure" {
     lvl81_r3ycx_closure:
         const :_con_info;
         const lvl76_r3ycs_closure+1;
         const lvl80_r3ycw_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.151240455 UTC

[section ""data" . lvl82_r3ycy_closure" {
     lvl82_r3ycy_closure:
         const :_con_info;
         const lvl75_r3ycr_closure+1;
         const lvl81_r3ycx_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.152901582 UTC

[section ""data" . lvl83_r3ycz_closure" {
     lvl83_r3ycz_closure:
         const :_con_info;
         const lvl74_r3ycq_closure+1;
         const lvl82_r3ycy_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.154677482 UTC

[section ""data" . lvl84_r3ycA_closure" {
     lvl84_r3ycA_closure:
         const :_con_info;
         const lvl73_r3ycp_closure+1;
         const lvl83_r3ycz_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.156343159 UTC

[section ""data" . lvl85_r3ycB_closure" {
     lvl85_r3ycB_closure:
         const :_con_info;
         const lvl72_r3yco_closure+1;
         const lvl84_r3ycA_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.158351491 UTC

[section ""data" . lvl86_r3ycC_closure" {
     lvl86_r3ycC_closure:
         const :_con_info;
         const lvl71_r3ycn_closure+1;
         const lvl85_r3ycB_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.160566845 UTC

[section ""data" . lvl87_r3ycD_closure" {
     lvl87_r3ycD_closure:
         const :_con_info;
         const lvl70_r3ycm_closure+1;
         const lvl86_r3ycC_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.162535166 UTC

[section ""data" . lvl88_r3ycE_closure" {
     lvl88_r3ycE_closure:
         const :_con_info;
         const lvl69_r3ycl_closure+1;
         const lvl87_r3ycD_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.164268844 UTC

[section ""data" . lvl89_r3ycF_closure" {
     lvl89_r3ycF_closure:
         const :_con_info;
         const lvl68_r3yck_closure+1;
         const lvl88_r3ycE_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.166125403 UTC

[section ""data" . lvl90_r3ycG_closure" {
     lvl90_r3ycG_closure:
         const :_con_info;
         const lvl67_r3ycj_closure+1;
         const lvl89_r3ycF_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.167725484 UTC

[section ""data" . lvl91_r3ycH_closure" {
     lvl91_r3ycH_closure:
         const :_con_info;
         const lvl66_r3yci_closure+1;
         const lvl90_r3ycG_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.169444753 UTC

[section ""data" . lvl92_r3ycI_closure" {
     lvl92_r3ycI_closure:
         const :_con_info;
         const lvl65_r3ych_closure+1;
         const lvl91_r3ycH_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.171197426 UTC

[section ""data" . lvl93_r3ycJ_closure" {
     lvl93_r3ycJ_closure:
         const :_con_info;
         const lvl64_r3ycg_closure+1;
         const lvl92_r3ycI_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.172928341 UTC

[section ""data" . lvl94_r3ycK_closure" {
     lvl94_r3ycK_closure:
         const :_con_info;
         const lvl63_r3ycf_closure+1;
         const lvl93_r3ycJ_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.175242493 UTC

[section ""data" . lvl95_r3ycL_closure" {
     lvl95_r3ycL_closure:
         const :_con_info;
         const lvl62_r3yce_closure+1;
         const lvl94_r3ycK_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.176946152 UTC

[section ""data" . lvl96_r3ycM_closure" {
     lvl96_r3ycM_closure:
         const :_con_info;
         const lvl61_r3ycd_closure+1;
         const lvl95_r3ycL_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.178813938 UTC

[section ""data" . lvl97_r3ycN_closure" {
     lvl97_r3ycN_closure:
         const :_con_info;
         const lvl60_r3ycc_closure+1;
         const lvl96_r3ycM_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.180551863 UTC

[section ""data" . lvl98_r3ycO_closure" {
     lvl98_r3ycO_closure:
         const :_con_info;
         const lvl59_r3ycb_closure+1;
         const lvl97_r3ycN_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.182320305 UTC

[section ""data" . lvl99_r3ycP_closure" {
     lvl99_r3ycP_closure:
         const :_con_info;
         const lvl58_r3yca_closure+1;
         const lvl98_r3ycO_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.184059148 UTC

[section ""data" . lvl100_r3ycQ_closure" {
     lvl100_r3ycQ_closure:
         const :_con_info;
         const lvl57_r3yc9_closure+1;
         const lvl99_r3ycP_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.186505739 UTC

[section ""data" . lvl101_r3ycR_closure" {
     lvl101_r3ycR_closure:
         const :_con_info;
         const lvl56_r3yc8_closure+1;
         const lvl100_r3ycQ_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.188480086 UTC

[section ""data" . lvl102_r3ycS_closure" {
     lvl102_r3ycS_closure:
         const :_con_info;
         const lvl55_r3yc7_closure+1;
         const lvl101_r3ycR_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.190194759 UTC

[section ""data" . lvl103_r3ycT_closure" {
     lvl103_r3ycT_closure:
         const :_con_info;
         const lvl54_r3yc6_closure+1;
         const lvl102_r3ycS_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.191906741 UTC

[section ""data" . lvl104_r3ycU_closure" {
     lvl104_r3ycU_closure:
         const :_con_info;
         const lvl53_r3yc5_closure+1;
         const lvl103_r3ycT_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.193638204 UTC

[section ""data" . lvl105_r3ycV_closure" {
     lvl105_r3ycV_closure:
         const :_con_info;
         const lvl52_r3yc4_closure+1;
         const lvl104_r3ycU_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.19529233 UTC

[section ""data" . lvl106_r3ycW_closure" {
     lvl106_r3ycW_closure:
         const :_con_info;
         const lvl51_r3yc3_closure+1;
         const lvl105_r3ycV_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.196909444 UTC

[section ""data" . lvl107_r3ycX_closure" {
     lvl107_r3ycX_closure:
         const :_con_info;
         const lvl50_r3yc2_closure+1;
         const lvl106_r3ycW_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.198640538 UTC

[section ""data" . lvl108_r3ycY_closure" {
     lvl108_r3ycY_closure:
         const :_con_info;
         const lvl49_r3yc1_closure+1;
         const lvl107_r3ycX_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.20032626 UTC

[section ""data" . lvl109_r3ycZ_closure" {
     lvl109_r3ycZ_closure:
         const :_con_info;
         const lvl48_r3yc0_closure+1;
         const lvl108_r3ycY_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.202023996 UTC

[section ""data" . lvl110_r3yd0_closure" {
     lvl110_r3yd0_closure:
         const :_con_info;
         const lvl47_r3ybZ_closure+1;
         const lvl109_r3ycZ_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.203697489 UTC

[section ""data" . lvl111_r3yd1_closure" {
     lvl111_r3yd1_closure:
         const :_con_info;
         const lvl46_r3ybY_closure+1;
         const lvl110_r3yd0_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.208006316 UTC

[section ""data" . lvl112_r3yd2_closure" {
     lvl112_r3yd2_closure:
         const lvl112_r3yd2_info;
 },
 lvl116_s3GiJ_entry() //  [R1]
         { []
         }
     {offset
       c3IWI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IWJ; else goto c3IWK;
       c3IWJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IWK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = a2_r3y9z_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GiJ_info" {
     lvl116_s3GiJ_info:
         const lvl116_s3GiJ_entry;
         const 1;
         const 16;
 },
 lvl117_s3GiK_entry() //  [R1]
         { []
         }
     {offset
       c3IWP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IWQ; else goto c3IWR;
       c3IWQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IWR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = a1_r3y9y_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3GiK_info" {
     lvl117_s3GiK_info:
         const lvl117_s3GiK_entry;
         const 1;
         const 16;
 },
 sat_s3GiP_entry() //  [R1, R2]
         { []
         }
     {offset
       c3IX0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3IX1; else goto c3IX2;
       c3IX1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IX2: // global
           I64[Sp - 24] = block_c3IWX_info;
           _s3GiJ::P64 = P64[R1 + 7];
           _s3GiK::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3GiJ::P64;
           P64[Sp - 8] = _s3GiK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3IXi; else goto c3IWY;
       u3IXi: // global
           call _c3IWX(R1) args: 0, res: 0, upd: 0;
       c3IWY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GiP_info" {
     sat_s3GiP_info:
         const sat_s3GiP_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3IWX() //  [R1]
         { []
         }
     {offset
       c3IWX: // global
           _s3GiJ::P64 = P64[Sp + 8];
           _s3GiO::I64 = I64[R1 + 7];
           if (_s3GiO::I64 < 120) goto u3IXd; else goto u3IXh;
       u3IXd: // global
           _s3GiK::P64 = P64[Sp + 16];
           if (_s3GiO::I64 < 89) goto u3IXe; else goto u3IXg;
       u3IXe: // global
           if (_s3GiO::I64 >= 88) goto c3IXc; else goto u3IXf;
       u3IXf: // global
           if (_s3GiO::I64 != 79) goto c3IX8; else goto c3IXb;
       u3IXg: // global
           if (_s3GiO::I64 != 111) goto c3IX8; else goto c3IXb;
       c3IXb: // global
           R1 = _s3GiK::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3IXh: // global
           if (_s3GiO::I64 < 121) goto c3IXc; else goto c3IX8;
       c3IXc: // global
           R1 = _s3GiJ::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3IX8: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IWX_info" {
     block_c3IWX_info:
         const _c3IWX;
         const 2;
         const 30;
 },
 lvl112_r3yd2_entry() //  [R2]
         { []
         }
     {offset
       c3IXk: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3IXo; else goto c3IXn;
       c3IXo: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = lvl112_r3yd2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IXn: // global
           I64[Hp - 80] = lvl116_s3GiJ_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = lvl117_s3GiK_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s3GiP_info;
           P64[Hp - 24] = Hp - 80;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl112_r3yd2_info" {
     lvl112_r3yd2_info:
         const lvl112_r3yd2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.220038296 UTC

[section ""data" . lvl113_r3yd3_closure" {
     lvl113_r3yd3_closure:
         const lvl113_r3yd3_info;
 },
 lvl113_r3yd3_entry() //  [R2]
         { []
         }
     {offset
       c3IY4: // global
           _s3GiQ::P64 = R2;
           R2 = lvl6_r3y9C_closure+1;
           R1 = _s3GiQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl113_r3yd3_info" {
     lvl113_r3yd3_info:
         const lvl113_r3yd3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.251528037 UTC

[section ""data" . Text.Read.Lex.lexChar2_closure" {
     Text.Read.Lex.lexChar2_closure:
         const Text.Read.Lex.lexChar2_info;
         const 0;
 },
 lvl116_s3GiS_entry() //  [R1]
         { []
         }
     {offset
       c3IYj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IYk; else goto c3IYl;
       c3IYk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IYl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl18_r3ybu_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GiS_info" {
     lvl116_s3GiS_info:
         const lvl116_s3GiS_entry;
         const 1;
         const 16;
 },
 lvl117_s3GiT_entry() //  [R1]
         { []
         }
     {offset
       c3IYq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IYr; else goto c3IYs;
       c3IYr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IYs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl16_r3ybs_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3GiT_info" {
     lvl117_s3GiT_info:
         const lvl117_s3GiT_entry;
         const 1;
         const 16;
 },
 lvl118_s3GiU_entry() //  [R1]
         { []
         }
     {offset
       c3IYx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IYy; else goto c3IYz;
       c3IYy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IYz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl20_r3ybw_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl118_s3GiU_info" {
     lvl118_s3GiU_info:
         const lvl118_s3GiU_entry;
         const 1;
         const 16;
 },
 lvl119_s3GiV_entry() //  [R1]
         { []
         }
     {offset
       c3IYE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IYF; else goto c3IYG;
       c3IYF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IYG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl17_r3ybt_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl119_s3GiV_info" {
     lvl119_s3GiV_info:
         const lvl119_s3GiV_entry;
         const 1;
         const 16;
 },
 lvl120_s3GiW_entry() //  [R1]
         { []
         }
     {offset
       c3IYL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IYM; else goto c3IYN;
       c3IYM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IYN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl19_r3ybv_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl120_s3GiW_info" {
     lvl120_s3GiW_info:
         const lvl120_s3GiW_entry;
         const 1;
         const 16;
 },
 lvl121_s3GiX_entry() //  [R1]
         { []
         }
     {offset
       c3IYS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IYT; else goto c3IYU;
       c3IYT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IYU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl15_r3ybr_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl121_s3GiX_info" {
     lvl121_s3GiX_info:
         const lvl121_s3GiX_entry;
         const 1;
         const 16;
 },
 lvl122_s3GiY_entry() //  [R1]
         { []
         }
     {offset
       c3IYZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IZ0; else goto c3IZ1;
       c3IZ0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IZ1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl14_r3ybq_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl122_s3GiY_info" {
     lvl122_s3GiY_info:
         const lvl122_s3GiY_entry;
         const 1;
         const 16;
 },
 lvl123_s3GiZ_entry() //  [R1]
         { []
         }
     {offset
       c3IZ6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IZ7; else goto c3IZ8;
       c3IZ7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IZ8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl13_r3ybp_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl123_s3GiZ_info" {
     lvl123_s3GiZ_info:
         const lvl123_s3GiZ_entry;
         const 1;
         const 16;
 },
 lvl124_s3Gj0_entry() //  [R1]
         { []
         }
     {offset
       c3IZd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IZe; else goto c3IZf;
       c3IZe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IZf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl11_r3ybn_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl124_s3Gj0_info" {
     lvl124_s3Gj0_info:
         const lvl124_s3Gj0_entry;
         const 1;
         const 16;
 },
 lvl125_s3Gj1_entry() //  [R1]
         { []
         }
     {offset
       c3IZk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IZl; else goto c3IZm;
       c3IZl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IZm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl9_r3ybl_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl125_s3Gj1_info" {
     lvl125_s3Gj1_info:
         const lvl125_s3Gj1_entry;
         const 1;
         const 16;
 },
 lvl126_s3Gj9_entry() //  [R1]
         { []
         }
     {offset
       c3IZD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3IZE; else goto c3IZF;
       c3IZE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IZF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3IZA_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3IZJ; else goto c3IZB;
       u3IZJ: // global
           call _c3IZA(R1) args: 0, res: 0, upd: 0;
       c3IZB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl126_s3Gj9_info" {
     lvl126_s3Gj9_info:
         const lvl126_s3Gj9_entry;
         const 1;
         const 16;
 },
 _c3IZA() //  [R1]
         { []
         }
     {offset
       c3IZA: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3IZA_info" {
     block_c3IZA_info:
         const _c3IZA;
         const 0;
         const 30;
 },
 sat_s3Gjj_entry() //  [R1]
         { []
         }
     {offset
       c3J04: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3J05; else goto c3J06;
       c3J05: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J06: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3J02_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gjj_info" {
     sat_s3Gjj_info:
         const sat_s3Gjj_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+1192;
 },
 _c3J02() //  [R1]
         { []
         }
     {offset
       c3J02: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3J0b; else goto c3J0a;
       c3J0b: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3J0a: // global
           if (R1 > 1114111) goto c3J0i; else goto c3J0p;
       c3J0i: // global
           Hp = Hp - 16;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c3J0p: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3J02_info" {
     block_c3J02_info:
         const _c3J02;
         const 0;
         const 4294967326;
         const S3GvX_srt+1192;
 },
 section ""relreadonly" . u3J6l_srtd" {
     u3J6l_srtd:
         const S3GvX_srt+232;
         const 122;
         const 1;
         const 216172782113783808;
 },
 sat_s3Gjl_entry() //  [R1, R2]
         { []
         }
     {offset
       c3J0q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3J0r; else goto c3J0s;
       c3J0r: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J0s: // global
           I64[Sp - 16] = block_c3IZP_info;
           R3 = R2;
           R2 = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gjl_info" {
     sat_s3Gjl_info:
         const sat_s3Gjl_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const u3J6l_srtd;
 },
 _c3IZP() //  [R1]
         { []
         }
     {offset
       c3IZP: // global
           I64[Sp - 8] = block_c3IZT_info;
           R3 = lvl7_r3ybj_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IZP_info" {
     block_c3IZP_info:
         const _c3IZP;
         const 1;
         const 12884901918;
         const S3GvX_srt+1192;
 },
 _c3IZT() //  [R1]
         { []
         }
     {offset
       c3IZT: // global
           if (R1 == 1) goto c3J0z; else goto c3J0x;
       c3J0z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3J0C; else goto c3J0B;
       c3J0C: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3J0B: // global
           I64[Hp - 40] = sat_s3Gjj_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = Hp - 15;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3J0x: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3IZT_info" {
     block_c3IZT_info:
         const _c3IZT;
         const 2;
         const 4294967326;
         const S3GvX_srt+1192;
 },
 section ""relreadonly" . u3J6m_srtd" {
     u3J6m_srtd:
         const S3GvX_srt+232;
         const 122;
         const 17592186044417;
         const 216172782113783808;
 },
 sat_s3Gjo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3J0G: // global
           _s3Gj8::P64 = R2;
           _s3Gjo::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3J0H; else goto c3J0I;
       c3J0I: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3J0K; else goto c3J0J;
       c3J0K: // global
           HpAlloc = 48;
           goto c3J0H;
       c3J0H: // global
           R2 = _s3Gj8::P64;
           R1 = _s3Gjo::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J0J: // global
           _s3GiR::P64 = P64[_s3Gjo::P64 + 7];
           I64[Hp - 40] = lvl126_s3Gj9_info;
           P64[Hp - 24] = _s3Gj8::P64;
           I64[Hp - 16] = sat_s3Gjl_info;
           P64[Hp - 8] = _s3GiR::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_c3J0D_info;
           R3 = Hp - 15;
           R2 = _s3Gj8::P64;
           Sp = Sp - 8;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gjo_info" {
     sat_s3Gjo_info:
         const sat_s3Gjo_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3J6m_srtd;
 },
 _c3J0D() //  [R1]
         { []
         }
     {offset
       c3J0D: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3J0N; else goto c3J0M;
       c3J0N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3J0M: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3J0D_info" {
     block_c3J0D_info:
         const _c3J0D;
         const 0;
         const 30;
 },
 lvl126_s3Gjs_entry() //  [R1]
         { []
         }
     {offset
       c3J0Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J0Z; else goto c3J10;
       c3J0Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J10: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl45_r3ybV_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl126_s3Gjs_info" {
     lvl126_s3Gjs_info:
         const lvl126_s3Gjs_entry;
         const 1;
         const 16;
 },
 lvl127_s3Gjt_entry() //  [R1]
         { []
         }
     {offset
       c3J15: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J16; else goto c3J17;
       c3J16: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J17: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl44_r3ybU_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl127_s3Gjt_info" {
     lvl127_s3Gjt_info:
         const lvl127_s3Gjt_entry;
         const 1;
         const 16;
 },
 lvl128_s3Gju_entry() //  [R1]
         { []
         }
     {offset
       c3J1c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1d; else goto c3J1e;
       c3J1d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl43_r3ybT_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl128_s3Gju_info" {
     lvl128_s3Gju_info:
         const lvl128_s3Gju_entry;
         const 1;
         const 16;
 },
 lvl129_s3Gjv_entry() //  [R1]
         { []
         }
     {offset
       c3J1j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1k; else goto c3J1l;
       c3J1k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl42_r3ybS_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl129_s3Gjv_info" {
     lvl129_s3Gjv_info:
         const lvl129_s3Gjv_entry;
         const 1;
         const 16;
 },
 lvl130_s3Gjw_entry() //  [R1]
         { []
         }
     {offset
       c3J1q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1r; else goto c3J1s;
       c3J1r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl41_r3ybR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl130_s3Gjw_info" {
     lvl130_s3Gjw_info:
         const lvl130_s3Gjw_entry;
         const 1;
         const 16;
 },
 lvl131_s3Gjx_entry() //  [R1]
         { []
         }
     {offset
       c3J1x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1y; else goto c3J1z;
       c3J1y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl40_r3ybQ_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl131_s3Gjx_info" {
     lvl131_s3Gjx_info:
         const lvl131_s3Gjx_entry;
         const 1;
         const 16;
 },
 lvl132_s3Gjy_entry() //  [R1]
         { []
         }
     {offset
       c3J1E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1F; else goto c3J1G;
       c3J1F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl39_r3ybP_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl132_s3Gjy_info" {
     lvl132_s3Gjy_info:
         const lvl132_s3Gjy_entry;
         const 1;
         const 16;
 },
 lvl133_s3Gjz_entry() //  [R1]
         { []
         }
     {offset
       c3J1L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1M; else goto c3J1N;
       c3J1M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl38_r3ybO_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl133_s3Gjz_info" {
     lvl133_s3Gjz_info:
         const lvl133_s3Gjz_entry;
         const 1;
         const 16;
 },
 lvl134_s3GjA_entry() //  [R1]
         { []
         }
     {offset
       c3J1S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1T; else goto c3J1U;
       c3J1T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl37_r3ybN_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl134_s3GjA_info" {
     lvl134_s3GjA_info:
         const lvl134_s3GjA_entry;
         const 1;
         const 16;
 },
 lvl135_s3GjB_entry() //  [R1]
         { []
         }
     {offset
       c3J1Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J20; else goto c3J21;
       c3J20: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J21: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl36_r3ybM_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl135_s3GjB_info" {
     lvl135_s3GjB_info:
         const lvl135_s3GjB_entry;
         const 1;
         const 16;
 },
 lvl136_s3GjC_entry() //  [R1]
         { []
         }
     {offset
       c3J26: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J27; else goto c3J28;
       c3J27: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J28: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl35_r3ybL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl136_s3GjC_info" {
     lvl136_s3GjC_info:
         const lvl136_s3GjC_entry;
         const 1;
         const 16;
 },
 lvl137_s3GjD_entry() //  [R1]
         { []
         }
     {offset
       c3J2d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2e; else goto c3J2f;
       c3J2e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl34_r3ybK_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl137_s3GjD_info" {
     lvl137_s3GjD_info:
         const lvl137_s3GjD_entry;
         const 1;
         const 16;
 },
 lvl138_s3GjE_entry() //  [R1]
         { []
         }
     {offset
       c3J2k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2l; else goto c3J2m;
       c3J2l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl33_r3ybJ_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl138_s3GjE_info" {
     lvl138_s3GjE_info:
         const lvl138_s3GjE_entry;
         const 1;
         const 16;
 },
 lvl139_s3GjF_entry() //  [R1]
         { []
         }
     {offset
       c3J2r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2s; else goto c3J2t;
       c3J2s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl32_r3ybI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl139_s3GjF_info" {
     lvl139_s3GjF_info:
         const lvl139_s3GjF_entry;
         const 1;
         const 16;
 },
 lvl140_s3GjG_entry() //  [R1]
         { []
         }
     {offset
       c3J2y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2z; else goto c3J2A;
       c3J2z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl31_r3ybH_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl140_s3GjG_info" {
     lvl140_s3GjG_info:
         const lvl140_s3GjG_entry;
         const 1;
         const 16;
 },
 lvl141_s3GjH_entry() //  [R1]
         { []
         }
     {offset
       c3J2F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2G; else goto c3J2H;
       c3J2G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl30_r3ybG_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl141_s3GjH_info" {
     lvl141_s3GjH_info:
         const lvl141_s3GjH_entry;
         const 1;
         const 16;
 },
 lvl142_s3GjI_entry() //  [R1]
         { []
         }
     {offset
       c3J2M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2N; else goto c3J2O;
       c3J2N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl29_r3ybF_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl142_s3GjI_info" {
     lvl142_s3GjI_info:
         const lvl142_s3GjI_entry;
         const 1;
         const 16;
 },
 lvl143_s3GjJ_entry() //  [R1]
         { []
         }
     {offset
       c3J2T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2U; else goto c3J2V;
       c3J2U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl28_r3ybE_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl143_s3GjJ_info" {
     lvl143_s3GjJ_info:
         const lvl143_s3GjJ_entry;
         const 1;
         const 16;
 },
 lvl144_s3GjK_entry() //  [R1]
         { []
         }
     {offset
       c3J30: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J31; else goto c3J32;
       c3J31: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J32: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl27_r3ybD_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl144_s3GjK_info" {
     lvl144_s3GjK_info:
         const lvl144_s3GjK_entry;
         const 1;
         const 16;
 },
 lvl145_s3GjL_entry() //  [R1]
         { []
         }
     {offset
       c3J37: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J38; else goto c3J39;
       c3J38: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J39: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl26_r3ybC_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl145_s3GjL_info" {
     lvl145_s3GjL_info:
         const lvl145_s3GjL_entry;
         const 1;
         const 16;
 },
 lvl146_s3GjM_entry() //  [R1]
         { []
         }
     {offset
       c3J3e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J3f; else goto c3J3g;
       c3J3f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J3g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl25_r3ybB_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl146_s3GjM_info" {
     lvl146_s3GjM_info:
         const lvl146_s3GjM_entry;
         const 1;
         const 16;
 },
 lvl147_s3GjN_entry() //  [R1]
         { []
         }
     {offset
       c3J3l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J3m; else goto c3J3n;
       c3J3m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J3n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl24_r3ybA_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl147_s3GjN_info" {
     lvl147_s3GjN_info:
         const lvl147_s3GjN_entry;
         const 1;
         const 16;
 },
 lvl148_s3GjO_entry() //  [R1]
         { []
         }
     {offset
       c3J3s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J3t; else goto c3J3u;
       c3J3t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J3u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl23_r3ybz_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl148_s3GjO_info" {
     lvl148_s3GjO_info:
         const lvl148_s3GjO_entry;
         const 1;
         const 16;
 },
 lvl149_s3GjP_entry() //  [R1]
         { []
         }
     {offset
       c3J3z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J3A; else goto c3J3B;
       c3J3A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J3B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl22_r3yby_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl149_s3GjP_info" {
     lvl149_s3GjP_info:
         const lvl149_s3GjP_entry;
         const 1;
         const 16;
 },
 lvl150_s3GjQ_entry() //  [R1]
         { []
         }
     {offset
       c3J3G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J3H; else goto c3J3I;
       c3J3H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J3I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl21_r3ybx_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl150_s3GjQ_info" {
     lvl150_s3GjQ_info:
         const lvl150_s3GjQ_entry;
         const 1;
         const 16;
 },
 $wlvl1_s3GjR_entry() //  [R1, R2]
         { []
         }
     {offset
       c3J4n: // global
           if (R2 >= 96) goto c3J3Q; else goto u3J4q;
       u3J4q: // global
           if (R2 < 64) goto c3J3Q; else goto u3J4r;
       c3J3Q: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3J4r: // global
           switch [64 .. 95] R2 {
               case 64 : goto c3J3R;
               case 65 : goto c3J3S;
               case 66 : goto c3J3T;
               case 67 : goto c3J3U;
               case 68 : goto c3J3V;
               case 69 : goto c3J3W;
               case 70 : goto c3J3X;
               case 71 : goto c3J3Y;
               case 72 : goto c3J3Z;
               case 73 : goto c3J40;
               case 74 : goto c3J41;
               case 75 : goto c3J42;
               case 76 : goto c3J43;
               case 77 : goto c3J44;
               case 78 : goto c3J45;
               case 79 : goto c3J46;
               case 80 : goto c3J47;
               case 81 : goto c3J48;
               case 82 : goto c3J49;
               case 83 : goto c3J4a;
               case 84 : goto c3J4b;
               case 85 : goto c3J4c;
               case 86 : goto c3J4d;
               case 87 : goto c3J4e;
               case 88 : goto c3J4f;
               case 89 : goto c3J4g;
               case 90 : goto c3J4h;
               case 91 : goto c3J4i;
               case 92 : goto c3J4j;
               case 93 : goto c3J4k;
               case 94 : goto c3J4l;
               case 95 : goto c3J4m;
           }
       c3J4m: // global
           R1 = P64[R1 + 63] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4l: // global
           R1 = P64[R1 + 71] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4k: // global
           R1 = P64[R1 + 79] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4j: // global
           R1 = P64[R1 + 87] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4i: // global
           R1 = P64[R1 + 95] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4h: // global
           R1 = P64[R1 + 103] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4g: // global
           R1 = P64[R1 + 111] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4f: // global
           R1 = P64[R1 + 119] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4e: // global
           R1 = P64[R1 + 127] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4d: // global
           R1 = P64[R1 + 135] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4c: // global
           R1 = P64[R1 + 143] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4b: // global
           R1 = P64[R1 + 151] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4a: // global
           R1 = P64[R1 + 159] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J49: // global
           R1 = P64[R1 + 167] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J48: // global
           R1 = P64[R1 + 175] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J47: // global
           R1 = P64[R1 + 183] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J46: // global
           R1 = P64[R1 + 191] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J45: // global
           R1 = P64[R1 + 199] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J44: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J43: // global
           R1 = P64[R1 + 15] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J42: // global
           R1 = P64[R1 + 23] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J41: // global
           R1 = P64[R1 + 31] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J40: // global
           R1 = P64[R1 + 39] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3Z: // global
           R1 = P64[R1 + 47] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3Y: // global
           R1 = P64[R1 + 55] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3X: // global
           R1 = P64[R1 + 207] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3W: // global
           R1 = P64[R1 + 215] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3V: // global
           R1 = P64[R1 + 223] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3U: // global
           R1 = P64[R1 + 231] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3T: // global
           R1 = P64[R1 + 239] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3S: // global
           R1 = P64[R1 + 247] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3R: // global
           R1 = P64[R1 + 255] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl1_s3GjR_info" {
     $wlvl1_s3GjR_info:
         const $wlvl1_s3GjR_entry;
         const 32;
         const 8;
         const 4294967300;
 },
 lvl151_s3GjU_entry() //  [R1, R2]
         { []
         }
     {offset
       c3J4A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J4B; else goto c3J4C;
       c3J4B: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J4C: // global
           I64[Sp - 16] = block_c3J4x_info;
           _s3GjR::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GjR::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3J4G; else goto c3J4y;
       u3J4G: // global
           call _c3J4x(R1) args: 0, res: 0, upd: 0;
       c3J4y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl151_s3GjU_info" {
     lvl151_s3GjU_info:
         const lvl151_s3GjU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3J4x() //  [R1]
         { []
         }
     {offset
       c3J4x: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wlvl1_s3GjR_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3J4x_info" {
     block_c3J4x_info:
         const _c3J4x;
         const 1;
         const 30;
 },
 sat_s3Gk7_entry() //  [R1, R2]
         { []
         }
     {offset
       c3J4S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3J4W; else goto c3J4V;
       c3J4W: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J4V: // global
           _s3GiR::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = Hp - 15;
           R1 = _s3GiR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gk7_info" {
     sat_s3Gk7_info:
         const sat_s3Gk7_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3Gk8_entry() //  [R1]
         { []
         }
     {offset
       c3J4X: // global
           _s3Gk8::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3J4Y; else goto c3J4Z;
       c3J4Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3J51; else goto c3J50;
       c3J51: // global
           HpAlloc = 16;
           goto c3J4Y;
       c3J4Y: // global
           R1 = _s3Gk8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J50: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gk8::P64;
           _s3GiR::P64 = P64[_s3Gk8::P64 + 16];
           I64[Hp - 8] = sat_s3Gk7_info;
           P64[Hp] = _s3GiR::P64;
           R2 = lvl111_r3yd1_closure+2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.choice_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gk8_info" {
     sat_s3Gk8_info:
         const sat_s3Gk8_entry;
         const 1;
         const 12884901904;
         const S3GvX_srt+1208;
 },
 sat_s3Gk3_entry() //  [R1, R2]
         { []
         }
     {offset
       c3J5a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J5b; else goto c3J5c;
       c3J5b: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J5c: // global
           I64[Sp - 16] = block_c3J57_info;
           _s3GjY::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GjY::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3J5k; else goto c3J58;
       u3J5k: // global
           call _c3J57(R1) args: 0, res: 0, upd: 0;
       c3J58: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gk3_info" {
     sat_s3Gk3_info:
         const sat_s3Gk3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3J57() //  [R1]
         { []
         }
     {offset
       c3J57: // global
           if (I64[R1 + 7] == 94) goto c3J5j; else goto c3J5i;
       c3J5j: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3J5i: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3J57_info" {
     block_c3J57_info:
         const _c3J57;
         const 1;
         const 30;
 },
 sat_s3Gk9_entry() //  [R1]
         { []
         }
     {offset
       c3J5m: // global
           _s3Gk9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3J5n; else goto c3J5o;
       c3J5o: // global
           Hp = Hp + 952;
           if (Hp > HpLim) (likely: False) goto c3J5q; else goto c3J5p;
       c3J5q: // global
           HpAlloc = 952;
           goto c3J5n;
       c3J5n: // global
           R1 = _s3Gk9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J5p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gk9::P64;
           _s3GiR::P64 = P64[_s3Gk9::P64 + 16];
           _s3GiS::P64 = P64[_s3Gk9::P64 + 24];
           _s3GiT::P64 = P64[_s3Gk9::P64 + 32];
           _s3GiU::P64 = P64[_s3Gk9::P64 + 40];
           _s3GiV::P64 = P64[_s3Gk9::P64 + 48];
           _s3GiW::P64 = P64[_s3Gk9::P64 + 56];
           _s3GiX::P64 = P64[_s3Gk9::P64 + 64];
           _s3GiY::P64 = P64[_s3Gk9::P64 + 72];
           I64[Hp - 944] = lvl126_s3Gjs_info;
           P64[Hp - 928] = _s3GiR::P64;
           I64[Hp - 920] = lvl127_s3Gjt_info;
           P64[Hp - 904] = _s3GiR::P64;
           I64[Hp - 896] = lvl128_s3Gju_info;
           P64[Hp - 880] = _s3GiR::P64;
           I64[Hp - 872] = lvl129_s3Gjv_info;
           P64[Hp - 856] = _s3GiR::P64;
           I64[Hp - 848] = lvl130_s3Gjw_info;
           P64[Hp - 832] = _s3GiR::P64;
           I64[Hp - 824] = lvl131_s3Gjx_info;
           P64[Hp - 808] = _s3GiR::P64;
           I64[Hp - 800] = lvl132_s3Gjy_info;
           P64[Hp - 784] = _s3GiR::P64;
           I64[Hp - 776] = lvl133_s3Gjz_info;
           P64[Hp - 760] = _s3GiR::P64;
           I64[Hp - 752] = lvl134_s3GjA_info;
           P64[Hp - 736] = _s3GiR::P64;
           I64[Hp - 728] = lvl135_s3GjB_info;
           P64[Hp - 712] = _s3GiR::P64;
           I64[Hp - 704] = lvl136_s3GjC_info;
           P64[Hp - 688] = _s3GiR::P64;
           I64[Hp - 680] = lvl137_s3GjD_info;
           P64[Hp - 664] = _s3GiR::P64;
           I64[Hp - 656] = lvl138_s3GjE_info;
           P64[Hp - 640] = _s3GiR::P64;
           I64[Hp - 632] = lvl139_s3GjF_info;
           P64[Hp - 616] = _s3GiR::P64;
           I64[Hp - 608] = lvl140_s3GjG_info;
           P64[Hp - 592] = _s3GiR::P64;
           I64[Hp - 584] = lvl141_s3GjH_info;
           P64[Hp - 568] = _s3GiR::P64;
           I64[Hp - 560] = lvl142_s3GjI_info;
           P64[Hp - 544] = _s3GiR::P64;
           I64[Hp - 536] = lvl143_s3GjJ_info;
           P64[Hp - 520] = _s3GiR::P64;
           I64[Hp - 512] = lvl144_s3GjK_info;
           P64[Hp - 496] = _s3GiR::P64;
           I64[Hp - 488] = lvl145_s3GjL_info;
           P64[Hp - 472] = _s3GiR::P64;
           I64[Hp - 464] = lvl146_s3GjM_info;
           P64[Hp - 448] = _s3GiR::P64;
           I64[Hp - 440] = lvl147_s3GjN_info;
           P64[Hp - 424] = _s3GiR::P64;
           I64[Hp - 416] = lvl148_s3GjO_info;
           P64[Hp - 400] = _s3GiR::P64;
           I64[Hp - 392] = lvl149_s3GjP_info;
           P64[Hp - 376] = _s3GiR::P64;
           I64[Hp - 368] = lvl150_s3GjQ_info;
           P64[Hp - 352] = _s3GiR::P64;
           I64[Hp - 344] = $wlvl1_s3GjR_info;
           P64[Hp - 336] = _s3GiS::P64;
           P64[Hp - 328] = _s3GiT::P64;
           P64[Hp - 320] = _s3GiU::P64;
           P64[Hp - 312] = _s3GiV::P64;
           P64[Hp - 304] = _s3GiW::P64;
           P64[Hp - 296] = _s3GiX::P64;
           P64[Hp - 288] = _s3GiY::P64;
           P64[Hp - 280] = Hp - 944;
           P64[Hp - 272] = Hp - 920;
           P64[Hp - 264] = Hp - 896;
           P64[Hp - 256] = Hp - 872;
           P64[Hp - 248] = Hp - 848;
           P64[Hp - 240] = Hp - 824;
           P64[Hp - 232] = Hp - 800;
           P64[Hp - 224] = Hp - 776;
           P64[Hp - 216] = Hp - 752;
           P64[Hp - 208] = Hp - 728;
           P64[Hp - 200] = Hp - 704;
           P64[Hp - 192] = Hp - 680;
           P64[Hp - 184] = Hp - 656;
           P64[Hp - 176] = Hp - 632;
           P64[Hp - 168] = Hp - 608;
           P64[Hp - 160] = Hp - 584;
           P64[Hp - 152] = Hp - 560;
           P64[Hp - 144] = Hp - 536;
           P64[Hp - 136] = Hp - 512;
           P64[Hp - 128] = Hp - 488;
           P64[Hp - 120] = Hp - 464;
           P64[Hp - 112] = Hp - 440;
           P64[Hp - 104] = Hp - 416;
           P64[Hp - 96] = Hp - 392;
           P64[Hp - 88] = Hp - 368;
           I64[Hp - 80] = lvl151_s3GjU_info;
           P64[Hp - 72] = Hp - 343;
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 56] = Hp - 79;
           I64[Hp - 48] = sat_s3Gk8_info;
           P64[Hp - 32] = _s3GiR::P64;
           I64[Hp - 24] = sat_s3Gk3_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gk9_info" {
     sat_s3Gk9_info:
         const sat_s3Gk9_entry;
         const 8;
         const 30064771087;
         const S3GvX_srt+1208;
 },
 section ""relreadonly" . u3J6n_srtd" {
     u3J6n_srtd:
         const S3GvX_srt+232;
         const 125;
         const 18031990695526401;
         const 2233785415175766016;
 },
 sat_s3Gka_entry() //  [R1]
         { []
         }
     {offset
       c3J5s: // global
           _s3Gka::P64 = R1;
           if ((Sp + -88) < SpLim) (likely: False) goto c3J5t; else goto c3J5u;
       c3J5u: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3J5w; else goto c3J5v;
       c3J5w: // global
           HpAlloc = 16;
           goto c3J5t;
       c3J5t: // global
           R1 = _s3Gka::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J5v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gka::P64;
           _s3GiR::P64 = P64[_s3Gka::P64 + 16];
           _s3GiS::P64 = P64[_s3Gka::P64 + 24];
           _s3GiT::P64 = P64[_s3Gka::P64 + 32];
           _s3GiU::P64 = P64[_s3Gka::P64 + 40];
           _s3GiV::P64 = P64[_s3Gka::P64 + 48];
           _s3GiW::P64 = P64[_s3Gka::P64 + 56];
           _s3GiX::P64 = P64[_s3Gka::P64 + 64];
           _s3GiY::P64 = P64[_s3Gka::P64 + 72];
           I64[Hp - 8] = sat_s3Gjo_info;
           P64[Hp] = _s3GiR::P64;
           I64[Sp - 88] = block_c3J0O_info;
           R4 = Hp - 7;
           R3 = lvl113_r3yd3_closure+1;
           R2 = lvl112_r3yd2_closure+1;
           P64[Sp - 80] = _s3GiR::P64;
           P64[Sp - 72] = _s3GiS::P64;
           P64[Sp - 64] = _s3GiT::P64;
           P64[Sp - 56] = _s3GiU::P64;
           P64[Sp - 48] = _s3GiV::P64;
           P64[Sp - 40] = _s3GiW::P64;
           P64[Sp - 32] = _s3GiX::P64;
           P64[Sp - 24] = _s3GiY::P64;
           Sp = Sp - 88;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gka_info" {
     sat_s3Gka_info:
         const sat_s3Gka_entry;
         const 8;
         const 18446744069414584335;
         const u3J6n_srtd;
 },
 _c3J0O() //  [R1]
         { []
         }
     {offset
       c3J0O: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3J5z; else goto c3J5y;
       c3J5z: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3J5y: // global
           I64[Hp - 88] = sat_s3Gk9_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 88;
           R2 = Hp - 6;
           Sp = Sp + 72;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3J0O_info" {
     block_c3J0O_info:
         const _c3J0O;
         const 8;
         const 30064771102;
         const S3GvX_srt+1208;
 },
 sat_s3Gj6_entry() //  [R1, R2]
         { []
         }
     {offset
       c3J5I: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3J5J; else goto c3J5K;
       c3J5J: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J5K: // global
           I64[Sp - 88] = block_c3J5F_info;
           _s3GiS::P64 = P64[R1 + 7];
           _s3GiT::P64 = P64[R1 + 15];
           _s3GiU::P64 = P64[R1 + 23];
           _s3GiV::P64 = P64[R1 + 31];
           _s3GiW::P64 = P64[R1 + 39];
           _s3GiX::P64 = P64[R1 + 47];
           _s3GiY::P64 = P64[R1 + 55];
           _s3GiZ::P64 = P64[R1 + 63];
           _s3Gj0::P64 = P64[R1 + 71];
           _s3Gj1::P64 = P64[R1 + 79];
           R1 = R2;
           P64[Sp - 80] = _s3GiS::P64;
           P64[Sp - 72] = _s3GiT::P64;
           P64[Sp - 64] = _s3GiU::P64;
           P64[Sp - 56] = _s3GiV::P64;
           P64[Sp - 48] = _s3GiW::P64;
           P64[Sp - 40] = _s3GiX::P64;
           P64[Sp - 32] = _s3GiY::P64;
           P64[Sp - 24] = _s3GiZ::P64;
           P64[Sp - 16] = _s3Gj0::P64;
           P64[Sp - 8] = _s3Gj1::P64;
           Sp = Sp - 88;
           if (R1 & 7 != 0) goto u3J6e; else goto c3J5G;
       u3J6e: // global
           call _c3J5F(R1) args: 0, res: 0, upd: 0;
       c3J5G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gj6_info" {
     sat_s3Gj6_info:
         const sat_s3Gj6_entry;
         const 10;
         const 8;
         const 4294967301;
 },
 _c3J5F() //  [R1]
         { []
         }
     {offset
       c3J5F: // global
           _s3Gj5::I64 = I64[R1 + 7];
           if (_s3Gj5::I64 < 99) goto u3J61; else goto u3J67;
       u3J61: // global
           if (_s3Gj5::I64 < 97) goto u3J62; else goto u3J66;
       u3J62: // global
           if (_s3Gj5::I64 < 40) goto u3J63; else goto u3J65;
       u3J63: // global
           if (_s3Gj5::I64 < 39) goto u3J64; else goto c3J5S;
       u3J64: // global
           if (_s3Gj5::I64 != 34) goto c3J5Q; else goto c3J5R;
       c3J5R: // global
           R1 = P64[Sp + 80] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J5S: // global
           R1 = P64[Sp + 72] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3J65: // global
           if (_s3Gj5::I64 != 92) goto c3J5Q; else goto c3J5T;
       c3J5T: // global
           R1 = P64[Sp + 64] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3J66: // global
           if (_s3Gj5::I64 < 98) goto c3J5U; else goto c3J5V;
       c3J5U: // global
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J5V: // global
           R1 = P64[Sp + 48] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3J67: // global
           if (_s3Gj5::I64 < 116) goto u3J68; else goto u3J6c;
       u3J68: // global
           if (_s3Gj5::I64 < 111) goto u3J69; else goto u3J6b;
       u3J69: // global
           if (_s3Gj5::I64 < 110) goto u3J6a; else goto c3J5X;
       u3J6a: // global
           if (_s3Gj5::I64 != 102) goto c3J5Q; else goto c3J5W;
       c3J5W: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J5X: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3J6b: // global
           if (_s3Gj5::I64 != 114) goto c3J5Q; else goto c3J5Y;
       c3J5Y: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3J6c: // global
           if (_s3Gj5::I64 < 117) goto c3J5Z; else goto u3J6d;
       c3J5Z: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3J6d: // global
           if (_s3Gj5::I64 != 118) goto c3J5Q; else goto c3J60;
       c3J5Q: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3J60: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3J5F_info" {
     block_c3J5F_info:
         const _c3J5F;
         const 10;
         const 30;
 },
 section ""relreadonly" . u3J6o_srtd" {
     u3J6o_srtd:
         const S3GvX_srt+232;
         const 126;
         const 18031990695526401;
         const 4539628424389459968;
 },
 Text.Read.Lex.lexChar2_entry() //  [R2]
         { []
         }
     {offset
       c3J6g: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto c3J6k; else goto c3J6j;
       c3J6k: // global
           HpAlloc = 424;
           R2 = R2;
           R1 = Text.Read.Lex.lexChar2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J6j: // global
           I64[Hp - 416] = lvl116_s3GiS_info;
           P64[Hp - 400] = R2;
           I64[Hp - 392] = lvl117_s3GiT_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = lvl118_s3GiU_info;
           P64[Hp - 352] = R2;
           I64[Hp - 344] = lvl119_s3GiV_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = lvl120_s3GiW_info;
           P64[Hp - 304] = R2;
           I64[Hp - 296] = lvl121_s3GiX_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = lvl122_s3GiY_info;
           P64[Hp - 256] = R2;
           I64[Hp - 248] = lvl123_s3GiZ_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = lvl124_s3Gj0_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = lvl125_s3Gj1_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s3Gka_info;
           P64[Hp - 160] = R2;
           _c3IYf::P64 = Hp - 416;
           P64[Hp - 152] = _c3IYf::P64;
           _c3IYm::P64 = Hp - 392;
           P64[Hp - 144] = _c3IYm::P64;
           _c3IYt::P64 = Hp - 368;
           P64[Hp - 136] = _c3IYt::P64;
           _c3IYA::P64 = Hp - 344;
           P64[Hp - 128] = _c3IYA::P64;
           _c3IYH::P64 = Hp - 320;
           P64[Hp - 120] = _c3IYH::P64;
           _c3IYO::P64 = Hp - 296;
           P64[Hp - 112] = _c3IYO::P64;
           _c3IYV::P64 = Hp - 272;
           P64[Hp - 104] = _c3IYV::P64;
           I64[Hp - 96] = sat_s3Gj6_info;
           P64[Hp - 88] = _c3IYf::P64;
           P64[Hp - 80] = _c3IYm::P64;
           P64[Hp - 72] = _c3IYt::P64;
           P64[Hp - 64] = _c3IYA::P64;
           P64[Hp - 56] = _c3IYH::P64;
           P64[Hp - 48] = _c3IYO::P64;
           P64[Hp - 40] = _c3IYV::P64;
           P64[Hp - 32] = Hp - 248;
           P64[Hp - 24] = Hp - 224;
           P64[Hp - 16] = Hp - 200;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 95;
           R3 = Hp - 176;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lexChar2_info" {
     Text.Read.Lex.lexChar2_info:
         const Text.Read.Lex.lexChar2_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3J6o_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.363684975 UTC

[section ""cstring" . Text.Read.Lex.lexChar4_bytes" {
     Text.Read.Lex.lexChar4_bytes:
         I8[] [92,38]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.366012195 UTC

[section ""data" . Text.Read.Lex.lexChar3_closure" {
     Text.Read.Lex.lexChar3_closure:
         const Text.Read.Lex.lexChar3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.lexChar3_entry() //  [R1]
         { []
         }
     {offset
       c3Jef: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jeg; else goto c3Jeh;
       c3Jeg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jeh: // global
           (_c3Jec::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Jec::I64 == 0) goto c3Jee; else goto c3Jed;
       c3Jee: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Jed: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Jec::I64;
           R2 = Text.Read.Lex.lexChar4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lexChar3_info" {
     Text.Read.Lex.lexChar3_info:
         const Text.Read.Lex.lexChar3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.374623065 UTC

[section ""data" . Text.Read.Lex.$wlvl_closure" {
     Text.Read.Lex.$wlvl_closure:
         const Text.Read.Lex.$wlvl_info;
         const 0;
 },
 lvl116_s3Gkc_entry() //  [R1]
         { []
         }
     {offset
       c3JeB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JeC; else goto c3JeD;
       c3JeC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JeD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Jey_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wconsumeEmpties_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gkc_info" {
     lvl116_s3Gkc_info:
         const lvl116_s3Gkc_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+1240;
 },
 _c3Jey() //  [R1]
         { []
         }
     {offset
       c3Jey: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JeG; else goto c3JeF;
       c3JeG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3JeF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Jey_info" {
     block_c3Jey_info:
         const _c3Jey;
         const 0;
         const 30;
 },
 sat_s3Gkg_entry() //  [R1]
         { []
         }
     {offset
       c3JeM: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gkg_info" {
     sat_s3Gkg_info:
         const sat_s3Gkg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.Read.Lex.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c3JeP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3JeT; else goto c3JeS;
       c3JeT: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Text.Read.Lex.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JeS: // global
           I64[Hp - 32] = lvl116_s3Gkc_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3Gkg_info;
           P64[Hp] = Hp - 32;
           R3 = Hp - 7;
           R2 = Text.Read.Lex.lexChar3_closure;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wlvl_info" {
     Text.Read.Lex.$wlvl_info:
         const Text.Read.Lex.$wlvl_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S3GvX_srt+1240;
 },
 section ""data" . Text.Read.Lex.$wconsumeEmpties_closure" {
     Text.Read.Lex.$wconsumeEmpties_closure:
         const Text.Read.Lex.$wconsumeEmpties_info;
         const 0;
 },
 lvl116_s3Gki_entry() //  [R1]
         { []
         }
     {offset
       c3Jf5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Jf6; else goto c3Jf7;
       c3Jf6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jf7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Jf2_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gki_info" {
     lvl116_s3Gki_info:
         const lvl116_s3Gki_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+1248;
 },
 _c3Jf2() //  [R1]
         { []
         }
     {offset
       c3Jf2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Jfa; else goto c3Jf9;
       c3Jfa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Jf9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Jf2_info" {
     block_c3Jf2_info:
         const _c3Jf2;
         const 0;
         const 30;
 },
 lvl117_s3Gkl_entry() //  [R1]
         { []
         }
     {offset
       c3Jff: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jfg; else goto c3Jfh;
       c3Jfg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jfh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3Gkl_info" {
     lvl117_s3Gkl_info:
         const lvl117_s3Gkl_entry;
         const 1;
         const 16;
 },
 sat_s3Gkz_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Jfu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Jfv; else goto c3Jfw;
       c3Jfv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jfw: // global
           I64[Sp - 24] = block_c3Jfn_info;
           _s3Gki::P64 = P64[R1 + 7];
           _s3Gkl::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3Gki::P64;
           P64[Sp - 8] = _s3Gkl::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Jgi; else goto c3Jfo;
       u3Jgi: // global
           call _c3Jfn(R1) args: 0, res: 0, upd: 0;
       c3Jfo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gkz_info" {
     sat_s3Gkz_info:
         const sat_s3Gkz_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3Jfn() //  [R1]
         { []
         }
     {offset
       c3Jfn: // global
           if (R1 & 7 == 1) goto u3Jgc; else goto c3Jfs;
       u3Jgc: // global
           Sp = Sp + 16;
           call _c3Jg9() args: 0, res: 0, upd: 0;
       c3Jfs: // global
           I64[Sp - 8] = block_c3JfC_info;
           _s3Gkp::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3Gkp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Jgg; else goto c3JfE;
       u3Jgg: // global
           call _c3JfC(R1) args: 0, res: 0, upd: 0;
       c3JfE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Jfn_info" {
     block_c3Jfn_info:
         const _c3Jfn;
         const 2;
         const 30;
 },
 _c3JfC() //  [R1]
         { []
         }
     {offset
       c3JfC: // global
           if (I64[R1 + 7] == 92) goto c3JfP; else goto u3Jgd;
       c3JfP: // global
           _s3Gkp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3JfO_info;
           R1 = _s3Gkp::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Jgj; else goto c3JfQ;
       u3Jgj: // global
           call _c3JfO(R1) args: 0, res: 0, upd: 0;
       c3JfQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Jgd: // global
           Sp = Sp + 24;
           call _c3Jg9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3JfC_info" {
     block_c3JfC_info:
         const _c3JfC;
         const 3;
         const 30;
 },
 _c3JfO() //  [R1]
         { []
         }
     {offset
       c3JfO: // global
           if (R1 & 7 == 1) goto u3Jge; else goto c3Jg1;
       u3Jge: // global
           Sp = Sp + 16;
           call _c3Jg9() args: 0, res: 0, upd: 0;
       c3Jg1: // global
           I64[Sp] = block_c3JfZ_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3Jgl; else goto c3Jg2;
       u3Jgl: // global
           call _c3JfZ(R1) args: 0, res: 0, upd: 0;
       c3Jg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JfO_info" {
     block_c3JfO_info:
         const _c3JfO;
         const 2;
         const 30;
 },
 _c3JfZ() //  [R1]
         { []
         }
     {offset
       c3JfZ: // global
           if (I64[R1 + 7] == 38) goto c3Jga; else goto u3Jgf;
       c3Jga: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Jgf: // global
           Sp = Sp + 16;
           call _c3Jg9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3JfZ_info" {
     block_c3JfZ_info:
         const _c3JfZ;
         const 2;
         const 30;
 },
 _c3Jg9() //  []
         { []
         }
     {offset
       c3Jg9: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wconsumeEmpties_entry() //  [R2]
         { []
         }
     {offset
       c3Jgo: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Jgs; else goto c3Jgr;
       c3Jgs: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Text.Read.Lex.$wconsumeEmpties_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jgr: // global
           I64[Hp - 64] = lvl116_s3Gki_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl117_s3Gkl_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3Gkz_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wconsumeEmpties_info" {
     Text.Read.Lex.$wconsumeEmpties_info:
         const Text.Read.Lex.$wconsumeEmpties_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.400917153 UTC

[section ""data" . Text.Read.Lex.lexChar5_closure" {
     Text.Read.Lex.lexChar5_closure:
         const Text.Read.Lex.lexChar5_info;
         const 0;
 },
 Text.Read.Lex.lexChar5_entry() //  [R2]
         { []
         }
     {offset
       c3JhW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3JhX; else goto c3JhY;
       c3JhX: // global
           R2 = R2;
           R1 = Text.Read.Lex.lexChar5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JhY: // global
           I64[Sp - 8] = block_c3JhT_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wconsumeEmpties_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lexChar5_info" {
     Text.Read.Lex.lexChar5_info:
         const Text.Read.Lex.lexChar5_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S3GvX_srt+1240;
 },
 _c3JhT() //  [R1]
         { []
         }
     {offset
       c3JhT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ji1; else goto c3Ji0;
       c3Ji1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ji0: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JhT_info" {
     block_c3JhT_info:
         const _c3JhT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.415518392 UTC

[section ""data" . Text.Read.Lex.$wlexChar_closure" {
     Text.Read.Lex.$wlexChar_closure:
         const Text.Read.Lex.$wlexChar_info;
         const 0;
 },
 sat_s3GkN_entry() //  [R1]
         { []
         }
     {offset
       c3JiF: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GkN_info" {
     sat_s3GkN_info:
         const sat_s3GkN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl118_s3GkL_entry() //  [R1]
         { []
         }
     {offset
       c3JiL: // global
           _s3GkL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3JiM; else goto c3JiN;
       c3JiN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JiP; else goto c3JiO;
       c3JiP: // global
           HpAlloc = 16;
           goto c3JiM;
       c3JiM: // global
           R1 = _s3GkL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JiO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GkL::P64;
           _s3GkK::P64 = P64[_s3GkL::P64 + 16];
           I64[Hp - 8] = sat_s3GkN_info;
           P64[Hp] = _s3GkK::P64;
           I64[Sp - 24] = block_c3JiI_info;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl118_s3GkL_info" {
     lvl118_s3GkL_info:
         const lvl118_s3GkL_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+1248;
 },
 _c3JiI() //  [R1]
         { []
         }
     {offset
       c3JiI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JiS; else goto c3JiR;
       c3JiS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3JiR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3JiI_info" {
     block_c3JiI_info:
         const _c3JiI;
         const 0;
         const 30;
 },
 sat_s3Gl3_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Jj5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Jj6; else goto c3Jj7;
       c3Jj6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jj7: // global
           I64[Sp - 24] = block_c3JiY_info;
           _s3GkK::P64 = P64[R1 + 7];
           _s3GkL::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3GkK::P64;
           P64[Sp - 8] = _s3GkL::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3JjT; else goto c3JiZ;
       u3JjT: // global
           call _c3JiY(R1) args: 0, res: 0, upd: 0;
       c3JiZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gl3_info" {
     sat_s3Gl3_info:
         const sat_s3Gl3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3JiY() //  [R1]
         { []
         }
     {offset
       c3JiY: // global
           if (R1 & 7 == 1) goto u3JjN; else goto c3Jj3;
       u3JjN: // global
           Sp = Sp + 8;
           call _c3JjK() args: 0, res: 0, upd: 0;
       c3Jj3: // global
           I64[Sp - 8] = block_c3Jjd_info;
           _s3GkT::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3GkT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3JjR; else goto c3Jjf;
       u3JjR: // global
           call _c3Jjd(R1) args: 0, res: 0, upd: 0;
       c3Jjf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JiY_info" {
     block_c3JiY_info:
         const _c3JiY;
         const 2;
         const 30;
 },
 _c3Jjd() //  [R1]
         { []
         }
     {offset
       c3Jjd: // global
           if (I64[R1 + 7] == 92) goto c3Jjq; else goto u3JjO;
       c3Jjq: // global
           _s3GkT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Jjp_info;
           R1 = _s3GkT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3JjU; else goto c3Jjr;
       u3JjU: // global
           call _c3Jjp(R1) args: 0, res: 0, upd: 0;
       c3Jjr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3JjO: // global
           Sp = Sp + 16;
           call _c3JjK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Jjd_info" {
     block_c3Jjd_info:
         const _c3Jjd;
         const 3;
         const 30;
 },
 _c3Jjp() //  [R1]
         { []
         }
     {offset
       c3Jjp: // global
           if (R1 & 7 == 1) goto u3JjP; else goto c3JjC;
       u3JjP: // global
           Sp = Sp + 8;
           call _c3JjK() args: 0, res: 0, upd: 0;
       c3JjC: // global
           I64[Sp] = block_c3JjA_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3JjW; else goto c3JjD;
       u3JjW: // global
           call _c3JjA(R1) args: 0, res: 0, upd: 0;
       c3JjD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Jjp_info" {
     block_c3Jjp_info:
         const _c3Jjp;
         const 2;
         const 30;
 },
 _c3JjA() //  [R1]
         { []
         }
     {offset
       c3JjA: // global
           if (I64[R1 + 7] == 38) goto c3JjL; else goto u3JjQ;
       c3JjL: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3JjQ: // global
           Sp = Sp + 8;
           call _c3JjK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3JjA_info" {
     block_c3JjA_info:
         const _c3JjA;
         const 2;
         const 30;
 },
 _c3JjK() //  []
         { []
         }
     {offset
       c3JjK: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k_s3GkF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JjZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jk1; else goto c3Jk2;
       c3Jk1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jk2: // global
           I64[Sp - 16] = block_c3Jiq_info;
           _s3GkD::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GkD::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Jk6; else goto c3Jir;
       u3Jk6: // global
           call _c3Jiq(R1) args: 0, res: 0, upd: 0;
       c3Jir: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . k_s3GkF_info" {
     k_s3GkF_info:
         const k_s3GkF_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+1248;
 },
 _c3Jiq() //  [R1]
         { []
         }
     {offset
       c3Jiq: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Jk5; else goto c3Jk4;
       c3Jk5: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Jk4: // global
           _s3GkI::P64 = P64[R1 + 7];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _s3GkI::P64;
           I64[Hp - 56] = lvl118_s3GkL_info;
           _c3Jiv::P64 = Hp - 88;
           P64[Hp - 40] = _c3Jiv::P64;
           I64[Hp - 32] = sat_s3Gl3_info;
           P64[Hp - 24] = _c3Jiv::P64;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Jiq_info" {
     block_c3Jiq_info:
         const _c3Jiq;
         const 1;
         const 4294967326;
         const S3GvX_srt+1248;
 },
 lvl116_s3GkE_entry() //  [R1]
         { []
         }
     {offset
       c3Jk7: // global
           _s3GkE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jk8; else goto c3Jk9;
       c3Jk9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Jkb; else goto c3Jka;
       c3Jkb: // global
           HpAlloc = 16;
           goto c3Jk8;
       c3Jk8: // global
           R1 = _s3GkE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jka: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GkE::P64;
           _s3GkD::P64 = P64[_s3GkE::P64 + 16];
           I64[Hp - 8] = k_s3GkF_info;
           P64[Hp] = _s3GkD::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GkE_info" {
     lvl116_s3GkE_info:
         const lvl116_s3GkE_entry;
         const 1;
         const 21474836496;
         const S3GvX_srt+1232;
 },
 sat_s3Glb_entry() //  [R1]
         { []
         }
     {offset
       c3Jky: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Glb_info" {
     sat_s3Glb_info:
         const sat_s3Glb_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl118_s3Gl9_entry() //  [R1]
         { []
         }
     {offset
       c3JkE: // global
           _s3Gl9::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3JkF; else goto c3JkG;
       c3JkG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JkI; else goto c3JkH;
       c3JkI: // global
           HpAlloc = 16;
           goto c3JkF;
       c3JkF: // global
           R1 = _s3Gl9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JkH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gl9::P64;
           _s3Gl8::P64 = P64[_s3Gl9::P64 + 16];
           I64[Hp - 8] = sat_s3Glb_info;
           P64[Hp] = _s3Gl8::P64;
           I64[Sp - 24] = block_c3JkB_info;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl118_s3Gl9_info" {
     lvl118_s3Gl9_info:
         const lvl118_s3Gl9_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+1248;
 },
 _c3JkB() //  [R1]
         { []
         }
     {offset
       c3JkB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JkL; else goto c3JkK;
       c3JkL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3JkK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3JkB_info" {
     block_c3JkB_info:
         const _c3JkB;
         const 0;
         const 30;
 },
 sat_s3Glr_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JkY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3JkZ; else goto c3Jl0;
       c3JkZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jl0: // global
           I64[Sp - 24] = block_c3JkR_info;
           _s3Gl8::P64 = P64[R1 + 7];
           _s3Gl9::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3Gl8::P64;
           P64[Sp - 8] = _s3Gl9::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3JlM; else goto c3JkS;
       u3JlM: // global
           call _c3JkR(R1) args: 0, res: 0, upd: 0;
       c3JkS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Glr_info" {
     sat_s3Glr_info:
         const sat_s3Glr_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3JkR() //  [R1]
         { []
         }
     {offset
       c3JkR: // global
           if (R1 & 7 == 1) goto u3JlG; else goto c3JkW;
       u3JlG: // global
           Sp = Sp + 8;
           call _c3JlD() args: 0, res: 0, upd: 0;
       c3JkW: // global
           I64[Sp - 8] = block_c3Jl6_info;
           _s3Glh::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3Glh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3JlK; else goto c3Jl8;
       u3JlK: // global
           call _c3Jl6(R1) args: 0, res: 0, upd: 0;
       c3Jl8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JkR_info" {
     block_c3JkR_info:
         const _c3JkR;
         const 2;
         const 30;
 },
 _c3Jl6() //  [R1]
         { []
         }
     {offset
       c3Jl6: // global
           if (I64[R1 + 7] == 92) goto c3Jlj; else goto u3JlH;
       c3Jlj: // global
           _s3Glh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Jli_info;
           R1 = _s3Glh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3JlN; else goto c3Jlk;
       u3JlN: // global
           call _c3Jli(R1) args: 0, res: 0, upd: 0;
       c3Jlk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3JlH: // global
           Sp = Sp + 16;
           call _c3JlD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Jl6_info" {
     block_c3Jl6_info:
         const _c3Jl6;
         const 3;
         const 30;
 },
 _c3Jli() //  [R1]
         { []
         }
     {offset
       c3Jli: // global
           if (R1 & 7 == 1) goto u3JlI; else goto c3Jlv;
       u3JlI: // global
           Sp = Sp + 8;
           call _c3JlD() args: 0, res: 0, upd: 0;
       c3Jlv: // global
           I64[Sp] = block_c3Jlt_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3JlP; else goto c3Jlw;
       u3JlP: // global
           call _c3Jlt(R1) args: 0, res: 0, upd: 0;
       c3Jlw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Jli_info" {
     block_c3Jli_info:
         const _c3Jli;
         const 2;
         const 30;
 },
 _c3Jlt() //  [R1]
         { []
         }
     {offset
       c3Jlt: // global
           if (I64[R1 + 7] == 38) goto c3JlE; else goto u3JlJ;
       c3JlE: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3JlJ: // global
           Sp = Sp + 8;
           call _c3JlD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Jlt_info" {
     block_c3Jlt_info:
         const _c3Jlt;
         const 2;
         const 30;
 },
 _c3JlD() //  []
         { []
         }
     {offset
       c3JlD: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gls_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JlS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JlT; else goto c3JlU;
       c3JlT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JlU: // global
           I64[Sp - 24] = block_c3Jkh_info;
           _s3GkD::P64 = P64[R1 + 7];
           _s3GkE::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3GkD::P64;
           P64[Sp - 8] = _s3GkE::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Jm2; else goto c3Jki;
       u3Jm2: // global
           call _c3Jkh(R1) args: 0, res: 0, upd: 0;
       c3Jki: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gls_info" {
     sat_s3Gls_info:
         const sat_s3Gls_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3GvX_srt+1248;
 },
 _c3Jkh() //  [R1]
         { []
         }
     {offset
       c3Jkh: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3JlX; else goto c3JlW;
       c3JlX: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JlW: // global
           if (I64[R1 + 7] == 92) goto c3Jm1; else goto c3Jm0;
       c3Jm1: // global
           Hp = Hp - 96;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Jm0: // global
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = lvl118_s3Gl9_info;
           _c3Jko::P64 = Hp - 88;
           P64[Hp - 40] = _c3Jko::P64;
           I64[Hp - 32] = sat_s3Glr_info;
           P64[Hp - 24] = _c3Jko::P64;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Jkh_info" {
     block_c3Jkh_info:
         const _c3Jkh;
         const 2;
         const 4294967326;
         const S3GvX_srt+1248;
 },
 Text.Read.Lex.$wlexChar_entry() //  [R2]
         { []
         }
     {offset
       c3Jm3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Jm7; else goto c3Jm6;
       c3Jm7: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Text.Read.Lex.$wlexChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jm6: // global
           I64[Hp - 40] = lvl116_s3GkE_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3Gls_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wlexChar_info" {
     Text.Read.Lex.$wlexChar_info:
         const Text.Read.Lex.$wlexChar_entry;
         const 0;
         const 158913789966;
         const 4294967301;
         const S3GvX_srt+1232;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.45711299 UTC

[section ""data" . Text.Read.Lex.lexChar1_closure" {
     Text.Read.Lex.lexChar1_closure:
         const Text.Read.Lex.lexChar1_info;
         const 0;
 },
 Text.Read.Lex.lexChar1_entry() //  [R2]
         { []
         }
     {offset
       c3JoH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3JoI; else goto c3JoJ;
       c3JoI: // global
           R2 = R2;
           R1 = Text.Read.Lex.lexChar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JoJ: // global
           I64[Sp - 8] = block_c3JoE_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wlexChar_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lexChar1_info" {
     Text.Read.Lex.lexChar1_info:
         const Text.Read.Lex.lexChar1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1272;
 },
 _c3JoE() //  [R1]
         { []
         }
     {offset
       c3JoE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JoM; else goto c3JoL;
       c3JoM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JoL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JoE_info" {
     block_c3JoE_info:
         const _c3JoE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.462405245 UTC

[section ""data" . Text.Read.Lex.lexChar_closure" {
     Text.Read.Lex.lexChar_closure:
         const Text.Read.Lex.lexChar_info;
         const 0;
 },
 Text.Read.Lex.lexChar_entry() //  [R2]
         { []
         }
     {offset
       c3Jp2: // global
           R2 = R2;
           call Text.Read.Lex.lexChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lexChar_info" {
     Text.Read.Lex.lexChar_info:
         const Text.Read.Lex.lexChar_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3GvX_srt+1280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.471811881 UTC

[section ""data" . lexStrItem_r3yd4_closure" {
     lexStrItem_r3yd4_closure:
         const lexStrItem_r3yd4_info;
         const 0;
 },
 lvl116_s3Glx_entry() //  [R1]
         { []
         }
     {offset
       c3Jph: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jpi; else goto c3Jpj;
       c3Jpi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jpj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call lexStrItem_r3yd4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Glx_info" {
     lvl116_s3Glx_info:
         const lvl116_s3Glx_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+1288;
 },
 lvl117_s3Gly_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Jps: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jpt; else goto c3Jpu;
       c3Jpt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jpu: // global
           I64[Sp - 16] = block_c3Jpp_info;
           _s3Glx::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Glx::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JpC; else goto c3Jpq;
       u3JpC: // global
           call _c3Jpp(R1) args: 0, res: 0, upd: 0;
       c3Jpq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl117_s3Gly_info" {
     lvl117_s3Gly_info:
         const lvl117_s3Gly_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Jpp() //  [R1]
         { []
         }
     {offset
       c3Jpp: // global
           if (I64[R1 + 7] == 92) goto c3JpB; else goto c3JpA;
       c3JpB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JpA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Jpp_info" {
     block_c3Jpp_info:
         const _c3Jpp;
         const 1;
         const 30;
 },
 k1_s3GlE_entry() //  [R1]
         { []
         }
     {offset
       c3JpJ: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_s3GlE_info" {
     k1_s3GlE_info:
         const k1_s3GlE_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl119_s3GlG_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JpR: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl119_s3GlG_info" {
     lvl119_s3GlG_info:
         const lvl119_s3GlG_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 $wlvl1_s3GlI_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Jq3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Jq7; else goto c3Jq6;
       c3Jq7: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jq6: // global
           if (R2 == 38) goto c3Jq2; else goto c3Jq1;
       c3Jq2: // global
           _s3Glx::P64 = P64[R1 + 7];
           Hp = Hp - 16;
           R1 = _s3Glx::P64 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Jq1: // global
           _s3GlG::P64 = P64[R1 + 15];
           if (R2 > 887) goto c3Jqu; else goto c3JqV;
       c3Jqu: // global
           (_s3GlS::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(R2);
           if (_s3GlS::I64 == 0) goto c3JqG; else goto c3Jqr;
       c3Jqr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3GlG::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JqV: // global
           if (R2 == 32) goto c3JqU; else goto c3JqR;
       c3JqU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3GlG::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JqR: // global
           if ((R2 + -9) > 4) goto c3JqM; else goto c3JqP;
       c3JqM: // global
           if (R2 != 160) goto c3JqG; else goto c3JqK;
       c3JqG: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JqK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3GlG::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JqP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3GlG::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl1_s3GlI_info" {
     $wlvl1_s3GlI_info:
         const $wlvl1_s3GlI_entry;
         const 2;
         const 11;
         const 4294967300;
 },
 lvl120_s3GlY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Jr4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jr5; else goto c3Jr6;
       c3Jr5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jr6: // global
           I64[Sp - 16] = block_c3Jr1_info;
           _s3GlI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GlI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Jra; else goto c3Jr2;
       u3Jra: // global
           call _c3Jr1(R1) args: 0, res: 0, upd: 0;
       c3Jr2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl120_s3GlY_info" {
     lvl120_s3GlY_info:
         const lvl120_s3GlY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Jr1() //  [R1]
         { []
         }
     {offset
       c3Jr1: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wlvl1_s3GlI_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Jr1_info" {
     block_c3Jr1_info:
         const _c3Jr1;
         const 1;
         const 30;
 },
 lvl122_s3Gm3_entry() //  [R1]
         { []
         }
     {offset
       c3Jrg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jrh; else goto c3Jri;
       c3Jrh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jri: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl122_s3Gm3_info" {
     lvl122_s3Gm3_info:
         const lvl122_s3Gm3_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+1232;
 },
 sat_s3Gmf_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Jrr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Jrs; else goto c3Jrt;
       c3Jrs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jrt: // global
           I64[Sp - 24] = block_c3Jro_info;
           _s3Glw::P64 = P64[R1 + 7];
           _s3Gm3::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3Glw::P64;
           P64[Sp - 8] = _s3Gm3::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3JrF; else goto c3Jrp;
       u3JrF: // global
           call _c3Jro(R1) args: 0, res: 0, upd: 0;
       c3Jrp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gmf_info" {
     sat_s3Gmf_info:
         const sat_s3Gmf_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3Jro() //  [R1]
         { []
         }
     {offset
       c3Jro: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Jry; else goto c3Jrx;
       c3Jry: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Jrx: // global
           if (I64[R1 + 7] == 92) goto c3JrE; else goto c3JrD;
       c3JrE: // global
           Hp = Hp - 24;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JrD: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = Hp - 15;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Jro_info" {
     block_c3Jro_info:
         const _c3Jro;
         const 2;
         const 30;
 },
 sat_s3Gm8_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JrP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JrQ; else goto c3JrR;
       c3JrQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JrR: // global
           I64[Sp - 16] = block_c3JrM_info;
           _s3Gm2::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gm2::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JrZ; else goto c3JrN;
       u3JrZ: // global
           call _c3JrM(R1) args: 0, res: 0, upd: 0;
       c3JrN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gm8_info" {
     sat_s3Gm8_info:
         const sat_s3Gm8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3JrM() //  [R1]
         { []
         }
     {offset
       c3JrM: // global
           if (I64[R1 + 7] == 92) goto c3JrY; else goto c3JrX;
       c3JrY: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JrX: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JrM_info" {
     block_c3JrM_info:
         const _c3JrM;
         const 1;
         const 30;
 },
 lexStrItem_r3yd4_entry() //  [R2]
         { []
         }
     {offset
       c3Js1: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto c3Js5; else goto c3Js4;
       c3Js5: // global
           HpAlloc = 240;
           R2 = R2;
           R1 = lexStrItem_r3yd4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Js4: // global
           I64[Hp - 232] = lvl116_s3Glx_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = lvl117_s3Gly_info;
           _c3Jpd::P64 = Hp - 232;
           P64[Hp - 200] = _c3Jpd::P64;
           I64[Hp - 192] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 184] = Hp - 207;
           I64[Hp - 176] = k1_s3GlE_info;
           P64[Hp - 168] = Hp - 191;
           I64[Hp - 160] = lvl119_s3GlG_info;
           P64[Hp - 152] = Hp - 175;
           I64[Hp - 144] = $wlvl1_s3GlI_info;
           P64[Hp - 136] = _c3Jpd::P64;
           P64[Hp - 128] = Hp - 159;
           I64[Hp - 120] = lvl120_s3GlY_info;
           P64[Hp - 112] = Hp - 143;
           I64[Hp - 104] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 96] = Hp - 119;
           I64[Hp - 88] = lvl122_s3Gm3_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s3Gmf_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = sat_s3Gm8_info;
           P64[Hp - 16] = Hp - 103;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 39;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lexStrItem_r3yd4_info" {
     lexStrItem_r3yd4_info:
         const lexStrItem_r3yd4_entry;
         const 0;
         const 1112396529678;
         const 4294967301;
         const S3GvX_srt+1224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.506261892 UTC

[section ""data" . body_r3yd5_closure" {
     body_r3yd5_closure:
         const body_r3yd5_info;
         const 0;
 },
 sat_s3Gmk_entry() //  [R1]
         { []
         }
     {offset
       c3Ju2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ju3; else goto c3Ju4;
       c3Ju3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ju4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gmk_info" {
     sat_s3Gmk_info:
         const sat_s3Gmk_entry;
         const 1;
         const 16;
 },
 lvl116_s3Gmj_entry() //  [R1]
         { []
         }
     {offset
       c3Ju6: // global
           _s3Gmj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ju7; else goto c3Ju8;
       c3Ju8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Jua; else goto c3Ju9;
       c3Jua: // global
           HpAlloc = 40;
           goto c3Ju7;
       c3Ju7: // global
           R1 = _s3Gmj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ju9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gmj::P64;
           _s3Gmh::P64 = P64[_s3Gmj::P64 + 16];
           _s3Gmi::P64 = P64[_s3Gmj::P64 + 24];
           I64[Hp - 32] = sat_s3Gmk_info;
           P64[Hp - 16] = _s3Gmh::P64;
           I64[Hp - 8] = Text.Read.Lex.String_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           R1 = _s3Gmi::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gmj_info" {
     lvl116_s3Gmj_info:
         const lvl116_s3Gmj_entry;
         const 2;
         const 18;
 },
 sat_s3Gmv_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JuB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JuF; else goto c3JuE;
       c3JuF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JuE: // global
           _s3Gmh::P64 = P64[R1 + 7];
           _s3Gmq::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3Gmq::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3Gmh::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gmv_info" {
     sat_s3Gmv_info:
         const sat_s3Gmv_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3Gmy_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JuG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3JuH; else goto c3JuI;
       c3JuH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JuI: // global
           I64[Sp - 32] = block_c3Jug_info;
           _s3Gmh::P64 = P64[R1 + 7];
           _s3Gmi::P64 = P64[R1 + 15];
           _s3Gmj::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3Gmh::P64;
           P64[Sp - 16] = _s3Gmi::P64;
           P64[Sp - 8] = _s3Gmj::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3Jvc; else goto c3Juh;
       u3Jvc: // global
           call _c3Jug(R1) args: 0, res: 0, upd: 0;
       c3Juh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gmy_info" {
     sat_s3Gmy_info:
         const sat_s3Gmy_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3GvX_srt+1296;
 },
 _c3Jug() //  [R1]
         { []
         }
     {offset
       c3Jug: // global
           I64[Sp - 8] = block_c3Jul_info;
           _s3Gmp::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3Gmp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Jv9; else goto c3Jum;
       u3Jv9: // global
           call _c3Jul(R1) args: 0, res: 0, upd: 0;
       c3Jum: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Jug_info" {
     block_c3Jug_info:
         const _c3Jug;
         const 3;
         const 4294967326;
         const S3GvX_srt+1296;
 },
 _c3Jul() //  [R1]
         { []
         }
     {offset
       c3Jul: // global
           if (I64[R1 + 7] == 34) goto c3JuU; else goto u3Jv7;
       c3JuU: // global
           I64[Sp] = block_c3JuT_info;
           _s3Gmq::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3Gmq::P64;
           if (R1 & 7 != 0) goto u3Jva; else goto c3JuV;
       u3Jva: // global
           call _c3JuT(R1) args: 0, res: 0, upd: 0;
       c3JuV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Jv7: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3Jut() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Jul_info" {
     block_c3Jul_info:
         const _c3Jul;
         const 4;
         const 4294967326;
         const S3GvX_srt+1296;
 },
 _c3JuT() //  [R1]
         { []
         }
     {offset
       c3JuT: // global
           if (R1 & 7 == 1) goto c3Jv1; else goto u3Jv8;
       c3Jv1: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Jv8: // global
           P64[Sp + 32] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c3Jut() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3JuT_info" {
     block_c3JuT_info:
         const _c3JuT;
         const 4;
         const 4294967326;
         const S3GvX_srt+1296;
 },
 _c3Jut() //  []
         { []
         }
     {offset
       c3Jut: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JuN; else goto c3JuM;
       c3JuN: // global
           HpAlloc = 24;
           I64[Sp] = block_c3Jut_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3JuM: // global
           I64[Hp - 16] = sat_s3Gmv_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = Hp - 15;
           Sp = Sp + 32;
           call body_r3yd5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Jut_info" {
     block_c3Jut_info:
         const _c3Jut;
         const 3;
         const 4294967326;
         const S3GvX_srt+1296;
 },
 body_r3yd5_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Jve: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Jvi; else goto c3Jvh;
       c3Jvi: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = body_r3yd5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Jvh: // global
           I64[Hp - 56] = lvl116_s3Gmj_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3Gmy_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R2 = Hp - 23;
           call lexStrItem_r3yd4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . body_r3yd5_info" {
     body_r3yd5_info:
         const body_r3yd5_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3GvX_srt+1288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.533931285 UTC

[section ""data" . lexExp_r3yd6_closure" {
     lexExp_r3yd6_closure:
         const lexExp_r3yd6_info;
         const 0;
 },
 sat_s3GmI_entry() //  [R1]
         { []
         }
     {offset
       c3JwC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3JwD; else goto c3JwE;
       c3JwD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JwE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3Jwz_info;
           _s3GmD::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3GmD::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3JwT; else goto c3JwA;
       u3JwT: // global
           call _c3Jwz(R1) args: 0, res: 0, upd: 0;
       c3JwA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3GmI_info" {
     sat_s3GmI_info:
         const sat_s3GmI_entry;
         const 2;
         const 12884901906;
         const S3GvX_srt+1304;
 },
 _c3Jwz() //  [R1]
         { []
         }
     {offset
       c3Jwz: // global
           _s3GmD::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 45) goto c3JwO; else goto c3JwK;
       c3JwO: // global
           I64[Sp + 8] = block_c3JwN_info;
           R3 = _s3GmD::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 24;
       c3JwK: // global
           R3 = _s3GmD::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Jwz_info" {
     block_c3Jwz_info:
         const _c3Jwz;
         const 1;
         const 12884901918;
         const S3GvX_srt+1304;
 },
 _c3JwN() //  [R1]
         { []
         }
     {offset
       c3JwN: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3JwN_info" {
     block_c3JwN_info:
         const _c3JwN;
         const 0;
         const 30;
 },
 sat_s3GmK_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JwV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3JwZ; else goto c3JwY;
       c3JwZ: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JwY: // global
           _s3Gmz::P64 = P64[R1 + 7];
           _s3GmC::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3GmI_info;
           P64[Hp - 24] = _s3GmC::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 6;
           R1 = _s3Gmz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GmK_info" {
     sat_s3GmK_info:
         const sat_s3GmK_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const S3GvX_srt+1304;
 },
 section ""relreadonly" . u3Jzf_srtd" {
     u3Jzf_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 k1_s3GmB_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Jx3: // global
           _s3GmC::P64 = R2;
           _s3GmB::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Jx4; else goto c3Jx5;
       c3Jx5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Jx7; else goto c3Jx6;
       c3Jx7: // global
           HpAlloc = 24;
           goto c3Jx4;
       c3Jx4: // global
           R2 = _s3GmC::P64;
           R1 = _s3GmB::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jx6: // global
           _s3Gmz::P64 = P64[_s3GmB::P64 + 7];
           I64[Hp - 16] = sat_s3GmK_info;
           P64[Hp - 8] = _s3Gmz::P64;
           P64[Hp] = _s3GmC::P64;
           I64[Sp - 8] = block_c3Jx0_info;
           R3 = Hp - 15;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 8;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . k1_s3GmB_info" {
     k1_s3GmB_info:
         const k1_s3GmB_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3Jzf_srtd;
 },
 _c3Jx0() //  [R1]
         { []
         }
     {offset
       c3Jx0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Jxa; else goto c3Jx9;
       c3Jxa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Jx9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Jx0_info" {
     block_c3Jx0_info:
         const _c3Jx0;
         const 0;
         const 30;
 },
 sat_s3Gn1_entry() //  [R1]
         { []
         }
     {offset
       c3Jxo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jxp; else goto c3Jxq;
       c3Jxp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jxq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gn1_info" {
     sat_s3Gn1_info:
         const sat_s3Gn1_entry;
         const 1;
         const 12884901904;
         const S3GvX_srt+1304;
 },
 sat_s3Gn3_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Jxs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Jxw; else goto c3Jxv;
       c3Jxw: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jxv: // global
           _s3Gmz::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_s3Gn1_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           R1 = _s3Gmz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gn3_info" {
     sat_s3Gn3_info:
         const sat_s3Gn3_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S3GvX_srt+1304;
 },
 section ""relreadonly" . u3Jzg_srtd" {
     u3Jzg_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3Gn6_entry() //  [R1]
         { []
         }
     {offset
       c3JxA: // global
           _s3Gn6::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3JxB; else goto c3JxC;
       c3JxC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JxE; else goto c3JxD;
       c3JxE: // global
           HpAlloc = 16;
           goto c3JxB;
       c3JxB: // global
           R1 = _s3Gn6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JxD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gn6::P64;
           _s3Gmz::P64 = P64[_s3Gn6::P64 + 16];
           I64[Hp - 8] = sat_s3Gn3_info;
           P64[Hp] = _s3Gmz::P64;
           I64[Sp - 24] = block_c3Jxx_info;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gn6_info" {
     sat_s3Gn6_info:
         const sat_s3Gn6_entry;
         const 1;
         const 18446744069414584336;
         const u3Jzg_srtd;
 },
 _c3Jxx() //  [R1]
         { []
         }
     {offset
       c3Jxx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JxH; else goto c3JxG;
       c3JxH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3JxG: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Jxx_info" {
     block_c3Jxx_info:
         const _c3Jxx;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3Jzh_srtd" {
     u3Jzh_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3GmX_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JxQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JxR; else goto c3JxS;
       c3JxR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JxS: // global
           I64[Sp - 16] = block_c3JxN_info;
           _s3GmB::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GmB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Jy0; else goto c3JxO;
       u3Jy0: // global
           call _c3JxN(R1) args: 0, res: 0, upd: 0;
       c3JxO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GmX_info" {
     sat_s3GmX_info:
         const sat_s3GmX_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3Jzh_srtd;
 },
 section ""relreadonly" . u3Jzi_srtd" {
     u3Jzi_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 _c3JxN() //  [R1]
         { []
         }
     {offset
       c3JxN: // global
           if (I64[R1 + 7] == 43) goto c3JxZ; else goto c3JxY;
       c3JxZ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call k1_s3GmB_entry(R2, R1) args: 8, res: 0, upd: 8;
       c3JxY: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JxN_info" {
     block_c3JxN_info:
         const _c3JxN;
         const 1;
         const 18446744069414584350;
         const u3Jzi_srtd;
 },
 section ""relreadonly" . u3Jzj_srtd" {
     u3Jzj_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3GmR_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Jya: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jyb; else goto c3Jyc;
       c3Jyb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jyc: // global
           I64[Sp - 16] = block_c3Jy7_info;
           _s3GmB::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GmB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Jyk; else goto c3Jy8;
       u3Jyk: // global
           call _c3Jy7(R1) args: 0, res: 0, upd: 0;
       c3Jy8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GmR_info" {
     sat_s3GmR_info:
         const sat_s3GmR_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3Jzj_srtd;
 },
 section ""relreadonly" . u3Jzk_srtd" {
     u3Jzk_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 _c3Jy7() //  [R1]
         { []
         }
     {offset
       c3Jy7: // global
           if (I64[R1 + 7] == 45) goto c3Jyj; else goto c3Jyi;
       c3Jyj: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call k1_s3GmB_entry(R2, R1) args: 8, res: 0, upd: 8;
       c3Jyi: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Jy7_info" {
     block_c3Jy7_info:
         const _c3Jy7;
         const 1;
         const 18446744069414584350;
         const u3Jzk_srtd;
 },
 section ""relreadonly" . u3Jzl_srtd" {
     u3Jzl_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201392128;
 },
 lvl116_s3GmA_entry() //  [R1]
         { []
         }
     {offset
       c3Jyo: // global
           _s3GmA::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Jyp; else goto c3Jyq;
       c3Jyq: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3Jys; else goto c3Jyr;
       c3Jys: // global
           HpAlloc = 104;
           goto c3Jyp;
       c3Jyp: // global
           R1 = _s3GmA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jyr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GmA::P64;
           _s3Gmz::P64 = P64[_s3GmA::P64 + 16];
           I64[Hp - 96] = k1_s3GmB_info;
           P64[Hp - 88] = _s3Gmz::P64;
           I64[Hp - 80] = sat_s3Gn6_info;
           P64[Hp - 64] = _s3Gmz::P64;
           I64[Hp - 56] = sat_s3GmX_info;
           _c3Jwl::P64 = Hp - 95;
           P64[Hp - 48] = _c3Jwl::P64;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = sat_s3GmR_info;
           P64[Hp - 16] = _c3Jwl::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 32] = block_c3Jym_info;
           R3 = Hp - 39;
           R2 = Hp - 7;
           P64[Sp - 24] = Hp - 80;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GmA_info" {
     lvl116_s3GmA_info:
         const lvl116_s3GmA_entry;
         const 1;
         const 18446744069414584336;
         const u3Jzl_srtd;
 },
 _c3Jym() //  [R1]
         { []
         }
     {offset
       c3Jym: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Jym_info" {
     block_c3Jym_info:
         const _c3Jym;
         const 1;
         const 4294967326;
         const S3GvX_srt+1224;
 },
 sat_s3Gnh_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JyE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JyF; else goto c3JyG;
       c3JyF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JyG: // global
           I64[Sp - 16] = block_c3JyB_info;
           _s3GmA::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GmA::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JyO; else goto c3JyC;
       u3JyO: // global
           call _c3JyB(R1) args: 0, res: 0, upd: 0;
       c3JyC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gnh_info" {
     sat_s3Gnh_info:
         const sat_s3Gnh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3JyB() //  [R1]
         { []
         }
     {offset
       c3JyB: // global
           if (I64[R1 + 7] == 69) goto c3JyN; else goto c3JyM;
       c3JyN: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JyM: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JyB_info" {
     block_c3JyB_info:
         const _c3JyB;
         const 1;
         const 30;
 },
 sat_s3Gnb_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JyY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JyZ; else goto c3Jz0;
       c3JyZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jz0: // global
           I64[Sp - 16] = block_c3JyV_info;
           _s3GmA::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GmA::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Jz8; else goto c3JyW;
       u3Jz8: // global
           call _c3JyV(R1) args: 0, res: 0, upd: 0;
       c3JyW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gnb_info" {
     sat_s3Gnb_info:
         const sat_s3Gnb_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3JyV() //  [R1]
         { []
         }
     {offset
       c3JyV: // global
           if (I64[R1 + 7] == 101) goto c3Jz7; else goto c3Jz6;
       c3Jz7: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Jz6: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JyV_info" {
     block_c3JyV_info:
         const _c3JyV;
         const 1;
         const 30;
 },
 section ""relreadonly" . u3Jzm_srtd" {
     u3Jzm_srtd:
         const S3GvX_srt+584;
         const 93;
         const 1;
         const 469827584;
 },
 lexExp_r3yd6_entry() //  [R2]
         { []
         }
     {offset
       c3Jza: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3Jze; else goto c3Jzd;
       c3Jze: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = lexExp_r3yd6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jzd: // global
           I64[Hp - 80] = lvl116_s3GmA_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s3Gnh_info;
           _c3Jwh::P64 = Hp - 80;
           P64[Hp - 48] = _c3Jwh::P64;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = sat_s3Gnb_info;
           P64[Hp - 16] = _c3Jwh::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 39;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lexExp_r3yd6_info" {
     lexExp_r3yd6_info:
         const lexExp_r3yd6_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3Jzm_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.578753384 UTC

[section ""data" . lvl114_r3yd7_closure" {
     lvl114_r3yd7_closure:
         const lvl114_r3yd7_info;
 },
 lvl114_r3yd7_entry() //  [R2]
         { []
         }
     {offset
       c3JBG: // global
           _s3Gnj::P64 = R2;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _s3Gnj::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl114_r3yd7_info" {
     lvl114_r3yd7_info:
         const lvl114_r3yd7_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.582533411 UTC

[section ""data" . lvl115_r3yd8_closure" {
     lvl115_r3yd8_closure:
         const lvl115_r3yd8_info;
 },
 lvl115_r3yd8_entry() //  [R2]
         { []
         }
     {offset
       c3JBS: // global
           _s3Gnk::P64 = R2;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _s3Gnk::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl115_r3yd8_info" {
     lvl115_r3yd8_info:
         const lvl115_r3yd8_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.58854787 UTC

[section ""data" . $wlexDecNumber_r3yd9_closure" {
     $wlexDecNumber_r3yd9_closure:
         const $wlexDecNumber_r3yd9_info;
         const 0;
 },
 sat_s3Gnr_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JCl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3JCp; else goto c3JCo;
       c3JCp: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JCo: // global
           _s3Gnl::P64 = P64[R1 + 7];
           _s3Gnm::P64 = P64[R1 + 15];
           _s3Gnn::P64 = P64[R1 + 23];
           I64[Hp - 40] = Text.Read.Lex.MkDecimal_con_info;
           P64[Hp - 32] = _s3Gnm::P64;
           P64[Hp - 24] = _s3Gnn::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 38;
           R2 = Hp - 2;
           R1 = _s3Gnl::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gnr_info" {
     sat_s3Gnr_info:
         const sat_s3Gnr_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 section ""relreadonly" . u3JCR_srtd" {
     u3JCR_srtd:
         const S3GvX_srt+664;
         const 83;
         const 1;
         const 262144;
 },
 sat_s3Gnu_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JCt: // global
           _s3Gnn::P64 = R2;
           _s3Gnu::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3JCu; else goto c3JCv;
       c3JCv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3JCx; else goto c3JCw;
       c3JCx: // global
           HpAlloc = 32;
           goto c3JCu;
       c3JCu: // global
           R2 = _s3Gnn::P64;
           R1 = _s3Gnu::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JCw: // global
           _s3Gnl::P64 = P64[_s3Gnu::P64 + 7];
           _s3Gnm::P64 = P64[_s3Gnu::P64 + 15];
           I64[Hp - 24] = sat_s3Gnr_info;
           P64[Hp - 16] = _s3Gnl::P64;
           P64[Hp - 8] = _s3Gnm::P64;
           P64[Hp] = _s3Gnn::P64;
           I64[Sp - 8] = block_c3JCq_info;
           R4 = Hp - 23;
           R3 = lvl115_r3yd8_closure+1;
           R2 = lexExp_r3yd6_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gnu_info" {
     sat_s3Gnu_info:
         const sat_s3Gnu_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const u3JCR_srtd;
 },
 _c3JCq() //  [R1]
         { []
         }
     {offset
       c3JCq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JCA; else goto c3JCz;
       c3JCA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JCz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JCq_info" {
     block_c3JCq_info:
         const _c3JCq;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3JCS_srtd" {
     u3JCS_srtd:
         const S3GvX_srt+616;
         const 89;
         const 65;
         const 16777216;
 },
 sat_s3Gnx_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JCE: // global
           _s3Gnm::P64 = R2;
           _s3Gnx::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3JCF; else goto c3JCG;
       c3JCG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JCI; else goto c3JCH;
       c3JCI: // global
           HpAlloc = 24;
           goto c3JCF;
       c3JCF: // global
           R2 = _s3Gnm::P64;
           R1 = _s3Gnx::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JCH: // global
           _s3Gnl::P64 = P64[_s3Gnx::P64 + 7];
           I64[Hp - 16] = sat_s3Gnu_info;
           P64[Hp - 8] = _s3Gnl::P64;
           P64[Hp] = _s3Gnm::P64;
           I64[Sp - 8] = block_c3JCB_info;
           R4 = Hp - 15;
           R3 = lvl114_r3yd7_closure+1;
           R2 = lexFrac_r3y9E_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gnx_info" {
     sat_s3Gnx_info:
         const sat_s3Gnx_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3JCS_srtd;
 },
 _c3JCB() //  [R1]
         { []
         }
     {offset
       c3JCB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JCL; else goto c3JCK;
       c3JCL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JCK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JCB_info" {
     block_c3JCB_info:
         const _c3JCB;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3JCT_srtd" {
     u3JCT_srtd:
         const S3GvX_srt+584;
         const 94;
         const 1041;
         const 805306368;
 },
 $wlexDecNumber_r3yd9_entry() //  [R2]
         { []
         }
     {offset
       c3JCM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JCQ; else goto c3JCP;
       c3JCQ: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = $wlexDecNumber_r3yd9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JCP: // global
           I64[Hp - 8] = sat_s3Gnx_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlexDecNumber_r3yd9_info" {
     $wlexDecNumber_r3yd9_info:
         const $wlexDecNumber_r3yd9_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3JCT_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.604416356 UTC

[section ""data" . lexDecNumber_r3yda_closure" {
     lexDecNumber_r3yda_closure:
         const lexDecNumber_r3yda_info;
         const 0;
 },
 lexDecNumber_r3yda_entry() //  [R2]
         { []
         }
     {offset
       c3JDB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3JDC; else goto c3JDD;
       c3JDC: // global
           R2 = R2;
           R1 = lexDecNumber_r3yda_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JDD: // global
           I64[Sp - 8] = block_c3JDy_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexDecNumber_r3yd9_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lexDecNumber_r3yda_info" {
     lexDecNumber_r3yda_info:
         const lexDecNumber_r3yda_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1328;
 },
 _c3JDy() //  [R1]
         { []
         }
     {offset
       c3JDy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JDG; else goto c3JDF;
       c3JDG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JDF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JDy_info" {
     block_c3JDy_info:
         const _c3JDy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.628112884 UTC

[section ""data" . Text.Read.Lex.expect2_closure" {
     Text.Read.Lex.expect2_closure:
         const Text.Read.Lex.expect2_info;
         const 0;
 },
 lvl116_s3GnF_entry() //  [R1]
         { []
         }
     {offset
       c3JE6: // global
           _s3GnF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JE7; else goto c3JE8;
       c3JE8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JEa; else goto c3JE9;
       c3JEa: // global
           HpAlloc = 16;
           goto c3JE7;
       c3JE7: // global
           R1 = _s3GnF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JE9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GnF::P64;
           _s3GnB::P64 = P64[_s3GnF::P64 + 16];
           _s3GnD::P64 = P64[_s3GnF::P64 + 24];
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = _s3GnD::P64;
           R2 = Hp - 7;
           R1 = _s3GnB::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GnF_info" {
     lvl116_s3GnF_info:
         const lvl116_s3GnF_entry;
         const 2;
         const 18;
 },
 sat_s3GnP_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JEv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JEw; else goto c3JEx;
       c3JEw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JEx: // global
           I64[Sp - 16] = block_c3JEs_info;
           _s3GnF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GnF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JEF; else goto c3JEt;
       u3JEF: // global
           call _c3JEs(R1) args: 0, res: 0, upd: 0;
       c3JEt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GnP_info" {
     sat_s3GnP_info:
         const sat_s3GnP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3JEs() //  [R1]
         { []
         }
     {offset
       c3JEs: // global
           if (I64[R1 + 7] == 39) goto c3JEE; else goto c3JED;
       c3JEE: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JED: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JEs_info" {
     block_c3JEs_info:
         const _c3JEs;
         const 1;
         const 30;
 },
 sat_s3GnU_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JEQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JER; else goto c3JES;
       c3JER: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JES: // global
           I64[Sp - 16] = block_c3JEN_info;
           _s3GnF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GnF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JF0; else goto c3JEO;
       u3JF0: // global
           call _c3JEN(R1) args: 0, res: 0, upd: 0;
       c3JEO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GnU_info" {
     sat_s3GnU_info:
         const sat_s3GnU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3JEN() //  [R1]
         { []
         }
     {offset
       c3JEN: // global
           if (I64[R1 + 7] == 39) goto c3JEZ; else goto c3JEY;
       c3JEZ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JEY: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JEN_info" {
     block_c3JEN_info:
         const _c3JEN;
         const 1;
         const 30;
 },
 $wk_s3GnC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3JF5: // global
           _s3GnE::P64 = R3;
           _s3GnD::P64 = R2;
           _s3GnC::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3JF6; else goto c3JF7;
       c3JF7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3JF9; else goto c3JF8;
       c3JF9: // global
           HpAlloc = 32;
           goto c3JF6;
       c3JF6: // global
           R3 = _s3GnE::P64;
           R2 = _s3GnD::P64;
           R1 = _s3GnC::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3JF8: // global
           _s3GnB::P64 = P64[_s3GnC::P64 + 6];
           I64[Hp - 24] = lvl116_s3GnF_info;
           P64[Hp - 8] = _s3GnB::P64;
           P64[Hp] = _s3GnD::P64;
           I64[Sp - 24] = block_c3JEb_info;
           R1 = _s3GnE::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s3GnD::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3JFn; else goto c3JEc;
       u3JFn: // global
           call _c3JEb(R1) args: 0, res: 0, upd: 0;
       c3JEc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wk_s3GnC_info" {
     $wk_s3GnC_info:
         const $wk_s3GnC_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3JEb() //  [R1]
         { []
         }
     {offset
       c3JEb: // global
           if (R1 & 7 == 1) goto c3JF2; else goto c3JF3;
       c3JF2: // global
           I64[Sp] = block_c3JEg_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3JFm; else goto c3JEh;
       u3JFm: // global
           call _c3JEg(R1) args: 0, res: 0, upd: 0;
       c3JEh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3JF3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3JFl; else goto c3JFk;
       c3JFl: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JFk: // global
           I64[Hp - 24] = sat_s3GnU_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JEb_info" {
     block_c3JEb_info:
         const _c3JEb;
         const 2;
         const 30;
 },
 _c3JEg() //  [R1]
         { []
         }
     {offset
       c3JEg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3JFd; else goto c3JFc;
       c3JFd: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JFc: // global
           if (I64[R1 + 7] == 39) goto c3JFh; else goto c3JFg;
       c3JFh: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JFg: // global
           I64[Hp - 24] = sat_s3GnP_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JEg_info" {
     block_c3JEg_info:
         const _c3JEg;
         const 130;
         const 30;
 },
 k1_s3GnV_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JFw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JFx; else goto c3JFy;
       c3JFx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JFy: // global
           I64[Sp - 16] = block_c3JFt_info;
           _s3GnC::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GnC::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JFC; else goto c3JFu;
       u3JFC: // global
           call _c3JFt(R1) args: 0, res: 0, upd: 0;
       c3JFu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . k1_s3GnV_info" {
     k1_s3GnV_info:
         const k1_s3GnV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3JFt() //  [R1]
         { []
         }
     {offset
       c3JFt: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wk_s3GnC_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JFt_info" {
     block_c3JFt_info:
         const _c3JFt;
         const 1;
         const 30;
 },
 lvl116_s3Go0_entry() //  [R1]
         { []
         }
     {offset
       c3JFH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JFI; else goto c3JFJ;
       c3JFI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JFJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Go0_info" {
     lvl116_s3Go0_info:
         const lvl116_s3Go0_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+1232;
 },
 lvl118_s3Go6_entry() //  [R1]
         { []
         }
     {offset
       c3JG1: // global
           _s3Go6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JG2; else goto c3JG3;
       c3JG3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JG5; else goto c3JG4;
       c3JG5: // global
           HpAlloc = 16;
           goto c3JG2;
       c3JG2: // global
           R1 = _s3Go6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JG4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Go6::P64;
           _s3GnB::P64 = P64[_s3Go6::P64 + 16];
           _s3Go3::P64 = P64[_s3Go6::P64 + 24];
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = _s3Go3::P64;
           R2 = Hp - 7;
           R1 = _s3GnB::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl118_s3Go6_info" {
     lvl118_s3Go6_info:
         const lvl118_s3Go6_entry;
         const 2;
         const 18;
 },
 sat_s3Goc_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JGe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JGf; else goto c3JGg;
       c3JGf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JGg: // global
           I64[Sp - 16] = block_c3JGb_info;
           _s3Go6::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Go6::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JGo; else goto c3JGc;
       u3JGo: // global
           call _c3JGb(R1) args: 0, res: 0, upd: 0;
       c3JGc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Goc_info" {
     sat_s3Goc_info:
         const sat_s3Goc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3JGb() //  [R1]
         { []
         }
     {offset
       c3JGb: // global
           if (I64[R1 + 7] == 39) goto c3JGn; else goto c3JGm;
       c3JGn: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JGm: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JGb_info" {
     block_c3JGb_info:
         const _c3JGb;
         const 1;
         const 30;
 },
 lvl117_s3Go1_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JGp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JGq; else goto c3JGr;
       c3JGq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JGr: // global
           I64[Sp - 24] = block_c3JFP_info;
           _s3GnB::P64 = P64[R1 + 7];
           _s3Go0::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3GnB::P64;
           P64[Sp - 8] = _s3Go0::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3JGB; else goto c3JFQ;
       u3JGB: // global
           call _c3JFP(R1) args: 0, res: 0, upd: 0;
       c3JFQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl117_s3Go1_info" {
     lvl117_s3Go1_info:
         const lvl117_s3Go1_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3JFP() //  [R1]
         { []
         }
     {offset
       c3JFP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3JGu; else goto c3JGt;
       c3JGu: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JGt: // global
           _s3Go5::I64 = I64[R1 + 7];
           if (_s3Go5::I64 == 39) goto c3JGy; else goto u3JGA;
       c3JGy: // global
           Hp = Hp - 64;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3JGA: // global
           if (_s3Go5::I64 == 92) goto c3JGz; else goto c3JGx;
       c3JGz: // global
           Hp = Hp - 64;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JGx: // global
           I64[Hp - 56] = lvl118_s3Go6_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_s3Goc_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JFP_info" {
     block_c3JFP_info:
         const _c3JFP;
         const 2;
         const 30;
 },
 lvl119_s3Gok_entry() //  [R1]
         { []
         }
     {offset
       c3JGL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JGM; else goto c3JGN;
       c3JGM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JGN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Base.id_closure+1;
           Sp = Sp - 16;
           call body_r3yd5_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl119_s3Gok_info" {
     lvl119_s3Gok_info:
         const lvl119_s3Gok_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+1296;
 },
 section ""relreadonly" . u3JKA_srtd" {
     u3JKA_srtd:
         const S3GvX_srt+600;
         const 93;
         const 257;
         const 268435456;
 },
 sat_s3Gp4_entry() //  [R1]
         { []
         }
     {offset
       c3JH7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JH8; else goto c3JH9;
       c3JH8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JH9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3JH4_info;
           R4 = P64[R1 + 16];
           R3 = lexDecNumber_r3yda_closure+1;
           R2 = lexHexOct_r3y9B_closure+1;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gp4_info" {
     sat_s3Gp4_info:
         const sat_s3Gp4_entry;
         const 1;
         const 18446744069414584336;
         const u3JKA_srtd;
 },
 _c3JH4() //  [R1]
         { []
         }
     {offset
       c3JH4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JHc; else goto c3JHb;
       c3JHc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3JHb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3JH4_info" {
     block_c3JH4_info:
         const _c3JH4;
         const 0;
         const 30;
 },
 sat_s3GoV_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JHE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3JHI; else goto c3JHH;
       c3JHI: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JHH: // global
           _s3GnB::P64 = P64[R1 + 7];
           _s3GoK::P64 = P64[R1 + 15];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = _s3GoK::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = Hp - 30;
           R2 = Hp - 4;
           R1 = _s3GnB::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GoV_info" {
     sat_s3GoV_info:
         const sat_s3GoV_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3Gp0_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JHJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JHK; else goto c3JHL;
       c3JHK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JHL: // global
           I64[Sp - 16] = block_c3JHi_info;
           _s3GnB::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GnB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JIa; else goto c3JHj;
       u3JIa: // global
           call _c3JHi(R1) args: 0, res: 0, upd: 0;
       c3JHj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gp0_info" {
     sat_s3Gp0_info:
         const sat_s3Gp0_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+1344;
 },
 _c3JHi() //  [R1]
         { []
         }
     {offset
       c3JHi: // global
           _s3GoL::I64 = I64[R1 + 7];
           (_s3GoQ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalpha(_s3GoL::I64);
           if (_s3GoQ::I64 == 0) goto c3JI5; else goto u3JI6;
       c3JI5: // global
           if (_s3GoL::I64 == 95) goto u3JI7; else goto c3JI3;
       u3JI7: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           goto u3JI9;
       c3JI3: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3JI6: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           goto u3JI9;
       u3JI9: // global
           call _c3JHv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3JHi_info" {
     block_c3JHi_info:
         const _c3JHi;
         const 1;
         const 4294967326;
         const S3GvX_srt+1344;
 },
 _c3JHv() //  []
         { []
         }
     {offset
       c3JHv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JHS; else goto c3JHR;
       c3JHS: // global
           HpAlloc = 24;
           I64[Sp] = block_c3JHv_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3JHR: // global
           I64[Hp - 16] = sat_s3GoV_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c3JHN_info;
           R3 = Hp - 15;
           R2 = isIdfChar_r3y8W_closure+1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JHv_info" {
     block_c3JHv_info:
         const _c3JHv;
         const 2;
         const 4294967326;
         const S3GvX_srt+1344;
 },
 _c3JHN() //  [R1]
         { []
         }
     {offset
       c3JHN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JHV; else goto c3JHU;
       c3JHV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JHU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JHN_info" {
     block_c3JHN_info:
         const _c3JHN;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3JKB_srtd" {
     u3JKB_srtd:
         const S3GvX_srt+600;
         const 94;
         const 257;
         const 805322752;
 },
 sat_s3Gp5_entry() //  [R1]
         { []
         }
     {offset
       c3JIc: // global
           _s3Gp5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JId; else goto c3JIe;
       c3JIe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3JIg; else goto c3JIf;
       c3JIg: // global
           HpAlloc = 56;
           goto c3JId;
       c3JId: // global
           R1 = _s3Gp5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JIf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gp5::P64;
           _s3GnB::P64 = P64[_s3Gp5::P64 + 16];
           I64[Hp - 48] = sat_s3Gp4_info;
           P64[Hp - 32] = _s3GnB::P64;
           I64[Hp - 24] = sat_s3Gp0_info;
           P64[Hp - 16] = _s3GnB::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gp5_info" {
     sat_s3Gp5_info:
         const sat_s3Gp5_entry;
         const 1;
         const 18446744069414584336;
         const u3JKB_srtd;
 },
 sat_s3GoE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JID: // global
           _s3Goz::P64 = R2;
           _s3GoE::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3JIE; else goto c3JIF;
       c3JIF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JIH; else goto c3JIG;
       c3JIH: // global
           HpAlloc = 24;
           goto c3JIE;
       c3JIE: // global
           R2 = _s3Goz::P64;
           R1 = _s3GoE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JIG: // global
           _s3GnB::P64 = P64[_s3GoE::P64 + 7];
           _s3Gox::P64 = P64[_s3GoE::P64 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3Gox::P64;
           P64[Hp] = _s3Goz::P64;
           I64[Sp - 24] = block_c3JIx_info;
           R4 = reserved_ops29_r3y9q_closure+2;
           _c3JIw::P64 = Hp - 14;
           R3 = _c3JIw::P64;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           P64[Sp - 16] = _c3JIw::P64;
           P64[Sp - 8] = _s3GnB::P64;
           Sp = Sp - 24;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GoE_info" {
     sat_s3GoE_info:
         const sat_s3GoE_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3GvX_srt+1352;
 },
 _c3JIx() //  [R1]
         { []
         }
     {offset
       c3JIx: // global
           _c3JIw::P64 = P64[Sp + 8];
           _s3GnB::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c3JIA; else goto c3JIB;
       c3JIA: // global
           Hp = Hp + 16;
           _s3GoB::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3JIT; else goto c3JIM;
       c3JIM: // global
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = _c3JIw::P64;
           R2 = Hp - 3;
           R1 = _s3GnB::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3JIB: // global
           Hp = Hp + 16;
           _s3GoB::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3JIT; else goto c3JIS;
       c3JIT: // global
           HpAlloc = 16;
           R1 = _s3GoB::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JIS: // global
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = _c3JIw::P64;
           R2 = Hp - 5;
           R1 = _s3GnB::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JIx_info" {
     block_c3JIx_info:
         const _c3JIx;
         const 2;
         const 30;
 },
 section ""relreadonly" . u3JKC_srtd" {
     u3JKC_srtd:
         const S3GvX_srt+128;
         const 154;
         const 1;
         const 0;
         const 33554432;
 },
 sat_s3GoH_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JIY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JIZ; else goto c3JJ0;
       c3JIZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JJ0: // global
           I64[Sp - 24] = block_c3JIm_info;
           _s3Gox::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s3Gox::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.isSymbolChar_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GoH_info" {
     sat_s3GoH_info:
         const sat_s3GoH_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3JKC_srtd;
 },
 section ""relreadonly" . u3JKD_srtd" {
     u3JKD_srtd:
         const S3GvX_srt+128;
         const 154;
         const 1;
         const 0;
         const 33554432;
 },
 _c3JIm() //  [R1]
         { []
         }
     {offset
       c3JIm: // global
           if (R1 & 7 == 1) goto c3JIV; else goto c3JIW;
       c3JIV: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JIW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JJ8; else goto c3JJ7;
       c3JJ8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JJ7: // global
           I64[Hp - 16] = sat_s3GoE_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3JJ3_info;
           R3 = Hp - 15;
           R2 = Text.Read.Lex.isSymbolChar_closure+1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JIm_info" {
     block_c3JIm_info:
         const _c3JIm;
         const 2;
         const 18446744069414584350;
         const u3JKD_srtd;
 },
 _c3JJ3() //  [R1]
         { []
         }
     {offset
       c3JJ3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JJb; else goto c3JJa;
       c3JJb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JJa: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JJ3_info" {
     block_c3JJ3_info:
         const _c3JJ3;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3JKE_srtd" {
     u3JKE_srtd:
         const S3GvX_srt+128;
         const 154;
         const 576460752303423489;
         const 8;
         const 58720768;
 },
 sat_s3Gp6_entry() //  [R1]
         { []
         }
     {offset
       c3JJd: // global
           _s3Gp6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JJe; else goto c3JJf;
       c3JJf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3JJh; else goto c3JJg;
       c3JJh: // global
           HpAlloc = 56;
           goto c3JJe;
       c3JJe: // global
           R1 = _s3Gp6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JJg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gp6::P64;
           _s3GnB::P64 = P64[_s3Gp6::P64 + 16];
           I64[Hp - 48] = sat_s3Gp5_info;
           P64[Hp - 32] = _s3GnB::P64;
           I64[Hp - 24] = sat_s3GoH_info;
           P64[Hp - 16] = _s3GnB::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gp6_info" {
     sat_s3Gp6_info:
         const sat_s3Gp6_entry;
         const 1;
         const 18446744069414584336;
         const u3JKE_srtd;
 },
 sat_s3Gov_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JJt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JJu; else goto c3JJv;
       c3JJu: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JJv: // global
           I64[Sp - 24] = block_c3JJn_info;
           R4 = Text.Read.Lex.isSymbolChar3_closure;
           R3 = R2;
           _s3Gor::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s3Gor::P64;
           Sp = Sp - 24;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gov_info" {
     sat_s3Gov_info:
         const sat_s3Gov_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3GvX_srt+1360;
 },
 _c3JJn() //  [R1]
         { []
         }
     {offset
       c3JJn: // global
           if (R1 & 7 == 1) goto c3JJq; else goto c3JJr;
       c3JJq: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JJr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3JJF; else goto c3JJE;
       c3JJF: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JJE: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = Hp - 30;
           R2 = Hp - 5;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JJn_info" {
     block_c3JJn_info:
         const _c3JJn;
         const 2;
         const 30;
 },
 section ""relreadonly" . u3JKF_srtd" {
     u3JKF_srtd:
         const S3GvX_srt+128;
         const 155;
         const 576460752303423489;
         const 8;
         const 125829632;
 },
 sat_s3Gp7_entry() //  [R1]
         { []
         }
     {offset
       c3JJH: // global
           _s3Gp7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JJI; else goto c3JJJ;
       c3JJJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3JJL; else goto c3JJK;
       c3JJL: // global
           HpAlloc = 56;
           goto c3JJI;
       c3JJI: // global
           R1 = _s3Gp7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JJK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gp7::P64;
           _s3GnB::P64 = P64[_s3Gp7::P64 + 16];
           I64[Hp - 48] = sat_s3Gp6_info;
           P64[Hp - 32] = _s3GnB::P64;
           I64[Hp - 24] = sat_s3Gov_info;
           P64[Hp - 16] = _s3GnB::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gp7_info" {
     sat_s3Gp7_info:
         const sat_s3Gp7_entry;
         const 1;
         const 18446744069414584336;
         const u3JKF_srtd;
 },
 sat_s3Gop_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JJV; else goto c3JJW;
       c3JJV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JJW: // global
           I64[Sp - 16] = block_c3JJR_info;
           _s3Gok::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gok::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JK4; else goto c3JJS;
       u3JK4: // global
           call _c3JJR(R1) args: 0, res: 0, upd: 0;
       c3JJS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gop_info" {
     sat_s3Gop_info:
         const sat_s3Gop_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3JJR() //  [R1]
         { []
         }
     {offset
       c3JJR: // global
           if (I64[R1 + 7] == 34) goto c3JK3; else goto c3JK2;
       c3JK3: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JK2: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JJR_info" {
     block_c3JJR_info:
         const _c3JJR;
         const 1;
         const 30;
 },
 section ""relreadonly" . u3JKG_srtd" {
     u3JKG_srtd:
         const S3GvX_srt+128;
         const 155;
         const 576460752303423489;
         const 8;
         const 126091776;
 },
 sat_s3Gp8_entry() //  [R1]
         { []
         }
     {offset
       c3JK6: // global
           _s3Gp8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JK7; else goto c3JK8;
       c3JK8: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3JKa; else goto c3JK9;
       c3JKa: // global
           HpAlloc = 80;
           goto c3JK7;
       c3JK7: // global
           R1 = _s3Gp8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JK9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gp8::P64;
           _s3GnB::P64 = P64[_s3Gp8::P64 + 16];
           I64[Hp - 72] = lvl119_s3Gok_info;
           P64[Hp - 56] = _s3GnB::P64;
           I64[Hp - 48] = sat_s3Gp7_info;
           P64[Hp - 32] = _s3GnB::P64;
           I64[Hp - 24] = sat_s3Gop_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gp8_info" {
     sat_s3Gp8_info:
         const sat_s3Gp8_entry;
         const 1;
         const 18446744069414584336;
         const u3JKG_srtd;
 },
 sat_s3Goi_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JKj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JKk; else goto c3JKl;
       c3JKk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JKl: // global
           I64[Sp - 16] = block_c3JKg_info;
           _s3God::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3God::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JKt; else goto c3JKh;
       u3JKt: // global
           call _c3JKg(R1) args: 0, res: 0, upd: 0;
       c3JKh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Goi_info" {
     sat_s3Goi_info:
         const sat_s3Goi_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3JKg() //  [R1]
         { []
         }
     {offset
       c3JKg: // global
           if (I64[R1 + 7] == 39) goto c3JKs; else goto c3JKr;
       c3JKs: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JKr: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JKg_info" {
     block_c3JKg_info:
         const _c3JKg;
         const 1;
         const 30;
 },
 section ""relreadonly" . u3JKH_srtd" {
     u3JKH_srtd:
         const S3GvX_srt+128;
         const 156;
         const 576460752303423489;
         const 8;
         const 260310528;
 },
 Text.Read.Lex.expect2_entry() //  [R2]
         { []
         }
     {offset
       c3JKv: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3JKz; else goto c3JKy;
       c3JKz: // global
           HpAlloc = 152;
           R2 = R2;
           R1 = Text.Read.Lex.expect2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JKy: // global
           I64[Hp - 144] = $wk_s3GnC_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = k1_s3GnV_info;
           P64[Hp - 120] = Hp - 142;
           I64[Hp - 112] = lvl116_s3Go0_info;
           P64[Hp - 96] = Hp - 127;
           I64[Hp - 88] = lvl117_s3Go1_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = Hp - 112;
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 56] = Hp - 87;
           I64[Hp - 48] = sat_s3Gp8_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3Goi_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.expect2_info" {
     Text.Read.Lex.expect2_info:
         const Text.Read.Lex.expect2_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3JKH_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.7121895 UTC

[section ""data" . Text.Read.Lex.$wlex_closure" {
     Text.Read.Lex.$wlex_closure:
         const Text.Read.Lex.$wlex_info;
         const 0;
 },
 lvl117_s3Gpb_entry() //  [R1]
         { []
         }
     {offset
       c3JPP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JPQ; else goto c3JPR;
       c3JPQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JPR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3Gpb_info" {
     lvl117_s3Gpb_info:
         const lvl117_s3Gpb_entry;
         const 1;
         const 16;
 },
 sat_s3Gpi_entry() //  [R1]
         { []
         }
     {offset
       c3JPW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JPX; else goto c3JPY;
       c3JPX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JPY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gpi_info" {
     sat_s3Gpi_info:
         const sat_s3Gpi_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+1368;
 },
 sat_s3Gpg_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JQb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JQc; else goto c3JQd;
       c3JQc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JQd: // global
           I64[Sp - 16] = block_c3JQ4_info;
           _s3Gpb::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gpb::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JQk; else goto c3JQ5;
       u3JQk: // global
           call _c3JQ4(R1) args: 0, res: 0, upd: 0;
       c3JQ5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gpg_info" {
     sat_s3Gpg_info:
         const sat_s3Gpg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3JQ4() //  [R1]
         { []
         }
     {offset
       c3JQ4: // global
           if (R1 & 7 == 1) goto c3JQ8; else goto c3JQ9;
       c3JQ8: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JQ9: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JQ4_info" {
     block_c3JQ4_info:
         const _c3JQ4;
         const 1;
         const 30;
 },
 lvl116_s3Gpa_entry() //  [R1]
         { []
         }
     {offset
       c3JQm: // global
           _s3Gpa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JQn; else goto c3JQo;
       c3JQo: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3JQq; else goto c3JQp;
       c3JQq: // global
           HpAlloc = 80;
           goto c3JQn;
       c3JQn: // global
           R1 = _s3Gpa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JQp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gpa::P64;
           _s3Gp9::P64 = P64[_s3Gpa::P64 + 16];
           I64[Hp - 72] = lvl117_s3Gpb_info;
           P64[Hp - 56] = _s3Gp9::P64;
           I64[Hp - 48] = sat_s3Gpi_info;
           P64[Hp - 32] = _s3Gp9::P64;
           I64[Hp - 24] = sat_s3Gpg_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gpa_info" {
     lvl116_s3Gpa_info:
         const lvl116_s3Gpa_entry;
         const 1;
         const 1125904201809936;
         const S3GvX_srt+1224;
 },
 k_s3Gpj_entry() //  [R1]
         { []
         }
     {offset
       c3JQw: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3Gpj_info" {
     k_s3Gpj_info:
         const k_s3Gpj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3Gpm_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JQE: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gpm_info" {
     sat_s3Gpm_info:
         const sat_s3Gpm_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.Read.Lex.$wlex_entry() //  [R2]
         { []
         }
     {offset
       c3JQH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3JQL; else goto c3JQK;
       c3JQL: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.Read.Lex.$wlex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JQK: // global
           I64[Hp - 48] = lvl116_s3Gpa_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3Gpj_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3Gpm_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wlex_info" {
     Text.Read.Lex.$wlex_info:
         const Text.Read.Lex.$wlex_entry;
         const 0;
         const 3377704015495182;
         const 4294967301;
         const S3GvX_srt+1224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.728081318 UTC

[section ""data" . Text.Read.Lex.lex1_closure" {
     Text.Read.Lex.lex1_closure:
         const Text.Read.Lex.lex1_info;
         const 0;
 },
 Text.Read.Lex.lex1_entry() //  [R2]
         { []
         }
     {offset
       c3JRL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3JRM; else goto c3JRN;
       c3JRM: // global
           R2 = R2;
           R1 = Text.Read.Lex.lex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JRN: // global
           I64[Sp - 8] = block_c3JRI_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wlex_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lex1_info" {
     Text.Read.Lex.lex1_info:
         const Text.Read.Lex.lex1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1376;
 },
 _c3JRI() //  [R1]
         { []
         }
     {offset
       c3JRI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JRQ; else goto c3JRP;
       c3JRQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JRP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JRI_info" {
     block_c3JRI_info:
         const _c3JRI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.733775769 UTC

[section ""data" . Text.Read.Lex.lex_closure" {
     Text.Read.Lex.lex_closure:
         const Text.Read.Lex.lex_info;
         const 0;
 },
 Text.Read.Lex.lex_entry() //  [R2]
         { []
         }
     {offset
       c3JS6: // global
           R2 = R2;
           call Text.Read.Lex.lex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.lex_info" {
     Text.Read.Lex.lex_info:
         const Text.Read.Lex.lex_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3GvX_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.741983788 UTC

[section ""data" . Text.Read.Lex.$wexpect_closure" {
     Text.Read.Lex.$wexpect_closure:
         const Text.Read.Lex.$wexpect_info;
         const 0;
 },
 lvl117_s3Gpt_entry() //  [R1]
         { []
         }
     {offset
       c3JSp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JSq; else goto c3JSr;
       c3JSq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JSr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3Gpt_info" {
     lvl117_s3Gpt_info:
         const lvl117_s3Gpt_entry;
         const 1;
         const 16;
 },
 lvl118_s3Gpu_entry() //  [R1]
         { []
         }
     {offset
       c3JSD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3JSE; else goto c3JSF;
       c3JSE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JSF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3JSw_info;
           _s3Gpt::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3Gpt::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3JSM; else goto c3JSx;
       u3JSM: // global
           call _c3JSw(R1) args: 0, res: 0, upd: 0;
       c3JSx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl118_s3Gpu_info" {
     lvl118_s3Gpu_info:
         const lvl118_s3Gpu_entry;
         const 2;
         const 18;
 },
 _c3JSw() //  [R1]
         { []
         }
     {offset
       c3JSw: // global
           if (R1 & 7 == 7) goto c3JSB; else goto c3JSA;
       c3JSB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3JSA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3JSw_info" {
     block_c3JSw_info:
         const _c3JSw;
         const 1;
         const 30;
 },
 sat_s3GpE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JT2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JT3; else goto c3JT4;
       c3JT3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JT4: // global
           I64[Sp - 16] = block_c3JSW_info;
           R3 = P64[R1 + 7];
           R2 = R2;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 16;
           call Text.Read.Lex.$fEqLexeme_$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GpE_info" {
     sat_s3GpE_info:
         const sat_s3GpE_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3JSW() //  [R1]
         { []
         }
     {offset
       c3JSW: // global
           if (R1 & 7 == 1) goto c3JSZ; else goto c3JT0;
       c3JSZ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JT0: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JSW_info" {
     block_c3JSW_info:
         const _c3JSW;
         const 1;
         const 30;
 },
 sat_s3GpF_entry() //  [R1]
         { []
         }
     {offset
       c3JTb: // global
           _s3GpF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JTc; else goto c3JTd;
       c3JTd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JTf; else goto c3JTe;
       c3JTf: // global
           HpAlloc = 24;
           goto c3JTc;
       c3JTc: // global
           R1 = _s3GpF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JTe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GpF::P64;
           _s3Gpq::P64 = P64[_s3GpF::P64 + 16];
           _s3Gpt::P64 = P64[_s3GpF::P64 + 24];
           I64[Hp - 16] = sat_s3GpE_info;
           P64[Hp - 8] = _s3Gpq::P64;
           P64[Hp] = _s3Gpt::P64;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3GpF_info" {
     sat_s3GpF_info:
         const sat_s3GpF_entry;
         const 2;
         const 4294967314;
         const S3GvX_srt+1368;
 },
 sat_s3GpA_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JTs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JTt; else goto c3JTu;
       c3JTt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JTu: // global
           I64[Sp - 16] = block_c3JTl_info;
           _s3Gpu::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gpu::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JTB; else goto c3JTm;
       u3JTB: // global
           call _c3JTl(R1) args: 0, res: 0, upd: 0;
       c3JTm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GpA_info" {
     sat_s3GpA_info:
         const sat_s3GpA_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3JTl() //  [R1]
         { []
         }
     {offset
       c3JTl: // global
           if (R1 & 7 == 1) goto c3JTp; else goto c3JTq;
       c3JTp: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JTq: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JTl_info" {
     block_c3JTl_info:
         const _c3JTl;
         const 1;
         const 30;
 },
 lvl116_s3Gps_entry() //  [R1]
         { []
         }
     {offset
       c3JTD: // global
           _s3Gps::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JTE; else goto c3JTF;
       c3JTF: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3JTH; else goto c3JTG;
       c3JTH: // global
           HpAlloc = 120;
           goto c3JTE;
       c3JTE: // global
           R1 = _s3Gps::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JTG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gps::P64;
           _s3Gpq::P64 = P64[_s3Gps::P64 + 16];
           _s3Gpr::P64 = P64[_s3Gps::P64 + 24];
           I64[Hp - 112] = lvl117_s3Gpt_info;
           P64[Hp - 96] = _s3Gpr::P64;
           I64[Hp - 88] = lvl118_s3Gpu_info;
           P64[Hp - 72] = _s3Gpq::P64;
           _c3JSl::P64 = Hp - 112;
           P64[Hp - 64] = _c3JSl::P64;
           I64[Hp - 56] = sat_s3GpF_info;
           P64[Hp - 40] = _s3Gpq::P64;
           P64[Hp - 32] = _c3JSl::P64;
           I64[Hp - 24] = sat_s3GpA_info;
           P64[Hp - 16] = Hp - 88;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 56;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Gps_info" {
     lvl116_s3Gps_info:
         const lvl116_s3Gps_entry;
         const 2;
         const 1125904201809938;
         const S3GvX_srt+1224;
 },
 k_s3GpG_entry() //  [R1]
         { []
         }
     {offset
       c3JTN: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3GpG_info" {
     k_s3GpG_info:
         const k_s3GpG_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3GpJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JTV: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GpJ_info" {
     sat_s3GpJ_info:
         const sat_s3GpJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.Read.Lex.$wexpect_entry() //  [R2, R3]
         { []
         }
     {offset
       c3JTY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3JU2; else goto c3JU1;
       c3JU2: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wexpect_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3JU1: // global
           I64[Hp - 56] = lvl116_s3Gps_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = k_s3GpG_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = sat_s3GpJ_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$wexpect_info" {
     Text.Read.Lex.$wexpect_info:
         const Text.Read.Lex.$wexpect_entry;
         const 0;
         const 10133103456550926;
         const 8589934607;
         const S3GvX_srt+1224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.766220346 UTC

[section ""data" . Text.Read.Lex.expect1_closure" {
     Text.Read.Lex.expect1_closure:
         const Text.Read.Lex.expect1_info;
         const 0;
 },
 Text.Read.Lex.expect1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3JVA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3JVB; else goto c3JVC;
       c3JVB: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.expect1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3JVC: // global
           I64[Sp - 8] = block_c3JVx_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.expect1_info" {
     Text.Read.Lex.expect1_info:
         const Text.Read.Lex.expect1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3GvX_srt+1392;
 },
 _c3JVx() //  [R1]
         { []
         }
     {offset
       c3JVx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JVF; else goto c3JVE;
       c3JVF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JVE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JVx_info" {
     block_c3JVx_info:
         const _c3JVx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.771593952 UTC

[section ""data" . Text.Read.Lex.expect_closure" {
     Text.Read.Lex.expect_closure:
         const Text.Read.Lex.expect_info;
         const 0;
 },
 Text.Read.Lex.expect_entry() //  [R2, R3]
         { []
         }
     {offset
       c3JVV: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.expect1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.expect_info" {
     Text.Read.Lex.expect_info:
         const Text.Read.Lex.expect_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3GvX_srt+1400;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.778203336 UTC

[section ""data" . Text.Read.Lex.$whsLex_closure" {
     Text.Read.Lex.$whsLex_closure:
         const Text.Read.Lex.$whsLex_info;
         const 0;
 },
 lvl117_s3GpQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JWf: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl117_s3GpQ_info" {
     lvl117_s3GpQ_info:
         const lvl117_s3GpQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3Gq0_entry() //  [R1]
         { []
         }
     {offset
       c3JWs: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gq0_info" {
     sat_s3Gq0_info:
         const sat_s3Gq0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3Gq1_entry() //  [R1]
         { []
         }
     {offset
       c3JWv: // global
           _s3Gq1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JWw; else goto c3JWx;
       c3JWx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JWz; else goto c3JWy;
       c3JWz: // global
           HpAlloc = 16;
           goto c3JWw;
       c3JWw: // global
           R1 = _s3Gq1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JWy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gq1::P64;
           _s3GpS::P64 = P64[_s3Gq1::P64 + 16];
           I64[Hp - 8] = sat_s3Gq0_info;
           P64[Hp] = _s3GpS::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Gq1_info" {
     sat_s3Gq1_info:
         const sat_s3Gq1_entry;
         const 1;
         const 4294967312;
         const S3GvX_srt+1368;
 },
 sat_s3GpX_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JWM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JWN; else goto c3JWO;
       c3JWN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JWO: // global
           I64[Sp - 16] = block_c3JWF_info;
           _s3GpS::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GpS::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JWV; else goto c3JWG;
       u3JWV: // global
           call _c3JWF(R1) args: 0, res: 0, upd: 0;
       c3JWG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3GpX_info" {
     sat_s3GpX_info:
         const sat_s3GpX_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3JWF() //  [R1]
         { []
         }
     {offset
       c3JWF: // global
           if (R1 & 7 == 1) goto c3JWJ; else goto c3JWK;
       c3JWJ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JWK: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JWF_info" {
     block_c3JWF_info:
         const _c3JWF;
         const 1;
         const 30;
 },
 lvl116_s3GpP_entry() //  [R1]
         { []
         }
     {offset
       c3JWZ: // global
           _s3GpP::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3JX0; else goto c3JX1;
       c3JX1: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3JX3; else goto c3JX2;
       c3JX3: // global
           HpAlloc = 96;
           goto c3JX0;
       c3JX0: // global
           R1 = _s3GpP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JX2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GpP::P64;
           _s3GpO::P64 = P64[_s3GpP::P64 + 16];
           I64[Hp - 88] = lvl117_s3GpQ_info;
           P64[Hp - 80] = _s3GpO::P64;
           I64[Hp - 72] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 64] = Hp - 87;
           P64[Hp - 56] = Text.ParserCombinators.ReadP.Fail_closure+3;
           I64[Hp - 48] = sat_s3Gq1_info;
           _c3JWi::P64 = Hp - 68;
           P64[Hp - 32] = _c3JWi::P64;
           I64[Hp - 24] = sat_s3GpX_info;
           P64[Hp - 16] = _c3JWi::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 24] = block_c3JWX_info;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3GpP_info" {
     lvl116_s3GpP_info:
         const lvl116_s3GpP_entry;
         const 1;
         const 37154701220773904;
         const S3GvX_srt+1224;
 },
 _c3JWX() //  [R1]
         { []
         }
     {offset
       c3JWX: // global
           R3 = R1;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3JWX_info" {
     block_c3JWX_info:
         const _c3JWX;
         const 0;
         const 4294967326;
         const S3GvX_srt+1408;
 },
 k_s3Gq3_entry() //  [R1]
         { []
         }
     {offset
       c3JXc: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3Gq3_info" {
     k_s3Gq3_info:
         const k_s3Gq3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3Gq6_entry() //  [R1, R2]
         { []
         }
     {offset
       c3JXk: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Gq6_info" {
     sat_s3Gq6_info:
         const sat_s3Gq6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.Read.Lex.$whsLex_entry() //  [R2]
         { []
         }
     {offset
       c3JXn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3JXr; else goto c3JXq;
       c3JXr: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.Read.Lex.$whsLex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JXq: // global
           I64[Hp - 48] = lvl116_s3GpP_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3Gq3_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3Gq6_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.$whsLex_info" {
     Text.Read.Lex.$whsLex_info:
         const Text.Read.Lex.$whsLex_entry;
         const 0;
         const 109212295258701838;
         const 4294967301;
         const S3GvX_srt+1224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.798648105 UTC

[section ""data" . Text.Read.Lex.hsLex1_closure" {
     Text.Read.Lex.hsLex1_closure:
         const Text.Read.Lex.hsLex1_info;
         const 0;
 },
 Text.Read.Lex.hsLex1_entry() //  [R2]
         { []
         }
     {offset
       c3JYB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3JYC; else goto c3JYD;
       c3JYC: // global
           R2 = R2;
           R1 = Text.Read.Lex.hsLex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JYD: // global
           I64[Sp - 8] = block_c3JYy_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$whsLex_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.hsLex1_info" {
     Text.Read.Lex.hsLex1_info:
         const Text.Read.Lex.hsLex1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3GvX_srt+1416;
 },
 _c3JYy() //  [R1]
         { []
         }
     {offset
       c3JYy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JYG; else goto c3JYF;
       c3JYG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JYF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3JYy_info" {
     block_c3JYy_info:
         const _c3JYy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.804193732 UTC

[section ""data" . Text.Read.Lex.hsLex_closure" {
     Text.Read.Lex.hsLex_closure:
         const Text.Read.Lex.hsLex_info;
         const 0;
 },
 Text.Read.Lex.hsLex_entry() //  [R2]
         { []
         }
     {offset
       c3JYW: // global
           R2 = R2;
           call Text.Read.Lex.hsLex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.hsLex_info" {
     Text.Read.Lex.hsLex_info:
         const Text.Read.Lex.hsLex_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3GvX_srt+1424;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.80823611 UTC

[section ""data" . Text.Read.Lex.MkNumber_closure" {
     Text.Read.Lex.MkNumber_closure:
         const Text.Read.Lex.MkNumber_info;
 },
 Text.Read.Lex.MkNumber_entry() //  [R2, R3]
         { []
         }
     {offset
       c3JZ8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JZc; else goto c3JZb;
       c3JZc: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.MkNumber_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3JZb: // global
           I64[Hp - 16] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.MkNumber_info" {
     Text.Read.Lex.MkNumber_info:
         const Text.Read.Lex.MkNumber_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.812454083 UTC

[section ""data" . Text.Read.Lex.MkDecimal_closure" {
     Text.Read.Lex.MkDecimal_closure:
         const Text.Read.Lex.MkDecimal_info;
 },
 Text.Read.Lex.MkDecimal_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3JZo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3JZs; else goto c3JZr;
       c3JZs: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.MkDecimal_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3JZr: // global
           I64[Hp - 24] = Text.Read.Lex.MkDecimal_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.MkDecimal_info" {
     Text.Read.Lex.MkDecimal_info:
         const Text.Read.Lex.MkDecimal_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.81648561 UTC

[section ""data" . Text.Read.Lex.Char_closure" {
     Text.Read.Lex.Char_closure:
         const Text.Read.Lex.Char_info;
 },
 Text.Read.Lex.Char_entry() //  [R2]
         { []
         }
     {offset
       c3JZE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JZI; else goto c3JZH;
       c3JZI: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Char_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JZH: // global
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Char_info" {
     Text.Read.Lex.Char_info:
         const Text.Read.Lex.Char_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.820771259 UTC

[section ""data" . Text.Read.Lex.String_closure" {
     Text.Read.Lex.String_closure:
         const Text.Read.Lex.String_info;
 },
 Text.Read.Lex.String_entry() //  [R2]
         { []
         }
     {offset
       c3JZU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JZY; else goto c3JZX;
       c3JZY: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.String_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JZX: // global
           I64[Hp - 8] = Text.Read.Lex.String_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.String_info" {
     Text.Read.Lex.String_info:
         const Text.Read.Lex.String_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.82553107 UTC

[section ""data" . Text.Read.Lex.Punc_closure" {
     Text.Read.Lex.Punc_closure:
         const Text.Read.Lex.Punc_info;
 },
 Text.Read.Lex.Punc_entry() //  [R2]
         { []
         }
     {offset
       c3K0a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3K0e; else goto c3K0d;
       c3K0e: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Punc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3K0d: // global
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Punc_info" {
     Text.Read.Lex.Punc_info:
         const Text.Read.Lex.Punc_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.829979392 UTC

[section ""data" . Text.Read.Lex.Ident_closure" {
     Text.Read.Lex.Ident_closure:
         const Text.Read.Lex.Ident_info;
 },
 Text.Read.Lex.Ident_entry() //  [R2]
         { []
         }
     {offset
       c3K0q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3K0u; else goto c3K0t;
       c3K0u: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Ident_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3K0t: // global
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = R2;
           R1 = Hp - 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Ident_info" {
     Text.Read.Lex.Ident_info:
         const Text.Read.Lex.Ident_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.833827972 UTC

[section ""data" . Text.Read.Lex.Symbol_closure" {
     Text.Read.Lex.Symbol_closure:
         const Text.Read.Lex.Symbol_info;
 },
 Text.Read.Lex.Symbol_entry() //  [R2]
         { []
         }
     {offset
       c3K0G: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3K0K; else goto c3K0J;
       c3K0K: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Symbol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3K0J: // global
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Symbol_info" {
     Text.Read.Lex.Symbol_info:
         const Text.Read.Lex.Symbol_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.837564154 UTC

[section ""data" . Text.Read.Lex.Number_closure" {
     Text.Read.Lex.Number_closure:
         const Text.Read.Lex.Number_info;
 },
 Text.Read.Lex.Number_entry() //  [R2]
         { []
         }
     {offset
       c3K0W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3K10; else goto c3K0Z;
       c3K10: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Number_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3K0Z: // global
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = R2;
           R1 = Hp - 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Number_info" {
     Text.Read.Lex.Number_info:
         const Text.Read.Lex.Number_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.840863995 UTC

[section ""data" . Text.Read.Lex.EOF_closure" {
     Text.Read.Lex.EOF_closure:
         const Text.Read.Lex.EOF_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.843194927 UTC

[section ""cstring" . i3K19_str" {
     i3K19_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,77,107,78,117,109,98,101,114]
 },
 Text.Read.Lex.MkNumber_con_entry() //  [R1]
         { []
         }
     {offset
       c3K18: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.MkNumber_con_info" {
     Text.Read.Lex.MkNumber_con_info:
         const Text.Read.Lex.MkNumber_con_entry;
         const 2;
         const 4;
         const i3K19_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.846632393 UTC

[section ""cstring" . i3K1g_str" {
     i3K1g_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,77,107,68,101,99,105,109,97,108]
 },
 Text.Read.Lex.MkDecimal_con_entry() //  [R1]
         { []
         }
     {offset
       c3K1f: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.MkDecimal_con_info" {
     Text.Read.Lex.MkDecimal_con_info:
         const Text.Read.Lex.MkDecimal_con_entry;
         const 3;
         const 4294967297;
         const i3K1g_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.849887576 UTC

[section ""cstring" . i3K1n_str" {
     i3K1n_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,67,104,97,114]
 },
 Text.Read.Lex.Char_con_entry() //  [R1]
         { []
         }
     {offset
       c3K1m: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Char_con_info" {
     Text.Read.Lex.Char_con_info:
         const Text.Read.Lex.Char_con_entry;
         const 1;
         const 2;
         const i3K1n_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.853115153 UTC

[section ""cstring" . i3K1u_str" {
     i3K1u_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,83,116,114,105,110,103]
 },
 Text.Read.Lex.String_con_entry() //  [R1]
         { []
         }
     {offset
       c3K1t: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.String_con_info" {
     Text.Read.Lex.String_con_info:
         const Text.Read.Lex.String_con_entry;
         const 1;
         const 4294967298;
         const i3K1u_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.85697377 UTC

[section ""cstring" . i3K1B_str" {
     i3K1B_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,80,117,110,99]
 },
 Text.Read.Lex.Punc_con_entry() //  [R1]
         { []
         }
     {offset
       c3K1A: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Punc_con_info" {
     Text.Read.Lex.Punc_con_info:
         const Text.Read.Lex.Punc_con_entry;
         const 1;
         const 8589934594;
         const i3K1B_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.860678205 UTC

[section ""cstring" . i3K1I_str" {
     i3K1I_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,73,100,101,110,116]
 },
 Text.Read.Lex.Ident_con_entry() //  [R1]
         { []
         }
     {offset
       c3K1H: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Ident_con_info" {
     Text.Read.Lex.Ident_con_info:
         const Text.Read.Lex.Ident_con_entry;
         const 1;
         const 12884901890;
         const i3K1I_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.864005968 UTC

[section ""cstring" . i3K1P_str" {
     i3K1P_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,83,121,109,98,111,108]
 },
 Text.Read.Lex.Symbol_con_entry() //  [R1]
         { []
         }
     {offset
       c3K1O: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Symbol_con_info" {
     Text.Read.Lex.Symbol_con_info:
         const Text.Read.Lex.Symbol_con_entry;
         const 1;
         const 17179869186;
         const i3K1P_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.867239963 UTC

[section ""cstring" . i3K1W_str" {
     i3K1W_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,78,117,109,98,101,114]
 },
 Text.Read.Lex.Number_con_entry() //  [R1]
         { []
         }
     {offset
       c3K1V: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.Number_con_info" {
     Text.Read.Lex.Number_con_info:
         const Text.Read.Lex.Number_con_entry;
         const 1;
         const 21474836482;
         const i3K1W_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.870583709 UTC

[section ""cstring" . i3K23_str" {
     i3K23_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,69,79,70]
 },
 Text.Read.Lex.EOF_con_entry() //  [R1]
         { []
         }
     {offset
       c3K22: // global
           R1 = R1 + 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.Read.Lex.EOF_con_info" {
     Text.Read.Lex.EOF_con_info:
         const Text.Read.Lex.EOF_con_entry;
         const 4294967296;
         const 25769803779;
         const i3K23_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:24.875212984 UTC

[section ""relreadonly" . S3GvX_srt" {
     S3GvX_srt:
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.Show.$fShowInteger_closure;
         const Text.Read.Lex.$fShowLexeme8_closure;
         const Text.Read.Lex.$w$cshowsPrec_closure;
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_closure;
         const Text.Read.Lex.$fShowNumber_$cshow_closure;
         const Text.Read.Lex.$fShowNumber1_closure;
         const Text.Read.Lex.$fShowLexeme4_closure;
         const GHC.Show.$w$cshowsPrec3_closure;
         const GHC.Show.showLitString_closure;
         const Text.Read.Lex.$fShowLexeme6_closure;
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure;
         const Text.Read.Lex.$fShowLexeme3_closure;
         const Text.Read.Lex.$fShowLexeme_$cshow_closure;
         const Text.Read.Lex.$fShowLexeme1_closure;
         const GHC.Unicode.$wgeneralCategory_closure;
         const Text.Read.Lex.isSymbolChar_closure;
         const Text.Read.Lex.isSymbolChar1_closure;
         const Text.Read.Lex.isSymbolChar3_closure;
         const lvl1_r3y8U_closure;
         const $wisIdfChar_r3y8V_closure;
         const isIdfChar_r3y8W_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const combine_r3y9t_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const lvl3_r3y9s_closure;
         const Text.Read.Lex.numberToFixed_go_closure;
         const Text.Read.Lex.numberToFixed2_closure;
         const Text.Read.Lex.valInteger_closure;
         const Text.Read.Lex.$w$sreadIntP_closure;
         const Text.Read.Lex.readIntP1_closure;
         const Text.Read.Lex.$wreadIntP_closure;
         const Text.Read.Lex.readIntP2_closure;
         const sat_s3G8f_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.numberToInteger_closure;
         const sat_s3G8y_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.^_$s^_closure;
         const lvl4_r3y9u_closure;
         const $wfracExp_r3y9v_closure;
         const Text.Read.Lex.numberToFixed_integerTake_closure;
         const Text.Read.Lex.numberToFixed_closure;
         const Text.Read.Lex.$wnumberToRational_closure;
         const Text.Read.Lex.numberToRational_closure;
         const sat_s3Gae_closure;
         const sat_s3Gak_closure;
         const Text.Read.Lex.$wnumberToRangedRational_closure;
         const Text.Read.Lex.numberToRangedRational2_closure;
         const Text.Read.Lex.numberToRangedRational4_closure;
         const Text.Read.Lex.numberToRangedRational5_closure;
         const Text.Read.Lex.numberToRangedRational_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const sat_s3Gbh_closure;
         const sat_s3Gbj_closure;
         const Text.Read.Lex.$w$svalDig_closure;
         const Text.Read.Lex.readDecP2_closure;
         const Text.Read.Lex.readDecP3_closure;
         const Text.Read.Lex.readDecP4_closure;
         const Text.Read.Lex.$wvalDig_closure;
         const Text.Read.Lex.$w$sreadIntP'_closure;
         const Text.Read.Lex.$wreadIntP'_closure;
         const Text.Read.Lex.readDecP6_closure;
         const Text.Read.Lex.readOctP1_closure;
         const Text.Read.Lex.readOctP2_closure;
         const Text.Read.Lex.readDecP1_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.readDecP5_closure;
         const Text.Read.Lex.readHexP1_closure;
         const Text.Read.Lex.readHexP2_closure;
         const $wlexDigits_r3y9x_closure;
         const $wlexHexOct_r3y9A_closure;
         const lexHexOct_r3y9B_closure;
         const $wlexFrac_r3y9D_closure;
         const lexFrac_r3y9E_closure;
         const sat_s3Gfm_closure;
         const m4_r3y9J_closure;
         const w1_r3ybW_closure;
         const m2_r3y9G_closure;
         const w_r3ybX_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const lvl46_r3ybY_closure;
         const m6_r3y9M_closure;
         const lvl47_r3ybZ_closure;
         const m8_r3y9P_closure;
         const lvl48_r3yc0_closure;
         const m10_r3y9S_closure;
         const lvl49_r3yc1_closure;
         const m12_r3y9V_closure;
         const lvl50_r3yc2_closure;
         const m14_r3y9Y_closure;
         const lvl51_r3yc3_closure;
         const m16_r3ya1_closure;
         const lvl52_r3yc4_closure;
         const m18_r3ya4_closure;
         const lvl53_r3yc5_closure;
         const m20_r3ya7_closure;
         const lvl54_r3yc6_closure;
         const m22_r3yaa_closure;
         const lvl55_r3yc7_closure;
         const m24_r3yad_closure;
         const lvl56_r3yc8_closure;
         const m26_r3yag_closure;
         const lvl57_r3yc9_closure;
         const m28_r3yaj_closure;
         const lvl58_r3yca_closure;
         const m30_r3yam_closure;
         const lvl59_r3ycb_closure;
         const m32_r3yap_closure;
         const lvl60_r3ycc_closure;
         const m34_r3yas_closure;
         const lvl61_r3ycd_closure;
         const m36_r3yav_closure;
         const lvl62_r3yce_closure;
         const m38_r3yay_closure;
         const lvl63_r3ycf_closure;
         const m40_r3yaB_closure;
         const lvl64_r3ycg_closure;
         const m42_r3yaE_closure;
         const lvl65_r3ych_closure;
         const m44_r3yaH_closure;
         const lvl66_r3yci_closure;
         const m46_r3yaK_closure;
         const lvl67_r3ycj_closure;
         const m48_r3yaN_closure;
         const lvl68_r3yck_closure;
         const m50_r3yaQ_closure;
         const lvl69_r3ycl_closure;
         const m52_r3yaT_closure;
         const lvl70_r3ycm_closure;
         const m54_r3yaW_closure;
         const lvl71_r3ycn_closure;
         const m56_r3yaZ_closure;
         const lvl72_r3yco_closure;
         const m58_r3yb2_closure;
         const lvl73_r3ycp_closure;
         const m60_r3yb5_closure;
         const lvl74_r3ycq_closure;
         const m62_r3yb8_closure;
         const lvl75_r3ycr_closure;
         const m64_r3ybb_closure;
         const lvl76_r3ycs_closure;
         const m66_r3ybe_closure;
         const lvl77_r3yct_closure;
         const m68_r3ybh_closure;
         const lvl78_r3ycu_closure;
         const GHC.Char.$wlvl_closure;
         const lvl7_r3ybj_closure;
         const Text.ParserCombinators.ReadP.choice_closure;
         const lvl111_r3yd1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Text.Read.Lex.lexChar2_closure;
         const Text.Read.Lex.$wconsumeEmpties_closure;
         const Text.Read.Lex.$wlvl_closure;
         const Text.Read.Lex.lexChar3_closure;
         const Text.Read.Lex.lexChar5_closure;
         const Text.Read.Lex.$wlexChar_closure;
         const Text.Read.Lex.lexChar1_closure;
         const lexStrItem_r3yd4_closure;
         const body_r3yd5_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.valInteger_closure;
         const lexExp_r3yd6_closure;
         const $wlexDecNumber_r3yd9_closure;
         const lexDecNumber_r3yda_closure;
         const isIdfChar_r3y8W_closure;
         const reserved_ops29_r3y9q_closure;
         const Text.Read.Lex.isSymbolChar3_closure;
         const Text.Read.Lex.expect2_closure;
         const Text.Read.Lex.$wlex_closure;
         const Text.Read.Lex.lex1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Text.Read.Lex.expect1_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const Text.Read.Lex.$whsLex_closure;
         const Text.Read.Lex.hsLex1_closure;
 }]

