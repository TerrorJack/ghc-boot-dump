
==================== Tidy Core ====================
2018-03-16 15:58:09.769879817 UTC

Result size of Tidy Core
  = {terms: 4,692, types: 4,287, coercions: 222, joins: 13/155}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Read.Lex.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$trModule3
  = GHC.Types.TrNameS Text.Read.Lex.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
Text.Read.Lex.$trModule2 = "Text.Read.Lex"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$trModule1
  = GHC.Types.TrNameS Text.Read.Lex.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Read.Lex.$trModule
  = GHC.Types.Module
      Text.Read.Lex.$trModule3 Text.Read.Lex.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r3y8E :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r3y8E
  = GHC.Types.KindRepTyConApp
      integer-simple-0.1.1.1:GHC.Integer.Type.$tcInteger
      (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r3y8F :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_r3y8F
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r3y8G :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r3y8G
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep3_r3y8H :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep3_r3y8H
  = GHC.Types.: @ KindRep $krep_r3y8E (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_r3y8I :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_r3y8I
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep3_r3y8H

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep5_r3y8J :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep5_r3y8J
  = GHC.Types.: @ KindRep $krep1_r3y8F (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_r3y8K :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep6_r3y8K
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep5_r3y8J

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7_r3y8L :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep7_r3y8L
  = GHC.Types.: @ KindRep $krep6_r3y8K (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r3y8M :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep8_r3y8M
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep7_r3y8L

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep9_r3y8N :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep9_r3y8N
  = GHC.Types.: @ KindRep $krep2_r3y8G (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r3y8O :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep10_r3y8O
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep9_r3y8N

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tcNumber2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$tcNumber2 = "Number"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tcNumber1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$tcNumber1
  = GHC.Types.TrNameS Text.Read.Lex.$tcNumber2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tcNumber :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Read.Lex.$tcNumber
  = GHC.Types.TyCon
      309030926258572567##
      15861928963352354800##
      Text.Read.Lex.$trModule
      Text.Read.Lex.$tcNumber1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep11_r3y8P :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep11_r3y8P
  = GHC.Types.KindRepTyConApp
      Text.Read.Lex.$tcNumber (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_r3y8Q :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep12_r3y8Q = GHC.Types.KindRepFun $krep4_r3y8I $krep11_r3y8P

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r3y8R :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep13_r3y8R = GHC.Types.KindRepFun $krep8_r3y8M $krep12_r3y8Q

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'MkDecimal1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.Read.Lex.$tc'MkDecimal1
  = GHC.Types.KindRepFun $krep6_r3y8K $krep13_r3y8R

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'MkDecimal3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Read.Lex.$tc'MkDecimal3 = "'MkDecimal"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'MkDecimal2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$tc'MkDecimal2
  = GHC.Types.TrNameS Text.Read.Lex.$tc'MkDecimal3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'MkDecimal :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Read.Lex.$tc'MkDecimal
  = GHC.Types.TyCon
      3768064156751246198##
      12661213050981530502##
      Text.Read.Lex.$trModule
      Text.Read.Lex.$tc'MkDecimal2
      0#
      Text.Read.Lex.$tc'MkDecimal1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_r3y8S :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep14_r3y8S = GHC.Types.KindRepFun $krep6_r3y8K $krep11_r3y8P

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'MkNumber1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.Read.Lex.$tc'MkNumber1
  = GHC.Types.KindRepFun $krep1_r3y8F $krep14_r3y8S

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'MkNumber3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Read.Lex.$tc'MkNumber3 = "'MkNumber"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'MkNumber2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$tc'MkNumber2
  = GHC.Types.TrNameS Text.Read.Lex.$tc'MkNumber3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'MkNumber :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Read.Lex.$tc'MkNumber
  = GHC.Types.TyCon
      13396293166029931455##
      9655480518931438202##
      Text.Read.Lex.$trModule
      Text.Read.Lex.$tc'MkNumber2
      0#
      Text.Read.Lex.$tc'MkNumber1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tcLexeme2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$tcLexeme2 = "Lexeme"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tcLexeme1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$tcLexeme1
  = GHC.Types.TrNameS Text.Read.Lex.$tcLexeme2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tcLexeme :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Read.Lex.$tcLexeme
  = GHC.Types.TyCon
      80462090517814070##
      11862718491065697853##
      Text.Read.Lex.$trModule
      Text.Read.Lex.$tcLexeme1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'EOF1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
Text.Read.Lex.$tc'EOF1
  = GHC.Types.KindRepTyConApp
      Text.Read.Lex.$tcLexeme (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'EOF3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Read.Lex.$tc'EOF3 = "'EOF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'EOF2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$tc'EOF2 = GHC.Types.TrNameS Text.Read.Lex.$tc'EOF3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'EOF :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Read.Lex.$tc'EOF
  = GHC.Types.TyCon
      3510729917506789415##
      3927434500167946503##
      Text.Read.Lex.$trModule
      Text.Read.Lex.$tc'EOF2
      0#
      Text.Read.Lex.$tc'EOF1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Ident1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.Read.Lex.$tc'Ident1
  = GHC.Types.KindRepFun $krep10_r3y8O Text.Read.Lex.$tc'EOF1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'String2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$tc'String2 = "'String"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'String1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$tc'String1
  = GHC.Types.TrNameS Text.Read.Lex.$tc'String2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'String :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Read.Lex.$tc'String
  = GHC.Types.TyCon
      4234975262003182519##
      13764813366371540099##
      Text.Read.Lex.$trModule
      Text.Read.Lex.$tc'String1
      0#
      Text.Read.Lex.$tc'Ident1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Punc2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$tc'Punc2 = "'Punc"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Punc1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$tc'Punc1 = GHC.Types.TrNameS Text.Read.Lex.$tc'Punc2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Punc :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Read.Lex.$tc'Punc
  = GHC.Types.TyCon
      12518860736485891069##
      4367633479442506190##
      Text.Read.Lex.$trModule
      Text.Read.Lex.$tc'Punc1
      0#
      Text.Read.Lex.$tc'Ident1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Ident3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$tc'Ident3 = "'Ident"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Ident2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$tc'Ident2
  = GHC.Types.TrNameS Text.Read.Lex.$tc'Ident3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Ident :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Read.Lex.$tc'Ident
  = GHC.Types.TyCon
      17378133866674838049##
      11361322998352874125##
      Text.Read.Lex.$trModule
      Text.Read.Lex.$tc'Ident2
      0#
      Text.Read.Lex.$tc'Ident1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Symbol2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$tc'Symbol2 = "'Symbol"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Symbol1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$tc'Symbol1
  = GHC.Types.TrNameS Text.Read.Lex.$tc'Symbol2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Symbol :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Read.Lex.$tc'Symbol
  = GHC.Types.TyCon
      434905475898525586##
      17609692850475477756##
      Text.Read.Lex.$trModule
      Text.Read.Lex.$tc'Symbol1
      0#
      Text.Read.Lex.$tc'Ident1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Char1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.Read.Lex.$tc'Char1
  = GHC.Types.KindRepFun $krep2_r3y8G Text.Read.Lex.$tc'EOF1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Char3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$tc'Char3 = "'Char"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Char2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$tc'Char2 = GHC.Types.TrNameS Text.Read.Lex.$tc'Char3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Char :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Read.Lex.$tc'Char
  = GHC.Types.TyCon
      4794546904228625478##
      396576625805862141##
      Text.Read.Lex.$trModule
      Text.Read.Lex.$tc'Char2
      0#
      Text.Read.Lex.$tc'Char1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Number1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.Read.Lex.$tc'Number1
  = GHC.Types.KindRepFun $krep11_r3y8P Text.Read.Lex.$tc'EOF1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Number3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$tc'Number3 = "'Number"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Number2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$tc'Number2
  = GHC.Types.TrNameS Text.Read.Lex.$tc'Number3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$tc'Number :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Read.Lex.$tc'Number
  = GHC.Types.TyCon
      3115835552307058655##
      14198768466951480548##
      Text.Read.Lex.$trModule
      Text.Read.Lex.$tc'Number2
      0#
      Text.Read.Lex.$tc'Number1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme9 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Read.Lex.$fShowLexeme9 = "MkDecimal "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme8 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Read.Lex.$fShowLexeme8
  = unpackCString# Text.Read.Lex.$fShowLexeme9

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme10 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$fShowLexeme10 = GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme11 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Read.Lex.$fShowLexeme11 = "MkNumber "#

-- RHS size: {terms: 127, types: 93, coercions: 0, joins: 0/6}
Text.Read.Lex.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int# -> Number -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 411] 912 240}]
Text.Read.Lex.$w$cshowsPrec
  = \ (ww_s3xhe :: Int#) (w2_s3xhb :: Number) ->
      case w2_s3xhb of {
        MkNumber b1_a3uQN b2_a3uQO ->
          let {
            p_s3vZi :: GHC.Show.ShowS
            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
            p_s3vZi
              = \ (x34_X1Mkd :: String) ->
                  unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme11
                    (case b1_a3uQN of { I# ww3_i1MP0 ->
                     case GHC.Show.$wshowSignedInt
                            11#
                            ww3_i1MP0
                            (GHC.Types.:
                               @ Char
                               GHC.Show.showSpace1
                               (case b2_a3uQO of {
                                  [] -> unpackAppendCString# GHC.Show.showList__4 x34_X1Mkd;
                                  : x35_i1Jjd xs_i1Jje ->
                                    GHC.Types.:
                                      @ Char
                                      GHC.Show.showList__3
                                      (case x35_i1Jjd of { I# ww5_i3vCH ->
                                       case GHC.Show.$wshowSignedInt
                                              0#
                                              ww5_i3vCH
                                              (let {
                                                 lvl116_s3vZo :: [Char]
                                                 [LclId, Unf=OtherCon []]
                                                 lvl116_s3vZo
                                                   = GHC.Types.:
                                                       @ Char GHC.Show.showList__2 x34_X1Mkd } in
                                               letrec {
                                                 showl_s3vZn [Occ=LoopBreaker] :: [Int] -> String
                                                 [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                                                 showl_s3vZn
                                                   = \ (ds2_i1Jjj :: [Int]) ->
                                                       case ds2_i1Jjj of {
                                                         [] -> lvl116_s3vZo;
                                                         : y_i1Jjp ys_i1Jjq ->
                                                           GHC.Types.:
                                                             @ Char
                                                             GHC.Show.showList__1
                                                             (case y_i1Jjp of { I# ww7_X3vFT ->
                                                              case GHC.Show.$wshowSignedInt
                                                                     0#
                                                                     ww7_X3vFT
                                                                     (showl_s3vZn ys_i1Jjq)
                                                              of
                                                              { (# ww9_i3vCL, ww4_i3vCM #) ->
                                                              GHC.Types.: @ Char ww9_i3vCL ww4_i3vCM
                                                              }
                                                              })
                                                       }; } in
                                               showl_s3vZn xs_i1Jje)
                                       of
                                       { (# ww7_i3vCL, ww4_i3vCM #) ->
                                       GHC.Types.: @ Char ww7_i3vCL ww4_i3vCM
                                       }
                                       })
                                }))
                     of
                     { (# ww5_i1MP4, ww6_i1MP5 #) ->
                     GHC.Types.: @ Char ww5_i1MP4 ww6_i1MP5
                     }
                     }) } in
          case >=# ww_s3xhe 11# of {
            __DEFAULT -> p_s3vZi;
            1# ->
              \ (x34_i1Mhy :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (p_s3vZi (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x34_i1Mhy))
          };
        MkDecimal b1_a3uQQ b2_a3uQR b3_a3uQS ->
          let {
            f_s3vZv [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            f_s3vZv
              = GHC.Show.$fShowMaybe_$cshowsPrec
                  @ [Int]
                  GHC.Show.$fShow[]_$s$fShow[]
                  Text.Read.Lex.$fShowLexeme10
                  b2_a3uQR } in
          let {
            g_s3vZu [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_s3vZu
              = GHC.Show.$fShowMaybe_$cshowsPrec
                  @ Integer
                  GHC.Show.$fShowInteger
                  Text.Read.Lex.$fShowLexeme10
                  b3_a3uQS } in
          let {
            g1_s3vZt [Dmd=<L,C(U)>] :: String -> String
            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
            g1_s3vZt
              = \ (x34_X1Mkm :: String) ->
                  GHC.Show.showList__
                    @ Int
                    GHC.Show.$fShowInt1
                    b1_a3uQQ
                    (GHC.Types.:
                       @ Char
                       GHC.Show.showSpace1
                       (f_s3vZv
                          (GHC.Types.: @ Char GHC.Show.showSpace1 (g_s3vZu x34_X1Mkm)))) } in
          case >=# ww_s3xhe 11# of {
            __DEFAULT ->
              \ (x34_X1Mko :: String) ->
                ++ @ Char Text.Read.Lex.$fShowLexeme8 (g1_s3vZt x34_X1Mko);
            1# ->
              \ (x34_i1Mhy :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (++
                     @ Char
                     Text.Read.Lex.$fShowLexeme8
                     (g1_s3vZt (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x34_i1Mhy)))
          }
      }

-- RHS size: {terms: 8, types: 4, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowNumber_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> Number -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w2_s3xha [Occ=Once!] :: Int)
                 (w3_s3xhb [Occ=Once] :: Number) ->
                 case w2_s3xha of { I# ww1_s3xhe [Occ=Once] ->
                 Text.Read.Lex.$w$cshowsPrec ww1_s3xhe w3_s3xhb
                 }}]
Text.Read.Lex.$fShowNumber_$cshowsPrec
  = \ (w2_s3xha :: Int) (w3_s3xhb :: Number) ->
      case w2_s3xha of { I# ww1_s3xhe ->
      Text.Read.Lex.$w$cshowsPrec ww1_s3xhe w3_s3xhb
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.$fShowLexeme2 = GHC.Types.I# 0#

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowNumber_$cshow :: Number -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x34_i1Jj2 [Occ=Once] :: Number) ->
                 Text.Read.Lex.$fShowNumber_$cshowsPrec
                   Text.Read.Lex.$fShowLexeme2 x34_i1Jj2 (GHC.Types.[] @ Char)}]
Text.Read.Lex.$fShowNumber_$cshow
  = \ (x34_i1Jj2 :: Number) ->
      Text.Read.Lex.$w$cshowsPrec 0# x34_i1Jj2 (GHC.Types.[] @ Char)

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowNumber1 :: Number -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
Text.Read.Lex.$fShowNumber1
  = \ (w2_s3xhb :: Number) -> Text.Read.Lex.$w$cshowsPrec 0# w2_s3xhb

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowNumber_$cshowList :: [Number] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i1Mix [Occ=Once] :: [Number])
                 (s_i1Miy [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ Number Text.Read.Lex.$fShowNumber1 ls_i1Mix s_i1Miy}]
Text.Read.Lex.$fShowNumber_$cshowList
  = \ (ls_i1Mix :: [Number]) (s_i1Miy :: String) ->
      GHC.Show.showList__
        @ Number Text.Read.Lex.$fShowNumber1 ls_i1Mix s_i1Miy

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowNumber [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Number
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Number
                       Text.Read.Lex.$fShowNumber_$cshowsPrec
                       Text.Read.Lex.$fShowNumber_$cshow
                       Text.Read.Lex.$fShowNumber_$cshowList]
Text.Read.Lex.$fShowNumber
  = GHC.Show.C:Show
      @ Number
      Text.Read.Lex.$fShowNumber_$cshowsPrec
      Text.Read.Lex.$fShowNumber_$cshow
      Text.Read.Lex.$fShowNumber_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$fShowLexeme7 = "Number "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Read.Lex.$fShowLexeme6
  = unpackCString# Text.Read.Lex.$fShowLexeme7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Read.Lex.$fShowLexeme5 = "EOF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Read.Lex.$fShowLexeme4
  = unpackCString# Text.Read.Lex.$fShowLexeme5

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme3 :: [Char] -> [Char]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Text.Read.Lex.$fShowLexeme3 = ++ @ Char Text.Read.Lex.$fShowLexeme4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme16 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$fShowLexeme16 = "Char "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme15 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$fShowLexeme15 = "String "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme14 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$fShowLexeme14 = "Punc "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme13 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$fShowLexeme13 = "Ident "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme12 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Read.Lex.$fShowLexeme12 = "Symbol "#

-- RHS size: {terms: 202, types: 75, coercions: 0, joins: 0/1}
Text.Read.Lex.$fShowLexeme_$cshowsPrec
  :: Int -> Lexeme -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [120 1195] 1416 780}]
Text.Read.Lex.$fShowLexeme_$cshowsPrec
  = \ (a_a3uR5 :: Int) (ds_d3vBA :: Lexeme) ->
      case ds_d3vBA of {
        Char b1_a3uR6 ->
          case a_a3uR5 of { I# x34_alMY ->
          case >=# x34_alMY 11# of {
            __DEFAULT ->
              \ (x35_i1Mhr :: String) ->
                unpackAppendCString#
                  Text.Read.Lex.$fShowLexeme16
                  (case b1_a3uR6 of { C# ww1_i3vDx ->
                   GHC.Show.$w$cshowsPrec3 ww1_i3vDx x35_i1Mhr
                   });
            1# ->
              \ (x35_i1Mhy :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (unpackAppendCString#
                     Text.Read.Lex.$fShowLexeme16
                     (case b1_a3uR6 of { C# ww1_i3vDx ->
                      GHC.Show.$w$cshowsPrec3
                        ww1_i3vDx (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x35_i1Mhy)
                      }))
          }
          };
        String b1_a3uR8 ->
          case a_a3uR5 of { I# x34_alMY ->
          case >=# x34_alMY 11# of {
            __DEFAULT ->
              \ (x35_i1Mhr :: String) ->
                unpackAppendCString#
                  Text.Read.Lex.$fShowLexeme15
                  (GHC.Types.:
                     @ Char
                     GHC.Show.$fShow(,)3
                     (GHC.Show.showLitString
                        b1_a3uR8 (GHC.Types.: @ Char GHC.Show.$fShow(,)3 x35_i1Mhr)));
            1# ->
              \ (x35_i1Mhy :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (unpackAppendCString#
                     Text.Read.Lex.$fShowLexeme15
                     (GHC.Types.:
                        @ Char
                        GHC.Show.$fShow(,)3
                        (GHC.Show.showLitString
                           b1_a3uR8
                           (GHC.Types.:
                              @ Char
                              GHC.Show.$fShow(,)3
                              (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x35_i1Mhy)))))
          }
          };
        Punc b1_a3uRa ->
          case a_a3uR5 of { I# x34_alMY ->
          case >=# x34_alMY 11# of {
            __DEFAULT ->
              \ (x35_i1Mhr :: String) ->
                unpackAppendCString#
                  Text.Read.Lex.$fShowLexeme14
                  (GHC.Types.:
                     @ Char
                     GHC.Show.$fShow(,)3
                     (GHC.Show.showLitString
                        b1_a3uRa (GHC.Types.: @ Char GHC.Show.$fShow(,)3 x35_i1Mhr)));
            1# ->
              \ (x35_i1Mhy :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (unpackAppendCString#
                     Text.Read.Lex.$fShowLexeme14
                     (GHC.Types.:
                        @ Char
                        GHC.Show.$fShow(,)3
                        (GHC.Show.showLitString
                           b1_a3uRa
                           (GHC.Types.:
                              @ Char
                              GHC.Show.$fShow(,)3
                              (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x35_i1Mhy)))))
          }
          };
        Ident b1_a3uRc ->
          case a_a3uR5 of { I# x34_alMY ->
          case >=# x34_alMY 11# of {
            __DEFAULT ->
              \ (x35_i1Mhr :: String) ->
                unpackAppendCString#
                  Text.Read.Lex.$fShowLexeme13
                  (GHC.Types.:
                     @ Char
                     GHC.Show.$fShow(,)3
                     (GHC.Show.showLitString
                        b1_a3uRc (GHC.Types.: @ Char GHC.Show.$fShow(,)3 x35_i1Mhr)));
            1# ->
              \ (x35_i1Mhy :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (unpackAppendCString#
                     Text.Read.Lex.$fShowLexeme13
                     (GHC.Types.:
                        @ Char
                        GHC.Show.$fShow(,)3
                        (GHC.Show.showLitString
                           b1_a3uRc
                           (GHC.Types.:
                              @ Char
                              GHC.Show.$fShow(,)3
                              (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x35_i1Mhy)))))
          }
          };
        Symbol b1_a3uRe ->
          case a_a3uR5 of { I# x34_alMY ->
          case >=# x34_alMY 11# of {
            __DEFAULT ->
              \ (x35_i1Mhr :: String) ->
                unpackAppendCString#
                  Text.Read.Lex.$fShowLexeme12
                  (GHC.Types.:
                     @ Char
                     GHC.Show.$fShow(,)3
                     (GHC.Show.showLitString
                        b1_a3uRe (GHC.Types.: @ Char GHC.Show.$fShow(,)3 x35_i1Mhr)));
            1# ->
              \ (x35_i1Mhy :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (unpackAppendCString#
                     Text.Read.Lex.$fShowLexeme12
                     (GHC.Types.:
                        @ Char
                        GHC.Show.$fShow(,)3
                        (GHC.Show.showLitString
                           b1_a3uRe
                           (GHC.Types.:
                              @ Char
                              GHC.Show.$fShow(,)3
                              (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x35_i1Mhy)))))
          }
          };
        Number b1_a3uRg ->
          case a_a3uR5 of { I# x34_alMY ->
          let {
            g_s3vZd [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_s3vZd = Text.Read.Lex.$w$cshowsPrec 11# b1_a3uRg } in
          case >=# x34_alMY 11# of {
            __DEFAULT ->
              \ (x35_i1Mhr :: String) ->
                ++ @ Char Text.Read.Lex.$fShowLexeme6 (g_s3vZd x35_i1Mhr);
            1# ->
              \ (x35_i1Mhy :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (++
                     @ Char
                     Text.Read.Lex.$fShowLexeme6
                     (g_s3vZd (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x35_i1Mhy)))
          }
          };
        EOF -> Text.Read.Lex.$fShowLexeme3
      }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme17 :: [Char]
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Read.Lex.$fShowLexeme17
  = GHC.Types.: @ Char GHC.Show.$fShow(,)3 (GHC.Types.[] @ Char)

-- RHS size: {terms: 53, types: 17, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme_$cshow :: Lexeme -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [430] 490 0}]
Text.Read.Lex.$fShowLexeme_$cshow
  = \ (x34_i1Jj2 :: Lexeme) ->
      case x34_i1Jj2 of {
        Char b1_a3uR6 ->
          unpackAppendCString#
            Text.Read.Lex.$fShowLexeme16
            (case b1_a3uR6 of { C# ww1_i3vDx ->
             GHC.Show.$w$cshowsPrec3 ww1_i3vDx (GHC.Types.[] @ Char)
             });
        String b1_a3uR8 ->
          unpackAppendCString#
            Text.Read.Lex.$fShowLexeme15
            (GHC.Types.:
               @ Char
               GHC.Show.$fShow(,)3
               (GHC.Show.showLitString b1_a3uR8 Text.Read.Lex.$fShowLexeme17));
        Punc b1_a3uRa ->
          unpackAppendCString#
            Text.Read.Lex.$fShowLexeme14
            (GHC.Types.:
               @ Char
               GHC.Show.$fShow(,)3
               (GHC.Show.showLitString b1_a3uRa Text.Read.Lex.$fShowLexeme17));
        Ident b1_a3uRc ->
          unpackAppendCString#
            Text.Read.Lex.$fShowLexeme13
            (GHC.Types.:
               @ Char
               GHC.Show.$fShow(,)3
               (GHC.Show.showLitString b1_a3uRc Text.Read.Lex.$fShowLexeme17));
        Symbol b1_a3uRe ->
          unpackAppendCString#
            Text.Read.Lex.$fShowLexeme12
            (GHC.Types.:
               @ Char
               GHC.Show.$fShow(,)3
               (GHC.Show.showLitString b1_a3uRe Text.Read.Lex.$fShowLexeme17));
        Number b1_a3uRg ->
          ++
            @ Char
            Text.Read.Lex.$fShowLexeme6
            (Text.Read.Lex.$w$cshowsPrec 11# b1_a3uRg (GHC.Types.[] @ Char));
        EOF -> Text.Read.Lex.$fShowLexeme4
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme1 :: Lexeme -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Text.Read.Lex.$fShowLexeme1
  = Text.Read.Lex.$fShowLexeme_$cshowsPrec
      Text.Read.Lex.$fShowLexeme2

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme_$cshowList :: [Lexeme] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i1Mix [Occ=Once] :: [Lexeme])
                 (s_i1Miy [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ Lexeme Text.Read.Lex.$fShowLexeme1 ls_i1Mix s_i1Miy}]
Text.Read.Lex.$fShowLexeme_$cshowList
  = \ (ls_i1Mix :: [Lexeme]) (s_i1Miy :: String) ->
      GHC.Show.showList__
        @ Lexeme Text.Read.Lex.$fShowLexeme1 ls_i1Mix s_i1Miy

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Text.Read.Lex.$fShowLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Lexeme
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Lexeme
                       Text.Read.Lex.$fShowLexeme_$cshowsPrec
                       Text.Read.Lex.$fShowLexeme_$cshow
                       Text.Read.Lex.$fShowLexeme_$cshowList]
Text.Read.Lex.$fShowLexeme
  = GHC.Show.C:Show
      @ Lexeme
      Text.Read.Lex.$fShowLexeme_$cshowsPrec
      Text.Read.Lex.$fShowLexeme_$cshow
      Text.Read.Lex.$fShowLexeme_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.isSymbolChar4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Read.Lex.isSymbolChar4 = ",;()[]{}`"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.isSymbolChar3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Read.Lex.isSymbolChar3
  = unpackCString# Text.Read.Lex.isSymbolChar4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.isSymbolChar2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Read.Lex.isSymbolChar2 = "'\""#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.isSymbolChar1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Read.Lex.isSymbolChar1
  = unpackCString# Text.Read.Lex.isSymbolChar2

-- RHS size: {terms: 44, types: 9, coercions: 0, joins: 0/0}
isSymbolChar :: Char -> Bool
[GblId,
 Arity=1,
 Str=<L,U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 250 110}]
isSymbolChar
  = \ (c_a3uMh :: Char) ->
      case elem
             @ Char GHC.Classes.$fEqChar c_a3uMh Text.Read.Lex.isSymbolChar3
      of {
        False ->
          case c_a3uMh of ww_s2iDW { C# ww1_s2iDX ->
          case GHC.Unicode.$wgeneralCategory ww1_s2iDX of {
            __DEFAULT -> GHC.Types.False;
            ConnectorPunctuation ->
              case ww1_s2iDX of {
                __DEFAULT -> GHC.Types.True;
                '_'# -> GHC.Types.False
              };
            DashPunctuation -> GHC.Types.True;
            OtherPunctuation ->
              case elem
                     @ Char GHC.Classes.$fEqChar ww_s2iDW Text.Read.Lex.isSymbolChar1
              of {
                False -> GHC.Types.True;
                True -> GHC.Types.False
              };
            MathSymbol -> GHC.Types.True;
            CurrencySymbol -> GHC.Types.True;
            ModifierSymbol -> GHC.Types.True;
            OtherSymbol -> GHC.Types.True
          }
          };
        True -> GHC.Types.False
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_r3y8T :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_r3y8T = "_'"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_r3y8U :: [Char]
[GblId]
lvl1_r3y8U = unpackCString# lvl_r3y8T

-- RHS size: {terms: 17, types: 14, coercions: 0, joins: 0/0}
$wisIdfChar_r3y8V :: Char# -> Bool
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []]
$wisIdfChar_r3y8V
  = \ (ww_s3xho :: Char#) ->
      case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_d2hPi
             (ord# ww_s3xho) realWorld#
      of
      { (# ds_d2hPh, ds1_d2hPg #) ->
      case ds1_d2hPg of {
        __DEFAULT -> GHC.Types.True;
        0# ->
          elem @ Char GHC.Classes.$fEqChar (GHC.Types.C# ww_s3xho) lvl1_r3y8U
      }
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
isIdfChar_r3y8W :: Char -> Bool
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []]
isIdfChar_r3y8W
  = \ (w2_s3xhl :: Char) ->
      case w2_s3xhl of { C# ww1_s3xho -> $wisIdfChar_r3y8V ww1_s3xho }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
reserved_ops_r3y8X :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
reserved_ops_r3y8X = ".."#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
reserved_ops1_r3y8Y :: [Char]
[GblId]
reserved_ops1_r3y8Y = unpackCString# reserved_ops_r3y8X

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
reserved_ops2_r3y8Z :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
reserved_ops2_r3y8Z = "::"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
reserved_ops3_r3y90 :: [Char]
[GblId]
reserved_ops3_r3y90 = unpackCString# reserved_ops2_r3y8Z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
reserved_ops4_r3y91 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
reserved_ops4_r3y91 = "="#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
reserved_ops5_r3y92 :: [Char]
[GblId]
reserved_ops5_r3y92 = unpackCString# reserved_ops4_r3y91

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
reserved_ops6_r3y93 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
reserved_ops6_r3y93 = "\\"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
reserved_ops7_r3y94 :: [Char]
[GblId]
reserved_ops7_r3y94 = unpackCString# reserved_ops6_r3y93

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
reserved_ops8_r3y95 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
reserved_ops8_r3y95 = "|"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
reserved_ops9_r3y96 :: [Char]
[GblId]
reserved_ops9_r3y96 = unpackCString# reserved_ops8_r3y95

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
reserved_ops10_r3y97 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
reserved_ops10_r3y97 = "<-"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
reserved_ops11_r3y98 :: [Char]
[GblId]
reserved_ops11_r3y98 = unpackCString# reserved_ops10_r3y97

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
reserved_ops12_r3y99 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
reserved_ops12_r3y99 = "->"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
reserved_ops13_r3y9a :: [Char]
[GblId]
reserved_ops13_r3y9a = unpackCString# reserved_ops12_r3y99

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
reserved_ops14_r3y9b :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
reserved_ops14_r3y9b = "@"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
reserved_ops15_r3y9c :: [Char]
[GblId]
reserved_ops15_r3y9c = unpackCString# reserved_ops14_r3y9b

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
reserved_ops16_r3y9d :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
reserved_ops16_r3y9d = "~"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
reserved_ops17_r3y9e :: [Char]
[GblId]
reserved_ops17_r3y9e = unpackCString# reserved_ops16_r3y9d

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
reserved_ops18_r3y9f :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
reserved_ops18_r3y9f = "=>"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
reserved_ops19_r3y9g :: [Char]
[GblId]
reserved_ops19_r3y9g = unpackCString# reserved_ops18_r3y9f

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
reserved_ops20_r3y9h :: [[Char]]
[GblId, Str=m2, Unf=OtherCon []]
reserved_ops20_r3y9h
  = GHC.Types.: @ [Char] reserved_ops19_r3y9g (GHC.Types.[] @ [Char])

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
reserved_ops21_r3y9i :: [[Char]]
[GblId, Str=m2, Unf=OtherCon []]
reserved_ops21_r3y9i
  = GHC.Types.: @ [Char] reserved_ops17_r3y9e reserved_ops20_r3y9h

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
reserved_ops22_r3y9j :: [[Char]]
[GblId, Str=m2, Unf=OtherCon []]
reserved_ops22_r3y9j
  = GHC.Types.: @ [Char] reserved_ops15_r3y9c reserved_ops21_r3y9i

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
reserved_ops23_r3y9k :: [[Char]]
[GblId, Str=m2, Unf=OtherCon []]
reserved_ops23_r3y9k
  = GHC.Types.: @ [Char] reserved_ops13_r3y9a reserved_ops22_r3y9j

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
reserved_ops24_r3y9l :: [[Char]]
[GblId, Str=m2, Unf=OtherCon []]
reserved_ops24_r3y9l
  = GHC.Types.: @ [Char] reserved_ops11_r3y98 reserved_ops23_r3y9k

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
reserved_ops25_r3y9m :: [[Char]]
[GblId, Str=m2, Unf=OtherCon []]
reserved_ops25_r3y9m
  = GHC.Types.: @ [Char] reserved_ops9_r3y96 reserved_ops24_r3y9l

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
reserved_ops26_r3y9n :: [[Char]]
[GblId, Str=m2, Unf=OtherCon []]
reserved_ops26_r3y9n
  = GHC.Types.: @ [Char] reserved_ops7_r3y94 reserved_ops25_r3y9m

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
reserved_ops27_r3y9o :: [[Char]]
[GblId, Str=m2, Unf=OtherCon []]
reserved_ops27_r3y9o
  = GHC.Types.: @ [Char] reserved_ops5_r3y92 reserved_ops26_r3y9n

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
reserved_ops28_r3y9p :: [[Char]]
[GblId, Str=m2, Unf=OtherCon []]
reserved_ops28_r3y9p
  = GHC.Types.: @ [Char] reserved_ops3_r3y90 reserved_ops27_r3y9o

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
reserved_ops29_r3y9q :: [[Char]]
[GblId, Str=m2, Unf=OtherCon []]
reserved_ops29_r3y9q
  = GHC.Types.: @ [Char] reserved_ops1_r3y8Y reserved_ops28_r3y9p

-- RHS size: {terms: 81, types: 58, coercions: 0, joins: 1/1}
Text.Read.Lex.$fEqLexeme_$c==1 :: Number -> Number -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [121 60] 385 70}]
Text.Read.Lex.$fEqLexeme_$c==1
  = \ (ds_d3vBp :: Number) (ds1_d3vBq :: Number) ->
      case ds_d3vBp of {
        MkNumber a3_a3uQC a4_a3uQD ->
          case ds1_d3vBq of {
            MkNumber b1_a3uQE b2_a3uQF ->
              case a3_a3uQC of { I# x34_a22G ->
              case b1_a3uQE of { I# y_a22K ->
              case ==# x34_a22G y_a22K of {
                __DEFAULT -> GHC.Types.False;
                1# -> GHC.Classes.$fEq[]_$s$c== a4_a3uQD b2_a3uQF
              }
              }
              };
            MkDecimal ipv_s3vEz ipv1_s3vEA ipv2_s3vEB -> GHC.Types.False
          };
        MkDecimal a3_a3uQG a4_a3uQH a5_a3uQI ->
          case ds1_d3vBq of {
            MkNumber ipv_s3vEE ipv1_s3vEF -> GHC.Types.False;
            MkDecimal b1_a3uQJ b2_a3uQK b3_a3uQL ->
              case GHC.Classes.$fEq[]_$s$c== a3_a3uQG b1_a3uQJ of {
                False -> GHC.Types.False;
                True ->
                  join {
                    $j_s3wbl [Dmd=<L,1*U>] :: Bool
                    [LclId[JoinId(0)]]
                    $j_s3wbl
                      = case a5_a3uQI of {
                          Nothing ->
                            case b3_a3uQL of {
                              Nothing -> GHC.Types.True;
                              Just ipv_i1APN -> GHC.Types.False
                            };
                          Just a6_i1APF ->
                            case b3_a3uQL of {
                              Nothing -> GHC.Types.False;
                              Just b4_i1APK ->
                                integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger a6_i1APF b4_i1APK
                            }
                        } } in
                  case a4_a3uQH of {
                    Nothing ->
                      case b2_a3uQK of {
                        Nothing -> jump $j_s3wbl;
                        Just ipv_i1APN -> GHC.Types.False
                      };
                    Just a6_i1APF ->
                      case b2_a3uQK of {
                        Nothing -> GHC.Types.False;
                        Just b4_i1APK ->
                          case GHC.Classes.$fEq[]_$s$c== a6_i1APF b4_i1APK of {
                            False -> GHC.Types.False;
                            True -> jump $j_s3wbl
                          }
                      }
                  }
              }
          }
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
Text.Read.Lex.$fEqNumber_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Number -> Number -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x34_a22b [Occ=Once] :: Number)
                 (y_a22c [Occ=Once] :: Number) ->
                 case Text.Read.Lex.$fEqLexeme_$c==1 x34_a22b y_a22c of {
                   False -> GHC.Types.True;
                   True -> GHC.Types.False
                 }}]
Text.Read.Lex.$fEqNumber_$c/=
  = \ (eta_B2 :: Number) (eta1_B1 :: Number) ->
      case Text.Read.Lex.$fEqLexeme_$c==1 eta_B2 eta1_B1 of {
        False -> GHC.Types.True;
        True -> GHC.Types.False
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Text.Read.Lex.$fEqNumber [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq Number
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: Number
                        Text.Read.Lex.$fEqLexeme_$c==1
                        Text.Read.Lex.$fEqNumber_$c/=]
Text.Read.Lex.$fEqNumber
  = GHC.Classes.C:Eq
      @ Number
      Text.Read.Lex.$fEqLexeme_$c==1
      Text.Read.Lex.$fEqNumber_$c/=

-- RHS size: {terms: 65, types: 22, coercions: 0, joins: 0/0}
Text.Read.Lex.$fEqLexeme_$c== :: Lexeme -> Lexeme -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [350 210] 390 80}]
Text.Read.Lex.$fEqLexeme_$c==
  = \ (ds_d3vBw :: Lexeme) (ds1_d3vBx :: Lexeme) ->
      case ds_d3vBw of {
        Char a3_a3uQT ->
          case ds1_d3vBx of {
            __DEFAULT -> GHC.Types.False;
            Char b1_a3uQU -> eqChar a3_a3uQT b1_a3uQU
          };
        String a3_a3uQV ->
          case ds1_d3vBx of {
            __DEFAULT -> GHC.Types.False;
            String b1_a3uQW -> eqString a3_a3uQV b1_a3uQW
          };
        Punc a3_a3uQX ->
          case ds1_d3vBx of {
            __DEFAULT -> GHC.Types.False;
            Punc b1_a3uQY -> eqString a3_a3uQX b1_a3uQY
          };
        Ident a3_a3uQZ ->
          case ds1_d3vBx of {
            __DEFAULT -> GHC.Types.False;
            Ident b1_a3uR0 -> eqString a3_a3uQZ b1_a3uR0
          };
        Symbol a3_a3uR1 ->
          case ds1_d3vBx of {
            __DEFAULT -> GHC.Types.False;
            Symbol b1_a3uR2 -> eqString a3_a3uR1 b1_a3uR2
          };
        Number a3_a3uR3 ->
          case ds1_d3vBx of {
            __DEFAULT -> GHC.Types.False;
            Number b1_a3uR4 -> Text.Read.Lex.$fEqLexeme_$c==1 a3_a3uR3 b1_a3uR4
          };
        EOF ->
          case ds1_d3vBx of {
            __DEFAULT -> GHC.Types.False;
            EOF -> GHC.Types.True
          }
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
Text.Read.Lex.$fEqLexeme_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Lexeme -> Lexeme -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x34_a22b [Occ=Once] :: Lexeme)
                 (y_a22c [Occ=Once] :: Lexeme) ->
                 case Text.Read.Lex.$fEqLexeme_$c== x34_a22b y_a22c of {
                   False -> GHC.Types.True;
                   True -> GHC.Types.False
                 }}]
Text.Read.Lex.$fEqLexeme_$c/=
  = \ (eta_B2 :: Lexeme) (eta1_B1 :: Lexeme) ->
      case Text.Read.Lex.$fEqLexeme_$c== eta_B2 eta1_B1 of {
        False -> GHC.Types.True;
        True -> GHC.Types.False
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Text.Read.Lex.$fEqLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq Lexeme
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: Lexeme
                        Text.Read.Lex.$fEqLexeme_$c==
                        Text.Read.Lex.$fEqLexeme_$c/=]
Text.Read.Lex.$fEqLexeme
  = GHC.Classes.C:Eq
      @ Lexeme
      Text.Read.Lex.$fEqLexeme_$c==
      Text.Read.Lex.$fEqLexeme_$c/=

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.numberToFixed2 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Text.Read.Lex.numberToFixed2 = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_r3y9r :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_r3y9r = "this should not happen"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl3_r3y9s :: [Integer]
[GblId, Str=x]
lvl3_r3y9s
  = errorWithoutStackTrace
      @ 'LiftedRep @ [Integer] (unpackCString# lvl2_r3y9r)

Rec {
-- RHS size: {terms: 24, types: 16, coercions: 0, joins: 0/0}
combine_r3y9t :: Integer -> [Integer] -> [Integer]
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []]
combine_r3y9t
  = \ (b_a3uNq :: Integer) (ds_d3vuz :: [Integer]) ->
      case ds_d3vuz of {
        [] -> GHC.Types.[] @ Integer;
        : d1_a3uNr ds1_d3vuM ->
          case ds1_d3vuM of {
            [] -> lvl3_r3y9s;
            : d2_a3uNs ds2_a3uNt ->
              case integer-simple-0.1.1.1:GHC.Integer.Type.plusInteger
                     (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                        d1_a3uNr b_a3uNq)
                     d2_a3uNs
              of d_a3uNu
              { __DEFAULT ->
              GHC.Types.: @ Integer d_a3uNu (combine_r3y9t b_a3uNq ds2_a3uNt)
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 78, types: 33, coercions: 0, joins: 1/1}
Text.Read.Lex.numberToFixed_go [Occ=LoopBreaker]
  :: Integer -> Int -> [Integer] -> Integer
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,1*U>, Unf=OtherCon []]
Text.Read.Lex.numberToFixed_go
  = \ (ds_d3vtx :: Integer)
      (ds1_d3vty :: Int)
      (ds2_d3vtz :: [Integer]) ->
      case ds2_d3vtz of wild_X3I {
        [] -> Text.Read.Lex.numberToFixed2;
        : d_a3uNj ds3_d3vtX ->
          case ds3_d3vtX of {
            [] -> d_a3uNj;
            : ipv_s3vFa ipv1_s3vFb ->
              case ds1_d3vty of { I# x34_aA1E ->
              case ># x34_aA1E 40# of {
                __DEFAULT ->
                  joinrec {
                    go_s3vYM [Occ=LoopBreaker] :: Integer -> [Integer] -> Integer
                    [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []]
                    go_s3vYM (r_a3uNa :: Integer) (ds4_d3vt1 :: [Integer])
                      = case ds4_d3vt1 of {
                          [] -> r_a3uNa;
                          : d1_a3uNc ds5_a3uNd ->
                            case integer-simple-0.1.1.1:GHC.Integer.Type.plusInteger
                                   (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                                      r_a3uNa ds_d3vtx)
                                   d1_a3uNc
                            of r'_a3uNe
                            { __DEFAULT ->
                            jump go_s3vYM r'_a3uNe ds5_a3uNd
                            }
                        }; } in
                  jump go_s3vYM Text.Read.Lex.numberToFixed2 wild_X3I;
                1# ->
                  case integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                         ds_d3vtx ds_d3vtx
                  of b'_a3uNo
                  { __DEFAULT ->
                  case remInt# x34_aA1E 2# of {
                    __DEFAULT ->
                      Text.Read.Lex.numberToFixed_go
                        b'_a3uNo
                        (GHC.Types.I# (quotInt# (+# x34_aA1E 1#) 2#))
                        (combine_r3y9t
                           ds_d3vtx
                           (GHC.Types.: @ Integer Text.Read.Lex.numberToFixed2 wild_X3I));
                    0# ->
                      Text.Read.Lex.numberToFixed_go
                        b'_a3uNo
                        (GHC.Types.I# (quotInt# (+# x34_aA1E 1#) 2#))
                        (combine_r3y9t ds_d3vtx wild_X3I)
                  }
                  }
              }
              }
          }
      }
end Rec }

-- RHS size: {terms: 14, types: 6, coercions: 0, joins: 0/0}
valInteger :: Integer -> Digits -> Integer
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 120 0}]
valInteger
  = \ (b0_a3uNf :: Integer) (ds0_a3uNg :: Digits) ->
      Text.Read.Lex.numberToFixed_go
        b0_a3uNf
        (case GHC.List.$wlenAcc @ Int ds0_a3uNg 0# of ww2_i3wsE
         { __DEFAULT ->
         GHC.Types.I# ww2_i3wsE
         })
        (map @ Int @ Integer GHC.Real.$fIntegralInt_$ctoInteger ds0_a3uNg)

-- RHS size: {terms: 39, types: 36, coercions: 0, joins: 0/1}
Text.Read.Lex.$w$sreadIntP [InlPrag=NOUSERINLINE[0]]
  :: Integer
     -> (Char -> Bool)
     -> (Char -> Int)
     -> forall b.
        (Integer -> Text.ParserCombinators.ReadP.P b)
        -> (# Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 60 0 60] 300 20}]
Text.Read.Lex.$w$sreadIntP
  = \ (w2_s3xhE :: Integer)
      (w3_s3xhF :: Char -> Bool)
      (w4_s3xhG :: Char -> Int)
      (@ b_s3xhH)
      (w5_s3xhI :: Integer -> Text.ParserCombinators.ReadP.P b_s3xhH) ->
      (# \ (a_a3ngt :: Char) ->
           case w3_s3xhF a_a3ngt of {
             False -> Text.ParserCombinators.ReadP.Fail @ b_s3xhH;
             True ->
               case Text.ParserCombinators.ReadP.$wmunch
                      w3_s3xhF
                      @ b_s3xhH
                      (\ (a3_X3nla :: String) ->
                         w5_s3xhI
                           (let {
                              ds0_a3uNg [Dmd=<S,U>] :: Digits
                              [LclId]
                              ds0_a3uNg
                                = map
                                    @ Char @ Int w4_s3xhG (GHC.Types.: @ Char a_a3ngt a3_X3nla) } in
                            Text.Read.Lex.numberToFixed_go
                              w2_s3xhE
                              (case GHC.List.$wlenAcc @ Int ds0_a3uNg 0# of ww2_i3wsE
                               { __DEFAULT ->
                               GHC.Types.I# ww2_i3wsE
                               })
                              (map
                                 @ Int @ Integer GHC.Real.$fIntegralInt_$ctoInteger ds0_a3uNg)))
               of
               { (# ww1_s3oiM #) ->
               Text.ParserCombinators.ReadP.Look @ b_s3xhH ww1_s3oiM
               }
           } #)

-- RHS size: {terms: 14, types: 20, coercions: 0, joins: 0/0}
Text.Read.Lex.readIntP1 [InlPrag=NOUSERINLINE[0]]
  :: Integer
     -> (Char -> Bool)
     -> (Char -> Int)
     -> forall b.
        (Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w2_s3xhE [Occ=Once] :: Integer)
                 (w3_s3xhF [Occ=Once] :: Char -> Bool)
                 (w4_s3xhG [Occ=Once] :: Char -> Int)
                 (@ b_s3xhH)
                 (w5_s3xhI [Occ=Once]
                    :: Integer -> Text.ParserCombinators.ReadP.P b_s3xhH) ->
                 case Text.Read.Lex.$w$sreadIntP
                        w2_s3xhE w3_s3xhF w4_s3xhG @ b_s3xhH w5_s3xhI
                 of
                 { (# ww1_s3xkZ [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Get @ b_s3xhH ww1_s3xkZ
                 }}]
Text.Read.Lex.readIntP1
  = \ (w2_s3xhE :: Integer)
      (w3_s3xhF :: Char -> Bool)
      (w4_s3xhG :: Char -> Int)
      (@ b_s3xhH)
      (w5_s3xhI :: Integer -> Text.ParserCombinators.ReadP.P b_s3xhH) ->
      case Text.Read.Lex.$w$sreadIntP
             w2_s3xhE w3_s3xhF w4_s3xhG @ b_s3xhH w5_s3xhI
      of
      { (# ww1_s3xkZ #) ->
      Text.ParserCombinators.ReadP.Get @ b_s3xhH ww1_s3xkZ
      }

-- RHS size: {terms: 1, types: 0, coercions: 11, joins: 0/0}
Text.Read.Lex.readIntP_$sreadIntP
  :: Integer -> (Char -> Bool) -> (Char -> Int) -> ReadP Integer
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.Read.Lex.readIntP1
               `cast` (<Integer>_R
                       ->_R <Char -> Bool>_R
                       ->_R <Char -> Int>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R)
                       :: (Integer
                           -> (Char -> Bool)
                           -> (Char -> Int)
                           -> forall b.
                              (Integer -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (Integer
                               -> (Char -> Bool) -> (Char -> Int) -> ReadP Integer :: *))}]
Text.Read.Lex.readIntP_$sreadIntP
  = Text.Read.Lex.readIntP1
    `cast` (<Integer>_R
            ->_R <Char -> Bool>_R
            ->_R <Char -> Int>_R
            ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R)
            :: (Integer
                -> (Char -> Bool)
                -> (Char -> Int)
                -> forall b.
                   (Integer -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (Integer
                    -> (Char -> Bool) -> (Char -> Int) -> ReadP Integer :: *))

-- RHS size: {terms: 60, types: 55, coercions: 0, joins: 1/2}
Text.Read.Lex.$wreadIntP [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Num a =>
     a
     -> (Char -> Bool)
     -> (Char -> Int)
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [120 0 60 0 60] 392 20}]
Text.Read.Lex.$wreadIntP
  = \ (@ a_s3xhP)
      (w2_s3xhQ :: Num a_s3xhP)
      (w3_s3xhR :: a_s3xhP)
      (w4_s3xhS :: Char -> Bool)
      (w5_s3xhT :: Char -> Int)
      (@ b_s3xhU)
      (w6_s3xhV :: a_s3xhP -> Text.ParserCombinators.ReadP.P b_s3xhU) ->
      let {
        lvl116_s3xJS :: a_s3xhP
        [LclId]
        lvl116_s3xJS
          = fromInteger @ a_s3xhP w2_s3xhQ Text.Read.Lex.numberToFixed2 } in
      (# \ (a3_a3ngt :: Char) ->
           case w4_s3xhS a3_a3ngt of {
             False -> Text.ParserCombinators.ReadP.Fail @ b_s3xhU;
             True ->
               case Text.ParserCombinators.ReadP.$wmunch
                      w4_s3xhS
                      @ b_s3xhU
                      (\ (a4_X3nla :: String) ->
                         w6_s3xhV
                           (joinrec {
                              go_a3uZ2 [Occ=LoopBreaker] :: a_s3xhP -> [Int] -> a_s3xhP
                              [LclId[JoinId(2)], Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []]
                              go_a3uZ2 (r_a3uNa :: a_s3xhP) (ds_d3vt1 :: [Int])
                                = case ds_d3vt1 of {
                                    [] -> r_a3uNa;
                                    : d_a3uNc ds1_a3uNd ->
                                      case + @ a_s3xhP
                                             w2_s3xhQ
                                             (* @ a_s3xhP w2_s3xhQ r_a3uNa w3_s3xhR)
                                             (fromInteger
                                                @ a_s3xhP
                                                w2_s3xhQ
                                                (case d_a3uNc of { I# i_i2KYH ->
                                                 integer-simple-0.1.1.1:GHC.Integer.Type.smallInteger
                                                   i_i2KYH
                                                 }))
                                      of r'_a3uNe
                                      { __DEFAULT ->
                                      jump go_a3uZ2 r'_a3uNe ds1_a3uNd
                                      }
                                  }; } in
                            jump go_a3uZ2
                              lvl116_s3xJS
                              (map
                                 @ Char @ Int w5_s3xhT (GHC.Types.: @ Char a3_a3ngt a4_X3nla))))
               of
               { (# ww1_s3oiM #) ->
               Text.ParserCombinators.ReadP.Look @ b_s3xhU ww1_s3oiM
               }
           } #)

-- RHS size: {terms: 17, types: 25, coercions: 0, joins: 0/0}
Text.Read.Lex.readIntP2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Num a =>
     a
     -> (Char -> Bool)
     -> (Char -> Int)
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s3xhP)
                 (w2_s3xhQ [Occ=Once] :: Num a_s3xhP)
                 (w3_s3xhR [Occ=Once] :: a_s3xhP)
                 (w4_s3xhS [Occ=Once] :: Char -> Bool)
                 (w5_s3xhT [Occ=Once] :: Char -> Int)
                 (@ b_s3xhU)
                 (w6_s3xhV [Occ=Once]
                    :: a_s3xhP -> Text.ParserCombinators.ReadP.P b_s3xhU) ->
                 case Text.Read.Lex.$wreadIntP
                        @ a_s3xhP w2_s3xhQ w3_s3xhR w4_s3xhS w5_s3xhT @ b_s3xhU w6_s3xhV
                 of
                 { (# ww1_s3xl1 [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Get @ b_s3xhU ww1_s3xl1
                 }}]
Text.Read.Lex.readIntP2
  = \ (@ a_s3xhP)
      (w2_s3xhQ :: Num a_s3xhP)
      (w3_s3xhR :: a_s3xhP)
      (w4_s3xhS :: Char -> Bool)
      (w5_s3xhT :: Char -> Int)
      (@ b_s3xhU)
      (w6_s3xhV :: a_s3xhP -> Text.ParserCombinators.ReadP.P b_s3xhU) ->
      case Text.Read.Lex.$wreadIntP
             @ a_s3xhP w2_s3xhQ w3_s3xhR w4_s3xhS w5_s3xhT @ b_s3xhU w6_s3xhV
      of
      { (# ww1_s3xl1 #) ->
      Text.ParserCombinators.ReadP.Get @ b_s3xhU ww1_s3xl1
      }

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
readIntP
  :: forall a.
     Num a =>
     a -> (Char -> Bool) -> (Char -> Int) -> ReadP a
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.Read.Lex.readIntP2
               `cast` (forall (a :: <*>_N).
                       <Num a>_R
                       ->_R <a>_R
                       ->_R <Char -> Bool>_R
                       ->_R <Char -> Int>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a>_R)
                       :: (forall a.
                           Num a =>
                           a
                           -> (Char -> Bool)
                           -> (Char -> Int)
                           -> forall b.
                              (a -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a.
                               Num a =>
                               a -> (Char -> Bool) -> (Char -> Int) -> ReadP a :: *))}]
readIntP
  = Text.Read.Lex.readIntP2
    `cast` (forall (a :: <*>_N).
            <Num a>_R
            ->_R <a>_R
            ->_R <Char -> Bool>_R
            ->_R <Char -> Int>_R
            ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a>_R)
            :: (forall a.
                Num a =>
                a
                -> (Char -> Bool)
                -> (Char -> Int)
                -> forall b.
                   (a -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a.
                    Num a =>
                    a -> (Char -> Bool) -> (Char -> Int) -> ReadP a :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.numberToFixed1 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Text.Read.Lex.numberToFixed1 = 10

-- RHS size: {terms: 33, types: 23, coercions: 0, joins: 0/0}
numberToInteger :: Number -> Maybe Integer
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [110] 250 60}]
numberToInteger
  = \ (ds_d3vyk :: Number) ->
      case ds_d3vyk of {
        MkNumber base_a3uLv iPart_a3uLw ->
          GHC.Base.Just
            @ Integer
            (Text.Read.Lex.numberToFixed_go
               (GHC.Real.$fIntegralInt_$ctoInteger base_a3uLv)
               (case GHC.List.$wlenAcc @ Int iPart_a3uLw 0# of ww2_i3wsE
                { __DEFAULT ->
                GHC.Types.I# ww2_i3wsE
                })
               (map
                  @ Int @ Integer GHC.Real.$fIntegralInt_$ctoInteger iPart_a3uLw));
        MkDecimal iPart_a3uLx ds1_d3vyA ds2_d3vyB ->
          case ds1_d3vyA of {
            Nothing ->
              case ds2_d3vyB of {
                Nothing ->
                  GHC.Base.Just
                    @ Integer (valInteger Text.Read.Lex.numberToFixed1 iPart_a3uLx);
                Just ipv_s3vFC -> GHC.Base.Nothing @ Integer
              };
            Just ipv_s3vFA -> GHC.Base.Nothing @ Integer
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_r3y9u :: Integer
[GblId, Unf=OtherCon []]
lvl4_r3y9u = 1

Rec {
-- RHS size: {terms: 55, types: 19, coercions: 0, joins: 0/1}
$wfracExp_r3y9v
  :: Integer -> Integer -> Digits -> (# Integer, Integer #)
[GblId, Arity=3, Str=<S,U><S,1*U><S,1*U>, Unf=OtherCon []]
$wfracExp_r3y9v
  = \ (w2_s3xi1 :: Integer)
      (w3_s3xi2 :: Integer)
      (w4_s3xi3 :: Digits) ->
      case w4_s3xi3 of {
        [] ->
          case integer-simple-0.1.1.1:GHC.Integer.Type.ltInteger#
                 w2_s3xi1 Text.Read.Lex.numberToFixed2
          of {
            __DEFAULT ->
              case integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                     w3_s3xi2 (GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 w2_s3xi1)
              of dt_i2KUr
              { __DEFAULT ->
              (# dt_i2KUr, GHC.Real.$fEnumRatio1 #)
              };
            1# ->
              let {
                ww1_i2rUq [Dmd=<S,U>] :: Integer
                [LclId]
                ww1_i2rUq
                  = GHC.Real.^_$s^
                      Text.Read.Lex.numberToFixed1
                      (integer-simple-0.1.1.1:GHC.Integer.Type.negateInteger
                         w2_s3xi1) } in
              GHC.Real.$w$sreduce
                (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                   w3_s3xi2
                   (integer-simple-0.1.1.1:GHC.Integer.Type.signumInteger ww1_i2rUq))
                (integer-simple-0.1.1.1:GHC.Integer.Type.absInteger ww1_i2rUq)
          };
        : d_a3uNz ds_a3uNA ->
          case integer-simple-0.1.1.1:GHC.Integer.Type.minusInteger
                 w2_s3xi1 lvl4_r3y9u
          of exp'_a3uNB
          { __DEFAULT ->
          case d_a3uNz of { I# i_i2KYH ->
          case integer-simple-0.1.1.1:GHC.Integer.Type.plusInteger
                 (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                    w3_s3xi2 Text.Read.Lex.numberToFixed1)
                 (integer-simple-0.1.1.1:GHC.Integer.Type.smallInteger i_i2KYH)
          of mant'_a3uNC
          { __DEFAULT ->
          $wfracExp_r3y9v exp'_a3uNB mant'_a3uNC ds_a3uNA
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 22, types: 15, coercions: 0, joins: 0/0}
Text.Read.Lex.numberToFixed_integerTake [Occ=LoopBreaker]
  :: forall a. Integer -> [a] -> [a]
[GblId, Arity=2, Str=<S,U><L,1*U>, Unf=OtherCon []]
Text.Read.Lex.numberToFixed_integerTake
  = \ (@ a_a3va7) (n_a3uLI :: Integer) (ds_d3vxL :: [a_a3va7]) ->
      case integer-simple-0.1.1.1:GHC.Integer.Type.leInteger#
             n_a3uLI Text.Read.Lex.numberToFixed2
      of {
        __DEFAULT ->
          case ds_d3vxL of {
            [] -> GHC.Types.[] @ a_a3va7;
            : x34_a3uLK xs_a3uLL ->
              GHC.Types.:
                @ a_a3va7
                x34_a3uLK
                (Text.Read.Lex.numberToFixed_integerTake
                   @ a_a3va7
                   (integer-simple-0.1.1.1:GHC.Integer.Type.minusInteger
                      n_a3uLI lvl4_r3y9u)
                   xs_a3uLL)
          };
        1# -> GHC.Types.[] @ a_a3va7
      }
end Rec }

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Text.Read.Lex.numberToFixed_xs [Occ=LoopBreaker] :: [Int]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
Text.Read.Lex.numberToFixed_xs
  = GHC.Types.:
      @ Int Text.Read.Lex.$fShowLexeme2 Text.Read.Lex.numberToFixed_xs
end Rec }

-- RHS size: {terms: 65, types: 51, coercions: 0, joins: 0/1}
numberToFixed :: Integer -> Number -> Maybe (Integer, Integer)
[GblId,
 Arity=2,
 Str=<L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 190] 530 80}]
numberToFixed
  = \ (ds_d3vxH :: Integer) (ds1_d3vxI :: Number) ->
      case ds1_d3vxI of {
        MkNumber base_a3uLy iPart_a3uLz ->
          GHC.Base.Just
            @ (Integer, Integer)
            (Text.Read.Lex.numberToFixed_go
               (GHC.Real.$fIntegralInt_$ctoInteger base_a3uLy)
               (case GHC.List.$wlenAcc @ Int iPart_a3uLz 0# of ww2_i3wsE
                { __DEFAULT ->
                GHC.Types.I# ww2_i3wsE
                })
               (map
                  @ Int @ Integer GHC.Real.$fIntegralInt_$ctoInteger iPart_a3uLz),
             Text.Read.Lex.numberToFixed2);
        MkDecimal iPart_a3uLA ds2_d3vyg ds3_d3vyh ->
          case ds2_d3vyg of {
            Nothing ->
              case ds3_d3vyh of {
                Nothing ->
                  GHC.Base.Just
                    @ (Integer, Integer)
                    (valInteger Text.Read.Lex.numberToFixed1 iPart_a3uLA,
                     Text.Read.Lex.numberToFixed2);
                Just ipv_s3vFO -> GHC.Base.Nothing @ (Integer, Integer)
              };
            Just fPart_a3uLD ->
              case ds3_d3vyh of {
                Nothing ->
                  GHC.Base.Just
                    @ (Integer, Integer)
                    (valInteger Text.Read.Lex.numberToFixed1 iPart_a3uLA,
                     let {
                       ds0_a3uNg [Dmd=<S,U>] :: Digits
                       [LclId]
                       ds0_a3uNg
                         = Text.Read.Lex.numberToFixed_integerTake
                             @ Int
                             ds_d3vxH
                             (++ @ Int fPart_a3uLD Text.Read.Lex.numberToFixed_xs) } in
                     Text.Read.Lex.numberToFixed_go
                       Text.Read.Lex.numberToFixed1
                       (case GHC.List.$wlenAcc @ Int ds0_a3uNg 0# of ww2_i3wsE
                        { __DEFAULT ->
                        GHC.Types.I# ww2_i3wsE
                        })
                       (map
                          @ Int @ Integer GHC.Real.$fIntegralInt_$ctoInteger ds0_a3uNg));
                Just ipv_s3vFR -> GHC.Base.Nothing @ (Integer, Integer)
              }
          }
      }

-- RHS size: {terms: 87, types: 26, coercions: 0, joins: 0/1}
Text.Read.Lex.$wnumberToRational [InlPrag=NOUSERINLINE[0]]
  :: Number -> (# Integer, Integer #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
Text.Read.Lex.$wnumberToRational
  = \ (w2_s3xid :: Number) ->
      case w2_s3xid of {
        MkNumber base_a3uLZ iPart_a3uM0 ->
          GHC.Real.$w$sreduce
            (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
               (Text.Read.Lex.numberToFixed_go
                  (case base_a3uLZ of { I# i_i2KYH ->
                   integer-simple-0.1.1.1:GHC.Integer.Type.smallInteger i_i2KYH
                   })
                  (case GHC.List.$wlenAcc @ Int iPart_a3uM0 0# of ww2_i3wsE
                   { __DEFAULT ->
                   GHC.Types.I# ww2_i3wsE
                   })
                  (map
                     @ Int @ Integer GHC.Real.$fIntegralInt_$ctoInteger iPart_a3uM0))
               lvl4_r3y9u)
            lvl4_r3y9u;
        MkDecimal iPart_a3uM1 mFPart_a3uM2 mExp_a3uM3 ->
          case mFPart_a3uM2 of {
            Nothing ->
              case mExp_a3uM3 of {
                Nothing ->
                  GHC.Real.$w$sreduce
                    (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                       (valInteger Text.Read.Lex.numberToFixed1 iPart_a3uM1) lvl4_r3y9u)
                    lvl4_r3y9u;
                Just exp_a3uM5 ->
                  case integer-simple-0.1.1.1:GHC.Integer.Type.geInteger#
                         exp_a3uM5 Text.Read.Lex.numberToFixed2
                  of {
                    __DEFAULT ->
                      let {
                        ww1_i2rUq [Dmd=<S,U>] :: Integer
                        [LclId]
                        ww1_i2rUq
                          = GHC.Real.^_$s^
                              Text.Read.Lex.numberToFixed1
                              (integer-simple-0.1.1.1:GHC.Integer.Type.negateInteger
                                 exp_a3uM5) } in
                      GHC.Real.$w$sreduce
                        (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                           (valInteger Text.Read.Lex.numberToFixed1 iPart_a3uM1)
                           (integer-simple-0.1.1.1:GHC.Integer.Type.signumInteger ww1_i2rUq))
                        (integer-simple-0.1.1.1:GHC.Integer.Type.absInteger ww1_i2rUq);
                    1# ->
                      GHC.Real.$w$sreduce
                        (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                           (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                              (valInteger Text.Read.Lex.numberToFixed1 iPart_a3uM1)
                              (GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 exp_a3uM5))
                           lvl4_r3y9u)
                        lvl4_r3y9u
                  }
              };
            Just fPart_a3uM6 ->
              case mExp_a3uM3 of {
                Nothing ->
                  $wfracExp_r3y9v
                    Text.Read.Lex.numberToFixed2
                    (valInteger Text.Read.Lex.numberToFixed1 iPart_a3uM1)
                    fPart_a3uM6;
                Just exp_a3uM8 ->
                  $wfracExp_r3y9v
                    exp_a3uM8
                    (valInteger Text.Read.Lex.numberToFixed1 iPart_a3uM1)
                    fPart_a3uM6
              }
          }
      }

-- RHS size: {terms: 8, types: 9, coercions: 0, joins: 0/0}
numberToRational [InlPrag=NOUSERINLINE[0]] :: Number -> Rational
[GblId,
 Arity=1,
 Str=<S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w2_s3xid [Occ=Once] :: Number) ->
                 case Text.Read.Lex.$wnumberToRational w2_s3xid of
                 { (# ww1_s3xl6 [Occ=Once], ww2_s3xl7 [Occ=Once] #) ->
                 GHC.Real.:% @ Integer ww1_s3xl6 ww2_s3xl7
                 }}]
numberToRational
  = \ (w2_s3xid :: Number) ->
      case Text.Read.Lex.$wnumberToRational w2_s3xid of
      { (# ww1_s3xl6, ww2_s3xl7 #) ->
      GHC.Real.:% @ Integer ww1_s3xl6 ww2_s3xl7
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Text.Read.Lex.numberToRangedRational3 :: GHC.Real.Ratio Integer
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Read.Lex.numberToRangedRational3
  = GHC.Real.:%
      @ Integer Text.Read.Lex.numberToFixed2 GHC.Real.$fEnumRatio1

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Text.Read.Lex.numberToRangedRational2 :: Maybe Rational
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Read.Lex.numberToRangedRational2
  = GHC.Base.Just @ Rational Text.Read.Lex.numberToRangedRational3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.numberToRangedRational1 :: Int -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Text.Read.Lex.numberToRangedRational1
  = eqInt Text.Read.Lex.$fShowLexeme2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.numberToRangedRational4 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Text.Read.Lex.numberToRangedRational4 = -9223372036854775808

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.numberToRangedRational5 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Text.Read.Lex.numberToRangedRational5 = 9223372036854775807

-- RHS size: {terms: 119, types: 88, coercions: 0, joins: 1/2}
Text.Read.Lex.$wnumberToRangedRational [InlPrag=NOUSERINLINE[0]]
  :: Int -> Int -> Number -> Maybe Rational
[GblId,
 Arity=3,
 Str=<L,1*U(U)><L,1*U(U)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 20 80] 604 60}]
Text.Read.Lex.$wnumberToRangedRational
  = \ (ww_s3xis :: Int) (ww1_s3xit :: Int) (w2_s3xip :: Number) ->
      case w2_s3xip of wild_X18 {
        MkNumber ipv_s3vG4 ipv1_s3vG5 ->
          GHC.Base.Just
            @ Rational
            (case Text.Read.Lex.$wnumberToRational wild_X18 of
             { (# ww3_s3xl6, ww4_s3xl7 #) ->
             GHC.Real.:% @ Integer ww3_s3xl6 ww4_s3xl7
             });
        MkDecimal iPart_a3uLP mFPart_a3uLQ ds_d3vxC ->
          case ds_d3vxC of {
            Nothing ->
              GHC.Base.Just
                @ Rational
                (case Text.Read.Lex.$wnumberToRational wild_X18 of
                 { (# ww3_s3xl6, ww4_s3xl7 #) ->
                 GHC.Real.:% @ Integer ww3_s3xl6 ww4_s3xl7
                 });
            Just exp_a3uLR ->
              case integer-simple-0.1.1.1:GHC.Integer.Type.gtInteger#
                     exp_a3uLR Text.Read.Lex.numberToRangedRational5
              of {
                __DEFAULT ->
                  case integer-simple-0.1.1.1:GHC.Integer.Type.ltInteger#
                         exp_a3uLR Text.Read.Lex.numberToRangedRational4
                  of {
                    __DEFAULT ->
                      join {
                        $w$j_s3xin [InlPrag=NOUSERINLINE[0], Dmd=<L,1*C1(U)>]
                          :: Int# -> Maybe Rational
                        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
                        $w$j_s3xin (ww2_s3xil [OS=OneShot] :: Int#)
                          = case ww1_s3xit of { I# x34_i1AMi ->
                            case integer-simple-0.1.1.1:GHC.Integer.Type.integerToInt exp_a3uLR
                            of wild5_i1AOp
                            { __DEFAULT ->
                            let {
                              x35_aA1E [Dmd=<S,U>] :: Int#
                              [LclId]
                              x35_aA1E = +# ww2_s3xil wild5_i1AOp } in
                            case ># x35_aA1E (+# x34_i1AMi 3#) of {
                              __DEFAULT ->
                                case ww_s3xis of { I# x36_i1AMw ->
                                case <# x35_aA1E (-# x36_i1AMw 3#) of {
                                  __DEFAULT ->
                                    GHC.Base.Just
                                      @ Rational
                                      (case Text.Read.Lex.$wnumberToRational wild_X18 of
                                       { (# ww4_s3xl6, ww5_s3xl7 #) ->
                                       GHC.Real.:% @ Integer ww4_s3xl6 ww5_s3xl7
                                       });
                                  1# -> Text.Read.Lex.numberToRangedRational2
                                }
                                };
                              1# -> GHC.Base.Nothing @ Rational
                            }
                            }
                            } } in
                      case dropWhile
                             @ Int Text.Read.Lex.numberToRangedRational1 iPart_a3uLP
                      of wild4_X1f {
                        [] ->
                          case mFPart_a3uLQ of {
                            Nothing -> Text.Read.Lex.numberToRangedRational2;
                            Just fPart_a3uLU ->
                              case GHC.List.$wspan
                                     @ Int Text.Read.Lex.numberToRangedRational1 fPart_a3uLU
                              of
                              { (# ww3_i3vwN, ww4_i3vwO #) ->
                              case ww4_i3vwO of {
                                [] -> Text.Read.Lex.numberToRangedRational2;
                                : ipv_s3vGh ipv1_s3vGi ->
                                  case GHC.List.$wlenAcc @ Int ww3_i3vwN 0# of ww5_i3wsE
                                  { __DEFAULT ->
                                  jump $w$j_s3xin (negateInt# ww5_i3wsE)
                                  }
                              }
                              }
                          };
                        : ds1_d3vxj ds2_d3vxk ->
                          case GHC.List.$wlenAcc @ Int wild4_X1f 0# of ww2_i3wsE
                          { __DEFAULT ->
                          jump $w$j_s3xin ww2_i3wsE
                          }
                      };
                    1# -> GHC.Base.Nothing @ Rational
                  };
                1# -> GHC.Base.Nothing @ Rational
              }
          }
      }

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
numberToRangedRational [InlPrag=NOUSERINLINE[0]]
  :: (Int, Int) -> Number -> Maybe Rational
[GblId,
 Arity=2,
 Str=<S,1*U(1*U(U),1*U(U))><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w2_s3xio [Occ=Once!] :: (Int, Int))
                 (w3_s3xip [Occ=Once] :: Number) ->
                 case w2_s3xio of { (ww1_s3xis [Occ=Once], ww2_s3xit [Occ=Once]) ->
                 Text.Read.Lex.$wnumberToRangedRational ww1_s3xis ww2_s3xit w3_s3xip
                 }}]
numberToRangedRational
  = \ (w2_s3xio :: (Int, Int)) (w3_s3xip :: Number) ->
      case w2_s3xio of { (ww1_s3xis, ww2_s3xit) ->
      Text.Read.Lex.$wnumberToRangedRational ww1_s3xis ww2_s3xit w3_s3xip
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl5_r3y9w :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl5_r3y9w = "valDig: Bad base"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Text.Read.Lex.readDecP2 :: Maybe Int
[GblId, Str=x]
Text.Read.Lex.readDecP2
  = errorWithoutStackTrace
      @ 'LiftedRep @ (Maybe Int) (unpackCString# lvl5_r3y9w)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.readDecP3 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Text.Read.Lex.readDecP3 = 16

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.readDecP4 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Text.Read.Lex.readDecP4 = 8

-- RHS size: {terms: 127, types: 30, coercions: 0, joins: 2/2}
Text.Read.Lex.$w$svalDig [InlPrag=NOUSERINLINE[0]]
  :: Integer -> Char# -> Maybe Int
[GblId,
 Arity=2,
 Str=<S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 475 100}]
Text.Read.Lex.$w$svalDig
  = \ (w2_s3xiw :: Integer) (ww_s3xiA :: Char#) ->
      case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
             w2_s3xiw Text.Read.Lex.readDecP4
      of {
        __DEFAULT ->
          case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
                 w2_s3xiw Text.Read.Lex.numberToFixed1
          of {
            __DEFAULT ->
              case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
                     w2_s3xiw Text.Read.Lex.readDecP3
              of {
                __DEFAULT -> Text.Read.Lex.readDecP2;
                1# ->
                  join {
                    $j_s3wcQ [Dmd=<L,1*U>] :: Maybe Int
                    [LclId[JoinId(0)]]
                    $j_s3wcQ
                      = join {
                          $j1_s3wcL [Dmd=<L,1*U>] :: Maybe Int
                          [LclId[JoinId(0)]]
                          $j1_s3wcL
                            = case leChar# 'A'# ww_s3xiA of {
                                __DEFAULT -> GHC.Base.Nothing @ Int;
                                1# ->
                                  case leChar# ww_s3xiA 'F'# of {
                                    __DEFAULT -> GHC.Base.Nothing @ Int;
                                    1# ->
                                      GHC.Base.Just
                                        @ Int (GHC.Types.I# (+# (-# (ord# ww_s3xiA) 65#) 10#))
                                  }
                              } } in
                        case leChar# 'a'# ww_s3xiA of {
                          __DEFAULT -> jump $j1_s3wcL;
                          1# ->
                            case leChar# ww_s3xiA 'f'# of {
                              __DEFAULT -> jump $j1_s3wcL;
                              1# ->
                                GHC.Base.Just
                                  @ Int (GHC.Types.I# (+# (-# (ord# ww_s3xiA) 97#) 10#))
                            }
                        } } in
                  case leChar# '0'# ww_s3xiA of {
                    __DEFAULT -> jump $j_s3wcQ;
                    1# ->
                      case leChar# ww_s3xiA '9'# of {
                        __DEFAULT -> jump $j_s3wcQ;
                        1# -> GHC.Base.Just @ Int (GHC.Types.I# (-# (ord# ww_s3xiA) 48#))
                      }
                  }
              };
            1# ->
              case leChar# '0'# ww_s3xiA of {
                __DEFAULT -> GHC.Base.Nothing @ Int;
                1# ->
                  case leChar# ww_s3xiA '9'# of {
                    __DEFAULT -> GHC.Base.Nothing @ Int;
                    1# -> GHC.Base.Just @ Int (GHC.Types.I# (-# (ord# ww_s3xiA) 48#))
                  }
              }
          };
        1# ->
          case leChar# '0'# ww_s3xiA of {
            __DEFAULT -> GHC.Base.Nothing @ Int;
            1# ->
              case leChar# ww_s3xiA '7'# of {
                __DEFAULT -> GHC.Base.Nothing @ Int;
                1# -> GHC.Base.Just @ Int (GHC.Types.I# (-# (ord# ww_s3xiA) 48#))
              }
          }
      }

-- RHS size: {terms: 139, types: 42, coercions: 0, joins: 2/2}
Text.Read.Lex.$wvalDig [InlPrag=NOUSERINLINE[0]]
  :: forall a. (Eq a, Num a) => a -> Char# -> Maybe Int
[GblId,
 Arity=4,
 Str=<S(C(C(S))L),U(C(C1(U)),A)><L,U(A,A,A,A,A,A,C(U))><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [90 90 0 0] 595 100}]
Text.Read.Lex.$wvalDig
  = \ (@ a_s3xiO)
      (w2_s3xiP :: Eq a_s3xiO)
      (w3_s3xiQ :: Num a_s3xiO)
      (w4_s3xiR :: a_s3xiO)
      (ww_s3xiV :: Char#) ->
      case ==
             @ a_s3xiO
             w2_s3xiP
             w4_s3xiR
             (fromInteger @ a_s3xiO w3_s3xiQ Text.Read.Lex.readDecP4)
      of {
        False ->
          case ==
                 @ a_s3xiO
                 w2_s3xiP
                 w4_s3xiR
                 (fromInteger @ a_s3xiO w3_s3xiQ Text.Read.Lex.numberToFixed1)
          of {
            False ->
              case ==
                     @ a_s3xiO
                     w2_s3xiP
                     w4_s3xiR
                     (fromInteger @ a_s3xiO w3_s3xiQ Text.Read.Lex.readDecP3)
              of {
                False -> Text.Read.Lex.readDecP2;
                True ->
                  join {
                    $j_s3wdN [Dmd=<L,1*U>] :: Maybe Int
                    [LclId[JoinId(0)]]
                    $j_s3wdN
                      = join {
                          $j1_s3wdI [Dmd=<L,1*U>] :: Maybe Int
                          [LclId[JoinId(0)]]
                          $j1_s3wdI
                            = case leChar# 'A'# ww_s3xiV of {
                                __DEFAULT -> GHC.Base.Nothing @ Int;
                                1# ->
                                  case leChar# ww_s3xiV 'F'# of {
                                    __DEFAULT -> GHC.Base.Nothing @ Int;
                                    1# ->
                                      GHC.Base.Just
                                        @ Int (GHC.Types.I# (+# (-# (ord# ww_s3xiV) 65#) 10#))
                                  }
                              } } in
                        case leChar# 'a'# ww_s3xiV of {
                          __DEFAULT -> jump $j1_s3wdI;
                          1# ->
                            case leChar# ww_s3xiV 'f'# of {
                              __DEFAULT -> jump $j1_s3wdI;
                              1# ->
                                GHC.Base.Just
                                  @ Int (GHC.Types.I# (+# (-# (ord# ww_s3xiV) 97#) 10#))
                            }
                        } } in
                  case leChar# '0'# ww_s3xiV of {
                    __DEFAULT -> jump $j_s3wdN;
                    1# ->
                      case leChar# ww_s3xiV '9'# of {
                        __DEFAULT -> jump $j_s3wdN;
                        1# -> GHC.Base.Just @ Int (GHC.Types.I# (-# (ord# ww_s3xiV) 48#))
                      }
                  }
              };
            True ->
              case leChar# '0'# ww_s3xiV of {
                __DEFAULT -> GHC.Base.Nothing @ Int;
                1# ->
                  case leChar# ww_s3xiV '9'# of {
                    __DEFAULT -> GHC.Base.Nothing @ Int;
                    1# -> GHC.Base.Just @ Int (GHC.Types.I# (-# (ord# ww_s3xiV) 48#))
                  }
              }
          };
        True ->
          case leChar# '0'# ww_s3xiV of {
            __DEFAULT -> GHC.Base.Nothing @ Int;
            1# ->
              case leChar# ww_s3xiV '7'# of {
                __DEFAULT -> GHC.Base.Nothing @ Int;
                1# -> GHC.Base.Just @ Int (GHC.Types.I# (-# (ord# ww_s3xiV) 48#))
              }
          }
      }

-- RHS size: {terms: 30, types: 19, coercions: 0, joins: 0/0}
Text.Read.Lex.$w$sreadIntP' [InlPrag=NOUSERINLINE[0]]
  :: Integer
     -> forall b.
        (Integer -> Text.ParserCombinators.ReadP.P b)
        -> (# Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=2,
 Str=<L,U><L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 190 0}]
Text.Read.Lex.$w$sreadIntP'
  = \ (w2_s3xiY :: Integer)
      (@ b_s3xiZ)
      (w3_s3xj0 :: Integer -> Text.ParserCombinators.ReadP.P b_s3xiZ) ->
      Text.Read.Lex.$w$sreadIntP
        w2_s3xiY
        (\ (c_a3uNO :: Char) ->
           case c_a3uNO of { C# ww1_s3xiA ->
           case Text.Read.Lex.$w$svalDig w2_s3xiY ww1_s3xiA of {
             Nothing -> GHC.Types.False;
             Just x34_i1ABq -> GHC.Types.True
           }
           })
        (\ (c_a3uNP :: Char) ->
           case c_a3uNP of { C# ww1_s3xiA ->
           case Text.Read.Lex.$w$svalDig w2_s3xiY ww1_s3xiA of {
             Nothing -> Text.Read.Lex.$fShowLexeme2;
             Just x34_i1ABq -> x34_i1ABq
           }
           })
        @ b_s3xiZ
        w3_s3xj0

-- RHS size: {terms: 38, types: 28, coercions: 0, joins: 0/0}
Text.Read.Lex.$wreadIntP' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (Eq a, Num a) =>
     a
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 240 0}]
Text.Read.Lex.$wreadIntP'
  = \ (@ a_s3xj5)
      (w2_s3xj6 :: Eq a_s3xj5)
      (w3_s3xj7 :: Num a_s3xj5)
      (w4_s3xj8 :: a_s3xj5)
      (@ b_s3xj9)
      (w5_s3xja :: a_s3xj5 -> Text.ParserCombinators.ReadP.P b_s3xj9) ->
      Text.Read.Lex.$wreadIntP
        @ a_s3xj5
        w3_s3xj7
        w4_s3xj8
        (\ (c_a3uNO :: Char) ->
           case c_a3uNO of { C# ww1_s3xiV ->
           case Text.Read.Lex.$wvalDig
                  @ a_s3xj5 w2_s3xj6 w3_s3xj7 w4_s3xj8 ww1_s3xiV
           of {
             Nothing -> GHC.Types.False;
             Just x34_i1ABq -> GHC.Types.True
           }
           })
        (\ (c_a3uNP :: Char) ->
           case c_a3uNP of { C# ww1_s3xiV ->
           case Text.Read.Lex.$wvalDig
                  @ a_s3xj5 w2_s3xj6 w3_s3xj7 w4_s3xj8 ww1_s3xiV
           of {
             Nothing -> Text.Read.Lex.$fShowLexeme2;
             Just x34_i1ABq -> x34_i1ABq
           }
           })
        @ b_s3xj9
        w5_s3xja

-- RHS size: {terms: 15, types: 23, coercions: 0, joins: 0/0}
Text.Read.Lex.readDecP6 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (Eq a, Num a) =>
     a
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s3xj5)
                 (w2_s3xj6 [Occ=Once] :: Eq a_s3xj5)
                 (w3_s3xj7 [Occ=Once] :: Num a_s3xj5)
                 (w4_s3xj8 [Occ=Once] :: a_s3xj5)
                 (@ b_s3xj9)
                 (w5_s3xja [Occ=Once]
                    :: a_s3xj5 -> Text.ParserCombinators.ReadP.P b_s3xj9) ->
                 case Text.Read.Lex.$wreadIntP'
                        @ a_s3xj5 w2_s3xj6 w3_s3xj7 w4_s3xj8 @ b_s3xj9 w5_s3xja
                 of
                 { (# ww1_s3xlb [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Get @ b_s3xj9 ww1_s3xlb
                 }}]
Text.Read.Lex.readDecP6
  = \ (@ a_s3xj5)
      (w2_s3xj6 :: Eq a_s3xj5)
      (w3_s3xj7 :: Num a_s3xj5)
      (w4_s3xj8 :: a_s3xj5)
      (@ b_s3xj9)
      (w5_s3xja :: a_s3xj5 -> Text.ParserCombinators.ReadP.P b_s3xj9) ->
      case Text.Read.Lex.$wreadIntP'
             @ a_s3xj5 w2_s3xj6 w3_s3xj7 w4_s3xj8 @ b_s3xj9 w5_s3xja
      of
      { (# ww1_s3xlb #) ->
      Text.ParserCombinators.ReadP.Get @ b_s3xj9 ww1_s3xlb
      }

-- RHS size: {terms: 9, types: 15, coercions: 0, joins: 0/0}
Text.Read.Lex.readOctP1
  :: forall b.
     (Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Str=<L,C(U)>m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 50 20}]
Text.Read.Lex.readOctP1
  = \ (@ b_s3xiZ)
      (w2_s3xj0 :: Integer -> Text.ParserCombinators.ReadP.P b_s3xiZ) ->
      case Text.Read.Lex.$w$sreadIntP'
             Text.Read.Lex.readDecP4 @ b_s3xiZ w2_s3xj0
      of
      { (# ww1_s3xl9 #) ->
      Text.ParserCombinators.ReadP.Get @ b_s3xiZ ww1_s3xl9
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
Text.Read.Lex.readOctP_$sreadOctP :: ReadP Integer
[GblId,
 Arity=1,
 Str=<L,C(U)>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.Read.Lex.readOctP1
               `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R)
                       :: (forall b.
                           (Integer -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (ReadP Integer :: *))}]
Text.Read.Lex.readOctP_$sreadOctP
  = Text.Read.Lex.readOctP1
    `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R)
            :: (forall b.
                (Integer -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (ReadP Integer :: *))

-- RHS size: {terms: 18, types: 24, coercions: 0, joins: 0/1}
Text.Read.Lex.readOctP2
  :: forall a.
     (Eq a, Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3v4p)
                 ($dEq_a3v4r [Occ=Once] :: Eq a_a3v4p)
                 ($dNum_a3v4s :: Num a_a3v4p) ->
                 Text.Read.Lex.readDecP6
                   @ a_a3v4p
                   $dEq_a3v4r
                   $dNum_a3v4s
                   (fromInteger @ a_a3v4p $dNum_a3v4s Text.Read.Lex.readDecP4)}]
Text.Read.Lex.readOctP2
  = \ (@ a_a3v4p)
      ($dEq_a3v4r :: Eq a_a3v4p)
      ($dNum_a3v4s :: Num a_a3v4p) ->
      let {
        w2_s3xj8 :: a_a3v4p
        [LclId]
        w2_s3xj8
          = fromInteger @ a_a3v4p $dNum_a3v4s Text.Read.Lex.readDecP4 } in
      \ (@ b_s3xj9)
        (w3_s3xja :: a_a3v4p -> Text.ParserCombinators.ReadP.P b_s3xj9) ->
        case Text.Read.Lex.$wreadIntP'
               @ a_a3v4p $dEq_a3v4r $dNum_a3v4s w2_s3xj8 @ b_s3xj9 w3_s3xja
        of
        { (# ww1_s3xlb #) ->
        Text.ParserCombinators.ReadP.Get @ b_s3xj9 ww1_s3xlb
        }

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
readOctP :: forall a. (Eq a, Num a) => ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.Read.Lex.readOctP2
               `cast` (forall (a :: <*>_N).
                       <Eq a>_R
                       ->_R <Num a>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a>_R)
                       :: (forall a.
                           (Eq a, Num a) =>
                           forall b.
                           (a -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a. (Eq a, Num a) => ReadP a :: *))}]
readOctP
  = Text.Read.Lex.readOctP2
    `cast` (forall (a :: <*>_N).
            <Eq a>_R
            ->_R <Num a>_R
            ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a>_R)
            :: (forall a.
                (Eq a, Num a) =>
                forall b.
                (a -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a. (Eq a, Num a) => ReadP a :: *))

-- RHS size: {terms: 9, types: 15, coercions: 0, joins: 0/0}
Text.Read.Lex.readDecP1
  :: forall b.
     (Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Str=<L,C(U)>m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 50 20}]
Text.Read.Lex.readDecP1
  = \ (@ b_s3xiZ)
      (w2_s3xj0 :: Integer -> Text.ParserCombinators.ReadP.P b_s3xiZ) ->
      case Text.Read.Lex.$w$sreadIntP'
             Text.Read.Lex.numberToFixed1 @ b_s3xiZ w2_s3xj0
      of
      { (# ww1_s3xl9 #) ->
      Text.ParserCombinators.ReadP.Get @ b_s3xiZ ww1_s3xl9
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
Text.Read.Lex.readDecP_$sreadDecP :: ReadP Integer
[GblId,
 Arity=1,
 Str=<L,C(U)>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.Read.Lex.readDecP1
               `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R)
                       :: (forall b.
                           (Integer -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (ReadP Integer :: *))}]
Text.Read.Lex.readDecP_$sreadDecP
  = Text.Read.Lex.readDecP1
    `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R)
            :: (forall b.
                (Integer -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (ReadP Integer :: *))

-- RHS size: {terms: 18, types: 24, coercions: 0, joins: 0/1}
Text.Read.Lex.readDecP5
  :: forall a.
     (Eq a, Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3v4H)
                 ($dEq_a3v4J [Occ=Once] :: Eq a_a3v4H)
                 ($dNum_a3v4K :: Num a_a3v4H) ->
                 Text.Read.Lex.readDecP6
                   @ a_a3v4H
                   $dEq_a3v4J
                   $dNum_a3v4K
                   (fromInteger @ a_a3v4H $dNum_a3v4K Text.Read.Lex.numberToFixed1)}]
Text.Read.Lex.readDecP5
  = \ (@ a_a3v4H)
      ($dEq_a3v4J :: Eq a_a3v4H)
      ($dNum_a3v4K :: Num a_a3v4H) ->
      let {
        w2_s3xj8 :: a_a3v4H
        [LclId]
        w2_s3xj8
          = fromInteger
              @ a_a3v4H $dNum_a3v4K Text.Read.Lex.numberToFixed1 } in
      \ (@ b_s3xj9)
        (w3_s3xja :: a_a3v4H -> Text.ParserCombinators.ReadP.P b_s3xj9) ->
        case Text.Read.Lex.$wreadIntP'
               @ a_a3v4H $dEq_a3v4J $dNum_a3v4K w2_s3xj8 @ b_s3xj9 w3_s3xja
        of
        { (# ww1_s3xlb #) ->
        Text.ParserCombinators.ReadP.Get @ b_s3xj9 ww1_s3xlb
        }

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
readDecP :: forall a. (Eq a, Num a) => ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.Read.Lex.readDecP5
               `cast` (forall (a :: <*>_N).
                       <Eq a>_R
                       ->_R <Num a>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a>_R)
                       :: (forall a.
                           (Eq a, Num a) =>
                           forall b.
                           (a -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a. (Eq a, Num a) => ReadP a :: *))}]
readDecP
  = Text.Read.Lex.readDecP5
    `cast` (forall (a :: <*>_N).
            <Eq a>_R
            ->_R <Num a>_R
            ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a>_R)
            :: (forall a.
                (Eq a, Num a) =>
                forall b.
                (a -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a. (Eq a, Num a) => ReadP a :: *))

-- RHS size: {terms: 9, types: 15, coercions: 0, joins: 0/0}
Text.Read.Lex.readHexP1
  :: forall b.
     (Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Str=<L,C(U)>m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 50 20}]
Text.Read.Lex.readHexP1
  = \ (@ b_s3xiZ)
      (w2_s3xj0 :: Integer -> Text.ParserCombinators.ReadP.P b_s3xiZ) ->
      case Text.Read.Lex.$w$sreadIntP'
             Text.Read.Lex.readDecP3 @ b_s3xiZ w2_s3xj0
      of
      { (# ww1_s3xl9 #) ->
      Text.ParserCombinators.ReadP.Get @ b_s3xiZ ww1_s3xl9
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
Text.Read.Lex.readHexP_$sreadHexP :: ReadP Integer
[GblId,
 Arity=1,
 Str=<L,C(U)>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.Read.Lex.readHexP1
               `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R)
                       :: (forall b.
                           (Integer -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (ReadP Integer :: *))}]
Text.Read.Lex.readHexP_$sreadHexP
  = Text.Read.Lex.readHexP1
    `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R)
            :: (forall b.
                (Integer -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (ReadP Integer :: *))

-- RHS size: {terms: 18, types: 24, coercions: 0, joins: 0/1}
Text.Read.Lex.readHexP2
  :: forall a.
     (Eq a, Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3v4Z)
                 ($dEq_a3v51 [Occ=Once] :: Eq a_a3v4Z)
                 ($dNum_a3v52 :: Num a_a3v4Z) ->
                 Text.Read.Lex.readDecP6
                   @ a_a3v4Z
                   $dEq_a3v51
                   $dNum_a3v52
                   (fromInteger @ a_a3v4Z $dNum_a3v52 Text.Read.Lex.readDecP3)}]
Text.Read.Lex.readHexP2
  = \ (@ a_a3v4Z)
      ($dEq_a3v51 :: Eq a_a3v4Z)
      ($dNum_a3v52 :: Num a_a3v4Z) ->
      let {
        w2_s3xj8 :: a_a3v4Z
        [LclId]
        w2_s3xj8
          = fromInteger @ a_a3v4Z $dNum_a3v52 Text.Read.Lex.readDecP3 } in
      \ (@ b_s3xj9)
        (w3_s3xja :: a_a3v4Z -> Text.ParserCombinators.ReadP.P b_s3xj9) ->
        case Text.Read.Lex.$wreadIntP'
               @ a_a3v4Z $dEq_a3v51 $dNum_a3v52 w2_s3xj8 @ b_s3xj9 w3_s3xja
        of
        { (# ww1_s3xlb #) ->
        Text.ParserCombinators.ReadP.Get @ b_s3xj9 ww1_s3xlb
        }

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
readHexP :: forall a. (Eq a, Num a) => ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.Read.Lex.readHexP2
               `cast` (forall (a :: <*>_N).
                       <Eq a>_R
                       ->_R <Num a>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a>_R)
                       :: (forall a.
                           (Eq a, Num a) =>
                           forall b.
                           (a -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a. (Eq a, Num a) => ReadP a :: *))}]
readHexP
  = Text.Read.Lex.readHexP2
    `cast` (forall (a :: <*>_N).
            <Eq a>_R
            ->_R <Num a>_R
            ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a>_R)
            :: (forall a.
                (Eq a, Num a) =>
                forall b.
                (a -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a. (Eq a, Num a) => ReadP a :: *))

-- RHS size: {terms: 177, types: 100, coercions: 0, joins: 3/6}
$wlexDigits_r3y9x
  :: Int
     -> forall b.
        (Digits -> Text.ParserCombinators.ReadP.P b)
        -> (# String -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U(U)><L,C(U)>, Unf=OtherCon []]
$wlexDigits_r3y9x
  = \ (w2_s3xjk :: Int)
      (@ b_s3xjl)
      (w3_s3xjm :: Digits -> Text.ParserCombinators.ReadP.P b_s3xjl) ->
      let {
        lvl116_s3w3m [Dmd=<L,C(U)>]
          :: [Int] -> Text.ParserCombinators.ReadP.P b_s3xjl
        [LclId,
         Arity=1,
         Str=<S,1*U>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                 Tmpl= \ (a3_X3nkz [Occ=Once!] :: [Int]) ->
                         case a3_X3nkz of wild_i2KaD {
                           [] -> Text.ParserCombinators.ReadP.Fail @ b_s3xjl;
                           : _ [Occ=Dead] _ [Occ=Dead] -> w3_s3xjm wild_i2KaD
                         }}]
        lvl116_s3w3m
          = \ (a3_X3nkz :: [Int]) ->
              case a3_X3nkz of wild_i2KaD {
                [] -> Text.ParserCombinators.ReadP.Fail @ b_s3xjl;
                : ds1_i2Mqv ds2_i2Mqw -> w3_s3xjm wild_i2KaD
              } } in
      letrec {
        scan_s3x55 [Occ=LoopBreaker]
          :: forall a.
             [Char]
             -> ([Int] -> a)
             -> forall b1.
                (a -> Text.ParserCombinators.ReadP.P b1)
                -> Text.ParserCombinators.ReadP.P b1
        [LclId,
         Arity=3,
         Str=<S,1*U><L,1*C1(U)><L,1*C1(U)>,
         Unf=OtherCon []]
        scan_s3x55
          = \ (@ a_a3vca)
              (ds_d3vyT :: [Char])
              (f_a3uN1 :: [Int] -> a_a3vca)
              (@ b1_X3npr)
              (eta_X96 :: a_a3vca -> Text.ParserCombinators.ReadP.P b1_X3npr) ->
              case ds_d3vyT of {
                [] -> eta_X96 (f_a3uN1 (GHC.Types.[] @ Int));
                : c_a3uMZ cs_a3uN0 ->
                  case w2_s3xjk of { I# ww1_s3xiH ->
                  case c_a3uMZ of { C# ww3_s3xiL ->
                  join {
                    $j_s3xuV [Dmd=<L,1*C1(U)>]
                      :: Int -> Text.ParserCombinators.ReadP.P b1_X3npr
                    [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []]
                    $j_s3xuV (n_a3uN2 [OS=OneShot] :: Int)
                      = let {
                          lvl117_s3w3j :: Text.ParserCombinators.ReadP.P b1_X3npr
                          [LclId]
                          lvl117_s3w3j
                            = scan_s3x55
                                @ a_a3vca
                                cs_a3uN0
                                (\ (x34_i1Mhr [OS=OneShot] :: [Int]) ->
                                   f_a3uN1 (GHC.Types.: @ Int n_a3uN2 x34_i1Mhr))
                                @ b1_X3npr
                                eta_X96 } in
                        Text.ParserCombinators.ReadP.Get
                          @ b1_X3npr (\ _ [Occ=Dead] -> lvl117_s3w3j) } in
                  case ww1_s3xiH of {
                    __DEFAULT -> case Text.Read.Lex.readDecP2 of wild2_00 { };
                    8# ->
                      case leChar# '0'# ww3_s3xiL of {
                        __DEFAULT -> eta_X96 (f_a3uN1 (GHC.Types.[] @ Int));
                        1# ->
                          case leChar# ww3_s3xiL '7'# of {
                            __DEFAULT -> eta_X96 (f_a3uN1 (GHC.Types.[] @ Int));
                            1# -> jump $j_s3xuV (GHC.Types.I# (-# (ord# ww3_s3xiL) 48#))
                          }
                      };
                    10# ->
                      case leChar# '0'# ww3_s3xiL of {
                        __DEFAULT -> eta_X96 (f_a3uN1 (GHC.Types.[] @ Int));
                        1# ->
                          case leChar# ww3_s3xiL '9'# of {
                            __DEFAULT -> eta_X96 (f_a3uN1 (GHC.Types.[] @ Int));
                            1# -> jump $j_s3xuV (GHC.Types.I# (-# (ord# ww3_s3xiL) 48#))
                          }
                      };
                    16# ->
                      join {
                        $j1_s3wdl [Dmd=<L,1*U>] :: Text.ParserCombinators.ReadP.P b1_X3npr
                        [LclId[JoinId(0)]]
                        $j1_s3wdl
                          = join {
                              $j2_s3wdg [Dmd=<L,1*U>] :: Text.ParserCombinators.ReadP.P b1_X3npr
                              [LclId[JoinId(0)]]
                              $j2_s3wdg
                                = case leChar# 'A'# ww3_s3xiL of {
                                    __DEFAULT -> eta_X96 (f_a3uN1 (GHC.Types.[] @ Int));
                                    1# ->
                                      case leChar# ww3_s3xiL 'F'# of {
                                        __DEFAULT -> eta_X96 (f_a3uN1 (GHC.Types.[] @ Int));
                                        1# ->
                                          jump $j_s3xuV
                                            (GHC.Types.I# (+# (-# (ord# ww3_s3xiL) 65#) 10#))
                                      }
                                  } } in
                            case leChar# 'a'# ww3_s3xiL of {
                              __DEFAULT -> jump $j2_s3wdg;
                              1# ->
                                case leChar# ww3_s3xiL 'f'# of {
                                  __DEFAULT -> jump $j2_s3wdg;
                                  1# ->
                                    jump $j_s3xuV (GHC.Types.I# (+# (-# (ord# ww3_s3xiL) 97#) 10#))
                                }
                            } } in
                      case leChar# '0'# ww3_s3xiL of {
                        __DEFAULT -> jump $j1_s3wdl;
                        1# ->
                          case leChar# ww3_s3xiL '9'# of {
                            __DEFAULT -> jump $j1_s3wdl;
                            1# -> jump $j_s3xuV (GHC.Types.I# (-# (ord# ww3_s3xiL) 48#))
                          }
                      }
                  }
                  }
                  }
              }; } in
      (# \ (a3_a3ngt :: String) ->
           scan_s3x55 @ [Int] a3_a3ngt (id @ [Int]) @ b_s3xjl lvl116_s3w3m #)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
a1_r3y9y :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
a1_r3y9y = GHC.Types.I# 8#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
a2_r3y9z :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
a2_r3y9z = GHC.Types.I# 16#

-- RHS size: {terms: 59, types: 51, coercions: 0, joins: 0/4}
$wlexHexOct_r3y9A
  :: forall b1.
     (Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []]
$wlexHexOct_r3y9A
  = \ (@ b1_s3xjx)
      (w2_s3xjy :: Lexeme -> Text.ParserCombinators.ReadP.P b1_s3xjx) ->
      let {
        lvl116_s3xKa :: Text.ParserCombinators.ReadP.P b1_s3xjx
        [LclId]
        lvl116_s3xKa
          = case $wlexDigits_r3y9x
                   a2_r3y9z
                   @ b1_s3xjx
                   (\ (a3_X3nkM :: Digits) ->
                      w2_s3xjy
                        (Text.Read.Lex.Number (Text.Read.Lex.MkNumber a2_r3y9z a3_X3nkM)))
            of
            { (# ww1_s3xld #) ->
            Text.ParserCombinators.ReadP.Look @ b1_s3xjx ww1_s3xld
            } } in
      let {
        lvl117_s3xK7 :: Text.ParserCombinators.ReadP.P b1_s3xjx
        [LclId]
        lvl117_s3xK7
          = case $wlexDigits_r3y9x
                   a1_r3y9y
                   @ b1_s3xjx
                   (\ (a3_X3nkM :: Digits) ->
                      w2_s3xjy
                        (Text.Read.Lex.Number (Text.Read.Lex.MkNumber a1_r3y9y a3_X3nkM)))
            of
            { (# ww1_s3xld #) ->
            Text.ParserCombinators.ReadP.Look @ b1_s3xjx ww1_s3xld
            } } in
      let {
        lvl118_s3wi4 [InlPrag=NOUSERINLINE[0]]
          :: Char -> Text.ParserCombinators.ReadP.P b1_s3xjx
        [LclId,
         Arity=1,
         Str=<S(S),1*U(1*U)>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                 Tmpl= \ (w3_s3xjr [Occ=Once!] :: Char) ->
                         case w3_s3xjr of { C# ww1_s3xju [Occ=Once!] ->
                         case ww1_s3xju of {
                           __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_s3xjx;
                           'O'# -> lvl117_s3xK7;
                           'X'# -> lvl116_s3xKa;
                           'o'# -> lvl117_s3xK7;
                           'x'# -> lvl116_s3xKa
                         }
                         }}]
        lvl118_s3wi4
          = \ (w3_s3xjr :: Char) ->
              case w3_s3xjr of { C# ww1_s3xju ->
              case ww1_s3xju of {
                __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_s3xjx;
                'O'# -> lvl117_s3xK7;
                'X'# -> lvl116_s3xKa;
                'o'# -> lvl117_s3xK7;
                'x'# -> lvl116_s3xKa
              }
              } } in
      let {
        lvl119_s3w3n :: Text.ParserCombinators.ReadP.P b1_s3xjx
        [LclId, Unf=OtherCon []]
        lvl119_s3w3n
          = Text.ParserCombinators.ReadP.Get @ b1_s3xjx lvl118_s3wi4 } in
      (# \ (a_a3ngt :: Char) ->
           case a_a3ngt of { C# y_a5il ->
           case y_a5il of {
             __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_s3xjx;
             '0'# -> lvl119_s3w3n
           }
           } #)

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
lexHexOct_r3y9B
  :: forall b1.
     (Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []]
lexHexOct_r3y9B
  = \ (@ b1_s3xjx)
      (w2_s3xjy :: Lexeme -> Text.ParserCombinators.ReadP.P b1_s3xjx) ->
      case $wlexHexOct_r3y9A @ b1_s3xjx w2_s3xjy of { (# ww1_s3xlf #) ->
      Text.ParserCombinators.ReadP.Get @ b1_s3xjx ww1_s3xlf
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6_r3y9C :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl6_r3y9C = GHC.Types.I# 10#

-- RHS size: {terms: 24, types: 29, coercions: 0, joins: 0/1}
$wlexFrac_r3y9D
  :: forall b1.
     (Maybe Digits -> Text.ParserCombinators.ReadP.P b1)
     -> (# Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []]
$wlexFrac_r3y9D
  = \ (@ b1_s3xjD)
      (w2_s3xjE
         :: Maybe Digits -> Text.ParserCombinators.ReadP.P b1_s3xjD) ->
      let {
        lvl116_s3w3p :: Text.ParserCombinators.ReadP.P b1_s3xjD
        [LclId]
        lvl116_s3w3p
          = case $wlexDigits_r3y9x
                   lvl6_r3y9C
                   @ b1_s3xjD
                   (\ (a3_X3nkS :: Digits) ->
                      w2_s3xjE (GHC.Base.Just @ Digits a3_X3nkS))
            of
            { (# ww1_s3xld #) ->
            Text.ParserCombinators.ReadP.Look @ b1_s3xjD ww1_s3xld
            } } in
      (# \ (a_a3ngt :: Char) ->
           case a_a3ngt of { C# y_a5il ->
           case y_a5il of {
             __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_s3xjD;
             '.'# -> lvl116_s3w3p
           }
           } #)

-- RHS size: {terms: 8, types: 16, coercions: 0, joins: 0/0}
lexFrac_r3y9E
  :: forall b1.
     (Maybe Digits -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []]
lexFrac_r3y9E
  = \ (@ b1_s3xjD)
      (w2_s3xjE
         :: Maybe Digits -> Text.ParserCombinators.ReadP.P b1_s3xjD) ->
      case $wlexFrac_r3y9D @ b1_s3xjD w2_s3xjE of { (# ww1_s3xlh #) ->
      Text.ParserCombinators.ReadP.Get @ b1_s3xjD ww1_s3xlh
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m1_r3y9F :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m1_r3y9F = "SOH"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m2_r3y9G :: [Char]
[GblId]
m2_r3y9G = unpackCString# m1_r3y9F

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x_r3y9H :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x_r3y9H = GHC.Types.C# '\SOH'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m3_r3y9I :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m3_r3y9I = "SO"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m4_r3y9J :: [Char]
[GblId]
m4_r3y9J = unpackCString# m3_r3y9I

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x1_r3y9K :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x1_r3y9K = GHC.Types.C# '\SO'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m5_r3y9L :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m5_r3y9L = "NUL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m6_r3y9M :: [Char]
[GblId]
m6_r3y9M = unpackCString# m5_r3y9L

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x2_r3y9N :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x2_r3y9N = GHC.Types.C# '\NUL'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m7_r3y9O :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m7_r3y9O = "STX"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m8_r3y9P :: [Char]
[GblId]
m8_r3y9P = unpackCString# m7_r3y9O

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x3_r3y9Q :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x3_r3y9Q = GHC.Types.C# '\STX'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m9_r3y9R :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m9_r3y9R = "ETX"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m10_r3y9S :: [Char]
[GblId]
m10_r3y9S = unpackCString# m9_r3y9R

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x4_r3y9T :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x4_r3y9T = GHC.Types.C# '\ETX'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m11_r3y9U :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m11_r3y9U = "EOT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m12_r3y9V :: [Char]
[GblId]
m12_r3y9V = unpackCString# m11_r3y9U

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x5_r3y9W :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x5_r3y9W = GHC.Types.C# '\EOT'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m13_r3y9X :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m13_r3y9X = "ENQ"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m14_r3y9Y :: [Char]
[GblId]
m14_r3y9Y = unpackCString# m13_r3y9X

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x6_r3y9Z :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x6_r3y9Z = GHC.Types.C# '\ENQ'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m15_r3ya0 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m15_r3ya0 = "ACK"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m16_r3ya1 :: [Char]
[GblId]
m16_r3ya1 = unpackCString# m15_r3ya0

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x7_r3ya2 :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x7_r3ya2 = GHC.Types.C# '\ACK'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m17_r3ya3 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m17_r3ya3 = "BEL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m18_r3ya4 :: [Char]
[GblId]
m18_r3ya4 = unpackCString# m17_r3ya3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x8_r3ya5 :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x8_r3ya5 = GHC.Types.C# '\a'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m19_r3ya6 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m19_r3ya6 = "BS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m20_r3ya7 :: [Char]
[GblId]
m20_r3ya7 = unpackCString# m19_r3ya6

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x9_r3ya8 :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x9_r3ya8 = GHC.Types.C# '\b'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m21_r3ya9 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m21_r3ya9 = "HT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m22_r3yaa :: [Char]
[GblId]
m22_r3yaa = unpackCString# m21_r3ya9

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x10_r3yab :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x10_r3yab = GHC.Types.C# '\t'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m23_r3yac :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m23_r3yac = "LF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m24_r3yad :: [Char]
[GblId]
m24_r3yad = unpackCString# m23_r3yac

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x11_r3yae :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x11_r3yae = GHC.Types.C# '\n'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m25_r3yaf :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m25_r3yaf = "VT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m26_r3yag :: [Char]
[GblId]
m26_r3yag = unpackCString# m25_r3yaf

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x12_r3yah :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x12_r3yah = GHC.Types.C# '\v'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m27_r3yai :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m27_r3yai = "FF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m28_r3yaj :: [Char]
[GblId]
m28_r3yaj = unpackCString# m27_r3yai

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x13_r3yak :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x13_r3yak = GHC.Types.C# '\f'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m29_r3yal :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m29_r3yal = "CR"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m30_r3yam :: [Char]
[GblId]
m30_r3yam = unpackCString# m29_r3yal

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x14_r3yan :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x14_r3yan = GHC.Types.C# '\r'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m31_r3yao :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m31_r3yao = "SI"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m32_r3yap :: [Char]
[GblId]
m32_r3yap = unpackCString# m31_r3yao

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x15_r3yaq :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x15_r3yaq = GHC.Types.C# '\SI'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m33_r3yar :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m33_r3yar = "DLE"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m34_r3yas :: [Char]
[GblId]
m34_r3yas = unpackCString# m33_r3yar

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x16_r3yat :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x16_r3yat = GHC.Types.C# '\DLE'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m35_r3yau :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m35_r3yau = "DC1"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m36_r3yav :: [Char]
[GblId]
m36_r3yav = unpackCString# m35_r3yau

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x17_r3yaw :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x17_r3yaw = GHC.Types.C# '\DC1'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m37_r3yax :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m37_r3yax = "DC2"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m38_r3yay :: [Char]
[GblId]
m38_r3yay = unpackCString# m37_r3yax

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x18_r3yaz :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x18_r3yaz = GHC.Types.C# '\DC2'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m39_r3yaA :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m39_r3yaA = "DC3"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m40_r3yaB :: [Char]
[GblId]
m40_r3yaB = unpackCString# m39_r3yaA

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x19_r3yaC :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x19_r3yaC = GHC.Types.C# '\DC3'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m41_r3yaD :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m41_r3yaD = "DC4"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m42_r3yaE :: [Char]
[GblId]
m42_r3yaE = unpackCString# m41_r3yaD

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x20_r3yaF :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x20_r3yaF = GHC.Types.C# '\DC4'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m43_r3yaG :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m43_r3yaG = "NAK"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m44_r3yaH :: [Char]
[GblId]
m44_r3yaH = unpackCString# m43_r3yaG

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x21_r3yaI :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x21_r3yaI = GHC.Types.C# '\NAK'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m45_r3yaJ :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m45_r3yaJ = "SYN"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m46_r3yaK :: [Char]
[GblId]
m46_r3yaK = unpackCString# m45_r3yaJ

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x22_r3yaL :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x22_r3yaL = GHC.Types.C# '\SYN'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m47_r3yaM :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m47_r3yaM = "ETB"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m48_r3yaN :: [Char]
[GblId]
m48_r3yaN = unpackCString# m47_r3yaM

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x23_r3yaO :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x23_r3yaO = GHC.Types.C# '\ETB'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m49_r3yaP :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m49_r3yaP = "CAN"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m50_r3yaQ :: [Char]
[GblId]
m50_r3yaQ = unpackCString# m49_r3yaP

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x24_r3yaR :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x24_r3yaR = GHC.Types.C# '\CAN'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m51_r3yaS :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m51_r3yaS = "EM"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m52_r3yaT :: [Char]
[GblId]
m52_r3yaT = unpackCString# m51_r3yaS

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x25_r3yaU :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x25_r3yaU = GHC.Types.C# '\EM'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m53_r3yaV :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m53_r3yaV = "SUB"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m54_r3yaW :: [Char]
[GblId]
m54_r3yaW = unpackCString# m53_r3yaV

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x26_r3yaX :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x26_r3yaX = GHC.Types.C# '\SUB'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m55_r3yaY :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m55_r3yaY = "ESC"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m56_r3yaZ :: [Char]
[GblId]
m56_r3yaZ = unpackCString# m55_r3yaY

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x27_r3yb0 :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x27_r3yb0 = GHC.Types.C# '\ESC'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m57_r3yb1 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m57_r3yb1 = "FS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m58_r3yb2 :: [Char]
[GblId]
m58_r3yb2 = unpackCString# m57_r3yb1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x28_r3yb3 :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x28_r3yb3 = GHC.Types.C# '\FS'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m59_r3yb4 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m59_r3yb4 = "GS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m60_r3yb5 :: [Char]
[GblId]
m60_r3yb5 = unpackCString# m59_r3yb4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x29_r3yb6 :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x29_r3yb6 = GHC.Types.C# '\GS'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m61_r3yb7 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m61_r3yb7 = "RS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m62_r3yb8 :: [Char]
[GblId]
m62_r3yb8 = unpackCString# m61_r3yb7

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x30_r3yb9 :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x30_r3yb9 = GHC.Types.C# '\RS'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m63_r3yba :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m63_r3yba = "US"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m64_r3ybb :: [Char]
[GblId]
m64_r3ybb = unpackCString# m63_r3yba

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x31_r3ybc :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x31_r3ybc = GHC.Types.C# '\US'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m65_r3ybd :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m65_r3ybd = "SP"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m66_r3ybe :: [Char]
[GblId]
m66_r3ybe = unpackCString# m65_r3ybd

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x32_r3ybf :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x32_r3ybf = GHC.Types.C# ' '#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
m67_r3ybg :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
m67_r3ybg = "DEL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m68_r3ybh :: [Char]
[GblId]
m68_r3ybh = unpackCString# m67_r3ybg

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
x33_r3ybi :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
x33_r3ybi = GHC.Types.C# '\DEL'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl7_r3ybj :: Integer
[GblId, Unf=OtherCon []]
lvl7_r3ybj = 1114111

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl8_r3ybk :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl8_r3ybk = GHC.Types.C# '"'#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl9_r3ybl :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl9_r3ybl = (lvl8_r3ybk, GHC.Types.True)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl10_r3ybm :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl10_r3ybm = GHC.Types.C# '\''#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl11_r3ybn :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl11_r3ybn = (lvl10_r3ybm, GHC.Types.True)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl12_r3ybo :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl12_r3ybo = GHC.Types.C# '\\'#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl13_r3ybp :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl13_r3ybp = (lvl12_r3ybo, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl14_r3ybq :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl14_r3ybq = (x8_r3ya5, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl15_r3ybr :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl15_r3ybr = (x9_r3ya8, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl16_r3ybs :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl16_r3ybs = (x13_r3yak, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl17_r3ybt :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl17_r3ybt = (x11_r3yae, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl18_r3ybu :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl18_r3ybu = (x14_r3yan, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl19_r3ybv :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl19_r3ybv = (x10_r3yab, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl20_r3ybw :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl20_r3ybw = (x12_r3yah, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl21_r3ybx :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl21_r3ybx = (x2_r3y9N, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl22_r3yby :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl22_r3yby = (x_r3y9H, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl23_r3ybz :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl23_r3ybz = (x3_r3y9Q, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl24_r3ybA :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl24_r3ybA = (x4_r3y9T, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl25_r3ybB :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl25_r3ybB = (x5_r3y9W, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl26_r3ybC :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl26_r3ybC = (x6_r3y9Z, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl27_r3ybD :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl27_r3ybD = (x7_r3ya2, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl28_r3ybE :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl28_r3ybE = (x1_r3y9K, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl29_r3ybF :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl29_r3ybF = (x15_r3yaq, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl30_r3ybG :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl30_r3ybG = (x16_r3yat, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl31_r3ybH :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl31_r3ybH = (x17_r3yaw, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl32_r3ybI :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl32_r3ybI = (x18_r3yaz, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl33_r3ybJ :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl33_r3ybJ = (x19_r3yaC, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl34_r3ybK :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl34_r3ybK = (x20_r3yaF, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl35_r3ybL :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl35_r3ybL = (x21_r3yaI, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl36_r3ybM :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl36_r3ybM = (x22_r3yaL, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl37_r3ybN :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl37_r3ybN = (x23_r3yaO, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl38_r3ybO :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl38_r3ybO = (x24_r3yaR, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl39_r3ybP :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl39_r3ybP = (x25_r3yaU, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl40_r3ybQ :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl40_r3ybQ = (x26_r3yaX, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl41_r3ybR :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl41_r3ybR = (x27_r3yb0, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl42_r3ybS :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl42_r3ybS = (x28_r3yb3, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl43_r3ybT :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl43_r3ybT = (x29_r3yb6, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl44_r3ybU :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl44_r3ybU = (x30_r3yb9, GHC.Types.True)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl45_r3ybV :: (Char, Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl45_r3ybV = (x31_r3ybc, GHC.Types.True)

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
w1_r3ybW
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
w1_r3ybW
  = \ (@ b1_X3nYA)
      (k1_X3nwa :: Char -> Text.ParserCombinators.ReadP.P b1_X3nYA) ->
      let {
        lvl116_s3w3E :: Text.ParserCombinators.ReadP.P b1_X3nYA
        [LclId]
        lvl116_s3w3E = k1_X3nwa x1_r3y9K } in
      case Text.ParserCombinators.ReadP.$wstring
             m4_r3y9J @ b1_X3nYA (\ _ [Occ=Dead] -> lvl116_s3w3E)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nYA ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
w_r3ybX
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
w_r3ybX
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w3w :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w3w = k1_X3nkV x_r3y9H } in
      case Text.ParserCombinators.ReadP.$wstring
             m2_r3y9G @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w3w)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 10, types: 16, coercions: 6, joins: 0/0}
lvl46_r3ybY
  :: forall b.
     (Char -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
lvl46_r3ybY
  = \ (@ b_s3ohX)
      (w2_s3ohY :: Char -> Text.ParserCombinators.ReadP.P b_s3ohX) ->
      case Text.ParserCombinators.ReadP.$w<++
             @ Char
             (w_r3ybX
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
                      :: (forall b.
                          (Char -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadP Char :: *)))
             (w1_r3ybW
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
                      :: (forall b.
                          (Char -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadP Char :: *)))
             @ b_s3ohX
             w2_s3ohY
      of
      { (# ww1_X3ou3 #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ohX ww1_X3ou3
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl47_r3ybZ
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl47_r3ybZ
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w3N :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w3N = k1_X3nkV x2_r3y9N } in
      case Text.ParserCombinators.ReadP.$wstring
             m6_r3y9M @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w3N)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl48_r3yc0
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl48_r3yc0
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w3V :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w3V = k1_X3nkV x3_r3y9Q } in
      case Text.ParserCombinators.ReadP.$wstring
             m8_r3y9P @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w3V)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl49_r3yc1
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl49_r3yc1
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w43 :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w43 = k1_X3nkV x4_r3y9T } in
      case Text.ParserCombinators.ReadP.$wstring
             m10_r3y9S @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w43)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl50_r3yc2
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl50_r3yc2
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w4b :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w4b = k1_X3nkV x5_r3y9W } in
      case Text.ParserCombinators.ReadP.$wstring
             m12_r3y9V @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w4b)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl51_r3yc3
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl51_r3yc3
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w4j :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w4j = k1_X3nkV x6_r3y9Z } in
      case Text.ParserCombinators.ReadP.$wstring
             m14_r3y9Y @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w4j)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl52_r3yc4
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl52_r3yc4
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w4r :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w4r = k1_X3nkV x7_r3ya2 } in
      case Text.ParserCombinators.ReadP.$wstring
             m16_r3ya1 @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w4r)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl53_r3yc5
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl53_r3yc5
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w4z :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w4z = k1_X3nkV x8_r3ya5 } in
      case Text.ParserCombinators.ReadP.$wstring
             m18_r3ya4 @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w4z)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl54_r3yc6
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl54_r3yc6
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w4H :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w4H = k1_X3nkV x9_r3ya8 } in
      case Text.ParserCombinators.ReadP.$wstring
             m20_r3ya7 @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w4H)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl55_r3yc7
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl55_r3yc7
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w4P :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w4P = k1_X3nkV x10_r3yab } in
      case Text.ParserCombinators.ReadP.$wstring
             m22_r3yaa @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w4P)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl56_r3yc8
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl56_r3yc8
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w4X :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w4X = k1_X3nkV x11_r3yae } in
      case Text.ParserCombinators.ReadP.$wstring
             m24_r3yad @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w4X)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl57_r3yc9
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl57_r3yc9
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w55 :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w55 = k1_X3nkV x12_r3yah } in
      case Text.ParserCombinators.ReadP.$wstring
             m26_r3yag @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w55)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl58_r3yca
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl58_r3yca
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w5d :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w5d = k1_X3nkV x13_r3yak } in
      case Text.ParserCombinators.ReadP.$wstring
             m28_r3yaj @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w5d)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl59_r3ycb
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl59_r3ycb
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w5l :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w5l = k1_X3nkV x14_r3yan } in
      case Text.ParserCombinators.ReadP.$wstring
             m30_r3yam @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w5l)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl60_r3ycc
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl60_r3ycc
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w5t :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w5t = k1_X3nkV x15_r3yaq } in
      case Text.ParserCombinators.ReadP.$wstring
             m32_r3yap @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w5t)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl61_r3ycd
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl61_r3ycd
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w5B :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w5B = k1_X3nkV x16_r3yat } in
      case Text.ParserCombinators.ReadP.$wstring
             m34_r3yas @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w5B)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl62_r3yce
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl62_r3yce
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w5J :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w5J = k1_X3nkV x17_r3yaw } in
      case Text.ParserCombinators.ReadP.$wstring
             m36_r3yav @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w5J)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl63_r3ycf
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl63_r3ycf
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w5R :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w5R = k1_X3nkV x18_r3yaz } in
      case Text.ParserCombinators.ReadP.$wstring
             m38_r3yay @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w5R)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl64_r3ycg
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl64_r3ycg
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w5Z :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w5Z = k1_X3nkV x19_r3yaC } in
      case Text.ParserCombinators.ReadP.$wstring
             m40_r3yaB @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w5Z)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl65_r3ych
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl65_r3ych
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w67 :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w67 = k1_X3nkV x20_r3yaF } in
      case Text.ParserCombinators.ReadP.$wstring
             m42_r3yaE @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w67)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl66_r3yci
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl66_r3yci
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w6f :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w6f = k1_X3nkV x21_r3yaI } in
      case Text.ParserCombinators.ReadP.$wstring
             m44_r3yaH @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w6f)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl67_r3ycj
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl67_r3ycj
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w6n :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w6n = k1_X3nkV x22_r3yaL } in
      case Text.ParserCombinators.ReadP.$wstring
             m46_r3yaK @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w6n)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl68_r3yck
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl68_r3yck
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w6v :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w6v = k1_X3nkV x23_r3yaO } in
      case Text.ParserCombinators.ReadP.$wstring
             m48_r3yaN @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w6v)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl69_r3ycl
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl69_r3ycl
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w6D :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w6D = k1_X3nkV x24_r3yaR } in
      case Text.ParserCombinators.ReadP.$wstring
             m50_r3yaQ @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w6D)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl70_r3ycm
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl70_r3ycm
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w6L :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w6L = k1_X3nkV x25_r3yaU } in
      case Text.ParserCombinators.ReadP.$wstring
             m52_r3yaT @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w6L)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl71_r3ycn
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl71_r3ycn
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w6T :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w6T = k1_X3nkV x26_r3yaX } in
      case Text.ParserCombinators.ReadP.$wstring
             m54_r3yaW @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w6T)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl72_r3yco
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl72_r3yco
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w71 :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w71 = k1_X3nkV x27_r3yb0 } in
      case Text.ParserCombinators.ReadP.$wstring
             m56_r3yaZ @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w71)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl73_r3ycp
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl73_r3ycp
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w79 :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w79 = k1_X3nkV x28_r3yb3 } in
      case Text.ParserCombinators.ReadP.$wstring
             m58_r3yb2 @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w79)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl74_r3ycq
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl74_r3ycq
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w7h :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w7h = k1_X3nkV x29_r3yb6 } in
      case Text.ParserCombinators.ReadP.$wstring
             m60_r3yb5 @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w7h)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl75_r3ycr
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl75_r3ycr
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w7p :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w7p = k1_X3nkV x30_r3yb9 } in
      case Text.ParserCombinators.ReadP.$wstring
             m62_r3yb8 @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w7p)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl76_r3ycs
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl76_r3ycs
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w7x :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w7x = k1_X3nkV x31_r3ybc } in
      case Text.ParserCombinators.ReadP.$wstring
             m64_r3ybb @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w7x)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl77_r3yct
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl77_r3yct
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w7F :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w7F = k1_X3nkV x32_r3ybf } in
      case Text.ParserCombinators.ReadP.$wstring
             m66_r3ybe @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w7F)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/1}
lvl78_r3ycu
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []]
lvl78_r3ycu
  = \ (@ b1_X3nNm)
      (k1_X3nkV :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNm) ->
      let {
        lvl116_s3w7N :: Text.ParserCombinators.ReadP.P b1_X3nNm
        [LclId]
        lvl116_s3w7N = k1_X3nkV x33_r3ybi } in
      case Text.ParserCombinators.ReadP.$wstring
             m68_r3ybh @ b1_X3nNm (\ _ [Occ=Dead] -> lvl116_s3w7N)
      of
      { (# ww1_s3oiK #) ->
      Text.ParserCombinators.ReadP.Look @ b1_X3nNm ww1_s3oiK
      }

-- RHS size: {terms: 3, types: 4, coercions: 3, joins: 0/0}
lvl79_r3ycv :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl79_r3ycv
  = GHC.Types.:
      @ (ReadP Char)
      (lvl78_r3ycu
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      (GHC.Types.[] @ (ReadP Char))

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl80_r3ycw :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl80_r3ycw
  = GHC.Types.:
      @ (ReadP Char)
      (lvl77_r3yct
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl79_r3ycv

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl81_r3ycx :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl81_r3ycx
  = GHC.Types.:
      @ (ReadP Char)
      (lvl76_r3ycs
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl80_r3ycw

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl82_r3ycy :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl82_r3ycy
  = GHC.Types.:
      @ (ReadP Char)
      (lvl75_r3ycr
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl81_r3ycx

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl83_r3ycz :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl83_r3ycz
  = GHC.Types.:
      @ (ReadP Char)
      (lvl74_r3ycq
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl82_r3ycy

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl84_r3ycA :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl84_r3ycA
  = GHC.Types.:
      @ (ReadP Char)
      (lvl73_r3ycp
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl83_r3ycz

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl85_r3ycB :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl85_r3ycB
  = GHC.Types.:
      @ (ReadP Char)
      (lvl72_r3yco
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl84_r3ycA

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl86_r3ycC :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl86_r3ycC
  = GHC.Types.:
      @ (ReadP Char)
      (lvl71_r3ycn
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl85_r3ycB

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl87_r3ycD :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl87_r3ycD
  = GHC.Types.:
      @ (ReadP Char)
      (lvl70_r3ycm
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl86_r3ycC

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl88_r3ycE :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl88_r3ycE
  = GHC.Types.:
      @ (ReadP Char)
      (lvl69_r3ycl
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl87_r3ycD

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl89_r3ycF :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl89_r3ycF
  = GHC.Types.:
      @ (ReadP Char)
      (lvl68_r3yck
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl88_r3ycE

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl90_r3ycG :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl90_r3ycG
  = GHC.Types.:
      @ (ReadP Char)
      (lvl67_r3ycj
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl89_r3ycF

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl91_r3ycH :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl91_r3ycH
  = GHC.Types.:
      @ (ReadP Char)
      (lvl66_r3yci
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl90_r3ycG

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl92_r3ycI :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl92_r3ycI
  = GHC.Types.:
      @ (ReadP Char)
      (lvl65_r3ych
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl91_r3ycH

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl93_r3ycJ :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl93_r3ycJ
  = GHC.Types.:
      @ (ReadP Char)
      (lvl64_r3ycg
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl92_r3ycI

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl94_r3ycK :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl94_r3ycK
  = GHC.Types.:
      @ (ReadP Char)
      (lvl63_r3ycf
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl93_r3ycJ

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl95_r3ycL :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl95_r3ycL
  = GHC.Types.:
      @ (ReadP Char)
      (lvl62_r3yce
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl94_r3ycK

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl96_r3ycM :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl96_r3ycM
  = GHC.Types.:
      @ (ReadP Char)
      (lvl61_r3ycd
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl95_r3ycL

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl97_r3ycN :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl97_r3ycN
  = GHC.Types.:
      @ (ReadP Char)
      (lvl60_r3ycc
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl96_r3ycM

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl98_r3ycO :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl98_r3ycO
  = GHC.Types.:
      @ (ReadP Char)
      (lvl59_r3ycb
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl97_r3ycN

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl99_r3ycP :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl99_r3ycP
  = GHC.Types.:
      @ (ReadP Char)
      (lvl58_r3yca
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl98_r3ycO

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl100_r3ycQ :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl100_r3ycQ
  = GHC.Types.:
      @ (ReadP Char)
      (lvl57_r3yc9
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl99_r3ycP

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl101_r3ycR :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl101_r3ycR
  = GHC.Types.:
      @ (ReadP Char)
      (lvl56_r3yc8
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl100_r3ycQ

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl102_r3ycS :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl102_r3ycS
  = GHC.Types.:
      @ (ReadP Char)
      (lvl55_r3yc7
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl101_r3ycR

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl103_r3ycT :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl103_r3ycT
  = GHC.Types.:
      @ (ReadP Char)
      (lvl54_r3yc6
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl102_r3ycS

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl104_r3ycU :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl104_r3ycU
  = GHC.Types.:
      @ (ReadP Char)
      (lvl53_r3yc5
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl103_r3ycT

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl105_r3ycV :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl105_r3ycV
  = GHC.Types.:
      @ (ReadP Char)
      (lvl52_r3yc4
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl104_r3ycU

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl106_r3ycW :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl106_r3ycW
  = GHC.Types.:
      @ (ReadP Char)
      (lvl51_r3yc3
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl105_r3ycV

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl107_r3ycX :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl107_r3ycX
  = GHC.Types.:
      @ (ReadP Char)
      (lvl50_r3yc2
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl106_r3ycW

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl108_r3ycY :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl108_r3ycY
  = GHC.Types.:
      @ (ReadP Char)
      (lvl49_r3yc1
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl107_r3ycX

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl109_r3ycZ :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl109_r3ycZ
  = GHC.Types.:
      @ (ReadP Char)
      (lvl48_r3yc0
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl108_r3ycY

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl110_r3yd0 :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl110_r3yd0
  = GHC.Types.:
      @ (ReadP Char)
      (lvl47_r3ybZ
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl109_r3ycZ

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
lvl111_r3yd1 :: [ReadP Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl111_r3yd1
  = GHC.Types.:
      @ (ReadP Char)
      (lvl46_r3ybY
       `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
               :: (forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadP Char :: *)))
      lvl110_r3yd0

-- RHS size: {terms: 25, types: 15, coercions: 0, joins: 0/2}
lvl112_r3yd2
  :: forall b1.
     (Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>m1, Unf=OtherCon []]
lvl112_r3yd2
  = \ (@ b1_a3nIU)
      (k_a3ngs [OS=OneShot]
         :: Int -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
      let {
        lvl116_s3xKO :: Text.ParserCombinators.ReadP.P b1_a3nIU
        [LclId]
        lvl116_s3xKO = k_a3ngs a2_r3y9z } in
      let {
        lvl117_s3xKM :: Text.ParserCombinators.ReadP.P b1_a3nIU
        [LclId]
        lvl117_s3xKM = k_a3ngs a1_r3y9y } in
      Text.ParserCombinators.ReadP.Get
        @ b1_a3nIU
        (\ (a3_a3ngt :: Char) ->
           case a3_a3ngt of { C# ds_d3vv6 ->
           case ds_d3vv6 of {
             __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_a3nIU;
             'O'# -> lvl117_s3xKM;
             'X'# -> lvl116_s3xKO;
             'o'# -> lvl117_s3xKM;
             'x'# -> lvl116_s3xKO
           }
           })

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
lvl113_r3yd3
  :: forall b.
     (Int -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []]
lvl113_r3yd3
  = \ (@ b_a3nJT)
      (k_a3ngw :: Int -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw lvl6_r3y9C

-- RHS size: {terms: 288, types: 145, coercions: 8, joins: 0/40}
Text.Read.Lex.lexChar2
  :: forall b1.
     ((Char, Bool) -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []]
Text.Read.Lex.lexChar2
  = \ (@ b1_X3nNY)
      (k_X3nlx [OS=OneShot]
         :: (Char, Bool) -> Text.ParserCombinators.ReadP.P b1_X3nNY) ->
      let {
        lvl116_s3xKE :: Text.ParserCombinators.ReadP.P b1_X3nNY
        [LclId]
        lvl116_s3xKE = k_X3nlx lvl18_r3ybu } in
      let {
        lvl117_s3xKy :: Text.ParserCombinators.ReadP.P b1_X3nNY
        [LclId]
        lvl117_s3xKy = k_X3nlx lvl16_r3ybs } in
      let {
        lvl118_s3xKK :: Text.ParserCombinators.ReadP.P b1_X3nNY
        [LclId]
        lvl118_s3xKK = k_X3nlx lvl20_r3ybw } in
      let {
        lvl119_s3xKB :: Text.ParserCombinators.ReadP.P b1_X3nNY
        [LclId]
        lvl119_s3xKB = k_X3nlx lvl17_r3ybt } in
      let {
        lvl120_s3xKH :: Text.ParserCombinators.ReadP.P b1_X3nNY
        [LclId]
        lvl120_s3xKH = k_X3nlx lvl19_r3ybv } in
      let {
        lvl121_s3xKv :: Text.ParserCombinators.ReadP.P b1_X3nNY
        [LclId]
        lvl121_s3xKv = k_X3nlx lvl15_r3ybr } in
      let {
        lvl122_s3xKs :: Text.ParserCombinators.ReadP.P b1_X3nNY
        [LclId]
        lvl122_s3xKs = k_X3nlx lvl14_r3ybq } in
      let {
        lvl123_s3xKp :: Text.ParserCombinators.ReadP.P b1_X3nNY
        [LclId]
        lvl123_s3xKp = k_X3nlx lvl13_r3ybp } in
      let {
        lvl124_s3xKm :: Text.ParserCombinators.ReadP.P b1_X3nNY
        [LclId]
        lvl124_s3xKm = k_X3nlx lvl11_r3ybn } in
      let {
        lvl125_s3xKj :: Text.ParserCombinators.ReadP.P b1_X3nNY
        [LclId]
        lvl125_s3xKj = k_X3nlx lvl9_r3ybl } in
      Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
        @ b1_X3nNY
        (Text.ParserCombinators.ReadP.Get
           @ b1_X3nNY
           (\ (a3_X3nql :: Char) ->
              case a3_X3nql of { C# ds_d3vzs ->
              case ds_d3vzs of {
                __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_X3nNY;
                '"'# -> lvl125_s3xKj;
                '\''# -> lvl124_s3xKm;
                '\\'# -> lvl123_s3xKp;
                'a'# -> lvl122_s3xKs;
                'b'# -> lvl121_s3xKv;
                'f'# -> lvl117_s3xKy;
                'n'# -> lvl119_s3xKB;
                'r'# -> lvl116_s3xKE;
                't'# -> lvl120_s3xKH;
                'v'# -> lvl118_s3xKK
              }
              }))
        (case Text.ParserCombinators.ReadP.$w<++
                @ Int
                (lvl112_r3yd2
                 `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Int>_R)
                         :: (forall b.
                             (Int -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                            ~R# (ReadP Int :: *)))
                (lvl113_r3yd3
                 `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Int>_R)
                         :: (forall b.
                             (Int -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                            ~R# (ReadP Int :: *)))
                @ b1_X3nNY
                (\ (a3_X3nlq :: Int) ->
                   let {
                     lvl126_s3w8H :: Integer
                     [LclId]
                     lvl126_s3w8H
                       = case a3_X3nlq of { I# i_i2KYH ->
                         integer-simple-0.1.1.1:GHC.Integer.Type.smallInteger i_i2KYH
                         } } in
                   case $wlexDigits_r3y9x
                          a3_X3nlq
                          @ b1_X3nNY
                          (\ (a4_X3nls :: Digits) ->
                             let {
                               a5_s3vWc [Dmd=<S,U>] :: Integer
                               [LclId]
                               a5_s3vWc = valInteger lvl126_s3w8H a4_X3nls } in
                             case integer-simple-0.1.1.1:GHC.Integer.Type.leInteger#
                                    a5_s3vWc lvl7_r3ybj
                             of {
                               __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_X3nNY;
                               1# ->
                                 k_X3nlx
                                   (case integer-simple-0.1.1.1:GHC.Integer.Type.integerToInt
                                           a5_s3vWc
                                    of wild1_i1AOp
                                    { __DEFAULT ->
                                    case leWord# (int2Word# wild1_i1AOp) 1114111## of {
                                      __DEFAULT -> GHC.Char.$wlvl wild1_i1AOp;
                                      1# -> GHC.Types.C# (chr# wild1_i1AOp)
                                    }
                                    },
                                    GHC.Types.True)
                             })
                   of
                   { (# ww1_s3xld #) ->
                   Text.ParserCombinators.ReadP.Look @ b1_X3nNY ww1_s3xld
                   })
         of
         { (# ww1_s3oiI #) ->
         Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
           @ b1_X3nNY
           (Text.ParserCombinators.ReadP.Look @ b1_X3nNY ww1_s3oiI)
           (let {
              lvl126_s3xMs :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl126_s3xMs = k_X3nlx lvl45_r3ybV } in
            let {
              lvl127_s3xMp :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl127_s3xMp = k_X3nlx lvl44_r3ybU } in
            let {
              lvl128_s3xMm :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl128_s3xMm = k_X3nlx lvl43_r3ybT } in
            let {
              lvl129_s3xMj :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl129_s3xMj = k_X3nlx lvl42_r3ybS } in
            let {
              lvl130_s3xMg :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl130_s3xMg = k_X3nlx lvl41_r3ybR } in
            let {
              lvl131_s3xMd :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl131_s3xMd = k_X3nlx lvl40_r3ybQ } in
            let {
              lvl132_s3xMa :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl132_s3xMa = k_X3nlx lvl39_r3ybP } in
            let {
              lvl133_s3xM7 :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl133_s3xM7 = k_X3nlx lvl38_r3ybO } in
            let {
              lvl134_s3xM4 :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl134_s3xM4 = k_X3nlx lvl37_r3ybN } in
            let {
              lvl135_s3xM1 :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl135_s3xM1 = k_X3nlx lvl36_r3ybM } in
            let {
              lvl136_s3xLY :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl136_s3xLY = k_X3nlx lvl35_r3ybL } in
            let {
              lvl137_s3xLV :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl137_s3xLV = k_X3nlx lvl34_r3ybK } in
            let {
              lvl138_s3xLS :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl138_s3xLS = k_X3nlx lvl33_r3ybJ } in
            let {
              lvl139_s3xLP :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl139_s3xLP = k_X3nlx lvl32_r3ybI } in
            let {
              lvl140_s3xLM :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl140_s3xLM = k_X3nlx lvl31_r3ybH } in
            let {
              lvl141_s3xLJ :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl141_s3xLJ = k_X3nlx lvl30_r3ybG } in
            let {
              lvl142_s3xLG :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl142_s3xLG = k_X3nlx lvl29_r3ybF } in
            let {
              lvl143_s3xLD :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl143_s3xLD = k_X3nlx lvl28_r3ybE } in
            let {
              lvl144_s3xLf :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl144_s3xLf = k_X3nlx lvl27_r3ybD } in
            let {
              lvl145_s3xLc :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl145_s3xLc = k_X3nlx lvl26_r3ybC } in
            let {
              lvl146_s3xL9 :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl146_s3xL9 = k_X3nlx lvl25_r3ybB } in
            let {
              lvl147_s3xL6 :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl147_s3xL6 = k_X3nlx lvl24_r3ybA } in
            let {
              lvl148_s3xL3 :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl148_s3xL3 = k_X3nlx lvl23_r3ybz } in
            let {
              lvl149_s3xL0 :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl149_s3xL0 = k_X3nlx lvl22_r3yby } in
            let {
              lvl150_s3xKX :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId]
              lvl150_s3xKX = k_X3nlx lvl21_r3ybx } in
            let {
              $wlvl1_s3xjO [InlPrag=NOUSERINLINE[0], Dmd=<L,C(U)>]
                :: Char# -> Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
              $wlvl1_s3xjO
                = \ (ww2_s3xjM :: Char#) ->
                    case ww2_s3xjM of {
                      __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_X3nNY;
                      '@'# -> lvl150_s3xKX;
                      'A'# -> lvl149_s3xL0;
                      'B'# -> lvl148_s3xL3;
                      'C'# -> lvl147_s3xL6;
                      'D'# -> lvl146_s3xL9;
                      'E'# -> lvl145_s3xLc;
                      'F'# -> lvl144_s3xLf;
                      'G'# -> lvl122_s3xKs;
                      'H'# -> lvl121_s3xKv;
                      'I'# -> lvl120_s3xKH;
                      'J'# -> lvl119_s3xKB;
                      'K'# -> lvl118_s3xKK;
                      'L'# -> lvl117_s3xKy;
                      'M'# -> lvl116_s3xKE;
                      'N'# -> lvl143_s3xLD;
                      'O'# -> lvl142_s3xLG;
                      'P'# -> lvl141_s3xLJ;
                      'Q'# -> lvl140_s3xLM;
                      'R'# -> lvl139_s3xLP;
                      'S'# -> lvl138_s3xLS;
                      'T'# -> lvl137_s3xLV;
                      'U'# -> lvl136_s3xLY;
                      'V'# -> lvl135_s3xM1;
                      'W'# -> lvl134_s3xM4;
                      'X'# -> lvl133_s3xM7;
                      'Y'# -> lvl132_s3xMa;
                      'Z'# -> lvl131_s3xMd;
                      '['# -> lvl130_s3xMg;
                      '\\'# -> lvl129_s3xMj;
                      ']'# -> lvl128_s3xMm;
                      '^'# -> lvl127_s3xMp;
                      '_'# -> lvl126_s3xMs
                    } } in
            let {
              lvl151_s3weg [InlPrag=NOUSERINLINE[0]]
                :: Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId,
               Arity=1,
               Str=<S(S),1*U(1*U)>,
               Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                       WorkFree=True, Expandable=True,
                       Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                       Tmpl= \ (w2_s3xjJ [Occ=Once!] :: Char) ->
                               case w2_s3xjJ of { C# ww3_s3xjM [Occ=Once] ->
                               $wlvl1_s3xjO ww3_s3xjM
                               }}]
              lvl151_s3weg
                = \ (w2_s3xjJ :: Char) ->
                    case w2_s3xjJ of { C# ww3_s3xjM -> $wlvl1_s3xjO ww3_s3xjM } } in
            let {
              lvl152_s3w9N :: Text.ParserCombinators.ReadP.P b1_X3nNY
              [LclId, Unf=OtherCon []]
              lvl152_s3w9N
                = Text.ParserCombinators.ReadP.Get @ b1_X3nNY lvl151_s3weg } in
            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              @ b1_X3nNY
              (Text.ParserCombinators.ReadP.Get
                 @ b1_X3nNY
                 (\ (a_X3nlq :: Char) ->
                    case a_X3nlq of { C# y_a5il ->
                    case y_a5il of {
                      __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_X3nNY;
                      '^'# -> lvl152_s3w9N
                    }
                    }))
              (((choice @ Char lvl111_r3yd1)
                `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R
                        :: (ReadP Char :: *)
                           ~R# (forall b.
                                (Char -> Text.ParserCombinators.ReadP.P b)
                                -> Text.ParserCombinators.ReadP.P b :: *)))
                 @ b1_X3nNY
                 (\ (a3_X3nlA :: Char) -> k_X3nlx (a3_X3nlA, GHC.Types.True))))
         })

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.lexChar4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Read.Lex.lexChar4 = "\\&"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Read.Lex.lexChar3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Read.Lex.lexChar3 = unpackCString# Text.Read.Lex.lexChar4

Rec {
-- RHS size: {terms: 13, types: 19, coercions: 0, joins: 0/1}
Text.Read.Lex.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> (# String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId,
 Arity=1,
 Str=<L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 90 0}]
Text.Read.Lex.$wlvl
  = \ (@ b1_s3xk1)
      (w2_s3xk2 :: () -> Text.ParserCombinators.ReadP.P b1_s3xk1) ->
      let {
        lvl116_s3w9W :: Text.ParserCombinators.ReadP.P b1_s3xk1
        [LclId]
        lvl116_s3w9W
          = case Text.Read.Lex.$wconsumeEmpties @ b1_s3xk1 w2_s3xk2 of
            { (# ww1_s3xlj #) ->
            Text.ParserCombinators.ReadP.Look @ b1_s3xk1 ww1_s3xlj
            } } in
      Text.ParserCombinators.ReadP.$wstring
        Text.Read.Lex.lexChar3 @ b1_s3xk1 (\ _ [Occ=Dead] -> lvl116_s3w9W)

-- RHS size: {terms: 41, types: 40, coercions: 0, joins: 0/2}
Text.Read.Lex.$wconsumeEmpties [InlPrag=NOUSERINLINE[0],
                                Occ=LoopBreaker]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> (# String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []]
Text.Read.Lex.$wconsumeEmpties
  = \ (@ b1_s3xjV)
      (w2_s3xjW :: () -> Text.ParserCombinators.ReadP.P b1_s3xjV) ->
      let {
        lvl116_s3xNF :: Text.ParserCombinators.ReadP.P b1_s3xjV
        [LclId]
        lvl116_s3xNF
          = case Text.Read.Lex.$wlvl @ b1_s3xjV w2_s3xjW of
            { (# ww1_s3xll #) ->
            Text.ParserCombinators.ReadP.Look @ b1_s3xjV ww1_s3xll
            } } in
      let {
        lvl117_s3xNB :: Text.ParserCombinators.ReadP.P b1_s3xjV
        [LclId]
        lvl117_s3xNB = w2_s3xjW GHC.Tuple.() } in
      (# \ (a3_a3ngt :: String) ->
           case a3_a3ngt of {
             [] -> lvl117_s3xNB;
             : ds_d3vAl ds1_d3vAm ->
               case ds_d3vAl of { C# ds2_d3vAn ->
               case ds2_d3vAn of {
                 __DEFAULT -> lvl117_s3xNB;
                 '\\'# ->
                   case ds1_d3vAm of {
                     [] -> lvl117_s3xNB;
                     : ds4_d3vAo ds5_d3vAp ->
                       case ds4_d3vAo of { C# ds6_d3vAq ->
                       case ds6_d3vAq of {
                         __DEFAULT -> lvl117_s3xNB;
                         '&'# -> lvl116_s3xNF
                       }
                       }
                   }
               }
               }
           } #)
end Rec }

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
Text.Read.Lex.lexChar5 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=1,
 Str=<L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ b1_s3xjV)
                 (w2_s3xjW [Occ=Once]
                    :: () -> Text.ParserCombinators.ReadP.P b1_s3xjV) ->
                 case Text.Read.Lex.$wconsumeEmpties @ b1_s3xjV w2_s3xjW of
                 { (# ww1_s3xlj [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b1_s3xjV ww1_s3xlj
                 }}]
Text.Read.Lex.lexChar5
  = \ (@ b1_s3xjV)
      (w2_s3xjW :: () -> Text.ParserCombinators.ReadP.P b1_s3xjV) ->
      case Text.Read.Lex.$wconsumeEmpties @ b1_s3xjV w2_s3xjW of
      { (# ww1_s3xlj #) ->
      Text.ParserCombinators.ReadP.Look @ b1_s3xjV ww1_s3xlj
      }

-- RHS size: {terms: 100, types: 95, coercions: 0, joins: 0/6}
Text.Read.Lex.$wlexChar [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> (# Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId,
 Arity=1,
 Str=<L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60] 520 20}]
Text.Read.Lex.$wlexChar
  = \ (@ b1_s3xk7)
      (w2_s3xk8 :: Char -> Text.ParserCombinators.ReadP.P b1_s3xk7) ->
      let {
        lvl116_s3xNI :: Text.ParserCombinators.ReadP.P b1_s3xk7
        [LclId]
        lvl116_s3xNI
          = let {
              k_X3nlp [Dmd=<L,C(U)>]
                :: (Char, Bool) -> Text.ParserCombinators.ReadP.P b1_s3xk7
              [LclId,
               Arity=1,
               Str=<S,1*U(U,A)>,
               Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                       WorkFree=True, Expandable=True,
                       Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                       Tmpl= \ (a3_a3ngt [Occ=Once!] :: (Char, Bool)) ->
                               case a3_a3ngt of { (c_a3uMs [Occ=Once], _ [Occ=Dead]) ->
                               let {
                                 lvl117_s3w9Y [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                 [LclId]
                                 lvl117_s3w9Y = w2_s3xk8 c_a3uMs } in
                               Text.Read.Lex.lexChar5 @ b1_s3xk7 (\ _ [Occ=Dead] -> lvl117_s3w9Y)
                               }}]
              k_X3nlp
                = \ (a3_a3ngt :: (Char, Bool)) ->
                    case a3_a3ngt of { (c_a3uMs, ds_d3vA5) ->
                    let {
                      lvl117_s3w9Y :: Text.ParserCombinators.ReadP.P b1_s3xk7
                      [LclId]
                      lvl117_s3w9Y = w2_s3xk8 c_a3uMs } in
                    let {
                      lvl118_s3xNF :: Text.ParserCombinators.ReadP.P b1_s3xk7
                      [LclId]
                      lvl118_s3xNF
                        = case Text.Read.Lex.$wlvl
                                 @ b1_s3xk7 (\ _ [Occ=Dead] -> lvl117_s3w9Y)
                          of
                          { (# ww1_s3xll #) ->
                          Text.ParserCombinators.ReadP.Look @ b1_s3xk7 ww1_s3xll
                          } } in
                    Text.ParserCombinators.ReadP.Look
                      @ b1_s3xk7
                      (\ (a4_X3nul :: String) ->
                         case a4_X3nul of {
                           [] -> lvl117_s3w9Y;
                           : ds1_d3vAl ds2_d3vAm ->
                             case ds1_d3vAl of { C# ds3_d3vAn ->
                             case ds3_d3vAn of {
                               __DEFAULT -> lvl117_s3w9Y;
                               '\\'# ->
                                 case ds2_d3vAm of {
                                   [] -> lvl117_s3w9Y;
                                   : ds5_d3vAo ds6_d3vAp ->
                                     case ds5_d3vAo of { C# ds7_d3vAq ->
                                     case ds7_d3vAq of {
                                       __DEFAULT -> lvl117_s3w9Y;
                                       '&'# -> lvl118_s3xNF
                                     }
                                     }
                                 }
                             }
                             }
                         })
                    } } in
            Text.Read.Lex.lexChar2 @ b1_s3xk7 k_X3nlp } in
      (# \ (a3_a3ngt :: Char) ->
           case a3_a3ngt of wild_a5if { C# x34_a5ih ->
           case x34_a5ih of {
             __DEFAULT ->
               let {
                 lvl117_s3w9Y :: Text.ParserCombinators.ReadP.P b1_s3xk7
                 [LclId]
                 lvl117_s3w9Y = w2_s3xk8 wild_a5if } in
               let {
                 lvl118_s3xNF :: Text.ParserCombinators.ReadP.P b1_s3xk7
                 [LclId]
                 lvl118_s3xNF
                   = case Text.Read.Lex.$wlvl
                            @ b1_s3xk7 (\ _ [Occ=Dead] -> lvl117_s3w9Y)
                     of
                     { (# ww1_s3xll #) ->
                     Text.ParserCombinators.ReadP.Look @ b1_s3xk7 ww1_s3xll
                     } } in
               Text.ParserCombinators.ReadP.Look
                 @ b1_s3xk7
                 (\ (a4_X3nun :: String) ->
                    case a4_X3nun of {
                      [] -> lvl117_s3w9Y;
                      : ds_d3vAl ds1_d3vAm ->
                        case ds_d3vAl of { C# ds2_d3vAn ->
                        case ds2_d3vAn of {
                          __DEFAULT -> lvl117_s3w9Y;
                          '\\'# ->
                            case ds1_d3vAm of {
                              [] -> lvl117_s3w9Y;
                              : ds4_d3vAo ds5_d3vAp ->
                                case ds4_d3vAo of { C# ds6_d3vAq ->
                                case ds6_d3vAq of {
                                  __DEFAULT -> lvl117_s3w9Y;
                                  '&'# -> lvl118_s3xNF
                                }
                                }
                            }
                        }
                        }
                    });
             '\\'# -> lvl116_s3xNI
           }
           } #)

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
Text.Read.Lex.lexChar1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=1,
 Str=<L,C(U)>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ b1_s3xk7)
                 (w2_s3xk8 [Occ=Once]
                    :: Char -> Text.ParserCombinators.ReadP.P b1_s3xk7) ->
                 case Text.Read.Lex.$wlexChar @ b1_s3xk7 w2_s3xk8 of
                 { (# ww1_s3xln [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Get @ b1_s3xk7 ww1_s3xln
                 }}]
Text.Read.Lex.lexChar1
  = \ (@ b1_s3xk7)
      (w2_s3xk8 :: Char -> Text.ParserCombinators.ReadP.P b1_s3xk7) ->
      case Text.Read.Lex.$wlexChar @ b1_s3xk7 w2_s3xk8 of
      { (# ww1_s3xln #) ->
      Text.ParserCombinators.ReadP.Get @ b1_s3xk7 ww1_s3xln
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
lexChar :: ReadP Char
[GblId,
 Arity=1,
 Str=<L,C(U)>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.Read.Lex.lexChar1
               `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
                       :: (forall b.
                           (Char -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (ReadP Char :: *))}]
lexChar
  = Text.Read.Lex.lexChar1
    `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Char>_R)
            :: (forall b.
                (Char -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (ReadP Char :: *))

Rec {
-- RHS size: {terms: 119, types: 84, coercions: 0, joins: 0/10}
lexStrItem_r3yd4
  :: forall b.
     ((Char, Bool) -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []]
lexStrItem_r3yd4
  = \ (@ b_X3nBl)
      (k_X3nnJ
         :: (Char, Bool) -> Text.ParserCombinators.ReadP.P b_X3nBl) ->
      let {
        lvl116_s3w9Z :: Text.ParserCombinators.ReadP.P b_X3nBl
        [LclId]
        lvl116_s3w9Z = lexStrItem_r3yd4 @ b_X3nBl k_X3nnJ } in
      let {
        lvl117_s3xNK :: Char -> Text.ParserCombinators.ReadP.P b_X3nBl
        [LclId,
         Arity=1,
         Str=<S(S),1*U(1*U)>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                 Tmpl= \ (a_X3nmn [Occ=Once!] :: Char) ->
                         case a_X3nmn of { C# y_X5oj [Occ=Once!] ->
                         case y_X5oj of {
                           __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_X3nBl;
                           '\\'# -> lvl116_s3w9Z
                         }
                         }}]
        lvl117_s3xNK
          = \ (a_X3nmn :: Char) ->
              case a_X3nmn of { C# y_X5oj ->
              case y_X5oj of {
                __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_X3nBl;
                '\\'# -> lvl116_s3w9Z
              }
              } } in
      let {
        lvl118_s3xNM :: Text.ParserCombinators.ReadP.P b_X3nBl
        [LclId, Unf=OtherCon []]
        lvl118_s3xNM
          = Text.ParserCombinators.ReadP.Get @ b_X3nBl lvl117_s3xNK } in
      let {
        k1_s3xNO [Dmd=<L,C(U)>]
          :: () -> Text.ParserCombinators.ReadP.P b_X3nBl
        [LclId,
         Arity=1,
         Str=<L,A>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                 Tmpl= \ _ [Occ=Dead] -> lvl118_s3xNM}]
        k1_s3xNO = \ _ [Occ=Dead] -> lvl118_s3xNM } in
      let {
        lvl119_s3xNP :: String -> Text.ParserCombinators.ReadP.P b_X3nBl
        [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        lvl119_s3xNP
          = \ (a_X3nmv :: String) ->
              Text.ParserCombinators.ReadP.skipSpaces2
                a_X3nmv @ b_X3nBl k1_s3xNO } in
      let {
        $wlvl1_s3xki [InlPrag=NOUSERINLINE[0], Dmd=<L,C(U)>]
          :: Char# -> Text.ParserCombinators.ReadP.P b_X3nBl
        [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        $wlvl1_s3xki
          = \ (ww_s3xkg :: Char#) ->
              case ww_s3xkg of ds_X3vCe {
                __DEFAULT ->
                  let {
                    x34_aRFM [Dmd=<S,U>] :: Word#
                    [LclId]
                    x34_aRFM = int2Word# (ord# ds_X3vCe) } in
                  case leWord# x34_aRFM 887## of {
                    __DEFAULT ->
                      case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_d2hP4
                             (ord# ds_X3vCe) realWorld#
                      of
                      { (# ds1_d2hP3, ds2_d2hP2 #) ->
                      case ds2_d2hP2 of {
                        __DEFAULT ->
                          Text.ParserCombinators.ReadP.Look @ b_X3nBl lvl119_s3xNP;
                        0# -> Text.ParserCombinators.ReadP.Fail @ b_X3nBl
                      }
                      };
                    1# ->
                      case x34_aRFM of wild_X7V {
                        __DEFAULT ->
                          case leWord# (minusWord# wild_X7V 9##) 4## of {
                            __DEFAULT ->
                              case wild_X7V of {
                                __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_X3nBl;
                                160## -> Text.ParserCombinators.ReadP.Look @ b_X3nBl lvl119_s3xNP
                              };
                            1# -> Text.ParserCombinators.ReadP.Look @ b_X3nBl lvl119_s3xNP
                          };
                        32## -> Text.ParserCombinators.ReadP.Look @ b_X3nBl lvl119_s3xNP
                      }
                  };
                '&'# -> lvl116_s3w9Z
              } } in
      let {
        lvl120_s3weI [InlPrag=NOUSERINLINE[0]]
          :: Char -> Text.ParserCombinators.ReadP.P b_X3nBl
        [LclId,
         Arity=1,
         Str=<S(S),1*U(1*U)>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                 Tmpl= \ (w2_s3xkd [Occ=Once!] :: Char) ->
                         case w2_s3xkd of { C# ww1_s3xkg [Occ=Once] ->
                         $wlvl1_s3xki ww1_s3xkg
                         }}]
        lvl120_s3weI
          = \ (w2_s3xkd :: Char) ->
              case w2_s3xkd of { C# ww1_s3xkg -> $wlvl1_s3xki ww1_s3xkg } } in
      let {
        lvl121_s3wa4 :: Text.ParserCombinators.ReadP.P b_X3nBl
        [LclId, Unf=OtherCon []]
        lvl121_s3wa4
          = Text.ParserCombinators.ReadP.Get @ b_X3nBl lvl120_s3weI } in
      let {
        lvl122_s3xNQ :: Text.ParserCombinators.ReadP.P b_X3nBl
        [LclId]
        lvl122_s3xNQ = Text.Read.Lex.lexChar2 @ b_X3nBl k_X3nnJ } in
      Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
        @ b_X3nBl
        (Text.ParserCombinators.ReadP.Get
           @ b_X3nBl
           (\ (a_a3ngt :: Char) ->
              case a_a3ngt of { C# y_a5il ->
              case y_a5il of {
                __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_X3nBl;
                '\\'# -> lvl121_s3wa4
              }
              }))
        (Text.ParserCombinators.ReadP.Get
           @ b_X3nBl
           (\ (a3_a3ngt :: Char) ->
              case a3_a3ngt of wild_a5if { C# x34_a5ih ->
              case x34_a5ih of {
                __DEFAULT -> k_X3nnJ (wild_a5if, GHC.Types.False);
                '\\'# -> lvl122_s3xNQ
              }
              }))
end Rec }

Rec {
-- RHS size: {terms: 35, types: 30, coercions: 0, joins: 1/2}
body_r3yd5
  :: ([Char] -> String)
     -> forall b1.
        (Lexeme -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,C(U)><L,C(U)>, Unf=OtherCon []]
body_r3yd5
  = \ (f_a3uMH :: [Char] -> String)
      (@ b1_X3nOE)
      (k_X3nmd :: Lexeme -> Text.ParserCombinators.ReadP.P b1_X3nOE) ->
      let {
        lvl116_s3xNR :: Text.ParserCombinators.ReadP.P b1_X3nOE
        [LclId]
        lvl116_s3xNR
          = k_X3nmd
              (Text.Read.Lex.String (f_a3uMH (GHC.Types.[] @ Char))) } in
      lexStrItem_r3yd4
        @ b1_X3nOE
        (\ (a3_a3ngt :: (Char, Bool)) ->
           case a3_a3ngt of { (c_a3uMI, esc_a3uMJ) ->
           case c_a3uMI of wild1_a3vE2 { C# x34_a3vE4 ->
           join {
             $j_s3weM [Dmd=<L,1*U>] :: Text.ParserCombinators.ReadP.P b1_X3nOE
             [LclId[JoinId(0)]]
             $j_s3weM
               = body_r3yd5
                   (\ (x35_i1Mhr :: [Char]) ->
                      f_a3uMH (GHC.Types.: @ Char wild1_a3vE2 x35_i1Mhr))
                   @ b1_X3nOE
                   k_X3nmd } in
           case x34_a3vE4 of {
             __DEFAULT -> jump $j_s3weM;
             '"'# ->
               case esc_a3uMJ of {
                 False -> lvl116_s3xNR;
                 True -> jump $j_s3weM
               }
           }
           }
           })
end Rec }

-- RHS size: {terms: 89, types: 66, coercions: 0, joins: 0/2}
lexExp_r3yd6
  :: forall b1.
     (Maybe Integer -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []]
lexExp_r3yd6
  = \ (@ b1_X3nPk)
      (k_X3nmT
         :: Maybe Integer -> Text.ParserCombinators.ReadP.P b1_X3nPk) ->
      let {
        lvl116_s3waf :: Text.ParserCombinators.ReadP.P b1_X3nPk
        [LclId]
        lvl116_s3waf
          = let {
              k1_s3vVY [Dmd=<L,C(U)>]
                :: Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
              [LclId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []]
              k1_s3vVY
                = \ (a3_X3nlv :: Char) ->
                    case $wlexDigits_r3y9x
                           lvl6_r3y9C
                           @ b1_X3nPk
                           (\ (a4_X3nly :: Digits) ->
                              k_X3nmT
                                (GHC.Base.Just
                                   @ Integer
                                   (case a3_X3nlv of { C# x34_a5ih ->
                                    case x34_a5ih of {
                                      __DEFAULT -> valInteger Text.Read.Lex.numberToFixed1 a4_X3nly;
                                      '-'# ->
                                        integer-simple-0.1.1.1:GHC.Integer.Type.negateInteger
                                          (valInteger Text.Read.Lex.numberToFixed1 a4_X3nly)
                                    }
                                    })))
                    of
                    { (# ww1_s3xld #) ->
                    Text.ParserCombinators.ReadP.Look @ b1_X3nPk ww1_s3xld
                    } } in
            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              @ b1_X3nPk
              (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                 @ b1_X3nPk
                 (Text.ParserCombinators.ReadP.Get
                    @ b1_X3nPk
                    (\ (a_X3nlw :: Char) ->
                       case a_X3nlw of wild1_a5ij { C# y_a5il ->
                       case y_a5il of {
                         __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_X3nPk;
                         '-'# -> k1_s3vVY wild1_a5ij
                       }
                       }))
                 (Text.ParserCombinators.ReadP.Get
                    @ b1_X3nPk
                    (\ (a_X3nlw :: Char) ->
                       case a_X3nlw of wild1_a5ij { C# y_a5il ->
                       case y_a5il of {
                         __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_X3nPk;
                         '+'# -> k1_s3vVY wild1_a5ij
                       }
                       })))
              (case $wlexDigits_r3y9x
                      lvl6_r3y9C
                      @ b1_X3nPk
                      (\ (a3_X3nlw :: Digits) ->
                         k_X3nmT
                           (GHC.Base.Just
                              @ Integer (valInteger Text.Read.Lex.numberToFixed1 a3_X3nlw)))
               of
               { (# ww1_s3xld #) ->
               Text.ParserCombinators.ReadP.Look @ b1_X3nPk ww1_s3xld
               }) } in
      Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
        @ b1_X3nPk
        (Text.ParserCombinators.ReadP.Get
           @ b1_X3nPk
           (\ (a_a3ngt :: Char) ->
              case a_a3ngt of { C# y_a5il ->
              case y_a5il of {
                __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_X3nPk;
                'e'# -> lvl116_s3waf
              }
              }))
        (Text.ParserCombinators.ReadP.Get
           @ b1_X3nPk
           (\ (a_a3ngt :: Char) ->
              case a_a3ngt of { C# y_a5il ->
              case y_a5il of {
                __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_X3nPk;
                'E'# -> lvl116_s3waf
              }
              }))

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
lvl114_r3yd7
  :: forall b.
     (Maybe Digits -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []]
lvl114_r3yd7
  = \ (@ b_X3nOS)
      (k_X3nlw
         :: Maybe Digits -> Text.ParserCombinators.ReadP.P b_X3nOS) ->
      k_X3nlw (GHC.Base.Nothing @ Digits)

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
lvl115_r3yd8
  :: forall b.
     (Maybe Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []]
lvl115_r3yd8
  = \ (@ b_X3nOT)
      (k_X3nlx
         :: Maybe Integer -> Text.ParserCombinators.ReadP.P b_X3nOT) ->
      k_X3nlx (GHC.Base.Nothing @ Integer)

-- RHS size: {terms: 27, types: 35, coercions: 16, joins: 0/0}
$wlexDecNumber_r3yd9
  :: forall b1.
     (Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []]
$wlexDecNumber_r3yd9
  = \ (@ b1_s3xkr)
      (w2_s3xks :: Lexeme -> Text.ParserCombinators.ReadP.P b1_s3xkr) ->
      $wlexDigits_r3y9x
        lvl6_r3y9C
        @ b1_s3xkr
        (\ (a3_a3ngt :: Digits) ->
           case Text.ParserCombinators.ReadP.$w<++
                  @ (Maybe Digits)
                  (lexFrac_r3y9E
                   `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <Maybe Digits>_R)
                           :: (forall b.
                               (Maybe Digits -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                              ~R# (ReadP (Maybe Digits) :: *)))
                  (lvl114_r3yd7
                   `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <Maybe Digits>_R)
                           :: (forall b.
                               (Maybe Digits -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                              ~R# (ReadP (Maybe Digits) :: *)))
                  @ b1_s3xkr
                  (\ (a4_X3nn5 :: Maybe Digits) ->
                     case Text.ParserCombinators.ReadP.$w<++
                            @ (Maybe Integer)
                            (lexExp_r3yd6
                             `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Maybe Integer>_R)
                                     :: (forall b.
                                         (Maybe Integer -> Text.ParserCombinators.ReadP.P b)
                                         -> Text.ParserCombinators.ReadP.P b :: *)
                                        ~R# (ReadP (Maybe Integer) :: *)))
                            (lvl115_r3yd8
                             `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Maybe Integer>_R)
                                     :: (forall b.
                                         (Maybe Integer -> Text.ParserCombinators.ReadP.P b)
                                         -> Text.ParserCombinators.ReadP.P b :: *)
                                        ~R# (ReadP (Maybe Integer) :: *)))
                            @ b1_s3xkr
                            (\ (a5_X3nn8 :: Maybe Integer) ->
                               w2_s3xks
                                 (Text.Read.Lex.Number
                                    (Text.Read.Lex.MkDecimal a3_a3ngt a4_X3nn5 a5_X3nn8)))
                     of
                     { (# ww1_s3oiI #) ->
                     Text.ParserCombinators.ReadP.Look @ b1_s3xkr ww1_s3oiI
                     })
           of
           { (# ww1_s3oiI #) ->
           Text.ParserCombinators.ReadP.Look @ b1_s3xkr ww1_s3oiI
           })

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
lexDecNumber_r3yda
  :: forall b1.
     (Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []]
lexDecNumber_r3yda
  = \ (@ b1_s3xkr)
      (w2_s3xks :: Lexeme -> Text.ParserCombinators.ReadP.P b1_s3xkr) ->
      case $wlexDecNumber_r3yd9 @ b1_s3xkr w2_s3xks of
      { (# ww1_s3xlp #) ->
      Text.ParserCombinators.ReadP.Look @ b1_s3xkr ww1_s3xlp
      }

-- RHS size: {terms: 205, types: 155, coercions: 6, joins: 1/10}
Text.Read.Lex.expect2
  :: forall b.
     (Lexeme -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []]
Text.Read.Lex.expect2
  = \ (@ b_X3nCK)
      (k_X3np8 :: Lexeme -> Text.ParserCombinators.ReadP.P b_X3nCK) ->
      let {
        $wk_s3xkD [InlPrag=NOUSERINLINE[0], Dmd=<L,C(C1(U))>]
          :: Char -> Bool -> Text.ParserCombinators.ReadP.P b_X3nCK
        [LclId, Arity=2, Str=<L,U(U)><S,1*U>, Unf=OtherCon []]
        $wk_s3xkD
          = \ (ww_s3xkA :: Char) (ww1_s3xkB :: Bool) ->
              let {
                lvl116_s3wai :: Text.ParserCombinators.ReadP.P b_X3nCK
                [LclId]
                lvl116_s3wai = k_X3np8 (Text.Read.Lex.Char ww_s3xkA) } in
              case ww1_s3xkB of {
                False ->
                  case ww_s3xkA of { C# x34_a3vE4 ->
                  case x34_a3vE4 of {
                    __DEFAULT ->
                      Text.ParserCombinators.ReadP.Get
                        @ b_X3nCK
                        (\ (a_X3nlY :: Char) ->
                           case a_X3nlY of { C# y_X5nU ->
                           case y_X5nU of {
                             __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_X3nCK;
                             '\''# -> lvl116_s3wai
                           }
                           });
                    '\''# -> Text.ParserCombinators.ReadP.Fail @ b_X3nCK
                  }
                  };
                True ->
                  Text.ParserCombinators.ReadP.Get
                    @ b_X3nCK
                    (\ (a_X3nlY :: Char) ->
                       case a_X3nlY of { C# y_X5nU ->
                       case y_X5nU of {
                         __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_X3nCK;
                         '\''# -> lvl116_s3wai
                       }
                       })
              } } in
      let {
        k1_X3nlp [InlPrag=NOUSERINLINE[0], Dmd=<L,C(U)>]
          :: (Char, Bool) -> Text.ParserCombinators.ReadP.P b_X3nCK
        [LclId,
         Arity=1,
         Str=<S(LS),1*U(U(U),1*U)>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                 Tmpl= \ (w2_s3xkx [Occ=Once!] :: (Char, Bool)) ->
                         case w2_s3xkx of { (ww1_s3xkA [Occ=Once], ww2_s3xkB [Occ=Once]) ->
                         $wk_s3xkD ww1_s3xkA ww2_s3xkB
                         }}]
        k1_X3nlp
          = \ (w2_s3xkx :: (Char, Bool)) ->
              case w2_s3xkx of { (ww1_s3xkA, ww2_s3xkB) ->
              $wk_s3xkD ww1_s3xkA ww2_s3xkB
              } } in
      let {
        lvl116_s3xNS :: Text.ParserCombinators.ReadP.P b_X3nCK
        [LclId]
        lvl116_s3xNS = Text.Read.Lex.lexChar2 @ b_X3nCK k1_X3nlp } in
      let {
        lvl117_s3wf6 :: Char -> Text.ParserCombinators.ReadP.P b_X3nCK
        [LclId,
         Arity=1,
         Str=<S(S),1*U(U)>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                 Tmpl= \ (a3_a3ngt [Occ=Once!] :: Char) ->
                         case a3_a3ngt of wild_a5if { C# x34_a5ih [Occ=Once!] ->
                         case x34_a5ih of {
                           __DEFAULT -> k1_X3nlp (wild_a5if, GHC.Types.False);
                           '\\'# -> Text.Read.Lex.lexChar2 @ b_X3nCK k1_X3nlp
                         }
                         }}]
        lvl117_s3wf6
          = \ (a3_a3ngt :: Char) ->
              case a3_a3ngt of wild_a5if { C# x34_a5ih ->
              case x34_a5ih of {
                __DEFAULT ->
                  let {
                    lvl118_s3wai :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId]
                    lvl118_s3wai = k_X3np8 (Text.Read.Lex.Char wild_a5if) } in
                  Text.ParserCombinators.ReadP.Get
                    @ b_X3nCK
                    (\ (a_X3nlY :: Char) ->
                       case a_X3nlY of { C# y_X5nU ->
                       case y_X5nU of {
                         __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_X3nCK;
                         '\''# -> lvl118_s3wai
                       }
                       });
                '\''# -> Text.ParserCombinators.ReadP.Fail @ b_X3nCK;
                '\\'# -> lvl116_s3xNS
              }
              } } in
      let {
        lvl118_s3wam :: Text.ParserCombinators.ReadP.P b_X3nCK
        [LclId, Unf=OtherCon []]
        lvl118_s3wam
          = Text.ParserCombinators.ReadP.Get @ b_X3nCK lvl117_s3wf6 } in
      Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
        @ b_X3nCK
        (Text.ParserCombinators.ReadP.Get
           @ b_X3nCK
           (\ (a_a3ngt :: Char) ->
              case a_a3ngt of { C# y_a5il ->
              case y_a5il of {
                __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_X3nCK;
                '\''# -> lvl118_s3wam
              }
              }))
        (let {
           lvl119_s3wan :: Text.ParserCombinators.ReadP.P b_X3nCK
           [LclId]
           lvl119_s3wan = body_r3yd5 (id @ String) @ b_X3nCK k_X3np8 } in
         Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
           @ b_X3nCK
           (Text.ParserCombinators.ReadP.Get
              @ b_X3nCK
              (\ (a_a3ngt :: Char) ->
                 case a_a3ngt of { C# y_a5il ->
                 case y_a5il of {
                   __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_X3nCK;
                   '"'# -> lvl119_s3wan
                 }
                 }))
           (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              @ b_X3nCK
              (Text.ParserCombinators.ReadP.Get
                 @ b_X3nCK
                 (\ (a_a3ngt :: Char) ->
                    case elem
                           @ Char GHC.Classes.$fEqChar a_a3ngt Text.Read.Lex.isSymbolChar3
                    of {
                      False -> Text.ParserCombinators.ReadP.Fail @ b_X3nCK;
                      True ->
                        k_X3np8
                          (Text.Read.Lex.Punc
                             (GHC.Types.: @ Char a_a3ngt (GHC.Types.[] @ Char)))
                    }))
              (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                 @ b_X3nCK
                 (Text.ParserCombinators.ReadP.Get
                    @ b_X3nCK
                    (\ (a_a3ngt :: Char) ->
                       case isSymbolChar a_a3ngt of {
                         False -> Text.ParserCombinators.ReadP.Fail @ b_X3nCK;
                         True ->
                           case Text.ParserCombinators.ReadP.$wmunch
                                  isSymbolChar
                                  @ b_X3nCK
                                  (\ (a3_X3nla :: String) ->
                                     let {
                                       a4_X3nrF :: String
                                       [LclId, Unf=OtherCon []]
                                       a4_X3nrF = GHC.Types.: @ Char a_a3ngt a3_X3nla } in
                                     case elem
                                            @ String
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            a4_X3nrF
                                            reserved_ops29_r3y9q
                                     of {
                                       False -> k_X3np8 (Text.Read.Lex.Symbol a4_X3nrF);
                                       True -> k_X3np8 (Text.Read.Lex.Punc a4_X3nrF)
                                     })
                           of
                           { (# ww1_s3oiM #) ->
                           Text.ParserCombinators.ReadP.Look @ b_X3nCK ww1_s3oiM
                           }
                       }))
                 (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                    @ b_X3nCK
                    (Text.ParserCombinators.ReadP.Get
                       @ b_X3nCK
                       (\ (a_a3ngt :: Char) ->
                          case a_a3ngt of wild_i1Mwz { C# c#_i1MwB ->
                          case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_d2hPp
                                 (ord# c#_i1MwB) realWorld#
                          of
                          { (# ds_d2hPo, ds1_d2hPn #) ->
                          join {
                            $j_s3wff [Dmd=<L,1*U>] :: Text.ParserCombinators.ReadP.P b_X3nCK
                            [LclId[JoinId(0)]]
                            $j_s3wff
                              = case Text.ParserCombinators.ReadP.$wmunch
                                       isIdfChar_r3y8W
                                       @ b_X3nCK
                                       (\ (a3_X3nju :: String) ->
                                          k_X3np8
                                            (Text.Read.Lex.Ident
                                               (GHC.Types.: @ Char wild_i1Mwz a3_X3nju)))
                                of
                                { (# ww1_s3oiM #) ->
                                Text.ParserCombinators.ReadP.Look @ b_X3nCK ww1_s3oiM
                                } } in
                          case ds1_d2hPn of {
                            __DEFAULT -> jump $j_s3wff;
                            0# ->
                              case c#_i1MwB of {
                                __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_X3nCK;
                                '_'# -> jump $j_s3wff
                              }
                          }
                          }
                          }))
                    (case Text.ParserCombinators.ReadP.$w<++
                            @ Lexeme
                            (lexHexOct_r3y9B
                             `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lexeme>_R)
                                     :: (forall b.
                                         (Lexeme -> Text.ParserCombinators.ReadP.P b)
                                         -> Text.ParserCombinators.ReadP.P b :: *)
                                        ~R# (ReadP Lexeme :: *)))
                            (lexDecNumber_r3yda
                             `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lexeme>_R)
                                     :: (forall b.
                                         (Lexeme -> Text.ParserCombinators.ReadP.P b)
                                         -> Text.ParserCombinators.ReadP.P b :: *)
                                        ~R# (ReadP Lexeme :: *)))
                            @ b_X3nCK
                            k_X3np8
                     of
                     { (# ww1_s3oiI #) ->
                     Text.ParserCombinators.ReadP.Look @ b_X3nCK ww1_s3oiI
                     })))))

-- RHS size: {terms: 25, types: 29, coercions: 0, joins: 0/3}
Text.Read.Lex.$wlex [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60] 190 20}]
Text.Read.Lex.$wlex
  = \ (@ b1_s3xkG)
      (w2_s3xkH :: Lexeme -> Text.ParserCombinators.ReadP.P b1_s3xkG) ->
      let {
        lvl116_s3was :: Text.ParserCombinators.ReadP.P b1_s3xkG
        [LclId]
        lvl116_s3was
          = let {
              lvl117_s3wap :: Text.ParserCombinators.ReadP.P b1_s3xkG
              [LclId]
              lvl117_s3wap = w2_s3xkH Text.Read.Lex.EOF } in
            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              @ b1_s3xkG
              (Text.ParserCombinators.ReadP.Look
                 @ b1_s3xkG
                 (\ (a3_X3nkL :: String) ->
                    case a3_X3nkL of {
                      [] -> lvl117_s3wap;
                      : ds1_i2Mqv ds2_i2Mqw ->
                        Text.ParserCombinators.ReadP.Fail @ b1_s3xkG
                    }))
              (Text.Read.Lex.expect2 @ b1_s3xkG w2_s3xkH) } in
      let {
        k_s3vVS [Dmd=<L,C(U)>]
          :: () -> Text.ParserCombinators.ReadP.P b1_s3xkG
        [LclId,
         Arity=1,
         Str=<L,A>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                 Tmpl= \ _ [Occ=Dead] -> lvl116_s3was}]
        k_s3vVS = \ _ [Occ=Dead] -> lvl116_s3was } in
      (# \ (a_a3ngt :: String) ->
           Text.ParserCombinators.ReadP.skipSpaces2
             a_a3ngt @ b1_s3xkG k_s3vVS #)

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
Text.Read.Lex.lex1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=1,
 Str=<L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ b1_s3xkG)
                 (w2_s3xkH [Occ=Once]
                    :: Lexeme -> Text.ParserCombinators.ReadP.P b1_s3xkG) ->
                 case Text.Read.Lex.$wlex @ b1_s3xkG w2_s3xkH of
                 { (# ww1_s3xlr [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b1_s3xkG ww1_s3xlr
                 }}]
Text.Read.Lex.lex1
  = \ (@ b1_s3xkG)
      (w2_s3xkH :: Lexeme -> Text.ParserCombinators.ReadP.P b1_s3xkG) ->
      case Text.Read.Lex.$wlex @ b1_s3xkG w2_s3xkH of
      { (# ww1_s3xlr #) ->
      Text.ParserCombinators.ReadP.Look @ b1_s3xkG ww1_s3xlr
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
lex :: ReadP Lexeme
[GblId,
 Arity=1,
 Str=<L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.Read.Lex.lex1
               `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lexeme>_R)
                       :: (forall b.
                           (Lexeme -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (ReadP Lexeme :: *))}]
lex
  = Text.Read.Lex.lex1
    `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lexeme>_R)
            :: (forall b.
                (Lexeme -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (ReadP Lexeme :: *))

-- RHS size: {terms: 41, types: 37, coercions: 0, joins: 0/4}
Text.Read.Lex.$wexpect [InlPrag=NOUSERINLINE[0]]
  :: Lexeme
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> (# String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=2,
 Str=<L,U><L,1*C1(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 60] 280 20}]
Text.Read.Lex.$wexpect
  = \ (w2_s3xkM :: Lexeme)
      (@ b_s3xkN)
      (w3_s3xkO :: () -> Text.ParserCombinators.ReadP.P b_s3xkN) ->
      let {
        lvl116_s3wax :: Text.ParserCombinators.ReadP.P b_s3xkN
        [LclId]
        lvl116_s3wax
          = let {
              lvl117_s3xNT :: Text.ParserCombinators.ReadP.P b_s3xkN
              [LclId]
              lvl117_s3xNT = w3_s3xkO GHC.Tuple.() } in
            let {
              lvl118_s3wau :: Text.ParserCombinators.ReadP.P b_s3xkN
              [LclId]
              lvl118_s3wau
                = case w2_s3xkM of {
                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_s3xkN;
                    EOF -> lvl117_s3xNT
                  } } in
            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              @ b_s3xkN
              (Text.ParserCombinators.ReadP.Look
                 @ b_s3xkN
                 (\ (a3_X3nlD :: String) ->
                    case a3_X3nlD of {
                      [] -> lvl118_s3wau;
                      : ds1_i2Mqv ds2_i2Mqw ->
                        Text.ParserCombinators.ReadP.Fail @ b_s3xkN
                    }))
              (Text.Read.Lex.expect2
                 @ b_s3xkN
                 (\ (a3_X3nlB :: Lexeme) ->
                    case Text.Read.Lex.$fEqLexeme_$c== a3_X3nlB w2_s3xkM of {
                      False -> Text.ParserCombinators.ReadP.Fail @ b_s3xkN;
                      True -> lvl117_s3xNT
                    })) } in
      let {
        k_s3vVQ [Dmd=<L,C(U)>]
          :: () -> Text.ParserCombinators.ReadP.P b_s3xkN
        [LclId,
         Arity=1,
         Str=<L,A>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                 Tmpl= \ _ [Occ=Dead] -> lvl116_s3wax}]
        k_s3vVQ = \ _ [Occ=Dead] -> lvl116_s3wax } in
      (# \ (a_a3ngt :: String) ->
           Text.ParserCombinators.ReadP.skipSpaces2
             a_a3ngt @ b_s3xkN k_s3vVQ #)

-- RHS size: {terms: 10, types: 16, coercions: 0, joins: 0/0}
Text.Read.Lex.expect1 [InlPrag=NOUSERINLINE[0]]
  :: Lexeme
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U><L,1*C1(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w2_s3xkM [Occ=Once] :: Lexeme)
                 (@ b_s3xkN)
                 (w3_s3xkO [Occ=Once]
                    :: () -> Text.ParserCombinators.ReadP.P b_s3xkN) ->
                 case Text.Read.Lex.$wexpect w2_s3xkM @ b_s3xkN w3_s3xkO of
                 { (# ww1_s3xlt [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3xkN ww1_s3xlt
                 }}]
Text.Read.Lex.expect1
  = \ (w2_s3xkM :: Lexeme)
      (@ b_s3xkN)
      (w3_s3xkO :: () -> Text.ParserCombinators.ReadP.P b_s3xkN) ->
      case Text.Read.Lex.$wexpect w2_s3xkM @ b_s3xkN w3_s3xkO of
      { (# ww1_s3xlt #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3xkN ww1_s3xlt
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
expect :: Lexeme -> ReadP ()
[GblId,
 Arity=2,
 Str=<L,U><L,1*C1(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.Read.Lex.expect1
               `cast` (<Lexeme>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                       :: (Lexeme
                           -> forall b.
                              (() -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (Lexeme -> ReadP () :: *))}]
expect
  = Text.Read.Lex.expect1
    `cast` (<Lexeme>_R
            ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
            :: (Lexeme
                -> forall b.
                   (() -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (Lexeme -> ReadP () :: *))

-- RHS size: {terms: 33, types: 52, coercions: 0, joins: 0/4}
Text.Read.Lex.$whsLex [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (String -> Text.ParserCombinators.ReadP.P b1)
     -> (# String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId,
 Arity=1,
 Str=<L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60] 260 20}]
Text.Read.Lex.$whsLex
  = \ (@ b1_s3xkT)
      (w2_s3xkU :: String -> Text.ParserCombinators.ReadP.P b1_s3xkT) ->
      let {
        lvl116_s3waC :: Text.ParserCombinators.ReadP.P b1_s3xkT
        [LclId]
        lvl116_s3waC
          = let {
              lvl117_s3wfn :: String -> Text.ParserCombinators.ReadP.P b1_s3xkT
              [LclId,
               Arity=1,
               Str=<L,U>,
               Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                       WorkFree=True, Expandable=True,
                       Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                       Tmpl= \ (s_a3niB [Occ=Once] :: String) -> w2_s3xkU s_a3niB}]
              lvl117_s3wfn = \ (s_a3niB :: String) -> w2_s3xkU s_a3niB } in
            let {
              lvl118_s3way
                :: Text.ParserCombinators.ReadP.P
                     (String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
              [LclId, Unf=OtherCon []]
              lvl118_s3way
                = Text.ParserCombinators.ReadP.Result
                    @ (String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    lvl117_s3wfn
                    (Text.ParserCombinators.ReadP.Fail
                       @ (String -> Text.ParserCombinators.ReadP.P b1_s3xkT)) } in
            Text.ParserCombinators.ReadP.gather_gath
              @ b1_s3xkT
              (id @ String)
              (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                 @ (String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                 (Text.ParserCombinators.ReadP.Look
                    @ (String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    (\ (a3_X3nlE :: String) ->
                       case a3_X3nlE of {
                         [] -> lvl118_s3way;
                         : ds1_i2Mqv ds2_i2Mqw ->
                           Text.ParserCombinators.ReadP.Fail
                             @ (String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                       }))
                 (Text.Read.Lex.expect2
                    @ (String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    (\ _ [Occ=Dead] -> lvl118_s3way))) } in
      let {
        k_s3vVM [Dmd=<L,C(U)>]
          :: () -> Text.ParserCombinators.ReadP.P b1_s3xkT
        [LclId,
         Arity=1,
         Str=<L,A>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                 Tmpl= \ _ [Occ=Dead] -> lvl116_s3waC}]
        k_s3vVM = \ _ [Occ=Dead] -> lvl116_s3waC } in
      (# \ (a_a3ngt :: String) ->
           Text.ParserCombinators.ReadP.skipSpaces2
             a_a3ngt @ b1_s3xkT k_s3vVM #)

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
Text.Read.Lex.hsLex1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (String -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=1,
 Str=<L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ b1_s3xkT)
                 (w2_s3xkU [Occ=Once]
                    :: String -> Text.ParserCombinators.ReadP.P b1_s3xkT) ->
                 case Text.Read.Lex.$whsLex @ b1_s3xkT w2_s3xkU of
                 { (# ww1_s3xlv [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b1_s3xkT ww1_s3xlv
                 }}]
Text.Read.Lex.hsLex1
  = \ (@ b1_s3xkT)
      (w2_s3xkU :: String -> Text.ParserCombinators.ReadP.P b1_s3xkT) ->
      case Text.Read.Lex.$whsLex @ b1_s3xkT w2_s3xkU of
      { (# ww1_s3xlv #) ->
      Text.ParserCombinators.ReadP.Look @ b1_s3xkT ww1_s3xlv
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
hsLex :: ReadP String
[GblId,
 Arity=1,
 Str=<L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.Read.Lex.hsLex1
               `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <String>_R)
                       :: (forall b.
                           (String -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (ReadP String :: *))}]
hsLex
  = Text.Read.Lex.hsLex1
    `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <String>_R)
            :: (forall b.
                (String -> Text.ParserCombinators.ReadP.P b)
                -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (ReadP String :: *))


------ Local rules for imported ids --------
"SPEC readIntP"
    forall ($dNum_a3v3w :: Num Integer).
      readIntP @ Integer $dNum_a3v3w
      = Text.Read.Lex.readIntP_$sreadIntP
"SPEC readOctP"
    forall ($dNum_a3v4G :: Num Integer) ($dEq_a3v4F :: Eq Integer).
      readOctP @ Integer $dEq_a3v4F $dNum_a3v4G
      = Text.Read.Lex.readOctP_$sreadOctP
"SPEC readDecP"
    forall ($dNum_a3v4Y :: Num Integer) ($dEq_a3v4X :: Eq Integer).
      readDecP @ Integer $dEq_a3v4X $dNum_a3v4Y
      = Text.Read.Lex.readDecP_$sreadDecP
"SPEC readHexP"
    forall ($dNum_a3v5g :: Num Integer) ($dEq_a3v5f :: Eq Integer).
      readHexP @ Integer $dEq_a3v5f $dNum_a3v5g
      = Text.Read.Lex.readHexP_$sreadHexP

