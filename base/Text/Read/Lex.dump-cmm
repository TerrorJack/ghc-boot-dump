
==================== Output Cmm ====================
2018-03-16 15:58:10.196303451 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:58:10.208063435 UTC

[section ""cstring" . Text.Read.Lex.$trModule4_bytes" {
     Text.Read.Lex.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.208640671 UTC

[section ""data" . Text.Read.Lex.$trModule3_closure" {
     Text.Read.Lex.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.20912389 UTC

[section ""cstring" . Text.Read.Lex.$trModule2_bytes" {
     Text.Read.Lex.$trModule2_bytes:
         I8[] [84,101,120,116,46,82,101,97,100,46,76,101,120]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.209736784 UTC

[section ""data" . Text.Read.Lex.$trModule1_closure" {
     Text.Read.Lex.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.210291872 UTC

[section ""data" . Text.Read.Lex.$trModule_closure" {
     Text.Read.Lex.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.Read.Lex.$trModule3_closure+1;
         const Text.Read.Lex.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.210871626 UTC

[section ""data" . $krep_r3y8E_closure" {
     $krep_r3y8E_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.211450492 UTC

[section ""data" . $krep1_r3y8F_closure" {
     $krep1_r3y8F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.2120155 UTC

[section ""data" . $krep2_r3y8G_closure" {
     $krep2_r3y8G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.212538964 UTC

[section ""data" . $krep3_r3y8H_closure" {
     $krep3_r3y8H_closure:
         const :_con_info;
         const $krep_r3y8E_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.213146678 UTC

[section ""data" . $krep4_r3y8I_closure" {
     $krep4_r3y8I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_r3y8H_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.213769121 UTC

[section ""data" . $krep5_r3y8J_closure" {
     $krep5_r3y8J_closure:
         const :_con_info;
         const $krep1_r3y8F_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.214368374 UTC

[section ""data" . $krep6_r3y8K_closure" {
     $krep6_r3y8K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep5_r3y8J_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.214911281 UTC

[section ""data" . $krep7_r3y8L_closure" {
     $krep7_r3y8L_closure:
         const :_con_info;
         const $krep6_r3y8K_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.215521497 UTC

[section ""data" . $krep8_r3y8M_closure" {
     $krep8_r3y8M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep7_r3y8L_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.216119561 UTC

[section ""data" . $krep9_r3y8N_closure" {
     $krep9_r3y8N_closure:
         const :_con_info;
         const $krep2_r3y8G_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.216726007 UTC

[section ""data" . $krep10_r3y8O_closure" {
     $krep10_r3y8O_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep9_r3y8N_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.21741114 UTC

[section ""cstring" . Text.Read.Lex.$tcNumber2_bytes" {
     Text.Read.Lex.$tcNumber2_bytes:
         I8[] [78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.217994837 UTC

[section ""data" . Text.Read.Lex.$tcNumber1_closure" {
     Text.Read.Lex.$tcNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tcNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.218647435 UTC

[section ""data" . Text.Read.Lex.$tcNumber_closure" {
     Text.Read.Lex.$tcNumber_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tcNumber1_closure+1;
         const GHC.Types.krep$*_closure;
         const 309030926258572567;
         const 15861928963352354800;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.219718895 UTC

[section ""data" . $krep11_r3y8P_closure" {
     $krep11_r3y8P_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Read.Lex.$tcNumber_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.220300918 UTC

[section ""data" . $krep12_r3y8Q_closure" {
     $krep12_r3y8Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3y8I_closure+1;
         const $krep11_r3y8P_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.220874795 UTC

[section ""data" . $krep13_r3y8R_closure" {
     $krep13_r3y8R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r3y8M_closure+1;
         const $krep12_r3y8Q_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.221516684 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal1_closure" {
     Text.Read.Lex.$tc'MkDecimal1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r3y8K_closure+1;
         const $krep13_r3y8R_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.222080127 UTC

[section ""cstring" . Text.Read.Lex.$tc'MkDecimal3_bytes" {
     Text.Read.Lex.$tc'MkDecimal3_bytes:
         I8[] [39,77,107,68,101,99,105,109,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.222613858 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal2_closure" {
     Text.Read.Lex.$tc'MkDecimal2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'MkDecimal3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.223201808 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal_closure" {
     Text.Read.Lex.$tc'MkDecimal_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'MkDecimal2_closure+1;
         const Text.Read.Lex.$tc'MkDecimal1_closure+4;
         const 3768064156751246198;
         const 12661213050981530502;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.223783662 UTC

[section ""data" . $krep14_r3y8S_closure" {
     $krep14_r3y8S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r3y8K_closure+1;
         const $krep11_r3y8P_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.224395952 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber1_closure" {
     Text.Read.Lex.$tc'MkNumber1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3y8F_closure+1;
         const $krep14_r3y8S_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.224994301 UTC

[section ""cstring" . Text.Read.Lex.$tc'MkNumber3_bytes" {
     Text.Read.Lex.$tc'MkNumber3_bytes:
         I8[] [39,77,107,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.225625564 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber2_closure" {
     Text.Read.Lex.$tc'MkNumber2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'MkNumber3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.22620677 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber_closure" {
     Text.Read.Lex.$tc'MkNumber_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'MkNumber2_closure+1;
         const Text.Read.Lex.$tc'MkNumber1_closure+4;
         const 13396293166029931455;
         const 9655480518931438202;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.226815723 UTC

[section ""cstring" . Text.Read.Lex.$tcLexeme2_bytes" {
     Text.Read.Lex.$tcLexeme2_bytes:
         I8[] [76,101,120,101,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.227388344 UTC

[section ""data" . Text.Read.Lex.$tcLexeme1_closure" {
     Text.Read.Lex.$tcLexeme1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tcLexeme2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.227992757 UTC

[section ""data" . Text.Read.Lex.$tcLexeme_closure" {
     Text.Read.Lex.$tcLexeme_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tcLexeme1_closure+1;
         const GHC.Types.krep$*_closure;
         const 80462090517814070;
         const 11862718491065697853;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.228646171 UTC

[section ""data" . Text.Read.Lex.$tc'EOF1_closure" {
     Text.Read.Lex.$tc'EOF1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Read.Lex.$tcLexeme_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.229429061 UTC

[section ""cstring" . Text.Read.Lex.$tc'EOF3_bytes" {
     Text.Read.Lex.$tc'EOF3_bytes:
         I8[] [39,69,79,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.230063055 UTC

[section ""data" . Text.Read.Lex.$tc'EOF2_closure" {
     Text.Read.Lex.$tc'EOF2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'EOF3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.230828613 UTC

[section ""data" . Text.Read.Lex.$tc'EOF_closure" {
     Text.Read.Lex.$tc'EOF_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'EOF2_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3510729917506789415;
         const 3927434500167946503;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.231494345 UTC

[section ""data" . Text.Read.Lex.$tc'Ident1_closure" {
     Text.Read.Lex.$tc'Ident1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r3y8O_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.232572404 UTC

[section ""cstring" . Text.Read.Lex.$tc'String2_bytes" {
     Text.Read.Lex.$tc'String2_bytes:
         I8[] [39,83,116,114,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.233112467 UTC

[section ""data" . Text.Read.Lex.$tc'String1_closure" {
     Text.Read.Lex.$tc'String1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'String2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.233752704 UTC

[section ""data" . Text.Read.Lex.$tc'String_closure" {
     Text.Read.Lex.$tc'String_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'String1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 4234975262003182519;
         const 13764813366371540099;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.234333396 UTC

[section ""cstring" . Text.Read.Lex.$tc'Punc2_bytes" {
     Text.Read.Lex.$tc'Punc2_bytes:
         I8[] [39,80,117,110,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.234889501 UTC

[section ""data" . Text.Read.Lex.$tc'Punc1_closure" {
     Text.Read.Lex.$tc'Punc1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Punc2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.235486347 UTC

[section ""data" . Text.Read.Lex.$tc'Punc_closure" {
     Text.Read.Lex.$tc'Punc_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Punc1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 12518860736485891069;
         const 4367633479442506190;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.236100977 UTC

[section ""cstring" . Text.Read.Lex.$tc'Ident3_bytes" {
     Text.Read.Lex.$tc'Ident3_bytes:
         I8[] [39,73,100,101,110,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.23664072 UTC

[section ""data" . Text.Read.Lex.$tc'Ident2_closure" {
     Text.Read.Lex.$tc'Ident2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Ident3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.237191908 UTC

[section ""data" . Text.Read.Lex.$tc'Ident_closure" {
     Text.Read.Lex.$tc'Ident_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Ident2_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 17378133866674838049;
         const 11361322998352874125;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.23788447 UTC

[section ""cstring" . Text.Read.Lex.$tc'Symbol2_bytes" {
     Text.Read.Lex.$tc'Symbol2_bytes:
         I8[] [39,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.238459519 UTC

[section ""data" . Text.Read.Lex.$tc'Symbol1_closure" {
     Text.Read.Lex.$tc'Symbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Symbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.239042235 UTC

[section ""data" . Text.Read.Lex.$tc'Symbol_closure" {
     Text.Read.Lex.$tc'Symbol_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Symbol1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 434905475898525586;
         const 17609692850475477756;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.239675471 UTC

[section ""data" . Text.Read.Lex.$tc'Char1_closure" {
     Text.Read.Lex.$tc'Char1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3y8G_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.240283679 UTC

[section ""cstring" . Text.Read.Lex.$tc'Char3_bytes" {
     Text.Read.Lex.$tc'Char3_bytes:
         I8[] [39,67,104,97,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.240868952 UTC

[section ""data" . Text.Read.Lex.$tc'Char2_closure" {
     Text.Read.Lex.$tc'Char2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Char3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.241484935 UTC

[section ""data" . Text.Read.Lex.$tc'Char_closure" {
     Text.Read.Lex.$tc'Char_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Char2_closure+1;
         const Text.Read.Lex.$tc'Char1_closure+4;
         const 4794546904228625478;
         const 396576625805862141;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.242160719 UTC

[section ""data" . Text.Read.Lex.$tc'Number1_closure" {
     Text.Read.Lex.$tc'Number1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r3y8P_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.242789151 UTC

[section ""cstring" . Text.Read.Lex.$tc'Number3_bytes" {
     Text.Read.Lex.$tc'Number3_bytes:
         I8[] [39,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.243396716 UTC

[section ""data" . Text.Read.Lex.$tc'Number2_closure" {
     Text.Read.Lex.$tc'Number2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Number3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.244020458 UTC

[section ""data" . Text.Read.Lex.$tc'Number_closure" {
     Text.Read.Lex.$tc'Number_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Number2_closure+1;
         const Text.Read.Lex.$tc'Number1_closure+4;
         const 3115835552307058655;
         const 14198768466951480548;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.244732626 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme9_bytes" {
     Text.Read.Lex.$fShowLexeme9_bytes:
         I8[] [77,107,68,101,99,105,109,97,108,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.246135947 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme8_closure" {
     Text.Read.Lex.$fShowLexeme8_closure:
         const Text.Read.Lex.$fShowLexeme8_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme8_entry() //  [R1]
         { info_tbl: [(c3yBn,
                       label: Text.Read.Lex.$fShowLexeme8_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yBn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yBo; else goto c3yBp;
       c3yBo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yBp: // global
           (_c3yBk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yBk::I64 == 0) goto c3yBm; else goto c3yBl;
       c3yBm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yBl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yBk::I64;
           R2 = Text.Read.Lex.$fShowLexeme9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.247082142 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme10_closure" {
     Text.Read.Lex.$fShowLexeme10_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.247629447 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme11_bytes" {
     Text.Read.Lex.$fShowLexeme11_bytes:
         I8[] [77,107,78,117,109,98,101,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.252961968 UTC

[section ""data" . Text.Read.Lex.$w$cshowsPrec_closure" {
     Text.Read.Lex.$w$cshowsPrec_closure:
         const Text.Read.Lex.$w$cshowsPrec_info;
         const 0;
 },
 sat_s3ydC_entry() //  [R1]
         { info_tbl: [(c3yCt,
                       label: sat_s3ydC_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yCt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3yCA; else goto c3yCB;
       c3yCA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yCB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3yCq_info;
           _s3ydr::P64 = P64[R1 + 16];
           _s3ydv::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3ydr::P64;
           P64[Sp - 24] = _s3ydv::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3yCI; else goto c3yCr;
       u3yCI: // global
           call _c3yCq(R1) args: 0, res: 0, upd: 0;
       c3yCr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3yCq() //  [R1]
         { info_tbl: [(c3yCq,
                       label: block_c3yCq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yCq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3yCE; else goto c3yCD;
       c3yCE: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3yCD: // global
           _s3ydx::I64 = I64[R1 + 7];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3yCx_info;
           R4 = Hp - 24;
           R3 = _s3ydx::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3yCx() //  [R1, R2]
         { info_tbl: [(c3yCx,
                       label: block_c3yCx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yCx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3yCH; else goto c3yCG;
       c3yCH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3yCG: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 showl_s3ydr_entry() //  [R1, R2]
         { info_tbl: [(c3yCN,
                       label: showl_s3ydr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yCN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3yCO; else goto c3yCP;
       c3yCO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yCP: // global
           I64[Sp - 24] = block_c3yCg_info;
           _s3ydr::P64 = R1;
           _s3ydq::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3ydq::P64;
           P64[Sp - 8] = _s3ydr::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3yCW; else goto c3yCh;
       u3yCW: // global
           call _c3yCg(R1) args: 0, res: 0, upd: 0;
       c3yCh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yCg() //  [R1]
         { info_tbl: [(c3yCg,
                       label: block_c3yCg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yCg: // global
           if (R1 & 7 == 1) goto c3yCK; else goto c3yCL;
       c3yCK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3yCL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3yCV; else goto c3yCU;
       c3yCV: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3yCU: // global
           _s3ydu::P64 = P64[R1 + 6];
           _s3ydv::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s3ydC_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3ydu::P64;
           P64[Hp - 24] = _s3ydv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ydD_entry() //  [R1]
         { info_tbl: [(c3yCX,
                       label: sat_s3ydD_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yCX: // global
           _s3ydD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yCY; else goto c3yCZ;
       c3yCZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3yD1; else goto c3yD0;
       c3yD1: // global
           HpAlloc = 40;
           goto c3yCY;
       c3yCY: // global
           R1 = _s3ydD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yD0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ydD::P64;
           _s3ydi::P64 = P64[_s3ydD::P64 + 16];
           _s3ydn::P64 = P64[_s3ydD::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure;
           P64[Hp - 16] = _s3ydi::P64;
           I64[Hp - 8] = showl_s3ydr_info;
           P64[Hp] = Hp - 30;
           R2 = _s3ydn::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_s3ydr_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ydH_entry() //  [R1]
         { info_tbl: [(c3yD2,
                       label: sat_s3ydH_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yD2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3yD6; else goto c3yD7;
       c3yD6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yD7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3yC1_info;
           _s3ydi::P64 = P64[R1 + 16];
           _s3ydn::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3ydi::P64;
           P64[Sp - 24] = _s3ydn::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3yDe; else goto c3yC2;
       u3yDe: // global
           call _c3yC1(R1) args: 0, res: 0, upd: 0;
       c3yC2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3yC1() //  [R1]
         { info_tbl: [(c3yC1,
                       label: block_c3yC1_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yC1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3yDa; else goto c3yD9;
       c3yDa: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3yD9: // global
           _s3ydp::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_s3ydD_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3yD3_info;
           R4 = Hp - 24;
           R3 = _s3ydp::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3yD3() //  [R1, R2]
         { info_tbl: [(c3yD3,
                       label: block_c3yD3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yD3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3yDd; else goto c3yDc;
       c3yDd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3yDc: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ydI_entry() //  [R1]
         { info_tbl: [(c3yDj,
                       label: sat_s3ydI_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yDj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3yDk; else goto c3yDl;
       c3yDk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yDl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3yBR_info;
           _s3ydi::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3ydi::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3yDs; else goto c3yBS;
       u3yDs: // global
           call _c3yBR(R1) args: 0, res: 0, upd: 0;
       c3yBS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3yBR() //  [R1]
         { info_tbl: [(c3yBR,
                       label: block_c3yBR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yBR: // global
           _s3ydi::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3yDg; else goto c3yDh;
       c3yDg: // global
           R3 = _s3ydi::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       c3yDh: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3yDr; else goto c3yDq;
       c3yDr: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3yDq: // global
           _s3ydm::P64 = P64[R1 + 6];
           _s3ydn::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s3ydH_info;
           P64[Hp - 40] = _s3ydi::P64;
           P64[Hp - 32] = _s3ydm::P64;
           P64[Hp - 24] = _s3ydn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ydN_entry() //  [R1]
         { info_tbl: [(c3yDt,
                       label: sat_s3ydN_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yDt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3yDy; else goto c3yDz;
       c3yDy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yDz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3yBI_info;
           _s3ydg::P64 = P64[R1 + 24];
           _s3ydi::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s3ydg::P64;
           P64[Sp - 24] = _s3ydi::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3yDG; else goto c3yBJ;
       u3yDG: // global
           call _c3yBI(R1) args: 0, res: 0, upd: 0;
       c3yBJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3yBI() //  [R1]
         { info_tbl: [(c3yBI,
                       label: block_c3yBI_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yBI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yDC; else goto c3yDB;
       c3yDC: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3yDB: // global
           _s3ydk::I64 = I64[R1 + 7];
           I64[Hp - 48] = sat_s3ydI_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp + 16] = block_c3yDv_info;
           R4 = Hp - 14;
           R3 = _s3ydk::I64;
           R2 = 11;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3yDv() //  [R1, R2]
         { info_tbl: [(c3yDv,
                       label: block_c3yDv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yDv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3yDF; else goto c3yDE;
       c3yDF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3yDE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 p_s3ydh_entry() //  [R1, R2]
         { info_tbl: [(c3yDH,
                       label: p_s3ydh_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yDH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3yDL; else goto c3yDK;
       c3yDL: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yDK: // global
           _s3ydf::P64 = P64[R1 + 7];
           _s3ydg::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s3ydN_info;
           P64[Hp - 16] = _s3ydf::P64;
           P64[Hp - 8] = _s3ydg::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = Text.Read.Lex.$fShowLexeme11_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ydR_entry() //  [R1]
         { info_tbl: [(c3yE0,
                       label: sat_s3ydR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yE0: // global
           _s3ydR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yE1; else goto c3yE2;
       c3yE2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3yE4; else goto c3yE3;
       c3yE4: // global
           HpAlloc = 24;
           goto c3yE1;
       c3yE1: // global
           R1 = _s3ydR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yE3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ydR::P64;
           _s3ydh::P64 = P64[_s3ydR::P64 + 16];
           _s3ydP::P64 = P64[_s3ydR::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3ydP::P64;
           R2 = Hp - 14;
           R1 = _s3ydh::P64;
           Sp = Sp - 16;
           call p_s3ydh_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ydS_entry() //  [R1, R2]
         { info_tbl: [(c3yE6,
                       label: sat_s3ydS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yE6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yEa; else goto c3yE9;
       c3yEa: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yE9: // global
           _s3ydh::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3ydR_info;
           P64[Hp - 32] = _s3ydh::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 f_s3ydW_entry() //  [R1]
         { info_tbl: [(c3yEh,
                       label: f_s3ydW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yEh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yEi; else goto c3yEj;
       c3yEi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yEj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = Text.Read.Lex.$fShowLexeme10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 g_s3ydX_entry() //  [R1]
         { info_tbl: [(c3yEo,
                       label: g_s3ydX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yEo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yEp; else goto c3yEq;
       c3yEp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yEq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = Text.Read.Lex.$fShowLexeme10_closure+1;
           R2 = GHC.Show.$fShowInteger_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ye2_entry() //  [R1]
         { info_tbl: [(c3yEC,
                       label: sat_s3ye2_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yEC: // global
           _s3ye2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yED; else goto c3yEE;
       c3yEE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yEG; else goto c3yEF;
       c3yEG: // global
           HpAlloc = 56;
           goto c3yED;
       c3yED: // global
           R1 = _s3ye2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yEF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ye2::P64;
           _s3ydW::P64 = P64[_s3ye2::P64 + 16];
           _s3ydX::P64 = P64[_s3ye2::P64 + 24];
           _s3ydZ::P64 = P64[_s3ye2::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ydX::P64;
           P64[Hp - 24] = _s3ydZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _s3ydW::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 g1_s3ydY_entry() //  [R1, R2]
         { info_tbl: [(c3yEI,
                       label: g1_s3ydY_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yEI: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3yEM; else goto c3yEL;
       c3yEM: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yEL: // global
           _s3ydT::P64 = P64[R1 + 7];
           _s3ydW::P64 = P64[R1 + 15];
           _s3ydX::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_s3ye2_info;
           P64[Hp - 40] = _s3ydW::P64;
           P64[Hp - 32] = _s3ydX::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 56;
           R4 = Hp - 14;
           R3 = _s3ydT::P64;
           R2 = GHC.Show.$fShowInt1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ye6_entry() //  [R1]
         { info_tbl: [(c3yEZ,
                       label: sat_s3ye6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yEZ: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_s3ydY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ye7_entry() //  [R1, R2]
         { info_tbl: [(c3yF2,
                       label: sat_s3ye7_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yF2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3yF6; else goto c3yF5;
       c3yF6: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yF5: // global
           _s3ydY::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3ye6_info;
           P64[Hp - 8] = _s3ydY::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme8_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yea_entry() //  [R1]
         { info_tbl: [(c3yFm,
                       label: sat_s3yea_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yFm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3yFq; else goto c3yFp;
       c3yFq: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yFp: // global
           _s3ydY::P64 = P64[R1 + 16];
           _s3ye8::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3ye8::P64;
           R2 = Hp - 14;
           R1 = _s3ydY::P64;
           call g1_s3ydY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yeb_entry() //  [R1]
         { info_tbl: [(c3yFr,
                       label: sat_s3yeb_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yFr: // global
           _s3yeb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yFs; else goto c3yFt;
       c3yFt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3yFv; else goto c3yFu;
       c3yFv: // global
           HpAlloc = 32;
           goto c3yFs;
       c3yFs: // global
           R1 = _s3yeb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yFu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeb::P64;
           _s3ydY::P64 = P64[_s3yeb::P64 + 16];
           _s3ye8::P64 = P64[_s3yeb::P64 + 24];
           I64[Hp - 24] = sat_s3yea_info;
           P64[Hp - 8] = _s3ydY::P64;
           P64[Hp] = _s3ye8::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme8_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yec_entry() //  [R1, R2]
         { info_tbl: [(c3yFx,
                       label: sat_s3yec_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yFx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yFB; else goto c3yFA;
       c3yFB: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yFA: // global
           _s3ydY::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeb_info;
           P64[Hp - 32] = _s3ydY::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c3yFG,
                       label: Text.Read.Lex.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yFG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yFH; else goto c3yFI;
       c3yFH: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3yFI: // global
           I64[Sp - 16] = block_c3yBu_info;
           R1 = R3;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3yFV; else goto c3yBv;
       u3yFV: // global
           call _c3yBu(R1) args: 0, res: 0, upd: 0;
       c3yBv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yBu() //  [R1]
         { info_tbl: [(c3yBu,
                       label: block_c3yBu_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yBu: // global
           _s3ydc::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c3yFD; else goto c3yFE;
       c3yFD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3yFL; else goto c3yFK;
       c3yFL: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3yFK: // global
           _s3ydf::P64 = P64[R1 + 7];
           _s3ydg::P64 = P64[R1 + 15];
           I64[Hp - 32] = p_s3ydh_info;
           P64[Hp - 24] = _s3ydf::P64;
           P64[Hp - 16] = _s3ydg::P64;
           _c3yBz::P64 = Hp - 31;
           if (%MO_S_Lt_W64(_s3ydc::I64, 11)) goto c3yFN; else goto c3yFO;
       c3yFN: // global
           Hp = Hp - 16;
           R1 = _c3yBz::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3yFO: // global
           I64[Hp - 8] = sat_s3ydS_info;
           P64[Hp] = _c3yBz::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3yFE: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3yFR; else goto c3yFQ;
       c3yFR: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3yFQ: // global
           _s3ydT::P64 = P64[R1 + 6];
           _s3ydU::P64 = P64[R1 + 14];
           _s3ydV::P64 = P64[R1 + 22];
           I64[Hp - 88] = f_s3ydW_info;
           P64[Hp - 72] = _s3ydU::P64;
           I64[Hp - 64] = g_s3ydX_info;
           P64[Hp - 48] = _s3ydV::P64;
           I64[Hp - 40] = g1_s3ydY_info;
           P64[Hp - 32] = _s3ydT::P64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 64;
           _c3yEr::P64 = Hp - 39;
           if (%MO_S_Lt_W64(_s3ydc::I64, 11)) goto c3yFT; else goto c3yFU;
       c3yFT: // global
           I64[Hp - 8] = sat_s3ye7_info;
           P64[Hp] = _c3yEr::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3yFU: // global
           I64[Hp - 8] = sat_s3yec_info;
           P64[Hp] = _c3yEr::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.266520106 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshowsPrec_closure" {
     Text.Read.Lex.$fShowNumber_$cshowsPrec_closure:
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c3yG4,
                       label: Text.Read.Lex.$fShowNumber_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yG4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yG5; else goto c3yG6;
       c3yG5: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fShowNumber_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3yG6: // global
           I64[Sp - 16] = block_c3yG1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3yGa; else goto c3yG2;
       u3yGa: // global
           call _c3yG1(R1) args: 0, res: 0, upd: 0;
       c3yG2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yG1() //  [R1]
         { info_tbl: [(c3yG1,
                       label: block_c3yG1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yG1: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.267620568 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme2_closure" {
     Text.Read.Lex.$fShowLexeme2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.268333161 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshow_closure" {
     Text.Read.Lex.$fShowNumber_$cshow_closure:
         const Text.Read.Lex.$fShowNumber_$cshow_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshow_entry() //  [R2]
         { info_tbl: [(c3yGf,
                       label: Text.Read.Lex.$fShowNumber_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yGf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yGg; else goto c3yGh;
       c3yGg: // global
           R2 = R2;
           R1 = Text.Read.Lex.$fShowNumber_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yGh: // global
           R3 = R2;
           R2 = 0;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.269368216 UTC

[section ""data" . Text.Read.Lex.$fShowNumber1_closure" {
     Text.Read.Lex.$fShowNumber1_closure:
         const Text.Read.Lex.$fShowNumber1_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber1_entry() //  [R2]
         { info_tbl: [(c3yGm,
                       label: Text.Read.Lex.$fShowNumber1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yGm: // global
           R3 = R2;
           R2 = 0;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.270247946 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshowList_closure" {
     Text.Read.Lex.$fShowNumber_$cshowList_closure:
         const Text.Read.Lex.$fShowNumber_$cshowList_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c3yGt,
                       label: Text.Read.Lex.$fShowNumber_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yGt: // global
           R4 = R3;
           R3 = R2;
           R2 = Text.Read.Lex.$fShowNumber1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.270959406 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_closure" {
     Text.Read.Lex.$fShowNumber_closure:
         const GHC.Show.C:Show_con_info;
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_closure+2;
         const Text.Read.Lex.$fShowNumber_$cshow_closure+1;
         const Text.Read.Lex.$fShowNumber_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.271540594 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme7_bytes" {
     Text.Read.Lex.$fShowLexeme7_bytes:
         I8[] [78,117,109,98,101,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.27232688 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme6_closure" {
     Text.Read.Lex.$fShowLexeme6_closure:
         const Text.Read.Lex.$fShowLexeme6_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme6_entry() //  [R1]
         { info_tbl: [(c3yGC,
                       label: Text.Read.Lex.$fShowLexeme6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yGC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yGD; else goto c3yGE;
       c3yGD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yGE: // global
           (_c3yGz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yGz::I64 == 0) goto c3yGB; else goto c3yGA;
       c3yGB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yGA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yGz::I64;
           R2 = Text.Read.Lex.$fShowLexeme7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.273205856 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme5_bytes" {
     Text.Read.Lex.$fShowLexeme5_bytes:
         I8[] [69,79,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.274014109 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme4_closure" {
     Text.Read.Lex.$fShowLexeme4_closure:
         const Text.Read.Lex.$fShowLexeme4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme4_entry() //  [R1]
         { info_tbl: [(c3yGL,
                       label: Text.Read.Lex.$fShowLexeme4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yGL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yGM; else goto c3yGN;
       c3yGM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yGN: // global
           (_c3yGI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yGI::I64 == 0) goto c3yGK; else goto c3yGJ;
       c3yGK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yGJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yGI::I64;
           R2 = Text.Read.Lex.$fShowLexeme5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.275037188 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme3_closure" {
     Text.Read.Lex.$fShowLexeme3_closure:
         const Text.Read.Lex.$fShowLexeme3_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme3_entry() //  [R2]
         { info_tbl: [(c3yGS,
                       label: Text.Read.Lex.$fShowLexeme3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yGS: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.275766289 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme16_bytes" {
     Text.Read.Lex.$fShowLexeme16_bytes:
         I8[] [67,104,97,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.276348494 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme15_bytes" {
     Text.Read.Lex.$fShowLexeme15_bytes:
         I8[] [83,116,114,105,110,103,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.276915652 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme14_bytes" {
     Text.Read.Lex.$fShowLexeme14_bytes:
         I8[] [80,117,110,99,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.277565159 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme13_bytes" {
     Text.Read.Lex.$fShowLexeme13_bytes:
         I8[] [73,100,101,110,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.278156834 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme12_bytes" {
     Text.Read.Lex.$fShowLexeme12_bytes:
         I8[] [83,121,109,98,111,108,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.286966236 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure" {
     Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure:
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_info;
         const 0;
 },
 sat_s3yev_entry() //  [R1]
         { info_tbl: [(c3yHo,
                       label: sat_s3yev_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yHo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3yHp; else goto c3yHq;
       c3yHp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yHq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3yHl_info;
           _s3yes::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yes::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3yHu; else goto c3yHm;
       u3yHu: // global
           call _c3yHl(R1) args: 0, res: 0, upd: 0;
       c3yHm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3yHl() //  [R1]
         { info_tbl: [(c3yHl,
                       label: block_c3yHl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yHl: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yew_entry() //  [R1, R2]
         { info_tbl: [(c3yHv,
                       label: sat_s3yew_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yHv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3yHz; else goto c3yHy;
       c3yHz: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yHy: // global
           _s3yeo::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3yev_info;
           P64[Hp - 8] = _s3yeo::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yeB_entry() //  [R1]
         { info_tbl: [(c3yHR,
                       label: sat_s3yeB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yHR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3yHV; else goto c3yHW;
       c3yHV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yHW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3yHO_info;
           _s3yex::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yex::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3yI0; else goto c3yHP;
       u3yI0: // global
           call _c3yHO(R1) args: 0, res: 0, upd: 0;
       c3yHP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3yHO() //  [R1]
         { info_tbl: [(c3yHO,
                       label: block_c3yHO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yHO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3yHZ; else goto c3yHY;
       c3yHZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3yHY: // global
           _s3yez::I64 = I64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 14;
           R2 = _s3yez::I64;
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeC_entry() //  [R1]
         { info_tbl: [(c3yI1,
                       label: sat_s3yeC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yI1: // global
           _s3yeC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yI2; else goto c3yI3;
       c3yI3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3yI5; else goto c3yI4;
       c3yI5: // global
           HpAlloc = 32;
           goto c3yI2;
       c3yI2: // global
           R1 = _s3yeC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yI4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeC::P64;
           _s3yeo::P64 = P64[_s3yeC::P64 + 16];
           _s3yex::P64 = P64[_s3yeC::P64 + 24];
           I64[Hp - 24] = sat_s3yeB_info;
           P64[Hp - 8] = _s3yeo::P64;
           P64[Hp] = _s3yex::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeD_entry() //  [R1, R2]
         { info_tbl: [(c3yI7,
                       label: sat_s3yeD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yI7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yIb; else goto c3yIa;
       c3yIb: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yIa: // global
           _s3yeo::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeC_info;
           P64[Hp - 32] = _s3yeo::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yeK_entry() //  [R1]
         { info_tbl: [(c3yIw,
                       label: sat_s3yeK_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yIw: // global
           _s3yeK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yIx; else goto c3yIy;
       c3yIy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3yIA; else goto c3yIz;
       c3yIA: // global
           HpAlloc = 24;
           goto c3yIx;
       c3yIx: // global
           R1 = _s3yeK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yIz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeK::P64;
           _s3yeE::P64 = P64[_s3yeK::P64 + 16];
           _s3yeI::P64 = P64[_s3yeK::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yeI::P64;
           R3 = Hp - 14;
           R2 = _s3yeE::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeM_entry() //  [R1, R2]
         { info_tbl: [(c3yIC,
                       label: sat_s3yeM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yIC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yIG; else goto c3yIF;
       c3yIG: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yIF: // global
           _s3yeE::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeK_info;
           P64[Hp - 32] = _s3yeE::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yeQ_entry() //  [R1]
         { info_tbl: [(c3yIX,
                       label: sat_s3yeQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yIX: // global
           _s3yeQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yIY; else goto c3yIZ;
       c3yIZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3yJ1; else goto c3yJ0;
       c3yJ1: // global
           HpAlloc = 48;
           goto c3yIY;
       c3yIY: // global
           R1 = _s3yeQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yJ0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeQ::P64;
           _s3yeE::P64 = P64[_s3yeQ::P64 + 16];
           _s3yeN::P64 = P64[_s3yeQ::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yeN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yeE::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeS_entry() //  [R1]
         { info_tbl: [(c3yJ3,
                       label: sat_s3yeS_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yJ3: // global
           _s3yeS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yJ4; else goto c3yJ5;
       c3yJ5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yJ7; else goto c3yJ6;
       c3yJ7: // global
           HpAlloc = 56;
           goto c3yJ4;
       c3yJ4: // global
           R1 = _s3yeS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yJ6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeS::P64;
           _s3yeE::P64 = P64[_s3yeS::P64 + 16];
           _s3yeN::P64 = P64[_s3yeS::P64 + 24];
           I64[Hp - 48] = sat_s3yeQ_info;
           P64[Hp - 32] = _s3yeE::P64;
           P64[Hp - 24] = _s3yeN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeT_entry() //  [R1, R2]
         { info_tbl: [(c3yJ9,
                       label: sat_s3yeT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yJ9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yJd; else goto c3yJc;
       c3yJd: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yJc: // global
           _s3yeE::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeS_info;
           P64[Hp - 32] = _s3yeE::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yf0_entry() //  [R1]
         { info_tbl: [(c3yJy,
                       label: sat_s3yf0_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yJy: // global
           _s3yf0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yJz; else goto c3yJA;
       c3yJA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3yJC; else goto c3yJB;
       c3yJC: // global
           HpAlloc = 24;
           goto c3yJz;
       c3yJz: // global
           R1 = _s3yf0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yJB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yf0::P64;
           _s3yeU::P64 = P64[_s3yf0::P64 + 16];
           _s3yeY::P64 = P64[_s3yf0::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yeY::P64;
           R3 = Hp - 14;
           R2 = _s3yeU::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yf2_entry() //  [R1, R2]
         { info_tbl: [(c3yJE,
                       label: sat_s3yf2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yJE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yJI; else goto c3yJH;
       c3yJI: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yJH: // global
           _s3yeU::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yf0_info;
           P64[Hp - 32] = _s3yeU::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yf6_entry() //  [R1]
         { info_tbl: [(c3yJZ,
                       label: sat_s3yf6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yJZ: // global
           _s3yf6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yK0; else goto c3yK1;
       c3yK1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3yK3; else goto c3yK2;
       c3yK3: // global
           HpAlloc = 48;
           goto c3yK0;
       c3yK0: // global
           R1 = _s3yf6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yK2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yf6::P64;
           _s3yeU::P64 = P64[_s3yf6::P64 + 16];
           _s3yf3::P64 = P64[_s3yf6::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yf3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yeU::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yf8_entry() //  [R1]
         { info_tbl: [(c3yK5,
                       label: sat_s3yf8_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yK5: // global
           _s3yf8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yK6; else goto c3yK7;
       c3yK7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yK9; else goto c3yK8;
       c3yK9: // global
           HpAlloc = 56;
           goto c3yK6;
       c3yK6: // global
           R1 = _s3yf8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yK8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yf8::P64;
           _s3yeU::P64 = P64[_s3yf8::P64 + 16];
           _s3yf3::P64 = P64[_s3yf8::P64 + 24];
           I64[Hp - 48] = sat_s3yf6_info;
           P64[Hp - 32] = _s3yeU::P64;
           P64[Hp - 24] = _s3yf3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yf9_entry() //  [R1, R2]
         { info_tbl: [(c3yKb,
                       label: sat_s3yf9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yKb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yKf; else goto c3yKe;
       c3yKf: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yKe: // global
           _s3yeU::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yf8_info;
           P64[Hp - 32] = _s3yeU::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfg_entry() //  [R1]
         { info_tbl: [(c3yKA,
                       label: sat_s3yfg_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yKA: // global
           _s3yfg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yKB; else goto c3yKC;
       c3yKC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3yKE; else goto c3yKD;
       c3yKE: // global
           HpAlloc = 24;
           goto c3yKB;
       c3yKB: // global
           R1 = _s3yfg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yKD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfg::P64;
           _s3yfa::P64 = P64[_s3yfg::P64 + 16];
           _s3yfe::P64 = P64[_s3yfg::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yfe::P64;
           R3 = Hp - 14;
           R2 = _s3yfa::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfi_entry() //  [R1, R2]
         { info_tbl: [(c3yKG,
                       label: sat_s3yfi_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yKG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yKK; else goto c3yKJ;
       c3yKK: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yKJ: // global
           _s3yfa::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfg_info;
           P64[Hp - 32] = _s3yfa::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfm_entry() //  [R1]
         { info_tbl: [(c3yL1,
                       label: sat_s3yfm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yL1: // global
           _s3yfm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yL2; else goto c3yL3;
       c3yL3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3yL5; else goto c3yL4;
       c3yL5: // global
           HpAlloc = 48;
           goto c3yL2;
       c3yL2: // global
           R1 = _s3yfm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yL4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfm::P64;
           _s3yfa::P64 = P64[_s3yfm::P64 + 16];
           _s3yfj::P64 = P64[_s3yfm::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yfj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yfa::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfo_entry() //  [R1]
         { info_tbl: [(c3yL7,
                       label: sat_s3yfo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yL7: // global
           _s3yfo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yL8; else goto c3yL9;
       c3yL9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yLb; else goto c3yLa;
       c3yLb: // global
           HpAlloc = 56;
           goto c3yL8;
       c3yL8: // global
           R1 = _s3yfo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yLa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfo::P64;
           _s3yfa::P64 = P64[_s3yfo::P64 + 16];
           _s3yfj::P64 = P64[_s3yfo::P64 + 24];
           I64[Hp - 48] = sat_s3yfm_info;
           P64[Hp - 32] = _s3yfa::P64;
           P64[Hp - 24] = _s3yfj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfp_entry() //  [R1, R2]
         { info_tbl: [(c3yLd,
                       label: sat_s3yfp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yLd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yLh; else goto c3yLg;
       c3yLh: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yLg: // global
           _s3yfa::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfo_info;
           P64[Hp - 32] = _s3yfa::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfw_entry() //  [R1]
         { info_tbl: [(c3yLC,
                       label: sat_s3yfw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yLC: // global
           _s3yfw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yLD; else goto c3yLE;
       c3yLE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3yLG; else goto c3yLF;
       c3yLG: // global
           HpAlloc = 24;
           goto c3yLD;
       c3yLD: // global
           R1 = _s3yfw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yLF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfw::P64;
           _s3yfq::P64 = P64[_s3yfw::P64 + 16];
           _s3yfu::P64 = P64[_s3yfw::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yfu::P64;
           R3 = Hp - 14;
           R2 = _s3yfq::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfy_entry() //  [R1, R2]
         { info_tbl: [(c3yLI,
                       label: sat_s3yfy_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yLI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yLM; else goto c3yLL;
       c3yLM: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yLL: // global
           _s3yfq::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfw_info;
           P64[Hp - 32] = _s3yfq::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfC_entry() //  [R1]
         { info_tbl: [(c3yM3,
                       label: sat_s3yfC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yM3: // global
           _s3yfC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yM4; else goto c3yM5;
       c3yM5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3yM7; else goto c3yM6;
       c3yM7: // global
           HpAlloc = 48;
           goto c3yM4;
       c3yM4: // global
           R1 = _s3yfC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yM6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfC::P64;
           _s3yfq::P64 = P64[_s3yfC::P64 + 16];
           _s3yfz::P64 = P64[_s3yfC::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yfz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yfq::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfE_entry() //  [R1]
         { info_tbl: [(c3yM9,
                       label: sat_s3yfE_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yM9: // global
           _s3yfE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yMa; else goto c3yMb;
       c3yMb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yMd; else goto c3yMc;
       c3yMd: // global
           HpAlloc = 56;
           goto c3yMa;
       c3yMa: // global
           R1 = _s3yfE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yMc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfE::P64;
           _s3yfq::P64 = P64[_s3yfE::P64 + 16];
           _s3yfz::P64 = P64[_s3yfE::P64 + 24];
           I64[Hp - 48] = sat_s3yfC_info;
           P64[Hp - 32] = _s3yfq::P64;
           P64[Hp - 24] = _s3yfz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfF_entry() //  [R1, R2]
         { info_tbl: [(c3yMf,
                       label: sat_s3yfF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yMf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yMj; else goto c3yMi;
       c3yMj: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yMi: // global
           _s3yfq::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfE_info;
           P64[Hp - 32] = _s3yfq::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s3yfJ_entry() //  [R1]
         { info_tbl: [(c3yMv,
                       label: g_s3yfJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yMv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yMw; else goto c3yMx;
       c3yMw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yMx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfM_entry() //  [R1]
         { info_tbl: [(c3yMK,
                       label: sat_s3yfM_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yMK: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfN_entry() //  [R1, R2]
         { info_tbl: [(c3yMN,
                       label: sat_s3yfN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yMN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3yMR; else goto c3yMQ;
       c3yMR: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yMQ: // global
           _s3yfJ::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3yfM_info;
           P64[Hp - 8] = _s3yfJ::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfQ_entry() //  [R1]
         { info_tbl: [(c3yN7,
                       label: sat_s3yfQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yN7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3yNb; else goto c3yNa;
       c3yNb: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yNa: // global
           _s3yfJ::P64 = P64[R1 + 16];
           _s3yfO::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3yfO::P64;
           R2 = Hp - 14;
           R1 = _s3yfJ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfR_entry() //  [R1]
         { info_tbl: [(c3yNc,
                       label: sat_s3yfR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yNc: // global
           _s3yfR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3yNd; else goto c3yNe;
       c3yNe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3yNg; else goto c3yNf;
       c3yNg: // global
           HpAlloc = 32;
           goto c3yNd;
       c3yNd: // global
           R1 = _s3yfR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yNf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfR::P64;
           _s3yfJ::P64 = P64[_s3yfR::P64 + 16];
           _s3yfO::P64 = P64[_s3yfR::P64 + 24];
           I64[Hp - 24] = sat_s3yfQ_info;
           P64[Hp - 8] = _s3yfJ::P64;
           P64[Hp] = _s3yfO::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfS_entry() //  [R1, R2]
         { info_tbl: [(c3yNi,
                       label: sat_s3yfS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yNi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3yNm; else goto c3yNl;
       c3yNm: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yNl: // global
           _s3yfJ::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfR_info;
           P64[Hp - 32] = _s3yfJ::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c3yNw,
                       label: Text.Read.Lex.$fShowLexeme_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yNw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yNx; else goto c3yNy;
       c3yNx: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3yNy: // global
           I64[Sp - 16] = block_c3yGZ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3yOo; else goto c3yH0;
       u3yOo: // global
           call _c3yGZ(R1) args: 0, res: 0, upd: 0;
       c3yH0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yGZ() //  [R1]
         { info_tbl: [(c3yGZ,
                       label: block_c3yGZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yGZ: // global
           _s3yel::P64 = P64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3yNo;
               case 2 : goto c3yNp;
               case 3 : goto c3yNq;
               case 4 : goto c3yNr;
               case 5 : goto c3yNs;
               case 6 : goto c3yNt;
               case 7 : goto c3yNu;
           }
       c3yNu: // global
           R1 = Text.Read.Lex.$fShowLexeme3_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3yNt: // global
           I64[Sp] = block_c3yMm_info;
           _s3yfG::P64 = P64[R1 + 2];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yfG::P64;
           if (R1 & 7 != 0) goto u3yOn; else goto c3yMn;
       u3yOn: // global
           call _c3yMm(R1) args: 0, res: 0, upd: 0;
       c3yMn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yNs: // global
           I64[Sp] = block_c3yLk_info;
           _s3yfq::P64 = P64[R1 + 3];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yfq::P64;
           if (R1 & 7 != 0) goto u3yOm; else goto c3yLl;
       u3yOm: // global
           call _c3yLk(R1) args: 0, res: 0, upd: 0;
       c3yLl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yNr: // global
           I64[Sp] = block_c3yKi_info;
           _s3yfa::P64 = P64[R1 + 4];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yfa::P64;
           if (R1 & 7 != 0) goto u3yOl; else goto c3yKj;
       u3yOl: // global
           call _c3yKi(R1) args: 0, res: 0, upd: 0;
       c3yKj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yNq: // global
           I64[Sp] = block_c3yJg_info;
           _s3yeU::P64 = P64[R1 + 5];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yeU::P64;
           if (R1 & 7 != 0) goto u3yOk; else goto c3yJh;
       u3yOk: // global
           call _c3yJg(R1) args: 0, res: 0, upd: 0;
       c3yJh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yNp: // global
           I64[Sp] = block_c3yIe_info;
           _s3yeE::P64 = P64[R1 + 6];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yeE::P64;
           if (R1 & 7 != 0) goto u3yOj; else goto c3yIf;
       u3yOj: // global
           call _c3yIe(R1) args: 0, res: 0, upd: 0;
       c3yIf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yNo: // global
           I64[Sp] = block_c3yH4_info;
           _s3yeo::P64 = P64[R1 + 7];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yeo::P64;
           if (R1 & 7 != 0) goto u3yOi; else goto c3yH5;
       u3yOi: // global
           call _c3yH4(R1) args: 0, res: 0, upd: 0;
       c3yH5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yMm() //  [R1]
         { info_tbl: [(c3yMm,
                       label: block_c3yMm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yMm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3yOb; else goto c3yOa;
       c3yOb: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3yOa: // global
           _s3yfI::I64 = I64[R1 + 7];
           I64[Hp - 32] = g_s3yfJ_info;
           P64[Hp - 16] = P64[Sp + 8];
           _c3yMr::P64 = Hp - 32;
           if (%MO_S_Lt_W64(_s3yfI::I64, 11)) goto c3yOd; else goto c3yOe;
       c3yOd: // global
           I64[Hp - 8] = sat_s3yfN_info;
           P64[Hp] = _c3yMr::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3yOe: // global
           I64[Hp - 8] = sat_s3yfS_info;
           P64[Hp] = _c3yMr::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3yLk() //  [R1]
         { info_tbl: [(c3yLk,
                       label: block_c3yLk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yLk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3yO4; else goto c3yO3;
       c3yO4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3yO3: // global
           _s3yfq::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3yO6; else goto c3yO7;
       c3yO6: // global
           I64[Hp - 8] = sat_s3yfy_info;
           P64[Hp] = _s3yfq::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3yO7: // global
           I64[Hp - 8] = sat_s3yfF_info;
           P64[Hp] = _s3yfq::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3yKi() //  [R1]
         { info_tbl: [(c3yKi,
                       label: block_c3yKi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yKi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3yNX; else goto c3yNW;
       c3yNX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3yNW: // global
           _s3yfa::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3yNZ; else goto c3yO0;
       c3yNZ: // global
           I64[Hp - 8] = sat_s3yfi_info;
           P64[Hp] = _s3yfa::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3yO0: // global
           I64[Hp - 8] = sat_s3yfp_info;
           P64[Hp] = _s3yfa::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3yJg() //  [R1]
         { info_tbl: [(c3yJg,
                       label: block_c3yJg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yJg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3yNQ; else goto c3yNP;
       c3yNQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3yNP: // global
           _s3yeU::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3yNS; else goto c3yNT;
       c3yNS: // global
           I64[Hp - 8] = sat_s3yf2_info;
           P64[Hp] = _s3yeU::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3yNT: // global
           I64[Hp - 8] = sat_s3yf9_info;
           P64[Hp] = _s3yeU::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3yIe() //  [R1]
         { info_tbl: [(c3yIe,
                       label: block_c3yIe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yIe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3yNJ; else goto c3yNI;
       c3yNJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3yNI: // global
           _s3yeE::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3yNL; else goto c3yNM;
       c3yNL: // global
           I64[Hp - 8] = sat_s3yeM_info;
           P64[Hp] = _s3yeE::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3yNM: // global
           I64[Hp - 8] = sat_s3yeT_info;
           P64[Hp] = _s3yeE::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3yH4() //  [R1]
         { info_tbl: [(c3yH4,
                       label: block_c3yH4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yH4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3yNC; else goto c3yNB;
       c3yNC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3yNB: // global
           _s3yeo::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3yNE; else goto c3yNF;
       c3yNE: // global
           I64[Hp - 8] = sat_s3yew_info;
           P64[Hp] = _s3yeo::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3yNF: // global
           I64[Hp - 8] = sat_s3yeD_info;
           P64[Hp] = _s3yeo::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.305110079 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme17_closure" {
     Text.Read.Lex.$fShowLexeme17_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.307533727 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshow_closure" {
     Text.Read.Lex.$fShowLexeme_$cshow_closure:
         const Text.Read.Lex.$fShowLexeme_$cshow_info;
         const 0;
 },
 sat_s3yfY_entry() //  [R1]
         { info_tbl: [(c3yOF,
                       label: sat_s3yfY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yOF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3yOG; else goto c3yOH;
       c3yOG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yOH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3yOC_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3yOL; else goto c3yOD;
       u3yOL: // global
           call _c3yOC(R1) args: 0, res: 0, upd: 0;
       c3yOD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3yOC() //  [R1]
         { info_tbl: [(c3yOC,
                       label: block_c3yOC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yOC: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yg0_entry() //  [R1]
         { info_tbl: [(c3yOS,
                       label: sat_s3yg0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yOS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yOT; else goto c3yOU;
       c3yOT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yOU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yg3_entry() //  [R1]
         { info_tbl: [(c3yP1,
                       label: sat_s3yg3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yP1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yP2; else goto c3yP3;
       c3yP2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yP3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yg6_entry() //  [R1]
         { info_tbl: [(c3yPa,
                       label: sat_s3yg6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yPa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yPb; else goto c3yPc;
       c3yPb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yPc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yg9_entry() //  [R1]
         { info_tbl: [(c3yPj,
                       label: sat_s3yg9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yPj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yPk; else goto c3yPl;
       c3yPk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yPl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ygc_entry() //  [R1]
         { info_tbl: [(c3yPs,
                       label: sat_s3ygc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yPs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yPt; else goto c3yPu;
       c3yPt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yPu: // global
           R3 = P64[R1 + 16];
           R2 = 11;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$fShowLexeme_$cshow_entry() //  [R2]
         { info_tbl: [(c3yPE,
                       label: Text.Read.Lex.$fShowLexeme_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yPE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3yPF; else goto c3yPG;
       c3yPF: // global
           R2 = R2;
           R1 = Text.Read.Lex.$fShowLexeme_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yPG: // global
           I64[Sp - 8] = block_c3yOt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3yQ6; else goto c3yOu;
       u3yQ6: // global
           call _c3yOt(R1) args: 0, res: 0, upd: 0;
       c3yOu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yOt() //  [R1]
         { info_tbl: [(c3yOt,
                       label: block_c3yOt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yOt: // global
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3yPw;
               case 2 : goto c3yPx;
               case 3 : goto c3yPy;
               case 4 : goto c3yPz;
               case 5 : goto c3yPA;
               case 6 : goto c3yPB;
               case 7 : goto c3yPC;
           }
       c3yPC: // global
           R1 = Text.Read.Lex.$fShowLexeme4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3yPB: // global
           Hp = Hp + 24;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3yQ2; else goto c3yQ1;
       c3yQ1: // global
           _s3ygb::P64 = P64[_s3yfU::P64 + 2];
           I64[Hp - 16] = sat_s3ygc_info;
           P64[Hp] = _s3ygb::P64;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3yPA: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3yPZ; else goto c3yPY;
       c3yPY: // global
           _s3yg8::P64 = P64[_s3yfU::P64 + 3];
           I64[Hp - 40] = sat_s3yg9_info;
           P64[Hp - 24] = _s3yg8::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3yPz: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3yPZ; else goto c3yPU;
       c3yPU: // global
           _s3yg5::P64 = P64[_s3yfU::P64 + 4];
           I64[Hp - 40] = sat_s3yg6_info;
           P64[Hp - 24] = _s3yg5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3yPy: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3yPZ; else goto c3yPQ;
       c3yPQ: // global
           _s3yg2::P64 = P64[_s3yfU::P64 + 5];
           I64[Hp - 40] = sat_s3yg3_info;
           P64[Hp - 24] = _s3yg2::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3yPx: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3yPZ; else goto c3yPM;
       c3yPZ: // global
           HpAlloc = 48;
           R1 = _s3yfU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3yPM: // global
           _s3yfZ::P64 = P64[_s3yfU::P64 + 6];
           I64[Hp - 40] = sat_s3yg0_info;
           P64[Hp - 24] = _s3yfZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3yPw: // global
           Hp = Hp + 24;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3yQ2; else goto c3yPI;
       c3yQ2: // global
           HpAlloc = 24;
           R1 = _s3yfU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3yPI: // global
           _s3yfV::P64 = P64[_s3yfU::P64 + 7];
           I64[Hp - 16] = sat_s3yfY_info;
           P64[Hp] = _s3yfV::P64;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.311616393 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme1_closure" {
     Text.Read.Lex.$fShowLexeme1_closure:
         const Text.Read.Lex.$fShowLexeme1_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme1_entry() //  [R2]
         { info_tbl: [(c3yQb,
                       label: Text.Read.Lex.$fShowLexeme1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yQb: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme2_closure+1;
           call Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.312583842 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshowList_closure" {
     Text.Read.Lex.$fShowLexeme_$cshowList_closure:
         const Text.Read.Lex.$fShowLexeme_$cshowList_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c3yQi,
                       label: Text.Read.Lex.$fShowLexeme_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yQi: // global
           R4 = R3;
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.31343765 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_closure" {
     Text.Read.Lex.$fShowLexeme_closure:
         const GHC.Show.C:Show_con_info;
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure+2;
         const Text.Read.Lex.$fShowLexeme_$cshow_closure+1;
         const Text.Read.Lex.$fShowLexeme_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.314103681 UTC

[section ""cstring" . Text.Read.Lex.isSymbolChar4_bytes" {
     Text.Read.Lex.isSymbolChar4_bytes:
         I8[] [44,59,40,41,91,93,123,125,96]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.315653089 UTC

[section ""data" . Text.Read.Lex.isSymbolChar3_closure" {
     Text.Read.Lex.isSymbolChar3_closure:
         const Text.Read.Lex.isSymbolChar3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.isSymbolChar3_entry() //  [R1]
         { info_tbl: [(c3yQr,
                       label: Text.Read.Lex.isSymbolChar3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yQr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yQs; else goto c3yQt;
       c3yQs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yQt: // global
           (_c3yQo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yQo::I64 == 0) goto c3yQq; else goto c3yQp;
       c3yQq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yQp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yQo::I64;
           R2 = Text.Read.Lex.isSymbolChar4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.316543361 UTC

[section ""cstring" . Text.Read.Lex.isSymbolChar2_bytes" {
     Text.Read.Lex.isSymbolChar2_bytes:
         I8[] [39,34]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.317723141 UTC

[section ""data" . Text.Read.Lex.isSymbolChar1_closure" {
     Text.Read.Lex.isSymbolChar1_closure:
         const Text.Read.Lex.isSymbolChar1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.isSymbolChar1_entry() //  [R1]
         { info_tbl: [(c3yQA,
                       label: Text.Read.Lex.isSymbolChar1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yQA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yQB; else goto c3yQC;
       c3yQB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yQC: // global
           (_c3yQx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yQx::I64 == 0) goto c3yQz; else goto c3yQy;
       c3yQz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yQy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yQx::I64;
           R2 = Text.Read.Lex.isSymbolChar2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.319528228 UTC

[section ""data" . Text.Read.Lex.isSymbolChar_closure" {
     Text.Read.Lex.isSymbolChar_closure:
         const Text.Read.Lex.isSymbolChar_info;
         const 0;
 },
 Text.Read.Lex.isSymbolChar_entry() //  [R2]
         { info_tbl: [(c3yQN,
                       label: Text.Read.Lex.isSymbolChar_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yQN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3yQO; else goto c3yQP;
       c3yQO: // global
           R2 = R2;
           R1 = Text.Read.Lex.isSymbolChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3yQP: // global
           I64[Sp - 16] = block_c3yQH_info;
           R4 = Text.Read.Lex.isSymbolChar3_closure;
           R3 = R2;
           _s3ygf::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 8] = _s3ygf::P64;
           Sp = Sp - 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3yQH() //  [R1]
         { info_tbl: [(c3yQH,
                       label: block_c3yQH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yQH: // global
           if (R1 & 7 == 1) goto c3yQK; else goto u3yRU;
       c3yQK: // global
           _s3ygf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3yQS_info;
           R1 = _s3ygf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3yS7; else goto c3yQU;
       u3yS7: // global
           call _c3yQS(R1) args: 0, res: 0, upd: 0;
       c3yQU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3yRU: // global
           Sp = Sp + 16;
           call _c3yQL() args: 0, res: 0, upd: 0;
     }
 },
 _c3yQS() //  [R1]
         { info_tbl: [(c3yQS,
                       label: block_c3yQS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yQS: // global
           I64[Sp - 16] = block_c3yQY_info;
           _s3ygi::I64 = I64[R1 + 7];
           R2 = _s3ygi::I64;
           I64[Sp - 8] = _s3ygi::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3yQY() //  [R1]
         { info_tbl: [(c3yQY,
                       label: block_c3yQY_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yQY: // global
           _c3yRQ::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c3yRQ::I64 < 22) goto u3yRS; else goto u3yRV;
       u3yRS: // global
           if (_c3yRQ::I64 < 11) goto u3yRW; else goto u3yRT;
       u3yRW: // global
           Sp = Sp + 24;
           goto u3ySd;
       u3yRT: // global
           switch [11 .. 21] _c3yRQ::I64 {
               case 11 : goto c3yRd;
               case 12 : goto u3yS2;
               case 17 : goto c3yRm;
               case 18, 19, 20, 21 : goto u3yS2;
               default: {goto u3yRX;}
           }
       c3yRm: // global
           _s3ygh::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3yRk_info;
           R4 = Text.Read.Lex.isSymbolChar1_closure;
           R3 = _s3ygh::P64;
           R2 = GHC.Classes.$fEqChar_closure;
           Sp = Sp + 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       u3yS2: // global
           Sp = Sp + 24;
           goto u3ySe;
       c3yRd: // global
           if (I64[Sp + 8] == 95) goto u3yS5; else goto u3yS6;
       u3yS5: // global
           Sp = Sp + 24;
           goto u3ySd;
       u3yS6: // global
           Sp = Sp + 24;
           goto u3ySe;
       u3ySe: // global
           call _c3yRM() args: 0, res: 0, upd: 0;
       u3yRX: // global
           Sp = Sp + 24;
           goto u3ySd;
       u3yRV: // global
           Sp = Sp + 24;
           goto u3ySd;
       u3ySd: // global
           call _c3yQL() args: 0, res: 0, upd: 0;
     }
 },
 _c3yRk() //  [R1]
         { info_tbl: [(c3yRk,
                       label: block_c3yRk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yRk: // global
           if (R1 & 7 == 1) goto u3yS3; else goto u3yS4;
       u3yS3: // global
           Sp = Sp + 8;
           call _c3yRM() args: 0, res: 0, upd: 0;
       u3yS4: // global
           Sp = Sp + 8;
           call _c3yQL() args: 0, res: 0, upd: 0;
     }
 },
 _c3yRM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yRM: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3yQL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yQL: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.321748378 UTC

[section ""cstring" . lvl_r3y8T_bytes" {
     lvl_r3y8T_bytes:
         I8[] [95,39]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.322561817 UTC

[section ""data" . lvl1_r3y8U_closure" {
     lvl1_r3y8U_closure:
         const lvl1_r3y8U_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3y8U_entry() //  [R1]
         { info_tbl: [(c3ySn,
                       label: lvl1_r3y8U_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ySn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ySo; else goto c3ySp;
       c3ySo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ySp: // global
           (_c3ySk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ySk::I64 == 0) goto c3ySm; else goto c3ySl;
       c3ySm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ySl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ySk::I64;
           R2 = lvl_r3y8T_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.323755283 UTC

[section ""data" . $wisIdfChar_r3y8V_closure" {
     $wisIdfChar_r3y8V_closure:
         const $wisIdfChar_r3y8V_info;
         const 0;
 },
 $wisIdfChar_r3y8V_entry() //  [R2]
         { info_tbl: [(c3ySw,
                       label: $wisIdfChar_r3y8V_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ySw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ySA; else goto c3ySz;
       c3ySA: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = $wisIdfChar_r3y8V_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ySz: // global
           (_s3ygr::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(R2);
           if (_s3ygr::I64 == 0) goto c3ySK; else goto c3ySG;
       c3ySK: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R2;
           R4 = lvl1_r3y8U_closure;
           R3 = Hp - 7;
           R2 = GHC.Classes.$fEqChar_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3ySG: // global
           Hp = Hp - 16;
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.324979777 UTC

[section ""data" . isIdfChar_r3y8W_closure" {
     isIdfChar_r3y8W_closure:
         const isIdfChar_r3y8W_info;
         const 0;
 },
 isIdfChar_r3y8W_entry() //  [R2]
         { info_tbl: [(c3ySS,
                       label: isIdfChar_r3y8W_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ySS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3yST; else goto c3ySU;
       c3yST: // global
           R2 = R2;
           R1 = isIdfChar_r3y8W_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ySU: // global
           I64[Sp - 8] = block_c3ySP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ySY; else goto c3ySQ;
       u3ySY: // global
           call _c3ySP(R1) args: 0, res: 0, upd: 0;
       c3ySQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ySP() //  [R1]
         { info_tbl: [(c3ySP,
                       label: block_c3ySP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ySP: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call $wisIdfChar_r3y8V_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.326033094 UTC

[section ""cstring" . reserved_ops_r3y8X_bytes" {
     reserved_ops_r3y8X_bytes:
         I8[] [46,46]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.326791975 UTC

[section ""data" . reserved_ops1_r3y8Y_closure" {
     reserved_ops1_r3y8Y_closure:
         const reserved_ops1_r3y8Y_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops1_r3y8Y_entry() //  [R1]
         { info_tbl: [(c3yT5,
                       label: reserved_ops1_r3y8Y_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yT5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yT6; else goto c3yT7;
       c3yT6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yT7: // global
           (_c3yT2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yT2::I64 == 0) goto c3yT4; else goto c3yT3;
       c3yT4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yT3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yT2::I64;
           R2 = reserved_ops_r3y8X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.327668337 UTC

[section ""cstring" . reserved_ops2_r3y8Z_bytes" {
     reserved_ops2_r3y8Z_bytes:
         I8[] [58,58]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.328433526 UTC

[section ""data" . reserved_ops3_r3y90_closure" {
     reserved_ops3_r3y90_closure:
         const reserved_ops3_r3y90_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops3_r3y90_entry() //  [R1]
         { info_tbl: [(c3yTe,
                       label: reserved_ops3_r3y90_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yTe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yTf; else goto c3yTg;
       c3yTf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yTg: // global
           (_c3yTb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yTb::I64 == 0) goto c3yTd; else goto c3yTc;
       c3yTd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yTc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yTb::I64;
           R2 = reserved_ops2_r3y8Z_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.329432092 UTC

[section ""cstring" . reserved_ops4_r3y91_bytes" {
     reserved_ops4_r3y91_bytes:
         I8[] [61]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.330846838 UTC

[section ""data" . reserved_ops5_r3y92_closure" {
     reserved_ops5_r3y92_closure:
         const reserved_ops5_r3y92_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops5_r3y92_entry() //  [R1]
         { info_tbl: [(c3yTn,
                       label: reserved_ops5_r3y92_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yTn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yTo; else goto c3yTp;
       c3yTo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yTp: // global
           (_c3yTk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yTk::I64 == 0) goto c3yTm; else goto c3yTl;
       c3yTm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yTl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yTk::I64;
           R2 = reserved_ops4_r3y91_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.331759342 UTC

[section ""cstring" . reserved_ops6_r3y93_bytes" {
     reserved_ops6_r3y93_bytes:
         I8[] [92]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.332470451 UTC

[section ""data" . reserved_ops7_r3y94_closure" {
     reserved_ops7_r3y94_closure:
         const reserved_ops7_r3y94_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops7_r3y94_entry() //  [R1]
         { info_tbl: [(c3yTw,
                       label: reserved_ops7_r3y94_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yTw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yTx; else goto c3yTy;
       c3yTx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yTy: // global
           (_c3yTt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yTt::I64 == 0) goto c3yTv; else goto c3yTu;
       c3yTv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yTu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yTt::I64;
           R2 = reserved_ops6_r3y93_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.333407796 UTC

[section ""cstring" . reserved_ops8_r3y95_bytes" {
     reserved_ops8_r3y95_bytes:
         I8[] [124]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.334085204 UTC

[section ""data" . reserved_ops9_r3y96_closure" {
     reserved_ops9_r3y96_closure:
         const reserved_ops9_r3y96_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops9_r3y96_entry() //  [R1]
         { info_tbl: [(c3yTF,
                       label: reserved_ops9_r3y96_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yTF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yTG; else goto c3yTH;
       c3yTG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yTH: // global
           (_c3yTC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yTC::I64 == 0) goto c3yTE; else goto c3yTD;
       c3yTE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yTD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yTC::I64;
           R2 = reserved_ops8_r3y95_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.334906006 UTC

[section ""cstring" . reserved_ops10_r3y97_bytes" {
     reserved_ops10_r3y97_bytes:
         I8[] [60,45]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.335667172 UTC

[section ""data" . reserved_ops11_r3y98_closure" {
     reserved_ops11_r3y98_closure:
         const reserved_ops11_r3y98_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops11_r3y98_entry() //  [R1]
         { info_tbl: [(c3yTO,
                       label: reserved_ops11_r3y98_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yTO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yTP; else goto c3yTQ;
       c3yTP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yTQ: // global
           (_c3yTL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yTL::I64 == 0) goto c3yTN; else goto c3yTM;
       c3yTN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yTM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yTL::I64;
           R2 = reserved_ops10_r3y97_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.336554168 UTC

[section ""cstring" . reserved_ops12_r3y99_bytes" {
     reserved_ops12_r3y99_bytes:
         I8[] [45,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.33731596 UTC

[section ""data" . reserved_ops13_r3y9a_closure" {
     reserved_ops13_r3y9a_closure:
         const reserved_ops13_r3y9a_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops13_r3y9a_entry() //  [R1]
         { info_tbl: [(c3yTX,
                       label: reserved_ops13_r3y9a_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yTX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yTY; else goto c3yTZ;
       c3yTY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yTZ: // global
           (_c3yTU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yTU::I64 == 0) goto c3yTW; else goto c3yTV;
       c3yTW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yTV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yTU::I64;
           R2 = reserved_ops12_r3y99_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.338179766 UTC

[section ""cstring" . reserved_ops14_r3y9b_bytes" {
     reserved_ops14_r3y9b_bytes:
         I8[] [64]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.338911779 UTC

[section ""data" . reserved_ops15_r3y9c_closure" {
     reserved_ops15_r3y9c_closure:
         const reserved_ops15_r3y9c_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops15_r3y9c_entry() //  [R1]
         { info_tbl: [(c3yU6,
                       label: reserved_ops15_r3y9c_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yU6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yU7; else goto c3yU8;
       c3yU7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yU8: // global
           (_c3yU3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yU3::I64 == 0) goto c3yU5; else goto c3yU4;
       c3yU5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yU4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yU3::I64;
           R2 = reserved_ops14_r3y9b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.33982163 UTC

[section ""cstring" . reserved_ops16_r3y9d_bytes" {
     reserved_ops16_r3y9d_bytes:
         I8[] [126]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.340535863 UTC

[section ""data" . reserved_ops17_r3y9e_closure" {
     reserved_ops17_r3y9e_closure:
         const reserved_ops17_r3y9e_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops17_r3y9e_entry() //  [R1]
         { info_tbl: [(c3yUf,
                       label: reserved_ops17_r3y9e_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yUf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yUg; else goto c3yUh;
       c3yUg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yUh: // global
           (_c3yUc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yUc::I64 == 0) goto c3yUe; else goto c3yUd;
       c3yUe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yUd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yUc::I64;
           R2 = reserved_ops16_r3y9d_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.341491571 UTC

[section ""cstring" . reserved_ops18_r3y9f_bytes" {
     reserved_ops18_r3y9f_bytes:
         I8[] [61,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.342193867 UTC

[section ""data" . reserved_ops19_r3y9g_closure" {
     reserved_ops19_r3y9g_closure:
         const reserved_ops19_r3y9g_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops19_r3y9g_entry() //  [R1]
         { info_tbl: [(c3yUo,
                       label: reserved_ops19_r3y9g_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yUo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yUp; else goto c3yUq;
       c3yUp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3yUq: // global
           (_c3yUl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3yUl::I64 == 0) goto c3yUn; else goto c3yUm;
       c3yUn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3yUm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3yUl::I64;
           R2 = reserved_ops18_r3y9f_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.343196713 UTC

[section ""data" . reserved_ops20_r3y9h_closure" {
     reserved_ops20_r3y9h_closure:
         const :_con_info;
         const reserved_ops19_r3y9g_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.34379979 UTC

[section ""data" . reserved_ops21_r3y9i_closure" {
     reserved_ops21_r3y9i_closure:
         const :_con_info;
         const reserved_ops17_r3y9e_closure;
         const reserved_ops20_r3y9h_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.344983022 UTC

[section ""data" . reserved_ops22_r3y9j_closure" {
     reserved_ops22_r3y9j_closure:
         const :_con_info;
         const reserved_ops15_r3y9c_closure;
         const reserved_ops21_r3y9i_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.345674477 UTC

[section ""data" . reserved_ops23_r3y9k_closure" {
     reserved_ops23_r3y9k_closure:
         const :_con_info;
         const reserved_ops13_r3y9a_closure;
         const reserved_ops22_r3y9j_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.346259854 UTC

[section ""data" . reserved_ops24_r3y9l_closure" {
     reserved_ops24_r3y9l_closure:
         const :_con_info;
         const reserved_ops11_r3y98_closure;
         const reserved_ops23_r3y9k_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.346795932 UTC

[section ""data" . reserved_ops25_r3y9m_closure" {
     reserved_ops25_r3y9m_closure:
         const :_con_info;
         const reserved_ops9_r3y96_closure;
         const reserved_ops24_r3y9l_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.347385498 UTC

[section ""data" . reserved_ops26_r3y9n_closure" {
     reserved_ops26_r3y9n_closure:
         const :_con_info;
         const reserved_ops7_r3y94_closure;
         const reserved_ops25_r3y9m_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.347976118 UTC

[section ""data" . reserved_ops27_r3y9o_closure" {
     reserved_ops27_r3y9o_closure:
         const :_con_info;
         const reserved_ops5_r3y92_closure;
         const reserved_ops26_r3y9n_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.348595686 UTC

[section ""data" . reserved_ops28_r3y9p_closure" {
     reserved_ops28_r3y9p_closure:
         const :_con_info;
         const reserved_ops3_r3y90_closure;
         const reserved_ops27_r3y9o_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.349185129 UTC

[section ""data" . reserved_ops29_r3y9q_closure" {
     reserved_ops29_r3y9q_closure:
         const :_con_info;
         const reserved_ops1_r3y8Y_closure;
         const reserved_ops28_r3y9p_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.351837983 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c==1_closure" {
     Text.Read.Lex.$fEqLexeme_$c==1_closure:
         const Text.Read.Lex.$fEqLexeme_$c==1_info;
 },
 Text.Read.Lex.$fEqLexeme_$c==1_entry() //  [R2, R3]
         { info_tbl: [(c3yUC,
                       label: Text.Read.Lex.$fEqLexeme_$c==1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yUC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3yUD; else goto c3yUE;
       c3yUD: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c==1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3yUE: // global
           I64[Sp - 16] = block_c3yUv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3yXp; else goto c3yUw;
       u3yXp: // global
           call _c3yUv(R1) args: 0, res: 0, upd: 0;
       c3yUw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yUv() //  [R1]
         { info_tbl: [(c3yUv,
                       label: block_c3yUv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yUv: // global
           _s3ygy::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3yUz; else goto c3yUA;
       c3yUz: // global
           I64[Sp - 8] = block_c3yUH_info;
           _s3ygA::P64 = P64[R1 + 7];
           _s3ygB::P64 = P64[R1 + 15];
           R1 = _s3ygy::P64;
           P64[Sp] = _s3ygB::P64;
           P64[Sp + 8] = _s3ygA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3yXn; else goto c3yUJ;
       u3yXn: // global
           call _c3yUH(R1) args: 0, res: 0, upd: 0;
       c3yUJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yUA: // global
           I64[Sp - 16] = block_c3yVd_info;
           _s3ygN::P64 = P64[R1 + 6];
           _s3ygO::P64 = P64[R1 + 14];
           _s3ygP::P64 = P64[R1 + 22];
           R1 = _s3ygy::P64;
           P64[Sp - 8] = _s3ygP::P64;
           P64[Sp] = _s3ygO::P64;
           P64[Sp + 8] = _s3ygN::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3yXo; else goto c3yVf;
       u3yXo: // global
           call _c3yVd(R1) args: 0, res: 0, upd: 0;
       c3yVf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yUH() //  [R1]
         { info_tbl: [(c3yUH,
                       label: block_c3yUH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yUH: // global
           if (R1 & 7 == 1) goto c3yUV; else goto u3yXl;
       c3yUV: // global
           I64[Sp - 8] = block_c3yUN_info;
           _s3ygD::P64 = P64[R1 + 7];
           _s3ygE::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s3ygE::P64;
           P64[Sp + 16] = _s3ygD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3yXq; else goto c3yUO;
       u3yXq: // global
           call _c3yUN(R1) args: 0, res: 0, upd: 0;
       c3yUO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3yXl: // global
           Sp = Sp + 24;
           call _c3yWX() args: 0, res: 0, upd: 0;
     }
 },
 _c3yUN() //  [R1]
         { info_tbl: [(c3yUN,
                       label: block_c3yUN_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yUN: // global
           I64[Sp] = block_c3yUS_info;
           _s3ygG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s3ygG::I64;
           if (R1 & 7 != 0) goto u3yXs; else goto c3yUX;
       u3yXs: // global
           call _c3yUS(R1) args: 0, res: 0, upd: 0;
       c3yUX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yUS() //  [R1]
         { info_tbl: [(c3yUS,
                       label: block_c3yUS_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yUS: // global
           if (I64[Sp + 24] == I64[R1 + 7]) goto c3yV6; else goto u3yXm;
       c3yV6: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
       u3yXm: // global
           Sp = Sp + 32;
           call _c3yWX() args: 0, res: 0, upd: 0;
     }
 },
 _c3yVd() //  [R1]
         { info_tbl: [(c3yVd,
                       label: block_c3yVd_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yVd: // global
           if (R1 & 7 == 1) goto u3yXc; else goto c3yVq;
       u3yXc: // global
           Sp = Sp + 32;
           call _c3yWX() args: 0, res: 0, upd: 0;
       c3yVq: // global
           I64[Sp - 8] = block_c3yVo_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 22];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 8;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3yVo() //  [R1]
         { info_tbl: [(c3yVo,
                       label: block_c3yVo_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yVo: // global
           if (R1 & 7 == 1) goto u3yXd; else goto c3yWh;
       u3yXd: // global
           Sp = Sp + 40;
           call _c3yWX() args: 0, res: 0, upd: 0;
       c3yWh: // global
           I64[Sp] = block_c3yVB_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3yXv; else goto c3yWi;
       u3yXv: // global
           call _c3yVB(R1) args: 0, res: 0, upd: 0;
       c3yWi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yVB() //  [R1]
         { info_tbl: [(c3yVB,
                       label: block_c3yVB_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yVB: // global
           _s3ygU::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c3yWp; else goto c3yWF;
       c3yWp: // global
           I64[Sp] = block_c3yWm_info;
           R1 = _s3ygU::P64;
           if (R1 & 7 != 0) goto u3yXx; else goto c3yWq;
       u3yXx: // global
           call _c3yWm(R1) args: 0, res: 0, upd: 0;
       c3yWq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yWF: // global
           I64[Sp] = block_c3yWD_info;
           _s3yh7::P64 = P64[R1 + 6];
           R1 = _s3ygU::P64;
           P64[Sp + 32] = _s3yh7::P64;
           if (R1 & 7 != 0) goto u3yXy; else goto c3yWG;
       u3yXy: // global
           call _c3yWD(R1) args: 0, res: 0, upd: 0;
       c3yWG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yWm() //  [R1]
         { info_tbl: [(c3yWm,
                       label: block_c3yWm_info
                       rep:StackRep [False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yWm: // global
           if (R1 & 7 == 1) goto u3yXh; else goto u3yXi;
       u3yXh: // global
           Sp = Sp + 8;
           call _s3ygX() args: 0, res: 0, upd: 0;
       u3yXi: // global
           Sp = Sp + 40;
           call _c3yWX() args: 0, res: 0, upd: 0;
     }
 },
 _c3yWD() //  [R1]
         { info_tbl: [(c3yWD,
                       label: block_c3yWD_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yWD: // global
           if (R1 & 7 == 1) goto u3yXe; else goto c3yWR;
       u3yXe: // global
           Sp = Sp + 40;
           call _c3yWX() args: 0, res: 0, upd: 0;
       c3yWR: // global
           I64[Sp] = block_c3yWP_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 32];
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3yWP() //  [R1]
         { info_tbl: [(c3yWP,
                       label: block_c3yWP_info
                       rep:StackRep [False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yWP: // global
           if (R1 & 7 == 1) goto u3yXf; else goto u3yXg;
       u3yXf: // global
           Sp = Sp + 40;
           call _c3yWX() args: 0, res: 0, upd: 0;
       u3yXg: // global
           Sp = Sp + 8;
           call _s3ygX() args: 0, res: 0, upd: 0;
     }
 },
 _s3ygX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3ygX: // global
           I64[Sp - 8] = block_c3yVG_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3yXI; else goto c3yVI;
       u3yXI: // global
           call _c3yVG(R1) args: 0, res: 0, upd: 0;
       c3yVI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yVG() //  [R1]
         { info_tbl: [(c3yVG,
                       label: block_c3yVG_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yVG: // global
           _s3ygV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3yVP; else goto c3yW5;
       c3yVP: // global
           I64[Sp + 32] = block_c3yVM_info;
           R1 = _s3ygV::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3yXz; else goto c3yVQ;
       u3yXz: // global
           call _c3yVM(R1) args: 0, res: 0, upd: 0;
       c3yVQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yW5: // global
           I64[Sp + 24] = block_c3yW3_info;
           _s3yh1::P64 = P64[R1 + 6];
           R1 = _s3ygV::P64;
           P64[Sp + 32] = _s3yh1::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3yXA; else goto c3yW6;
       u3yXA: // global
           call _c3yW3(R1) args: 0, res: 0, upd: 0;
       c3yW6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yVM() //  [R1]
         { info_tbl: [(c3yVM,
                       label: block_c3yVM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yVM: // global
           if (R1 & 7 == 1) goto c3yVW; else goto u3yXk;
       c3yVW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3yXk: // global
           Sp = Sp + 8;
           call _c3yWX() args: 0, res: 0, upd: 0;
     }
 },
 _c3yW3() //  [R1]
         { info_tbl: [(c3yW3,
                       label: block_c3yW3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yW3: // global
           if (R1 & 7 == 1) goto u3yXj; else goto c3yWg;
       u3yXj: // global
           Sp = Sp + 16;
           call _c3yWX() args: 0, res: 0, upd: 0;
       c3yWg: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3yWX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yWX: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.356594201 UTC

[section ""data" . Text.Read.Lex.$fEqNumber_$c/=_closure" {
     Text.Read.Lex.$fEqNumber_$c/=_closure:
         const Text.Read.Lex.$fEqNumber_$c/=_info;
 },
 Text.Read.Lex.$fEqNumber_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c3yXT,
                       label: Text.Read.Lex.$fEqNumber_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yXT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3yXU; else goto c3yXV;
       c3yXU: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqNumber_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3yXV: // global
           I64[Sp - 8] = block_c3yXN_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$fEqLexeme_$c==1_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3yXN() //  [R1]
         { info_tbl: [(c3yXN,
                       label: block_c3yXN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yXN: // global
           if (R1 & 7 == 1) goto c3yXQ; else goto c3yXR;
       c3yXQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3yXR: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.357804174 UTC

[section ""data" . Text.Read.Lex.$fEqNumber_closure" {
     Text.Read.Lex.$fEqNumber_closure:
         const GHC.Classes.C:Eq_con_info;
         const Text.Read.Lex.$fEqLexeme_$c==1_closure+2;
         const Text.Read.Lex.$fEqNumber_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.360567565 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c==_closure" {
     Text.Read.Lex.$fEqLexeme_$c==_closure:
         const Text.Read.Lex.$fEqLexeme_$c==_info;
 },
 Text.Read.Lex.$fEqLexeme_$c==_entry() //  [R2, R3]
         { info_tbl: [(c3yYi,
                       label: Text.Read.Lex.$fEqLexeme_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yYi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3yYj; else goto c3yYk;
       c3yYj: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3yYk: // global
           I64[Sp - 16] = block_c3yY6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3z0n; else goto c3yY7;
       u3z0n: // global
           call _c3yY6(R1) args: 0, res: 0, upd: 0;
       c3yY7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yY6() //  [R1]
         { info_tbl: [(c3yY6,
                       label: block_c3yY6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yY6: // global
           _s3yhf::P64 = P64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3yYa;
               case 2 : goto c3yYb;
               case 3 : goto c3yYc;
               case 4 : goto c3yYd;
               case 5 : goto c3yYe;
               case 6 : goto c3yYf;
               case 7 : goto c3yYg;
           }
       c3yYg: // global
           I64[Sp + 8] = block_c3yZP_info;
           R1 = _s3yhf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3z0m; else goto c3yZR;
       u3z0m: // global
           call _c3yZP(R1) args: 0, res: 0, upd: 0;
       c3yZR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yYf: // global
           I64[Sp] = block_c3yZA_info;
           _s3yhw::P64 = P64[R1 + 2];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhw::P64;
           if (R1 & 7 != 0) goto u3z0l; else goto c3yZC;
       u3z0l: // global
           call _c3yZA(R1) args: 0, res: 0, upd: 0;
       c3yZC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yYe: // global
           I64[Sp] = block_c3yZl_info;
           _s3yht::P64 = P64[R1 + 3];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yht::P64;
           if (R1 & 7 != 0) goto u3z0k; else goto c3yZn;
       u3z0k: // global
           call _c3yZl(R1) args: 0, res: 0, upd: 0;
       c3yZn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yYd: // global
           I64[Sp] = block_c3yZ6_info;
           _s3yhq::P64 = P64[R1 + 4];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhq::P64;
           if (R1 & 7 != 0) goto u3z0j; else goto c3yZ8;
       u3z0j: // global
           call _c3yZ6(R1) args: 0, res: 0, upd: 0;
       c3yZ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yYc: // global
           I64[Sp] = block_c3yYR_info;
           _s3yhn::P64 = P64[R1 + 5];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhn::P64;
           if (R1 & 7 != 0) goto u3z0i; else goto c3yYT;
       u3z0i: // global
           call _c3yYR(R1) args: 0, res: 0, upd: 0;
       c3yYT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yYb: // global
           I64[Sp] = block_c3yYC_info;
           _s3yhk::P64 = P64[R1 + 6];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhk::P64;
           if (R1 & 7 != 0) goto u3z0h; else goto c3yYE;
       u3z0h: // global
           call _c3yYC(R1) args: 0, res: 0, upd: 0;
       c3yYE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3yYa: // global
           I64[Sp] = block_c3yYn_info;
           _s3yhh::P64 = P64[R1 + 7];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhh::P64;
           if (R1 & 7 != 0) goto u3z0g; else goto c3yYp;
       u3z0g: // global
           call _c3yYn(R1) args: 0, res: 0, upd: 0;
       c3yYp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3yZP() //  [R1]
         { info_tbl: [(c3yZP,
                       label: block_c3yZP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yZP: // global
           if (R1 & 7 == 7) goto c3z01; else goto u3z09;
       c3z01: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3z09: // global
           Sp = Sp + 8;
           call _c3yZX() args: 0, res: 0, upd: 0;
     }
 },
 _c3yZA() //  [R1]
         { info_tbl: [(c3yZA,
                       label: block_c3yZA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yZA: // global
           if (R1 & 7 == 6) goto c3yZM; else goto u3z0a;
       c3yZM: // global
           R3 = P64[R1 + 2];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.Read.Lex.$fEqLexeme_$c==1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       u3z0a: // global
           Sp = Sp + 16;
           call _c3yZX() args: 0, res: 0, upd: 0;
     }
 },
 _c3yZl() //  [R1]
         { info_tbl: [(c3yZl,
                       label: block_c3yZl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yZl: // global
           if (R1 & 7 == 5) goto c3yZx; else goto u3z0b;
       c3yZx: // global
           R3 = P64[R1 + 3];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3z0b: // global
           Sp = Sp + 16;
           call _c3yZX() args: 0, res: 0, upd: 0;
     }
 },
 _c3yZ6() //  [R1]
         { info_tbl: [(c3yZ6,
                       label: block_c3yZ6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yZ6: // global
           if (R1 & 7 == 4) goto c3yZi; else goto u3z0c;
       c3yZi: // global
           R3 = P64[R1 + 4];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3z0c: // global
           Sp = Sp + 16;
           call _c3yZX() args: 0, res: 0, upd: 0;
     }
 },
 _c3yYR() //  [R1]
         { info_tbl: [(c3yYR,
                       label: block_c3yYR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yYR: // global
           if (R1 & 7 == 3) goto c3yZ3; else goto u3z0d;
       c3yZ3: // global
           R3 = P64[R1 + 5];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3z0d: // global
           Sp = Sp + 16;
           call _c3yZX() args: 0, res: 0, upd: 0;
     }
 },
 _c3yYC() //  [R1]
         { info_tbl: [(c3yYC,
                       label: block_c3yYC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yYC: // global
           if (R1 & 7 == 2) goto c3yYO; else goto u3z0e;
       c3yYO: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3z0e: // global
           Sp = Sp + 16;
           call _c3yZX() args: 0, res: 0, upd: 0;
     }
 },
 _c3yYn() //  [R1]
         { info_tbl: [(c3yYn,
                       label: block_c3yYn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yYn: // global
           if (R1 & 7 == 1) goto c3yYz; else goto u3z0f;
       c3yYz: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.eqChar_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3z0f: // global
           Sp = Sp + 16;
           call _c3yZX() args: 0, res: 0, upd: 0;
     }
 },
 _c3yZX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3yZX: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.364492098 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c/=_closure" {
     Text.Read.Lex.$fEqLexeme_$c/=_closure:
         const Text.Read.Lex.$fEqLexeme_$c/=_info;
 },
 Text.Read.Lex.$fEqLexeme_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c3z0F,
                       label: Text.Read.Lex.$fEqLexeme_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z0F: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3z0G; else goto c3z0H;
       c3z0G: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3z0H: // global
           I64[Sp - 8] = block_c3z0z_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$fEqLexeme_$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z0z() //  [R1]
         { info_tbl: [(c3z0z,
                       label: block_c3z0z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z0z: // global
           if (R1 & 7 == 1) goto c3z0C; else goto c3z0D;
       c3z0C: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3z0D: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.365642493 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_closure" {
     Text.Read.Lex.$fEqLexeme_closure:
         const GHC.Classes.C:Eq_con_info;
         const Text.Read.Lex.$fEqLexeme_$c==_closure+2;
         const Text.Read.Lex.$fEqLexeme_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.366539023 UTC

[section ""data" . Text.Read.Lex.numberToFixed2_closure" {
     Text.Read.Lex.numberToFixed2_closure:
         const Text.Read.Lex.numberToFixed2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToFixed2_entry() //  [R1]
         { info_tbl: [(c3z0U,
                       label: Text.Read.Lex.numberToFixed2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z0U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3z0V; else goto c3z0W;
       c3z0V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z0W: // global
           (_c3z0R::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3z0R::I64 == 0) goto c3z0T; else goto c3z0S;
       c3z0T: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3z0S: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3z0R::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.367508412 UTC

[section ""cstring" . lvl2_r3y9r_bytes" {
     lvl2_r3y9r_bytes:
         I8[] [116,104,105,115,32,115,104,111,117,108,100,32,110,111,116,32,104,97,112,112,101,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.368352371 UTC

[section ""data" . lvl3_r3y9s_closure" {
     lvl3_r3y9s_closure:
         const lvl3_r3y9s_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r3y9s_entry() //  [R1]
         { info_tbl: [(c3z15,
                       label: lvl3_r3y9s_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z15: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3z16; else goto c3z17;
       c3z16: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z17: // global
           (_c3z10::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3z10::I64 == 0) goto c3z12; else goto c3z11;
       c3z12: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3z11: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3z10::I64;
           I64[Sp - 24] = block_c3z13_info;
           R2 = lvl2_r3y9r_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3z13() //  [R1]
         { info_tbl: [(c3z13,
                       label: block_c3z13_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z13: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.370570948 UTC

[section ""data" . combine_r3y9t_closure" {
     combine_r3y9t_closure:
         const combine_r3y9t_info;
         const 0;
 },
 sat_s3yhO_entry() //  [R1]
         { info_tbl: [(c3z1D,
                       label: sat_s3yhO_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z1D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3z1E; else goto c3z1F;
       c3z1E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z1F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call combine_r3y9t_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 combine_r3y9t_entry() //  [R2, R3]
         { info_tbl: [(c3z1K,
                       label: combine_r3y9t_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z1K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3z1L; else goto c3z1M;
       c3z1L: // global
           R3 = R3;
           R2 = R2;
           R1 = combine_r3y9t_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3z1M: // global
           I64[Sp - 16] = block_c3z1f_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3z23; else goto c3z1g;
       u3z23: // global
           call _c3z1f(R1) args: 0, res: 0, upd: 0;
       c3z1g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3z1f() //  [R1]
         { info_tbl: [(c3z1f,
                       label: block_c3z1f_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z1f: // global
           if (R1 & 7 == 1) goto c3z1H; else goto c3z1I;
       c3z1H: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3z1I: // global
           I64[Sp - 8] = block_c3z1l_info;
           _s3yhH::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3yhH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3z22; else goto c3z1m;
       u3z22: // global
           call _c3z1l(R1) args: 0, res: 0, upd: 0;
       c3z1m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3z1l() //  [R1]
         { info_tbl: [(c3z1l,
                       label: block_c3z1l_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z1l: // global
           if (R1 & 7 == 1) goto c3z1T; else goto c3z1W;
       c3z1T: // global
           R1 = lvl3_r3y9s_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3z1W: // global
           I64[Sp - 8] = block_c3z1r_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z1r() //  [R1]
         { info_tbl: [(c3z1r,
                       label: block_c3z1r_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z1r: // global
           I64[Sp] = block_c3z1v_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z1v() //  [R1]
         { info_tbl: [(c3z1v,
                       label: block_c3z1v_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z1v: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3z20; else goto c3z1Z;
       c3z20: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3z1Z: // global
           I64[Hp - 48] = sat_s3yhO_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.374671493 UTC

[section ""data" . Text.Read.Lex.numberToFixed_go_closure" {
     Text.Read.Lex.numberToFixed_go_closure:
         const Text.Read.Lex.numberToFixed_go_info;
         const 0;
 },
 Text.Read.Lex.numberToFixed_go_entry() //  [R2, R3, R4]
         { info_tbl: [(c3z38,
                       label: Text.Read.Lex.numberToFixed_go_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z38: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3z39; else goto u3z46;
       c3z39: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_go_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3z46: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3z25() args: 0, res: 0, upd: 0;
     }
 },
 _c3z25() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z25: // global
           I64[Sp - 8] = block_c3z28_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3z4d; else goto c3z29;
       u3z4d: // global
           call _c3z28(R1) args: 0, res: 0, upd: 0;
       c3z29: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3z28() //  [R1]
         { info_tbl: [(c3z28,
                       label: block_c3z28_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z28: // global
           if (R1 & 7 == 1) goto c3z35; else goto c3z36;
       c3z35: // global
           R1 = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3z36: // global
           I64[Sp - 8] = block_c3z2e_info;
           _s3yhS::P64 = R1;
           _s3yhT::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3yhT::P64;
           P64[Sp + 24] = _s3yhS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3z4e; else goto c3z2f;
       u3z4e: // global
           call _c3z2e(R1) args: 0, res: 0, upd: 0;
       c3z2f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3z2e() //  [R1]
         { info_tbl: [(c3z2e,
                       label: block_c3z2e_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z2e: // global
           if (R1 & 7 == 1) goto c3z3h; else goto c3z3j;
       c3z3h: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3z3j: // global
           I64[Sp + 8] = block_c3z2k_info;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3z4f; else goto c3z2l;
       u3z4f: // global
           call _c3z2k(R1) args: 0, res: 0, upd: 0;
       c3z2l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3z2k() //  [R1]
         { info_tbl: [(c3z2k,
                       label: block_c3z2k_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z2k: // global
           _s3yhZ::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_s3yhZ::I64, 40)) goto c3z3O; else goto c3z3P;
       c3z3O: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 8;
           call _c3z3o() args: 0, res: 0, upd: 0;
       c3z3P: // global
           I64[Sp] = block_c3z2t_info;
           _s3yhP::P64 = P64[Sp + 8];
           R3 = _s3yhP::P64;
           R2 = _s3yhP::P64;
           I64[Sp + 16] = _s3yhZ::I64;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z3o() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z3o: // global
           I64[Sp - 8] = block_c3z3q_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3z4m; else goto c3z3s;
       u3z4m: // global
           call _c3z3q(R1) args: 0, res: 0, upd: 0;
       c3z3s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3z3q() //  [R1]
         { info_tbl: [(c3z3q,
                       label: block_c3z3q_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z3q: // global
           _s3yi2::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3z3y; else goto c3z3H;
       c3z3y: // global
           R1 = _s3yi2::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3z3H: // global
           I64[Sp] = block_c3z3B_info;
           R3 = P64[Sp + 8];
           R2 = _s3yi2::P64;
           P64[Sp + 16] = P64[R1 + 14];
           P64[Sp + 24] = P64[R1 + 6];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z3B() //  [R1]
         { info_tbl: [(c3z3B,
                       label: block_c3z3B_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z3B: // global
           I64[Sp] = block_c3z3F_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z3F() //  [R1]
         { info_tbl: [(c3z3F,
                       label: block_c3z3F_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z3F: // global
           P64[Sp + 24] = R1;
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp + 8;
           call _c3z3o() args: 0, res: 0, upd: 0;
     }
 },
 _c3z2t() //  [R1]
         { info_tbl: [(c3z2t,
                       label: block_c3z2t_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z2t: // global
           _s3yhZ::I64 = I64[Sp + 16];
           _s3yia::I64 = _s3yhZ::I64 - (_s3yhZ::I64 + (_s3yhZ::I64 >> 63)) & (-2);
           if (_s3yia::I64 == 0) goto c3z3Z; else goto u3z49;
       c3z3Z: // global
           _s3yhP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3z2T_info;
           R3 = P64[Sp + 24];
           R2 = _s3yhP::P64;
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call combine_r3y9t_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3z49: // global
           I64[Sp - 8] = _s3yia::I64;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c3z2B() args: 0, res: 0, upd: 0;
     }
 },
 _c3z2T() //  [R1]
         { info_tbl: [(c3z2T,
                       label: block_c3z2T_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z2T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3z43; else goto c3z42;
       c3z43: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3z42: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3yig::I64 = I64[Sp + 8] + 1;
           I64[Hp] = %MO_S_Shr_W64(_s3yig::I64 + (_s3yig::I64 >> 63), 1);
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = R1;
           call _c3z25() args: 0, res: 0, upd: 0;
     }
 },
 _c3z2B() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z2B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3z3V; else goto c3z3U;
       c3z3V: // global
           HpAlloc = 24;
           _s3yia::I64 = I64[Sp];
           I64[Sp] = block_c3z2A_info;
           R1 = _s3yia::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3z3U: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Text.Read.Lex.numberToFixed2_closure;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3z2E_info;
           R3 = Hp - 14;
           R2 = P64[Sp + 16];
           call combine_r3y9t_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z2A() //  [R1]
         { info_tbl: [(c3z2A,
                       label: block_c3z2A_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z2A: // global
           I64[Sp] = R1;
           call _c3z2B() args: 0, res: 0, upd: 0;
     }
 },
 _c3z2E() //  [R1]
         { info_tbl: [(c3z2E,
                       label: block_c3z2E_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z2E: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3z3Y; else goto c3z3X;
       c3z3Y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3z3X: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3yib::I64 = I64[Sp + 24] + 1;
           I64[Hp] = %MO_S_Shr_W64(_s3yib::I64 + (_s3yib::I64 >> 63), 1);
           P64[Sp + 16] = P64[Sp + 8];
           P64[Sp + 24] = Hp - 7;
           P64[Sp + 32] = R1;
           Sp = Sp + 16;
           call _c3z25() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.380091691 UTC

[section ""data" . Text.Read.Lex.valInteger_closure" {
     Text.Read.Lex.valInteger_closure:
         const Text.Read.Lex.valInteger_info;
         const 0;
 },
 sat_s3yin_entry() //  [R1]
         { info_tbl: [(c3z4C,
                       label: sat_s3yin_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z4C: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3z4G; else goto c3z4H;
       c3z4G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z4H: // global
           I64[Sp - 8] = block_c3z4A_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z4A() //  [R1]
         { info_tbl: [(c3z4A,
                       label: block_c3z4A_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z4A: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3z4K; else goto c3z4J;
       c3z4K: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3z4J: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.valInteger_entry() //  [R2, R3]
         { info_tbl: [(c3z4L,
                       label: Text.Read.Lex.valInteger_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z4L: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3z4M; else goto c3z4N;
       c3z4M: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.valInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3z4N: // global
           I64[Sp - 24] = block_c3z4s_info;
           _s3yil::P64 = R3;
           R3 = R3;
           _s3yik::P64 = R2;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 16] = _s3yik::P64;
           P64[Sp - 8] = _s3yil::P64;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z4s() //  [R1]
         { info_tbl: [(c3z4s,
                       label: block_c3z4s_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z4s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3z4Q; else goto c3z4P;
       c3z4Q: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3z4P: // global
           I64[Hp - 16] = sat_s3yin_info;
           P64[Hp] = P64[Sp + 16];
           R4 = R1;
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.383255718 UTC

[section ""data" . Text.Read.Lex.$w$sreadIntP_closure" {
     Text.Read.Lex.$w$sreadIntP_closure:
         const Text.Read.Lex.$w$sreadIntP_info;
         const 0;
 },
 sat_s3yiz_entry() //  [R1]
         { info_tbl: [(c3z5t,
                       label: sat_s3yiz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z5t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3z5x; else goto c3z5y;
       c3z5x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z5y: // global
           I64[Sp - 8] = block_c3z5r_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z5r() //  [R1]
         { info_tbl: [(c3z5r,
                       label: block_c3z5r_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z5r: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3z5B; else goto c3z5A;
       c3z5B: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3z5A: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yiB_entry() //  [R1]
         { info_tbl: [(c3z5C,
                       label: sat_s3yiB_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z5C: // global
           _s3yiB::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3z5D; else goto c3z5E;
       c3z5E: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3z5G; else goto c3z5F;
       c3z5G: // global
           HpAlloc = 24;
           goto c3z5D;
       c3z5D: // global
           R1 = _s3yiB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z5F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yiB::P64;
           _s3yip::P64 = P64[_s3yiB::P64 + 16];
           _s3yir::P64 = P64[_s3yiB::P64 + 24];
           _s3yit::P64 = P64[_s3yiB::P64 + 32];
           _s3yiv::P64 = P64[_s3yiB::P64 + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yit::P64;
           P64[Hp] = _s3yiv::P64;
           I64[Sp - 32] = block_c3z5f_info;
           R3 = Hp - 14;
           R2 = _s3yir::P64;
           P64[Sp - 24] = _s3yip::P64;
           Sp = Sp - 32;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3z5f() //  [R1]
         { info_tbl: [(c3z5f,
                       label: block_c3z5f_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z5f: // global
           I64[Sp - 8] = block_c3z5j_info;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3z5j() //  [R1]
         { info_tbl: [(c3z5j,
                       label: block_c3z5j_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z5j: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3z5K; else goto c3z5J;
       c3z5K: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3z5J: // global
           I64[Hp - 16] = sat_s3yiz_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yiC_entry() //  [R1, R2]
         { info_tbl: [(c3z5L,
                       label: sat_s3yiC_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z5L: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3z5P; else goto c3z5O;
       c3z5P: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3z5O: // global
           _s3yip::P64 = P64[R1 + 7];
           _s3yir::P64 = P64[R1 + 15];
           _s3yis::P64 = P64[R1 + 23];
           _s3yit::P64 = P64[R1 + 31];
           I64[Hp - 40] = sat_s3yiB_info;
           P64[Hp - 24] = _s3yip::P64;
           P64[Hp - 16] = _s3yir::P64;
           P64[Hp - 8] = _s3yit::P64;
           P64[Hp] = R2;
           R2 = Hp - 40;
           R1 = _s3yis::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yiF_entry() //  [R1, R2]
         { info_tbl: [(c3z5U,
                       label: sat_s3yiF_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z5U: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3z5V; else goto c3z5W;
       c3z5V: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3z5W: // global
           I64[Sp - 48] = block_c3z50_info;
           _s3yit::P64 = R2;
           R2 = R2;
           _s3yip::P64 = P64[R1 + 7];
           _s3yiq::P64 = P64[R1 + 15];
           _s3yir::P64 = P64[R1 + 23];
           _s3yis::P64 = P64[R1 + 31];
           R1 = _s3yiq::P64;
           P64[Sp - 40] = _s3yip::P64;
           P64[Sp - 32] = _s3yiq::P64;
           P64[Sp - 24] = _s3yir::P64;
           P64[Sp - 16] = _s3yis::P64;
           P64[Sp - 8] = _s3yit::P64;
           Sp = Sp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3z50() //  [R1]
         { info_tbl: [(c3z50,
                       label: block_c3z50_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z50: // global
           if (R1 & 7 == 1) goto c3z5R; else goto c3z5S;
       c3z5R: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3z5S: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3z64; else goto c3z63;
       c3z64: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3z63: // global
           I64[Hp - 32] = sat_s3yiC_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           I64[Sp + 40] = block_c3z5Z_info;
           R3 = Hp - 31;
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z5Z() //  [R1]
         { info_tbl: [(c3z5Z,
                       label: block_c3z5Z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z5Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3z67; else goto c3z66;
       c3z67: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3z66: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$w$sreadIntP_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3z68,
                       label: Text.Read.Lex.$w$sreadIntP_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z68: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3z6c; else goto c3z6b;
       c3z6c: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$sreadIntP_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3z6b: // global
           I64[Hp - 32] = sat_s3yiF_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.387153573 UTC

[section ""data" . Text.Read.Lex.readIntP1_closure" {
     Text.Read.Lex.readIntP1_closure:
         const Text.Read.Lex.readIntP1_info;
         const 0;
 },
 Text.Read.Lex.readIntP1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3z6k,
                       label: Text.Read.Lex.readIntP1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z6k: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3z6l; else goto c3z6m;
       c3z6l: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readIntP1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3z6m: // global
           I64[Sp - 8] = block_c3z6h_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z6h() //  [R1]
         { info_tbl: [(c3z6h,
                       label: block_c3z6h_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z6h: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3z6p; else goto c3z6o;
       c3z6p: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3z6o: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.388510937 UTC

[section ""data" . Text.Read.Lex.readIntP_$sreadIntP_closure" {
     Text.Read.Lex.readIntP_$sreadIntP_closure:
         const Text.Read.Lex.readIntP_$sreadIntP_info;
         const 0;
 },
 Text.Read.Lex.readIntP_$sreadIntP_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3z6u,
                       label: Text.Read.Lex.readIntP_$sreadIntP_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z6u: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readIntP1_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.391650398 UTC

[section ""data" . Text.Read.Lex.$wreadIntP_closure" {
     Text.Read.Lex.$wreadIntP_closure:
         const Text.Read.Lex.$wreadIntP_info;
         const 0;
 },
 lvl116_s3yiR_entry() //  [R1]
         { info_tbl: [(c3z6F,
                       label: lvl116_s3yiR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z6F: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3z6G; else goto c3z6H;
       c3z6G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z6H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yj4_entry() //  [R1]
         { info_tbl: [(c3z7s,
                       label: sat_s3yj4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z7s: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3z7t; else goto c3z7u;
       c3z7t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z7u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3z7p_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3z7y; else goto c3z7q;
       u3z7y: // global
           call _c3z7p(R1) args: 0, res: 0, upd: 0;
       c3z7q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3z7p() //  [R1]
         { info_tbl: [(c3z7p,
                       label: block_c3z7p_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z7p: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yj5_entry() //  [R1]
         { info_tbl: [(c3z7z,
                       label: sat_s3yj5_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z7z: // global
           _s3yj5::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3z7A; else goto c3z7B;
       c3z7B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3z7D; else goto c3z7C;
       c3z7D: // global
           HpAlloc = 24;
           goto c3z7A;
       c3z7A: // global
           R1 = _s3yj5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z7C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yj5::P64;
           _s3yiM::P64 = P64[_s3yj5::P64 + 16];
           _s3yiZ::P64 = P64[_s3yj5::P64 + 24];
           I64[Hp - 16] = sat_s3yj4_info;
           P64[Hp] = _s3yiZ::P64;
           R2 = _s3yiM::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yj1_entry() //  [R1]
         { info_tbl: [(c3z7I,
                       label: sat_s3yj1_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z7I: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3z7J; else goto c3z7K;
       c3z7J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z7K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s3yj9_entry() //  [R1]
         { info_tbl: [(c3z7L,
                       label: sat_s3yj9_info
                       rep:HeapRep 6 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z7L: // global
           _s3yj9::P64 = R1;
           if ((Sp + -72) < SpLim) (likely: False) goto c3z7M; else goto c3z7N;
       c3z7N: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3z7P; else goto c3z7O;
       c3z7P: // global
           HpAlloc = 24;
           goto c3z7M;
       c3z7M: // global
           R1 = _s3yj9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z7O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yj9::P64;
           _s3yiM::P64 = P64[_s3yj9::P64 + 16];
           _s3yiN::P64 = P64[_s3yj9::P64 + 24];
           _s3yiP::P64 = P64[_s3yj9::P64 + 32];
           _s3yiR::P64 = P64[_s3yj9::P64 + 40];
           _s3yiS::P64 = P64[_s3yj9::P64 + 48];
           _s3yiU::P64 = P64[_s3yj9::P64 + 56];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yiS::P64;
           P64[Hp] = _s3yiU::P64;
           I64[Sp - 48] = block_c3z72_info;
           R3 = Hp - 14;
           R2 = _s3yiP::P64;
           P64[Sp - 40] = _s3yiM::P64;
           P64[Sp - 32] = _s3yiN::P64;
           P64[Sp - 24] = _s3yiR::P64;
           Sp = Sp - 48;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3z72() //  [R1]
         { info_tbl: [(c3z72,
                       label: block_c3z72_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z72: // global
           P64[Sp] = R1;
           P64[Sp + 24] = P64[Sp + 24];
           call _c3z79() args: 0, res: 0, upd: 0;
     }
 },
 _c3z79() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z79: // global
           _s3yiX::P64 = P64[Sp];
           I64[Sp] = block_c3z7b_info;
           R1 = _s3yiX::P64;
           if (R1 & 7 != 0) goto u3z87; else goto c3z7c;
       u3z87: // global
           call _c3z7b(R1) args: 0, res: 0, upd: 0;
       c3z7c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3z7b() //  [R1]
         { info_tbl: [(c3z7b,
                       label: block_c3z7b_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z7b: // global
           _s3yiW::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3z7V; else goto c3z7X;
       c3z7V: // global
           R1 = _s3yiW::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c3z7X: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3z80; else goto c3z7Z;
       c3z80: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3z7Z: // global
           _s3yiZ::P64 = P64[R1 + 6];
           _s3yj0::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_s3yj5_info;
           _s3yiM::P64 = P64[Sp + 8];
           P64[Hp - 48] = _s3yiM::P64;
           P64[Hp - 40] = _s3yiZ::P64;
           I64[Hp - 32] = sat_s3yj1_info;
           P64[Hp - 16] = _s3yiM::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s3yiW::P64;
           I64[Sp] = block_c3z7W_info;
           R2 = _s3yiM::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 64;
           P64[Sp + 24] = _s3yj0::P64;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 _c3z7W() //  [R1]
         { info_tbl: [(c3z7W,
                       label: block_c3z7W_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z7W: // global
           _s3yiX::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp] = _s3yiX::P64;
           call _c3z79() args: 0, res: 0, upd: 0;
     }
 },
 sat_s3yja_entry() //  [R1, R2]
         { info_tbl: [(c3z89,
                       label: sat_s3yja_info
                       rep:HeapRep 6 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z89: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3z8d; else goto c3z8c;
       c3z8d: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3z8c: // global
           _s3yiM::P64 = P64[R1 + 7];
           _s3yiN::P64 = P64[R1 + 15];
           _s3yiP::P64 = P64[R1 + 23];
           _s3yiQ::P64 = P64[R1 + 31];
           _s3yiR::P64 = P64[R1 + 39];
           _s3yiS::P64 = P64[R1 + 47];
           I64[Hp - 56] = sat_s3yj9_info;
           P64[Hp - 40] = _s3yiM::P64;
           P64[Hp - 32] = _s3yiN::P64;
           P64[Hp - 24] = _s3yiP::P64;
           P64[Hp - 16] = _s3yiR::P64;
           P64[Hp - 8] = _s3yiS::P64;
           P64[Hp] = R2;
           R2 = Hp - 56;
           R1 = _s3yiQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yjd_entry() //  [R1, R2]
         { info_tbl: [(c3z8i,
                       label: sat_s3yjd_info
                       rep:HeapRep 6 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z8i: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3z8j; else goto c3z8k;
       c3z8j: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3z8k: // global
           I64[Sp - 64] = block_c3z6N_info;
           _s3yiS::P64 = R2;
           R2 = R2;
           _s3yiM::P64 = P64[R1 + 7];
           _s3yiN::P64 = P64[R1 + 15];
           _s3yiO::P64 = P64[R1 + 23];
           _s3yiP::P64 = P64[R1 + 31];
           _s3yiQ::P64 = P64[R1 + 39];
           _s3yiR::P64 = P64[R1 + 47];
           R1 = _s3yiO::P64;
           P64[Sp - 56] = _s3yiM::P64;
           P64[Sp - 48] = _s3yiN::P64;
           P64[Sp - 40] = _s3yiO::P64;
           P64[Sp - 32] = _s3yiP::P64;
           P64[Sp - 24] = _s3yiQ::P64;
           P64[Sp - 16] = _s3yiR::P64;
           P64[Sp - 8] = _s3yiS::P64;
           Sp = Sp - 64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3z6N() //  [R1]
         { info_tbl: [(c3z6N,
                       label: block_c3z6N_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z6N: // global
           if (R1 & 7 == 1) goto c3z8f; else goto c3z8g;
       c3z8f: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3z8g: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3z8s; else goto c3z8r;
       c3z8s: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3z8r: // global
           I64[Hp - 48] = sat_s3yja_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           I64[Sp + 56] = block_c3z8n_info;
           R3 = Hp - 47;
           R2 = P64[Sp + 24];
           Sp = Sp + 56;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z8n() //  [R1]
         { info_tbl: [(c3z8n,
                       label: block_c3z8n_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z8n: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3z8v; else goto c3z8u;
       c3z8v: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3z8u: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wreadIntP_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3z8w,
                       label: Text.Read.Lex.$wreadIntP_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z8w: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3z8A; else goto c3z8z;
       c3z8A: // global
           HpAlloc = 80;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wreadIntP_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3z8z: // global
           I64[Hp - 72] = lvl116_s3yiR_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3yjd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = Hp - 72;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.398064107 UTC

[section ""data" . Text.Read.Lex.readIntP2_closure" {
     Text.Read.Lex.readIntP2_closure:
         const Text.Read.Lex.readIntP2_info;
         const 0;
 },
 Text.Read.Lex.readIntP2_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3z8I,
                       label: Text.Read.Lex.readIntP2_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z8I: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3z8J; else goto c3z8K;
       c3z8J: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readIntP2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3z8K: // global
           I64[Sp - 8] = block_c3z8F_info;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z8F() //  [R1]
         { info_tbl: [(c3z8F,
                       label: block_c3z8F_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z8F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3z8N; else goto c3z8M;
       c3z8N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3z8M: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.399424118 UTC

[section ""data" . Text.Read.Lex.readIntP_closure" {
     Text.Read.Lex.readIntP_closure:
         const Text.Read.Lex.readIntP_info;
         const 0;
 },
 Text.Read.Lex.readIntP_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3z8S,
                       label: Text.Read.Lex.readIntP_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z8S: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readIntP2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.40027101 UTC

[section ""data" . sat_s3yjl_closure" {
     sat_s3yjl_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.400823654 UTC

[section ""data" . sat_s3yjm_closure" {
     sat_s3yjm_closure:
         const :_con_info;
         const sat_s3yjl_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.40240714 UTC

[section ""data" . Text.Read.Lex.numberToFixed1_closure" {
     Text.Read.Lex.numberToFixed1_closure:
         const Text.Read.Lex.numberToFixed1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToFixed1_entry() //  [R1]
         { info_tbl: [(c3z91,
                       label: Text.Read.Lex.numberToFixed1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z91: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3z92; else goto c3z93;
       c3z92: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z93: // global
           (_c3z8Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3z8Y::I64 == 0) goto c3z90; else goto c3z8Z;
       c3z90: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3z8Z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3z8Y::I64;
           R3 = sat_s3yjm_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.404868852 UTC

[section ""data" . Text.Read.Lex.numberToInteger_closure" {
     Text.Read.Lex.numberToInteger_closure:
         const Text.Read.Lex.numberToInteger_info;
         const 0;
 },
 sat_s3yjt_entry() //  [R1]
         { info_tbl: [(c3z9r,
                       label: sat_s3yjt_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z9r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3z9v; else goto c3z9w;
       c3z9v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z9w: // global
           I64[Sp - 8] = block_c3z9p_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3z9p() //  [R1]
         { info_tbl: [(c3z9p,
                       label: block_c3z9p_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z9p: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3z9z; else goto c3z9y;
       c3z9z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3z9y: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yjr_entry() //  [R1]
         { info_tbl: [(c3z9E,
                       label: sat_s3yjr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z9E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3z9F; else goto c3z9G;
       c3z9F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z9G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yjv_entry() //  [R1]
         { info_tbl: [(c3z9H,
                       label: sat_s3yjv_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z9H: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3z9I; else goto c3z9J;
       c3z9I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3z9J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3z9h_info;
           _s3yjq::P64 = P64[R1 + 24];
           R3 = _s3yjq::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s3yjq::P64;
           Sp = Sp - 40;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3z9h() //  [R1]
         { info_tbl: [(c3z9h,
                       label: block_c3z9h_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z9h: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3z9M; else goto c3z9L;
       c3z9M: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3z9L: // global
           I64[Hp - 40] = sat_s3yjt_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_s3yjr_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yjB_entry() //  [R1]
         { info_tbl: [(c3za3,
                       label: sat_s3yjB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3za3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3za4; else goto c3za5;
       c3za4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3za5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.numberToInteger_entry() //  [R2]
         { info_tbl: [(c3zaa,
                       label: Text.Read.Lex.numberToInteger_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zaa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3zab; else goto c3zac;
       c3zab: // global
           R2 = R2;
           R1 = Text.Read.Lex.numberToInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zac: // global
           I64[Sp - 8] = block_c3z98_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3zaH; else goto c3z99;
       u3zaH: // global
           call _c3z98(R1) args: 0, res: 0, upd: 0;
       c3z99: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3z98() //  [R1]
         { info_tbl: [(c3z98,
                       label: block_c3z98_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z98: // global
           if (R1 & 7 == 1) goto c3za7; else goto c3za8;
       c3za7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3zag; else goto c3zaf;
       c3zag: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zaf: // global
           _s3yjp::P64 = P64[R1 + 7];
           _s3yjq::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3yjv_info;
           P64[Hp - 24] = _s3yjp::P64;
           P64[Hp - 16] = _s3yjq::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3za8: // global
           I64[Sp - 16] = block_c3z9P_info;
           _s3yjw::P64 = P64[R1 + 6];
           _s3yjy::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3yjy::P64;
           P64[Sp] = _s3yjw::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3zaD; else goto c3z9Q;
       u3zaD: // global
           call _c3z9P(R1) args: 0, res: 0, upd: 0;
       c3z9Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3z9P() //  [R1]
         { info_tbl: [(c3z9P,
                       label: block_c3z9P_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z9P: // global
           if (R1 & 7 == 1) goto c3zak; else goto u3zaB;
       c3zak: // global
           _s3yjy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3z9U_info;
           R1 = _s3yjy::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3zaE; else goto c3z9V;
       u3zaE: // global
           call _c3z9U(R1) args: 0, res: 0, upd: 0;
       c3z9V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3zaB: // global
           Sp = Sp + 24;
           call _c3zay() args: 0, res: 0, upd: 0;
     }
 },
 _c3z9U() //  [R1]
         { info_tbl: [(c3z9U,
                       label: block_c3z9U_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3z9U: // global
           if (R1 & 7 == 1) goto c3zan; else goto u3zaC;
       c3zan: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zaq; else goto c3zap;
       c3zaq: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zap: // global
           I64[Hp - 32] = sat_s3yjB_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3zaC: // global
           Sp = Sp + 16;
           call _c3zay() args: 0, res: 0, upd: 0;
     }
 },
 _c3zay() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zay: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.408527922 UTC

[section ""data" . sat_s3yjE_closure" {
     sat_s3yjE_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.409849233 UTC

[section ""data" . sat_s3yjF_closure" {
     sat_s3yjF_closure:
         const :_con_info;
         const sat_s3yjE_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.410705109 UTC

[section ""data" . lvl4_r3y9u_closure" {
     lvl4_r3y9u_closure:
         const lvl4_r3y9u_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r3y9u_entry() //  [R1]
         { info_tbl: [(c3zaO,
                       label: lvl4_r3y9u_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zaO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zaP; else goto c3zaQ;
       c3zaP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zaQ: // global
           (_c3zaL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zaL::I64 == 0) goto c3zaN; else goto c3zaM;
       c3zaN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zaM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zaL::I64;
           R3 = sat_s3yjF_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.412615122 UTC

[section ""data" . $wfracExp_r3y9v_closure" {
     $wfracExp_r3y9v_closure:
         const $wfracExp_r3y9v_info;
         const 0;
 },
 $wfracExp_r3y9v_entry() //  [R2, R3, R4]
         { info_tbl: [(c3zb2,
                       label: $wfracExp_r3y9v_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zb2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3zb3; else goto u3zcl;
       c3zb3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wfracExp_r3y9v_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3zcl: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3zaS() args: 0, res: 0, upd: 0;
     }
 },
 _c3zaS() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zaS: // global
           I64[Sp - 8] = block_c3zaV_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3zcn; else goto c3zaW;
       u3zcn: // global
           call _c3zaV(R1) args: 0, res: 0, upd: 0;
       c3zaW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zaV() //  [R1]
         { info_tbl: [(c3zaV,
                       label: block_c3zaV_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zaV: // global
           _s3yjG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3zaZ; else goto c3zb0;
       c3zaZ: // global
           I64[Sp] = block_c3zb7_info;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           R2 = _s3yjG::P64;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c3zb0: // global
           I64[Sp] = block_c3zbU_info;
           R3 = lvl4_r3y9u_closure;
           R2 = _s3yjG::P64;
           P64[Sp + 8] = P64[R1 + 14];
           P64[Sp + 24] = P64[R1 + 6];
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zb7() //  [R1]
         { info_tbl: [(c3zb7,
                       label: block_c3zb7_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zb7: // global
           _s3yjG::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3zbJ; else goto c3zbj;
       c3zbJ: // global
           I64[Sp + 8] = block_c3zbr_info;
           R2 = _s3yjG::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c3zbj: // global
           I64[Sp + 8] = block_c3zbc_info;
           R3 = _s3yjG::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zbr() //  [R1]
         { info_tbl: [(c3zbr,
                       label: block_c3zbr_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zbr: // global
           I64[Sp] = block_c3zbv_info;
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zbv() //  [R1]
         { info_tbl: [(c3zbv,
                       label: block_c3zbv_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zbv: // global
           I64[Sp] = block_c3zbz_info;
           R2 = R1;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zbz() //  [R1]
         { info_tbl: [(c3zbz,
                       label: block_c3zbz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zbz: // global
           I64[Sp] = block_c3zbD_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zbD() //  [R1]
         { info_tbl: [(c3zbD,
                       label: block_c3zbD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zbD: // global
           _s3yjH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3zbH_info;
           R3 = R1;
           R2 = _s3yjH::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zbH() //  [R1]
         { info_tbl: [(c3zbH,
                       label: block_c3zbH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zbH: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3zbc() //  [R1]
         { info_tbl: [(c3zbc,
                       label: block_c3zbc_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zbc: // global
           I64[Sp + 16] = block_c3zbg_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zbg() //  [R1]
         { info_tbl: [(c3zbg,
                       label: block_c3zbg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zbg: // global
           R2 = GHC.Real.$fEnumRatio1_closure;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zbU() //  [R1]
         { info_tbl: [(c3zbU,
                       label: block_c3zbU_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zbU: // global
           I64[Sp] = block_c3zbY_info;
           _s3yjU::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3yjU::P64;
           if (R1 & 7 != 0) goto u3zcp; else goto c3zbZ;
       u3zcp: // global
           call _c3zbY(R1) args: 0, res: 0, upd: 0;
       c3zbZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zbY() //  [R1]
         { info_tbl: [(c3zbY,
                       label: block_c3zbY_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zbY: // global
           I64[Sp] = block_c3zc3_info;
           R2 = I64[R1 + 7];
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zc3() //  [R1]
         { info_tbl: [(c3zc3,
                       label: block_c3zc3_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zc3: // global
           I64[Sp] = block_c3zc7_info;
           R3 = Text.Read.Lex.numberToFixed1_closure;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zc7() //  [R1]
         { info_tbl: [(c3zc7,
                       label: block_c3zc7_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zc7: // global
           I64[Sp] = block_c3zcb_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zcb() //  [R1]
         { info_tbl: [(c3zcb,
                       label: block_c3zcb_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zcb: // global
           _s3yjI::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = R1;
           P64[Sp + 24] = _s3yjI::P64;
           Sp = Sp + 8;
           call _c3zaS() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.418581777 UTC

[section ""data" . Text.Read.Lex.numberToFixed_integerTake_closure" {
     Text.Read.Lex.numberToFixed_integerTake_closure:
         const Text.Read.Lex.numberToFixed_integerTake_info;
         const 0;
 },
 sat_s3yk7_entry() //  [R1]
         { info_tbl: [(c3zcL,
                       label: sat_s3yk7_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zcL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3zcM; else goto c3zcN;
       c3zcM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zcN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3zcJ_info;
           R3 = lvl4_r3y9u_closure;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3zcJ() //  [R1]
         { info_tbl: [(c3zcJ,
                       label: block_c3zcJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zcJ: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_integerTake_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.numberToFixed_integerTake_entry() //  [R2, R3]
         { info_tbl: [(c3zcU,
                       label: Text.Read.Lex.numberToFixed_integerTake_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zcU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3zcV; else goto c3zcW;
       c3zcV: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_integerTake_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zcW: // global
           I64[Sp - 24] = block_c3zcv_info;
           _s3yk1::P64 = R3;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           _s3yk0::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3yk0::P64;
           P64[Sp - 8] = _s3yk1::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zcv() //  [R1]
         { info_tbl: [(c3zcv,
                       label: block_c3zcv_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zcv: // global
           if (R1 == 1) goto u3zdb; else goto c3zcS;
       u3zdb: // global
           Sp = Sp + 24;
           call _c3zcT() args: 0, res: 0, upd: 0;
       c3zcS: // global
           I64[Sp] = block_c3zcz_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3zdd; else goto c3zcA;
       u3zdd: // global
           call _c3zcz(R1) args: 0, res: 0, upd: 0;
       c3zcA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zcz() //  [R1]
         { info_tbl: [(c3zcz,
                       label: block_c3zcz_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zcz: // global
           if (R1 & 7 == 1) goto u3zdc; else goto c3zd3;
       u3zdc: // global
           Sp = Sp + 24;
           call _c3zcT() args: 0, res: 0, upd: 0;
       c3zd3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3zd6; else goto c3zd5;
       c3zd6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zd5: // global
           _s3yk4::P64 = P64[R1 + 6];
           _s3yk5::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s3yk7_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s3yk5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yk4::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zcT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zcT: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.420920142 UTC

[section ""data" . Text.Read.Lex.numberToFixed_xs_closure" {
     Text.Read.Lex.numberToFixed_xs_closure:
         const :_con_info;
         const Text.Read.Lex.$fShowLexeme2_closure+1;
         const Text.Read.Lex.numberToFixed_xs_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.424272694 UTC

[section ""data" . Text.Read.Lex.numberToFixed_closure" {
     Text.Read.Lex.numberToFixed_closure:
         const Text.Read.Lex.numberToFixed_info;
         const 0;
 },
 sat_s3ykf_entry() //  [R1]
         { info_tbl: [(c3zdD,
                       label: sat_s3ykf_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zdD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zdH; else goto c3zdI;
       c3zdH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zdI: // global
           I64[Sp - 8] = block_c3zdB_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zdB() //  [R1]
         { info_tbl: [(c3zdB,
                       label: block_c3zdB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zdB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zdL; else goto c3zdK;
       c3zdL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3zdK: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ykd_entry() //  [R1]
         { info_tbl: [(c3zdQ,
                       label: sat_s3ykd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zdQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zdR; else goto c3zdS;
       c3zdR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zdS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ykh_entry() //  [R1]
         { info_tbl: [(c3zdT,
                       label: sat_s3ykh_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zdT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3zdU; else goto c3zdV;
       c3zdU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zdV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3zdt_info;
           _s3ykc::P64 = P64[R1 + 24];
           R3 = _s3ykc::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s3ykc::P64;
           Sp = Sp - 40;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3zdt() //  [R1]
         { info_tbl: [(c3zdt,
                       label: block_c3zdt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zdt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3zdY; else goto c3zdX;
       c3zdY: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3zdX: // global
           I64[Hp - 40] = sat_s3ykf_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_s3ykd_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yko_entry() //  [R1]
         { info_tbl: [(c3zef,
                       label: sat_s3yko_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zef: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zeg; else goto c3zeh;
       c3zeg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zeh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ykv_entry() //  [R1]
         { info_tbl: [(c3zex,
                       label: sat_s3ykv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zex: // global
           R3 = Text.Read.Lex.numberToFixed_xs_closure+2;
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ykx_entry() //  [R1]
         { info_tbl: [(c3zeO,
                       label: sat_s3ykx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zeO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zeS; else goto c3zeT;
       c3zeS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zeT: // global
           I64[Sp - 8] = block_c3zeM_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zeM() //  [R1]
         { info_tbl: [(c3zeM,
                       label: block_c3zeM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zeM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zeW; else goto c3zeV;
       c3zeW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3zeV: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ykz_entry() //  [R1]
         { info_tbl: [(c3zeX,
                       label: sat_s3ykz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zeX: // global
           _s3ykz::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3zeY; else goto c3zeZ;
       c3zeZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zf1; else goto c3zf0;
       c3zf1: // global
           HpAlloc = 24;
           goto c3zeY;
       c3zeY: // global
           R1 = _s3ykz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zf0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ykz::P64;
           _s3yk8::P64 = P64[_s3ykz::P64 + 16];
           _s3ykr::P64 = P64[_s3ykz::P64 + 24];
           I64[Hp - 16] = sat_s3ykv_info;
           P64[Hp] = _s3ykr::P64;
           I64[Sp - 24] = block_c3zeA_info;
           R3 = Hp - 16;
           R2 = _s3yk8::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.numberToFixed_integerTake_entry(R3,
                                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3zeA() //  [R1]
         { info_tbl: [(c3zeA,
                       label: block_c3zeA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zeA: // global
           I64[Sp - 8] = block_c3zeE_info;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3zeE() //  [R1]
         { info_tbl: [(c3zeE,
                       label: block_c3zeE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zeE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zf5; else goto c3zf4;
       c3zf5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3zf4: // global
           I64[Hp - 16] = sat_s3ykx_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ykt_entry() //  [R1]
         { info_tbl: [(c3zfa,
                       label: sat_s3ykt_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zfa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zfb; else goto c3zfc;
       c3zfb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zfc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.numberToFixed_entry() //  [R2, R3]
         { info_tbl: [(c3zfh,
                       label: Text.Read.Lex.numberToFixed_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zfh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3zfi; else goto c3zfj;
       c3zfi: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zfj: // global
           I64[Sp - 16] = block_c3zdk_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3zg1; else goto c3zdl;
       u3zg1: // global
           call _c3zdk(R1) args: 0, res: 0, upd: 0;
       c3zdl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zdk() //  [R1]
         { info_tbl: [(c3zdk,
                       label: block_c3zdk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zdk: // global
           if (R1 & 7 == 1) goto c3zfe; else goto c3zff;
       c3zfe: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3zfo; else goto c3zfn;
       c3zfo: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zfn: // global
           _s3ykb::P64 = P64[R1 + 7];
           _s3ykc::P64 = P64[R1 + 15];
           I64[Hp - 64] = sat_s3ykh_info;
           P64[Hp - 48] = _s3ykb::P64;
           P64[Hp - 40] = _s3ykc::P64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = Text.Read.Lex.numberToFixed2_closure;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zff: // global
           I64[Sp - 16] = block_c3ze1_info;
           _s3ykj::P64 = P64[R1 + 6];
           _s3ykl::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3ykl::P64;
           P64[Sp] = _s3ykj::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3zfW; else goto c3ze2;
       u3zfW: // global
           call _c3ze1(R1) args: 0, res: 0, upd: 0;
       c3ze2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ze1() //  [R1]
         { info_tbl: [(c3ze1,
                       label: block_c3ze1_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ze1: // global
           _s3ykl::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3zfs; else goto c3zfF;
       c3zfs: // global
           I64[Sp + 8] = block_c3ze6_info;
           R1 = _s3ykl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3zfX; else goto c3ze7;
       u3zfX: // global
           call _c3ze6(R1) args: 0, res: 0, upd: 0;
       c3ze7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3zfF: // global
           I64[Sp] = block_c3zek_info;
           _s3ykr::P64 = P64[R1 + 6];
           R1 = _s3ykl::P64;
           P64[Sp + 8] = _s3ykr::P64;
           if (R1 & 7 != 0) goto u3zfY; else goto c3zel;
       u3zfY: // global
           call _c3zek(R1) args: 0, res: 0, upd: 0;
       c3zel: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ze6() //  [R1]
         { info_tbl: [(c3ze6,
                       label: block_c3ze6_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ze6: // global
           if (R1 & 7 == 1) goto c3zfw; else goto u3zfV;
       c3zfw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3zfz; else goto c3zfy;
       c3zfz: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zfy: // global
           I64[Hp - 56] = sat_s3yko_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Text.Read.Lex.numberToFixed2_closure;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3zfV: // global
           Sp = Sp + 24;
           call _c3zfQ() args: 0, res: 0, upd: 0;
     }
 },
 _c3zek() //  [R1]
         { info_tbl: [(c3zek,
                       label: block_c3zek_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zek: // global
           if (R1 & 7 == 1) goto c3zfJ; else goto u3zfU;
       c3zfJ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3zfM; else goto c3zfL;
       c3zfM: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zfL: // global
           I64[Hp - 88] = sat_s3ykz_info;
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sat_s3ykt_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 88;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3zfU: // global
           Sp = Sp + 32;
           call _c3zfQ() args: 0, res: 0, upd: 0;
     }
 },
 _c3zfQ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zfQ: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.435314332 UTC

[section ""data" . Text.Read.Lex.$wnumberToRational_closure" {
     Text.Read.Lex.$wnumberToRational_closure:
         const Text.Read.Lex.$wnumberToRational_info;
         const 0;
 },
 sat_s3ykK_entry() //  [R1]
         { info_tbl: [(c3zgl,
                       label: sat_s3ykK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zgl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zgp; else goto c3zgq;
       c3zgp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zgq: // global
           I64[Sp - 8] = block_c3zgj_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zgj() //  [R1]
         { info_tbl: [(c3zgj,
                       label: block_c3zgj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zgj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zgt; else goto c3zgs;
       c3zgt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3zgs: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ykI_entry() //  [R1]
         { info_tbl: [(c3zgB,
                       label: sat_s3ykI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zgB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3zgC; else goto c3zgD;
       c3zgC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zgD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3zgy_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3zgH; else goto c3zgz;
       u3zgH: // global
           call _c3zgy(R1) args: 0, res: 0, upd: 0;
       c3zgz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3zgy() //  [R1]
         { info_tbl: [(c3zgy,
                       label: block_c3zgy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zgy: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.$wnumberToRational_entry() //  [R2]
         { info_tbl: [(c3zgM,
                       label: Text.Read.Lex.$wnumberToRational_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zgM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3zgN; else goto c3zgO;
       c3zgN: // global
           R2 = R2;
           R1 = Text.Read.Lex.$wnumberToRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zgO: // global
           I64[Sp - 8] = block_c3zg6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3zj3; else goto c3zg7;
       u3zj3: // global
           call _c3zg6(R1) args: 0, res: 0, upd: 0;
       c3zg7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zg6() //  [R1]
         { info_tbl: [(c3zg6,
                       label: block_c3zg6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zg6: // global
           if (R1 & 7 == 1) goto c3zgJ; else goto c3zgK;
       c3zgJ: // global
           I64[Sp - 16] = block_c3zgb_info;
           _s3ykF::P64 = P64[R1 + 15];
           R3 = _s3ykF::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 8] = _s3ykF::P64;
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3zgK: // global
           I64[Sp - 16] = block_c3zh5_info;
           _s3ykO::P64 = P64[R1 + 6];
           _s3ykQ::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3ykQ::P64;
           P64[Sp] = _s3ykO::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3zj2; else goto c3zh7;
       u3zj2: // global
           call _c3zh5(R1) args: 0, res: 0, upd: 0;
       c3zh7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zgb() //  [R1]
         { info_tbl: [(c3zgb,
                       label: block_c3zgb_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zgb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3zgX; else goto c3zgW;
       c3zgX: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zgW: // global
           I64[Hp - 40] = sat_s3ykK_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = sat_s3ykI_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3zgP_info;
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zgP() //  [R1]
         { info_tbl: [(c3zgP,
                       label: block_c3zgP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zgP: // global
           I64[Sp] = block_c3zgT_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zgT() //  [R1]
         { info_tbl: [(c3zgT,
                       label: block_c3zgT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zgT: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3zh5() //  [R1]
         { info_tbl: [(c3zh5,
                       label: block_c3zh5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zh5: // global
           _s3ykQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3zhe; else goto c3ziD;
       c3zhe: // global
           I64[Sp + 8] = block_c3zhb_info;
           R1 = _s3ykQ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3zj4; else goto c3zhf;
       u3zj4: // global
           call _c3zhb(R1) args: 0, res: 0, upd: 0;
       c3zhf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ziD: // global
           I64[Sp] = block_c3ziB_info;
           _s3yl7::P64 = P64[R1 + 6];
           R1 = _s3ykQ::P64;
           P64[Sp + 8] = _s3yl7::P64;
           if (R1 & 7 != 0) goto u3zj5; else goto c3ziE;
       u3zj5: // global
           call _c3ziB(R1) args: 0, res: 0, upd: 0;
       c3ziE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zhb() //  [R1]
         { info_tbl: [(c3zhb,
                       label: block_c3zhb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zhb: // global
           if (R1 & 7 == 1) goto c3zhq; else goto c3zhA;
       c3zhq: // global
           _s3ykO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3zhj_info;
           R3 = _s3ykO::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
       c3zhA: // global
           I64[Sp - 8] = block_c3zhy_info;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           _s3ykV::P64 = P64[R1 + 6];
           R2 = _s3ykV::P64;
           P64[Sp] = _s3ykV::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zhj() //  [R1]
         { info_tbl: [(c3zhj,
                       label: block_c3zhj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zhj: // global
           I64[Sp] = block_c3zhn_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zhn() //  [R1]
         { info_tbl: [(c3zhn,
                       label: block_c3zhn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zhn: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3zhy() //  [R1]
         { info_tbl: [(c3zhy,
                       label: block_c3zhy_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zhy: // global
           _s3ykV::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3zir; else goto c3zi1;
       c3zir: // global
           I64[Sp + 8] = block_c3zid_info;
           R3 = _s3ykV::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3zi1: // global
           I64[Sp + 8] = block_c3zhE_info;
           R2 = _s3ykV::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zid() //  [R1]
         { info_tbl: [(c3zid,
                       label: block_c3zid_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zid: // global
           I64[Sp] = block_c3zih_info;
           R3 = P64[Sp + 8];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 8] = R1;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zih() //  [R1]
         { info_tbl: [(c3zih,
                       label: block_c3zih_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zih: // global
           _s3yl4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3zil_info;
           R3 = _s3yl4::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zil() //  [R1]
         { info_tbl: [(c3zil,
                       label: block_c3zil_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zil: // global
           I64[Sp] = block_c3zip_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zip() //  [R1]
         { info_tbl: [(c3zip,
                       label: block_c3zip_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zip: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3zhE() //  [R1]
         { info_tbl: [(c3zhE,
                       label: block_c3zhE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zhE: // global
           I64[Sp] = block_c3zhI_info;
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zhI() //  [R1]
         { info_tbl: [(c3zhI,
                       label: block_c3zhI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zhI: // global
           I64[Sp - 8] = block_c3zhM_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zhM() //  [R1]
         { info_tbl: [(c3zhM,
                       label: block_c3zhM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zhM: // global
           I64[Sp] = block_c3zhQ_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zhQ() //  [R1]
         { info_tbl: [(c3zhQ,
                       label: block_c3zhQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zhQ: // global
           I64[Sp] = block_c3zhU_info;
           R3 = P64[Sp + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 16] = R1;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zhU() //  [R1]
         { info_tbl: [(c3zhU,
                       label: block_c3zhU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zhU: // global
           I64[Sp] = block_c3zhY_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zhY() //  [R1]
         { info_tbl: [(c3zhY,
                       label: block_c3zhY_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zhY: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3ziB() //  [R1]
         { info_tbl: [(c3ziB,
                       label: block_c3ziB_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ziB: // global
           _s3ykO::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c3ziL; else goto c3ziU;
       c3ziL: // global
           I64[Sp] = block_c3ziI_info;
           R3 = _s3ykO::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
       c3ziU: // global
           I64[Sp] = block_c3ziS_info;
           R3 = _s3ykO::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 16] = P64[R1 + 6];
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ziI() //  [R1]
         { info_tbl: [(c3ziI,
                       label: block_c3ziI_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ziI: // global
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 24;
           call $wfracExp_r3y9v_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3ziS() //  [R1]
         { info_tbl: [(c3ziS,
                       label: block_c3ziS_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ziS: // global
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call $wfracExp_r3y9v_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.441711101 UTC

[section ""data" . Text.Read.Lex.numberToRational_closure" {
     Text.Read.Lex.numberToRational_closure:
         const Text.Read.Lex.numberToRational_info;
         const 0;
 },
 Text.Read.Lex.numberToRational_entry() //  [R2]
         { info_tbl: [(c3zjd,
                       label: Text.Read.Lex.numberToRational_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zjd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zje; else goto c3zjf;
       c3zje: // global
           R2 = R2;
           R1 = Text.Read.Lex.numberToRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zjf: // global
           I64[Sp - 8] = block_c3zja_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zja() //  [R1, R2]
         { info_tbl: [(c3zja,
                       label: block_c3zja_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zja: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zji; else goto c3zjh;
       c3zji: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3zjh: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.443126726 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational3_closure" {
     Text.Read.Lex.numberToRangedRational3_closure:
         const GHC.Real.:%_con_info;
         const Text.Read.Lex.numberToFixed2_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.443774377 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational2_closure" {
     Text.Read.Lex.numberToRangedRational2_closure:
         const GHC.Base.Just_con_info;
         const Text.Read.Lex.numberToRangedRational3_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.444593845 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational1_closure" {
     Text.Read.Lex.numberToRangedRational1_closure:
         const Text.Read.Lex.numberToRangedRational1_info;
 },
 Text.Read.Lex.numberToRangedRational1_entry() //  [R2]
         { info_tbl: [(c3zjn,
                       label: Text.Read.Lex.numberToRangedRational1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zjn: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme2_closure+1;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.445449163 UTC

[section ""data" . sat_s3yli_closure" {
     sat_s3yli_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.446825644 UTC

[section ""data" . sat_s3ylj_closure" {
     sat_s3ylj_closure:
         const :_con_info;
         const sat_s3yli_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.447438208 UTC

[section ""data" . sat_s3ylh_closure" {
     sat_s3ylh_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.44797921 UTC

[section ""data" . sat_s3ylk_closure" {
     sat_s3ylk_closure:
         const :_con_info;
         const sat_s3ylh_closure+1;
         const sat_s3ylj_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.448555119 UTC

[section ""data" . sat_s3ylg_closure" {
     sat_s3ylg_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.449340143 UTC

[section ""data" . sat_s3yll_closure" {
     sat_s3yll_closure:
         const :_con_info;
         const sat_s3ylg_closure+1;
         const sat_s3ylk_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.450464267 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational4_closure" {
     Text.Read.Lex.numberToRangedRational4_closure:
         const Text.Read.Lex.numberToRangedRational4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational4_entry() //  [R1]
         { info_tbl: [(c3zjw,
                       label: Text.Read.Lex.numberToRangedRational4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zjw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zjx; else goto c3zjy;
       c3zjx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zjy: // global
           (_c3zjt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zjt::I64 == 0) goto c3zjv; else goto c3zju;
       c3zjv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zju: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zjt::I64;
           R3 = sat_s3yll_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.451546944 UTC

[section ""data" . sat_s3ylo_closure" {
     sat_s3ylo_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.45210222 UTC

[section ""data" . sat_s3ylp_closure" {
     sat_s3ylp_closure:
         const :_con_info;
         const sat_s3ylo_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.452693807 UTC

[section ""data" . sat_s3yln_closure" {
     sat_s3yln_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.453379948 UTC

[section ""data" . sat_s3ylq_closure" {
     sat_s3ylq_closure:
         const :_con_info;
         const sat_s3yln_closure+1;
         const sat_s3ylp_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.45401171 UTC

[section ""data" . sat_s3ylm_closure" {
     sat_s3ylm_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.454608407 UTC

[section ""data" . sat_s3ylr_closure" {
     sat_s3ylr_closure:
         const :_con_info;
         const sat_s3ylm_closure+1;
         const sat_s3ylq_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.455477121 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational5_closure" {
     Text.Read.Lex.numberToRangedRational5_closure:
         const Text.Read.Lex.numberToRangedRational5_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational5_entry() //  [R1]
         { info_tbl: [(c3zjF,
                       label: Text.Read.Lex.numberToRangedRational5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zjF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zjG; else goto c3zjH;
       c3zjG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zjH: // global
           (_c3zjC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zjC::I64 == 0) goto c3zjE; else goto c3zjD;
       c3zjE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zjD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zjC::I64;
           R3 = sat_s3ylr_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.459581349 UTC

[section ""data" . Text.Read.Lex.$wnumberToRangedRational_closure" {
     Text.Read.Lex.$wnumberToRangedRational_closure:
         const Text.Read.Lex.$wnumberToRangedRational_info;
         const 0;
 },
 sat_s3ylB_entry() //  [R1]
         { info_tbl: [(c3zjY,
                       label: sat_s3ylB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zjY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3zjZ; else goto c3zk0;
       c3zjZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zk0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3zjV_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3zjV() //  [R1, R2]
         { info_tbl: [(c3zjV,
                       label: block_c3zjV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zjV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zk3; else goto c3zk2;
       c3zk3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3zk2: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ylJ_entry() //  [R1]
         { info_tbl: [(c3zki,
                       label: sat_s3ylJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zki: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3zkj; else goto c3zkk;
       c3zkj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zkk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3zkf_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3zkf() //  [R1, R2]
         { info_tbl: [(c3zkf,
                       label: block_c3zkf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zkf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zkn; else goto c3zkm;
       c3zkn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3zkm: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ym2_entry() //  [R1]
         { info_tbl: [(c3zld,
                       label: sat_s3ym2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zld: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3zle; else goto c3zlf;
       c3zle: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zlf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3zla_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3zla() //  [R1, R2]
         { info_tbl: [(c3zla,
                       label: block_c3zla_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zla: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zli; else goto c3zlh;
       c3zli: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3zlh: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.$wnumberToRangedRational_entry() //  [R2, R3, R4]
         { info_tbl: [(c3zln,
                       label: Text.Read.Lex.$wnumberToRangedRational_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zln: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3zlo; else goto c3zlp;
       c3zlo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wnumberToRangedRational_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zlp: // global
           I64[Sp - 24] = block_c3zjM_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3zn7; else goto c3zjN;
       u3zn7: // global
           call _c3zjM(R1) args: 0, res: 0, upd: 0;
       c3zjN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zjM() //  [R1]
         { info_tbl: [(c3zjM,
                       label: block_c3zjM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zjM: // global
           if (R1 & 7 == 1) goto c3zlk; else goto c3zll;
       c3zlk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zlt; else goto c3zls;
       c3zlt: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zls: // global
           I64[Hp - 32] = sat_s3ylB_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zll: // global
           I64[Sp - 24] = block_c3zk6_info;
           _s3ylv::P64 = R1;
           _s3ylC::P64 = P64[R1 + 6];
           _s3ylD::P64 = P64[R1 + 14];
           R1 = P64[R1 + 22];
           P64[Sp - 16] = _s3ylC::P64;
           P64[Sp - 8] = _s3ylD::P64;
           P64[Sp] = _s3ylv::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3zn2; else goto c3zk7;
       u3zn2: // global
           call _c3zk6(R1) args: 0, res: 0, upd: 0;
       c3zk7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zk6() //  [R1]
         { info_tbl: [(c3zk6,
                       label: block_c3zk6_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zk6: // global
           if (R1 & 7 == 1) goto c3zlx; else goto c3zlC;
       c3zlx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zlA; else goto c3zlz;
       c3zlA: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zlz: // global
           I64[Hp - 32] = sat_s3ylJ_info;
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zlC: // global
           I64[Sp - 8] = block_c3zkq_info;
           R3 = Text.Read.Lex.numberToRangedRational5_closure;
           _s3ylK::P64 = P64[R1 + 6];
           R2 = _s3ylK::P64;
           P64[Sp] = _s3ylK::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zkq() //  [R1]
         { info_tbl: [(c3zkq,
                       label: block_c3zkq_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zkq: // global
           if (R1 == 1) goto u3zmV; else goto c3zlF;
       u3zmV: // global
           Sp = Sp + 56;
           call _c3zmP() args: 0, res: 0, upd: 0;
       c3zlF: // global
           I64[Sp] = block_c3zku_info;
           R3 = Text.Read.Lex.numberToRangedRational4_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zku() //  [R1]
         { info_tbl: [(c3zku,
                       label: block_c3zku_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zku: // global
           if (R1 == 1) goto u3zmW; else goto c3zlW;
       u3zmW: // global
           Sp = Sp + 56;
           call _c3zmP() args: 0, res: 0, upd: 0;
       c3zlW: // global
           I64[Sp] = block_c3zlG_info;
           R3 = P64[Sp + 16];
           R2 = Text.Read.Lex.numberToRangedRational1_closure+1;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zlG() //  [R1]
         { info_tbl: [(c3zlG,
                       label: block_c3zlG_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zlG: // global
           if (R1 & 7 == 1) goto c3zm3; else goto c3zmD;
       c3zm3: // global
           I64[Sp] = block_c3zm0_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3zn8; else goto c3zm4;
       u3zn8: // global
           call _c3zm0(R1) args: 0, res: 0, upd: 0;
       c3zm4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3zmD: // global
           I64[Sp] = block_c3zmB_info;
           R3 = 0;
           R2 = R1;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zm0() //  [R1]
         { info_tbl: [(c3zm0,
                       label: block_c3zm0_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zm0: // global
           if (R1 & 7 == 1) goto u3zmY; else goto c3zmh;
       u3zmY: // global
           Sp = Sp + 56;
           call _c3zmp() args: 0, res: 0, upd: 0;
       c3zmh: // global
           I64[Sp] = block_c3zmd_info;
           R3 = P64[R1 + 6];
           R2 = Text.Read.Lex.numberToRangedRational1_closure+1;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zmd() //  [R1, R2]
         { info_tbl: [(c3zmd,
                       label: block_c3zmd_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zmd: // global
           I64[Sp] = block_c3zmf_info;
           _s3ym7::P64 = R1;
           R1 = R2;
           P64[Sp + 24] = _s3ym7::P64;
           if (R1 & 7 != 0) goto u3zna; else goto c3zmj;
       u3zna: // global
           call _c3zmf(R1) args: 0, res: 0, upd: 0;
       c3zmj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zmf() //  [R1]
         { info_tbl: [(c3zmf,
                       label: block_c3zmf_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zmf: // global
           if (R1 & 7 == 1) goto u3zmZ; else goto c3zmu;
       u3zmZ: // global
           Sp = Sp + 56;
           call _c3zmp() args: 0, res: 0, upd: 0;
       c3zmu: // global
           I64[Sp] = block_c3zms_info;
           R3 = 0;
           R2 = P64[Sp + 24];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zmp() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zmp: // global
           R1 = Text.Read.Lex.numberToRangedRational2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zms() //  [R1]
         { info_tbl: [(c3zms,
                       label: block_c3zms_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zms: // global
           I64[Sp + 24] = -R1;
           Sp = Sp + 8;
           call _s3ylN() args: 0, res: 0, upd: 0;
     }
 },
 _c3zmB() //  [R1]
         { info_tbl: [(c3zmB,
                       label: block_c3zmB_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zmB: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _s3ylN() args: 0, res: 0, upd: 0;
     }
 },
 _s3ylN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3ylN: // global
           I64[Sp - 8] = block_c3zkD_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3zne; else goto c3zkE;
       u3zne: // global
           call _c3zkD(R1) args: 0, res: 0, upd: 0;
       c3zkE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zkD() //  [R1]
         { info_tbl: [(c3zkD,
                       label: block_c3zkD_info
                       rep:StackRep [False, True, True, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zkD: // global
           I64[Sp + 16] = block_c3zkI_info;
           R2 = P64[Sp + 8];
           I64[Sp + 48] = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zkI() //  [R1]
         { info_tbl: [(c3zkI,
                       label: block_c3zkI_info
                       rep:StackRep [True, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zkI: // global
           _s3ylS::I64 = I64[Sp + 8] + R1;
           if (%MO_S_Le_W64(_s3ylS::I64,
                            I64[Sp + 32] + 3)) goto c3zlM; else goto u3zn1;
       c3zlM: // global
           I64[Sp + 8] = block_c3zkV_info;
           R1 = P64[Sp + 24];
           I64[Sp + 32] = _s3ylS::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3zn5; else goto c3zkW;
       u3zn5: // global
           call _c3zkV(R1) args: 0, res: 0, upd: 0;
       c3zkW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3zn1: // global
           Sp = Sp + 40;
           call _c3zmP() args: 0, res: 0, upd: 0;
     }
 },
 _c3zkV() //  [R1]
         { info_tbl: [(c3zkV,
                       label: block_c3zkV_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zkV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zlP; else goto c3zlO;
       c3zlP: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zlO: // global
           if (%MO_S_Ge_W64(I64[Sp + 24],
                            I64[R1 + 7] - 3)) goto c3zlS; else goto c3zlT;
       c3zlS: // global
           I64[Hp - 32] = sat_s3ym2_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zlT: // global
           Hp = Hp - 40;
           R1 = Text.Read.Lex.numberToRangedRational2_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zmP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zmP: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.467275612 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational_closure" {
     Text.Read.Lex.numberToRangedRational_closure:
         const Text.Read.Lex.numberToRangedRational_info;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational_entry() //  [R2, R3]
         { info_tbl: [(c3znm,
                       label: Text.Read.Lex.numberToRangedRational_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3znm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3znn; else goto c3zno;
       c3znn: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToRangedRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zno: // global
           I64[Sp - 16] = block_c3znj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3zns; else goto c3znk;
       u3zns: // global
           call _c3znj(R1) args: 0, res: 0, upd: 0;
       c3znk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3znj() //  [R1]
         { info_tbl: [(c3znj,
                       label: block_c3znj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3znj: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call Text.Read.Lex.$wnumberToRangedRational_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.468384568 UTC

[section ""cstring" . lvl5_r3y9w_bytes" {
     lvl5_r3y9w_bytes:
         I8[] [118,97,108,68,105,103,58,32,66,97,100,32,98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.469215303 UTC

[section ""data" . Text.Read.Lex.readDecP2_closure" {
     Text.Read.Lex.readDecP2_closure:
         const Text.Read.Lex.readDecP2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP2_entry() //  [R1]
         { info_tbl: [(c3znB,
                       label: Text.Read.Lex.readDecP2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3znB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3znC; else goto c3znD;
       c3znC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3znD: // global
           (_c3znw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3znw::I64 == 0) goto c3zny; else goto c3znx;
       c3zny: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3znx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3znw::I64;
           I64[Sp - 24] = block_c3znz_info;
           R2 = lvl5_r3y9w_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3znz() //  [R1]
         { info_tbl: [(c3znz,
                       label: block_c3znz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3znz: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.470345319 UTC

[section ""data" . sat_s3ymn_closure" {
     sat_s3ymn_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.470952909 UTC

[section ""data" . sat_s3ymo_closure" {
     sat_s3ymo_closure:
         const :_con_info;
         const sat_s3ymn_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.471797743 UTC

[section ""data" . Text.Read.Lex.readDecP3_closure" {
     Text.Read.Lex.readDecP3_closure:
         const Text.Read.Lex.readDecP3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP3_entry() //  [R1]
         { info_tbl: [(c3znN,
                       label: Text.Read.Lex.readDecP3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3znN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3znO; else goto c3znP;
       c3znO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3znP: // global
           (_c3znK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3znK::I64 == 0) goto c3znM; else goto c3znL;
       c3znM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3znL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3znK::I64;
           R3 = sat_s3ymo_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.472771195 UTC

[section ""data" . sat_s3ymp_closure" {
     sat_s3ymp_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.473422532 UTC

[section ""data" . sat_s3ymq_closure" {
     sat_s3ymq_closure:
         const :_con_info;
         const sat_s3ymp_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.474259796 UTC

[section ""data" . Text.Read.Lex.readDecP4_closure" {
     Text.Read.Lex.readDecP4_closure:
         const Text.Read.Lex.readDecP4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP4_entry() //  [R1]
         { info_tbl: [(c3znW,
                       label: Text.Read.Lex.readDecP4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3znW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3znX; else goto c3znY;
       c3znX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3znY: // global
           (_c3znT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3znT::I64 == 0) goto c3znV; else goto c3znU;
       c3znV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3znU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3znT::I64;
           R3 = sat_s3ymq_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.478015275 UTC

[section ""data" . Text.Read.Lex.$w$svalDig_closure" {
     Text.Read.Lex.$w$svalDig_closure:
         const Text.Read.Lex.$w$svalDig_info;
         const 0;
 },
 Text.Read.Lex.$w$svalDig_entry() //  [R2, R3]
         { info_tbl: [(c3zo8,
                       label: Text.Read.Lex.$w$svalDig_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zo8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3zo9; else goto c3zoa;
       c3zo9: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$svalDig_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zoa: // global
           I64[Sp - 24] = block_c3zo3_info;
           _s3yms::I64 = R3;
           R3 = Text.Read.Lex.readDecP4_closure;
           _s3ymr::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3ymr::P64;
           I64[Sp - 8] = _s3yms::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zo3() //  [R1]
         { info_tbl: [(c3zo3,
                       label: block_c3zo3_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zo3: // global
           if (R1 == 1) goto c3zo7; else goto c3zo6;
       c3zo7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3zqu; else goto c3zqt;
       c3zqu: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3zqt: // global
           _s3yms::I64 = I64[Sp + 16];
           if (48 > _s3yms::I64) goto u3zqV; else goto c3zqQ;
       u3zqV: // global
           Sp = Sp + 24;
           goto u3zqY;
       c3zqQ: // global
           if (_s3yms::I64 > 55) goto u3zqW; else goto c3zqP;
       u3zqW: // global
           Sp = Sp + 24;
           goto u3zqY;
       u3zqY: // global
           call _c3zqE() args: 0, res: 0, upd: 0;
       c3zqP: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zo6: // global
           I64[Sp] = block_c3zod_info;
           R3 = Text.Read.Lex.numberToFixed1_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zod() //  [R1]
         { info_tbl: [(c3zod,
                       label: block_c3zod_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zod: // global
           if (R1 == 1) goto c3zpY; else goto c3zol;
       c3zpY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3zq3; else goto c3zq2;
       c3zq3: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3zq2: // global
           _s3yms::I64 = I64[Sp + 16];
           if (48 > _s3yms::I64) goto u3zqT; else goto c3zqp;
       u3zqT: // global
           Sp = Sp + 24;
           goto u3zr0;
       c3zqp: // global
           if (_s3yms::I64 > 57) goto u3zqU; else goto c3zqo;
       u3zqU: // global
           Sp = Sp + 24;
           goto u3zr0;
       u3zr0: // global
           call _c3zqE() args: 0, res: 0, upd: 0;
       c3zqo: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zol: // global
           _s3ymr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3zoi_info;
           R3 = Text.Read.Lex.readDecP3_closure;
           R2 = _s3ymr::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zoi() //  [R1]
         { info_tbl: [(c3zoi,
                       label: block_c3zoi_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zoi: // global
           if (R1 == 1) goto c3zos; else goto c3zor;
       c3zos: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3zox; else goto c3zow;
       c3zox: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3zow: // global
           _s3yms::I64 = I64[Sp + 8];
           if (48 > _s3yms::I64) goto c3zpL; else goto c3zpX;
       c3zpX: // global
           if (_s3yms::I64 > 57) goto c3zpL; else goto c3zpW;
       c3zpL: // global
           Hp = Hp - 32;
           call _c3zoB() args: 0, res: 0, upd: 0;
       c3zpW: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zor: // global
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zoB() //  []
         { info_tbl: [(c3zoB,
                       label: block_c3zoB_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zoB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3zoF; else goto c3zoE;
       c3zoF: // global
           HpAlloc = 32;
           I64[Sp] = block_c3zoB_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3zoE: // global
           _s3yms::I64 = I64[Sp + 8];
           if (97 > _s3yms::I64) goto c3zpm; else goto c3zpB;
       c3zpB: // global
           if (_s3yms::I64 > 102) goto c3zpm; else goto c3zpA;
       c3zpm: // global
           Hp = Hp - 32;
           call _c3zoJ() args: 0, res: 0, upd: 0;
       c3zpA: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 87;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zoJ() //  []
         { info_tbl: [(c3zoJ,
                       label: block_c3zoJ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zoJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3zoN; else goto c3zoM;
       c3zoN: // global
           HpAlloc = 32;
           I64[Sp] = block_c3zoJ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3zoM: // global
           _s3yms::I64 = I64[Sp + 8];
           if (65 > _s3yms::I64) goto u3zqR; else goto c3zpc;
       u3zqR: // global
           Sp = Sp + 16;
           goto u3zr4;
       c3zpc: // global
           if (_s3yms::I64 > 70) goto u3zqS; else goto c3zpb;
       u3zqS: // global
           Sp = Sp + 16;
           goto u3zr4;
       u3zr4: // global
           call _c3zqE() args: 0, res: 0, upd: 0;
       c3zpb: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 55;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zqE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zqE: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.483669771 UTC

[section ""data" . Text.Read.Lex.$wvalDig_closure" {
     Text.Read.Lex.$wvalDig_closure:
         const Text.Read.Lex.$wvalDig_info;
         const 0;
 },
 Text.Read.Lex.$wvalDig_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zr6: // global
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yn3_entry() //  [R1]
         { info_tbl: [(c3zre,
                       label: sat_s3yn3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zre: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3zrf; else goto c3zrg;
       c3zrf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zrg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yn5_entry() //  [R1]
         { info_tbl: [(c3zrp,
                       label: sat_s3yn5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zrp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3zrq; else goto c3zrr;
       c3zrq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zrr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yn7_entry() //  [R1]
         { info_tbl: [(c3zrA,
                       label: sat_s3yn7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zrA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3zrB; else goto c3zrC;
       c3zrB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zrC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.$wvalDig_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3zrH,
                       label: Text.Read.Lex.$wvalDig_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, False, True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zrH: // global
           _s3yn2::I64 = R5;
           _s3yn1::P64 = R4;
           _s3yn0::P64 = R3;
           _s3ymZ::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c3zrI; else goto c3zrJ;
       c3zrJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zrL; else goto c3zrK;
       c3zrL: // global
           HpAlloc = 24;
           goto c3zrI;
       c3zrI: // global
           R1 = Text.Read.Lex.$wvalDig_closure;
           P64[Sp - 32] = _s3ymZ::P64;
           P64[Sp - 24] = _s3yn0::P64;
           P64[Sp - 16] = _s3yn1::P64;
           I64[Sp - 8] = _s3yn2::I64;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3zrK: // global
           I64[Hp - 16] = sat_s3yn3_info;
           P64[Hp] = _s3yn0::P64;
           I64[Sp - 40] = block_c3zrh_info;
           R2 = _s3ymZ::P64;
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = _s3yn1::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 32] = _s3ymZ::P64;
           P64[Sp - 24] = _s3yn0::P64;
           P64[Sp - 16] = _s3yn1::P64;
           I64[Sp - 8] = _s3yn2::I64;
           Sp = Sp - 64;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c3zrh() //  [R1]
         { info_tbl: [(c3zrh,
                       label: block_c3zrh_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zrh: // global
           if (R1 & 7 == 1) goto c3zrE; else goto c3zrF;
       c3zrE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zrO; else goto c3zrN;
       c3zrO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zrN: // global
           I64[Hp - 16] = sat_s3yn5_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c3zrs_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c3zrF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3zu3; else goto c3zu2;
       c3zu3: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zu2: // global
           _s3yn2::I64 = I64[Sp + 32];
           if (48 > _s3yn2::I64) goto u3zus; else goto c3zup;
       u3zus: // global
           Sp = Sp + 40;
           goto u3zuz;
       c3zup: // global
           if (_s3yn2::I64 > 55) goto u3zut; else goto c3zuo;
       u3zut: // global
           Sp = Sp + 40;
           goto u3zuz;
       u3zuz: // global
           call _c3zud() args: 0, res: 0, upd: 0;
       c3zuo: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zrs() //  [R1]
         { info_tbl: [(c3zrs,
                       label: block_c3zrs_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zrs: // global
           if (R1 & 7 == 1) goto c3zrR; else goto c3ztx;
       c3zrR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zrU; else goto c3zrT;
       c3zrU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zrT: // global
           I64[Hp - 16] = sat_s3yn7_info;
           P64[Hp] = P64[Sp + 16];
           _s3yn1::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3zrP_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s3yn1::P64;
           P64[Sp + 16] = Hp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c3ztx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ztC; else goto c3ztB;
       c3ztC: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ztB: // global
           _s3yn2::I64 = I64[Sp + 32];
           if (48 > _s3yn2::I64) goto u3zuu; else goto c3ztY;
       u3zuu: // global
           Sp = Sp + 40;
           goto u3zuB;
       c3ztY: // global
           if (_s3yn2::I64 > 57) goto u3zuv; else goto c3ztX;
       u3zuv: // global
           Sp = Sp + 40;
           goto u3zuB;
       u3zuB: // global
           call _c3zud() args: 0, res: 0, upd: 0;
       c3ztX: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zrP() //  [R1]
         { info_tbl: [(c3zrP,
                       label: block_c3zrP_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zrP: // global
           if (R1 & 7 == 1) goto c3zs0; else goto c3zs1;
       c3zs0: // global
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3zs1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3zs6; else goto c3zs5;
       c3zs6: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zs5: // global
           _s3yn2::I64 = I64[Sp + 8];
           if (48 > _s3yn2::I64) goto c3ztk; else goto c3ztw;
       c3ztw: // global
           if (_s3yn2::I64 > 57) goto c3ztk; else goto c3ztv;
       c3ztk: // global
           Hp = Hp - 32;
           call _c3zsa() args: 0, res: 0, upd: 0;
       c3ztv: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zsa() //  []
         { info_tbl: [(c3zsa,
                       label: block_c3zsa_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zsa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3zse; else goto c3zsd;
       c3zse: // global
           HpAlloc = 32;
           I64[Sp] = block_c3zsa_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3zsd: // global
           _s3yn2::I64 = I64[Sp + 8];
           if (97 > _s3yn2::I64) goto c3zsV; else goto c3zta;
       c3zta: // global
           if (_s3yn2::I64 > 102) goto c3zsV; else goto c3zt9;
       c3zsV: // global
           Hp = Hp - 32;
           call _c3zsi() args: 0, res: 0, upd: 0;
       c3zt9: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 87;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zsi() //  []
         { info_tbl: [(c3zsi,
                       label: block_c3zsi_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zsi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3zsm; else goto c3zsl;
       c3zsm: // global
           HpAlloc = 32;
           I64[Sp] = block_c3zsi_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3zsl: // global
           _s3yn2::I64 = I64[Sp + 8];
           if (65 > _s3yn2::I64) goto u3zuw; else goto c3zsL;
       u3zuw: // global
           Sp = Sp + 16;
           goto u3zuF;
       c3zsL: // global
           if (_s3yn2::I64 > 70) goto u3zux; else goto c3zsK;
       u3zux: // global
           Sp = Sp + 16;
           goto u3zuF;
       u3zuF: // global
           call _c3zud() args: 0, res: 0, upd: 0;
       c3zsK: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 55;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zud() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zud: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.489198829 UTC

[section ""data" . Text.Read.Lex.$w$sreadIntP'_closure" {
     Text.Read.Lex.$w$sreadIntP'_closure:
         const Text.Read.Lex.$w$sreadIntP'_info;
         const 0;
 },
 sat_s3ynP_entry() //  [R1, R2]
         { info_tbl: [(c3zuS,
                       label: sat_s3ynP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zuS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zuT; else goto c3zuU;
       c3zuT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zuU: // global
           I64[Sp - 16] = block_c3zuP_info;
           _s3ynC::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ynC::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3zva; else goto c3zuQ;
       u3zva: // global
           call _c3zuP(R1) args: 0, res: 0, upd: 0;
       c3zuQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zuP() //  [R1]
         { info_tbl: [(c3zuP,
                       label: block_c3zuP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zuP: // global
           _s3ynC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3zuX_info;
           R3 = I64[R1 + 7];
           R2 = _s3ynC::P64;
           Sp = Sp + 8;
           call Text.Read.Lex.$w$svalDig_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zuX() //  [R1]
         { info_tbl: [(c3zuX,
                       label: block_c3zuX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zuX: // global
           if (R1 & 7 == 1) goto c3zv4; else goto c3zv8;
       c3zv4: // global
           R1 = Text.Read.Lex.$fShowLexeme2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zv8: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ynJ_entry() //  [R1, R2]
         { info_tbl: [(c3zvj,
                       label: sat_s3ynJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zvj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zvk; else goto c3zvl;
       c3zvk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zvl: // global
           I64[Sp - 16] = block_c3zvg_info;
           _s3ynC::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ynC::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3zvB; else goto c3zvh;
       u3zvB: // global
           call _c3zvg(R1) args: 0, res: 0, upd: 0;
       c3zvh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zvg() //  [R1]
         { info_tbl: [(c3zvg,
                       label: block_c3zvg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zvg: // global
           _s3ynC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3zvo_info;
           R3 = I64[R1 + 7];
           R2 = _s3ynC::P64;
           Sp = Sp + 8;
           call Text.Read.Lex.$w$svalDig_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zvo() //  [R1]
         { info_tbl: [(c3zvo,
                       label: block_c3zvo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zvo: // global
           if (R1 & 7 == 1) goto c3zvv; else goto c3zvz;
       c3zvv: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zvz: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3zvH_srtd" {
     u3zvH_srtd:
         const S3yFW_srt+240;
         const 34;
         const 8858370049;
 },
 Text.Read.Lex.$w$sreadIntP'_entry() //  [R2, R3]
         { info_tbl: [(c3zvC,
                       label: Text.Read.Lex.$w$sreadIntP'_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zvC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3zvG; else goto c3zvF;
       c3zvG: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$sreadIntP'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zvF: // global
           I64[Hp - 24] = sat_s3ynP_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3ynJ_info;
           P64[Hp] = R2;
           R5 = R3;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = R2;
           call Text.Read.Lex.$w$sreadIntP_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.493203883 UTC

[section ""data" . Text.Read.Lex.$wreadIntP'_closure" {
     Text.Read.Lex.$wreadIntP'_closure:
         const Text.Read.Lex.$wreadIntP'_info;
         const 0;
 },
 sat_s3yo5_entry() //  [R1, R2]
         { info_tbl: [(c3zvU,
                       label: sat_s3yo5_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zvU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3zvV; else goto c3zvW;
       c3zvV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zvW: // global
           I64[Sp - 32] = block_c3zvR_info;
           _s3ynQ::P64 = P64[R1 + 7];
           _s3ynR::P64 = P64[R1 + 15];
           _s3ynS::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3ynQ::P64;
           P64[Sp - 16] = _s3ynR::P64;
           P64[Sp - 8] = _s3ynS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3zwc; else goto c3zvS;
       u3zwc: // global
           call _c3zvR(R1) args: 0, res: 0, upd: 0;
       c3zvS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zvR() //  [R1]
         { info_tbl: [(c3zvR,
                       label: block_c3zvR_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zvR: // global
           _s3ynS::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3zvZ_info;
           R5 = I64[R1 + 7];
           R4 = _s3ynS::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zvZ() //  [R1]
         { info_tbl: [(c3zvZ,
                       label: block_c3zvZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zvZ: // global
           if (R1 & 7 == 1) goto c3zw6; else goto c3zwa;
       c3zw6: // global
           R1 = Text.Read.Lex.$fShowLexeme2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zwa: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ynZ_entry() //  [R1, R2]
         { info_tbl: [(c3zwl,
                       label: sat_s3ynZ_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zwl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3zwm; else goto c3zwn;
       c3zwm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zwn: // global
           I64[Sp - 32] = block_c3zwi_info;
           _s3ynQ::P64 = P64[R1 + 7];
           _s3ynR::P64 = P64[R1 + 15];
           _s3ynS::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3ynQ::P64;
           P64[Sp - 16] = _s3ynR::P64;
           P64[Sp - 8] = _s3ynS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3zwD; else goto c3zwj;
       u3zwD: // global
           call _c3zwi(R1) args: 0, res: 0, upd: 0;
       c3zwj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zwi() //  [R1]
         { info_tbl: [(c3zwi,
                       label: block_c3zwi_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zwi: // global
           _s3ynS::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3zwq_info;
           R5 = I64[R1 + 7];
           R4 = _s3ynS::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zwq() //  [R1]
         { info_tbl: [(c3zwq,
                       label: block_c3zwq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zwq: // global
           if (R1 & 7 == 1) goto c3zwx; else goto c3zwB;
       c3zwx: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zwB: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3zwJ_srtd" {
     u3zwJ_srtd:
         const S3yFW_srt+256;
         const 33;
         const 5368709121;
 },
 Text.Read.Lex.$wreadIntP'_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3zwE,
                       label: Text.Read.Lex.$wreadIntP'_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zwE: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3zwI; else goto c3zwH;
       c3zwI: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wreadIntP'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zwH: // global
           I64[Hp - 56] = sat_s3yo5_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3ynZ_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R6 = R5;
           R5 = Hp - 55;
           _s3ynS::P64 = R4;
           R4 = Hp - 23;
           _s3ynR::P64 = R3;
           R3 = _s3ynS::P64;
           R2 = _s3ynR::P64;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.496971241 UTC

[section ""data" . Text.Read.Lex.readDecP6_closure" {
     Text.Read.Lex.readDecP6_closure:
         const Text.Read.Lex.readDecP6_info;
         const 0;
 },
 Text.Read.Lex.readDecP6_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3zwR,
                       label: Text.Read.Lex.readDecP6_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zwR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zwS; else goto c3zwT;
       c3zwS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readDecP6_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zwT: // global
           I64[Sp - 8] = block_c3zwO_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zwO() //  [R1]
         { info_tbl: [(c3zwO,
                       label: block_c3zwO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zwO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zwW; else goto c3zwV;
       c3zwW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zwV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.498371421 UTC

[section ""data" . Text.Read.Lex.readOctP1_closure" {
     Text.Read.Lex.readOctP1_closure:
         const Text.Read.Lex.readOctP1_info;
         const 0;
 },
 Text.Read.Lex.readOctP1_entry() //  [R2]
         { info_tbl: [(c3zx4,
                       label: Text.Read.Lex.readOctP1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zx4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zx5; else goto c3zx6;
       c3zx5: // global
           R2 = R2;
           R1 = Text.Read.Lex.readOctP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zx6: // global
           I64[Sp - 8] = block_c3zx1_info;
           R3 = R2;
           R2 = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zx1() //  [R1]
         { info_tbl: [(c3zx1,
                       label: block_c3zx1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zx1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zx9; else goto c3zx8;
       c3zx9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zx8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.499508628 UTC

[section ""data" . Text.Read.Lex.readOctP_$sreadOctP_closure" {
     Text.Read.Lex.readOctP_$sreadOctP_closure:
         const Text.Read.Lex.readOctP_$sreadOctP_info;
         const 0;
 },
 Text.Read.Lex.readOctP_$sreadOctP_entry() //  [R2]
         { info_tbl: [(c3zxe,
                       label: Text.Read.Lex.readOctP_$sreadOctP_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zxe: // global
           R2 = R2;
           call Text.Read.Lex.readOctP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.500738398 UTC

[section ""data" . Text.Read.Lex.readOctP2_closure" {
     Text.Read.Lex.readOctP2_closure:
         const Text.Read.Lex.readOctP2_info;
         const 0;
 },
 w2_s3yoh_entry() //  [R1]
         { info_tbl: [(c3zxp,
                       label: w2_s3yoh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zxp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3zxq; else goto c3zxr;
       c3zxq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zxr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yol_entry() //  [R1, R2]
         { info_tbl: [(c3zxA,
                       label: sat_s3yol_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zxA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zxB; else goto c3zxC;
       c3zxB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zxC: // global
           I64[Sp - 8] = block_c3zxx_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zxx() //  [R1]
         { info_tbl: [(c3zxx,
                       label: block_c3zxx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zxx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zxF; else goto c3zxE;
       c3zxF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zxE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.readOctP2_entry() //  [R2, R3]
         { info_tbl: [(c3zxG,
                       label: Text.Read.Lex.readOctP2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zxG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3zxK; else goto c3zxJ;
       c3zxK: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readOctP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zxJ: // global
           I64[Hp - 48] = w2_s3yoh_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yol_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.502545806 UTC

[section ""data" . Text.Read.Lex.readOctP_closure" {
     Text.Read.Lex.readOctP_closure:
         const Text.Read.Lex.readOctP_info;
         const 0;
 },
 Text.Read.Lex.readOctP_entry() //  [R2, R3]
         { info_tbl: [(c3zxP,
                       label: Text.Read.Lex.readOctP_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zxP: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readOctP2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.503541259 UTC

[section ""data" . Text.Read.Lex.readDecP1_closure" {
     Text.Read.Lex.readDecP1_closure:
         const Text.Read.Lex.readDecP1_info;
         const 0;
 },
 section ""relreadonly" . u3zy5_srtd" {
     u3zy5_srtd:
         const S3yFW_srt+280;
         const 34;
         const 8858370049;
 },
 Text.Read.Lex.readDecP1_entry() //  [R2]
         { info_tbl: [(c3zxZ,
                       label: Text.Read.Lex.readDecP1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zxZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zy0; else goto c3zy1;
       c3zy0: // global
           R2 = R2;
           R1 = Text.Read.Lex.readDecP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zy1: // global
           I64[Sp - 8] = block_c3zxW_info;
           R3 = R2;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zxW() //  [R1]
         { info_tbl: [(c3zxW,
                       label: block_c3zxW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zxW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zy4; else goto c3zy3;
       c3zy4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zy3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.504799795 UTC

[section ""data" . Text.Read.Lex.readDecP_$sreadDecP_closure" {
     Text.Read.Lex.readDecP_$sreadDecP_closure:
         const Text.Read.Lex.readDecP_$sreadDecP_info;
         const 0;
 },
 Text.Read.Lex.readDecP_$sreadDecP_entry() //  [R2]
         { info_tbl: [(c3zya,
                       label: Text.Read.Lex.readDecP_$sreadDecP_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zya: // global
           R2 = R2;
           call Text.Read.Lex.readDecP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.506153403 UTC

[section ""data" . Text.Read.Lex.readDecP5_closure" {
     Text.Read.Lex.readDecP5_closure:
         const Text.Read.Lex.readDecP5_info;
         const 0;
 },
 w2_s3yor_entry() //  [R1]
         { info_tbl: [(c3zyl,
                       label: w2_s3yor_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zyl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3zym; else goto c3zyn;
       c3zym: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zyn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yov_entry() //  [R1, R2]
         { info_tbl: [(c3zyw,
                       label: sat_s3yov_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zyw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zyx; else goto c3zyy;
       c3zyx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zyy: // global
           I64[Sp - 8] = block_c3zyt_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zyt() //  [R1]
         { info_tbl: [(c3zyt,
                       label: block_c3zyt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zyt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zyB; else goto c3zyA;
       c3zyB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zyA: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.readDecP5_entry() //  [R2, R3]
         { info_tbl: [(c3zyC,
                       label: Text.Read.Lex.readDecP5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zyC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3zyG; else goto c3zyF;
       c3zyG: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readDecP5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zyF: // global
           I64[Hp - 48] = w2_s3yor_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yov_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.507978159 UTC

[section ""data" . Text.Read.Lex.readDecP_closure" {
     Text.Read.Lex.readDecP_closure:
         const Text.Read.Lex.readDecP_info;
         const 0;
 },
 Text.Read.Lex.readDecP_entry() //  [R2, R3]
         { info_tbl: [(c3zyL,
                       label: Text.Read.Lex.readDecP_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zyL: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readDecP5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.509989401 UTC

[section ""data" . Text.Read.Lex.readHexP1_closure" {
     Text.Read.Lex.readHexP1_closure:
         const Text.Read.Lex.readHexP1_info;
         const 0;
 },
 Text.Read.Lex.readHexP1_entry() //  [R2]
         { info_tbl: [(c3zyV,
                       label: Text.Read.Lex.readHexP1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zyV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zyW; else goto c3zyX;
       c3zyW: // global
           R2 = R2;
           R1 = Text.Read.Lex.readHexP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zyX: // global
           I64[Sp - 8] = block_c3zyS_info;
           R3 = R2;
           R2 = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zyS() //  [R1]
         { info_tbl: [(c3zyS,
                       label: block_c3zyS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zyS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zz0; else goto c3zyZ;
       c3zz0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zyZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.511157881 UTC

[section ""data" . Text.Read.Lex.readHexP_$sreadHexP_closure" {
     Text.Read.Lex.readHexP_$sreadHexP_closure:
         const Text.Read.Lex.readHexP_$sreadHexP_info;
         const 0;
 },
 Text.Read.Lex.readHexP_$sreadHexP_entry() //  [R2]
         { info_tbl: [(c3zz5,
                       label: Text.Read.Lex.readHexP_$sreadHexP_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zz5: // global
           R2 = R2;
           call Text.Read.Lex.readHexP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.51246426 UTC

[section ""data" . Text.Read.Lex.readHexP2_closure" {
     Text.Read.Lex.readHexP2_closure:
         const Text.Read.Lex.readHexP2_info;
         const 0;
 },
 w2_s3yoB_entry() //  [R1]
         { info_tbl: [(c3zzg,
                       label: w2_s3yoB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zzg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3zzh; else goto c3zzi;
       c3zzh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zzi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yoF_entry() //  [R1, R2]
         { info_tbl: [(c3zzr,
                       label: sat_s3yoF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zzr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zzs; else goto c3zzt;
       c3zzs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zzt: // global
           I64[Sp - 8] = block_c3zzo_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zzo() //  [R1]
         { info_tbl: [(c3zzo,
                       label: block_c3zzo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zzo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zzw; else goto c3zzv;
       c3zzw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zzv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.readHexP2_entry() //  [R2, R3]
         { info_tbl: [(c3zzx,
                       label: Text.Read.Lex.readHexP2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zzx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3zzB; else goto c3zzA;
       c3zzB: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readHexP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zzA: // global
           I64[Hp - 48] = w2_s3yoB_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yoF_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.514286209 UTC

[section ""data" . Text.Read.Lex.readHexP_closure" {
     Text.Read.Lex.readHexP_closure:
         const Text.Read.Lex.readHexP_info;
         const 0;
 },
 Text.Read.Lex.readHexP_entry() //  [R2, R3]
         { info_tbl: [(c3zzG,
                       label: Text.Read.Lex.readHexP_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zzG: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readHexP2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.518949502 UTC

[section ""data" . $wlexDigits_r3y9x_closure" {
     $wlexDigits_r3y9x_closure:
         const $wlexDigits_r3y9x_info;
         const 0;
 },
 lvl116_s3yoI_entry() //  [R1, R2]
         { info_tbl: [(c3zzZ,
                       label: lvl116_s3yoI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zzZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zA0; else goto c3zA1;
       c3zA0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zA1: // global
           I64[Sp - 16] = block_c3zzS_info;
           _s3yoH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yoH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3zA8; else goto c3zzT;
       u3zA8: // global
           call _c3zzS(R1) args: 0, res: 0, upd: 0;
       c3zzT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zzS() //  [R1]
         { info_tbl: [(c3zzS,
                       label: block_c3zzS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zzS: // global
           if (R1 & 7 == 1) goto c3zzW; else goto c3zzX;
       c3zzW: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zzX: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yoS_entry() //  [R1]
         { info_tbl: [(c3zAn,
                       label: sat_s3yoS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zAn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zAo; else goto c3zAp;
       c3zAo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zAp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yp4_entry() //  [R1, R2]
         { info_tbl: [(c3zAR,
                       label: sat_s3yp4_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zAR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zAV; else goto c3zAU;
       c3zAV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zAU: // global
           _s3yoP::P64 = P64[R1 + 7];
           _s3yp0::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yp0::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3yoP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3yp1_entry() //  [R1]
         { info_tbl: [(c3zAW,
                       label: lvl117_s3yp1_info
                       rep:HeapRep 5 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zAW: // global
           _s3yp1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3zAX; else goto c3zAY;
       c3zAY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zB0; else goto c3zAZ;
       c3zB0: // global
           HpAlloc = 24;
           goto c3zAX;
       c3zAX: // global
           R1 = _s3yp1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zAZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yp1::P64;
           _s3yoN::P64 = P64[_s3yp1::P64 + 16];
           _s3yoP::P64 = P64[_s3yp1::P64 + 24];
           _s3yoQ::P64 = P64[_s3yp1::P64 + 32];
           _s3yoU::P64 = P64[_s3yp1::P64 + 40];
           _s3yp0::P64 = P64[_s3yp1::P64 + 48];
           I64[Hp - 16] = sat_s3yp4_info;
           P64[Hp - 8] = _s3yoP::P64;
           P64[Hp] = _s3yp0::P64;
           R4 = _s3yoQ::P64;
           R3 = Hp - 15;
           R2 = _s3yoU::P64;
           R1 = _s3yoN::P64;
           Sp = Sp - 16;
           call scan_s3yoN_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yp6_entry() //  [R1]
         { info_tbl: [(c3zB6,
                       label: sat_s3yp6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zB6: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ypa_entry() //  [R1]
         { info_tbl: [(c3zBj,
                       label: sat_s3ypa_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zBj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zBk; else goto c3zBl;
       c3zBk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zBl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ypc_entry() //  [R1]
         { info_tbl: [(c3zBu,
                       label: sat_s3ypc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zBu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zBv; else goto c3zBw;
       c3zBv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zBw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yph_entry() //  [R1]
         { info_tbl: [(c3zBF,
                       label: sat_s3yph_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zBF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zBG; else goto c3zBH;
       c3zBG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zBH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ypj_entry() //  [R1]
         { info_tbl: [(c3zBQ,
                       label: sat_s3ypj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zBQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zBR; else goto c3zBS;
       c3zBR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zBS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ypq_entry() //  [R1]
         { info_tbl: [(c3zCb,
                       label: sat_s3ypq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zCb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zCc; else goto c3zCd;
       c3zCc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zCd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yps_entry() //  [R1]
         { info_tbl: [(c3zCm,
                       label: sat_s3yps_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zCm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zCn; else goto c3zCo;
       c3zCn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zCo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 scan_s3yoN_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c3zCt,
                       label: scan_s3yoN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zCt: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3zCu; else goto c3zCv;
       c3zCu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zCv: // global
           I64[Sp - 40] = block_c3zAe_info;
           _s3yoN::P64 = R1;
           _s3yoG::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3yoG::P64;
           P64[Sp - 24] = _s3yoN::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3zEF; else goto c3zAf;
       u3zEF: // global
           call _c3zAe(R1) args: 0, res: 0, upd: 0;
       c3zAf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zAe() //  [R1]
         { info_tbl: [(c3zAe,
                       label: block_c3zAe_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zAe: // global
           if (R1 & 7 == 1) goto c3zCq; else goto c3zCr;
       c3zCq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zCy; else goto c3zCx;
       c3zCy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zCx: // global
           I64[Hp - 16] = sat_s3yoS_info;
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 16;
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3zCr: // global
           I64[Sp - 8] = block_c3zAs_info;
           _s3yoT::P64 = P64[R1 + 6];
           _s3yoU::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s3yoU::P64;
           P64[Sp + 8] = _s3yoT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3zEv; else goto c3zAt;
       u3zEv: // global
           call _c3zAs(R1) args: 0, res: 0, upd: 0;
       c3zAt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zAs() //  [R1]
         { info_tbl: [(c3zAs,
                       label: block_c3zAs_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zAs: // global
           I64[Sp] = block_c3zAx_info;
           _s3yoW::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3yoW::I64;
           if (R1 & 7 != 0) goto u3zEw; else goto c3zAy;
       u3zEw: // global
           call _c3zAx(R1) args: 0, res: 0, upd: 0;
       c3zAy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zAx() //  [R1]
         { info_tbl: [(c3zAx,
                       label: block_c3zAx_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zAx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zCD; else goto c3zCC;
       c3zCD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zCC: // global
           _s3yoY::I64 = I64[R1 + 7];
           _s3yp7::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s3yp7::I64, 11)) goto u3zEl; else goto u3zEn;
       u3zEl: // global
           _s3yoP::P64 = P64[Sp + 32];
           _s3yoQ::P64 = P64[Sp + 40];
           if (%MO_S_Lt_W64(_s3yp7::I64, 10)) goto u3zEm; else goto c3zCX;
       u3zEm: // global
           if (_s3yp7::I64 != 8) goto c3zCJ; else goto c3zCQ;
       c3zCQ: // global
           if (48 > _s3yoY::I64) goto c3zCL; else goto c3zCP;
       c3zCL: // global
           I64[Hp - 16] = sat_s3ypa_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3zCP: // global
           if (_s3yoY::I64 > 55) goto c3zCN; else goto c3zCO;
       c3zCN: // global
           I64[Hp - 16] = sat_s3ypc_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3zCO: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 48;
           _c3zEk::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3zEk::P64;
           Sp = Sp + 8;
           goto u3zEA;
       c3zCX: // global
           if (48 > _s3yoY::I64) goto c3zCS; else goto c3zCW;
       c3zCS: // global
           I64[Hp - 16] = sat_s3yph_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3zCW: // global
           if (_s3yoY::I64 > 57) goto c3zCU; else goto c3zCV;
       c3zCU: // global
           I64[Hp - 16] = sat_s3ypj_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3zCV: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 48;
           _c3zEe::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3zEe::P64;
           Sp = Sp + 8;
           goto u3zEA;
       u3zEn: // global
           if (_s3yp7::I64 != 16) goto c3zCJ; else goto c3zDy;
       c3zCJ: // global
           Hp = Hp - 24;
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3zDy: // global
           if (48 > _s3yoY::I64) goto c3zDv; else goto c3zDx;
       c3zDx: // global
           if (_s3yoY::I64 > 57) goto c3zDv; else goto c3zDw;
       c3zDv: // global
           Hp = Hp - 24;
           I64[Sp + 16] = _s3yoY::I64;
           call _c3zBX() args: 0, res: 0, upd: 0;
       c3zDw: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 48;
           _c3zDQ::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3zDQ::P64;
           Sp = Sp + 8;
           goto u3zEA;
       u3zEA: // global
           call _c3zAF() args: 0, res: 0, upd: 0;
     }
 },
 _c3zBX() //  []
         { info_tbl: [(c3zBX,
                       label: block_c3zBX_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zBX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zD0; else goto c3zCZ;
       c3zD0: // global
           HpAlloc = 16;
           I64[Sp] = block_c3zBX_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3zCZ: // global
           _s3yoY::I64 = I64[Sp + 16];
           if (97 > _s3yoY::I64) goto c3zDj; else goto c3zDl;
       c3zDl: // global
           if (_s3yoY::I64 > 102) goto c3zDj; else goto c3zDk;
       c3zDj: // global
           Hp = Hp - 16;
           call _c3zC2() args: 0, res: 0, upd: 0;
       c3zDk: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3yoY::I64 - 87;
           P64[Sp + 16] = Hp - 7;
           Sp = Sp + 8;
           call _c3zAF() args: 0, res: 0, upd: 0;
     }
 },
 _c3zC2() //  []
         { info_tbl: [(c3zC2,
                       label: block_c3zC2_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zC2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3zD3; else goto c3zD2;
       c3zD3: // global
           HpAlloc = 24;
           I64[Sp] = block_c3zC2_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3zD2: // global
           _s3yoP::P64 = P64[Sp + 32];
           _s3yoQ::P64 = P64[Sp + 40];
           _s3yoY::I64 = I64[Sp + 16];
           if (65 > _s3yoY::I64) goto c3zD5; else goto c3zD9;
       c3zD5: // global
           I64[Hp - 16] = sat_s3ypq_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3zD9: // global
           if (_s3yoY::I64 > 70) goto c3zD7; else goto c3zD8;
       c3zD7: // global
           I64[Hp - 16] = sat_s3yps_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3zD8: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 55;
           _c3zE8::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3zE8::P64;
           Sp = Sp + 8;
           call _c3zAF() args: 0, res: 0, upd: 0;
     }
 },
 _c3zAF() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zAF: // global
           Hp = Hp + 88;
           _s3yp0::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c3zCH; else goto c3zCG;
       c3zCH: // global
           HpAlloc = 88;
           I64[Sp - 8] = block_c3zAE_info;
           R1 = _s3yp0::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zCG: // global
           I64[Hp - 80] = lvl117_s3yp1_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = _s3yp0::P64;
           I64[Hp - 24] = sat_s3yp6_info;
           P64[Hp - 16] = Hp - 80;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3zAE() //  [R1]
         { info_tbl: [(c3zAE,
                       label: block_c3zAE_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zAE: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c3zAF() args: 0, res: 0, upd: 0;
     }
 },
 sat_s3ypJ_entry() //  [R1, R2]
         { info_tbl: [(c3zEL,
                       label: sat_s3ypJ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zEL: // global
           R4 = P64[R1 + 7];
           R3 = GHC.Base.id_closure+1;
           R2 = R2;
           R1 = P64[R1 + 15];
           call scan_s3yoN_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlexDigits_r3y9x_entry() //  [R2, R3]
         { info_tbl: [(c3zEO,
                       label: $wlexDigits_r3y9x_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zEO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3zES; else goto c3zER;
       c3zES: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = $wlexDigits_r3y9x_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3zER: // global
           I64[Hp - 48] = lvl116_s3yoI_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = scan_s3yoN_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3ypJ_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 29;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.527615385 UTC

[section ""data" . a1_r3y9y_closure" {
     a1_r3y9y_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.528199581 UTC

[section ""data" . a2_r3y9z_closure" {
     a2_r3y9z_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.530752093 UTC

[section ""data" . $wlexHexOct_r3y9A_closure" {
     $wlexHexOct_r3y9A_closure:
         const $wlexHexOct_r3y9A_info;
         const 0;
 },
 sat_s3ypP_entry() //  [R1, R2]
         { info_tbl: [(c3zF8,
                       label: sat_s3ypP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zF8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zFc; else goto c3zFb;
       c3zFc: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zFb: // global
           _s3ypK::P64 = P64[R1 + 7];
           I64[Hp - 32] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 24] = a2_r3y9z_closure+1;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 2;
           R1 = _s3ypK::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3ypL_entry() //  [R1]
         { info_tbl: [(c3zFg,
                       label: lvl116_s3ypL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zFg: // global
           _s3ypL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3zFh; else goto c3zFi;
       c3zFi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zFk; else goto c3zFj;
       c3zFk: // global
           HpAlloc = 16;
           goto c3zFh;
       c3zFh: // global
           R1 = _s3ypL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zFj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ypL::P64;
           _s3ypK::P64 = P64[_s3ypL::P64 + 16];
           I64[Hp - 8] = sat_s3ypP_info;
           P64[Hp] = _s3ypK::P64;
           I64[Sp - 24] = block_c3zFd_info;
           R3 = Hp - 7;
           R2 = a2_r3y9z_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3zFd() //  [R1]
         { info_tbl: [(c3zFd,
                       label: block_c3zFd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zFd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zFn; else goto c3zFm;
       c3zFn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3zFm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ypW_entry() //  [R1, R2]
         { info_tbl: [(c3zFz,
                       label: sat_s3ypW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zFz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zFD; else goto c3zFC;
       c3zFD: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zFC: // global
           _s3ypK::P64 = P64[R1 + 7];
           I64[Hp - 32] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 24] = a1_r3y9y_closure+1;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 2;
           R1 = _s3ypK::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3ypS_entry() //  [R1]
         { info_tbl: [(c3zFH,
                       label: lvl117_s3ypS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zFH: // global
           _s3ypS::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3zFI; else goto c3zFJ;
       c3zFJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zFL; else goto c3zFK;
       c3zFL: // global
           HpAlloc = 16;
           goto c3zFI;
       c3zFI: // global
           R1 = _s3ypS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zFK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ypS::P64;
           _s3ypK::P64 = P64[_s3ypS::P64 + 16];
           I64[Hp - 8] = sat_s3ypW_info;
           P64[Hp] = _s3ypK::P64;
           I64[Sp - 24] = block_c3zFE_info;
           R3 = Hp - 7;
           R2 = a1_r3y9y_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3zFE() //  [R1]
         { info_tbl: [(c3zFE,
                       label: block_c3zFE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zFE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zFO; else goto c3zFN;
       c3zFO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3zFN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3ypZ_entry() //  [R1, R2]
         { info_tbl: [(c3zFX,
                       label: lvl118_s3ypZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zFX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3zFY; else goto c3zFZ;
       c3zFY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zFZ: // global
           I64[Sp - 24] = block_c3zFU_info;
           _s3ypL::P64 = P64[R1 + 7];
           _s3ypS::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ypL::P64;
           P64[Sp - 8] = _s3ypS::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3zGf; else goto c3zFV;
       u3zGf: // global
           call _c3zFU(R1) args: 0, res: 0, upd: 0;
       c3zFV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zFU() //  [R1]
         { info_tbl: [(c3zFU,
                       label: block_c3zFU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zFU: // global
           _s3ypL::P64 = P64[Sp + 8];
           _s3yq3::I64 = I64[R1 + 7];
           if (_s3yq3::I64 < 120) goto u3zGa; else goto u3zGe;
       u3zGa: // global
           _s3ypS::P64 = P64[Sp + 16];
           if (_s3yq3::I64 < 89) goto u3zGb; else goto u3zGd;
       u3zGb: // global
           if (_s3yq3::I64 >= 88) goto c3zG9; else goto u3zGc;
       u3zGc: // global
           if (_s3yq3::I64 != 79) goto c3zG5; else goto c3zG8;
       u3zGd: // global
           if (_s3yq3::I64 != 111) goto c3zG5; else goto c3zG8;
       c3zG8: // global
           R1 = _s3ypS::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3zGe: // global
           if (_s3yq3::I64 < 121) goto c3zG9; else goto c3zG5;
       c3zG9: // global
           R1 = _s3ypL::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3zG5: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yq9_entry() //  [R1, R2]
         { info_tbl: [(c3zGp,
                       label: sat_s3yq9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zGp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zGq; else goto c3zGr;
       c3zGq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zGr: // global
           I64[Sp - 16] = block_c3zGm_info;
           _s3yq4::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yq4::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3zGz; else goto c3zGn;
       u3zGz: // global
           call _c3zGm(R1) args: 0, res: 0, upd: 0;
       c3zGn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zGm() //  [R1]
         { info_tbl: [(c3zGm,
                       label: block_c3zGm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zGm: // global
           if (I64[R1 + 7] == 48) goto c3zGy; else goto c3zGx;
       c3zGy: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3zGx: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlexHexOct_r3y9A_entry() //  [R2]
         { info_tbl: [(c3zGA,
                       label: $wlexHexOct_r3y9A_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zGA: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3zGE; else goto c3zGD;
       c3zGE: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = $wlexHexOct_r3y9A_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zGD: // global
           I64[Hp - 96] = lvl116_s3ypL_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = lvl117_s3ypS_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = lvl118_s3ypZ_info;
           P64[Hp - 40] = Hp - 96;
           P64[Hp - 32] = Hp - 72;
           I64[Hp - 24] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = sat_s3yq9_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.535302367 UTC

[section ""data" . lexHexOct_r3y9B_closure" {
     lexHexOct_r3y9B_closure:
         const lexHexOct_r3y9B_info;
         const 0;
 },
 lexHexOct_r3y9B_entry() //  [R2]
         { info_tbl: [(c3zGM,
                       label: lexHexOct_r3y9B_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zGM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zGN; else goto c3zGO;
       c3zGN: // global
           R2 = R2;
           R1 = lexHexOct_r3y9B_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zGO: // global
           I64[Sp - 8] = block_c3zGJ_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexHexOct_r3y9A_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zGJ() //  [R1]
         { info_tbl: [(c3zGJ,
                       label: block_c3zGJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zGJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zGR; else goto c3zGQ;
       c3zGR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zGQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.536420498 UTC

[section ""data" . lvl6_r3y9C_closure" {
     lvl6_r3y9C_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.537992856 UTC

[section ""data" . $wlexFrac_r3y9D_closure" {
     $wlexFrac_r3y9D_closure:
         const $wlexFrac_r3y9D_info;
         const 0;
 },
 sat_s3yqh_entry() //  [R1, R2]
         { info_tbl: [(c3zH6,
                       label: sat_s3yqh_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zH6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zHa; else goto c3zH9;
       c3zHa: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zH9: // global
           _s3yqd::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s3yqd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yqe_entry() //  [R1]
         { info_tbl: [(c3zHe,
                       label: lvl116_s3yqe_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zHe: // global
           _s3yqe::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3zHf; else goto c3zHg;
       c3zHg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zHi; else goto c3zHh;
       c3zHi: // global
           HpAlloc = 16;
           goto c3zHf;
       c3zHf: // global
           R1 = _s3yqe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zHh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yqe::P64;
           _s3yqd::P64 = P64[_s3yqe::P64 + 16];
           I64[Hp - 8] = sat_s3yqh_info;
           P64[Hp] = _s3yqd::P64;
           I64[Sp - 24] = block_c3zHb_info;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3zHb() //  [R1]
         { info_tbl: [(c3zHb,
                       label: block_c3zHb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zHb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zHl; else goto c3zHk;
       c3zHl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3zHk: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqo_entry() //  [R1, R2]
         { info_tbl: [(c3zHu,
                       label: sat_s3yqo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zHu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zHv; else goto c3zHw;
       c3zHv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zHw: // global
           I64[Sp - 16] = block_c3zHr_info;
           _s3yqe::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yqe::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3zHE; else goto c3zHs;
       u3zHE: // global
           call _c3zHr(R1) args: 0, res: 0, upd: 0;
       c3zHs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3zHr() //  [R1]
         { info_tbl: [(c3zHr,
                       label: block_c3zHr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zHr: // global
           if (I64[R1 + 7] == 46) goto c3zHD; else goto c3zHC;
       c3zHD: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3zHC: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlexFrac_r3y9D_entry() //  [R2]
         { info_tbl: [(c3zHF,
                       label: $wlexFrac_r3y9D_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zHF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zHJ; else goto c3zHI;
       c3zHJ: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = $wlexFrac_r3y9D_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zHI: // global
           I64[Hp - 32] = lvl116_s3yqe_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3yqo_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.540642404 UTC

[section ""data" . lexFrac_r3y9E_closure" {
     lexFrac_r3y9E_closure:
         const lexFrac_r3y9E_info;
         const 0;
 },
 lexFrac_r3y9E_entry() //  [R2]
         { info_tbl: [(c3zHR,
                       label: lexFrac_r3y9E_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zHR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zHS; else goto c3zHT;
       c3zHS: // global
           R2 = R2;
           R1 = lexFrac_r3y9E_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zHT: // global
           I64[Sp - 8] = block_c3zHO_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexFrac_r3y9D_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zHO() //  [R1]
         { info_tbl: [(c3zHO,
                       label: block_c3zHO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zHO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zHW; else goto c3zHV;
       c3zHW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zHV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.542593979 UTC

[section ""cstring" . m1_r3y9F_bytes" {
     m1_r3y9F_bytes:
         I8[] [83,79,72]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.543450958 UTC

[section ""data" . m2_r3y9G_closure" {
     m2_r3y9G_closure:
         const m2_r3y9G_info;
         const 0;
         const 0;
         const 0;
 },
 m2_r3y9G_entry() //  [R1]
         { info_tbl: [(c3zI3,
                       label: m2_r3y9G_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zI3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zI4; else goto c3zI5;
       c3zI4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zI5: // global
           (_c3zI0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zI0::I64 == 0) goto c3zI2; else goto c3zI1;
       c3zI2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zI1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zI0::I64;
           R2 = m1_r3y9F_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.544375165 UTC

[section ""data" . x_r3y9H_closure" {
     x_r3y9H_closure:
         const GHC.Types.C#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.544967079 UTC

[section ""cstring" . m3_r3y9I_bytes" {
     m3_r3y9I_bytes:
         I8[] [83,79]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.545807349 UTC

[section ""data" . m4_r3y9J_closure" {
     m4_r3y9J_closure:
         const m4_r3y9J_info;
         const 0;
         const 0;
         const 0;
 },
 m4_r3y9J_entry() //  [R1]
         { info_tbl: [(c3zIc,
                       label: m4_r3y9J_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zIc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zId; else goto c3zIe;
       c3zId: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zIe: // global
           (_c3zI9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zI9::I64 == 0) goto c3zIb; else goto c3zIa;
       c3zIb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zIa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zI9::I64;
           R2 = m3_r3y9I_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.546744681 UTC

[section ""data" . x1_r3y9K_closure" {
     x1_r3y9K_closure:
         const GHC.Types.C#_con_info;
         const 14;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.54738348 UTC

[section ""cstring" . m5_r3y9L_bytes" {
     m5_r3y9L_bytes:
         I8[] [78,85,76]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.548123012 UTC

[section ""data" . m6_r3y9M_closure" {
     m6_r3y9M_closure:
         const m6_r3y9M_info;
         const 0;
         const 0;
         const 0;
 },
 m6_r3y9M_entry() //  [R1]
         { info_tbl: [(c3zIl,
                       label: m6_r3y9M_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zIl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zIm; else goto c3zIn;
       c3zIm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zIn: // global
           (_c3zIi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zIi::I64 == 0) goto c3zIk; else goto c3zIj;
       c3zIk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zIj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zIi::I64;
           R2 = m5_r3y9L_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.549085332 UTC

[section ""data" . x2_r3y9N_closure" {
     x2_r3y9N_closure:
         const GHC.Types.C#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.549749716 UTC

[section ""cstring" . m7_r3y9O_bytes" {
     m7_r3y9O_bytes:
         I8[] [83,84,88]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.550512563 UTC

[section ""data" . m8_r3y9P_closure" {
     m8_r3y9P_closure:
         const m8_r3y9P_info;
         const 0;
         const 0;
         const 0;
 },
 m8_r3y9P_entry() //  [R1]
         { info_tbl: [(c3zIu,
                       label: m8_r3y9P_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zIu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zIv; else goto c3zIw;
       c3zIv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zIw: // global
           (_c3zIr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zIr::I64 == 0) goto c3zIt; else goto c3zIs;
       c3zIt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zIs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zIr::I64;
           R2 = m7_r3y9O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.551441531 UTC

[section ""data" . x3_r3y9Q_closure" {
     x3_r3y9Q_closure:
         const GHC.Types.C#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.552038844 UTC

[section ""cstring" . m9_r3y9R_bytes" {
     m9_r3y9R_bytes:
         I8[] [69,84,88]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.552798262 UTC

[section ""data" . m10_r3y9S_closure" {
     m10_r3y9S_closure:
         const m10_r3y9S_info;
         const 0;
         const 0;
         const 0;
 },
 m10_r3y9S_entry() //  [R1]
         { info_tbl: [(c3zID,
                       label: m10_r3y9S_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zID: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zIE; else goto c3zIF;
       c3zIE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zIF: // global
           (_c3zIA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zIA::I64 == 0) goto c3zIC; else goto c3zIB;
       c3zIC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zIB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zIA::I64;
           R2 = m9_r3y9R_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.553803715 UTC

[section ""data" . x4_r3y9T_closure" {
     x4_r3y9T_closure:
         const GHC.Types.C#_con_info;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.554433382 UTC

[section ""cstring" . m11_r3y9U_bytes" {
     m11_r3y9U_bytes:
         I8[] [69,79,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.555775981 UTC

[section ""data" . m12_r3y9V_closure" {
     m12_r3y9V_closure:
         const m12_r3y9V_info;
         const 0;
         const 0;
         const 0;
 },
 m12_r3y9V_entry() //  [R1]
         { info_tbl: [(c3zIM,
                       label: m12_r3y9V_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zIM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zIN; else goto c3zIO;
       c3zIN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zIO: // global
           (_c3zIJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zIJ::I64 == 0) goto c3zIL; else goto c3zIK;
       c3zIL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zIK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zIJ::I64;
           R2 = m11_r3y9U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.556652562 UTC

[section ""data" . x5_r3y9W_closure" {
     x5_r3y9W_closure:
         const GHC.Types.C#_con_info;
         const 4;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.557189319 UTC

[section ""cstring" . m13_r3y9X_bytes" {
     m13_r3y9X_bytes:
         I8[] [69,78,81]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.557994005 UTC

[section ""data" . m14_r3y9Y_closure" {
     m14_r3y9Y_closure:
         const m14_r3y9Y_info;
         const 0;
         const 0;
         const 0;
 },
 m14_r3y9Y_entry() //  [R1]
         { info_tbl: [(c3zIV,
                       label: m14_r3y9Y_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zIV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zIW; else goto c3zIX;
       c3zIW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zIX: // global
           (_c3zIS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zIS::I64 == 0) goto c3zIU; else goto c3zIT;
       c3zIU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zIT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zIS::I64;
           R2 = m13_r3y9X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.558887947 UTC

[section ""data" . x6_r3y9Z_closure" {
     x6_r3y9Z_closure:
         const GHC.Types.C#_con_info;
         const 5;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.559494055 UTC

[section ""cstring" . m15_r3ya0_bytes" {
     m15_r3ya0_bytes:
         I8[] [65,67,75]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.560260783 UTC

[section ""data" . m16_r3ya1_closure" {
     m16_r3ya1_closure:
         const m16_r3ya1_info;
         const 0;
         const 0;
         const 0;
 },
 m16_r3ya1_entry() //  [R1]
         { info_tbl: [(c3zJ4,
                       label: m16_r3ya1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zJ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zJ5; else goto c3zJ6;
       c3zJ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zJ6: // global
           (_c3zJ1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zJ1::I64 == 0) goto c3zJ3; else goto c3zJ2;
       c3zJ3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zJ2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zJ1::I64;
           R2 = m15_r3ya0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.56116276 UTC

[section ""data" . x7_r3ya2_closure" {
     x7_r3ya2_closure:
         const GHC.Types.C#_con_info;
         const 6;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.561800812 UTC

[section ""cstring" . m17_r3ya3_bytes" {
     m17_r3ya3_bytes:
         I8[] [66,69,76]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.562499481 UTC

[section ""data" . m18_r3ya4_closure" {
     m18_r3ya4_closure:
         const m18_r3ya4_info;
         const 0;
         const 0;
         const 0;
 },
 m18_r3ya4_entry() //  [R1]
         { info_tbl: [(c3zJd,
                       label: m18_r3ya4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zJd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zJe; else goto c3zJf;
       c3zJe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zJf: // global
           (_c3zJa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zJa::I64 == 0) goto c3zJc; else goto c3zJb;
       c3zJc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zJb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zJa::I64;
           R2 = m17_r3ya3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.563409958 UTC

[section ""data" . x8_r3ya5_closure" {
     x8_r3ya5_closure:
         const GHC.Types.C#_con_info;
         const 7;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.564002785 UTC

[section ""cstring" . m19_r3ya6_bytes" {
     m19_r3ya6_bytes:
         I8[] [66,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.56476678 UTC

[section ""data" . m20_r3ya7_closure" {
     m20_r3ya7_closure:
         const m20_r3ya7_info;
         const 0;
         const 0;
         const 0;
 },
 m20_r3ya7_entry() //  [R1]
         { info_tbl: [(c3zJm,
                       label: m20_r3ya7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zJm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zJn; else goto c3zJo;
       c3zJn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zJo: // global
           (_c3zJj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zJj::I64 == 0) goto c3zJl; else goto c3zJk;
       c3zJl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zJk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zJj::I64;
           R2 = m19_r3ya6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.56574899 UTC

[section ""data" . x9_r3ya8_closure" {
     x9_r3ya8_closure:
         const GHC.Types.C#_con_info;
         const 8;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.566323174 UTC

[section ""cstring" . m21_r3ya9_bytes" {
     m21_r3ya9_bytes:
         I8[] [72,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.567102489 UTC

[section ""data" . m22_r3yaa_closure" {
     m22_r3yaa_closure:
         const m22_r3yaa_info;
         const 0;
         const 0;
         const 0;
 },
 m22_r3yaa_entry() //  [R1]
         { info_tbl: [(c3zJv,
                       label: m22_r3yaa_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zJv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zJw; else goto c3zJx;
       c3zJw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zJx: // global
           (_c3zJs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zJs::I64 == 0) goto c3zJu; else goto c3zJt;
       c3zJu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zJt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zJs::I64;
           R2 = m21_r3ya9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.568079488 UTC

[section ""data" . x10_r3yab_closure" {
     x10_r3yab_closure:
         const GHC.Types.C#_con_info;
         const 9;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.56914228 UTC

[section ""cstring" . m23_r3yac_bytes" {
     m23_r3yac_bytes:
         I8[] [76,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.569964589 UTC

[section ""data" . m24_r3yad_closure" {
     m24_r3yad_closure:
         const m24_r3yad_info;
         const 0;
         const 0;
         const 0;
 },
 m24_r3yad_entry() //  [R1]
         { info_tbl: [(c3zJE,
                       label: m24_r3yad_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zJE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zJF; else goto c3zJG;
       c3zJF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zJG: // global
           (_c3zJB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zJB::I64 == 0) goto c3zJD; else goto c3zJC;
       c3zJD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zJC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zJB::I64;
           R2 = m23_r3yac_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.57085425 UTC

[section ""data" . x11_r3yae_closure" {
     x11_r3yae_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.571371888 UTC

[section ""cstring" . m25_r3yaf_bytes" {
     m25_r3yaf_bytes:
         I8[] [86,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.572092994 UTC

[section ""data" . m26_r3yag_closure" {
     m26_r3yag_closure:
         const m26_r3yag_info;
         const 0;
         const 0;
         const 0;
 },
 m26_r3yag_entry() //  [R1]
         { info_tbl: [(c3zJN,
                       label: m26_r3yag_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zJN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zJO; else goto c3zJP;
       c3zJO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zJP: // global
           (_c3zJK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zJK::I64 == 0) goto c3zJM; else goto c3zJL;
       c3zJM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zJL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zJK::I64;
           R2 = m25_r3yaf_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.572953922 UTC

[section ""data" . x12_r3yah_closure" {
     x12_r3yah_closure:
         const GHC.Types.C#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.573592938 UTC

[section ""cstring" . m27_r3yai_bytes" {
     m27_r3yai_bytes:
         I8[] [70,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.574346351 UTC

[section ""data" . m28_r3yaj_closure" {
     m28_r3yaj_closure:
         const m28_r3yaj_info;
         const 0;
         const 0;
         const 0;
 },
 m28_r3yaj_entry() //  [R1]
         { info_tbl: [(c3zJW,
                       label: m28_r3yaj_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zJW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zJX; else goto c3zJY;
       c3zJX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zJY: // global
           (_c3zJT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zJT::I64 == 0) goto c3zJV; else goto c3zJU;
       c3zJV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zJU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zJT::I64;
           R2 = m27_r3yai_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.575247568 UTC

[section ""data" . x13_r3yak_closure" {
     x13_r3yak_closure:
         const GHC.Types.C#_con_info;
         const 12;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.575834633 UTC

[section ""cstring" . m29_r3yal_bytes" {
     m29_r3yal_bytes:
         I8[] [67,82]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.576601116 UTC

[section ""data" . m30_r3yam_closure" {
     m30_r3yam_closure:
         const m30_r3yam_info;
         const 0;
         const 0;
         const 0;
 },
 m30_r3yam_entry() //  [R1]
         { info_tbl: [(c3zK5,
                       label: m30_r3yam_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zK5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zK6; else goto c3zK7;
       c3zK6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zK7: // global
           (_c3zK2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zK2::I64 == 0) goto c3zK4; else goto c3zK3;
       c3zK4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zK3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zK2::I64;
           R2 = m29_r3yal_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.577729684 UTC

[section ""data" . x14_r3yan_closure" {
     x14_r3yan_closure:
         const GHC.Types.C#_con_info;
         const 13;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.578304119 UTC

[section ""cstring" . m31_r3yao_bytes" {
     m31_r3yao_bytes:
         I8[] [83,73]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.579090687 UTC

[section ""data" . m32_r3yap_closure" {
     m32_r3yap_closure:
         const m32_r3yap_info;
         const 0;
         const 0;
         const 0;
 },
 m32_r3yap_entry() //  [R1]
         { info_tbl: [(c3zKe,
                       label: m32_r3yap_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zKe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zKf; else goto c3zKg;
       c3zKf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zKg: // global
           (_c3zKb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zKb::I64 == 0) goto c3zKd; else goto c3zKc;
       c3zKd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zKc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zKb::I64;
           R2 = m31_r3yao_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.580049598 UTC

[section ""data" . x15_r3yaq_closure" {
     x15_r3yaq_closure:
         const GHC.Types.C#_con_info;
         const 15;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.580649664 UTC

[section ""cstring" . m33_r3yar_bytes" {
     m33_r3yar_bytes:
         I8[] [68,76,69]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.581402001 UTC

[section ""data" . m34_r3yas_closure" {
     m34_r3yas_closure:
         const m34_r3yas_info;
         const 0;
         const 0;
         const 0;
 },
 m34_r3yas_entry() //  [R1]
         { info_tbl: [(c3zKn,
                       label: m34_r3yas_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zKn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zKo; else goto c3zKp;
       c3zKo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zKp: // global
           (_c3zKk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zKk::I64 == 0) goto c3zKm; else goto c3zKl;
       c3zKm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zKl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zKk::I64;
           R2 = m33_r3yar_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.58285094 UTC

[section ""data" . x16_r3yat_closure" {
     x16_r3yat_closure:
         const GHC.Types.C#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.583403041 UTC

[section ""cstring" . m35_r3yau_bytes" {
     m35_r3yau_bytes:
         I8[] [68,67,49]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.584189282 UTC

[section ""data" . m36_r3yav_closure" {
     m36_r3yav_closure:
         const m36_r3yav_info;
         const 0;
         const 0;
         const 0;
 },
 m36_r3yav_entry() //  [R1]
         { info_tbl: [(c3zKw,
                       label: m36_r3yav_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zKw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zKx; else goto c3zKy;
       c3zKx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zKy: // global
           (_c3zKt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zKt::I64 == 0) goto c3zKv; else goto c3zKu;
       c3zKv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zKu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zKt::I64;
           R2 = m35_r3yau_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.585103886 UTC

[section ""data" . x17_r3yaw_closure" {
     x17_r3yaw_closure:
         const GHC.Types.C#_con_info;
         const 17;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.585719968 UTC

[section ""cstring" . m37_r3yax_bytes" {
     m37_r3yax_bytes:
         I8[] [68,67,50]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.586436358 UTC

[section ""data" . m38_r3yay_closure" {
     m38_r3yay_closure:
         const m38_r3yay_info;
         const 0;
         const 0;
         const 0;
 },
 m38_r3yay_entry() //  [R1]
         { info_tbl: [(c3zKF,
                       label: m38_r3yay_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zKF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zKG; else goto c3zKH;
       c3zKG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zKH: // global
           (_c3zKC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zKC::I64 == 0) goto c3zKE; else goto c3zKD;
       c3zKE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zKD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zKC::I64;
           R2 = m37_r3yax_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.587324772 UTC

[section ""data" . x18_r3yaz_closure" {
     x18_r3yaz_closure:
         const GHC.Types.C#_con_info;
         const 18;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.587858979 UTC

[section ""cstring" . m39_r3yaA_bytes" {
     m39_r3yaA_bytes:
         I8[] [68,67,51]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.588606832 UTC

[section ""data" . m40_r3yaB_closure" {
     m40_r3yaB_closure:
         const m40_r3yaB_info;
         const 0;
         const 0;
         const 0;
 },
 m40_r3yaB_entry() //  [R1]
         { info_tbl: [(c3zKO,
                       label: m40_r3yaB_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zKO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zKP; else goto c3zKQ;
       c3zKP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zKQ: // global
           (_c3zKL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zKL::I64 == 0) goto c3zKN; else goto c3zKM;
       c3zKN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zKM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zKL::I64;
           R2 = m39_r3yaA_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.589527117 UTC

[section ""data" . x19_r3yaC_closure" {
     x19_r3yaC_closure:
         const GHC.Types.C#_con_info;
         const 19;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.590106488 UTC

[section ""cstring" . m41_r3yaD_bytes" {
     m41_r3yaD_bytes:
         I8[] [68,67,52]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.590856311 UTC

[section ""data" . m42_r3yaE_closure" {
     m42_r3yaE_closure:
         const m42_r3yaE_info;
         const 0;
         const 0;
         const 0;
 },
 m42_r3yaE_entry() //  [R1]
         { info_tbl: [(c3zKX,
                       label: m42_r3yaE_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zKX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zKY; else goto c3zKZ;
       c3zKY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zKZ: // global
           (_c3zKU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zKU::I64 == 0) goto c3zKW; else goto c3zKV;
       c3zKW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zKV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zKU::I64;
           R2 = m41_r3yaD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.591755937 UTC

[section ""data" . x20_r3yaF_closure" {
     x20_r3yaF_closure:
         const GHC.Types.C#_con_info;
         const 20;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.592347895 UTC

[section ""cstring" . m43_r3yaG_bytes" {
     m43_r3yaG_bytes:
         I8[] [78,65,75]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.593079682 UTC

[section ""data" . m44_r3yaH_closure" {
     m44_r3yaH_closure:
         const m44_r3yaH_info;
         const 0;
         const 0;
         const 0;
 },
 m44_r3yaH_entry() //  [R1]
         { info_tbl: [(c3zL6,
                       label: m44_r3yaH_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zL6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zL7; else goto c3zL8;
       c3zL7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zL8: // global
           (_c3zL3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zL3::I64 == 0) goto c3zL5; else goto c3zL4;
       c3zL5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zL4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zL3::I64;
           R2 = m43_r3yaG_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.594103183 UTC

[section ""data" . x21_r3yaI_closure" {
     x21_r3yaI_closure:
         const GHC.Types.C#_con_info;
         const 21;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.594724959 UTC

[section ""cstring" . m45_r3yaJ_bytes" {
     m45_r3yaJ_bytes:
         I8[] [83,89,78]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.595972038 UTC

[section ""data" . m46_r3yaK_closure" {
     m46_r3yaK_closure:
         const m46_r3yaK_info;
         const 0;
         const 0;
         const 0;
 },
 m46_r3yaK_entry() //  [R1]
         { info_tbl: [(c3zLf,
                       label: m46_r3yaK_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zLf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zLg; else goto c3zLh;
       c3zLg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zLh: // global
           (_c3zLc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zLc::I64 == 0) goto c3zLe; else goto c3zLd;
       c3zLe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zLd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zLc::I64;
           R2 = m45_r3yaJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.596879553 UTC

[section ""data" . x22_r3yaL_closure" {
     x22_r3yaL_closure:
         const GHC.Types.C#_con_info;
         const 22;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.59844219 UTC

[section ""cstring" . m47_r3yaM_bytes" {
     m47_r3yaM_bytes:
         I8[] [69,84,66]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.599252706 UTC

[section ""data" . m48_r3yaN_closure" {
     m48_r3yaN_closure:
         const m48_r3yaN_info;
         const 0;
         const 0;
         const 0;
 },
 m48_r3yaN_entry() //  [R1]
         { info_tbl: [(c3zLo,
                       label: m48_r3yaN_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zLo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zLp; else goto c3zLq;
       c3zLp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zLq: // global
           (_c3zLl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zLl::I64 == 0) goto c3zLn; else goto c3zLm;
       c3zLn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zLm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zLl::I64;
           R2 = m47_r3yaM_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.600175245 UTC

[section ""data" . x23_r3yaO_closure" {
     x23_r3yaO_closure:
         const GHC.Types.C#_con_info;
         const 23;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.600738511 UTC

[section ""cstring" . m49_r3yaP_bytes" {
     m49_r3yaP_bytes:
         I8[] [67,65,78]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.601547306 UTC

[section ""data" . m50_r3yaQ_closure" {
     m50_r3yaQ_closure:
         const m50_r3yaQ_info;
         const 0;
         const 0;
         const 0;
 },
 m50_r3yaQ_entry() //  [R1]
         { info_tbl: [(c3zLx,
                       label: m50_r3yaQ_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zLx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zLy; else goto c3zLz;
       c3zLy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zLz: // global
           (_c3zLu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zLu::I64 == 0) goto c3zLw; else goto c3zLv;
       c3zLw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zLv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zLu::I64;
           R2 = m49_r3yaP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.60245396 UTC

[section ""data" . x24_r3yaR_closure" {
     x24_r3yaR_closure:
         const GHC.Types.C#_con_info;
         const 24;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.603005872 UTC

[section ""cstring" . m51_r3yaS_bytes" {
     m51_r3yaS_bytes:
         I8[] [69,77]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.603742945 UTC

[section ""data" . m52_r3yaT_closure" {
     m52_r3yaT_closure:
         const m52_r3yaT_info;
         const 0;
         const 0;
         const 0;
 },
 m52_r3yaT_entry() //  [R1]
         { info_tbl: [(c3zLG,
                       label: m52_r3yaT_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zLG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zLH; else goto c3zLI;
       c3zLH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zLI: // global
           (_c3zLD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zLD::I64 == 0) goto c3zLF; else goto c3zLE;
       c3zLF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zLE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zLD::I64;
           R2 = m51_r3yaS_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.604684347 UTC

[section ""data" . x25_r3yaU_closure" {
     x25_r3yaU_closure:
         const GHC.Types.C#_con_info;
         const 25;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.605312402 UTC

[section ""cstring" . m53_r3yaV_bytes" {
     m53_r3yaV_bytes:
         I8[] [83,85,66]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.606107129 UTC

[section ""data" . m54_r3yaW_closure" {
     m54_r3yaW_closure:
         const m54_r3yaW_info;
         const 0;
         const 0;
         const 0;
 },
 m54_r3yaW_entry() //  [R1]
         { info_tbl: [(c3zLP,
                       label: m54_r3yaW_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zLP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zLQ; else goto c3zLR;
       c3zLQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zLR: // global
           (_c3zLM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zLM::I64 == 0) goto c3zLO; else goto c3zLN;
       c3zLO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zLN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zLM::I64;
           R2 = m53_r3yaV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.607050352 UTC

[section ""data" . x26_r3yaX_closure" {
     x26_r3yaX_closure:
         const GHC.Types.C#_con_info;
         const 26;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.607682336 UTC

[section ""cstring" . m55_r3yaY_bytes" {
     m55_r3yaY_bytes:
         I8[] [69,83,67]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.608469518 UTC

[section ""data" . m56_r3yaZ_closure" {
     m56_r3yaZ_closure:
         const m56_r3yaZ_info;
         const 0;
         const 0;
         const 0;
 },
 m56_r3yaZ_entry() //  [R1]
         { info_tbl: [(c3zLY,
                       label: m56_r3yaZ_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zLY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zLZ; else goto c3zM0;
       c3zLZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zM0: // global
           (_c3zLV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zLV::I64 == 0) goto c3zLX; else goto c3zLW;
       c3zLX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zLW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zLV::I64;
           R2 = m55_r3yaY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.609980566 UTC

[section ""data" . x27_r3yb0_closure" {
     x27_r3yb0_closure:
         const GHC.Types.C#_con_info;
         const 27;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.610568622 UTC

[section ""cstring" . m57_r3yb1_bytes" {
     m57_r3yb1_bytes:
         I8[] [70,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.611331385 UTC

[section ""data" . m58_r3yb2_closure" {
     m58_r3yb2_closure:
         const m58_r3yb2_info;
         const 0;
         const 0;
         const 0;
 },
 m58_r3yb2_entry() //  [R1]
         { info_tbl: [(c3zM7,
                       label: m58_r3yb2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zM7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zM8; else goto c3zM9;
       c3zM8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zM9: // global
           (_c3zM4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zM4::I64 == 0) goto c3zM6; else goto c3zM5;
       c3zM6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zM5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zM4::I64;
           R2 = m57_r3yb1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.612247217 UTC

[section ""data" . x28_r3yb3_closure" {
     x28_r3yb3_closure:
         const GHC.Types.C#_con_info;
         const 28;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.612786355 UTC

[section ""cstring" . m59_r3yb4_bytes" {
     m59_r3yb4_bytes:
         I8[] [71,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.613571523 UTC

[section ""data" . m60_r3yb5_closure" {
     m60_r3yb5_closure:
         const m60_r3yb5_info;
         const 0;
         const 0;
         const 0;
 },
 m60_r3yb5_entry() //  [R1]
         { info_tbl: [(c3zMg,
                       label: m60_r3yb5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zMg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zMh; else goto c3zMi;
       c3zMh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zMi: // global
           (_c3zMd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zMd::I64 == 0) goto c3zMf; else goto c3zMe;
       c3zMf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zMe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zMd::I64;
           R2 = m59_r3yb4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.614539613 UTC

[section ""data" . x29_r3yb6_closure" {
     x29_r3yb6_closure:
         const GHC.Types.C#_con_info;
         const 29;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.615172335 UTC

[section ""cstring" . m61_r3yb7_bytes" {
     m61_r3yb7_bytes:
         I8[] [82,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.615930756 UTC

[section ""data" . m62_r3yb8_closure" {
     m62_r3yb8_closure:
         const m62_r3yb8_info;
         const 0;
         const 0;
         const 0;
 },
 m62_r3yb8_entry() //  [R1]
         { info_tbl: [(c3zMp,
                       label: m62_r3yb8_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zMp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zMq; else goto c3zMr;
       c3zMq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zMr: // global
           (_c3zMm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zMm::I64 == 0) goto c3zMo; else goto c3zMn;
       c3zMo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zMn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zMm::I64;
           R2 = m61_r3yb7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.616827407 UTC

[section ""data" . x30_r3yb9_closure" {
     x30_r3yb9_closure:
         const GHC.Types.C#_con_info;
         const 30;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.617492202 UTC

[section ""cstring" . m63_r3yba_bytes" {
     m63_r3yba_bytes:
         I8[] [85,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.618237016 UTC

[section ""data" . m64_r3ybb_closure" {
     m64_r3ybb_closure:
         const m64_r3ybb_info;
         const 0;
         const 0;
         const 0;
 },
 m64_r3ybb_entry() //  [R1]
         { info_tbl: [(c3zMy,
                       label: m64_r3ybb_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zMy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zMz; else goto c3zMA;
       c3zMz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zMA: // global
           (_c3zMv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zMv::I64 == 0) goto c3zMx; else goto c3zMw;
       c3zMx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zMw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zMv::I64;
           R2 = m63_r3yba_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.619179743 UTC

[section ""data" . x31_r3ybc_closure" {
     x31_r3ybc_closure:
         const GHC.Types.C#_con_info;
         const 31;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.619797589 UTC

[section ""cstring" . m65_r3ybd_bytes" {
     m65_r3ybd_bytes:
         I8[] [83,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.620592588 UTC

[section ""data" . m66_r3ybe_closure" {
     m66_r3ybe_closure:
         const m66_r3ybe_info;
         const 0;
         const 0;
         const 0;
 },
 m66_r3ybe_entry() //  [R1]
         { info_tbl: [(c3zMH,
                       label: m66_r3ybe_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zMH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zMI; else goto c3zMJ;
       c3zMI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zMJ: // global
           (_c3zME::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zME::I64 == 0) goto c3zMG; else goto c3zMF;
       c3zMG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zMF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zME::I64;
           R2 = m65_r3ybd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.621615143 UTC

[section ""data" . x32_r3ybf_closure" {
     x32_r3ybf_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.622698498 UTC

[section ""cstring" . m67_r3ybg_bytes" {
     m67_r3ybg_bytes:
         I8[] [68,69,76]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.623453004 UTC

[section ""data" . m68_r3ybh_closure" {
     m68_r3ybh_closure:
         const m68_r3ybh_info;
         const 0;
         const 0;
         const 0;
 },
 m68_r3ybh_entry() //  [R1]
         { info_tbl: [(c3zMQ,
                       label: m68_r3ybh_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zMQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zMR; else goto c3zMS;
       c3zMR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zMS: // global
           (_c3zMN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zMN::I64 == 0) goto c3zMP; else goto c3zMO;
       c3zMP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zMO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zMN::I64;
           R2 = m67_r3ybg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.624364455 UTC

[section ""data" . x33_r3ybi_closure" {
     x33_r3ybi_closure:
         const GHC.Types.C#_con_info;
         const 127;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.624924823 UTC

[section ""data" . sat_s3yqs_closure" {
     sat_s3yqs_closure:
         const GHC.Types.I#_con_info;
         const 1114111;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.625584133 UTC

[section ""data" . sat_s3yqt_closure" {
     sat_s3yqt_closure:
         const :_con_info;
         const sat_s3yqs_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.626396674 UTC

[section ""data" . lvl7_r3ybj_closure" {
     lvl7_r3ybj_closure:
         const lvl7_r3ybj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r3ybj_entry() //  [R1]
         { info_tbl: [(c3zMZ,
                       label: lvl7_r3ybj_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zMZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zN0; else goto c3zN1;
       c3zN0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zN1: // global
           (_c3zMW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zMW::I64 == 0) goto c3zMY; else goto c3zMX;
       c3zMY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3zMX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zMW::I64;
           R3 = sat_s3yqt_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.627359925 UTC

[section ""data" . lvl8_r3ybk_closure" {
     lvl8_r3ybk_closure:
         const GHC.Types.C#_con_info;
         const 34;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.627941686 UTC

[section ""data" . lvl9_r3ybl_closure" {
     lvl9_r3ybl_closure:
         const (,)_con_info;
         const lvl8_r3ybk_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.628528355 UTC

[section ""data" . lvl10_r3ybm_closure" {
     lvl10_r3ybm_closure:
         const GHC.Types.C#_con_info;
         const 39;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.62911437 UTC

[section ""data" . lvl11_r3ybn_closure" {
     lvl11_r3ybn_closure:
         const (,)_con_info;
         const lvl10_r3ybm_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.629803244 UTC

[section ""data" . lvl12_r3ybo_closure" {
     lvl12_r3ybo_closure:
         const GHC.Types.C#_con_info;
         const 92;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.630387796 UTC

[section ""data" . lvl13_r3ybp_closure" {
     lvl13_r3ybp_closure:
         const (,)_con_info;
         const lvl12_r3ybo_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.631003129 UTC

[section ""data" . lvl14_r3ybq_closure" {
     lvl14_r3ybq_closure:
         const (,)_con_info;
         const x8_r3ya5_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.631663911 UTC

[section ""data" . lvl15_r3ybr_closure" {
     lvl15_r3ybr_closure:
         const (,)_con_info;
         const x9_r3ya8_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.632278574 UTC

[section ""data" . lvl16_r3ybs_closure" {
     lvl16_r3ybs_closure:
         const (,)_con_info;
         const x13_r3yak_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.632923312 UTC

[section ""data" . lvl17_r3ybt_closure" {
     lvl17_r3ybt_closure:
         const (,)_con_info;
         const x11_r3yae_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.63360292 UTC

[section ""data" . lvl18_r3ybu_closure" {
     lvl18_r3ybu_closure:
         const (,)_con_info;
         const x14_r3yan_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.634231291 UTC

[section ""data" . lvl19_r3ybv_closure" {
     lvl19_r3ybv_closure:
         const (,)_con_info;
         const x10_r3yab_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.635329431 UTC

[section ""data" . lvl20_r3ybw_closure" {
     lvl20_r3ybw_closure:
         const (,)_con_info;
         const x12_r3yah_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.635955169 UTC

[section ""data" . lvl21_r3ybx_closure" {
     lvl21_r3ybx_closure:
         const (,)_con_info;
         const x2_r3y9N_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.636568813 UTC

[section ""data" . lvl22_r3yby_closure" {
     lvl22_r3yby_closure:
         const (,)_con_info;
         const x_r3y9H_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.637171456 UTC

[section ""data" . lvl23_r3ybz_closure" {
     lvl23_r3ybz_closure:
         const (,)_con_info;
         const x3_r3y9Q_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.637807786 UTC

[section ""data" . lvl24_r3ybA_closure" {
     lvl24_r3ybA_closure:
         const (,)_con_info;
         const x4_r3y9T_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.63838362 UTC

[section ""data" . lvl25_r3ybB_closure" {
     lvl25_r3ybB_closure:
         const (,)_con_info;
         const x5_r3y9W_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.638951297 UTC

[section ""data" . lvl26_r3ybC_closure" {
     lvl26_r3ybC_closure:
         const (,)_con_info;
         const x6_r3y9Z_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.639544481 UTC

[section ""data" . lvl27_r3ybD_closure" {
     lvl27_r3ybD_closure:
         const (,)_con_info;
         const x7_r3ya2_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.640156983 UTC

[section ""data" . lvl28_r3ybE_closure" {
     lvl28_r3ybE_closure:
         const (,)_con_info;
         const x1_r3y9K_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.640767125 UTC

[section ""data" . lvl29_r3ybF_closure" {
     lvl29_r3ybF_closure:
         const (,)_con_info;
         const x15_r3yaq_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.64139829 UTC

[section ""data" . lvl30_r3ybG_closure" {
     lvl30_r3ybG_closure:
         const (,)_con_info;
         const x16_r3yat_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.642006246 UTC

[section ""data" . lvl31_r3ybH_closure" {
     lvl31_r3ybH_closure:
         const (,)_con_info;
         const x17_r3yaw_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.642632858 UTC

[section ""data" . lvl32_r3ybI_closure" {
     lvl32_r3ybI_closure:
         const (,)_con_info;
         const x18_r3yaz_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.643233678 UTC

[section ""data" . lvl33_r3ybJ_closure" {
     lvl33_r3ybJ_closure:
         const (,)_con_info;
         const x19_r3yaC_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.643858502 UTC

[section ""data" . lvl34_r3ybK_closure" {
     lvl34_r3ybK_closure:
         const (,)_con_info;
         const x20_r3yaF_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.64447805 UTC

[section ""data" . lvl35_r3ybL_closure" {
     lvl35_r3ybL_closure:
         const (,)_con_info;
         const x21_r3yaI_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.645053996 UTC

[section ""data" . lvl36_r3ybM_closure" {
     lvl36_r3ybM_closure:
         const (,)_con_info;
         const x22_r3yaL_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.645729193 UTC

[section ""data" . lvl37_r3ybN_closure" {
     lvl37_r3ybN_closure:
         const (,)_con_info;
         const x23_r3yaO_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.64684882 UTC

[section ""data" . lvl38_r3ybO_closure" {
     lvl38_r3ybO_closure:
         const (,)_con_info;
         const x24_r3yaR_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.647494469 UTC

[section ""data" . lvl39_r3ybP_closure" {
     lvl39_r3ybP_closure:
         const (,)_con_info;
         const x25_r3yaU_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.648089944 UTC

[section ""data" . lvl40_r3ybQ_closure" {
     lvl40_r3ybQ_closure:
         const (,)_con_info;
         const x26_r3yaX_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.64869747 UTC

[section ""data" . lvl41_r3ybR_closure" {
     lvl41_r3ybR_closure:
         const (,)_con_info;
         const x27_r3yb0_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.649366235 UTC

[section ""data" . lvl42_r3ybS_closure" {
     lvl42_r3ybS_closure:
         const (,)_con_info;
         const x28_r3yb3_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.649977498 UTC

[section ""data" . lvl43_r3ybT_closure" {
     lvl43_r3ybT_closure:
         const (,)_con_info;
         const x29_r3yb6_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.650567741 UTC

[section ""data" . lvl44_r3ybU_closure" {
     lvl44_r3ybU_closure:
         const (,)_con_info;
         const x30_r3yb9_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.651203778 UTC

[section ""data" . lvl45_r3ybV_closure" {
     lvl45_r3ybV_closure:
         const (,)_con_info;
         const x31_r3ybc_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.652482463 UTC

[section ""data" . w1_r3ybW_closure" {
     w1_r3ybW_closure:
         const w1_r3ybW_info;
         const 0;
 },
 lvl116_s3yqv_entry() //  [R1]
         { info_tbl: [(c3zNa,
                       label: lvl116_s3yqv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zNa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zNb; else goto c3zNc;
       c3zNb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zNc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x1_r3y9K_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqx_entry() //  [R1]
         { info_tbl: [(c3zNi,
                       label: sat_s3yqx_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zNi: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 w1_r3ybW_entry() //  [R2]
         { info_tbl: [(c3zNo,
                       label: w1_r3ybW_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zNo: // global
           _s3yqu::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zNp; else goto c3zNq;
       c3zNq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zNs; else goto c3zNr;
       c3zNs: // global
           HpAlloc = 40;
           goto c3zNp;
       c3zNp: // global
           R2 = _s3yqu::P64;
           R1 = w1_r3ybW_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zNr: // global
           I64[Hp - 32] = lvl116_s3yqv_info;
           P64[Hp - 16] = _s3yqu::P64;
           I64[Hp - 8] = sat_s3yqx_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zNl_info;
           R3 = Hp - 7;
           R2 = m4_r3y9J_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zNl() //  [R1]
         { info_tbl: [(c3zNl,
                       label: block_c3zNl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zNl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zNv; else goto c3zNu;
       c3zNv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zNu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.655141441 UTC

[section ""data" . w_r3ybX_closure" {
     w_r3ybX_closure:
         const w_r3ybX_info;
         const 0;
 },
 lvl116_s3yqB_entry() //  [R1]
         { info_tbl: [(c3zNE,
                       label: lvl116_s3yqB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zNE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zNF; else goto c3zNG;
       c3zNF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zNG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x_r3y9H_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqD_entry() //  [R1]
         { info_tbl: [(c3zNM,
                       label: sat_s3yqD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zNM: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 w_r3ybX_entry() //  [R2]
         { info_tbl: [(c3zNS,
                       label: w_r3ybX_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zNS: // global
           _s3yqA::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zNT; else goto c3zNU;
       c3zNU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zNW; else goto c3zNV;
       c3zNW: // global
           HpAlloc = 40;
           goto c3zNT;
       c3zNT: // global
           R2 = _s3yqA::P64;
           R1 = w_r3ybX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zNV: // global
           I64[Hp - 32] = lvl116_s3yqB_info;
           P64[Hp - 16] = _s3yqA::P64;
           I64[Hp - 8] = sat_s3yqD_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zNP_info;
           R3 = Hp - 7;
           R2 = m2_r3y9G_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zNP() //  [R1]
         { info_tbl: [(c3zNP,
                       label: block_c3zNP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zNP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zNZ; else goto c3zNY;
       c3zNZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zNY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.656913528 UTC

[section ""data" . lvl46_r3ybY_closure" {
     lvl46_r3ybY_closure:
         const lvl46_r3ybY_info;
         const 0;
 },
 lvl46_r3ybY_entry() //  [R2]
         { info_tbl: [(c3zO7,
                       label: lvl46_r3ybY_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zO7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3zO8; else goto c3zO9;
       c3zO8: // global
           R2 = R2;
           R1 = lvl46_r3ybY_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zO9: // global
           I64[Sp - 8] = block_c3zO4_info;
           R4 = R2;
           R3 = w1_r3ybW_closure+1;
           R2 = w_r3ybX_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zO4() //  [R1]
         { info_tbl: [(c3zO4,
                       label: block_c3zO4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zO4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zOc; else goto c3zOb;
       c3zOc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zOb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.658602694 UTC

[section ""data" . lvl47_r3ybZ_closure" {
     lvl47_r3ybZ_closure:
         const lvl47_r3ybZ_info;
         const 0;
 },
 lvl116_s3yqK_entry() //  [R1]
         { info_tbl: [(c3zOl,
                       label: lvl116_s3yqK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zOl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zOm; else goto c3zOn;
       c3zOm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zOn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x2_r3y9N_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqM_entry() //  [R1]
         { info_tbl: [(c3zOt,
                       label: sat_s3yqM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zOt: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl47_r3ybZ_entry() //  [R2]
         { info_tbl: [(c3zOz,
                       label: lvl47_r3ybZ_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zOz: // global
           _s3yqJ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zOA; else goto c3zOB;
       c3zOB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zOD; else goto c3zOC;
       c3zOD: // global
           HpAlloc = 40;
           goto c3zOA;
       c3zOA: // global
           R2 = _s3yqJ::P64;
           R1 = lvl47_r3ybZ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zOC: // global
           I64[Hp - 32] = lvl116_s3yqK_info;
           P64[Hp - 16] = _s3yqJ::P64;
           I64[Hp - 8] = sat_s3yqM_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zOw_info;
           R3 = Hp - 7;
           R2 = m6_r3y9M_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zOw() //  [R1]
         { info_tbl: [(c3zOw,
                       label: block_c3zOw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zOw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zOG; else goto c3zOF;
       c3zOG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zOF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.660717427 UTC

[section ""data" . lvl48_r3yc0_closure" {
     lvl48_r3yc0_closure:
         const lvl48_r3yc0_info;
         const 0;
 },
 lvl116_s3yqQ_entry() //  [R1]
         { info_tbl: [(c3zOP,
                       label: lvl116_s3yqQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zOP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zOQ; else goto c3zOR;
       c3zOQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zOR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x3_r3y9Q_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqS_entry() //  [R1]
         { info_tbl: [(c3zOX,
                       label: sat_s3yqS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zOX: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl48_r3yc0_entry() //  [R2]
         { info_tbl: [(c3zP3,
                       label: lvl48_r3yc0_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zP3: // global
           _s3yqP::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zP4; else goto c3zP5;
       c3zP5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zP7; else goto c3zP6;
       c3zP7: // global
           HpAlloc = 40;
           goto c3zP4;
       c3zP4: // global
           R2 = _s3yqP::P64;
           R1 = lvl48_r3yc0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zP6: // global
           I64[Hp - 32] = lvl116_s3yqQ_info;
           P64[Hp - 16] = _s3yqP::P64;
           I64[Hp - 8] = sat_s3yqS_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zP0_info;
           R3 = Hp - 7;
           R2 = m8_r3y9P_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zP0() //  [R1]
         { info_tbl: [(c3zP0,
                       label: block_c3zP0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zP0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zPa; else goto c3zP9;
       c3zPa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zP9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.663449159 UTC

[section ""data" . lvl49_r3yc1_closure" {
     lvl49_r3yc1_closure:
         const lvl49_r3yc1_info;
         const 0;
 },
 lvl116_s3yqW_entry() //  [R1]
         { info_tbl: [(c3zPj,
                       label: lvl116_s3yqW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zPj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zPk; else goto c3zPl;
       c3zPk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zPl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x4_r3y9T_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqY_entry() //  [R1]
         { info_tbl: [(c3zPr,
                       label: sat_s3yqY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zPr: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl49_r3yc1_entry() //  [R2]
         { info_tbl: [(c3zPx,
                       label: lvl49_r3yc1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zPx: // global
           _s3yqV::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zPy; else goto c3zPz;
       c3zPz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zPB; else goto c3zPA;
       c3zPB: // global
           HpAlloc = 40;
           goto c3zPy;
       c3zPy: // global
           R2 = _s3yqV::P64;
           R1 = lvl49_r3yc1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zPA: // global
           I64[Hp - 32] = lvl116_s3yqW_info;
           P64[Hp - 16] = _s3yqV::P64;
           I64[Hp - 8] = sat_s3yqY_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zPu_info;
           R3 = Hp - 7;
           R2 = m10_r3y9S_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zPu() //  [R1]
         { info_tbl: [(c3zPu,
                       label: block_c3zPu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zPu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zPE; else goto c3zPD;
       c3zPE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zPD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.665670699 UTC

[section ""data" . lvl50_r3yc2_closure" {
     lvl50_r3yc2_closure:
         const lvl50_r3yc2_info;
         const 0;
 },
 lvl116_s3yr2_entry() //  [R1]
         { info_tbl: [(c3zPN,
                       label: lvl116_s3yr2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zPN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zPO; else goto c3zPP;
       c3zPO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zPP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x5_r3y9W_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yr4_entry() //  [R1]
         { info_tbl: [(c3zPV,
                       label: sat_s3yr4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zPV: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl50_r3yc2_entry() //  [R2]
         { info_tbl: [(c3zQ1,
                       label: lvl50_r3yc2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zQ1: // global
           _s3yr1::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zQ2; else goto c3zQ3;
       c3zQ3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zQ5; else goto c3zQ4;
       c3zQ5: // global
           HpAlloc = 40;
           goto c3zQ2;
       c3zQ2: // global
           R2 = _s3yr1::P64;
           R1 = lvl50_r3yc2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zQ4: // global
           I64[Hp - 32] = lvl116_s3yr2_info;
           P64[Hp - 16] = _s3yr1::P64;
           I64[Hp - 8] = sat_s3yr4_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zPY_info;
           R3 = Hp - 7;
           R2 = m12_r3y9V_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zPY() //  [R1]
         { info_tbl: [(c3zPY,
                       label: block_c3zPY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zPY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zQ8; else goto c3zQ7;
       c3zQ8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zQ7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.667690605 UTC

[section ""data" . lvl51_r3yc3_closure" {
     lvl51_r3yc3_closure:
         const lvl51_r3yc3_info;
         const 0;
 },
 lvl116_s3yr8_entry() //  [R1]
         { info_tbl: [(c3zQh,
                       label: lvl116_s3yr8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zQh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zQi; else goto c3zQj;
       c3zQi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zQj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x6_r3y9Z_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yra_entry() //  [R1]
         { info_tbl: [(c3zQp,
                       label: sat_s3yra_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zQp: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl51_r3yc3_entry() //  [R2]
         { info_tbl: [(c3zQv,
                       label: lvl51_r3yc3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zQv: // global
           _s3yr7::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zQw; else goto c3zQx;
       c3zQx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zQz; else goto c3zQy;
       c3zQz: // global
           HpAlloc = 40;
           goto c3zQw;
       c3zQw: // global
           R2 = _s3yr7::P64;
           R1 = lvl51_r3yc3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zQy: // global
           I64[Hp - 32] = lvl116_s3yr8_info;
           P64[Hp - 16] = _s3yr7::P64;
           I64[Hp - 8] = sat_s3yra_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zQs_info;
           R3 = Hp - 7;
           R2 = m14_r3y9Y_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zQs() //  [R1]
         { info_tbl: [(c3zQs,
                       label: block_c3zQs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zQs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zQC; else goto c3zQB;
       c3zQC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zQB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.671335162 UTC

[section ""data" . lvl52_r3yc4_closure" {
     lvl52_r3yc4_closure:
         const lvl52_r3yc4_info;
         const 0;
 },
 lvl116_s3yre_entry() //  [R1]
         { info_tbl: [(c3zQL,
                       label: lvl116_s3yre_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zQL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zQM; else goto c3zQN;
       c3zQM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zQN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x7_r3ya2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrg_entry() //  [R1]
         { info_tbl: [(c3zQT,
                       label: sat_s3yrg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zQT: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl52_r3yc4_entry() //  [R2]
         { info_tbl: [(c3zQZ,
                       label: lvl52_r3yc4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zQZ: // global
           _s3yrd::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zR0; else goto c3zR1;
       c3zR1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zR3; else goto c3zR2;
       c3zR3: // global
           HpAlloc = 40;
           goto c3zR0;
       c3zR0: // global
           R2 = _s3yrd::P64;
           R1 = lvl52_r3yc4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zR2: // global
           I64[Hp - 32] = lvl116_s3yre_info;
           P64[Hp - 16] = _s3yrd::P64;
           I64[Hp - 8] = sat_s3yrg_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zQW_info;
           R3 = Hp - 7;
           R2 = m16_r3ya1_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zQW() //  [R1]
         { info_tbl: [(c3zQW,
                       label: block_c3zQW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zQW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zR6; else goto c3zR5;
       c3zR6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zR5: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.673500906 UTC

[section ""data" . lvl53_r3yc5_closure" {
     lvl53_r3yc5_closure:
         const lvl53_r3yc5_info;
         const 0;
 },
 lvl116_s3yrk_entry() //  [R1]
         { info_tbl: [(c3zRf,
                       label: lvl116_s3yrk_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zRf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zRg; else goto c3zRh;
       c3zRg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zRh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x8_r3ya5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrm_entry() //  [R1]
         { info_tbl: [(c3zRn,
                       label: sat_s3yrm_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zRn: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl53_r3yc5_entry() //  [R2]
         { info_tbl: [(c3zRt,
                       label: lvl53_r3yc5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zRt: // global
           _s3yrj::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zRu; else goto c3zRv;
       c3zRv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zRx; else goto c3zRw;
       c3zRx: // global
           HpAlloc = 40;
           goto c3zRu;
       c3zRu: // global
           R2 = _s3yrj::P64;
           R1 = lvl53_r3yc5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zRw: // global
           I64[Hp - 32] = lvl116_s3yrk_info;
           P64[Hp - 16] = _s3yrj::P64;
           I64[Hp - 8] = sat_s3yrm_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zRq_info;
           R3 = Hp - 7;
           R2 = m18_r3ya4_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zRq() //  [R1]
         { info_tbl: [(c3zRq,
                       label: block_c3zRq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zRq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zRA; else goto c3zRz;
       c3zRA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zRz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.67555047 UTC

[section ""data" . lvl54_r3yc6_closure" {
     lvl54_r3yc6_closure:
         const lvl54_r3yc6_info;
         const 0;
 },
 lvl116_s3yrq_entry() //  [R1]
         { info_tbl: [(c3zRJ,
                       label: lvl116_s3yrq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zRJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zRK; else goto c3zRL;
       c3zRK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zRL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x9_r3ya8_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrs_entry() //  [R1]
         { info_tbl: [(c3zRR,
                       label: sat_s3yrs_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zRR: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl54_r3yc6_entry() //  [R2]
         { info_tbl: [(c3zRX,
                       label: lvl54_r3yc6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zRX: // global
           _s3yrp::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zRY; else goto c3zRZ;
       c3zRZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zS1; else goto c3zS0;
       c3zS1: // global
           HpAlloc = 40;
           goto c3zRY;
       c3zRY: // global
           R2 = _s3yrp::P64;
           R1 = lvl54_r3yc6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zS0: // global
           I64[Hp - 32] = lvl116_s3yrq_info;
           P64[Hp - 16] = _s3yrp::P64;
           I64[Hp - 8] = sat_s3yrs_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zRU_info;
           R3 = Hp - 7;
           R2 = m20_r3ya7_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zRU() //  [R1]
         { info_tbl: [(c3zRU,
                       label: block_c3zRU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zRU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zS4; else goto c3zS3;
       c3zS4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zS3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.677710364 UTC

[section ""data" . lvl55_r3yc7_closure" {
     lvl55_r3yc7_closure:
         const lvl55_r3yc7_info;
         const 0;
 },
 lvl116_s3yrw_entry() //  [R1]
         { info_tbl: [(c3zSd,
                       label: lvl116_s3yrw_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zSd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zSe; else goto c3zSf;
       c3zSe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zSf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x10_r3yab_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yry_entry() //  [R1]
         { info_tbl: [(c3zSl,
                       label: sat_s3yry_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zSl: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl55_r3yc7_entry() //  [R2]
         { info_tbl: [(c3zSr,
                       label: lvl55_r3yc7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zSr: // global
           _s3yrv::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zSs; else goto c3zSt;
       c3zSt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zSv; else goto c3zSu;
       c3zSv: // global
           HpAlloc = 40;
           goto c3zSs;
       c3zSs: // global
           R2 = _s3yrv::P64;
           R1 = lvl55_r3yc7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zSu: // global
           I64[Hp - 32] = lvl116_s3yrw_info;
           P64[Hp - 16] = _s3yrv::P64;
           I64[Hp - 8] = sat_s3yry_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zSo_info;
           R3 = Hp - 7;
           R2 = m22_r3yaa_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zSo() //  [R1]
         { info_tbl: [(c3zSo,
                       label: block_c3zSo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zSo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zSy; else goto c3zSx;
       c3zSy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zSx: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.680478485 UTC

[section ""data" . lvl56_r3yc8_closure" {
     lvl56_r3yc8_closure:
         const lvl56_r3yc8_info;
         const 0;
 },
 lvl116_s3yrC_entry() //  [R1]
         { info_tbl: [(c3zSH,
                       label: lvl116_s3yrC_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zSH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zSI; else goto c3zSJ;
       c3zSI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zSJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x11_r3yae_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrE_entry() //  [R1]
         { info_tbl: [(c3zSP,
                       label: sat_s3yrE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zSP: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl56_r3yc8_entry() //  [R2]
         { info_tbl: [(c3zSV,
                       label: lvl56_r3yc8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zSV: // global
           _s3yrB::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zSW; else goto c3zSX;
       c3zSX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zSZ; else goto c3zSY;
       c3zSZ: // global
           HpAlloc = 40;
           goto c3zSW;
       c3zSW: // global
           R2 = _s3yrB::P64;
           R1 = lvl56_r3yc8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zSY: // global
           I64[Hp - 32] = lvl116_s3yrC_info;
           P64[Hp - 16] = _s3yrB::P64;
           I64[Hp - 8] = sat_s3yrE_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zSS_info;
           R3 = Hp - 7;
           R2 = m24_r3yad_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zSS() //  [R1]
         { info_tbl: [(c3zSS,
                       label: block_c3zSS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zSS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zT2; else goto c3zT1;
       c3zT2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zT1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.68256288 UTC

[section ""data" . lvl57_r3yc9_closure" {
     lvl57_r3yc9_closure:
         const lvl57_r3yc9_info;
         const 0;
 },
 lvl116_s3yrI_entry() //  [R1]
         { info_tbl: [(c3zTb,
                       label: lvl116_s3yrI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zTb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zTc; else goto c3zTd;
       c3zTc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zTd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x12_r3yah_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrK_entry() //  [R1]
         { info_tbl: [(c3zTj,
                       label: sat_s3yrK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zTj: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl57_r3yc9_entry() //  [R2]
         { info_tbl: [(c3zTp,
                       label: lvl57_r3yc9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zTp: // global
           _s3yrH::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zTq; else goto c3zTr;
       c3zTr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zTt; else goto c3zTs;
       c3zTt: // global
           HpAlloc = 40;
           goto c3zTq;
       c3zTq: // global
           R2 = _s3yrH::P64;
           R1 = lvl57_r3yc9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zTs: // global
           I64[Hp - 32] = lvl116_s3yrI_info;
           P64[Hp - 16] = _s3yrH::P64;
           I64[Hp - 8] = sat_s3yrK_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zTm_info;
           R3 = Hp - 7;
           R2 = m26_r3yag_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zTm() //  [R1]
         { info_tbl: [(c3zTm,
                       label: block_c3zTm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zTm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zTw; else goto c3zTv;
       c3zTw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zTv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.684549571 UTC

[section ""data" . lvl58_r3yca_closure" {
     lvl58_r3yca_closure:
         const lvl58_r3yca_info;
         const 0;
 },
 lvl116_s3yrO_entry() //  [R1]
         { info_tbl: [(c3zTF,
                       label: lvl116_s3yrO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zTF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zTG; else goto c3zTH;
       c3zTG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zTH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x13_r3yak_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrQ_entry() //  [R1]
         { info_tbl: [(c3zTN,
                       label: sat_s3yrQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zTN: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl58_r3yca_entry() //  [R2]
         { info_tbl: [(c3zTT,
                       label: lvl58_r3yca_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zTT: // global
           _s3yrN::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zTU; else goto c3zTV;
       c3zTV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zTX; else goto c3zTW;
       c3zTX: // global
           HpAlloc = 40;
           goto c3zTU;
       c3zTU: // global
           R2 = _s3yrN::P64;
           R1 = lvl58_r3yca_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zTW: // global
           I64[Hp - 32] = lvl116_s3yrO_info;
           P64[Hp - 16] = _s3yrN::P64;
           I64[Hp - 8] = sat_s3yrQ_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zTQ_info;
           R3 = Hp - 7;
           R2 = m28_r3yaj_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zTQ() //  [R1]
         { info_tbl: [(c3zTQ,
                       label: block_c3zTQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zTQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zU0; else goto c3zTZ;
       c3zU0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zTZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.686689251 UTC

[section ""data" . lvl59_r3ycb_closure" {
     lvl59_r3ycb_closure:
         const lvl59_r3ycb_info;
         const 0;
 },
 lvl116_s3yrU_entry() //  [R1]
         { info_tbl: [(c3zU9,
                       label: lvl116_s3yrU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zU9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zUa; else goto c3zUb;
       c3zUa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zUb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x14_r3yan_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrW_entry() //  [R1]
         { info_tbl: [(c3zUh,
                       label: sat_s3yrW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zUh: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl59_r3ycb_entry() //  [R2]
         { info_tbl: [(c3zUn,
                       label: lvl59_r3ycb_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zUn: // global
           _s3yrT::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zUo; else goto c3zUp;
       c3zUp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zUr; else goto c3zUq;
       c3zUr: // global
           HpAlloc = 40;
           goto c3zUo;
       c3zUo: // global
           R2 = _s3yrT::P64;
           R1 = lvl59_r3ycb_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zUq: // global
           I64[Hp - 32] = lvl116_s3yrU_info;
           P64[Hp - 16] = _s3yrT::P64;
           I64[Hp - 8] = sat_s3yrW_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zUk_info;
           R3 = Hp - 7;
           R2 = m30_r3yam_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zUk() //  [R1]
         { info_tbl: [(c3zUk,
                       label: block_c3zUk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zUk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zUu; else goto c3zUt;
       c3zUu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zUt: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.688766447 UTC

[section ""data" . lvl60_r3ycc_closure" {
     lvl60_r3ycc_closure:
         const lvl60_r3ycc_info;
         const 0;
 },
 lvl116_s3ys0_entry() //  [R1]
         { info_tbl: [(c3zUD,
                       label: lvl116_s3ys0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zUD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zUE; else goto c3zUF;
       c3zUE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zUF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x15_r3yaq_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ys2_entry() //  [R1]
         { info_tbl: [(c3zUL,
                       label: sat_s3ys2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zUL: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl60_r3ycc_entry() //  [R2]
         { info_tbl: [(c3zUR,
                       label: lvl60_r3ycc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zUR: // global
           _s3yrZ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zUS; else goto c3zUT;
       c3zUT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zUV; else goto c3zUU;
       c3zUV: // global
           HpAlloc = 40;
           goto c3zUS;
       c3zUS: // global
           R2 = _s3yrZ::P64;
           R1 = lvl60_r3ycc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zUU: // global
           I64[Hp - 32] = lvl116_s3ys0_info;
           P64[Hp - 16] = _s3yrZ::P64;
           I64[Hp - 8] = sat_s3ys2_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zUO_info;
           R3 = Hp - 7;
           R2 = m32_r3yap_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zUO() //  [R1]
         { info_tbl: [(c3zUO,
                       label: block_c3zUO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zUO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zUY; else goto c3zUX;
       c3zUY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zUX: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.691054073 UTC

[section ""data" . lvl61_r3ycd_closure" {
     lvl61_r3ycd_closure:
         const lvl61_r3ycd_info;
         const 0;
 },
 lvl116_s3ys6_entry() //  [R1]
         { info_tbl: [(c3zV7,
                       label: lvl116_s3ys6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zV7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zV8; else goto c3zV9;
       c3zV8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zV9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x16_r3yat_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ys8_entry() //  [R1]
         { info_tbl: [(c3zVf,
                       label: sat_s3ys8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zVf: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl61_r3ycd_entry() //  [R2]
         { info_tbl: [(c3zVl,
                       label: lvl61_r3ycd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zVl: // global
           _s3ys5::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zVm; else goto c3zVn;
       c3zVn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zVp; else goto c3zVo;
       c3zVp: // global
           HpAlloc = 40;
           goto c3zVm;
       c3zVm: // global
           R2 = _s3ys5::P64;
           R1 = lvl61_r3ycd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zVo: // global
           I64[Hp - 32] = lvl116_s3ys6_info;
           P64[Hp - 16] = _s3ys5::P64;
           I64[Hp - 8] = sat_s3ys8_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zVi_info;
           R3 = Hp - 7;
           R2 = m34_r3yas_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zVi() //  [R1]
         { info_tbl: [(c3zVi,
                       label: block_c3zVi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zVi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zVs; else goto c3zVr;
       c3zVs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zVr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.693218305 UTC

[section ""data" . lvl62_r3yce_closure" {
     lvl62_r3yce_closure:
         const lvl62_r3yce_info;
         const 0;
 },
 lvl116_s3ysc_entry() //  [R1]
         { info_tbl: [(c3zVB,
                       label: lvl116_s3ysc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zVB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zVC; else goto c3zVD;
       c3zVC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zVD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x17_r3yaw_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yse_entry() //  [R1]
         { info_tbl: [(c3zVJ,
                       label: sat_s3yse_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zVJ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl62_r3yce_entry() //  [R2]
         { info_tbl: [(c3zVP,
                       label: lvl62_r3yce_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zVP: // global
           _s3ysb::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zVQ; else goto c3zVR;
       c3zVR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zVT; else goto c3zVS;
       c3zVT: // global
           HpAlloc = 40;
           goto c3zVQ;
       c3zVQ: // global
           R2 = _s3ysb::P64;
           R1 = lvl62_r3yce_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zVS: // global
           I64[Hp - 32] = lvl116_s3ysc_info;
           P64[Hp - 16] = _s3ysb::P64;
           I64[Hp - 8] = sat_s3yse_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zVM_info;
           R3 = Hp - 7;
           R2 = m36_r3yav_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zVM() //  [R1]
         { info_tbl: [(c3zVM,
                       label: block_c3zVM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zVM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zVW; else goto c3zVV;
       c3zVW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zVV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.696046772 UTC

[section ""data" . lvl63_r3ycf_closure" {
     lvl63_r3ycf_closure:
         const lvl63_r3ycf_info;
         const 0;
 },
 lvl116_s3ysi_entry() //  [R1]
         { info_tbl: [(c3zW5,
                       label: lvl116_s3ysi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zW5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zW6; else goto c3zW7;
       c3zW6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zW7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x18_r3yaz_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysk_entry() //  [R1]
         { info_tbl: [(c3zWd,
                       label: sat_s3ysk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zWd: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl63_r3ycf_entry() //  [R2]
         { info_tbl: [(c3zWj,
                       label: lvl63_r3ycf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zWj: // global
           _s3ysh::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zWk; else goto c3zWl;
       c3zWl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zWn; else goto c3zWm;
       c3zWn: // global
           HpAlloc = 40;
           goto c3zWk;
       c3zWk: // global
           R2 = _s3ysh::P64;
           R1 = lvl63_r3ycf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zWm: // global
           I64[Hp - 32] = lvl116_s3ysi_info;
           P64[Hp - 16] = _s3ysh::P64;
           I64[Hp - 8] = sat_s3ysk_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zWg_info;
           R3 = Hp - 7;
           R2 = m38_r3yay_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zWg() //  [R1]
         { info_tbl: [(c3zWg,
                       label: block_c3zWg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zWg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zWq; else goto c3zWp;
       c3zWq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zWp: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.698171275 UTC

[section ""data" . lvl64_r3ycg_closure" {
     lvl64_r3ycg_closure:
         const lvl64_r3ycg_info;
         const 0;
 },
 lvl116_s3yso_entry() //  [R1]
         { info_tbl: [(c3zWz,
                       label: lvl116_s3yso_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zWz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zWA; else goto c3zWB;
       c3zWA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zWB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x19_r3yaC_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysq_entry() //  [R1]
         { info_tbl: [(c3zWH,
                       label: sat_s3ysq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zWH: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl64_r3ycg_entry() //  [R2]
         { info_tbl: [(c3zWN,
                       label: lvl64_r3ycg_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zWN: // global
           _s3ysn::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zWO; else goto c3zWP;
       c3zWP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zWR; else goto c3zWQ;
       c3zWR: // global
           HpAlloc = 40;
           goto c3zWO;
       c3zWO: // global
           R2 = _s3ysn::P64;
           R1 = lvl64_r3ycg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zWQ: // global
           I64[Hp - 32] = lvl116_s3yso_info;
           P64[Hp - 16] = _s3ysn::P64;
           I64[Hp - 8] = sat_s3ysq_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zWK_info;
           R3 = Hp - 7;
           R2 = m40_r3yaB_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zWK() //  [R1]
         { info_tbl: [(c3zWK,
                       label: block_c3zWK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zWK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zWU; else goto c3zWT;
       c3zWU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zWT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.70020167 UTC

[section ""data" . lvl65_r3ych_closure" {
     lvl65_r3ych_closure:
         const lvl65_r3ych_info;
         const 0;
 },
 lvl116_s3ysu_entry() //  [R1]
         { info_tbl: [(c3zX3,
                       label: lvl116_s3ysu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zX3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zX4; else goto c3zX5;
       c3zX4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zX5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x20_r3yaF_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysw_entry() //  [R1]
         { info_tbl: [(c3zXb,
                       label: sat_s3ysw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zXb: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl65_r3ych_entry() //  [R2]
         { info_tbl: [(c3zXh,
                       label: lvl65_r3ych_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zXh: // global
           _s3yst::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zXi; else goto c3zXj;
       c3zXj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zXl; else goto c3zXk;
       c3zXl: // global
           HpAlloc = 40;
           goto c3zXi;
       c3zXi: // global
           R2 = _s3yst::P64;
           R1 = lvl65_r3ych_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zXk: // global
           I64[Hp - 32] = lvl116_s3ysu_info;
           P64[Hp - 16] = _s3yst::P64;
           I64[Hp - 8] = sat_s3ysw_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zXe_info;
           R3 = Hp - 7;
           R2 = m42_r3yaE_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zXe() //  [R1]
         { info_tbl: [(c3zXe,
                       label: block_c3zXe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zXe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zXo; else goto c3zXn;
       c3zXo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zXn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.702295293 UTC

[section ""data" . lvl66_r3yci_closure" {
     lvl66_r3yci_closure:
         const lvl66_r3yci_info;
         const 0;
 },
 lvl116_s3ysA_entry() //  [R1]
         { info_tbl: [(c3zXx,
                       label: lvl116_s3ysA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zXx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zXy; else goto c3zXz;
       c3zXy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zXz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x21_r3yaI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysC_entry() //  [R1]
         { info_tbl: [(c3zXF,
                       label: sat_s3ysC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zXF: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl66_r3yci_entry() //  [R2]
         { info_tbl: [(c3zXL,
                       label: lvl66_r3yci_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zXL: // global
           _s3ysz::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zXM; else goto c3zXN;
       c3zXN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zXP; else goto c3zXO;
       c3zXP: // global
           HpAlloc = 40;
           goto c3zXM;
       c3zXM: // global
           R2 = _s3ysz::P64;
           R1 = lvl66_r3yci_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zXO: // global
           I64[Hp - 32] = lvl116_s3ysA_info;
           P64[Hp - 16] = _s3ysz::P64;
           I64[Hp - 8] = sat_s3ysC_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zXI_info;
           R3 = Hp - 7;
           R2 = m44_r3yaH_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zXI() //  [R1]
         { info_tbl: [(c3zXI,
                       label: block_c3zXI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zXI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zXS; else goto c3zXR;
       c3zXS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zXR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.704381793 UTC

[section ""data" . lvl67_r3ycj_closure" {
     lvl67_r3ycj_closure:
         const lvl67_r3ycj_info;
         const 0;
 },
 lvl116_s3ysG_entry() //  [R1]
         { info_tbl: [(c3zY1,
                       label: lvl116_s3ysG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zY1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zY2; else goto c3zY3;
       c3zY2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zY3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x22_r3yaL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysI_entry() //  [R1]
         { info_tbl: [(c3zY9,
                       label: sat_s3ysI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zY9: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl67_r3ycj_entry() //  [R2]
         { info_tbl: [(c3zYf,
                       label: lvl67_r3ycj_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zYf: // global
           _s3ysF::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zYg; else goto c3zYh;
       c3zYh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zYj; else goto c3zYi;
       c3zYj: // global
           HpAlloc = 40;
           goto c3zYg;
       c3zYg: // global
           R2 = _s3ysF::P64;
           R1 = lvl67_r3ycj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zYi: // global
           I64[Hp - 32] = lvl116_s3ysG_info;
           P64[Hp - 16] = _s3ysF::P64;
           I64[Hp - 8] = sat_s3ysI_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zYc_info;
           R3 = Hp - 7;
           R2 = m46_r3yaK_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zYc() //  [R1]
         { info_tbl: [(c3zYc,
                       label: block_c3zYc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zYc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zYm; else goto c3zYl;
       c3zYm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zYl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.706681391 UTC

[section ""data" . lvl68_r3yck_closure" {
     lvl68_r3yck_closure:
         const lvl68_r3yck_info;
         const 0;
 },
 lvl116_s3ysM_entry() //  [R1]
         { info_tbl: [(c3zYv,
                       label: lvl116_s3ysM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zYv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zYw; else goto c3zYx;
       c3zYw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zYx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x23_r3yaO_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysO_entry() //  [R1]
         { info_tbl: [(c3zYD,
                       label: sat_s3ysO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zYD: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl68_r3yck_entry() //  [R2]
         { info_tbl: [(c3zYJ,
                       label: lvl68_r3yck_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zYJ: // global
           _s3ysL::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zYK; else goto c3zYL;
       c3zYL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zYN; else goto c3zYM;
       c3zYN: // global
           HpAlloc = 40;
           goto c3zYK;
       c3zYK: // global
           R2 = _s3ysL::P64;
           R1 = lvl68_r3yck_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zYM: // global
           I64[Hp - 32] = lvl116_s3ysM_info;
           P64[Hp - 16] = _s3ysL::P64;
           I64[Hp - 8] = sat_s3ysO_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zYG_info;
           R3 = Hp - 7;
           R2 = m48_r3yaN_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zYG() //  [R1]
         { info_tbl: [(c3zYG,
                       label: block_c3zYG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zYG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zYQ; else goto c3zYP;
       c3zYQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zYP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.708800433 UTC

[section ""data" . lvl69_r3ycl_closure" {
     lvl69_r3ycl_closure:
         const lvl69_r3ycl_info;
         const 0;
 },
 lvl116_s3ysS_entry() //  [R1]
         { info_tbl: [(c3zYZ,
                       label: lvl116_s3ysS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zYZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zZ0; else goto c3zZ1;
       c3zZ0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zZ1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x24_r3yaR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysU_entry() //  [R1]
         { info_tbl: [(c3zZ7,
                       label: sat_s3ysU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zZ7: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl69_r3ycl_entry() //  [R2]
         { info_tbl: [(c3zZd,
                       label: lvl69_r3ycl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zZd: // global
           _s3ysR::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zZe; else goto c3zZf;
       c3zZf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zZh; else goto c3zZg;
       c3zZh: // global
           HpAlloc = 40;
           goto c3zZe;
       c3zZe: // global
           R2 = _s3ysR::P64;
           R1 = lvl69_r3ycl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zZg: // global
           I64[Hp - 32] = lvl116_s3ysS_info;
           P64[Hp - 16] = _s3ysR::P64;
           I64[Hp - 8] = sat_s3ysU_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zZa_info;
           R3 = Hp - 7;
           R2 = m50_r3yaQ_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zZa() //  [R1]
         { info_tbl: [(c3zZa,
                       label: block_c3zZa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zZa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zZk; else goto c3zZj;
       c3zZk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zZj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.711750756 UTC

[section ""data" . lvl70_r3ycm_closure" {
     lvl70_r3ycm_closure:
         const lvl70_r3ycm_info;
         const 0;
 },
 lvl116_s3ysY_entry() //  [R1]
         { info_tbl: [(c3zZt,
                       label: lvl116_s3ysY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zZt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zZu; else goto c3zZv;
       c3zZu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zZv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x25_r3yaU_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yt0_entry() //  [R1]
         { info_tbl: [(c3zZB,
                       label: sat_s3yt0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zZB: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl70_r3ycm_entry() //  [R2]
         { info_tbl: [(c3zZH,
                       label: lvl70_r3ycm_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zZH: // global
           _s3ysX::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3zZI; else goto c3zZJ;
       c3zZJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3zZL; else goto c3zZK;
       c3zZL: // global
           HpAlloc = 40;
           goto c3zZI;
       c3zZI: // global
           R2 = _s3ysX::P64;
           R1 = lvl70_r3ycm_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3zZK: // global
           I64[Hp - 32] = lvl116_s3ysY_info;
           P64[Hp - 16] = _s3ysX::P64;
           I64[Hp - 8] = sat_s3yt0_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3zZE_info;
           R3 = Hp - 7;
           R2 = m52_r3yaT_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3zZE() //  [R1]
         { info_tbl: [(c3zZE,
                       label: block_c3zZE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zZE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3zZO; else goto c3zZN;
       c3zZO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3zZN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.713873307 UTC

[section ""data" . lvl71_r3ycn_closure" {
     lvl71_r3ycn_closure:
         const lvl71_r3ycn_info;
         const 0;
 },
 lvl116_s3yt4_entry() //  [R1]
         { info_tbl: [(c3zZX,
                       label: lvl116_s3yt4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3zZX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zZY; else goto c3zZZ;
       c3zZY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zZZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x26_r3yaX_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yt6_entry() //  [R1]
         { info_tbl: [(c3A05,
                       label: sat_s3yt6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A05: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl71_r3ycn_entry() //  [R2]
         { info_tbl: [(c3A0b,
                       label: lvl71_r3ycn_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A0b: // global
           _s3yt3::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3A0c; else goto c3A0d;
       c3A0d: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3A0f; else goto c3A0e;
       c3A0f: // global
           HpAlloc = 40;
           goto c3A0c;
       c3A0c: // global
           R2 = _s3yt3::P64;
           R1 = lvl71_r3ycn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3A0e: // global
           I64[Hp - 32] = lvl116_s3yt4_info;
           P64[Hp - 16] = _s3yt3::P64;
           I64[Hp - 8] = sat_s3yt6_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3A08_info;
           R3 = Hp - 7;
           R2 = m54_r3yaW_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3A08() //  [R1]
         { info_tbl: [(c3A08,
                       label: block_c3A08_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A08: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3A0i; else goto c3A0h;
       c3A0i: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3A0h: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.71592672 UTC

[section ""data" . lvl72_r3yco_closure" {
     lvl72_r3yco_closure:
         const lvl72_r3yco_info;
         const 0;
 },
 lvl116_s3yta_entry() //  [R1]
         { info_tbl: [(c3A0r,
                       label: lvl116_s3yta_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A0r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A0s; else goto c3A0t;
       c3A0s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A0t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x27_r3yb0_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytc_entry() //  [R1]
         { info_tbl: [(c3A0z,
                       label: sat_s3ytc_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A0z: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl72_r3yco_entry() //  [R2]
         { info_tbl: [(c3A0F,
                       label: lvl72_r3yco_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A0F: // global
           _s3yt9::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3A0G; else goto c3A0H;
       c3A0H: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3A0J; else goto c3A0I;
       c3A0J: // global
           HpAlloc = 40;
           goto c3A0G;
       c3A0G: // global
           R2 = _s3yt9::P64;
           R1 = lvl72_r3yco_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3A0I: // global
           I64[Hp - 32] = lvl116_s3yta_info;
           P64[Hp - 16] = _s3yt9::P64;
           I64[Hp - 8] = sat_s3ytc_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3A0C_info;
           R3 = Hp - 7;
           R2 = m56_r3yaZ_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3A0C() //  [R1]
         { info_tbl: [(c3A0C,
                       label: block_c3A0C_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A0C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3A0M; else goto c3A0L;
       c3A0M: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3A0L: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.71798323 UTC

[section ""data" . lvl73_r3ycp_closure" {
     lvl73_r3ycp_closure:
         const lvl73_r3ycp_info;
         const 0;
 },
 lvl116_s3ytg_entry() //  [R1]
         { info_tbl: [(c3A0V,
                       label: lvl116_s3ytg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A0V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A0W; else goto c3A0X;
       c3A0W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A0X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x28_r3yb3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yti_entry() //  [R1]
         { info_tbl: [(c3A13,
                       label: sat_s3yti_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A13: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl73_r3ycp_entry() //  [R2]
         { info_tbl: [(c3A19,
                       label: lvl73_r3ycp_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A19: // global
           _s3ytf::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3A1a; else goto c3A1b;
       c3A1b: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3A1d; else goto c3A1c;
       c3A1d: // global
           HpAlloc = 40;
           goto c3A1a;
       c3A1a: // global
           R2 = _s3ytf::P64;
           R1 = lvl73_r3ycp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3A1c: // global
           I64[Hp - 32] = lvl116_s3ytg_info;
           P64[Hp - 16] = _s3ytf::P64;
           I64[Hp - 8] = sat_s3yti_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3A16_info;
           R3 = Hp - 7;
           R2 = m58_r3yb2_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3A16() //  [R1]
         { info_tbl: [(c3A16,
                       label: block_c3A16_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A16: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3A1g; else goto c3A1f;
       c3A1g: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3A1f: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.720038019 UTC

[section ""data" . lvl74_r3ycq_closure" {
     lvl74_r3ycq_closure:
         const lvl74_r3ycq_info;
         const 0;
 },
 lvl116_s3ytm_entry() //  [R1]
         { info_tbl: [(c3A1p,
                       label: lvl116_s3ytm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A1p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A1q; else goto c3A1r;
       c3A1q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A1r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x29_r3yb6_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yto_entry() //  [R1]
         { info_tbl: [(c3A1x,
                       label: sat_s3yto_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A1x: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl74_r3ycq_entry() //  [R2]
         { info_tbl: [(c3A1D,
                       label: lvl74_r3ycq_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A1D: // global
           _s3ytl::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3A1E; else goto c3A1F;
       c3A1F: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3A1H; else goto c3A1G;
       c3A1H: // global
           HpAlloc = 40;
           goto c3A1E;
       c3A1E: // global
           R2 = _s3ytl::P64;
           R1 = lvl74_r3ycq_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3A1G: // global
           I64[Hp - 32] = lvl116_s3ytm_info;
           P64[Hp - 16] = _s3ytl::P64;
           I64[Hp - 8] = sat_s3yto_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3A1A_info;
           R3 = Hp - 7;
           R2 = m60_r3yb5_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3A1A() //  [R1]
         { info_tbl: [(c3A1A,
                       label: block_c3A1A_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A1A: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3A1K; else goto c3A1J;
       c3A1K: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3A1J: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.722363417 UTC

[section ""data" . lvl75_r3ycr_closure" {
     lvl75_r3ycr_closure:
         const lvl75_r3ycr_info;
         const 0;
 },
 lvl116_s3yts_entry() //  [R1]
         { info_tbl: [(c3A1T,
                       label: lvl116_s3yts_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A1T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A1U; else goto c3A1V;
       c3A1U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A1V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x30_r3yb9_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytu_entry() //  [R1]
         { info_tbl: [(c3A21,
                       label: sat_s3ytu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A21: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl75_r3ycr_entry() //  [R2]
         { info_tbl: [(c3A27,
                       label: lvl75_r3ycr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A27: // global
           _s3ytr::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3A28; else goto c3A29;
       c3A29: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3A2b; else goto c3A2a;
       c3A2b: // global
           HpAlloc = 40;
           goto c3A28;
       c3A28: // global
           R2 = _s3ytr::P64;
           R1 = lvl75_r3ycr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3A2a: // global
           I64[Hp - 32] = lvl116_s3yts_info;
           P64[Hp - 16] = _s3ytr::P64;
           I64[Hp - 8] = sat_s3ytu_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3A24_info;
           R3 = Hp - 7;
           R2 = m62_r3yb8_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3A24() //  [R1]
         { info_tbl: [(c3A24,
                       label: block_c3A24_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A24: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3A2e; else goto c3A2d;
       c3A2e: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3A2d: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.724518414 UTC

[section ""data" . lvl76_r3ycs_closure" {
     lvl76_r3ycs_closure:
         const lvl76_r3ycs_info;
         const 0;
 },
 lvl116_s3yty_entry() //  [R1]
         { info_tbl: [(c3A2n,
                       label: lvl116_s3yty_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A2n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A2o; else goto c3A2p;
       c3A2o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A2p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x31_r3ybc_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytA_entry() //  [R1]
         { info_tbl: [(c3A2v,
                       label: sat_s3ytA_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A2v: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl76_r3ycs_entry() //  [R2]
         { info_tbl: [(c3A2B,
                       label: lvl76_r3ycs_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A2B: // global
           _s3ytx::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3A2C; else goto c3A2D;
       c3A2D: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3A2F; else goto c3A2E;
       c3A2F: // global
           HpAlloc = 40;
           goto c3A2C;
       c3A2C: // global
           R2 = _s3ytx::P64;
           R1 = lvl76_r3ycs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3A2E: // global
           I64[Hp - 32] = lvl116_s3yty_info;
           P64[Hp - 16] = _s3ytx::P64;
           I64[Hp - 8] = sat_s3ytA_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3A2y_info;
           R3 = Hp - 7;
           R2 = m64_r3ybb_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3A2y() //  [R1]
         { info_tbl: [(c3A2y,
                       label: block_c3A2y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A2y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3A2I; else goto c3A2H;
       c3A2I: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3A2H: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.727431662 UTC

[section ""data" . lvl77_r3yct_closure" {
     lvl77_r3yct_closure:
         const lvl77_r3yct_info;
         const 0;
 },
 lvl116_s3ytE_entry() //  [R1]
         { info_tbl: [(c3A2R,
                       label: lvl116_s3ytE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A2R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A2S; else goto c3A2T;
       c3A2S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A2T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x32_r3ybf_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytG_entry() //  [R1]
         { info_tbl: [(c3A2Z,
                       label: sat_s3ytG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A2Z: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl77_r3yct_entry() //  [R2]
         { info_tbl: [(c3A35,
                       label: lvl77_r3yct_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A35: // global
           _s3ytD::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3A36; else goto c3A37;
       c3A37: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3A39; else goto c3A38;
       c3A39: // global
           HpAlloc = 40;
           goto c3A36;
       c3A36: // global
           R2 = _s3ytD::P64;
           R1 = lvl77_r3yct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3A38: // global
           I64[Hp - 32] = lvl116_s3ytE_info;
           P64[Hp - 16] = _s3ytD::P64;
           I64[Hp - 8] = sat_s3ytG_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3A32_info;
           R3 = Hp - 7;
           R2 = m66_r3ybe_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3A32() //  [R1]
         { info_tbl: [(c3A32,
                       label: block_c3A32_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A32: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3A3c; else goto c3A3b;
       c3A3c: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3A3b: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.729528495 UTC

[section ""data" . lvl78_r3ycu_closure" {
     lvl78_r3ycu_closure:
         const lvl78_r3ycu_info;
         const 0;
 },
 lvl116_s3ytK_entry() //  [R1]
         { info_tbl: [(c3A3l,
                       label: lvl116_s3ytK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A3l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A3m; else goto c3A3n;
       c3A3m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A3n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x33_r3ybi_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytM_entry() //  [R1]
         { info_tbl: [(c3A3t,
                       label: sat_s3ytM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A3t: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl78_r3ycu_entry() //  [R2]
         { info_tbl: [(c3A3z,
                       label: lvl78_r3ycu_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A3z: // global
           _s3ytJ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3A3A; else goto c3A3B;
       c3A3B: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3A3D; else goto c3A3C;
       c3A3D: // global
           HpAlloc = 40;
           goto c3A3A;
       c3A3A: // global
           R2 = _s3ytJ::P64;
           R1 = lvl78_r3ycu_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3A3C: // global
           I64[Hp - 32] = lvl116_s3ytK_info;
           P64[Hp - 16] = _s3ytJ::P64;
           I64[Hp - 8] = sat_s3ytM_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3A3w_info;
           R3 = Hp - 7;
           R2 = m68_r3ybh_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3A3w() //  [R1]
         { info_tbl: [(c3A3w,
                       label: block_c3A3w_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A3w: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3A3G; else goto c3A3F;
       c3A3G: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3A3F: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.731075189 UTC

[section ""data" . lvl79_r3ycv_closure" {
     lvl79_r3ycv_closure:
         const :_con_info;
         const lvl78_r3ycu_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.731685208 UTC

[section ""data" . lvl80_r3ycw_closure" {
     lvl80_r3ycw_closure:
         const :_con_info;
         const lvl77_r3yct_closure+1;
         const lvl79_r3ycv_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.732257278 UTC

[section ""data" . lvl81_r3ycx_closure" {
     lvl81_r3ycx_closure:
         const :_con_info;
         const lvl76_r3ycs_closure+1;
         const lvl80_r3ycw_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.732867217 UTC

[section ""data" . lvl82_r3ycy_closure" {
     lvl82_r3ycy_closure:
         const :_con_info;
         const lvl75_r3ycr_closure+1;
         const lvl81_r3ycx_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.733510445 UTC

[section ""data" . lvl83_r3ycz_closure" {
     lvl83_r3ycz_closure:
         const :_con_info;
         const lvl74_r3ycq_closure+1;
         const lvl82_r3ycy_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.734117985 UTC

[section ""data" . lvl84_r3ycA_closure" {
     lvl84_r3ycA_closure:
         const :_con_info;
         const lvl73_r3ycp_closure+1;
         const lvl83_r3ycz_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.734731269 UTC

[section ""data" . lvl85_r3ycB_closure" {
     lvl85_r3ycB_closure:
         const :_con_info;
         const lvl72_r3yco_closure+1;
         const lvl84_r3ycA_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.735322291 UTC

[section ""data" . lvl86_r3ycC_closure" {
     lvl86_r3ycC_closure:
         const :_con_info;
         const lvl71_r3ycn_closure+1;
         const lvl85_r3ycB_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.735938618 UTC

[section ""data" . lvl87_r3ycD_closure" {
     lvl87_r3ycD_closure:
         const :_con_info;
         const lvl70_r3ycm_closure+1;
         const lvl86_r3ycC_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.736538833 UTC

[section ""data" . lvl88_r3ycE_closure" {
     lvl88_r3ycE_closure:
         const :_con_info;
         const lvl69_r3ycl_closure+1;
         const lvl87_r3ycD_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.737222874 UTC

[section ""data" . lvl89_r3ycF_closure" {
     lvl89_r3ycF_closure:
         const :_con_info;
         const lvl68_r3yck_closure+1;
         const lvl88_r3ycE_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.73787647 UTC

[section ""data" . lvl90_r3ycG_closure" {
     lvl90_r3ycG_closure:
         const :_con_info;
         const lvl67_r3ycj_closure+1;
         const lvl89_r3ycF_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.739104914 UTC

[section ""data" . lvl91_r3ycH_closure" {
     lvl91_r3ycH_closure:
         const :_con_info;
         const lvl66_r3yci_closure+1;
         const lvl90_r3ycG_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.739722869 UTC

[section ""data" . lvl92_r3ycI_closure" {
     lvl92_r3ycI_closure:
         const :_con_info;
         const lvl65_r3ych_closure+1;
         const lvl91_r3ycH_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.740334052 UTC

[section ""data" . lvl93_r3ycJ_closure" {
     lvl93_r3ycJ_closure:
         const :_con_info;
         const lvl64_r3ycg_closure+1;
         const lvl92_r3ycI_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.740968495 UTC

[section ""data" . lvl94_r3ycK_closure" {
     lvl94_r3ycK_closure:
         const :_con_info;
         const lvl63_r3ycf_closure+1;
         const lvl93_r3ycJ_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.741735341 UTC

[section ""data" . lvl95_r3ycL_closure" {
     lvl95_r3ycL_closure:
         const :_con_info;
         const lvl62_r3yce_closure+1;
         const lvl94_r3ycK_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.74236352 UTC

[section ""data" . lvl96_r3ycM_closure" {
     lvl96_r3ycM_closure:
         const :_con_info;
         const lvl61_r3ycd_closure+1;
         const lvl95_r3ycL_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.742917366 UTC

[section ""data" . lvl97_r3ycN_closure" {
     lvl97_r3ycN_closure:
         const :_con_info;
         const lvl60_r3ycc_closure+1;
         const lvl96_r3ycM_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.743596331 UTC

[section ""data" . lvl98_r3ycO_closure" {
     lvl98_r3ycO_closure:
         const :_con_info;
         const lvl59_r3ycb_closure+1;
         const lvl97_r3ycN_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.744193252 UTC

[section ""data" . lvl99_r3ycP_closure" {
     lvl99_r3ycP_closure:
         const :_con_info;
         const lvl58_r3yca_closure+1;
         const lvl98_r3ycO_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.744797932 UTC

[section ""data" . lvl100_r3ycQ_closure" {
     lvl100_r3ycQ_closure:
         const :_con_info;
         const lvl57_r3yc9_closure+1;
         const lvl99_r3ycP_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.745449156 UTC

[section ""data" . lvl101_r3ycR_closure" {
     lvl101_r3ycR_closure:
         const :_con_info;
         const lvl56_r3yc8_closure+1;
         const lvl100_r3ycQ_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.74605377 UTC

[section ""data" . lvl102_r3ycS_closure" {
     lvl102_r3ycS_closure:
         const :_con_info;
         const lvl55_r3yc7_closure+1;
         const lvl101_r3ycR_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.746646983 UTC

[section ""data" . lvl103_r3ycT_closure" {
     lvl103_r3ycT_closure:
         const :_con_info;
         const lvl54_r3yc6_closure+1;
         const lvl102_r3ycS_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.747273708 UTC

[section ""data" . lvl104_r3ycU_closure" {
     lvl104_r3ycU_closure:
         const :_con_info;
         const lvl53_r3yc5_closure+1;
         const lvl103_r3ycT_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.747893064 UTC

[section ""data" . lvl105_r3ycV_closure" {
     lvl105_r3ycV_closure:
         const :_con_info;
         const lvl52_r3yc4_closure+1;
         const lvl104_r3ycU_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.748496789 UTC

[section ""data" . lvl106_r3ycW_closure" {
     lvl106_r3ycW_closure:
         const :_con_info;
         const lvl51_r3yc3_closure+1;
         const lvl105_r3ycV_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.749118424 UTC

[section ""data" . lvl107_r3ycX_closure" {
     lvl107_r3ycX_closure:
         const :_con_info;
         const lvl50_r3yc2_closure+1;
         const lvl106_r3ycW_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.749920617 UTC

[section ""data" . lvl108_r3ycY_closure" {
     lvl108_r3ycY_closure:
         const :_con_info;
         const lvl49_r3yc1_closure+1;
         const lvl107_r3ycX_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.751024567 UTC

[section ""data" . lvl109_r3ycZ_closure" {
     lvl109_r3ycZ_closure:
         const :_con_info;
         const lvl48_r3yc0_closure+1;
         const lvl108_r3ycY_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.751609654 UTC

[section ""data" . lvl110_r3yd0_closure" {
     lvl110_r3yd0_closure:
         const :_con_info;
         const lvl47_r3ybZ_closure+1;
         const lvl109_r3ycZ_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.752213203 UTC

[section ""data" . lvl111_r3yd1_closure" {
     lvl111_r3yd1_closure:
         const :_con_info;
         const lvl46_r3ybY_closure+1;
         const lvl110_r3yd0_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.753920858 UTC

[section ""data" . lvl112_r3yd2_closure" {
     lvl112_r3yd2_closure:
         const lvl112_r3yd2_info;
 },
 lvl116_s3ytQ_entry() //  [R1]
         { info_tbl: [(c3A3P,
                       label: lvl116_s3ytQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A3P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A3Q; else goto c3A3R;
       c3A3Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A3R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = a2_r3y9z_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3ytR_entry() //  [R1]
         { info_tbl: [(c3A3W,
                       label: lvl117_s3ytR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A3W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A3X; else goto c3A3Y;
       c3A3X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A3Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = a1_r3y9y_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytW_entry() //  [R1, R2]
         { info_tbl: [(c3A47,
                       label: sat_s3ytW_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A47: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3A48; else goto c3A49;
       c3A48: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3A49: // global
           I64[Sp - 24] = block_c3A44_info;
           _s3ytQ::P64 = P64[R1 + 7];
           _s3ytR::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ytQ::P64;
           P64[Sp - 8] = _s3ytR::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3A4p; else goto c3A45;
       u3A4p: // global
           call _c3A44(R1) args: 0, res: 0, upd: 0;
       c3A45: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3A44() //  [R1]
         { info_tbl: [(c3A44,
                       label: block_c3A44_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A44: // global
           _s3ytQ::P64 = P64[Sp + 8];
           _s3ytV::I64 = I64[R1 + 7];
           if (_s3ytV::I64 < 120) goto u3A4k; else goto u3A4o;
       u3A4k: // global
           _s3ytR::P64 = P64[Sp + 16];
           if (_s3ytV::I64 < 89) goto u3A4l; else goto u3A4n;
       u3A4l: // global
           if (_s3ytV::I64 >= 88) goto c3A4j; else goto u3A4m;
       u3A4m: // global
           if (_s3ytV::I64 != 79) goto c3A4f; else goto c3A4i;
       u3A4n: // global
           if (_s3ytV::I64 != 111) goto c3A4f; else goto c3A4i;
       c3A4i: // global
           R1 = _s3ytR::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3A4o: // global
           if (_s3ytV::I64 < 121) goto c3A4j; else goto c3A4f;
       c3A4j: // global
           R1 = _s3ytQ::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3A4f: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl112_r3yd2_entry() //  [R2]
         { info_tbl: [(c3A4r,
                       label: lvl112_r3yd2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A4r: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3A4v; else goto c3A4u;
       c3A4v: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = lvl112_r3yd2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3A4u: // global
           I64[Hp - 80] = lvl116_s3ytQ_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = lvl117_s3ytR_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s3ytW_info;
           P64[Hp - 24] = Hp - 80;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.756194598 UTC

[section ""data" . lvl113_r3yd3_closure" {
     lvl113_r3yd3_closure:
         const lvl113_r3yd3_info;
 },
 lvl113_r3yd3_entry() //  [R2]
         { info_tbl: [(c3A4A,
                       label: lvl113_r3yd3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A4A: // global
           _s3ytX::P64 = R2;
           R2 = lvl6_r3y9C_closure+1;
           R1 = _s3ytX::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.765867918 UTC

[section ""data" . Text.Read.Lex.lexChar2_closure" {
     Text.Read.Lex.lexChar2_closure:
         const Text.Read.Lex.lexChar2_info;
         const 0;
 },
 lvl116_s3ytZ_entry() //  [R1]
         { info_tbl: [(c3A4L,
                       label: lvl116_s3ytZ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A4L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A4M; else goto c3A4N;
       c3A4M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A4N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl18_r3ybu_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3yu0_entry() //  [R1]
         { info_tbl: [(c3A4S,
                       label: lvl117_s3yu0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A4S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A4T; else goto c3A4U;
       c3A4T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A4U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl16_r3ybs_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3yu1_entry() //  [R1]
         { info_tbl: [(c3A4Z,
                       label: lvl118_s3yu1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A4Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A50; else goto c3A51;
       c3A50: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A51: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl20_r3ybw_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl119_s3yu2_entry() //  [R1]
         { info_tbl: [(c3A56,
                       label: lvl119_s3yu2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A56: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A57; else goto c3A58;
       c3A57: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A58: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl17_r3ybt_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl120_s3yu3_entry() //  [R1]
         { info_tbl: [(c3A5d,
                       label: lvl120_s3yu3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A5d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A5e; else goto c3A5f;
       c3A5e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A5f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl19_r3ybv_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl121_s3yu4_entry() //  [R1]
         { info_tbl: [(c3A5k,
                       label: lvl121_s3yu4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A5k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A5l; else goto c3A5m;
       c3A5l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A5m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl15_r3ybr_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl122_s3yu5_entry() //  [R1]
         { info_tbl: [(c3A5r,
                       label: lvl122_s3yu5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A5r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A5s; else goto c3A5t;
       c3A5s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A5t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl14_r3ybq_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl123_s3yu6_entry() //  [R1]
         { info_tbl: [(c3A5y,
                       label: lvl123_s3yu6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A5y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A5z; else goto c3A5A;
       c3A5z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A5A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl13_r3ybp_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl124_s3yu7_entry() //  [R1]
         { info_tbl: [(c3A5F,
                       label: lvl124_s3yu7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A5F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A5G; else goto c3A5H;
       c3A5G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A5H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl11_r3ybn_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl125_s3yu8_entry() //  [R1]
         { info_tbl: [(c3A5M,
                       label: lvl125_s3yu8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A5M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A5N; else goto c3A5O;
       c3A5N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A5O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl9_r3ybl_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl126_s3yug_entry() //  [R1]
         { info_tbl: [(c3A65,
                       label: lvl126_s3yug_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A65: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3A66; else goto c3A67;
       c3A66: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A67: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3A62_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3A6b; else goto c3A63;
       u3A6b: // global
           call _c3A62(R1) args: 0, res: 0, upd: 0;
       c3A63: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3A62() //  [R1]
         { info_tbl: [(c3A62,
                       label: block_c3A62_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A62: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yuq_entry() //  [R1]
         { info_tbl: [(c3A6w,
                       label: sat_s3yuq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A6w: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3A6x; else goto c3A6y;
       c3A6x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A6y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3A6u_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3A6u() //  [R1]
         { info_tbl: [(c3A6u,
                       label: block_c3A6u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A6u: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3A6D; else goto c3A6C;
       c3A6D: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3A6C: // global
           if (R1 > 1114111) goto c3A6K; else goto c3A6R;
       c3A6K: // global
           Hp = Hp - 16;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c3A6R: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3AcN_srtd" {
     u3AcN_srtd:
         const S3yFW_srt+232;
         const 122;
         const 1;
         const 216172782113783808;
 },
 sat_s3yus_entry() //  [R1, R2]
         { info_tbl: [(c3A6S,
                       label: sat_s3yus_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A6S: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3A6T; else goto c3A6U;
       c3A6T: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3A6U: // global
           I64[Sp - 16] = block_c3A6h_info;
           R3 = R2;
           R2 = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3A6h() //  [R1]
         { info_tbl: [(c3A6h,
                       label: block_c3A6h_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A6h: // global
           I64[Sp - 8] = block_c3A6l_info;
           R3 = lvl7_r3ybj_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3A6l() //  [R1]
         { info_tbl: [(c3A6l,
                       label: block_c3A6l_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A6l: // global
           if (R1 == 1) goto c3A71; else goto c3A6Z;
       c3A71: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3A74; else goto c3A73;
       c3A74: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3A73: // global
           I64[Hp - 40] = sat_s3yuq_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = Hp - 15;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3A6Z: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3AcO_srtd" {
     u3AcO_srtd:
         const S3yFW_srt+232;
         const 122;
         const 17592186044417;
         const 216172782113783808;
 },
 sat_s3yuv_entry() //  [R1, R2]
         { info_tbl: [(c3A78,
                       label: sat_s3yuv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A78: // global
           _s3yuf::P64 = R2;
           _s3yuv::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3A79; else goto c3A7a;
       c3A7a: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3A7c; else goto c3A7b;
       c3A7c: // global
           HpAlloc = 48;
           goto c3A79;
       c3A79: // global
           R2 = _s3yuf::P64;
           R1 = _s3yuv::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3A7b: // global
           _s3ytY::P64 = P64[_s3yuv::P64 + 7];
           I64[Hp - 40] = lvl126_s3yug_info;
           P64[Hp - 24] = _s3yuf::P64;
           I64[Hp - 16] = sat_s3yus_info;
           P64[Hp - 8] = _s3ytY::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_c3A75_info;
           R3 = Hp - 15;
           R2 = _s3yuf::P64;
           Sp = Sp - 8;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3A75() //  [R1]
         { info_tbl: [(c3A75,
                       label: block_c3A75_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A75: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3A7f; else goto c3A7e;
       c3A7f: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3A7e: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl126_s3yuz_entry() //  [R1]
         { info_tbl: [(c3A7q,
                       label: lvl126_s3yuz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A7q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A7r; else goto c3A7s;
       c3A7r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A7s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl45_r3ybV_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl127_s3yuA_entry() //  [R1]
         { info_tbl: [(c3A7x,
                       label: lvl127_s3yuA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A7x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A7y; else goto c3A7z;
       c3A7y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A7z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl44_r3ybU_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl128_s3yuB_entry() //  [R1]
         { info_tbl: [(c3A7E,
                       label: lvl128_s3yuB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A7E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A7F; else goto c3A7G;
       c3A7F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A7G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl43_r3ybT_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl129_s3yuC_entry() //  [R1]
         { info_tbl: [(c3A7L,
                       label: lvl129_s3yuC_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A7L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A7M; else goto c3A7N;
       c3A7M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A7N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl42_r3ybS_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl130_s3yuD_entry() //  [R1]
         { info_tbl: [(c3A7S,
                       label: lvl130_s3yuD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A7S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A7T; else goto c3A7U;
       c3A7T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A7U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl41_r3ybR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl131_s3yuE_entry() //  [R1]
         { info_tbl: [(c3A7Z,
                       label: lvl131_s3yuE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A7Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A80; else goto c3A81;
       c3A80: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A81: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl40_r3ybQ_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl132_s3yuF_entry() //  [R1]
         { info_tbl: [(c3A86,
                       label: lvl132_s3yuF_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A86: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A87; else goto c3A88;
       c3A87: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A88: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl39_r3ybP_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl133_s3yuG_entry() //  [R1]
         { info_tbl: [(c3A8d,
                       label: lvl133_s3yuG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A8d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A8e; else goto c3A8f;
       c3A8e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A8f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl38_r3ybO_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl134_s3yuH_entry() //  [R1]
         { info_tbl: [(c3A8k,
                       label: lvl134_s3yuH_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A8k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A8l; else goto c3A8m;
       c3A8l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A8m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl37_r3ybN_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl135_s3yuI_entry() //  [R1]
         { info_tbl: [(c3A8r,
                       label: lvl135_s3yuI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A8r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A8s; else goto c3A8t;
       c3A8s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A8t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl36_r3ybM_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl136_s3yuJ_entry() //  [R1]
         { info_tbl: [(c3A8y,
                       label: lvl136_s3yuJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A8y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A8z; else goto c3A8A;
       c3A8z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A8A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl35_r3ybL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl137_s3yuK_entry() //  [R1]
         { info_tbl: [(c3A8F,
                       label: lvl137_s3yuK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A8F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A8G; else goto c3A8H;
       c3A8G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A8H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl34_r3ybK_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl138_s3yuL_entry() //  [R1]
         { info_tbl: [(c3A8M,
                       label: lvl138_s3yuL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A8M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A8N; else goto c3A8O;
       c3A8N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A8O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl33_r3ybJ_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl139_s3yuM_entry() //  [R1]
         { info_tbl: [(c3A8T,
                       label: lvl139_s3yuM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A8T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A8U; else goto c3A8V;
       c3A8U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A8V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl32_r3ybI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl140_s3yuN_entry() //  [R1]
         { info_tbl: [(c3A90,
                       label: lvl140_s3yuN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A90: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A91; else goto c3A92;
       c3A91: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A92: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl31_r3ybH_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl141_s3yuO_entry() //  [R1]
         { info_tbl: [(c3A97,
                       label: lvl141_s3yuO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A97: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A98; else goto c3A99;
       c3A98: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A99: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl30_r3ybG_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl142_s3yuP_entry() //  [R1]
         { info_tbl: [(c3A9e,
                       label: lvl142_s3yuP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A9e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A9f; else goto c3A9g;
       c3A9f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A9g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl29_r3ybF_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl143_s3yuQ_entry() //  [R1]
         { info_tbl: [(c3A9l,
                       label: lvl143_s3yuQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A9l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A9m; else goto c3A9n;
       c3A9m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A9n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl28_r3ybE_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl144_s3yuR_entry() //  [R1]
         { info_tbl: [(c3A9s,
                       label: lvl144_s3yuR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A9s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A9t; else goto c3A9u;
       c3A9t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A9u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl27_r3ybD_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl145_s3yuS_entry() //  [R1]
         { info_tbl: [(c3A9z,
                       label: lvl145_s3yuS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A9z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A9A; else goto c3A9B;
       c3A9A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A9B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl26_r3ybC_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl146_s3yuT_entry() //  [R1]
         { info_tbl: [(c3A9G,
                       label: lvl146_s3yuT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A9G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A9H; else goto c3A9I;
       c3A9H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A9I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl25_r3ybB_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl147_s3yuU_entry() //  [R1]
         { info_tbl: [(c3A9N,
                       label: lvl147_s3yuU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A9N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A9O; else goto c3A9P;
       c3A9O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A9P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl24_r3ybA_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl148_s3yuV_entry() //  [R1]
         { info_tbl: [(c3A9U,
                       label: lvl148_s3yuV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A9U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3A9V; else goto c3A9W;
       c3A9V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3A9W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl23_r3ybz_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl149_s3yuW_entry() //  [R1]
         { info_tbl: [(c3Aa1,
                       label: lvl149_s3yuW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aa1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Aa2; else goto c3Aa3;
       c3Aa2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Aa3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl22_r3yby_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl150_s3yuX_entry() //  [R1]
         { info_tbl: [(c3Aa8,
                       label: lvl150_s3yuX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aa8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Aa9; else goto c3Aaa;
       c3Aa9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Aaa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl21_r3ybx_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 $wlvl1_s3yuY_entry() //  [R1, R2]
         { info_tbl: [(c3AaP,
                       label: $wlvl1_s3yuY_info
                       rep:HeapRep 32 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AaP: // global
           if (R2 >= 96) goto c3Aai; else goto u3AaS;
       u3AaS: // global
           if (R2 < 64) goto c3Aai; else goto u3AaT;
       c3Aai: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3AaT: // global
           switch [64 .. 95] R2 {
               case 64 : goto c3Aaj;
               case 65 : goto c3Aak;
               case 66 : goto c3Aal;
               case 67 : goto c3Aam;
               case 68 : goto c3Aan;
               case 69 : goto c3Aao;
               case 70 : goto c3Aap;
               case 71 : goto c3Aaq;
               case 72 : goto c3Aar;
               case 73 : goto c3Aas;
               case 74 : goto c3Aat;
               case 75 : goto c3Aau;
               case 76 : goto c3Aav;
               case 77 : goto c3Aaw;
               case 78 : goto c3Aax;
               case 79 : goto c3Aay;
               case 80 : goto c3Aaz;
               case 81 : goto c3AaA;
               case 82 : goto c3AaB;
               case 83 : goto c3AaC;
               case 84 : goto c3AaD;
               case 85 : goto c3AaE;
               case 86 : goto c3AaF;
               case 87 : goto c3AaG;
               case 88 : goto c3AaH;
               case 89 : goto c3AaI;
               case 90 : goto c3AaJ;
               case 91 : goto c3AaK;
               case 92 : goto c3AaL;
               case 93 : goto c3AaM;
               case 94 : goto c3AaN;
               case 95 : goto c3AaO;
           }
       c3AaO: // global
           R1 = P64[R1 + 63] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaN: // global
           R1 = P64[R1 + 71] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaM: // global
           R1 = P64[R1 + 79] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaL: // global
           R1 = P64[R1 + 87] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaK: // global
           R1 = P64[R1 + 95] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaJ: // global
           R1 = P64[R1 + 103] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaI: // global
           R1 = P64[R1 + 111] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaH: // global
           R1 = P64[R1 + 119] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaG: // global
           R1 = P64[R1 + 127] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaF: // global
           R1 = P64[R1 + 135] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaE: // global
           R1 = P64[R1 + 143] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaD: // global
           R1 = P64[R1 + 151] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaC: // global
           R1 = P64[R1 + 159] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaB: // global
           R1 = P64[R1 + 167] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AaA: // global
           R1 = P64[R1 + 175] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aaz: // global
           R1 = P64[R1 + 183] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aay: // global
           R1 = P64[R1 + 191] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aax: // global
           R1 = P64[R1 + 199] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aaw: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aav: // global
           R1 = P64[R1 + 15] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aau: // global
           R1 = P64[R1 + 23] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aat: // global
           R1 = P64[R1 + 31] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aas: // global
           R1 = P64[R1 + 39] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aar: // global
           R1 = P64[R1 + 47] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aaq: // global
           R1 = P64[R1 + 55] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aap: // global
           R1 = P64[R1 + 207] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aao: // global
           R1 = P64[R1 + 215] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aan: // global
           R1 = P64[R1 + 223] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aam: // global
           R1 = P64[R1 + 231] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aal: // global
           R1 = P64[R1 + 239] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aak: // global
           R1 = P64[R1 + 247] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aaj: // global
           R1 = P64[R1 + 255] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl151_s3yv1_entry() //  [R1, R2]
         { info_tbl: [(c3Ab2,
                       label: lvl151_s3yv1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ab2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ab3; else goto c3Ab4;
       c3Ab3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ab4: // global
           I64[Sp - 16] = block_c3AaZ_info;
           _s3yuY::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yuY::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Ab8; else goto c3Ab0;
       u3Ab8: // global
           call _c3AaZ(R1) args: 0, res: 0, upd: 0;
       c3Ab0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AaZ() //  [R1]
         { info_tbl: [(c3AaZ,
                       label: block_c3AaZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AaZ: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wlvl1_s3yuY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yve_entry() //  [R1, R2]
         { info_tbl: [(c3Abk,
                       label: sat_s3yve_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Abk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Abo; else goto c3Abn;
       c3Abo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Abn: // global
           _s3ytY::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = Hp - 15;
           R1 = _s3ytY::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yvf_entry() //  [R1]
         { info_tbl: [(c3Abp,
                       label: sat_s3yvf_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Abp: // global
           _s3yvf::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Abq; else goto c3Abr;
       c3Abr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Abt; else goto c3Abs;
       c3Abt: // global
           HpAlloc = 16;
           goto c3Abq;
       c3Abq: // global
           R1 = _s3yvf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Abs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvf::P64;
           _s3ytY::P64 = P64[_s3yvf::P64 + 16];
           I64[Hp - 8] = sat_s3yve_info;
           P64[Hp] = _s3ytY::P64;
           R2 = lvl111_r3yd1_closure+2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.choice_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yva_entry() //  [R1, R2]
         { info_tbl: [(c3AbC,
                       label: sat_s3yva_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AbC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AbD; else goto c3AbE;
       c3AbD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AbE: // global
           I64[Sp - 16] = block_c3Abz_info;
           _s3yv5::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yv5::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3AbM; else goto c3AbA;
       u3AbM: // global
           call _c3Abz(R1) args: 0, res: 0, upd: 0;
       c3AbA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Abz() //  [R1]
         { info_tbl: [(c3Abz,
                       label: block_c3Abz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Abz: // global
           if (I64[R1 + 7] == 94) goto c3AbL; else goto c3AbK;
       c3AbL: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3AbK: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yvg_entry() //  [R1]
         { info_tbl: [(c3AbO,
                       label: sat_s3yvg_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AbO: // global
           _s3yvg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AbP; else goto c3AbQ;
       c3AbQ: // global
           Hp = Hp + 952;
           if (Hp > HpLim) (likely: False) goto c3AbS; else goto c3AbR;
       c3AbS: // global
           HpAlloc = 952;
           goto c3AbP;
       c3AbP: // global
           R1 = _s3yvg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AbR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvg::P64;
           _s3ytY::P64 = P64[_s3yvg::P64 + 16];
           _s3ytZ::P64 = P64[_s3yvg::P64 + 24];
           _s3yu0::P64 = P64[_s3yvg::P64 + 32];
           _s3yu1::P64 = P64[_s3yvg::P64 + 40];
           _s3yu2::P64 = P64[_s3yvg::P64 + 48];
           _s3yu3::P64 = P64[_s3yvg::P64 + 56];
           _s3yu4::P64 = P64[_s3yvg::P64 + 64];
           _s3yu5::P64 = P64[_s3yvg::P64 + 72];
           I64[Hp - 944] = lvl126_s3yuz_info;
           P64[Hp - 928] = _s3ytY::P64;
           I64[Hp - 920] = lvl127_s3yuA_info;
           P64[Hp - 904] = _s3ytY::P64;
           I64[Hp - 896] = lvl128_s3yuB_info;
           P64[Hp - 880] = _s3ytY::P64;
           I64[Hp - 872] = lvl129_s3yuC_info;
           P64[Hp - 856] = _s3ytY::P64;
           I64[Hp - 848] = lvl130_s3yuD_info;
           P64[Hp - 832] = _s3ytY::P64;
           I64[Hp - 824] = lvl131_s3yuE_info;
           P64[Hp - 808] = _s3ytY::P64;
           I64[Hp - 800] = lvl132_s3yuF_info;
           P64[Hp - 784] = _s3ytY::P64;
           I64[Hp - 776] = lvl133_s3yuG_info;
           P64[Hp - 760] = _s3ytY::P64;
           I64[Hp - 752] = lvl134_s3yuH_info;
           P64[Hp - 736] = _s3ytY::P64;
           I64[Hp - 728] = lvl135_s3yuI_info;
           P64[Hp - 712] = _s3ytY::P64;
           I64[Hp - 704] = lvl136_s3yuJ_info;
           P64[Hp - 688] = _s3ytY::P64;
           I64[Hp - 680] = lvl137_s3yuK_info;
           P64[Hp - 664] = _s3ytY::P64;
           I64[Hp - 656] = lvl138_s3yuL_info;
           P64[Hp - 640] = _s3ytY::P64;
           I64[Hp - 632] = lvl139_s3yuM_info;
           P64[Hp - 616] = _s3ytY::P64;
           I64[Hp - 608] = lvl140_s3yuN_info;
           P64[Hp - 592] = _s3ytY::P64;
           I64[Hp - 584] = lvl141_s3yuO_info;
           P64[Hp - 568] = _s3ytY::P64;
           I64[Hp - 560] = lvl142_s3yuP_info;
           P64[Hp - 544] = _s3ytY::P64;
           I64[Hp - 536] = lvl143_s3yuQ_info;
           P64[Hp - 520] = _s3ytY::P64;
           I64[Hp - 512] = lvl144_s3yuR_info;
           P64[Hp - 496] = _s3ytY::P64;
           I64[Hp - 488] = lvl145_s3yuS_info;
           P64[Hp - 472] = _s3ytY::P64;
           I64[Hp - 464] = lvl146_s3yuT_info;
           P64[Hp - 448] = _s3ytY::P64;
           I64[Hp - 440] = lvl147_s3yuU_info;
           P64[Hp - 424] = _s3ytY::P64;
           I64[Hp - 416] = lvl148_s3yuV_info;
           P64[Hp - 400] = _s3ytY::P64;
           I64[Hp - 392] = lvl149_s3yuW_info;
           P64[Hp - 376] = _s3ytY::P64;
           I64[Hp - 368] = lvl150_s3yuX_info;
           P64[Hp - 352] = _s3ytY::P64;
           I64[Hp - 344] = $wlvl1_s3yuY_info;
           P64[Hp - 336] = _s3ytZ::P64;
           P64[Hp - 328] = _s3yu0::P64;
           P64[Hp - 320] = _s3yu1::P64;
           P64[Hp - 312] = _s3yu2::P64;
           P64[Hp - 304] = _s3yu3::P64;
           P64[Hp - 296] = _s3yu4::P64;
           P64[Hp - 288] = _s3yu5::P64;
           P64[Hp - 280] = Hp - 944;
           P64[Hp - 272] = Hp - 920;
           P64[Hp - 264] = Hp - 896;
           P64[Hp - 256] = Hp - 872;
           P64[Hp - 248] = Hp - 848;
           P64[Hp - 240] = Hp - 824;
           P64[Hp - 232] = Hp - 800;
           P64[Hp - 224] = Hp - 776;
           P64[Hp - 216] = Hp - 752;
           P64[Hp - 208] = Hp - 728;
           P64[Hp - 200] = Hp - 704;
           P64[Hp - 192] = Hp - 680;
           P64[Hp - 184] = Hp - 656;
           P64[Hp - 176] = Hp - 632;
           P64[Hp - 168] = Hp - 608;
           P64[Hp - 160] = Hp - 584;
           P64[Hp - 152] = Hp - 560;
           P64[Hp - 144] = Hp - 536;
           P64[Hp - 136] = Hp - 512;
           P64[Hp - 128] = Hp - 488;
           P64[Hp - 120] = Hp - 464;
           P64[Hp - 112] = Hp - 440;
           P64[Hp - 104] = Hp - 416;
           P64[Hp - 96] = Hp - 392;
           P64[Hp - 88] = Hp - 368;
           I64[Hp - 80] = lvl151_s3yv1_info;
           P64[Hp - 72] = Hp - 343;
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 56] = Hp - 79;
           I64[Hp - 48] = sat_s3yvf_info;
           P64[Hp - 32] = _s3ytY::P64;
           I64[Hp - 24] = sat_s3yva_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3AcP_srtd" {
     u3AcP_srtd:
         const S3yFW_srt+232;
         const 125;
         const 18031990695526401;
         const 2233785415175766016;
 },
 sat_s3yvh_entry() //  [R1]
         { info_tbl: [(c3AbU,
                       label: sat_s3yvh_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AbU: // global
           _s3yvh::P64 = R1;
           if ((Sp + -88) < SpLim) (likely: False) goto c3AbV; else goto c3AbW;
       c3AbW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AbY; else goto c3AbX;
       c3AbY: // global
           HpAlloc = 16;
           goto c3AbV;
       c3AbV: // global
           R1 = _s3yvh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AbX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvh::P64;
           _s3ytY::P64 = P64[_s3yvh::P64 + 16];
           _s3ytZ::P64 = P64[_s3yvh::P64 + 24];
           _s3yu0::P64 = P64[_s3yvh::P64 + 32];
           _s3yu1::P64 = P64[_s3yvh::P64 + 40];
           _s3yu2::P64 = P64[_s3yvh::P64 + 48];
           _s3yu3::P64 = P64[_s3yvh::P64 + 56];
           _s3yu4::P64 = P64[_s3yvh::P64 + 64];
           _s3yu5::P64 = P64[_s3yvh::P64 + 72];
           I64[Hp - 8] = sat_s3yuv_info;
           P64[Hp] = _s3ytY::P64;
           I64[Sp - 88] = block_c3A7g_info;
           R4 = Hp - 7;
           R3 = lvl113_r3yd3_closure+1;
           R2 = lvl112_r3yd2_closure+1;
           P64[Sp - 80] = _s3ytY::P64;
           P64[Sp - 72] = _s3ytZ::P64;
           P64[Sp - 64] = _s3yu0::P64;
           P64[Sp - 56] = _s3yu1::P64;
           P64[Sp - 48] = _s3yu2::P64;
           P64[Sp - 40] = _s3yu3::P64;
           P64[Sp - 32] = _s3yu4::P64;
           P64[Sp - 24] = _s3yu5::P64;
           Sp = Sp - 88;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3A7g() //  [R1]
         { info_tbl: [(c3A7g,
                       label: block_c3A7g_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3A7g: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Ac1; else goto c3Ac0;
       c3Ac1: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Ac0: // global
           I64[Hp - 88] = sat_s3yvg_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 88;
           R2 = Hp - 6;
           Sp = Sp + 72;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yud_entry() //  [R1, R2]
         { info_tbl: [(c3Aca,
                       label: sat_s3yud_info
                       rep:HeapRep 10 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aca: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3Acb; else goto c3Acc;
       c3Acb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Acc: // global
           I64[Sp - 88] = block_c3Ac7_info;
           _s3ytZ::P64 = P64[R1 + 7];
           _s3yu0::P64 = P64[R1 + 15];
           _s3yu1::P64 = P64[R1 + 23];
           _s3yu2::P64 = P64[R1 + 31];
           _s3yu3::P64 = P64[R1 + 39];
           _s3yu4::P64 = P64[R1 + 47];
           _s3yu5::P64 = P64[R1 + 55];
           _s3yu6::P64 = P64[R1 + 63];
           _s3yu7::P64 = P64[R1 + 71];
           _s3yu8::P64 = P64[R1 + 79];
           R1 = R2;
           P64[Sp - 80] = _s3ytZ::P64;
           P64[Sp - 72] = _s3yu0::P64;
           P64[Sp - 64] = _s3yu1::P64;
           P64[Sp - 56] = _s3yu2::P64;
           P64[Sp - 48] = _s3yu3::P64;
           P64[Sp - 40] = _s3yu4::P64;
           P64[Sp - 32] = _s3yu5::P64;
           P64[Sp - 24] = _s3yu6::P64;
           P64[Sp - 16] = _s3yu7::P64;
           P64[Sp - 8] = _s3yu8::P64;
           Sp = Sp - 88;
           if (R1 & 7 != 0) goto u3AcG; else goto c3Ac8;
       u3AcG: // global
           call _c3Ac7(R1) args: 0, res: 0, upd: 0;
       c3Ac8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ac7() //  [R1]
         { info_tbl: [(c3Ac7,
                       label: block_c3Ac7_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ac7: // global
           _s3yuc::I64 = I64[R1 + 7];
           if (_s3yuc::I64 < 99) goto u3Act; else goto u3Acz;
       u3Act: // global
           if (_s3yuc::I64 < 97) goto u3Acu; else goto u3Acy;
       u3Acu: // global
           if (_s3yuc::I64 < 40) goto u3Acv; else goto u3Acx;
       u3Acv: // global
           if (_s3yuc::I64 < 39) goto u3Acw; else goto c3Ack;
       u3Acw: // global
           if (_s3yuc::I64 != 34) goto c3Aci; else goto c3Acj;
       c3Acj: // global
           R1 = P64[Sp + 80] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Ack: // global
           R1 = P64[Sp + 72] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Acx: // global
           if (_s3yuc::I64 != 92) goto c3Aci; else goto c3Acl;
       c3Acl: // global
           R1 = P64[Sp + 64] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Acy: // global
           if (_s3yuc::I64 < 98) goto c3Acm; else goto c3Acn;
       c3Acm: // global
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Acn: // global
           R1 = P64[Sp + 48] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Acz: // global
           if (_s3yuc::I64 < 116) goto u3AcA; else goto u3AcE;
       u3AcA: // global
           if (_s3yuc::I64 < 111) goto u3AcB; else goto u3AcD;
       u3AcB: // global
           if (_s3yuc::I64 < 110) goto u3AcC; else goto c3Acp;
       u3AcC: // global
           if (_s3yuc::I64 != 102) goto c3Aci; else goto c3Aco;
       c3Aco: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Acp: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3AcD: // global
           if (_s3yuc::I64 != 114) goto c3Aci; else goto c3Acq;
       c3Acq: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3AcE: // global
           if (_s3yuc::I64 < 117) goto c3Acr; else goto u3AcF;
       c3Acr: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3AcF: // global
           if (_s3yuc::I64 != 118) goto c3Aci; else goto c3Acs;
       c3Aci: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Acs: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3AcQ_srtd" {
     u3AcQ_srtd:
         const S3yFW_srt+232;
         const 126;
         const 18031990695526401;
         const 4539628424389459968;
 },
 Text.Read.Lex.lexChar2_entry() //  [R2]
         { info_tbl: [(c3AcI,
                       label: Text.Read.Lex.lexChar2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AcI: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto c3AcM; else goto c3AcL;
       c3AcM: // global
           HpAlloc = 424;
           R2 = R2;
           R1 = Text.Read.Lex.lexChar2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AcL: // global
           I64[Hp - 416] = lvl116_s3ytZ_info;
           P64[Hp - 400] = R2;
           I64[Hp - 392] = lvl117_s3yu0_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = lvl118_s3yu1_info;
           P64[Hp - 352] = R2;
           I64[Hp - 344] = lvl119_s3yu2_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = lvl120_s3yu3_info;
           P64[Hp - 304] = R2;
           I64[Hp - 296] = lvl121_s3yu4_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = lvl122_s3yu5_info;
           P64[Hp - 256] = R2;
           I64[Hp - 248] = lvl123_s3yu6_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = lvl124_s3yu7_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = lvl125_s3yu8_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s3yvh_info;
           P64[Hp - 160] = R2;
           _c3A4H::P64 = Hp - 416;
           P64[Hp - 152] = _c3A4H::P64;
           _c3A4O::P64 = Hp - 392;
           P64[Hp - 144] = _c3A4O::P64;
           _c3A4V::P64 = Hp - 368;
           P64[Hp - 136] = _c3A4V::P64;
           _c3A52::P64 = Hp - 344;
           P64[Hp - 128] = _c3A52::P64;
           _c3A59::P64 = Hp - 320;
           P64[Hp - 120] = _c3A59::P64;
           _c3A5g::P64 = Hp - 296;
           P64[Hp - 112] = _c3A5g::P64;
           _c3A5n::P64 = Hp - 272;
           P64[Hp - 104] = _c3A5n::P64;
           I64[Hp - 96] = sat_s3yud_info;
           P64[Hp - 88] = _c3A4H::P64;
           P64[Hp - 80] = _c3A4O::P64;
           P64[Hp - 72] = _c3A4V::P64;
           P64[Hp - 64] = _c3A52::P64;
           P64[Hp - 56] = _c3A59::P64;
           P64[Hp - 48] = _c3A5g::P64;
           P64[Hp - 40] = _c3A5n::P64;
           P64[Hp - 32] = Hp - 248;
           P64[Hp - 24] = Hp - 224;
           P64[Hp - 16] = Hp - 200;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 95;
           R3 = Hp - 176;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.788101876 UTC

[section ""cstring" . Text.Read.Lex.lexChar4_bytes" {
     Text.Read.Lex.lexChar4_bytes:
         I8[] [92,38]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.789062933 UTC

[section ""data" . Text.Read.Lex.lexChar3_closure" {
     Text.Read.Lex.lexChar3_closure:
         const Text.Read.Lex.lexChar3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.lexChar3_entry() //  [R1]
         { info_tbl: [(c3AcX,
                       label: Text.Read.Lex.lexChar3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AcX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AcY; else goto c3AcZ;
       c3AcY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AcZ: // global
           (_c3AcU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AcU::I64 == 0) goto c3AcW; else goto c3AcV;
       c3AcW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AcV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AcU::I64;
           R2 = Text.Read.Lex.lexChar4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.792312788 UTC

[section ""data" . Text.Read.Lex.$wlvl_closure" {
     Text.Read.Lex.$wlvl_closure:
         const Text.Read.Lex.$wlvl_info;
         const 0;
 },
 lvl116_s3yvj_entry() //  [R1]
         { info_tbl: [(c3Adb,
                       label: lvl116_s3yvj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Adb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Adc; else goto c3Add;
       c3Adc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Add: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Ad8_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wconsumeEmpties_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Ad8() //  [R1]
         { info_tbl: [(c3Ad8,
                       label: block_c3Ad8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ad8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Adg; else goto c3Adf;
       c3Adg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Adf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yvn_entry() //  [R1]
         { info_tbl: [(c3Adm,
                       label: sat_s3yvn_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Adm: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wlvl_entry() //  [R2]
         { info_tbl: [(c3Adp,
                       label: Text.Read.Lex.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Adp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Adt; else goto c3Ads;
       c3Adt: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Text.Read.Lex.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ads: // global
           I64[Hp - 32] = lvl116_s3yvj_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3yvn_info;
           P64[Hp] = Hp - 32;
           R3 = Hp - 7;
           R2 = Text.Read.Lex.lexChar3_closure;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Text.Read.Lex.$wconsumeEmpties_closure" {
     Text.Read.Lex.$wconsumeEmpties_closure:
         const Text.Read.Lex.$wconsumeEmpties_info;
         const 0;
 },
 lvl116_s3yvp_entry() //  [R1]
         { info_tbl: [(c3AdF,
                       label: lvl116_s3yvp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AdF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3AdG; else goto c3AdH;
       c3AdG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AdH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3AdC_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3AdC() //  [R1]
         { info_tbl: [(c3AdC,
                       label: block_c3AdC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AdC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AdK; else goto c3AdJ;
       c3AdK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3AdJ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3yvs_entry() //  [R1]
         { info_tbl: [(c3AdP,
                       label: lvl117_s3yvs_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AdP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AdQ; else goto c3AdR;
       c3AdQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AdR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yvG_entry() //  [R1, R2]
         { info_tbl: [(c3Ae4,
                       label: sat_s3yvG_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ae4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Ae5; else goto c3Ae6;
       c3Ae5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ae6: // global
           I64[Sp - 24] = block_c3AdX_info;
           _s3yvp::P64 = P64[R1 + 7];
           _s3yvs::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yvp::P64;
           P64[Sp - 8] = _s3yvs::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3AeS; else goto c3AdY;
       u3AeS: // global
           call _c3AdX(R1) args: 0, res: 0, upd: 0;
       c3AdY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AdX() //  [R1]
         { info_tbl: [(c3AdX,
                       label: block_c3AdX_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AdX: // global
           if (R1 & 7 == 1) goto u3AeM; else goto c3Ae2;
       u3AeM: // global
           Sp = Sp + 16;
           call _c3AeJ() args: 0, res: 0, upd: 0;
       c3Ae2: // global
           I64[Sp - 8] = block_c3Aec_info;
           _s3yvw::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3yvw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3AeQ; else goto c3Aee;
       u3AeQ: // global
           call _c3Aec(R1) args: 0, res: 0, upd: 0;
       c3Aee: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Aec() //  [R1]
         { info_tbl: [(c3Aec,
                       label: block_c3Aec_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aec: // global
           if (I64[R1 + 7] == 92) goto c3Aep; else goto u3AeN;
       c3Aep: // global
           _s3yvw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Aeo_info;
           R1 = _s3yvw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3AeT; else goto c3Aeq;
       u3AeT: // global
           call _c3Aeo(R1) args: 0, res: 0, upd: 0;
       c3Aeq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3AeN: // global
           Sp = Sp + 24;
           call _c3AeJ() args: 0, res: 0, upd: 0;
     }
 },
 _c3Aeo() //  [R1]
         { info_tbl: [(c3Aeo,
                       label: block_c3Aeo_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aeo: // global
           if (R1 & 7 == 1) goto u3AeO; else goto c3AeB;
       u3AeO: // global
           Sp = Sp + 16;
           call _c3AeJ() args: 0, res: 0, upd: 0;
       c3AeB: // global
           I64[Sp] = block_c3Aez_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3AeV; else goto c3AeC;
       u3AeV: // global
           call _c3Aez(R1) args: 0, res: 0, upd: 0;
       c3AeC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Aez() //  [R1]
         { info_tbl: [(c3Aez,
                       label: block_c3Aez_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aez: // global
           if (I64[R1 + 7] == 38) goto c3AeK; else goto u3AeP;
       c3AeK: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3AeP: // global
           Sp = Sp + 16;
           call _c3AeJ() args: 0, res: 0, upd: 0;
     }
 },
 _c3AeJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AeJ: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wconsumeEmpties_entry() //  [R2]
         { info_tbl: [(c3AeY,
                       label: Text.Read.Lex.$wconsumeEmpties_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AeY: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Af2; else goto c3Af1;
       c3Af2: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Text.Read.Lex.$wconsumeEmpties_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Af1: // global
           I64[Hp - 64] = lvl116_s3yvp_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl117_s3yvs_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3yvG_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.798486832 UTC

[section ""data" . Text.Read.Lex.lexChar5_closure" {
     Text.Read.Lex.lexChar5_closure:
         const Text.Read.Lex.lexChar5_info;
         const 0;
 },
 Text.Read.Lex.lexChar5_entry() //  [R2]
         { info_tbl: [(c3Afa,
                       label: Text.Read.Lex.lexChar5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Afa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Afb; else goto c3Afc;
       c3Afb: // global
           R2 = R2;
           R1 = Text.Read.Lex.lexChar5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Afc: // global
           I64[Sp - 8] = block_c3Af7_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wconsumeEmpties_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Af7() //  [R1]
         { info_tbl: [(c3Af7,
                       label: block_c3Af7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Af7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Aff; else goto c3Afe;
       c3Aff: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Afe: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.802981803 UTC

[section ""data" . Text.Read.Lex.$wlexChar_closure" {
     Text.Read.Lex.$wlexChar_closure:
         const Text.Read.Lex.$wlexChar_info;
         const 0;
 },
 sat_s3yvU_entry() //  [R1]
         { info_tbl: [(c3AfI,
                       label: sat_s3yvU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AfI: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl118_s3yvS_entry() //  [R1]
         { info_tbl: [(c3AfO,
                       label: lvl118_s3yvS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AfO: // global
           _s3yvS::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3AfP; else goto c3AfQ;
       c3AfQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AfS; else goto c3AfR;
       c3AfS: // global
           HpAlloc = 16;
           goto c3AfP;
       c3AfP: // global
           R1 = _s3yvS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AfR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvS::P64;
           _s3yvR::P64 = P64[_s3yvS::P64 + 16];
           I64[Hp - 8] = sat_s3yvU_info;
           P64[Hp] = _s3yvR::P64;
           I64[Sp - 24] = block_c3AfL_info;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3AfL() //  [R1]
         { info_tbl: [(c3AfL,
                       label: block_c3AfL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AfL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AfV; else goto c3AfU;
       c3AfV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3AfU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ywa_entry() //  [R1, R2]
         { info_tbl: [(c3Ag8,
                       label: sat_s3ywa_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ag8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Ag9; else goto c3Aga;
       c3Ag9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Aga: // global
           I64[Sp - 24] = block_c3Ag1_info;
           _s3yvR::P64 = P64[R1 + 7];
           _s3yvS::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yvR::P64;
           P64[Sp - 8] = _s3yvS::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3AgW; else goto c3Ag2;
       u3AgW: // global
           call _c3Ag1(R1) args: 0, res: 0, upd: 0;
       c3Ag2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ag1() //  [R1]
         { info_tbl: [(c3Ag1,
                       label: block_c3Ag1_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ag1: // global
           if (R1 & 7 == 1) goto u3AgQ; else goto c3Ag6;
       u3AgQ: // global
           Sp = Sp + 8;
           call _c3AgN() args: 0, res: 0, upd: 0;
       c3Ag6: // global
           I64[Sp - 8] = block_c3Agg_info;
           _s3yw0::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3yw0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3AgU; else goto c3Agi;
       u3AgU: // global
           call _c3Agg(R1) args: 0, res: 0, upd: 0;
       c3Agi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Agg() //  [R1]
         { info_tbl: [(c3Agg,
                       label: block_c3Agg_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Agg: // global
           if (I64[R1 + 7] == 92) goto c3Agt; else goto u3AgR;
       c3Agt: // global
           _s3yw0::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Ags_info;
           R1 = _s3yw0::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3AgX; else goto c3Agu;
       u3AgX: // global
           call _c3Ags(R1) args: 0, res: 0, upd: 0;
       c3Agu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3AgR: // global
           Sp = Sp + 16;
           call _c3AgN() args: 0, res: 0, upd: 0;
     }
 },
 _c3Ags() //  [R1]
         { info_tbl: [(c3Ags,
                       label: block_c3Ags_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ags: // global
           if (R1 & 7 == 1) goto u3AgS; else goto c3AgF;
       u3AgS: // global
           Sp = Sp + 8;
           call _c3AgN() args: 0, res: 0, upd: 0;
       c3AgF: // global
           I64[Sp] = block_c3AgD_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3AgZ; else goto c3AgG;
       u3AgZ: // global
           call _c3AgD(R1) args: 0, res: 0, upd: 0;
       c3AgG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AgD() //  [R1]
         { info_tbl: [(c3AgD,
                       label: block_c3AgD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AgD: // global
           if (I64[R1 + 7] == 38) goto c3AgO; else goto u3AgT;
       c3AgO: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3AgT: // global
           Sp = Sp + 8;
           call _c3AgN() args: 0, res: 0, upd: 0;
     }
 },
 _c3AgN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AgN: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k_s3yvM_entry() //  [R1, R2]
         { info_tbl: [(c3Ah2,
                       label: k_s3yvM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ah2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ah4; else goto c3Ah5;
       c3Ah4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ah5: // global
           I64[Sp - 16] = block_c3Aft_info;
           _s3yvK::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yvK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Ah9; else goto c3Afu;
       u3Ah9: // global
           call _c3Aft(R1) args: 0, res: 0, upd: 0;
       c3Afu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Aft() //  [R1]
         { info_tbl: [(c3Aft,
                       label: block_c3Aft_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aft: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Ah8; else goto c3Ah7;
       c3Ah8: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ah7: // global
           _s3yvP::P64 = P64[R1 + 7];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _s3yvP::P64;
           I64[Hp - 56] = lvl118_s3yvS_info;
           _c3Afy::P64 = Hp - 88;
           P64[Hp - 40] = _c3Afy::P64;
           I64[Hp - 32] = sat_s3ywa_info;
           P64[Hp - 24] = _c3Afy::P64;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yvL_entry() //  [R1]
         { info_tbl: [(c3Aha,
                       label: lvl116_s3yvL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aha: // global
           _s3yvL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ahb; else goto c3Ahc;
       c3Ahc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ahe; else goto c3Ahd;
       c3Ahe: // global
           HpAlloc = 16;
           goto c3Ahb;
       c3Ahb: // global
           R1 = _s3yvL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ahd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvL::P64;
           _s3yvK::P64 = P64[_s3yvL::P64 + 16];
           I64[Hp - 8] = k_s3yvM_info;
           P64[Hp] = _s3yvK::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ywi_entry() //  [R1]
         { info_tbl: [(c3AhB,
                       label: sat_s3ywi_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AhB: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl118_s3ywg_entry() //  [R1]
         { info_tbl: [(c3AhH,
                       label: lvl118_s3ywg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AhH: // global
           _s3ywg::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3AhI; else goto c3AhJ;
       c3AhJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AhL; else goto c3AhK;
       c3AhL: // global
           HpAlloc = 16;
           goto c3AhI;
       c3AhI: // global
           R1 = _s3ywg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AhK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ywg::P64;
           _s3ywf::P64 = P64[_s3ywg::P64 + 16];
           I64[Hp - 8] = sat_s3ywi_info;
           P64[Hp] = _s3ywf::P64;
           I64[Sp - 24] = block_c3AhE_info;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3AhE() //  [R1]
         { info_tbl: [(c3AhE,
                       label: block_c3AhE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AhE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AhO; else goto c3AhN;
       c3AhO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3AhN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ywy_entry() //  [R1, R2]
         { info_tbl: [(c3Ai1,
                       label: sat_s3ywy_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ai1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Ai2; else goto c3Ai3;
       c3Ai2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ai3: // global
           I64[Sp - 24] = block_c3AhU_info;
           _s3ywf::P64 = P64[R1 + 7];
           _s3ywg::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ywf::P64;
           P64[Sp - 8] = _s3ywg::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3AiP; else goto c3AhV;
       u3AiP: // global
           call _c3AhU(R1) args: 0, res: 0, upd: 0;
       c3AhV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AhU() //  [R1]
         { info_tbl: [(c3AhU,
                       label: block_c3AhU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AhU: // global
           if (R1 & 7 == 1) goto u3AiJ; else goto c3AhZ;
       u3AiJ: // global
           Sp = Sp + 8;
           call _c3AiG() args: 0, res: 0, upd: 0;
       c3AhZ: // global
           I64[Sp - 8] = block_c3Ai9_info;
           _s3ywo::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3ywo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3AiN; else goto c3Aib;
       u3AiN: // global
           call _c3Ai9(R1) args: 0, res: 0, upd: 0;
       c3Aib: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ai9() //  [R1]
         { info_tbl: [(c3Ai9,
                       label: block_c3Ai9_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ai9: // global
           if (I64[R1 + 7] == 92) goto c3Aim; else goto u3AiK;
       c3Aim: // global
           _s3ywo::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Ail_info;
           R1 = _s3ywo::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3AiQ; else goto c3Ain;
       u3AiQ: // global
           call _c3Ail(R1) args: 0, res: 0, upd: 0;
       c3Ain: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3AiK: // global
           Sp = Sp + 16;
           call _c3AiG() args: 0, res: 0, upd: 0;
     }
 },
 _c3Ail() //  [R1]
         { info_tbl: [(c3Ail,
                       label: block_c3Ail_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ail: // global
           if (R1 & 7 == 1) goto u3AiL; else goto c3Aiy;
       u3AiL: // global
           Sp = Sp + 8;
           call _c3AiG() args: 0, res: 0, upd: 0;
       c3Aiy: // global
           I64[Sp] = block_c3Aiw_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3AiS; else goto c3Aiz;
       u3AiS: // global
           call _c3Aiw(R1) args: 0, res: 0, upd: 0;
       c3Aiz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Aiw() //  [R1]
         { info_tbl: [(c3Aiw,
                       label: block_c3Aiw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aiw: // global
           if (I64[R1 + 7] == 38) goto c3AiH; else goto u3AiM;
       c3AiH: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3AiM: // global
           Sp = Sp + 8;
           call _c3AiG() args: 0, res: 0, upd: 0;
     }
 },
 _c3AiG() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AiG: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ywz_entry() //  [R1, R2]
         { info_tbl: [(c3AiV,
                       label: sat_s3ywz_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AiV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3AiW; else goto c3AiX;
       c3AiW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AiX: // global
           I64[Sp - 24] = block_c3Ahk_info;
           _s3yvK::P64 = P64[R1 + 7];
           _s3yvL::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yvK::P64;
           P64[Sp - 8] = _s3yvL::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Aj5; else goto c3Ahl;
       u3Aj5: // global
           call _c3Ahk(R1) args: 0, res: 0, upd: 0;
       c3Ahl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ahk() //  [R1]
         { info_tbl: [(c3Ahk,
                       label: block_c3Ahk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ahk: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Aj0; else goto c3AiZ;
       c3Aj0: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AiZ: // global
           if (I64[R1 + 7] == 92) goto c3Aj4; else goto c3Aj3;
       c3Aj4: // global
           Hp = Hp - 96;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aj3: // global
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = lvl118_s3ywg_info;
           _c3Ahr::P64 = Hp - 88;
           P64[Hp - 40] = _c3Ahr::P64;
           I64[Hp - 32] = sat_s3ywy_info;
           P64[Hp - 24] = _c3Ahr::P64;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wlexChar_entry() //  [R2]
         { info_tbl: [(c3Aj6,
                       label: Text.Read.Lex.$wlexChar_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aj6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Aja; else goto c3Aj9;
       c3Aja: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Text.Read.Lex.$wlexChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Aj9: // global
           I64[Hp - 40] = lvl116_s3yvL_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3ywz_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.810433945 UTC

[section ""data" . Text.Read.Lex.lexChar1_closure" {
     Text.Read.Lex.lexChar1_closure:
         const Text.Read.Lex.lexChar1_info;
         const 0;
 },
 Text.Read.Lex.lexChar1_entry() //  [R2]
         { info_tbl: [(c3Aji,
                       label: Text.Read.Lex.lexChar1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aji: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ajj; else goto c3Ajk;
       c3Ajj: // global
           R2 = R2;
           R1 = Text.Read.Lex.lexChar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ajk: // global
           I64[Sp - 8] = block_c3Ajf_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wlexChar_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ajf() //  [R1]
         { info_tbl: [(c3Ajf,
                       label: block_c3Ajf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ajf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ajn; else goto c3Ajm;
       c3Ajn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ajm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.811703478 UTC

[section ""data" . Text.Read.Lex.lexChar_closure" {
     Text.Read.Lex.lexChar_closure:
         const Text.Read.Lex.lexChar_info;
         const 0;
 },
 Text.Read.Lex.lexChar_entry() //  [R2]
         { info_tbl: [(c3Ajs,
                       label: Text.Read.Lex.lexChar_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ajs: // global
           R2 = R2;
           call Text.Read.Lex.lexChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.816256101 UTC

[section ""data" . lexStrItem_r3yd4_closure" {
     lexStrItem_r3yd4_closure:
         const lexStrItem_r3yd4_info;
         const 0;
 },
 lvl116_s3ywE_entry() //  [R1]
         { info_tbl: [(c3AjD,
                       label: lvl116_s3ywE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AjD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AjE; else goto c3AjF;
       c3AjE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AjF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call lexStrItem_r3yd4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3ywF_entry() //  [R1, R2]
         { info_tbl: [(c3AjO,
                       label: lvl117_s3ywF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AjO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AjP; else goto c3AjQ;
       c3AjP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AjQ: // global
           I64[Sp - 16] = block_c3AjL_info;
           _s3ywE::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ywE::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3AjY; else goto c3AjM;
       u3AjY: // global
           call _c3AjL(R1) args: 0, res: 0, upd: 0;
       c3AjM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AjL() //  [R1]
         { info_tbl: [(c3AjL,
                       label: block_c3AjL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AjL: // global
           if (I64[R1 + 7] == 92) goto c3AjX; else goto c3AjW;
       c3AjX: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AjW: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k1_s3ywL_entry() //  [R1]
         { info_tbl: [(c3Ak5,
                       label: k1_s3ywL_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ak5: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl119_s3ywN_entry() //  [R1, R2]
         { info_tbl: [(c3Akd,
                       label: lvl119_s3ywN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Akd: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl1_s3ywP_entry() //  [R1, R2]
         { info_tbl: [(c3Akp,
                       label: $wlvl1_s3ywP_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Akp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Akt; else goto c3Aks;
       c3Akt: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Aks: // global
           if (R2 == 38) goto c3Ako; else goto c3Akn;
       c3Ako: // global
           _s3ywE::P64 = P64[R1 + 7];
           Hp = Hp - 16;
           R1 = _s3ywE::P64 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Akn: // global
           _s3ywN::P64 = P64[R1 + 15];
           if (R2 > 887) goto c3AkQ; else goto c3Alh;
       c3AkQ: // global
           (_s3ywZ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(R2);
           if (_s3ywZ::I64 == 0) goto c3Al2; else goto c3AkN;
       c3AkN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Alh: // global
           if (R2 == 32) goto c3Alg; else goto c3Ald;
       c3Alg: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Ald: // global
           if ((R2 + -9) > 4) goto c3Al8; else goto c3Alb;
       c3Al8: // global
           if (R2 != 160) goto c3Al2; else goto c3Al6;
       c3Al2: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Al6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Alb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl120_s3yx5_entry() //  [R1, R2]
         { info_tbl: [(c3Alq,
                       label: lvl120_s3yx5_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Alq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Alr; else goto c3Als;
       c3Alr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Als: // global
           I64[Sp - 16] = block_c3Aln_info;
           _s3ywP::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ywP::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Alw; else goto c3Alo;
       u3Alw: // global
           call _c3Aln(R1) args: 0, res: 0, upd: 0;
       c3Alo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Aln() //  [R1]
         { info_tbl: [(c3Aln,
                       label: block_c3Aln_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aln: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wlvl1_s3ywP_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl122_s3yxa_entry() //  [R1]
         { info_tbl: [(c3AlC,
                       label: lvl122_s3yxa_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AlC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AlD; else goto c3AlE;
       c3AlD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AlE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yxm_entry() //  [R1, R2]
         { info_tbl: [(c3AlN,
                       label: sat_s3yxm_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AlN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3AlO; else goto c3AlP;
       c3AlO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AlP: // global
           I64[Sp - 24] = block_c3AlK_info;
           _s3ywD::P64 = P64[R1 + 7];
           _s3yxa::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ywD::P64;
           P64[Sp - 8] = _s3yxa::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Am1; else goto c3AlL;
       u3Am1: // global
           call _c3AlK(R1) args: 0, res: 0, upd: 0;
       c3AlL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AlK() //  [R1]
         { info_tbl: [(c3AlK,
                       label: block_c3AlK_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AlK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3AlU; else goto c3AlT;
       c3AlU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AlT: // global
           if (I64[R1 + 7] == 92) goto c3Am0; else goto c3AlZ;
       c3Am0: // global
           Hp = Hp - 24;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AlZ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = Hp - 15;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yxf_entry() //  [R1, R2]
         { info_tbl: [(c3Amb,
                       label: sat_s3yxf_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Amb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Amc; else goto c3Amd;
       c3Amc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Amd: // global
           I64[Sp - 16] = block_c3Am8_info;
           _s3yx9::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yx9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Aml; else goto c3Am9;
       u3Aml: // global
           call _c3Am8(R1) args: 0, res: 0, upd: 0;
       c3Am9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Am8() //  [R1]
         { info_tbl: [(c3Am8,
                       label: block_c3Am8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Am8: // global
           if (I64[R1 + 7] == 92) goto c3Amk; else goto c3Amj;
       c3Amk: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Amj: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lexStrItem_r3yd4_entry() //  [R2]
         { info_tbl: [(c3Amn,
                       label: lexStrItem_r3yd4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Amn: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto c3Amr; else goto c3Amq;
       c3Amr: // global
           HpAlloc = 240;
           R2 = R2;
           R1 = lexStrItem_r3yd4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Amq: // global
           I64[Hp - 232] = lvl116_s3ywE_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = lvl117_s3ywF_info;
           _c3Ajz::P64 = Hp - 232;
           P64[Hp - 200] = _c3Ajz::P64;
           I64[Hp - 192] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 184] = Hp - 207;
           I64[Hp - 176] = k1_s3ywL_info;
           P64[Hp - 168] = Hp - 191;
           I64[Hp - 160] = lvl119_s3ywN_info;
           P64[Hp - 152] = Hp - 175;
           I64[Hp - 144] = $wlvl1_s3ywP_info;
           P64[Hp - 136] = _c3Ajz::P64;
           P64[Hp - 128] = Hp - 159;
           I64[Hp - 120] = lvl120_s3yx5_info;
           P64[Hp - 112] = Hp - 143;
           I64[Hp - 104] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 96] = Hp - 119;
           I64[Hp - 88] = lvl122_s3yxa_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s3yxm_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = sat_s3yxf_info;
           P64[Hp - 16] = Hp - 103;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 39;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.823275497 UTC

[section ""data" . body_r3yd5_closure" {
     body_r3yd5_closure:
         const body_r3yd5_info;
         const 0;
 },
 sat_s3yxr_entry() //  [R1]
         { info_tbl: [(c3AmE,
                       label: sat_s3yxr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AmE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AmF; else goto c3AmG;
       c3AmF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AmG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl116_s3yxq_entry() //  [R1]
         { info_tbl: [(c3AmI,
                       label: lvl116_s3yxq_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AmI: // global
           _s3yxq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AmJ; else goto c3AmK;
       c3AmK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3AmM; else goto c3AmL;
       c3AmM: // global
           HpAlloc = 40;
           goto c3AmJ;
       c3AmJ: // global
           R1 = _s3yxq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AmL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yxq::P64;
           _s3yxo::P64 = P64[_s3yxq::P64 + 16];
           _s3yxp::P64 = P64[_s3yxq::P64 + 24];
           I64[Hp - 32] = sat_s3yxr_info;
           P64[Hp - 16] = _s3yxo::P64;
           I64[Hp - 8] = Text.Read.Lex.String_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           R1 = _s3yxp::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yxC_entry() //  [R1, R2]
         { info_tbl: [(c3And,
                       label: sat_s3yxC_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3And: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Anh; else goto c3Ang;
       c3Anh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ang: // global
           _s3yxo::P64 = P64[R1 + 7];
           _s3yxx::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yxx::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3yxo::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yxF_entry() //  [R1, R2]
         { info_tbl: [(c3Ani,
                       label: sat_s3yxF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ani: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Anj; else goto c3Ank;
       c3Anj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ank: // global
           I64[Sp - 32] = block_c3AmS_info;
           _s3yxo::P64 = P64[R1 + 7];
           _s3yxp::P64 = P64[R1 + 15];
           _s3yxq::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3yxo::P64;
           P64[Sp - 16] = _s3yxp::P64;
           P64[Sp - 8] = _s3yxq::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3AnO; else goto c3AmT;
       u3AnO: // global
           call _c3AmS(R1) args: 0, res: 0, upd: 0;
       c3AmT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AmS() //  [R1]
         { info_tbl: [(c3AmS,
                       label: block_c3AmS_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AmS: // global
           I64[Sp - 8] = block_c3AmX_info;
           _s3yxw::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3yxw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3AnL; else goto c3AmY;
       u3AnL: // global
           call _c3AmX(R1) args: 0, res: 0, upd: 0;
       c3AmY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AmX() //  [R1]
         { info_tbl: [(c3AmX,
                       label: block_c3AmX_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AmX: // global
           if (I64[R1 + 7] == 34) goto c3Anw; else goto u3AnJ;
       c3Anw: // global
           I64[Sp] = block_c3Anv_info;
           _s3yxx::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3yxx::P64;
           if (R1 & 7 != 0) goto u3AnM; else goto c3Anx;
       u3AnM: // global
           call _c3Anv(R1) args: 0, res: 0, upd: 0;
       c3Anx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3AnJ: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3An5() args: 0, res: 0, upd: 0;
     }
 },
 _c3Anv() //  [R1]
         { info_tbl: [(c3Anv,
                       label: block_c3Anv_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Anv: // global
           if (R1 & 7 == 1) goto c3AnD; else goto u3AnK;
       c3AnD: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3AnK: // global
           P64[Sp + 32] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c3An5() args: 0, res: 0, upd: 0;
     }
 },
 _c3An5() //  []
         { info_tbl: [(c3An5,
                       label: block_c3An5_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3An5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Anp; else goto c3Ano;
       c3Anp: // global
           HpAlloc = 24;
           I64[Sp] = block_c3An5_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Ano: // global
           I64[Hp - 16] = sat_s3yxC_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = Hp - 15;
           Sp = Sp + 32;
           call body_r3yd5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 body_r3yd5_entry() //  [R2, R3]
         { info_tbl: [(c3AnQ,
                       label: body_r3yd5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AnQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3AnU; else goto c3AnT;
       c3AnU: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = body_r3yd5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3AnT: // global
           I64[Hp - 56] = lvl116_s3yxq_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yxF_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R2 = Hp - 23;
           call lexStrItem_r3yd4_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.83016521 UTC

[section ""data" . lexExp_r3yd6_closure" {
     lexExp_r3yd6_closure:
         const lexExp_r3yd6_info;
         const 0;
 },
 sat_s3yxP_entry() //  [R1]
         { info_tbl: [(c3Aok,
                       label: sat_s3yxP_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aok: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Aol; else goto c3Aom;
       c3Aol: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Aom: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3Aoh_info;
           _s3yxK::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yxK::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3AoB; else goto c3Aoi;
       u3AoB: // global
           call _c3Aoh(R1) args: 0, res: 0, upd: 0;
       c3Aoi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3Aoh() //  [R1]
         { info_tbl: [(c3Aoh,
                       label: block_c3Aoh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aoh: // global
           _s3yxK::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 45) goto c3Aow; else goto c3Aos;
       c3Aow: // global
           I64[Sp + 8] = block_c3Aov_info;
           R3 = _s3yxK::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 24;
       c3Aos: // global
           R3 = _s3yxK::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 _c3Aov() //  [R1]
         { info_tbl: [(c3Aov,
                       label: block_c3Aov_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aov: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yxR_entry() //  [R1, R2]
         { info_tbl: [(c3AoD,
                       label: sat_s3yxR_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AoD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3AoH; else goto c3AoG;
       c3AoH: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AoG: // global
           _s3yxG::P64 = P64[R1 + 7];
           _s3yxJ::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3yxP_info;
           P64[Hp - 24] = _s3yxJ::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 6;
           R1 = _s3yxG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3AqX_srtd" {
     u3AqX_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 k1_s3yxI_entry() //  [R1, R2]
         { info_tbl: [(c3AoL,
                       label: k1_s3yxI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AoL: // global
           _s3yxJ::P64 = R2;
           _s3yxI::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3AoM; else goto c3AoN;
       c3AoN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3AoP; else goto c3AoO;
       c3AoP: // global
           HpAlloc = 24;
           goto c3AoM;
       c3AoM: // global
           R2 = _s3yxJ::P64;
           R1 = _s3yxI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AoO: // global
           _s3yxG::P64 = P64[_s3yxI::P64 + 7];
           I64[Hp - 16] = sat_s3yxR_info;
           P64[Hp - 8] = _s3yxG::P64;
           P64[Hp] = _s3yxJ::P64;
           I64[Sp - 8] = block_c3AoI_info;
           R3 = Hp - 15;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 8;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3AoI() //  [R1]
         { info_tbl: [(c3AoI,
                       label: block_c3AoI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AoI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AoS; else goto c3AoR;
       c3AoS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AoR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yy8_entry() //  [R1]
         { info_tbl: [(c3Ap6,
                       label: sat_s3yy8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ap6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ap7; else goto c3Ap8;
       c3Ap7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ap8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yya_entry() //  [R1, R2]
         { info_tbl: [(c3Apa,
                       label: sat_s3yya_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Apa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Ape; else goto c3Apd;
       c3Ape: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Apd: // global
           _s3yxG::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_s3yy8_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           R1 = _s3yxG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3AqY_srtd" {
     u3AqY_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3yyd_entry() //  [R1]
         { info_tbl: [(c3Api,
                       label: sat_s3yyd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Api: // global
           _s3yyd::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Apj; else goto c3Apk;
       c3Apk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Apm; else goto c3Apl;
       c3Apm: // global
           HpAlloc = 16;
           goto c3Apj;
       c3Apj: // global
           R1 = _s3yyd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Apl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yyd::P64;
           _s3yxG::P64 = P64[_s3yyd::P64 + 16];
           I64[Hp - 8] = sat_s3yya_info;
           P64[Hp] = _s3yxG::P64;
           I64[Sp - 24] = block_c3Apf_info;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Apf() //  [R1]
         { info_tbl: [(c3Apf,
                       label: block_c3Apf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Apf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3App; else goto c3Apo;
       c3App: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Apo: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3AqZ_srtd" {
     u3AqZ_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3yy4_entry() //  [R1, R2]
         { info_tbl: [(c3Apy,
                       label: sat_s3yy4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Apy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Apz; else goto c3ApA;
       c3Apz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ApA: // global
           I64[Sp - 16] = block_c3Apv_info;
           _s3yxI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3ApI; else goto c3Apw;
       u3ApI: // global
           call _c3Apv(R1) args: 0, res: 0, upd: 0;
       c3Apw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3Ar0_srtd" {
     u3Ar0_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 _c3Apv() //  [R1]
         { info_tbl: [(c3Apv,
                       label: block_c3Apv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Apv: // global
           if (I64[R1 + 7] == 43) goto c3ApH; else goto c3ApG;
       c3ApH: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call k1_s3yxI_entry(R2, R1) args: 8, res: 0, upd: 8;
       c3ApG: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Ar1_srtd" {
     u3Ar1_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3yxY_entry() //  [R1, R2]
         { info_tbl: [(c3ApS,
                       label: sat_s3yxY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ApS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ApT; else goto c3ApU;
       c3ApT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ApU: // global
           I64[Sp - 16] = block_c3ApP_info;
           _s3yxI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Aq2; else goto c3ApQ;
       u3Aq2: // global
           call _c3ApP(R1) args: 0, res: 0, upd: 0;
       c3ApQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3Ar2_srtd" {
     u3Ar2_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 _c3ApP() //  [R1]
         { info_tbl: [(c3ApP,
                       label: block_c3ApP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ApP: // global
           if (I64[R1 + 7] == 45) goto c3Aq1; else goto c3Aq0;
       c3Aq1: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call k1_s3yxI_entry(R2, R1) args: 8, res: 0, upd: 8;
       c3Aq0: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Ar3_srtd" {
     u3Ar3_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201392128;
 },
 lvl116_s3yxH_entry() //  [R1]
         { info_tbl: [(c3Aq6,
                       label: lvl116_s3yxH_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aq6: // global
           _s3yxH::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Aq7; else goto c3Aq8;
       c3Aq8: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3Aqa; else goto c3Aq9;
       c3Aqa: // global
           HpAlloc = 104;
           goto c3Aq7;
       c3Aq7: // global
           R1 = _s3yxH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Aq9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yxH::P64;
           _s3yxG::P64 = P64[_s3yxH::P64 + 16];
           I64[Hp - 96] = k1_s3yxI_info;
           P64[Hp - 88] = _s3yxG::P64;
           I64[Hp - 80] = sat_s3yyd_info;
           P64[Hp - 64] = _s3yxG::P64;
           I64[Hp - 56] = sat_s3yy4_info;
           _c3Ao3::P64 = Hp - 95;
           P64[Hp - 48] = _c3Ao3::P64;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = sat_s3yxY_info;
           P64[Hp - 16] = _c3Ao3::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 32] = block_c3Aq4_info;
           R3 = Hp - 39;
           R2 = Hp - 7;
           P64[Sp - 24] = Hp - 80;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Aq4() //  [R1]
         { info_tbl: [(c3Aq4,
                       label: block_c3Aq4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aq4: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yyo_entry() //  [R1, R2]
         { info_tbl: [(c3Aqm,
                       label: sat_s3yyo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aqm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Aqn; else goto c3Aqo;
       c3Aqn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Aqo: // global
           I64[Sp - 16] = block_c3Aqj_info;
           _s3yxH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Aqw; else goto c3Aqk;
       u3Aqw: // global
           call _c3Aqj(R1) args: 0, res: 0, upd: 0;
       c3Aqk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Aqj() //  [R1]
         { info_tbl: [(c3Aqj,
                       label: block_c3Aqj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aqj: // global
           if (I64[R1 + 7] == 69) goto c3Aqv; else goto c3Aqu;
       c3Aqv: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Aqu: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yyi_entry() //  [R1, R2]
         { info_tbl: [(c3AqG,
                       label: sat_s3yyi_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AqG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AqH; else goto c3AqI;
       c3AqH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AqI: // global
           I64[Sp - 16] = block_c3AqD_info;
           _s3yxH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3AqQ; else goto c3AqE;
       u3AqQ: // global
           call _c3AqD(R1) args: 0, res: 0, upd: 0;
       c3AqE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AqD() //  [R1]
         { info_tbl: [(c3AqD,
                       label: block_c3AqD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AqD: // global
           if (I64[R1 + 7] == 101) goto c3AqP; else goto c3AqO;
       c3AqP: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AqO: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Ar4_srtd" {
     u3Ar4_srtd:
         const S3yFW_srt+584;
         const 93;
         const 1;
         const 469827584;
 },
 lexExp_r3yd6_entry() //  [R2]
         { info_tbl: [(c3AqS,
                       label: lexExp_r3yd6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AqS: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3AqW; else goto c3AqV;
       c3AqW: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = lexExp_r3yd6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AqV: // global
           I64[Hp - 80] = lvl116_s3yxH_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s3yyo_info;
           _c3AnZ::P64 = Hp - 80;
           P64[Hp - 48] = _c3AnZ::P64;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = sat_s3yyi_info;
           P64[Hp - 16] = _c3AnZ::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 39;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.839151084 UTC

[section ""data" . lvl114_r3yd7_closure" {
     lvl114_r3yd7_closure:
         const lvl114_r3yd7_info;
 },
 lvl114_r3yd7_entry() //  [R2]
         { info_tbl: [(c3Ar9,
                       label: lvl114_r3yd7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ar9: // global
           _s3yyq::P64 = R2;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _s3yyq::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.840225326 UTC

[section ""data" . lvl115_r3yd8_closure" {
     lvl115_r3yd8_closure:
         const lvl115_r3yd8_info;
 },
 lvl115_r3yd8_entry() //  [R2]
         { info_tbl: [(c3Arg,
                       label: lvl115_r3yd8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Arg: // global
           _s3yyr::P64 = R2;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _s3yyr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.842042303 UTC

[section ""data" . $wlexDecNumber_r3yd9_closure" {
     $wlexDecNumber_r3yd9_closure:
         const $wlexDecNumber_r3yd9_info;
         const 0;
 },
 sat_s3yyy_entry() //  [R1, R2]
         { info_tbl: [(c3ArE,
                       label: sat_s3yyy_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ArE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3ArI; else goto c3ArH;
       c3ArI: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ArH: // global
           _s3yys::P64 = P64[R1 + 7];
           _s3yyt::P64 = P64[R1 + 15];
           _s3yyu::P64 = P64[R1 + 23];
           I64[Hp - 40] = Text.Read.Lex.MkDecimal_con_info;
           P64[Hp - 32] = _s3yyt::P64;
           P64[Hp - 24] = _s3yyu::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 38;
           R2 = Hp - 2;
           R1 = _s3yys::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Asa_srtd" {
     u3Asa_srtd:
         const S3yFW_srt+664;
         const 83;
         const 1;
         const 262144;
 },
 sat_s3yyB_entry() //  [R1, R2]
         { info_tbl: [(c3ArM,
                       label: sat_s3yyB_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ArM: // global
           _s3yyu::P64 = R2;
           _s3yyB::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ArN; else goto c3ArO;
       c3ArO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ArQ; else goto c3ArP;
       c3ArQ: // global
           HpAlloc = 32;
           goto c3ArN;
       c3ArN: // global
           R2 = _s3yyu::P64;
           R1 = _s3yyB::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ArP: // global
           _s3yys::P64 = P64[_s3yyB::P64 + 7];
           _s3yyt::P64 = P64[_s3yyB::P64 + 15];
           I64[Hp - 24] = sat_s3yyy_info;
           P64[Hp - 16] = _s3yys::P64;
           P64[Hp - 8] = _s3yyt::P64;
           P64[Hp] = _s3yyu::P64;
           I64[Sp - 8] = block_c3ArJ_info;
           R4 = Hp - 23;
           R3 = lvl115_r3yd8_closure+1;
           R2 = lexExp_r3yd6_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ArJ() //  [R1]
         { info_tbl: [(c3ArJ,
                       label: block_c3ArJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ArJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ArT; else goto c3ArS;
       c3ArT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ArS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Asb_srtd" {
     u3Asb_srtd:
         const S3yFW_srt+616;
         const 89;
         const 65;
         const 16777216;
 },
 sat_s3yyE_entry() //  [R1, R2]
         { info_tbl: [(c3ArX,
                       label: sat_s3yyE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ArX: // global
           _s3yyt::P64 = R2;
           _s3yyE::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ArY; else goto c3ArZ;
       c3ArZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3As1; else goto c3As0;
       c3As1: // global
           HpAlloc = 24;
           goto c3ArY;
       c3ArY: // global
           R2 = _s3yyt::P64;
           R1 = _s3yyE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3As0: // global
           _s3yys::P64 = P64[_s3yyE::P64 + 7];
           I64[Hp - 16] = sat_s3yyB_info;
           P64[Hp - 8] = _s3yys::P64;
           P64[Hp] = _s3yyt::P64;
           I64[Sp - 8] = block_c3ArU_info;
           R4 = Hp - 15;
           R3 = lvl114_r3yd7_closure+1;
           R2 = lexFrac_r3y9E_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ArU() //  [R1]
         { info_tbl: [(c3ArU,
                       label: block_c3ArU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ArU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3As4; else goto c3As3;
       c3As4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3As3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Asc_srtd" {
     u3Asc_srtd:
         const S3yFW_srt+584;
         const 94;
         const 1041;
         const 805306368;
 },
 $wlexDecNumber_r3yd9_entry() //  [R2]
         { info_tbl: [(c3As5,
                       label: $wlexDecNumber_r3yd9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3As5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3As9; else goto c3As8;
       c3As9: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = $wlexDecNumber_r3yd9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3As8: // global
           I64[Hp - 8] = sat_s3yyE_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.845092609 UTC

[section ""data" . lexDecNumber_r3yda_closure" {
     lexDecNumber_r3yda_closure:
         const lexDecNumber_r3yda_info;
         const 0;
 },
 lexDecNumber_r3yda_entry() //  [R2]
         { info_tbl: [(c3Ask,
                       label: lexDecNumber_r3yda_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ask: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Asl; else goto c3Asm;
       c3Asl: // global
           R2 = R2;
           R1 = lexDecNumber_r3yda_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Asm: // global
           I64[Sp - 8] = block_c3Ash_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexDecNumber_r3yd9_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ash() //  [R1]
         { info_tbl: [(c3Ash,
                       label: block_c3Ash_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ash: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Asp; else goto c3Aso;
       c3Asp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Aso: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.854059129 UTC

[section ""data" . Text.Read.Lex.expect2_closure" {
     Text.Read.Lex.expect2_closure:
         const Text.Read.Lex.expect2_info;
         const 0;
 },
 lvl116_s3yyM_entry() //  [R1]
         { info_tbl: [(c3AsE,
                       label: lvl116_s3yyM_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AsE: // global
           _s3yyM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AsF; else goto c3AsG;
       c3AsG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AsI; else goto c3AsH;
       c3AsI: // global
           HpAlloc = 16;
           goto c3AsF;
       c3AsF: // global
           R1 = _s3yyM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AsH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yyM::P64;
           _s3yyI::P64 = P64[_s3yyM::P64 + 16];
           _s3yyK::P64 = P64[_s3yyM::P64 + 24];
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = _s3yyK::P64;
           R2 = Hp - 7;
           R1 = _s3yyI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yyW_entry() //  [R1, R2]
         { info_tbl: [(c3At3,
                       label: sat_s3yyW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3At3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3At4; else goto c3At5;
       c3At4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3At5: // global
           I64[Sp - 16] = block_c3At0_info;
           _s3yyM::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Atd; else goto c3At1;
       u3Atd: // global
           call _c3At0(R1) args: 0, res: 0, upd: 0;
       c3At1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3At0() //  [R1]
         { info_tbl: [(c3At0,
                       label: block_c3At0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3At0: // global
           if (I64[R1 + 7] == 39) goto c3Atc; else goto c3Atb;
       c3Atc: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Atb: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yz1_entry() //  [R1, R2]
         { info_tbl: [(c3Ato,
                       label: sat_s3yz1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ato: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Atp; else goto c3Atq;
       c3Atp: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Atq: // global
           I64[Sp - 16] = block_c3Atl_info;
           _s3yyM::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Aty; else goto c3Atm;
       u3Aty: // global
           call _c3Atl(R1) args: 0, res: 0, upd: 0;
       c3Atm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Atl() //  [R1]
         { info_tbl: [(c3Atl,
                       label: block_c3Atl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Atl: // global
           if (I64[R1 + 7] == 39) goto c3Atx; else goto c3Atw;
       c3Atx: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Atw: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wk_s3yyJ_entry() //  [R1, R2, R3]
         { info_tbl: [(c3AtD,
                       label: $wk_s3yyJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AtD: // global
           _s3yyL::P64 = R3;
           _s3yyK::P64 = R2;
           _s3yyJ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3AtE; else goto c3AtF;
       c3AtF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3AtH; else goto c3AtG;
       c3AtH: // global
           HpAlloc = 32;
           goto c3AtE;
       c3AtE: // global
           R3 = _s3yyL::P64;
           R2 = _s3yyK::P64;
           R1 = _s3yyJ::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3AtG: // global
           _s3yyI::P64 = P64[_s3yyJ::P64 + 6];
           I64[Hp - 24] = lvl116_s3yyM_info;
           P64[Hp - 8] = _s3yyI::P64;
           P64[Hp] = _s3yyK::P64;
           I64[Sp - 24] = block_c3AsJ_info;
           R1 = _s3yyL::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s3yyK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3AtV; else goto c3AsK;
       u3AtV: // global
           call _c3AsJ(R1) args: 0, res: 0, upd: 0;
       c3AsK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AsJ() //  [R1]
         { info_tbl: [(c3AsJ,
                       label: block_c3AsJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AsJ: // global
           if (R1 & 7 == 1) goto c3AtA; else goto c3AtB;
       c3AtA: // global
           I64[Sp] = block_c3AsO_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3AtU; else goto c3AsP;
       u3AtU: // global
           call _c3AsO(R1) args: 0, res: 0, upd: 0;
       c3AsP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3AtB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3AtT; else goto c3AtS;
       c3AtT: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AtS: // global
           I64[Hp - 24] = sat_s3yz1_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3AsO() //  [R1]
         { info_tbl: [(c3AsO,
                       label: block_c3AsO_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AsO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3AtL; else goto c3AtK;
       c3AtL: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AtK: // global
           if (I64[R1 + 7] == 39) goto c3AtP; else goto c3AtO;
       c3AtP: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3AtO: // global
           I64[Hp - 24] = sat_s3yyW_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k1_s3yz2_entry() //  [R1, R2]
         { info_tbl: [(c3Au4,
                       label: k1_s3yz2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Au4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Au5; else goto c3Au6;
       c3Au5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Au6: // global
           I64[Sp - 16] = block_c3Au1_info;
           _s3yyJ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Aua; else goto c3Au2;
       u3Aua: // global
           call _c3Au1(R1) args: 0, res: 0, upd: 0;
       c3Au2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Au1() //  [R1]
         { info_tbl: [(c3Au1,
                       label: block_c3Au1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Au1: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wk_s3yyJ_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yz7_entry() //  [R1]
         { info_tbl: [(c3Auf,
                       label: lvl116_s3yz7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Auf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Aug; else goto c3Auh;
       c3Aug: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Auh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3yzd_entry() //  [R1]
         { info_tbl: [(c3Auz,
                       label: lvl118_s3yzd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Auz: // global
           _s3yzd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AuA; else goto c3AuB;
       c3AuB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AuD; else goto c3AuC;
       c3AuD: // global
           HpAlloc = 16;
           goto c3AuA;
       c3AuA: // global
           R1 = _s3yzd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AuC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yzd::P64;
           _s3yyI::P64 = P64[_s3yzd::P64 + 16];
           _s3yza::P64 = P64[_s3yzd::P64 + 24];
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = _s3yza::P64;
           R2 = Hp - 7;
           R1 = _s3yyI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzj_entry() //  [R1, R2]
         { info_tbl: [(c3AuM,
                       label: sat_s3yzj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AuM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AuN; else goto c3AuO;
       c3AuN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AuO: // global
           I64[Sp - 16] = block_c3AuJ_info;
           _s3yzd::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yzd::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3AuW; else goto c3AuK;
       u3AuW: // global
           call _c3AuJ(R1) args: 0, res: 0, upd: 0;
       c3AuK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AuJ() //  [R1]
         { info_tbl: [(c3AuJ,
                       label: block_c3AuJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AuJ: // global
           if (I64[R1 + 7] == 39) goto c3AuV; else goto c3AuU;
       c3AuV: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AuU: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3yz8_entry() //  [R1, R2]
         { info_tbl: [(c3AuX,
                       label: lvl117_s3yz8_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AuX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3AuY; else goto c3AuZ;
       c3AuY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AuZ: // global
           I64[Sp - 24] = block_c3Aun_info;
           _s3yyI::P64 = P64[R1 + 7];
           _s3yz7::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yyI::P64;
           P64[Sp - 8] = _s3yz7::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Av9; else goto c3Auo;
       u3Av9: // global
           call _c3Aun(R1) args: 0, res: 0, upd: 0;
       c3Auo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Aun() //  [R1]
         { info_tbl: [(c3Aun,
                       label: block_c3Aun_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aun: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Av2; else goto c3Av1;
       c3Av2: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Av1: // global
           _s3yzc::I64 = I64[R1 + 7];
           if (_s3yzc::I64 == 39) goto c3Av6; else goto u3Av8;
       c3Av6: // global
           Hp = Hp - 64;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Av8: // global
           if (_s3yzc::I64 == 92) goto c3Av7; else goto c3Av5;
       c3Av7: // global
           Hp = Hp - 64;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Av5: // global
           I64[Hp - 56] = lvl118_s3yzd_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_s3yzj_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl119_s3yzr_entry() //  [R1]
         { info_tbl: [(c3Avj,
                       label: lvl119_s3yzr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Avj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Avk; else goto c3Avl;
       c3Avk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Avl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Base.id_closure+1;
           Sp = Sp - 16;
           call body_r3yd5_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3Az8_srtd" {
     u3Az8_srtd:
         const S3yFW_srt+600;
         const 93;
         const 257;
         const 268435456;
 },
 sat_s3yAb_entry() //  [R1]
         { info_tbl: [(c3AvF,
                       label: sat_s3yAb_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AvF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3AvG; else goto c3AvH;
       c3AvG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AvH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3AvC_info;
           R4 = P64[R1 + 16];
           R3 = lexDecNumber_r3yda_closure+1;
           R2 = lexHexOct_r3y9B_closure+1;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3AvC() //  [R1]
         { info_tbl: [(c3AvC,
                       label: block_c3AvC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AvC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AvK; else goto c3AvJ;
       c3AvK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3AvJ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yA2_entry() //  [R1, R2]
         { info_tbl: [(c3Awc,
                       label: sat_s3yA2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Awc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Awg; else goto c3Awf;
       c3Awg: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Awf: // global
           _s3yyI::P64 = P64[R1 + 7];
           _s3yzR::P64 = P64[R1 + 15];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = _s3yzR::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = Hp - 30;
           R2 = Hp - 4;
           R1 = _s3yyI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yA7_entry() //  [R1, R2]
         { info_tbl: [(c3Awh,
                       label: sat_s3yA7_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Awh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Awi; else goto c3Awj;
       c3Awi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Awj: // global
           I64[Sp - 16] = block_c3AvQ_info;
           _s3yyI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3AwI; else goto c3AvR;
       u3AwI: // global
           call _c3AvQ(R1) args: 0, res: 0, upd: 0;
       c3AvR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AvQ() //  [R1]
         { info_tbl: [(c3AvQ,
                       label: block_c3AvQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AvQ: // global
           _s3yzS::I64 = I64[R1 + 7];
           (_s3yzX::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalpha(_s3yzS::I64);
           if (_s3yzX::I64 == 0) goto c3AwD; else goto u3AwE;
       c3AwD: // global
           if (_s3yzS::I64 == 95) goto u3AwF; else goto c3AwB;
       u3AwF: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           goto u3AwH;
       c3AwB: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3AwE: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           goto u3AwH;
       u3AwH: // global
           call _c3Aw3() args: 0, res: 0, upd: 0;
     }
 },
 _c3Aw3() //  []
         { info_tbl: [(c3Aw3,
                       label: block_c3Aw3_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Aw3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Awq; else goto c3Awp;
       c3Awq: // global
           HpAlloc = 24;
           I64[Sp] = block_c3Aw3_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Awp: // global
           I64[Hp - 16] = sat_s3yA2_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c3Awl_info;
           R3 = Hp - 15;
           R2 = isIdfChar_r3y8W_closure+1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Awl() //  [R1]
         { info_tbl: [(c3Awl,
                       label: block_c3Awl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Awl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Awt; else goto c3Aws;
       c3Awt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Aws: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Az9_srtd" {
     u3Az9_srtd:
         const S3yFW_srt+600;
         const 94;
         const 257;
         const 805322752;
 },
 sat_s3yAc_entry() //  [R1]
         { info_tbl: [(c3AwK,
                       label: sat_s3yAc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AwK: // global
           _s3yAc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AwL; else goto c3AwM;
       c3AwM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AwO; else goto c3AwN;
       c3AwO: // global
           HpAlloc = 56;
           goto c3AwL;
       c3AwL: // global
           R1 = _s3yAc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AwN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAc::P64;
           _s3yyI::P64 = P64[_s3yAc::P64 + 16];
           I64[Hp - 48] = sat_s3yAb_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yA7_info;
           P64[Hp - 16] = _s3yyI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzL_entry() //  [R1, R2]
         { info_tbl: [(c3Axb,
                       label: sat_s3yzL_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Axb: // global
           _s3yzG::P64 = R2;
           _s3yzL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Axc; else goto c3Axd;
       c3Axd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Axf; else goto c3Axe;
       c3Axf: // global
           HpAlloc = 24;
           goto c3Axc;
       c3Axc: // global
           R2 = _s3yzG::P64;
           R1 = _s3yzL::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Axe: // global
           _s3yyI::P64 = P64[_s3yzL::P64 + 7];
           _s3yzE::P64 = P64[_s3yzL::P64 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yzE::P64;
           P64[Hp] = _s3yzG::P64;
           I64[Sp - 24] = block_c3Ax5_info;
           R4 = reserved_ops29_r3y9q_closure+2;
           _c3Ax4::P64 = Hp - 14;
           R3 = _c3Ax4::P64;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           P64[Sp - 16] = _c3Ax4::P64;
           P64[Sp - 8] = _s3yyI::P64;
           Sp = Sp - 24;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ax5() //  [R1]
         { info_tbl: [(c3Ax5,
                       label: block_c3Ax5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ax5: // global
           _c3Ax4::P64 = P64[Sp + 8];
           _s3yyI::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c3Ax8; else goto c3Ax9;
       c3Ax8: // global
           Hp = Hp + 16;
           _s3yzI::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3Axr; else goto c3Axk;
       c3Axk: // global
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = _c3Ax4::P64;
           R2 = Hp - 3;
           R1 = _s3yyI::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Ax9: // global
           Hp = Hp + 16;
           _s3yzI::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3Axr; else goto c3Axq;
       c3Axr: // global
           HpAlloc = 16;
           R1 = _s3yzI::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Axq: // global
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = _c3Ax4::P64;
           R2 = Hp - 5;
           R1 = _s3yyI::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Aza_srtd" {
     u3Aza_srtd:
         const S3yFW_srt+128;
         const 154;
         const 1;
         const 0;
         const 33554432;
 },
 sat_s3yzO_entry() //  [R1, R2]
         { info_tbl: [(c3Axw,
                       label: sat_s3yzO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Axw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Axx; else goto c3Axy;
       c3Axx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Axy: // global
           I64[Sp - 24] = block_c3AwU_info;
           _s3yzE::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s3yzE::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.isSymbolChar_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3Azb_srtd" {
     u3Azb_srtd:
         const S3yFW_srt+128;
         const 154;
         const 1;
         const 0;
         const 33554432;
 },
 _c3AwU() //  [R1]
         { info_tbl: [(c3AwU,
                       label: block_c3AwU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AwU: // global
           if (R1 & 7 == 1) goto c3Axt; else goto c3Axu;
       c3Axt: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Axu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3AxG; else goto c3AxF;
       c3AxG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AxF: // global
           I64[Hp - 16] = sat_s3yzL_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3AxB_info;
           R3 = Hp - 15;
           R2 = Text.Read.Lex.isSymbolChar_closure+1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3AxB() //  [R1]
         { info_tbl: [(c3AxB,
                       label: block_c3AxB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AxB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AxJ; else goto c3AxI;
       c3AxJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AxI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Azc_srtd" {
     u3Azc_srtd:
         const S3yFW_srt+128;
         const 154;
         const 576460752303423489;
         const 8;
         const 58720768;
 },
 sat_s3yAd_entry() //  [R1]
         { info_tbl: [(c3AxL,
                       label: sat_s3yAd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AxL: // global
           _s3yAd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AxM; else goto c3AxN;
       c3AxN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AxP; else goto c3AxO;
       c3AxP: // global
           HpAlloc = 56;
           goto c3AxM;
       c3AxM: // global
           R1 = _s3yAd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AxO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAd::P64;
           _s3yyI::P64 = P64[_s3yAd::P64 + 16];
           I64[Hp - 48] = sat_s3yAc_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yzO_info;
           P64[Hp - 16] = _s3yyI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzC_entry() //  [R1, R2]
         { info_tbl: [(c3Ay1,
                       label: sat_s3yzC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ay1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Ay2; else goto c3Ay3;
       c3Ay2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ay3: // global
           I64[Sp - 24] = block_c3AxV_info;
           R4 = Text.Read.Lex.isSymbolChar3_closure;
           R3 = R2;
           _s3yzy::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s3yzy::P64;
           Sp = Sp - 24;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3AxV() //  [R1]
         { info_tbl: [(c3AxV,
                       label: block_c3AxV_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AxV: // global
           if (R1 & 7 == 1) goto c3AxY; else goto c3AxZ;
       c3AxY: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3AxZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Ayd; else goto c3Ayc;
       c3Ayd: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ayc: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = Hp - 30;
           R2 = Hp - 5;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Azd_srtd" {
     u3Azd_srtd:
         const S3yFW_srt+128;
         const 155;
         const 576460752303423489;
         const 8;
         const 125829632;
 },
 sat_s3yAe_entry() //  [R1]
         { info_tbl: [(c3Ayf,
                       label: sat_s3yAe_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ayf: // global
           _s3yAe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ayg; else goto c3Ayh;
       c3Ayh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Ayj; else goto c3Ayi;
       c3Ayj: // global
           HpAlloc = 56;
           goto c3Ayg;
       c3Ayg: // global
           R1 = _s3yAe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ayi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAe::P64;
           _s3yyI::P64 = P64[_s3yAe::P64 + 16];
           I64[Hp - 48] = sat_s3yAd_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yzC_info;
           P64[Hp - 16] = _s3yyI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzw_entry() //  [R1, R2]
         { info_tbl: [(c3Ays,
                       label: sat_s3yzw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ays: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ayt; else goto c3Ayu;
       c3Ayt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ayu: // global
           I64[Sp - 16] = block_c3Ayp_info;
           _s3yzr::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yzr::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3AyC; else goto c3Ayq;
       u3AyC: // global
           call _c3Ayp(R1) args: 0, res: 0, upd: 0;
       c3Ayq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ayp() //  [R1]
         { info_tbl: [(c3Ayp,
                       label: block_c3Ayp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ayp: // global
           if (I64[R1 + 7] == 34) goto c3AyB; else goto c3AyA;
       c3AyB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AyA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Aze_srtd" {
     u3Aze_srtd:
         const S3yFW_srt+128;
         const 155;
         const 576460752303423489;
         const 8;
         const 126091776;
 },
 sat_s3yAf_entry() //  [R1]
         { info_tbl: [(c3AyE,
                       label: sat_s3yAf_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AyE: // global
           _s3yAf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AyF; else goto c3AyG;
       c3AyG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3AyI; else goto c3AyH;
       c3AyI: // global
           HpAlloc = 80;
           goto c3AyF;
       c3AyF: // global
           R1 = _s3yAf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AyH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAf::P64;
           _s3yyI::P64 = P64[_s3yAf::P64 + 16];
           I64[Hp - 72] = lvl119_s3yzr_info;
           P64[Hp - 56] = _s3yyI::P64;
           I64[Hp - 48] = sat_s3yAe_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yzw_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzp_entry() //  [R1, R2]
         { info_tbl: [(c3AyR,
                       label: sat_s3yzp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AyR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AyS; else goto c3AyT;
       c3AyS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AyT: // global
           I64[Sp - 16] = block_c3AyO_info;
           _s3yzk::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yzk::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Az1; else goto c3AyP;
       u3Az1: // global
           call _c3AyO(R1) args: 0, res: 0, upd: 0;
       c3AyP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AyO() //  [R1]
         { info_tbl: [(c3AyO,
                       label: block_c3AyO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AyO: // global
           if (I64[R1 + 7] == 39) goto c3Az0; else goto c3AyZ;
       c3Az0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3AyZ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Azf_srtd" {
     u3Azf_srtd:
         const S3yFW_srt+128;
         const 156;
         const 576460752303423489;
         const 8;
         const 260310528;
 },
 Text.Read.Lex.expect2_entry() //  [R2]
         { info_tbl: [(c3Az3,
                       label: Text.Read.Lex.expect2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Az3: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3Az7; else goto c3Az6;
       c3Az7: // global
           HpAlloc = 152;
           R2 = R2;
           R1 = Text.Read.Lex.expect2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Az6: // global
           I64[Hp - 144] = $wk_s3yyJ_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = k1_s3yz2_info;
           P64[Hp - 120] = Hp - 142;
           I64[Hp - 112] = lvl116_s3yz7_info;
           P64[Hp - 96] = Hp - 127;
           I64[Hp - 88] = lvl117_s3yz8_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = Hp - 112;
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 56] = Hp - 87;
           I64[Hp - 48] = sat_s3yAf_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3yzp_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.870384121 UTC

[section ""data" . Text.Read.Lex.$wlex_closure" {
     Text.Read.Lex.$wlex_closure:
         const Text.Read.Lex.$wlex_info;
         const 0;
 },
 lvl117_s3yAi_entry() //  [R1]
         { info_tbl: [(c3Azs,
                       label: lvl117_s3yAi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Azs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Azt; else goto c3Azu;
       c3Azt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Azu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yAp_entry() //  [R1]
         { info_tbl: [(c3Azz,
                       label: sat_s3yAp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Azz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AzA; else goto c3AzB;
       c3AzA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AzB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yAn_entry() //  [R1, R2]
         { info_tbl: [(c3AzO,
                       label: sat_s3yAn_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AzO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AzP; else goto c3AzQ;
       c3AzP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AzQ: // global
           I64[Sp - 16] = block_c3AzH_info;
           _s3yAi::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yAi::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3AzX; else goto c3AzI;
       u3AzX: // global
           call _c3AzH(R1) args: 0, res: 0, upd: 0;
       c3AzI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AzH() //  [R1]
         { info_tbl: [(c3AzH,
                       label: block_c3AzH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AzH: // global
           if (R1 & 7 == 1) goto c3AzL; else goto c3AzM;
       c3AzL: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AzM: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yAh_entry() //  [R1]
         { info_tbl: [(c3AzZ,
                       label: lvl116_s3yAh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AzZ: // global
           _s3yAh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AA0; else goto c3AA1;
       c3AA1: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3AA3; else goto c3AA2;
       c3AA3: // global
           HpAlloc = 80;
           goto c3AA0;
       c3AA0: // global
           R1 = _s3yAh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AA2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAh::P64;
           _s3yAg::P64 = P64[_s3yAh::P64 + 16];
           I64[Hp - 72] = lvl117_s3yAi_info;
           P64[Hp - 56] = _s3yAg::P64;
           I64[Hp - 48] = sat_s3yAp_info;
           P64[Hp - 32] = _s3yAg::P64;
           I64[Hp - 24] = sat_s3yAn_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 k_s3yAq_entry() //  [R1]
         { info_tbl: [(c3AA9,
                       label: k_s3yAq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AA9: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yAt_entry() //  [R1, R2]
         { info_tbl: [(c3AAh,
                       label: sat_s3yAt_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AAh: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wlex_entry() //  [R2]
         { info_tbl: [(c3AAk,
                       label: Text.Read.Lex.$wlex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AAk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AAo; else goto c3AAn;
       c3AAo: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.Read.Lex.$wlex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AAn: // global
           I64[Hp - 48] = lvl116_s3yAh_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3yAq_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3yAt_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.873796607 UTC

[section ""data" . Text.Read.Lex.lex1_closure" {
     Text.Read.Lex.lex1_closure:
         const Text.Read.Lex.lex1_info;
         const 0;
 },
 Text.Read.Lex.lex1_entry() //  [R2]
         { info_tbl: [(c3AAw,
                       label: Text.Read.Lex.lex1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AAw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3AAx; else goto c3AAy;
       c3AAx: // global
           R2 = R2;
           R1 = Text.Read.Lex.lex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AAy: // global
           I64[Sp - 8] = block_c3AAt_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wlex_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3AAt() //  [R1]
         { info_tbl: [(c3AAt,
                       label: block_c3AAt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AAt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AAB; else goto c3AAA;
       c3AAB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AAA: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.875041495 UTC

[section ""data" . Text.Read.Lex.lex_closure" {
     Text.Read.Lex.lex_closure:
         const Text.Read.Lex.lex_info;
         const 0;
 },
 Text.Read.Lex.lex_entry() //  [R2]
         { info_tbl: [(c3AAG,
                       label: Text.Read.Lex.lex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AAG: // global
           R2 = R2;
           call Text.Read.Lex.lex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.878291638 UTC

[section ""data" . Text.Read.Lex.$wexpect_closure" {
     Text.Read.Lex.$wexpect_closure:
         const Text.Read.Lex.$wexpect_info;
         const 0;
 },
 lvl117_s3yAA_entry() //  [R1]
         { info_tbl: [(c3AAV,
                       label: lvl117_s3yAA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AAV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AAW; else goto c3AAX;
       c3AAW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AAX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3yAB_entry() //  [R1]
         { info_tbl: [(c3AB9,
                       label: lvl118_s3yAB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AB9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3ABa; else goto c3ABb;
       c3ABa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ABb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3AB2_info;
           _s3yAA::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yAA::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3ABi; else goto c3AB3;
       u3ABi: // global
           call _c3AB2(R1) args: 0, res: 0, upd: 0;
       c3AB3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3AB2() //  [R1]
         { info_tbl: [(c3AB2,
                       label: block_c3AB2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AB2: // global
           if (R1 & 7 == 7) goto c3AB7; else goto c3AB6;
       c3AB7: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3AB6: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yAL_entry() //  [R1, R2]
         { info_tbl: [(c3ABy,
                       label: sat_s3yAL_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ABy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ABz; else goto c3ABA;
       c3ABz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ABA: // global
           I64[Sp - 16] = block_c3ABs_info;
           R3 = P64[R1 + 7];
           R2 = R2;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 16;
           call Text.Read.Lex.$fEqLexeme_$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ABs() //  [R1]
         { info_tbl: [(c3ABs,
                       label: block_c3ABs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ABs: // global
           if (R1 & 7 == 1) goto c3ABv; else goto c3ABw;
       c3ABv: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ABw: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yAM_entry() //  [R1]
         { info_tbl: [(c3ABH,
                       label: sat_s3yAM_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ABH: // global
           _s3yAM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ABI; else goto c3ABJ;
       c3ABJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ABL; else goto c3ABK;
       c3ABL: // global
           HpAlloc = 24;
           goto c3ABI;
       c3ABI: // global
           R1 = _s3yAM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ABK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAM::P64;
           _s3yAx::P64 = P64[_s3yAM::P64 + 16];
           _s3yAA::P64 = P64[_s3yAM::P64 + 24];
           I64[Hp - 16] = sat_s3yAL_info;
           P64[Hp - 8] = _s3yAx::P64;
           P64[Hp] = _s3yAA::P64;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yAH_entry() //  [R1, R2]
         { info_tbl: [(c3ABY,
                       label: sat_s3yAH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ABY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ABZ; else goto c3AC0;
       c3ABZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AC0: // global
           I64[Sp - 16] = block_c3ABR_info;
           _s3yAB::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yAB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3AC7; else goto c3ABS;
       u3AC7: // global
           call _c3ABR(R1) args: 0, res: 0, upd: 0;
       c3ABS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ABR() //  [R1]
         { info_tbl: [(c3ABR,
                       label: block_c3ABR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ABR: // global
           if (R1 & 7 == 1) goto c3ABV; else goto c3ABW;
       c3ABV: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3ABW: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yAz_entry() //  [R1]
         { info_tbl: [(c3AC9,
                       label: lvl116_s3yAz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AC9: // global
           _s3yAz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ACa; else goto c3ACb;
       c3ACb: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3ACd; else goto c3ACc;
       c3ACd: // global
           HpAlloc = 120;
           goto c3ACa;
       c3ACa: // global
           R1 = _s3yAz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ACc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAz::P64;
           _s3yAx::P64 = P64[_s3yAz::P64 + 16];
           _s3yAy::P64 = P64[_s3yAz::P64 + 24];
           I64[Hp - 112] = lvl117_s3yAA_info;
           P64[Hp - 96] = _s3yAy::P64;
           I64[Hp - 88] = lvl118_s3yAB_info;
           P64[Hp - 72] = _s3yAx::P64;
           _c3AAR::P64 = Hp - 112;
           P64[Hp - 64] = _c3AAR::P64;
           I64[Hp - 56] = sat_s3yAM_info;
           P64[Hp - 40] = _s3yAx::P64;
           P64[Hp - 32] = _c3AAR::P64;
           I64[Hp - 24] = sat_s3yAH_info;
           P64[Hp - 16] = Hp - 88;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 56;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 k_s3yAN_entry() //  [R1]
         { info_tbl: [(c3ACj,
                       label: k_s3yAN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ACj: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yAQ_entry() //  [R1, R2]
         { info_tbl: [(c3ACr,
                       label: sat_s3yAQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ACr: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wexpect_entry() //  [R2, R3]
         { info_tbl: [(c3ACu,
                       label: Text.Read.Lex.$wexpect_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ACu: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3ACy; else goto c3ACx;
       c3ACy: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wexpect_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ACx: // global
           I64[Hp - 56] = lvl116_s3yAz_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = k_s3yAN_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = sat_s3yAQ_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.883808914 UTC

[section ""data" . Text.Read.Lex.expect1_closure" {
     Text.Read.Lex.expect1_closure:
         const Text.Read.Lex.expect1_info;
         const 0;
 },
 Text.Read.Lex.expect1_entry() //  [R2, R3]
         { info_tbl: [(c3ACG,
                       label: Text.Read.Lex.expect1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ACG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ACH; else goto c3ACI;
       c3ACH: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.expect1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ACI: // global
           I64[Sp - 8] = block_c3ACD_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ACD() //  [R1]
         { info_tbl: [(c3ACD,
                       label: block_c3ACD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ACD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ACL; else goto c3ACK;
       c3ACL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ACK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.885119899 UTC

[section ""data" . Text.Read.Lex.expect_closure" {
     Text.Read.Lex.expect_closure:
         const Text.Read.Lex.expect_info;
         const 0;
 },
 Text.Read.Lex.expect_entry() //  [R2, R3]
         { info_tbl: [(c3ACQ,
                       label: Text.Read.Lex.expect_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ACQ: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.expect1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.887204381 UTC

[section ""data" . Text.Read.Lex.$whsLex_closure" {
     Text.Read.Lex.$whsLex_closure:
         const Text.Read.Lex.$whsLex_info;
         const 0;
 },
 lvl117_s3yAX_entry() //  [R1, R2]
         { info_tbl: [(c3AD6,
                       label: lvl117_s3yAX_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AD6: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yB7_entry() //  [R1]
         { info_tbl: [(c3ADj,
                       label: sat_s3yB7_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ADj: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yB8_entry() //  [R1]
         { info_tbl: [(c3ADm,
                       label: sat_s3yB8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ADm: // global
           _s3yB8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ADn; else goto c3ADo;
       c3ADo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ADq; else goto c3ADp;
       c3ADq: // global
           HpAlloc = 16;
           goto c3ADn;
       c3ADn: // global
           R1 = _s3yB8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ADp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yB8::P64;
           _s3yAZ::P64 = P64[_s3yB8::P64 + 16];
           I64[Hp - 8] = sat_s3yB7_info;
           P64[Hp] = _s3yAZ::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yB4_entry() //  [R1, R2]
         { info_tbl: [(c3ADD,
                       label: sat_s3yB4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ADD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ADE; else goto c3ADF;
       c3ADE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ADF: // global
           I64[Sp - 16] = block_c3ADw_info;
           _s3yAZ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yAZ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3ADM; else goto c3ADx;
       u3ADM: // global
           call _c3ADw(R1) args: 0, res: 0, upd: 0;
       c3ADx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ADw() //  [R1]
         { info_tbl: [(c3ADw,
                       label: block_c3ADw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ADw: // global
           if (R1 & 7 == 1) goto c3ADA; else goto c3ADB;
       c3ADA: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ADB: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yAW_entry() //  [R1]
         { info_tbl: [(c3ADQ,
                       label: lvl116_s3yAW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ADQ: // global
           _s3yAW::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3ADR; else goto c3ADS;
       c3ADS: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3ADU; else goto c3ADT;
       c3ADU: // global
           HpAlloc = 96;
           goto c3ADR;
       c3ADR: // global
           R1 = _s3yAW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ADT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAW::P64;
           _s3yAV::P64 = P64[_s3yAW::P64 + 16];
           I64[Hp - 88] = lvl117_s3yAX_info;
           P64[Hp - 80] = _s3yAV::P64;
           I64[Hp - 72] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 64] = Hp - 87;
           P64[Hp - 56] = Text.ParserCombinators.ReadP.Fail_closure+3;
           I64[Hp - 48] = sat_s3yB8_info;
           _c3AD9::P64 = Hp - 68;
           P64[Hp - 32] = _c3AD9::P64;
           I64[Hp - 24] = sat_s3yB4_info;
           P64[Hp - 16] = _c3AD9::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 24] = block_c3ADO_info;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3ADO() //  [R1]
         { info_tbl: [(c3ADO,
                       label: block_c3ADO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ADO: // global
           R3 = R1;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 k_s3yBa_entry() //  [R1]
         { info_tbl: [(c3AE3,
                       label: k_s3yBa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AE3: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yBd_entry() //  [R1, R2]
         { info_tbl: [(c3AEb,
                       label: sat_s3yBd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AEb: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$whsLex_entry() //  [R2]
         { info_tbl: [(c3AEe,
                       label: Text.Read.Lex.$whsLex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AEe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AEi; else goto c3AEh;
       c3AEi: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.Read.Lex.$whsLex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AEh: // global
           I64[Hp - 48] = lvl116_s3yAW_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3yBa_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3yBd_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.890468297 UTC

[section ""data" . Text.Read.Lex.hsLex1_closure" {
     Text.Read.Lex.hsLex1_closure:
         const Text.Read.Lex.hsLex1_info;
         const 0;
 },
 Text.Read.Lex.hsLex1_entry() //  [R2]
         { info_tbl: [(c3AEq,
                       label: Text.Read.Lex.hsLex1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AEq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3AEr; else goto c3AEs;
       c3AEr: // global
           R2 = R2;
           R1 = Text.Read.Lex.hsLex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AEs: // global
           I64[Sp - 8] = block_c3AEn_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$whsLex_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3AEn() //  [R1]
         { info_tbl: [(c3AEn,
                       label: block_c3AEn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AEn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AEv; else goto c3AEu;
       c3AEv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AEu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.891708356 UTC

[section ""data" . Text.Read.Lex.hsLex_closure" {
     Text.Read.Lex.hsLex_closure:
         const Text.Read.Lex.hsLex_info;
         const 0;
 },
 Text.Read.Lex.hsLex_entry() //  [R2]
         { info_tbl: [(c3AEA,
                       label: Text.Read.Lex.hsLex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AEA: // global
           R2 = R2;
           call Text.Read.Lex.hsLex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.892619923 UTC

[section ""data" . Text.Read.Lex.MkNumber_closure" {
     Text.Read.Lex.MkNumber_closure:
         const Text.Read.Lex.MkNumber_info;
 },
 Text.Read.Lex.MkNumber_entry() //  [R2, R3]
         { info_tbl: [(c3AEI,
                       label: Text.Read.Lex.MkNumber_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AEI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3AEM; else goto c3AEL;
       c3AEM: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.MkNumber_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3AEL: // global
           I64[Hp - 16] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.893932727 UTC

[section ""data" . Text.Read.Lex.MkDecimal_closure" {
     Text.Read.Lex.MkDecimal_closure:
         const Text.Read.Lex.MkDecimal_info;
 },
 Text.Read.Lex.MkDecimal_entry() //  [R2, R3, R4]
         { info_tbl: [(c3AES,
                       label: Text.Read.Lex.MkDecimal_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AES: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3AEW; else goto c3AEV;
       c3AEW: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.MkDecimal_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3AEV: // global
           I64[Hp - 24] = Text.Read.Lex.MkDecimal_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.89500927 UTC

[section ""data" . Text.Read.Lex.Char_closure" {
     Text.Read.Lex.Char_closure:
         const Text.Read.Lex.Char_info;
 },
 Text.Read.Lex.Char_entry() //  [R2]
         { info_tbl: [(c3AF2,
                       label: Text.Read.Lex.Char_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AF2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AF6; else goto c3AF5;
       c3AF6: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Char_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AF5: // global
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.896034909 UTC

[section ""data" . Text.Read.Lex.String_closure" {
     Text.Read.Lex.String_closure:
         const Text.Read.Lex.String_info;
 },
 Text.Read.Lex.String_entry() //  [R2]
         { info_tbl: [(c3AFc,
                       label: Text.Read.Lex.String_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AFc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AFg; else goto c3AFf;
       c3AFg: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.String_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AFf: // global
           I64[Hp - 8] = Text.Read.Lex.String_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.897902687 UTC

[section ""data" . Text.Read.Lex.Punc_closure" {
     Text.Read.Lex.Punc_closure:
         const Text.Read.Lex.Punc_info;
 },
 Text.Read.Lex.Punc_entry() //  [R2]
         { info_tbl: [(c3AFm,
                       label: Text.Read.Lex.Punc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AFm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AFq; else goto c3AFp;
       c3AFq: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Punc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AFp: // global
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.898934752 UTC

[section ""data" . Text.Read.Lex.Ident_closure" {
     Text.Read.Lex.Ident_closure:
         const Text.Read.Lex.Ident_info;
 },
 Text.Read.Lex.Ident_entry() //  [R2]
         { info_tbl: [(c3AFw,
                       label: Text.Read.Lex.Ident_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AFw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AFA; else goto c3AFz;
       c3AFA: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Ident_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AFz: // global
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = R2;
           R1 = Hp - 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.899888544 UTC

[section ""data" . Text.Read.Lex.Symbol_closure" {
     Text.Read.Lex.Symbol_closure:
         const Text.Read.Lex.Symbol_info;
 },
 Text.Read.Lex.Symbol_entry() //  [R2]
         { info_tbl: [(c3AFG,
                       label: Text.Read.Lex.Symbol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AFG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AFK; else goto c3AFJ;
       c3AFK: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Symbol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AFJ: // global
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.900864081 UTC

[section ""data" . Text.Read.Lex.Number_closure" {
     Text.Read.Lex.Number_closure:
         const Text.Read.Lex.Number_info;
 },
 Text.Read.Lex.Number_entry() //  [R2]
         { info_tbl: [(c3AFQ,
                       label: Text.Read.Lex.Number_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AFQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AFU; else goto c3AFT;
       c3AFU: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Number_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AFT: // global
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = R2;
           R1 = Hp - 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.901924154 UTC

[section ""data" . Text.Read.Lex.EOF_closure" {
     Text.Read.Lex.EOF_closure:
         const Text.Read.Lex.EOF_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.902567089 UTC

[Text.Read.Lex.MkNumber_con_entry() //  [R1]
         { info_tbl: [(c3AFV,
                       label: Text.Read.Lex.MkNumber_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,77,107,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AFV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.903343316 UTC

[Text.Read.Lex.MkDecimal_con_entry() //  [R1]
         { info_tbl: [(c3AFW,
                       label: Text.Read.Lex.MkDecimal_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,77,107,68,101,99,105,109,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AFW: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.9040702 UTC

[Text.Read.Lex.Char_con_entry() //  [R1]
         { info_tbl: [(c3AFX,
                       label: Text.Read.Lex.Char_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,67,104,97,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AFX: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.904759295 UTC

[Text.Read.Lex.String_con_entry() //  [R1]
         { info_tbl: [(c3AFY,
                       label: Text.Read.Lex.String_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,83,116,114,105,110,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AFY: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.905556786 UTC

[Text.Read.Lex.Punc_con_entry() //  [R1]
         { info_tbl: [(c3AFZ,
                       label: Text.Read.Lex.Punc_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,80,117,110,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AFZ: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.906288145 UTC

[Text.Read.Lex.Ident_con_entry() //  [R1]
         { info_tbl: [(c3AG0,
                       label: Text.Read.Lex.Ident_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,73,100,101,110,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AG0: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.907037466 UTC

[Text.Read.Lex.Symbol_con_entry() //  [R1]
         { info_tbl: [(c3AG1,
                       label: Text.Read.Lex.Symbol_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AG1: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.907790798 UTC

[Text.Read.Lex.Number_con_entry() //  [R1]
         { info_tbl: [(c3AG2,
                       label: Text.Read.Lex.Number_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 5
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AG2: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.908520139 UTC

[Text.Read.Lex.EOF_con_entry() //  [R1]
         { info_tbl: [(c3AG3,
                       label: Text.Read.Lex.EOF_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 6
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,69,79,70]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AG3: // global
           R1 = R1 + 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.909273108 UTC

[section ""relreadonly" . S3yFW_srt" {
     S3yFW_srt:
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.Show.$fShowInteger_closure;
         const Text.Read.Lex.$fShowLexeme8_closure;
         const Text.Read.Lex.$w$cshowsPrec_closure;
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_closure;
         const Text.Read.Lex.$fShowNumber_$cshow_closure;
         const Text.Read.Lex.$fShowNumber1_closure;
         const Text.Read.Lex.$fShowLexeme4_closure;
         const GHC.Show.$w$cshowsPrec3_closure;
         const GHC.Show.showLitString_closure;
         const Text.Read.Lex.$fShowLexeme6_closure;
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure;
         const Text.Read.Lex.$fShowLexeme3_closure;
         const Text.Read.Lex.$fShowLexeme_$cshow_closure;
         const Text.Read.Lex.$fShowLexeme1_closure;
         const GHC.Unicode.$wgeneralCategory_closure;
         const Text.Read.Lex.isSymbolChar_closure;
         const Text.Read.Lex.isSymbolChar1_closure;
         const Text.Read.Lex.isSymbolChar3_closure;
         const lvl1_r3y8U_closure;
         const $wisIdfChar_r3y8V_closure;
         const isIdfChar_r3y8W_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const combine_r3y9t_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const lvl3_r3y9s_closure;
         const Text.Read.Lex.numberToFixed_go_closure;
         const Text.Read.Lex.numberToFixed2_closure;
         const Text.Read.Lex.valInteger_closure;
         const Text.Read.Lex.$w$sreadIntP_closure;
         const Text.Read.Lex.readIntP1_closure;
         const Text.Read.Lex.$wreadIntP_closure;
         const Text.Read.Lex.readIntP2_closure;
         const sat_s3yjm_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.numberToInteger_closure;
         const sat_s3yjF_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.^_$s^_closure;
         const lvl4_r3y9u_closure;
         const $wfracExp_r3y9v_closure;
         const Text.Read.Lex.numberToFixed_integerTake_closure;
         const Text.Read.Lex.numberToFixed_closure;
         const Text.Read.Lex.$wnumberToRational_closure;
         const Text.Read.Lex.numberToRational_closure;
         const sat_s3yll_closure;
         const sat_s3ylr_closure;
         const Text.Read.Lex.$wnumberToRangedRational_closure;
         const Text.Read.Lex.numberToRangedRational2_closure;
         const Text.Read.Lex.numberToRangedRational4_closure;
         const Text.Read.Lex.numberToRangedRational5_closure;
         const Text.Read.Lex.numberToRangedRational_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const sat_s3ymo_closure;
         const sat_s3ymq_closure;
         const Text.Read.Lex.$w$svalDig_closure;
         const Text.Read.Lex.readDecP2_closure;
         const Text.Read.Lex.readDecP3_closure;
         const Text.Read.Lex.readDecP4_closure;
         const Text.Read.Lex.$wvalDig_closure;
         const Text.Read.Lex.$w$sreadIntP'_closure;
         const Text.Read.Lex.$wreadIntP'_closure;
         const Text.Read.Lex.readDecP6_closure;
         const Text.Read.Lex.readOctP1_closure;
         const Text.Read.Lex.readOctP2_closure;
         const Text.Read.Lex.readDecP1_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.readDecP5_closure;
         const Text.Read.Lex.readHexP1_closure;
         const Text.Read.Lex.readHexP2_closure;
         const $wlexDigits_r3y9x_closure;
         const $wlexHexOct_r3y9A_closure;
         const lexHexOct_r3y9B_closure;
         const $wlexFrac_r3y9D_closure;
         const lexFrac_r3y9E_closure;
         const sat_s3yqt_closure;
         const m4_r3y9J_closure;
         const w1_r3ybW_closure;
         const m2_r3y9G_closure;
         const w_r3ybX_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const lvl46_r3ybY_closure;
         const m6_r3y9M_closure;
         const lvl47_r3ybZ_closure;
         const m8_r3y9P_closure;
         const lvl48_r3yc0_closure;
         const m10_r3y9S_closure;
         const lvl49_r3yc1_closure;
         const m12_r3y9V_closure;
         const lvl50_r3yc2_closure;
         const m14_r3y9Y_closure;
         const lvl51_r3yc3_closure;
         const m16_r3ya1_closure;
         const lvl52_r3yc4_closure;
         const m18_r3ya4_closure;
         const lvl53_r3yc5_closure;
         const m20_r3ya7_closure;
         const lvl54_r3yc6_closure;
         const m22_r3yaa_closure;
         const lvl55_r3yc7_closure;
         const m24_r3yad_closure;
         const lvl56_r3yc8_closure;
         const m26_r3yag_closure;
         const lvl57_r3yc9_closure;
         const m28_r3yaj_closure;
         const lvl58_r3yca_closure;
         const m30_r3yam_closure;
         const lvl59_r3ycb_closure;
         const m32_r3yap_closure;
         const lvl60_r3ycc_closure;
         const m34_r3yas_closure;
         const lvl61_r3ycd_closure;
         const m36_r3yav_closure;
         const lvl62_r3yce_closure;
         const m38_r3yay_closure;
         const lvl63_r3ycf_closure;
         const m40_r3yaB_closure;
         const lvl64_r3ycg_closure;
         const m42_r3yaE_closure;
         const lvl65_r3ych_closure;
         const m44_r3yaH_closure;
         const lvl66_r3yci_closure;
         const m46_r3yaK_closure;
         const lvl67_r3ycj_closure;
         const m48_r3yaN_closure;
         const lvl68_r3yck_closure;
         const m50_r3yaQ_closure;
         const lvl69_r3ycl_closure;
         const m52_r3yaT_closure;
         const lvl70_r3ycm_closure;
         const m54_r3yaW_closure;
         const lvl71_r3ycn_closure;
         const m56_r3yaZ_closure;
         const lvl72_r3yco_closure;
         const m58_r3yb2_closure;
         const lvl73_r3ycp_closure;
         const m60_r3yb5_closure;
         const lvl74_r3ycq_closure;
         const m62_r3yb8_closure;
         const lvl75_r3ycr_closure;
         const m64_r3ybb_closure;
         const lvl76_r3ycs_closure;
         const m66_r3ybe_closure;
         const lvl77_r3yct_closure;
         const m68_r3ybh_closure;
         const lvl78_r3ycu_closure;
         const GHC.Char.$wlvl_closure;
         const lvl7_r3ybj_closure;
         const Text.ParserCombinators.ReadP.choice_closure;
         const lvl111_r3yd1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Text.Read.Lex.lexChar2_closure;
         const Text.Read.Lex.$wconsumeEmpties_closure;
         const Text.Read.Lex.$wlvl_closure;
         const Text.Read.Lex.lexChar3_closure;
         const Text.Read.Lex.lexChar5_closure;
         const Text.Read.Lex.$wlexChar_closure;
         const Text.Read.Lex.lexChar1_closure;
         const lexStrItem_r3yd4_closure;
         const body_r3yd5_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.valInteger_closure;
         const lexExp_r3yd6_closure;
         const $wlexDecNumber_r3yd9_closure;
         const lexDecNumber_r3yda_closure;
         const isIdfChar_r3y8W_closure;
         const reserved_ops29_r3y9q_closure;
         const Text.Read.Lex.isSymbolChar3_closure;
         const Text.Read.Lex.expect2_closure;
         const Text.Read.Lex.$wlex_closure;
         const Text.Read.Lex.lex1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Text.Read.Lex.expect1_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const Text.Read.Lex.$whsLex_closure;
         const Text.Read.Lex.hsLex1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.911736119 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:58:10.91225411 UTC

[section ""cstring" . Text.Read.Lex.$trModule4_bytes" {
     Text.Read.Lex.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.912824262 UTC

[section ""data" . Text.Read.Lex.$trModule3_closure" {
     Text.Read.Lex.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.913491747 UTC

[section ""cstring" . Text.Read.Lex.$trModule2_bytes" {
     Text.Read.Lex.$trModule2_bytes:
         I8[] [84,101,120,116,46,82,101,97,100,46,76,101,120]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.914085435 UTC

[section ""data" . Text.Read.Lex.$trModule1_closure" {
     Text.Read.Lex.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.914704486 UTC

[section ""data" . Text.Read.Lex.$trModule_closure" {
     Text.Read.Lex.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.Read.Lex.$trModule3_closure+1;
         const Text.Read.Lex.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.91533171 UTC

[section ""data" . $krep_r3y8E_closure" {
     $krep_r3y8E_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.915856445 UTC

[section ""data" . $krep1_r3y8F_closure" {
     $krep1_r3y8F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.91645093 UTC

[section ""data" . $krep2_r3y8G_closure" {
     $krep2_r3y8G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.917011993 UTC

[section ""data" . $krep3_r3y8H_closure" {
     $krep3_r3y8H_closure:
         const :_con_info;
         const $krep_r3y8E_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.917678662 UTC

[section ""data" . $krep4_r3y8I_closure" {
     $krep4_r3y8I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_r3y8H_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.918268938 UTC

[section ""data" . $krep5_r3y8J_closure" {
     $krep5_r3y8J_closure:
         const :_con_info;
         const $krep1_r3y8F_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.918867094 UTC

[section ""data" . $krep6_r3y8K_closure" {
     $krep6_r3y8K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep5_r3y8J_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.919476366 UTC

[section ""data" . $krep7_r3y8L_closure" {
     $krep7_r3y8L_closure:
         const :_con_info;
         const $krep6_r3y8K_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.920046237 UTC

[section ""data" . $krep8_r3y8M_closure" {
     $krep8_r3y8M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep7_r3y8L_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.920668037 UTC

[section ""data" . $krep9_r3y8N_closure" {
     $krep9_r3y8N_closure:
         const :_con_info;
         const $krep2_r3y8G_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.921403771 UTC

[section ""data" . $krep10_r3y8O_closure" {
     $krep10_r3y8O_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep9_r3y8N_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.922071056 UTC

[section ""cstring" . Text.Read.Lex.$tcNumber2_bytes" {
     Text.Read.Lex.$tcNumber2_bytes:
         I8[] [78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.923206533 UTC

[section ""data" . Text.Read.Lex.$tcNumber1_closure" {
     Text.Read.Lex.$tcNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tcNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.923808561 UTC

[section ""data" . Text.Read.Lex.$tcNumber_closure" {
     Text.Read.Lex.$tcNumber_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tcNumber1_closure+1;
         const GHC.Types.krep$*_closure;
         const 309030926258572567;
         const 15861928963352354800;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.924384115 UTC

[section ""data" . $krep11_r3y8P_closure" {
     $krep11_r3y8P_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Read.Lex.$tcNumber_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.924977535 UTC

[section ""data" . $krep12_r3y8Q_closure" {
     $krep12_r3y8Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3y8I_closure+1;
         const $krep11_r3y8P_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.925600236 UTC

[section ""data" . $krep13_r3y8R_closure" {
     $krep13_r3y8R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r3y8M_closure+1;
         const $krep12_r3y8Q_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.926163649 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal1_closure" {
     Text.Read.Lex.$tc'MkDecimal1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r3y8K_closure+1;
         const $krep13_r3y8R_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.92677435 UTC

[section ""cstring" . Text.Read.Lex.$tc'MkDecimal3_bytes" {
     Text.Read.Lex.$tc'MkDecimal3_bytes:
         I8[] [39,77,107,68,101,99,105,109,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.927343808 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal2_closure" {
     Text.Read.Lex.$tc'MkDecimal2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'MkDecimal3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.927896571 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal_closure" {
     Text.Read.Lex.$tc'MkDecimal_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'MkDecimal2_closure+1;
         const Text.Read.Lex.$tc'MkDecimal1_closure+4;
         const 3768064156751246198;
         const 12661213050981530502;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.928515509 UTC

[section ""data" . $krep14_r3y8S_closure" {
     $krep14_r3y8S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r3y8K_closure+1;
         const $krep11_r3y8P_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.929081892 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber1_closure" {
     Text.Read.Lex.$tc'MkNumber1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3y8F_closure+1;
         const $krep14_r3y8S_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.929725117 UTC

[section ""cstring" . Text.Read.Lex.$tc'MkNumber3_bytes" {
     Text.Read.Lex.$tc'MkNumber3_bytes:
         I8[] [39,77,107,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.930344769 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber2_closure" {
     Text.Read.Lex.$tc'MkNumber2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'MkNumber3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.930984145 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber_closure" {
     Text.Read.Lex.$tc'MkNumber_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'MkNumber2_closure+1;
         const Text.Read.Lex.$tc'MkNumber1_closure+4;
         const 13396293166029931455;
         const 9655480518931438202;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.931590947 UTC

[section ""cstring" . Text.Read.Lex.$tcLexeme2_bytes" {
     Text.Read.Lex.$tcLexeme2_bytes:
         I8[] [76,101,120,101,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.932191591 UTC

[section ""data" . Text.Read.Lex.$tcLexeme1_closure" {
     Text.Read.Lex.$tcLexeme1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tcLexeme2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.932802626 UTC

[section ""data" . Text.Read.Lex.$tcLexeme_closure" {
     Text.Read.Lex.$tcLexeme_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tcLexeme1_closure+1;
         const GHC.Types.krep$*_closure;
         const 80462090517814070;
         const 11862718491065697853;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.933519856 UTC

[section ""data" . Text.Read.Lex.$tc'EOF1_closure" {
     Text.Read.Lex.$tc'EOF1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Read.Lex.$tcLexeme_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.934588526 UTC

[section ""cstring" . Text.Read.Lex.$tc'EOF3_bytes" {
     Text.Read.Lex.$tc'EOF3_bytes:
         I8[] [39,69,79,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.935112079 UTC

[section ""data" . Text.Read.Lex.$tc'EOF2_closure" {
     Text.Read.Lex.$tc'EOF2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'EOF3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.935682161 UTC

[section ""data" . Text.Read.Lex.$tc'EOF_closure" {
     Text.Read.Lex.$tc'EOF_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'EOF2_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3510729917506789415;
         const 3927434500167946503;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.936317884 UTC

[section ""data" . Text.Read.Lex.$tc'Ident1_closure" {
     Text.Read.Lex.$tc'Ident1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r3y8O_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.936911001 UTC

[section ""cstring" . Text.Read.Lex.$tc'String2_bytes" {
     Text.Read.Lex.$tc'String2_bytes:
         I8[] [39,83,116,114,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.937521351 UTC

[section ""data" . Text.Read.Lex.$tc'String1_closure" {
     Text.Read.Lex.$tc'String1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'String2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.938075473 UTC

[section ""data" . Text.Read.Lex.$tc'String_closure" {
     Text.Read.Lex.$tc'String_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'String1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 4234975262003182519;
         const 13764813366371540099;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.9387113 UTC

[section ""cstring" . Text.Read.Lex.$tc'Punc2_bytes" {
     Text.Read.Lex.$tc'Punc2_bytes:
         I8[] [39,80,117,110,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.939303471 UTC

[section ""data" . Text.Read.Lex.$tc'Punc1_closure" {
     Text.Read.Lex.$tc'Punc1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Punc2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.939986259 UTC

[section ""data" . Text.Read.Lex.$tc'Punc_closure" {
     Text.Read.Lex.$tc'Punc_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Punc1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 12518860736485891069;
         const 4367633479442506190;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.940774706 UTC

[section ""cstring" . Text.Read.Lex.$tc'Ident3_bytes" {
     Text.Read.Lex.$tc'Ident3_bytes:
         I8[] [39,73,100,101,110,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.942195114 UTC

[section ""data" . Text.Read.Lex.$tc'Ident2_closure" {
     Text.Read.Lex.$tc'Ident2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Ident3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.942795932 UTC

[section ""data" . Text.Read.Lex.$tc'Ident_closure" {
     Text.Read.Lex.$tc'Ident_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Ident2_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 17378133866674838049;
         const 11361322998352874125;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.943457832 UTC

[section ""cstring" . Text.Read.Lex.$tc'Symbol2_bytes" {
     Text.Read.Lex.$tc'Symbol2_bytes:
         I8[] [39,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.944044968 UTC

[section ""data" . Text.Read.Lex.$tc'Symbol1_closure" {
     Text.Read.Lex.$tc'Symbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Symbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.944634245 UTC

[section ""data" . Text.Read.Lex.$tc'Symbol_closure" {
     Text.Read.Lex.$tc'Symbol_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Symbol1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 434905475898525586;
         const 17609692850475477756;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.945273177 UTC

[section ""data" . Text.Read.Lex.$tc'Char1_closure" {
     Text.Read.Lex.$tc'Char1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3y8G_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.945805562 UTC

[section ""cstring" . Text.Read.Lex.$tc'Char3_bytes" {
     Text.Read.Lex.$tc'Char3_bytes:
         I8[] [39,67,104,97,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.946485935 UTC

[section ""data" . Text.Read.Lex.$tc'Char2_closure" {
     Text.Read.Lex.$tc'Char2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Char3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.947613546 UTC

[section ""data" . Text.Read.Lex.$tc'Char_closure" {
     Text.Read.Lex.$tc'Char_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Char2_closure+1;
         const Text.Read.Lex.$tc'Char1_closure+4;
         const 4794546904228625478;
         const 396576625805862141;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.94820516 UTC

[section ""data" . Text.Read.Lex.$tc'Number1_closure" {
     Text.Read.Lex.$tc'Number1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r3y8P_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.948713702 UTC

[section ""cstring" . Text.Read.Lex.$tc'Number3_bytes" {
     Text.Read.Lex.$tc'Number3_bytes:
         I8[] [39,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.949347977 UTC

[section ""data" . Text.Read.Lex.$tc'Number2_closure" {
     Text.Read.Lex.$tc'Number2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Number3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.94994637 UTC

[section ""data" . Text.Read.Lex.$tc'Number_closure" {
     Text.Read.Lex.$tc'Number_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Number2_closure+1;
         const Text.Read.Lex.$tc'Number1_closure+4;
         const 3115835552307058655;
         const 14198768466951480548;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.950566032 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme9_bytes" {
     Text.Read.Lex.$fShowLexeme9_bytes:
         I8[] [77,107,68,101,99,105,109,97,108,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.951447944 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme8_closure" {
     Text.Read.Lex.$fShowLexeme8_closure:
         const Text.Read.Lex.$fShowLexeme8_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme8_entry() //  [R1]
         { info_tbl: [(c3AGa,
                       label: Text.Read.Lex.$fShowLexeme8_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AGa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AGb; else goto c3AGc;
       c3AGb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AGc: // global
           (_c3AG7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AG7::I64 == 0) goto c3AG9; else goto c3AG8;
       c3AG9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AG8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AG7::I64;
           R2 = Text.Read.Lex.$fShowLexeme9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.952409877 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme10_closure" {
     Text.Read.Lex.$fShowLexeme10_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.953046868 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme11_bytes" {
     Text.Read.Lex.$fShowLexeme11_bytes:
         I8[] [77,107,78,117,109,98,101,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.958315158 UTC

[section ""data" . Text.Read.Lex.$w$cshowsPrec_closure" {
     Text.Read.Lex.$w$cshowsPrec_closure:
         const Text.Read.Lex.$w$cshowsPrec_info;
         const 0;
 },
 sat_s3ydC_entry() //  [R1]
         { info_tbl: [(c3AHg,
                       label: sat_s3ydC_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AHg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3AHn; else goto c3AHo;
       c3AHn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AHo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3AHd_info;
           _s3ydr::P64 = P64[R1 + 16];
           _s3ydv::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3ydr::P64;
           P64[Sp - 24] = _s3ydv::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3AHv; else goto c3AHe;
       u3AHv: // global
           call _c3AHd(R1) args: 0, res: 0, upd: 0;
       c3AHe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3AHd() //  [R1]
         { info_tbl: [(c3AHd,
                       label: block_c3AHd_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AHd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3AHr; else goto c3AHq;
       c3AHr: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3AHq: // global
           _s3ydx::I64 = I64[R1 + 7];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3AHk_info;
           R4 = Hp - 24;
           R3 = _s3ydx::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3AHk() //  [R1, R2]
         { info_tbl: [(c3AHk,
                       label: block_c3AHk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AHk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3AHu; else goto c3AHt;
       c3AHu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3AHt: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 showl_s3ydr_entry() //  [R1, R2]
         { info_tbl: [(c3AHA,
                       label: showl_s3ydr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AHA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3AHB; else goto c3AHC;
       c3AHB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AHC: // global
           I64[Sp - 24] = block_c3AH3_info;
           _s3ydr::P64 = R1;
           _s3ydq::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3ydq::P64;
           P64[Sp - 8] = _s3ydr::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3AHJ; else goto c3AH4;
       u3AHJ: // global
           call _c3AH3(R1) args: 0, res: 0, upd: 0;
       c3AH4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AH3() //  [R1]
         { info_tbl: [(c3AH3,
                       label: block_c3AH3_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AH3: // global
           if (R1 & 7 == 1) goto c3AHx; else goto c3AHy;
       c3AHx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3AHy: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3AHI; else goto c3AHH;
       c3AHI: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AHH: // global
           _s3ydu::P64 = P64[R1 + 6];
           _s3ydv::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s3ydC_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3ydu::P64;
           P64[Hp - 24] = _s3ydv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ydD_entry() //  [R1]
         { info_tbl: [(c3AHK,
                       label: sat_s3ydD_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AHK: // global
           _s3ydD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AHL; else goto c3AHM;
       c3AHM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3AHO; else goto c3AHN;
       c3AHO: // global
           HpAlloc = 40;
           goto c3AHL;
       c3AHL: // global
           R1 = _s3ydD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AHN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ydD::P64;
           _s3ydi::P64 = P64[_s3ydD::P64 + 16];
           _s3ydn::P64 = P64[_s3ydD::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure;
           P64[Hp - 16] = _s3ydi::P64;
           I64[Hp - 8] = showl_s3ydr_info;
           P64[Hp] = Hp - 30;
           R2 = _s3ydn::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_s3ydr_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ydH_entry() //  [R1]
         { info_tbl: [(c3AHP,
                       label: sat_s3ydH_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AHP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3AHT; else goto c3AHU;
       c3AHT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AHU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3AGO_info;
           _s3ydi::P64 = P64[R1 + 16];
           _s3ydn::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3ydi::P64;
           P64[Sp - 24] = _s3ydn::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3AI1; else goto c3AGP;
       u3AI1: // global
           call _c3AGO(R1) args: 0, res: 0, upd: 0;
       c3AGP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3AGO() //  [R1]
         { info_tbl: [(c3AGO,
                       label: block_c3AGO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AGO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3AHX; else goto c3AHW;
       c3AHX: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3AHW: // global
           _s3ydp::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_s3ydD_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3AHQ_info;
           R4 = Hp - 24;
           R3 = _s3ydp::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3AHQ() //  [R1, R2]
         { info_tbl: [(c3AHQ,
                       label: block_c3AHQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AHQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3AI0; else goto c3AHZ;
       c3AI0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3AHZ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ydI_entry() //  [R1]
         { info_tbl: [(c3AI6,
                       label: sat_s3ydI_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AI6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3AI7; else goto c3AI8;
       c3AI7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AI8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3AGE_info;
           _s3ydi::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3ydi::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3AIf; else goto c3AGF;
       u3AIf: // global
           call _c3AGE(R1) args: 0, res: 0, upd: 0;
       c3AGF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3AGE() //  [R1]
         { info_tbl: [(c3AGE,
                       label: block_c3AGE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AGE: // global
           _s3ydi::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3AI3; else goto c3AI4;
       c3AI3: // global
           R3 = _s3ydi::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       c3AI4: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3AIe; else goto c3AId;
       c3AIe: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3AId: // global
           _s3ydm::P64 = P64[R1 + 6];
           _s3ydn::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s3ydH_info;
           P64[Hp - 40] = _s3ydi::P64;
           P64[Hp - 32] = _s3ydm::P64;
           P64[Hp - 24] = _s3ydn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ydN_entry() //  [R1]
         { info_tbl: [(c3AIg,
                       label: sat_s3ydN_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AIg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3AIl; else goto c3AIm;
       c3AIl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AIm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3AGv_info;
           _s3ydg::P64 = P64[R1 + 24];
           _s3ydi::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s3ydg::P64;
           P64[Sp - 24] = _s3ydi::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3AIt; else goto c3AGw;
       u3AIt: // global
           call _c3AGv(R1) args: 0, res: 0, upd: 0;
       c3AGw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3AGv() //  [R1]
         { info_tbl: [(c3AGv,
                       label: block_c3AGv_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AGv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AIp; else goto c3AIo;
       c3AIp: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3AIo: // global
           _s3ydk::I64 = I64[R1 + 7];
           I64[Hp - 48] = sat_s3ydI_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp + 16] = block_c3AIi_info;
           R4 = Hp - 14;
           R3 = _s3ydk::I64;
           R2 = 11;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3AIi() //  [R1, R2]
         { info_tbl: [(c3AIi,
                       label: block_c3AIi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AIi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3AIs; else goto c3AIr;
       c3AIs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3AIr: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 p_s3ydh_entry() //  [R1, R2]
         { info_tbl: [(c3AIu,
                       label: p_s3ydh_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AIu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3AIy; else goto c3AIx;
       c3AIy: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AIx: // global
           _s3ydf::P64 = P64[R1 + 7];
           _s3ydg::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s3ydN_info;
           P64[Hp - 16] = _s3ydf::P64;
           P64[Hp - 8] = _s3ydg::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = Text.Read.Lex.$fShowLexeme11_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ydR_entry() //  [R1]
         { info_tbl: [(c3AIN,
                       label: sat_s3ydR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AIN: // global
           _s3ydR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AIO; else goto c3AIP;
       c3AIP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3AIR; else goto c3AIQ;
       c3AIR: // global
           HpAlloc = 24;
           goto c3AIO;
       c3AIO: // global
           R1 = _s3ydR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AIQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ydR::P64;
           _s3ydh::P64 = P64[_s3ydR::P64 + 16];
           _s3ydP::P64 = P64[_s3ydR::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3ydP::P64;
           R2 = Hp - 14;
           R1 = _s3ydh::P64;
           Sp = Sp - 16;
           call p_s3ydh_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ydS_entry() //  [R1, R2]
         { info_tbl: [(c3AIT,
                       label: sat_s3ydS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AIT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AIX; else goto c3AIW;
       c3AIX: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AIW: // global
           _s3ydh::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3ydR_info;
           P64[Hp - 32] = _s3ydh::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 f_s3ydW_entry() //  [R1]
         { info_tbl: [(c3AJ4,
                       label: f_s3ydW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AJ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AJ5; else goto c3AJ6;
       c3AJ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AJ6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = Text.Read.Lex.$fShowLexeme10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 g_s3ydX_entry() //  [R1]
         { info_tbl: [(c3AJb,
                       label: g_s3ydX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AJb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AJc; else goto c3AJd;
       c3AJc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AJd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = Text.Read.Lex.$fShowLexeme10_closure+1;
           R2 = GHC.Show.$fShowInteger_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ye2_entry() //  [R1]
         { info_tbl: [(c3AJp,
                       label: sat_s3ye2_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AJp: // global
           _s3ye2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AJq; else goto c3AJr;
       c3AJr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AJt; else goto c3AJs;
       c3AJt: // global
           HpAlloc = 56;
           goto c3AJq;
       c3AJq: // global
           R1 = _s3ye2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AJs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ye2::P64;
           _s3ydW::P64 = P64[_s3ye2::P64 + 16];
           _s3ydX::P64 = P64[_s3ye2::P64 + 24];
           _s3ydZ::P64 = P64[_s3ye2::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ydX::P64;
           P64[Hp - 24] = _s3ydZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _s3ydW::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 g1_s3ydY_entry() //  [R1, R2]
         { info_tbl: [(c3AJv,
                       label: g1_s3ydY_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AJv: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3AJz; else goto c3AJy;
       c3AJz: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AJy: // global
           _s3ydT::P64 = P64[R1 + 7];
           _s3ydW::P64 = P64[R1 + 15];
           _s3ydX::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_s3ye2_info;
           P64[Hp - 40] = _s3ydW::P64;
           P64[Hp - 32] = _s3ydX::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 56;
           R4 = Hp - 14;
           R3 = _s3ydT::P64;
           R2 = GHC.Show.$fShowInt1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ye6_entry() //  [R1]
         { info_tbl: [(c3AJM,
                       label: sat_s3ye6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AJM: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_s3ydY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ye7_entry() //  [R1, R2]
         { info_tbl: [(c3AJP,
                       label: sat_s3ye7_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AJP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3AJT; else goto c3AJS;
       c3AJT: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AJS: // global
           _s3ydY::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3ye6_info;
           P64[Hp - 8] = _s3ydY::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme8_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yea_entry() //  [R1]
         { info_tbl: [(c3AK9,
                       label: sat_s3yea_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AK9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3AKd; else goto c3AKc;
       c3AKd: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AKc: // global
           _s3ydY::P64 = P64[R1 + 16];
           _s3ye8::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3ye8::P64;
           R2 = Hp - 14;
           R1 = _s3ydY::P64;
           call g1_s3ydY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yeb_entry() //  [R1]
         { info_tbl: [(c3AKe,
                       label: sat_s3yeb_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AKe: // global
           _s3yeb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AKf; else goto c3AKg;
       c3AKg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3AKi; else goto c3AKh;
       c3AKi: // global
           HpAlloc = 32;
           goto c3AKf;
       c3AKf: // global
           R1 = _s3yeb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AKh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeb::P64;
           _s3ydY::P64 = P64[_s3yeb::P64 + 16];
           _s3ye8::P64 = P64[_s3yeb::P64 + 24];
           I64[Hp - 24] = sat_s3yea_info;
           P64[Hp - 8] = _s3ydY::P64;
           P64[Hp] = _s3ye8::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme8_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yec_entry() //  [R1, R2]
         { info_tbl: [(c3AKk,
                       label: sat_s3yec_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AKk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AKo; else goto c3AKn;
       c3AKo: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AKn: // global
           _s3ydY::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeb_info;
           P64[Hp - 32] = _s3ydY::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c3AKt,
                       label: Text.Read.Lex.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AKt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AKu; else goto c3AKv;
       c3AKu: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3AKv: // global
           I64[Sp - 16] = block_c3AGh_info;
           R1 = R3;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3AKI; else goto c3AGi;
       u3AKI: // global
           call _c3AGh(R1) args: 0, res: 0, upd: 0;
       c3AGi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AGh() //  [R1]
         { info_tbl: [(c3AGh,
                       label: block_c3AGh_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AGh: // global
           _s3ydc::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c3AKq; else goto c3AKr;
       c3AKq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3AKy; else goto c3AKx;
       c3AKy: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AKx: // global
           _s3ydf::P64 = P64[R1 + 7];
           _s3ydg::P64 = P64[R1 + 15];
           I64[Hp - 32] = p_s3ydh_info;
           P64[Hp - 24] = _s3ydf::P64;
           P64[Hp - 16] = _s3ydg::P64;
           _c3AGm::P64 = Hp - 31;
           if (%MO_S_Lt_W64(_s3ydc::I64, 11)) goto c3AKA; else goto c3AKB;
       c3AKA: // global
           Hp = Hp - 16;
           R1 = _c3AGm::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3AKB: // global
           I64[Hp - 8] = sat_s3ydS_info;
           P64[Hp] = _c3AGm::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3AKr: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3AKE; else goto c3AKD;
       c3AKE: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AKD: // global
           _s3ydT::P64 = P64[R1 + 6];
           _s3ydU::P64 = P64[R1 + 14];
           _s3ydV::P64 = P64[R1 + 22];
           I64[Hp - 88] = f_s3ydW_info;
           P64[Hp - 72] = _s3ydU::P64;
           I64[Hp - 64] = g_s3ydX_info;
           P64[Hp - 48] = _s3ydV::P64;
           I64[Hp - 40] = g1_s3ydY_info;
           P64[Hp - 32] = _s3ydT::P64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 64;
           _c3AJe::P64 = Hp - 39;
           if (%MO_S_Lt_W64(_s3ydc::I64, 11)) goto c3AKG; else goto c3AKH;
       c3AKG: // global
           I64[Hp - 8] = sat_s3ye7_info;
           P64[Hp] = _c3AJe::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3AKH: // global
           I64[Hp - 8] = sat_s3yec_info;
           P64[Hp] = _c3AJe::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.970307102 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshowsPrec_closure" {
     Text.Read.Lex.$fShowNumber_$cshowsPrec_closure:
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c3AKQ,
                       label: Text.Read.Lex.$fShowNumber_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AKQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AKR; else goto c3AKS;
       c3AKR: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fShowNumber_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3AKS: // global
           I64[Sp - 16] = block_c3AKN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3AKW; else goto c3AKO;
       u3AKW: // global
           call _c3AKN(R1) args: 0, res: 0, upd: 0;
       c3AKO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AKN() //  [R1]
         { info_tbl: [(c3AKN,
                       label: block_c3AKN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AKN: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.971452464 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme2_closure" {
     Text.Read.Lex.$fShowLexeme2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.972148629 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshow_closure" {
     Text.Read.Lex.$fShowNumber_$cshow_closure:
         const Text.Read.Lex.$fShowNumber_$cshow_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshow_entry() //  [R2]
         { info_tbl: [(c3AL1,
                       label: Text.Read.Lex.$fShowNumber_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AL1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AL2; else goto c3AL3;
       c3AL2: // global
           R2 = R2;
           R1 = Text.Read.Lex.$fShowNumber_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AL3: // global
           R3 = R2;
           R2 = 0;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.973133142 UTC

[section ""data" . Text.Read.Lex.$fShowNumber1_closure" {
     Text.Read.Lex.$fShowNumber1_closure:
         const Text.Read.Lex.$fShowNumber1_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber1_entry() //  [R2]
         { info_tbl: [(c3AL8,
                       label: Text.Read.Lex.$fShowNumber1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AL8: // global
           R3 = R2;
           R2 = 0;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.974586648 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshowList_closure" {
     Text.Read.Lex.$fShowNumber_$cshowList_closure:
         const Text.Read.Lex.$fShowNumber_$cshowList_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c3ALf,
                       label: Text.Read.Lex.$fShowNumber_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ALf: // global
           R4 = R3;
           R3 = R2;
           R2 = Text.Read.Lex.$fShowNumber1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.975806289 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_closure" {
     Text.Read.Lex.$fShowNumber_closure:
         const GHC.Show.C:Show_con_info;
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_closure+2;
         const Text.Read.Lex.$fShowNumber_$cshow_closure+1;
         const Text.Read.Lex.$fShowNumber_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.977729367 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme7_bytes" {
     Text.Read.Lex.$fShowLexeme7_bytes:
         I8[] [78,117,109,98,101,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.978988531 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme6_closure" {
     Text.Read.Lex.$fShowLexeme6_closure:
         const Text.Read.Lex.$fShowLexeme6_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme6_entry() //  [R1]
         { info_tbl: [(c3ALo,
                       label: Text.Read.Lex.$fShowLexeme6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ALo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ALp; else goto c3ALq;
       c3ALp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ALq: // global
           (_c3ALl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ALl::I64 == 0) goto c3ALn; else goto c3ALm;
       c3ALn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ALm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ALl::I64;
           R2 = Text.Read.Lex.$fShowLexeme7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.980648425 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme5_bytes" {
     Text.Read.Lex.$fShowLexeme5_bytes:
         I8[] [69,79,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.981789211 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme4_closure" {
     Text.Read.Lex.$fShowLexeme4_closure:
         const Text.Read.Lex.$fShowLexeme4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme4_entry() //  [R1]
         { info_tbl: [(c3ALx,
                       label: Text.Read.Lex.$fShowLexeme4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ALx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ALy; else goto c3ALz;
       c3ALy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ALz: // global
           (_c3ALu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ALu::I64 == 0) goto c3ALw; else goto c3ALv;
       c3ALw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ALv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ALu::I64;
           R2 = Text.Read.Lex.$fShowLexeme5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.983523306 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme3_closure" {
     Text.Read.Lex.$fShowLexeme3_closure:
         const Text.Read.Lex.$fShowLexeme3_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme3_entry() //  [R2]
         { info_tbl: [(c3ALE,
                       label: Text.Read.Lex.$fShowLexeme3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ALE: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.984723369 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme16_bytes" {
     Text.Read.Lex.$fShowLexeme16_bytes:
         I8[] [67,104,97,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.985536892 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme15_bytes" {
     Text.Read.Lex.$fShowLexeme15_bytes:
         I8[] [83,116,114,105,110,103,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.986339397 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme14_bytes" {
     Text.Read.Lex.$fShowLexeme14_bytes:
         I8[] [80,117,110,99,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.987175369 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme13_bytes" {
     Text.Read.Lex.$fShowLexeme13_bytes:
         I8[] [73,100,101,110,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.988022547 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme12_bytes" {
     Text.Read.Lex.$fShowLexeme12_bytes:
         I8[] [83,121,109,98,111,108,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:10.999163406 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure" {
     Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure:
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_info;
         const 0;
 },
 sat_s3yev_entry() //  [R1]
         { info_tbl: [(c3AMa,
                       label: sat_s3yev_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AMa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3AMb; else goto c3AMc;
       c3AMb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AMc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3AM7_info;
           _s3yes::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yes::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3AMg; else goto c3AM8;
       u3AMg: // global
           call _c3AM7(R1) args: 0, res: 0, upd: 0;
       c3AM8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3AM7() //  [R1]
         { info_tbl: [(c3AM7,
                       label: block_c3AM7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AM7: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yew_entry() //  [R1, R2]
         { info_tbl: [(c3AMh,
                       label: sat_s3yew_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AMh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3AMl; else goto c3AMk;
       c3AMl: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AMk: // global
           _s3yeo::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3yev_info;
           P64[Hp - 8] = _s3yeo::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yeB_entry() //  [R1]
         { info_tbl: [(c3AMD,
                       label: sat_s3yeB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AMD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3AMH; else goto c3AMI;
       c3AMH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AMI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3AMA_info;
           _s3yex::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yex::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3AMM; else goto c3AMB;
       u3AMM: // global
           call _c3AMA(R1) args: 0, res: 0, upd: 0;
       c3AMB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3AMA() //  [R1]
         { info_tbl: [(c3AMA,
                       label: block_c3AMA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AMA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3AML; else goto c3AMK;
       c3AML: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3AMK: // global
           _s3yez::I64 = I64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 14;
           R2 = _s3yez::I64;
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeC_entry() //  [R1]
         { info_tbl: [(c3AMN,
                       label: sat_s3yeC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AMN: // global
           _s3yeC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AMO; else goto c3AMP;
       c3AMP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3AMR; else goto c3AMQ;
       c3AMR: // global
           HpAlloc = 32;
           goto c3AMO;
       c3AMO: // global
           R1 = _s3yeC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AMQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeC::P64;
           _s3yeo::P64 = P64[_s3yeC::P64 + 16];
           _s3yex::P64 = P64[_s3yeC::P64 + 24];
           I64[Hp - 24] = sat_s3yeB_info;
           P64[Hp - 8] = _s3yeo::P64;
           P64[Hp] = _s3yex::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeD_entry() //  [R1, R2]
         { info_tbl: [(c3AMT,
                       label: sat_s3yeD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AMT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AMX; else goto c3AMW;
       c3AMX: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AMW: // global
           _s3yeo::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeC_info;
           P64[Hp - 32] = _s3yeo::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yeK_entry() //  [R1]
         { info_tbl: [(c3ANi,
                       label: sat_s3yeK_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ANi: // global
           _s3yeK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ANj; else goto c3ANk;
       c3ANk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ANm; else goto c3ANl;
       c3ANm: // global
           HpAlloc = 24;
           goto c3ANj;
       c3ANj: // global
           R1 = _s3yeK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ANl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeK::P64;
           _s3yeE::P64 = P64[_s3yeK::P64 + 16];
           _s3yeI::P64 = P64[_s3yeK::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yeI::P64;
           R3 = Hp - 14;
           R2 = _s3yeE::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeM_entry() //  [R1, R2]
         { info_tbl: [(c3ANo,
                       label: sat_s3yeM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ANo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ANs; else goto c3ANr;
       c3ANs: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ANr: // global
           _s3yeE::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeK_info;
           P64[Hp - 32] = _s3yeE::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yeQ_entry() //  [R1]
         { info_tbl: [(c3ANJ,
                       label: sat_s3yeQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ANJ: // global
           _s3yeQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ANK; else goto c3ANL;
       c3ANL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3ANN; else goto c3ANM;
       c3ANN: // global
           HpAlloc = 48;
           goto c3ANK;
       c3ANK: // global
           R1 = _s3yeQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ANM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeQ::P64;
           _s3yeE::P64 = P64[_s3yeQ::P64 + 16];
           _s3yeN::P64 = P64[_s3yeQ::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yeN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yeE::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeS_entry() //  [R1]
         { info_tbl: [(c3ANP,
                       label: sat_s3yeS_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ANP: // global
           _s3yeS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ANQ; else goto c3ANR;
       c3ANR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ANT; else goto c3ANS;
       c3ANT: // global
           HpAlloc = 56;
           goto c3ANQ;
       c3ANQ: // global
           R1 = _s3yeS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ANS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeS::P64;
           _s3yeE::P64 = P64[_s3yeS::P64 + 16];
           _s3yeN::P64 = P64[_s3yeS::P64 + 24];
           I64[Hp - 48] = sat_s3yeQ_info;
           P64[Hp - 32] = _s3yeE::P64;
           P64[Hp - 24] = _s3yeN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeT_entry() //  [R1, R2]
         { info_tbl: [(c3ANV,
                       label: sat_s3yeT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ANV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ANZ; else goto c3ANY;
       c3ANZ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ANY: // global
           _s3yeE::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeS_info;
           P64[Hp - 32] = _s3yeE::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yf0_entry() //  [R1]
         { info_tbl: [(c3AOk,
                       label: sat_s3yf0_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AOk: // global
           _s3yf0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AOl; else goto c3AOm;
       c3AOm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3AOo; else goto c3AOn;
       c3AOo: // global
           HpAlloc = 24;
           goto c3AOl;
       c3AOl: // global
           R1 = _s3yf0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AOn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yf0::P64;
           _s3yeU::P64 = P64[_s3yf0::P64 + 16];
           _s3yeY::P64 = P64[_s3yf0::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yeY::P64;
           R3 = Hp - 14;
           R2 = _s3yeU::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yf2_entry() //  [R1, R2]
         { info_tbl: [(c3AOq,
                       label: sat_s3yf2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AOq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AOu; else goto c3AOt;
       c3AOu: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AOt: // global
           _s3yeU::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yf0_info;
           P64[Hp - 32] = _s3yeU::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yf6_entry() //  [R1]
         { info_tbl: [(c3AOL,
                       label: sat_s3yf6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AOL: // global
           _s3yf6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AOM; else goto c3AON;
       c3AON: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3AOP; else goto c3AOO;
       c3AOP: // global
           HpAlloc = 48;
           goto c3AOM;
       c3AOM: // global
           R1 = _s3yf6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AOO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yf6::P64;
           _s3yeU::P64 = P64[_s3yf6::P64 + 16];
           _s3yf3::P64 = P64[_s3yf6::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yf3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yeU::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yf8_entry() //  [R1]
         { info_tbl: [(c3AOR,
                       label: sat_s3yf8_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AOR: // global
           _s3yf8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AOS; else goto c3AOT;
       c3AOT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AOV; else goto c3AOU;
       c3AOV: // global
           HpAlloc = 56;
           goto c3AOS;
       c3AOS: // global
           R1 = _s3yf8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AOU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yf8::P64;
           _s3yeU::P64 = P64[_s3yf8::P64 + 16];
           _s3yf3::P64 = P64[_s3yf8::P64 + 24];
           I64[Hp - 48] = sat_s3yf6_info;
           P64[Hp - 32] = _s3yeU::P64;
           P64[Hp - 24] = _s3yf3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yf9_entry() //  [R1, R2]
         { info_tbl: [(c3AOX,
                       label: sat_s3yf9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AOX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AP1; else goto c3AP0;
       c3AP1: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AP0: // global
           _s3yeU::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yf8_info;
           P64[Hp - 32] = _s3yeU::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfg_entry() //  [R1]
         { info_tbl: [(c3APm,
                       label: sat_s3yfg_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3APm: // global
           _s3yfg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3APn; else goto c3APo;
       c3APo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3APq; else goto c3APp;
       c3APq: // global
           HpAlloc = 24;
           goto c3APn;
       c3APn: // global
           R1 = _s3yfg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3APp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfg::P64;
           _s3yfa::P64 = P64[_s3yfg::P64 + 16];
           _s3yfe::P64 = P64[_s3yfg::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yfe::P64;
           R3 = Hp - 14;
           R2 = _s3yfa::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfi_entry() //  [R1, R2]
         { info_tbl: [(c3APs,
                       label: sat_s3yfi_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3APs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3APw; else goto c3APv;
       c3APw: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3APv: // global
           _s3yfa::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfg_info;
           P64[Hp - 32] = _s3yfa::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfm_entry() //  [R1]
         { info_tbl: [(c3APN,
                       label: sat_s3yfm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3APN: // global
           _s3yfm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3APO; else goto c3APP;
       c3APP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3APR; else goto c3APQ;
       c3APR: // global
           HpAlloc = 48;
           goto c3APO;
       c3APO: // global
           R1 = _s3yfm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3APQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfm::P64;
           _s3yfa::P64 = P64[_s3yfm::P64 + 16];
           _s3yfj::P64 = P64[_s3yfm::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yfj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yfa::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfo_entry() //  [R1]
         { info_tbl: [(c3APT,
                       label: sat_s3yfo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3APT: // global
           _s3yfo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3APU; else goto c3APV;
       c3APV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3APX; else goto c3APW;
       c3APX: // global
           HpAlloc = 56;
           goto c3APU;
       c3APU: // global
           R1 = _s3yfo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3APW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfo::P64;
           _s3yfa::P64 = P64[_s3yfo::P64 + 16];
           _s3yfj::P64 = P64[_s3yfo::P64 + 24];
           I64[Hp - 48] = sat_s3yfm_info;
           P64[Hp - 32] = _s3yfa::P64;
           P64[Hp - 24] = _s3yfj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfp_entry() //  [R1, R2]
         { info_tbl: [(c3APZ,
                       label: sat_s3yfp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3APZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AQ3; else goto c3AQ2;
       c3AQ3: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AQ2: // global
           _s3yfa::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfo_info;
           P64[Hp - 32] = _s3yfa::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfw_entry() //  [R1]
         { info_tbl: [(c3AQo,
                       label: sat_s3yfw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AQo: // global
           _s3yfw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AQp; else goto c3AQq;
       c3AQq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3AQs; else goto c3AQr;
       c3AQs: // global
           HpAlloc = 24;
           goto c3AQp;
       c3AQp: // global
           R1 = _s3yfw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AQr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfw::P64;
           _s3yfq::P64 = P64[_s3yfw::P64 + 16];
           _s3yfu::P64 = P64[_s3yfw::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yfu::P64;
           R3 = Hp - 14;
           R2 = _s3yfq::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfy_entry() //  [R1, R2]
         { info_tbl: [(c3AQu,
                       label: sat_s3yfy_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AQu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AQy; else goto c3AQx;
       c3AQy: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AQx: // global
           _s3yfq::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfw_info;
           P64[Hp - 32] = _s3yfq::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfC_entry() //  [R1]
         { info_tbl: [(c3AQP,
                       label: sat_s3yfC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AQP: // global
           _s3yfC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AQQ; else goto c3AQR;
       c3AQR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3AQT; else goto c3AQS;
       c3AQT: // global
           HpAlloc = 48;
           goto c3AQQ;
       c3AQQ: // global
           R1 = _s3yfC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AQS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfC::P64;
           _s3yfq::P64 = P64[_s3yfC::P64 + 16];
           _s3yfz::P64 = P64[_s3yfC::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yfz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yfq::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfE_entry() //  [R1]
         { info_tbl: [(c3AQV,
                       label: sat_s3yfE_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AQV: // global
           _s3yfE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3AQW; else goto c3AQX;
       c3AQX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AQZ; else goto c3AQY;
       c3AQZ: // global
           HpAlloc = 56;
           goto c3AQW;
       c3AQW: // global
           R1 = _s3yfE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AQY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfE::P64;
           _s3yfq::P64 = P64[_s3yfE::P64 + 16];
           _s3yfz::P64 = P64[_s3yfE::P64 + 24];
           I64[Hp - 48] = sat_s3yfC_info;
           P64[Hp - 32] = _s3yfq::P64;
           P64[Hp - 24] = _s3yfz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfF_entry() //  [R1, R2]
         { info_tbl: [(c3AR1,
                       label: sat_s3yfF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AR1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AR5; else goto c3AR4;
       c3AR5: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AR4: // global
           _s3yfq::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfE_info;
           P64[Hp - 32] = _s3yfq::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s3yfJ_entry() //  [R1]
         { info_tbl: [(c3ARh,
                       label: g_s3yfJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ARh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ARi; else goto c3ARj;
       c3ARi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ARj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfM_entry() //  [R1]
         { info_tbl: [(c3ARw,
                       label: sat_s3yfM_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ARw: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfN_entry() //  [R1, R2]
         { info_tbl: [(c3ARz,
                       label: sat_s3yfN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ARz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ARD; else goto c3ARC;
       c3ARD: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ARC: // global
           _s3yfJ::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3yfM_info;
           P64[Hp - 8] = _s3yfJ::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfQ_entry() //  [R1]
         { info_tbl: [(c3ART,
                       label: sat_s3yfQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ART: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ARX; else goto c3ARW;
       c3ARX: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ARW: // global
           _s3yfJ::P64 = P64[R1 + 16];
           _s3yfO::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3yfO::P64;
           R2 = Hp - 14;
           R1 = _s3yfJ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfR_entry() //  [R1]
         { info_tbl: [(c3ARY,
                       label: sat_s3yfR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ARY: // global
           _s3yfR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ARZ; else goto c3AS0;
       c3AS0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3AS2; else goto c3AS1;
       c3AS2: // global
           HpAlloc = 32;
           goto c3ARZ;
       c3ARZ: // global
           R1 = _s3yfR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AS1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfR::P64;
           _s3yfJ::P64 = P64[_s3yfR::P64 + 16];
           _s3yfO::P64 = P64[_s3yfR::P64 + 24];
           I64[Hp - 24] = sat_s3yfQ_info;
           P64[Hp - 8] = _s3yfJ::P64;
           P64[Hp] = _s3yfO::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfS_entry() //  [R1, R2]
         { info_tbl: [(c3AS4,
                       label: sat_s3yfS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AS4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3AS8; else goto c3AS7;
       c3AS8: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AS7: // global
           _s3yfJ::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfR_info;
           P64[Hp - 32] = _s3yfJ::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c3ASi,
                       label: Text.Read.Lex.$fShowLexeme_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ASi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ASj; else goto c3ASk;
       c3ASj: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ASk: // global
           I64[Sp - 16] = block_c3ALL_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3ATa; else goto c3ALM;
       u3ATa: // global
           call _c3ALL(R1) args: 0, res: 0, upd: 0;
       c3ALM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ALL() //  [R1]
         { info_tbl: [(c3ALL,
                       label: block_c3ALL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ALL: // global
           _s3yel::P64 = P64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3ASa;
               case 2 : goto c3ASb;
               case 3 : goto c3ASc;
               case 4 : goto c3ASd;
               case 5 : goto c3ASe;
               case 6 : goto c3ASf;
               case 7 : goto c3ASg;
           }
       c3ASg: // global
           R1 = Text.Read.Lex.$fShowLexeme3_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ASf: // global
           I64[Sp] = block_c3AR8_info;
           _s3yfG::P64 = P64[R1 + 2];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yfG::P64;
           if (R1 & 7 != 0) goto u3AT9; else goto c3AR9;
       u3AT9: // global
           call _c3AR8(R1) args: 0, res: 0, upd: 0;
       c3AR9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ASe: // global
           I64[Sp] = block_c3AQ6_info;
           _s3yfq::P64 = P64[R1 + 3];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yfq::P64;
           if (R1 & 7 != 0) goto u3AT8; else goto c3AQ7;
       u3AT8: // global
           call _c3AQ6(R1) args: 0, res: 0, upd: 0;
       c3AQ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ASd: // global
           I64[Sp] = block_c3AP4_info;
           _s3yfa::P64 = P64[R1 + 4];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yfa::P64;
           if (R1 & 7 != 0) goto u3AT7; else goto c3AP5;
       u3AT7: // global
           call _c3AP4(R1) args: 0, res: 0, upd: 0;
       c3AP5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ASc: // global
           I64[Sp] = block_c3AO2_info;
           _s3yeU::P64 = P64[R1 + 5];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yeU::P64;
           if (R1 & 7 != 0) goto u3AT6; else goto c3AO3;
       u3AT6: // global
           call _c3AO2(R1) args: 0, res: 0, upd: 0;
       c3AO3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ASb: // global
           I64[Sp] = block_c3AN0_info;
           _s3yeE::P64 = P64[R1 + 6];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yeE::P64;
           if (R1 & 7 != 0) goto u3AT5; else goto c3AN1;
       u3AT5: // global
           call _c3AN0(R1) args: 0, res: 0, upd: 0;
       c3AN1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ASa: // global
           I64[Sp] = block_c3ALQ_info;
           _s3yeo::P64 = P64[R1 + 7];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yeo::P64;
           if (R1 & 7 != 0) goto u3AT4; else goto c3ALR;
       u3AT4: // global
           call _c3ALQ(R1) args: 0, res: 0, upd: 0;
       c3ALR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AR8() //  [R1]
         { info_tbl: [(c3AR8,
                       label: block_c3AR8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AR8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ASX; else goto c3ASW;
       c3ASX: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ASW: // global
           _s3yfI::I64 = I64[R1 + 7];
           I64[Hp - 32] = g_s3yfJ_info;
           P64[Hp - 16] = P64[Sp + 8];
           _c3ARd::P64 = Hp - 32;
           if (%MO_S_Lt_W64(_s3yfI::I64, 11)) goto c3ASZ; else goto c3AT0;
       c3ASZ: // global
           I64[Hp - 8] = sat_s3yfN_info;
           P64[Hp] = _c3ARd::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3AT0: // global
           I64[Hp - 8] = sat_s3yfS_info;
           P64[Hp] = _c3ARd::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3AQ6() //  [R1]
         { info_tbl: [(c3AQ6,
                       label: block_c3AQ6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AQ6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ASQ; else goto c3ASP;
       c3ASQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ASP: // global
           _s3yfq::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3ASS; else goto c3AST;
       c3ASS: // global
           I64[Hp - 8] = sat_s3yfy_info;
           P64[Hp] = _s3yfq::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3AST: // global
           I64[Hp - 8] = sat_s3yfF_info;
           P64[Hp] = _s3yfq::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3AP4() //  [R1]
         { info_tbl: [(c3AP4,
                       label: block_c3AP4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AP4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ASJ; else goto c3ASI;
       c3ASJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ASI: // global
           _s3yfa::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3ASL; else goto c3ASM;
       c3ASL: // global
           I64[Hp - 8] = sat_s3yfi_info;
           P64[Hp] = _s3yfa::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ASM: // global
           I64[Hp - 8] = sat_s3yfp_info;
           P64[Hp] = _s3yfa::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3AO2() //  [R1]
         { info_tbl: [(c3AO2,
                       label: block_c3AO2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AO2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ASC; else goto c3ASB;
       c3ASC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ASB: // global
           _s3yeU::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3ASE; else goto c3ASF;
       c3ASE: // global
           I64[Hp - 8] = sat_s3yf2_info;
           P64[Hp] = _s3yeU::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ASF: // global
           I64[Hp - 8] = sat_s3yf9_info;
           P64[Hp] = _s3yeU::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3AN0() //  [R1]
         { info_tbl: [(c3AN0,
                       label: block_c3AN0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AN0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ASv; else goto c3ASu;
       c3ASv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ASu: // global
           _s3yeE::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3ASx; else goto c3ASy;
       c3ASx: // global
           I64[Hp - 8] = sat_s3yeM_info;
           P64[Hp] = _s3yeE::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ASy: // global
           I64[Hp - 8] = sat_s3yeT_info;
           P64[Hp] = _s3yeE::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ALQ() //  [R1]
         { info_tbl: [(c3ALQ,
                       label: block_c3ALQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ALQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ASo; else goto c3ASn;
       c3ASo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ASn: // global
           _s3yeo::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3ASq; else goto c3ASr;
       c3ASq: // global
           I64[Hp - 8] = sat_s3yew_info;
           P64[Hp] = _s3yeo::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ASr: // global
           I64[Hp - 8] = sat_s3yeD_info;
           P64[Hp] = _s3yeo::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.016278472 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme17_closure" {
     Text.Read.Lex.$fShowLexeme17_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.018645688 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshow_closure" {
     Text.Read.Lex.$fShowLexeme_$cshow_closure:
         const Text.Read.Lex.$fShowLexeme_$cshow_info;
         const 0;
 },
 sat_s3yfY_entry() //  [R1]
         { info_tbl: [(c3ATr,
                       label: sat_s3yfY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ATr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3ATs; else goto c3ATt;
       c3ATs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ATt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3ATo_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3ATx; else goto c3ATp;
       u3ATx: // global
           call _c3ATo(R1) args: 0, res: 0, upd: 0;
       c3ATp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3ATo() //  [R1]
         { info_tbl: [(c3ATo,
                       label: block_c3ATo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ATo: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yg0_entry() //  [R1]
         { info_tbl: [(c3ATE,
                       label: sat_s3yg0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ATE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ATF; else goto c3ATG;
       c3ATF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ATG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yg3_entry() //  [R1]
         { info_tbl: [(c3ATN,
                       label: sat_s3yg3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ATN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ATO; else goto c3ATP;
       c3ATO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ATP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yg6_entry() //  [R1]
         { info_tbl: [(c3ATW,
                       label: sat_s3yg6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ATW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ATX; else goto c3ATY;
       c3ATX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ATY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yg9_entry() //  [R1]
         { info_tbl: [(c3AU5,
                       label: sat_s3yg9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AU5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AU6; else goto c3AU7;
       c3AU6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AU7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ygc_entry() //  [R1]
         { info_tbl: [(c3AUe,
                       label: sat_s3ygc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AUe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AUf; else goto c3AUg;
       c3AUf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AUg: // global
           R3 = P64[R1 + 16];
           R2 = 11;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$fShowLexeme_$cshow_entry() //  [R2]
         { info_tbl: [(c3AUq,
                       label: Text.Read.Lex.$fShowLexeme_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AUq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3AUr; else goto c3AUs;
       c3AUr: // global
           R2 = R2;
           R1 = Text.Read.Lex.$fShowLexeme_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AUs: // global
           I64[Sp - 8] = block_c3ATf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3AUS; else goto c3ATg;
       u3AUS: // global
           call _c3ATf(R1) args: 0, res: 0, upd: 0;
       c3ATg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ATf() //  [R1]
         { info_tbl: [(c3ATf,
                       label: block_c3ATf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ATf: // global
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3AUi;
               case 2 : goto c3AUj;
               case 3 : goto c3AUk;
               case 4 : goto c3AUl;
               case 5 : goto c3AUm;
               case 6 : goto c3AUn;
               case 7 : goto c3AUo;
           }
       c3AUo: // global
           R1 = Text.Read.Lex.$fShowLexeme4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3AUn: // global
           Hp = Hp + 24;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3AUO; else goto c3AUN;
       c3AUN: // global
           _s3ygb::P64 = P64[_s3yfU::P64 + 2];
           I64[Hp - 16] = sat_s3ygc_info;
           P64[Hp] = _s3ygb::P64;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3AUm: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3AUL; else goto c3AUK;
       c3AUK: // global
           _s3yg8::P64 = P64[_s3yfU::P64 + 3];
           I64[Hp - 40] = sat_s3yg9_info;
           P64[Hp - 24] = _s3yg8::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3AUl: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3AUL; else goto c3AUG;
       c3AUG: // global
           _s3yg5::P64 = P64[_s3yfU::P64 + 4];
           I64[Hp - 40] = sat_s3yg6_info;
           P64[Hp - 24] = _s3yg5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3AUk: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3AUL; else goto c3AUC;
       c3AUC: // global
           _s3yg2::P64 = P64[_s3yfU::P64 + 5];
           I64[Hp - 40] = sat_s3yg3_info;
           P64[Hp - 24] = _s3yg2::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3AUj: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3AUL; else goto c3AUy;
       c3AUL: // global
           HpAlloc = 48;
           R1 = _s3yfU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AUy: // global
           _s3yfZ::P64 = P64[_s3yfU::P64 + 6];
           I64[Hp - 40] = sat_s3yg0_info;
           P64[Hp - 24] = _s3yfZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3AUi: // global
           Hp = Hp + 24;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3AUO; else goto c3AUu;
       c3AUO: // global
           HpAlloc = 24;
           R1 = _s3yfU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3AUu: // global
           _s3yfV::P64 = P64[_s3yfU::P64 + 7];
           I64[Hp - 16] = sat_s3yfY_info;
           P64[Hp] = _s3yfV::P64;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.022647381 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme1_closure" {
     Text.Read.Lex.$fShowLexeme1_closure:
         const Text.Read.Lex.$fShowLexeme1_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme1_entry() //  [R2]
         { info_tbl: [(c3AUX,
                       label: Text.Read.Lex.$fShowLexeme1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AUX: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme2_closure+1;
           call Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.023553188 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshowList_closure" {
     Text.Read.Lex.$fShowLexeme_$cshowList_closure:
         const Text.Read.Lex.$fShowLexeme_$cshowList_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c3AV4,
                       label: Text.Read.Lex.$fShowLexeme_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AV4: // global
           R4 = R3;
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.024295843 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_closure" {
     Text.Read.Lex.$fShowLexeme_closure:
         const GHC.Show.C:Show_con_info;
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure+2;
         const Text.Read.Lex.$fShowLexeme_$cshow_closure+1;
         const Text.Read.Lex.$fShowLexeme_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.024886675 UTC

[section ""cstring" . Text.Read.Lex.isSymbolChar4_bytes" {
     Text.Read.Lex.isSymbolChar4_bytes:
         I8[] [44,59,40,41,91,93,123,125,96]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.025671852 UTC

[section ""data" . Text.Read.Lex.isSymbolChar3_closure" {
     Text.Read.Lex.isSymbolChar3_closure:
         const Text.Read.Lex.isSymbolChar3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.isSymbolChar3_entry() //  [R1]
         { info_tbl: [(c3AVd,
                       label: Text.Read.Lex.isSymbolChar3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AVd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AVe; else goto c3AVf;
       c3AVe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AVf: // global
           (_c3AVa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AVa::I64 == 0) goto c3AVc; else goto c3AVb;
       c3AVc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AVb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AVa::I64;
           R2 = Text.Read.Lex.isSymbolChar4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.0266675 UTC

[section ""cstring" . Text.Read.Lex.isSymbolChar2_bytes" {
     Text.Read.Lex.isSymbolChar2_bytes:
         I8[] [39,34]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.027994229 UTC

[section ""data" . Text.Read.Lex.isSymbolChar1_closure" {
     Text.Read.Lex.isSymbolChar1_closure:
         const Text.Read.Lex.isSymbolChar1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.isSymbolChar1_entry() //  [R1]
         { info_tbl: [(c3AVm,
                       label: Text.Read.Lex.isSymbolChar1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AVm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AVn; else goto c3AVo;
       c3AVn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AVo: // global
           (_c3AVj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AVj::I64 == 0) goto c3AVl; else goto c3AVk;
       c3AVl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AVk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AVj::I64;
           R2 = Text.Read.Lex.isSymbolChar2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.029809969 UTC

[section ""data" . Text.Read.Lex.isSymbolChar_closure" {
     Text.Read.Lex.isSymbolChar_closure:
         const Text.Read.Lex.isSymbolChar_info;
         const 0;
 },
 Text.Read.Lex.isSymbolChar_entry() //  [R2]
         { info_tbl: [(c3AVz,
                       label: Text.Read.Lex.isSymbolChar_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AVz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3AVA; else goto c3AVB;
       c3AVA: // global
           R2 = R2;
           R1 = Text.Read.Lex.isSymbolChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AVB: // global
           I64[Sp - 16] = block_c3AVt_info;
           R4 = Text.Read.Lex.isSymbolChar3_closure;
           R3 = R2;
           _s3ygf::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 8] = _s3ygf::P64;
           Sp = Sp - 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3AVt() //  [R1]
         { info_tbl: [(c3AVt,
                       label: block_c3AVt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AVt: // global
           if (R1 & 7 == 1) goto c3AVw; else goto u3AWG;
       c3AVw: // global
           _s3ygf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3AVE_info;
           R1 = _s3ygf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3AWT; else goto c3AVG;
       u3AWT: // global
           call _c3AVE(R1) args: 0, res: 0, upd: 0;
       c3AVG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3AWG: // global
           Sp = Sp + 16;
           call _c3AVx() args: 0, res: 0, upd: 0;
     }
 },
 _c3AVE() //  [R1]
         { info_tbl: [(c3AVE,
                       label: block_c3AVE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AVE: // global
           I64[Sp - 16] = block_c3AVK_info;
           _s3ygi::I64 = I64[R1 + 7];
           R2 = _s3ygi::I64;
           I64[Sp - 8] = _s3ygi::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3AVK() //  [R1]
         { info_tbl: [(c3AVK,
                       label: block_c3AVK_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AVK: // global
           _c3AWC::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c3AWC::I64 < 22) goto u3AWE; else goto u3AWH;
       u3AWE: // global
           if (_c3AWC::I64 < 11) goto u3AWI; else goto u3AWF;
       u3AWI: // global
           Sp = Sp + 24;
           goto u3AWZ;
       u3AWF: // global
           switch [11 .. 21] _c3AWC::I64 {
               case 11 : goto c3AVZ;
               case 12 : goto u3AWO;
               case 17 : goto c3AW8;
               case 18, 19, 20, 21 : goto u3AWO;
               default: {goto u3AWJ;}
           }
       c3AW8: // global
           _s3ygh::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3AW6_info;
           R4 = Text.Read.Lex.isSymbolChar1_closure;
           R3 = _s3ygh::P64;
           R2 = GHC.Classes.$fEqChar_closure;
           Sp = Sp + 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       u3AWO: // global
           Sp = Sp + 24;
           goto u3AX0;
       c3AVZ: // global
           if (I64[Sp + 8] == 95) goto u3AWR; else goto u3AWS;
       u3AWR: // global
           Sp = Sp + 24;
           goto u3AWZ;
       u3AWS: // global
           Sp = Sp + 24;
           goto u3AX0;
       u3AX0: // global
           call _c3AWy() args: 0, res: 0, upd: 0;
       u3AWJ: // global
           Sp = Sp + 24;
           goto u3AWZ;
       u3AWH: // global
           Sp = Sp + 24;
           goto u3AWZ;
       u3AWZ: // global
           call _c3AVx() args: 0, res: 0, upd: 0;
     }
 },
 _c3AW6() //  [R1]
         { info_tbl: [(c3AW6,
                       label: block_c3AW6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AW6: // global
           if (R1 & 7 == 1) goto u3AWP; else goto u3AWQ;
       u3AWP: // global
           Sp = Sp + 8;
           call _c3AWy() args: 0, res: 0, upd: 0;
       u3AWQ: // global
           Sp = Sp + 8;
           call _c3AVx() args: 0, res: 0, upd: 0;
     }
 },
 _c3AWy() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AWy: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3AVx() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AVx: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.03193504 UTC

[section ""cstring" . lvl_r3y8T_bytes" {
     lvl_r3y8T_bytes:
         I8[] [95,39]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.032712916 UTC

[section ""data" . lvl1_r3y8U_closure" {
     lvl1_r3y8U_closure:
         const lvl1_r3y8U_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3y8U_entry() //  [R1]
         { info_tbl: [(c3AX9,
                       label: lvl1_r3y8U_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AX9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AXa; else goto c3AXb;
       c3AXa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AXb: // global
           (_c3AX6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AX6::I64 == 0) goto c3AX8; else goto c3AX7;
       c3AX8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AX7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AX6::I64;
           R2 = lvl_r3y8T_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.033971775 UTC

[section ""data" . $wisIdfChar_r3y8V_closure" {
     $wisIdfChar_r3y8V_closure:
         const $wisIdfChar_r3y8V_info;
         const 0;
 },
 $wisIdfChar_r3y8V_entry() //  [R2]
         { info_tbl: [(c3AXi,
                       label: $wisIdfChar_r3y8V_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AXi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3AXm; else goto c3AXl;
       c3AXm: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = $wisIdfChar_r3y8V_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AXl: // global
           (_s3ygr::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(R2);
           if (_s3ygr::I64 == 0) goto c3AXw; else goto c3AXs;
       c3AXw: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R2;
           R4 = lvl1_r3y8U_closure;
           R3 = Hp - 7;
           R2 = GHC.Classes.$fEqChar_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3AXs: // global
           Hp = Hp - 16;
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.035117531 UTC

[section ""data" . isIdfChar_r3y8W_closure" {
     isIdfChar_r3y8W_closure:
         const isIdfChar_r3y8W_info;
         const 0;
 },
 isIdfChar_r3y8W_entry() //  [R2]
         { info_tbl: [(c3AXE,
                       label: isIdfChar_r3y8W_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AXE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3AXF; else goto c3AXG;
       c3AXF: // global
           R2 = R2;
           R1 = isIdfChar_r3y8W_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3AXG: // global
           I64[Sp - 8] = block_c3AXB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3AXK; else goto c3AXC;
       u3AXK: // global
           call _c3AXB(R1) args: 0, res: 0, upd: 0;
       c3AXC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AXB() //  [R1]
         { info_tbl: [(c3AXB,
                       label: block_c3AXB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AXB: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call $wisIdfChar_r3y8V_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.036087077 UTC

[section ""cstring" . reserved_ops_r3y8X_bytes" {
     reserved_ops_r3y8X_bytes:
         I8[] [46,46]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.036843208 UTC

[section ""data" . reserved_ops1_r3y8Y_closure" {
     reserved_ops1_r3y8Y_closure:
         const reserved_ops1_r3y8Y_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops1_r3y8Y_entry() //  [R1]
         { info_tbl: [(c3AXR,
                       label: reserved_ops1_r3y8Y_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AXR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AXS; else goto c3AXT;
       c3AXS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AXT: // global
           (_c3AXO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AXO::I64 == 0) goto c3AXQ; else goto c3AXP;
       c3AXQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AXP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AXO::I64;
           R2 = reserved_ops_r3y8X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.037771449 UTC

[section ""cstring" . reserved_ops2_r3y8Z_bytes" {
     reserved_ops2_r3y8Z_bytes:
         I8[] [58,58]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.038482356 UTC

[section ""data" . reserved_ops3_r3y90_closure" {
     reserved_ops3_r3y90_closure:
         const reserved_ops3_r3y90_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops3_r3y90_entry() //  [R1]
         { info_tbl: [(c3AY0,
                       label: reserved_ops3_r3y90_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AY0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AY1; else goto c3AY2;
       c3AY1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AY2: // global
           (_c3AXX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AXX::I64 == 0) goto c3AXZ; else goto c3AXY;
       c3AXZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AXY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AXX::I64;
           R2 = reserved_ops2_r3y8Z_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.039374337 UTC

[section ""cstring" . reserved_ops4_r3y91_bytes" {
     reserved_ops4_r3y91_bytes:
         I8[] [61]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.040106848 UTC

[section ""data" . reserved_ops5_r3y92_closure" {
     reserved_ops5_r3y92_closure:
         const reserved_ops5_r3y92_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops5_r3y92_entry() //  [R1]
         { info_tbl: [(c3AY9,
                       label: reserved_ops5_r3y92_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AY9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AYa; else goto c3AYb;
       c3AYa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AYb: // global
           (_c3AY6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AY6::I64 == 0) goto c3AY8; else goto c3AY7;
       c3AY8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AY7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AY6::I64;
           R2 = reserved_ops4_r3y91_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.041709123 UTC

[section ""cstring" . reserved_ops6_r3y93_bytes" {
     reserved_ops6_r3y93_bytes:
         I8[] [92]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.042407331 UTC

[section ""data" . reserved_ops7_r3y94_closure" {
     reserved_ops7_r3y94_closure:
         const reserved_ops7_r3y94_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops7_r3y94_entry() //  [R1]
         { info_tbl: [(c3AYi,
                       label: reserved_ops7_r3y94_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AYi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AYj; else goto c3AYk;
       c3AYj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AYk: // global
           (_c3AYf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AYf::I64 == 0) goto c3AYh; else goto c3AYg;
       c3AYh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AYg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AYf::I64;
           R2 = reserved_ops6_r3y93_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.043317679 UTC

[section ""cstring" . reserved_ops8_r3y95_bytes" {
     reserved_ops8_r3y95_bytes:
         I8[] [124]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.044057761 UTC

[section ""data" . reserved_ops9_r3y96_closure" {
     reserved_ops9_r3y96_closure:
         const reserved_ops9_r3y96_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops9_r3y96_entry() //  [R1]
         { info_tbl: [(c3AYr,
                       label: reserved_ops9_r3y96_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AYr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AYs; else goto c3AYt;
       c3AYs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AYt: // global
           (_c3AYo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AYo::I64 == 0) goto c3AYq; else goto c3AYp;
       c3AYq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AYp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AYo::I64;
           R2 = reserved_ops8_r3y95_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.044948829 UTC

[section ""cstring" . reserved_ops10_r3y97_bytes" {
     reserved_ops10_r3y97_bytes:
         I8[] [60,45]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.045665691 UTC

[section ""data" . reserved_ops11_r3y98_closure" {
     reserved_ops11_r3y98_closure:
         const reserved_ops11_r3y98_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops11_r3y98_entry() //  [R1]
         { info_tbl: [(c3AYA,
                       label: reserved_ops11_r3y98_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AYA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AYB; else goto c3AYC;
       c3AYB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AYC: // global
           (_c3AYx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AYx::I64 == 0) goto c3AYz; else goto c3AYy;
       c3AYz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AYy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AYx::I64;
           R2 = reserved_ops10_r3y97_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.04656679 UTC

[section ""cstring" . reserved_ops12_r3y99_bytes" {
     reserved_ops12_r3y99_bytes:
         I8[] [45,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.047279482 UTC

[section ""data" . reserved_ops13_r3y9a_closure" {
     reserved_ops13_r3y9a_closure:
         const reserved_ops13_r3y9a_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops13_r3y9a_entry() //  [R1]
         { info_tbl: [(c3AYJ,
                       label: reserved_ops13_r3y9a_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AYJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AYK; else goto c3AYL;
       c3AYK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AYL: // global
           (_c3AYG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AYG::I64 == 0) goto c3AYI; else goto c3AYH;
       c3AYI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AYH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AYG::I64;
           R2 = reserved_ops12_r3y99_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.048149344 UTC

[section ""cstring" . reserved_ops14_r3y9b_bytes" {
     reserved_ops14_r3y9b_bytes:
         I8[] [64]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.048860677 UTC

[section ""data" . reserved_ops15_r3y9c_closure" {
     reserved_ops15_r3y9c_closure:
         const reserved_ops15_r3y9c_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops15_r3y9c_entry() //  [R1]
         { info_tbl: [(c3AYS,
                       label: reserved_ops15_r3y9c_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AYS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AYT; else goto c3AYU;
       c3AYT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AYU: // global
           (_c3AYP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AYP::I64 == 0) goto c3AYR; else goto c3AYQ;
       c3AYR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AYQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AYP::I64;
           R2 = reserved_ops14_r3y9b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.049767994 UTC

[section ""cstring" . reserved_ops16_r3y9d_bytes" {
     reserved_ops16_r3y9d_bytes:
         I8[] [126]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.050500229 UTC

[section ""data" . reserved_ops17_r3y9e_closure" {
     reserved_ops17_r3y9e_closure:
         const reserved_ops17_r3y9e_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops17_r3y9e_entry() //  [R1]
         { info_tbl: [(c3AZ1,
                       label: reserved_ops17_r3y9e_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AZ1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AZ2; else goto c3AZ3;
       c3AZ2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AZ3: // global
           (_c3AYY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AYY::I64 == 0) goto c3AZ0; else goto c3AYZ;
       c3AZ0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AYZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AYY::I64;
           R2 = reserved_ops16_r3y9d_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.051413565 UTC

[section ""cstring" . reserved_ops18_r3y9f_bytes" {
     reserved_ops18_r3y9f_bytes:
         I8[] [61,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.052176123 UTC

[section ""data" . reserved_ops19_r3y9g_closure" {
     reserved_ops19_r3y9g_closure:
         const reserved_ops19_r3y9g_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops19_r3y9g_entry() //  [R1]
         { info_tbl: [(c3AZa,
                       label: reserved_ops19_r3y9g_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AZa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3AZb; else goto c3AZc;
       c3AZb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3AZc: // global
           (_c3AZ7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3AZ7::I64 == 0) goto c3AZ9; else goto c3AZ8;
       c3AZ9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3AZ8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3AZ7::I64;
           R2 = reserved_ops18_r3y9f_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.05312824 UTC

[section ""data" . reserved_ops20_r3y9h_closure" {
     reserved_ops20_r3y9h_closure:
         const :_con_info;
         const reserved_ops19_r3y9g_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.05437067 UTC

[section ""data" . reserved_ops21_r3y9i_closure" {
     reserved_ops21_r3y9i_closure:
         const :_con_info;
         const reserved_ops17_r3y9e_closure;
         const reserved_ops20_r3y9h_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.054956788 UTC

[section ""data" . reserved_ops22_r3y9j_closure" {
     reserved_ops22_r3y9j_closure:
         const :_con_info;
         const reserved_ops15_r3y9c_closure;
         const reserved_ops21_r3y9i_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.055536952 UTC

[section ""data" . reserved_ops23_r3y9k_closure" {
     reserved_ops23_r3y9k_closure:
         const :_con_info;
         const reserved_ops13_r3y9a_closure;
         const reserved_ops22_r3y9j_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.056134561 UTC

[section ""data" . reserved_ops24_r3y9l_closure" {
     reserved_ops24_r3y9l_closure:
         const :_con_info;
         const reserved_ops11_r3y98_closure;
         const reserved_ops23_r3y9k_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.056749353 UTC

[section ""data" . reserved_ops25_r3y9m_closure" {
     reserved_ops25_r3y9m_closure:
         const :_con_info;
         const reserved_ops9_r3y96_closure;
         const reserved_ops24_r3y9l_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.05748491 UTC

[section ""data" . reserved_ops26_r3y9n_closure" {
     reserved_ops26_r3y9n_closure:
         const :_con_info;
         const reserved_ops7_r3y94_closure;
         const reserved_ops25_r3y9m_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.058064997 UTC

[section ""data" . reserved_ops27_r3y9o_closure" {
     reserved_ops27_r3y9o_closure:
         const :_con_info;
         const reserved_ops5_r3y92_closure;
         const reserved_ops26_r3y9n_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.058614955 UTC

[section ""data" . reserved_ops28_r3y9p_closure" {
     reserved_ops28_r3y9p_closure:
         const :_con_info;
         const reserved_ops3_r3y90_closure;
         const reserved_ops27_r3y9o_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.059203227 UTC

[section ""data" . reserved_ops29_r3y9q_closure" {
     reserved_ops29_r3y9q_closure:
         const :_con_info;
         const reserved_ops1_r3y8Y_closure;
         const reserved_ops28_r3y9p_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.061840675 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c==1_closure" {
     Text.Read.Lex.$fEqLexeme_$c==1_closure:
         const Text.Read.Lex.$fEqLexeme_$c==1_info;
 },
 Text.Read.Lex.$fEqLexeme_$c==1_entry() //  [R2, R3]
         { info_tbl: [(c3AZo,
                       label: Text.Read.Lex.$fEqLexeme_$c==1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AZo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3AZp; else goto c3AZq;
       c3AZp: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c==1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3AZq: // global
           I64[Sp - 16] = block_c3AZh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3B2b; else goto c3AZi;
       u3B2b: // global
           call _c3AZh(R1) args: 0, res: 0, upd: 0;
       c3AZi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AZh() //  [R1]
         { info_tbl: [(c3AZh,
                       label: block_c3AZh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AZh: // global
           _s3ygy::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3AZl; else goto c3AZm;
       c3AZl: // global
           I64[Sp - 8] = block_c3AZt_info;
           _s3ygA::P64 = P64[R1 + 7];
           _s3ygB::P64 = P64[R1 + 15];
           R1 = _s3ygy::P64;
           P64[Sp] = _s3ygB::P64;
           P64[Sp + 8] = _s3ygA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3B29; else goto c3AZv;
       u3B29: // global
           call _c3AZt(R1) args: 0, res: 0, upd: 0;
       c3AZv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3AZm: // global
           I64[Sp - 16] = block_c3AZZ_info;
           _s3ygN::P64 = P64[R1 + 6];
           _s3ygO::P64 = P64[R1 + 14];
           _s3ygP::P64 = P64[R1 + 22];
           R1 = _s3ygy::P64;
           P64[Sp - 8] = _s3ygP::P64;
           P64[Sp] = _s3ygO::P64;
           P64[Sp + 8] = _s3ygN::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3B2a; else goto c3B01;
       u3B2a: // global
           call _c3AZZ(R1) args: 0, res: 0, upd: 0;
       c3B01: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AZt() //  [R1]
         { info_tbl: [(c3AZt,
                       label: block_c3AZt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AZt: // global
           if (R1 & 7 == 1) goto c3AZH; else goto u3B27;
       c3AZH: // global
           I64[Sp - 8] = block_c3AZz_info;
           _s3ygD::P64 = P64[R1 + 7];
           _s3ygE::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s3ygE::P64;
           P64[Sp + 16] = _s3ygD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3B2c; else goto c3AZA;
       u3B2c: // global
           call _c3AZz(R1) args: 0, res: 0, upd: 0;
       c3AZA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3B27: // global
           Sp = Sp + 24;
           call _c3B1J() args: 0, res: 0, upd: 0;
     }
 },
 _c3AZz() //  [R1]
         { info_tbl: [(c3AZz,
                       label: block_c3AZz_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AZz: // global
           I64[Sp] = block_c3AZE_info;
           _s3ygG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s3ygG::I64;
           if (R1 & 7 != 0) goto u3B2e; else goto c3AZJ;
       u3B2e: // global
           call _c3AZE(R1) args: 0, res: 0, upd: 0;
       c3AZJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3AZE() //  [R1]
         { info_tbl: [(c3AZE,
                       label: block_c3AZE_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AZE: // global
           if (I64[Sp + 24] == I64[R1 + 7]) goto c3AZS; else goto u3B28;
       c3AZS: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
       u3B28: // global
           Sp = Sp + 32;
           call _c3B1J() args: 0, res: 0, upd: 0;
     }
 },
 _c3AZZ() //  [R1]
         { info_tbl: [(c3AZZ,
                       label: block_c3AZZ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3AZZ: // global
           if (R1 & 7 == 1) goto u3B1Y; else goto c3B0c;
       u3B1Y: // global
           Sp = Sp + 32;
           call _c3B1J() args: 0, res: 0, upd: 0;
       c3B0c: // global
           I64[Sp - 8] = block_c3B0a_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 22];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 8;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3B0a() //  [R1]
         { info_tbl: [(c3B0a,
                       label: block_c3B0a_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B0a: // global
           if (R1 & 7 == 1) goto u3B1Z; else goto c3B13;
       u3B1Z: // global
           Sp = Sp + 40;
           call _c3B1J() args: 0, res: 0, upd: 0;
       c3B13: // global
           I64[Sp] = block_c3B0n_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3B2h; else goto c3B14;
       u3B2h: // global
           call _c3B0n(R1) args: 0, res: 0, upd: 0;
       c3B14: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B0n() //  [R1]
         { info_tbl: [(c3B0n,
                       label: block_c3B0n_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B0n: // global
           _s3ygU::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c3B1b; else goto c3B1r;
       c3B1b: // global
           I64[Sp] = block_c3B18_info;
           R1 = _s3ygU::P64;
           if (R1 & 7 != 0) goto u3B2j; else goto c3B1c;
       u3B2j: // global
           call _c3B18(R1) args: 0, res: 0, upd: 0;
       c3B1c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3B1r: // global
           I64[Sp] = block_c3B1p_info;
           _s3yh7::P64 = P64[R1 + 6];
           R1 = _s3ygU::P64;
           P64[Sp + 32] = _s3yh7::P64;
           if (R1 & 7 != 0) goto u3B2k; else goto c3B1s;
       u3B2k: // global
           call _c3B1p(R1) args: 0, res: 0, upd: 0;
       c3B1s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B18() //  [R1]
         { info_tbl: [(c3B18,
                       label: block_c3B18_info
                       rep:StackRep [False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B18: // global
           if (R1 & 7 == 1) goto u3B23; else goto u3B24;
       u3B23: // global
           Sp = Sp + 8;
           call _s3ygX() args: 0, res: 0, upd: 0;
       u3B24: // global
           Sp = Sp + 40;
           call _c3B1J() args: 0, res: 0, upd: 0;
     }
 },
 _c3B1p() //  [R1]
         { info_tbl: [(c3B1p,
                       label: block_c3B1p_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B1p: // global
           if (R1 & 7 == 1) goto u3B20; else goto c3B1D;
       u3B20: // global
           Sp = Sp + 40;
           call _c3B1J() args: 0, res: 0, upd: 0;
       c3B1D: // global
           I64[Sp] = block_c3B1B_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 32];
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3B1B() //  [R1]
         { info_tbl: [(c3B1B,
                       label: block_c3B1B_info
                       rep:StackRep [False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B1B: // global
           if (R1 & 7 == 1) goto u3B21; else goto u3B22;
       u3B21: // global
           Sp = Sp + 40;
           call _c3B1J() args: 0, res: 0, upd: 0;
       u3B22: // global
           Sp = Sp + 8;
           call _s3ygX() args: 0, res: 0, upd: 0;
     }
 },
 _s3ygX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3ygX: // global
           I64[Sp - 8] = block_c3B0s_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3B2u; else goto c3B0u;
       u3B2u: // global
           call _c3B0s(R1) args: 0, res: 0, upd: 0;
       c3B0u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B0s() //  [R1]
         { info_tbl: [(c3B0s,
                       label: block_c3B0s_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B0s: // global
           _s3ygV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3B0B; else goto c3B0R;
       c3B0B: // global
           I64[Sp + 32] = block_c3B0y_info;
           R1 = _s3ygV::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3B2l; else goto c3B0C;
       u3B2l: // global
           call _c3B0y(R1) args: 0, res: 0, upd: 0;
       c3B0C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3B0R: // global
           I64[Sp + 24] = block_c3B0P_info;
           _s3yh1::P64 = P64[R1 + 6];
           R1 = _s3ygV::P64;
           P64[Sp + 32] = _s3yh1::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3B2m; else goto c3B0S;
       u3B2m: // global
           call _c3B0P(R1) args: 0, res: 0, upd: 0;
       c3B0S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B0y() //  [R1]
         { info_tbl: [(c3B0y,
                       label: block_c3B0y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B0y: // global
           if (R1 & 7 == 1) goto c3B0I; else goto u3B26;
       c3B0I: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3B26: // global
           Sp = Sp + 8;
           call _c3B1J() args: 0, res: 0, upd: 0;
     }
 },
 _c3B0P() //  [R1]
         { info_tbl: [(c3B0P,
                       label: block_c3B0P_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B0P: // global
           if (R1 & 7 == 1) goto u3B25; else goto c3B12;
       u3B25: // global
           Sp = Sp + 16;
           call _c3B1J() args: 0, res: 0, upd: 0;
       c3B12: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3B1J() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B1J: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.067188067 UTC

[section ""data" . Text.Read.Lex.$fEqNumber_$c/=_closure" {
     Text.Read.Lex.$fEqNumber_$c/=_closure:
         const Text.Read.Lex.$fEqNumber_$c/=_info;
 },
 Text.Read.Lex.$fEqNumber_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c3B2F,
                       label: Text.Read.Lex.$fEqNumber_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B2F: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3B2G; else goto c3B2H;
       c3B2G: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqNumber_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3B2H: // global
           I64[Sp - 8] = block_c3B2z_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$fEqLexeme_$c==1_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3B2z() //  [R1]
         { info_tbl: [(c3B2z,
                       label: block_c3B2z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B2z: // global
           if (R1 & 7 == 1) goto c3B2C; else goto c3B2D;
       c3B2C: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3B2D: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.068289405 UTC

[section ""data" . Text.Read.Lex.$fEqNumber_closure" {
     Text.Read.Lex.$fEqNumber_closure:
         const GHC.Classes.C:Eq_con_info;
         const Text.Read.Lex.$fEqLexeme_$c==1_closure+2;
         const Text.Read.Lex.$fEqNumber_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.070441697 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c==_closure" {
     Text.Read.Lex.$fEqLexeme_$c==_closure:
         const Text.Read.Lex.$fEqLexeme_$c==_info;
 },
 Text.Read.Lex.$fEqLexeme_$c==_entry() //  [R2, R3]
         { info_tbl: [(c3B34,
                       label: Text.Read.Lex.$fEqLexeme_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B34: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3B35; else goto c3B36;
       c3B35: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3B36: // global
           I64[Sp - 16] = block_c3B2S_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3B59; else goto c3B2T;
       u3B59: // global
           call _c3B2S(R1) args: 0, res: 0, upd: 0;
       c3B2T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B2S() //  [R1]
         { info_tbl: [(c3B2S,
                       label: block_c3B2S_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B2S: // global
           _s3yhf::P64 = P64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3B2W;
               case 2 : goto c3B2X;
               case 3 : goto c3B2Y;
               case 4 : goto c3B2Z;
               case 5 : goto c3B30;
               case 6 : goto c3B31;
               case 7 : goto c3B32;
           }
       c3B32: // global
           I64[Sp + 8] = block_c3B4B_info;
           R1 = _s3yhf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3B58; else goto c3B4D;
       u3B58: // global
           call _c3B4B(R1) args: 0, res: 0, upd: 0;
       c3B4D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3B31: // global
           I64[Sp] = block_c3B4m_info;
           _s3yhw::P64 = P64[R1 + 2];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhw::P64;
           if (R1 & 7 != 0) goto u3B57; else goto c3B4o;
       u3B57: // global
           call _c3B4m(R1) args: 0, res: 0, upd: 0;
       c3B4o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3B30: // global
           I64[Sp] = block_c3B47_info;
           _s3yht::P64 = P64[R1 + 3];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yht::P64;
           if (R1 & 7 != 0) goto u3B56; else goto c3B49;
       u3B56: // global
           call _c3B47(R1) args: 0, res: 0, upd: 0;
       c3B49: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3B2Z: // global
           I64[Sp] = block_c3B3S_info;
           _s3yhq::P64 = P64[R1 + 4];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhq::P64;
           if (R1 & 7 != 0) goto u3B55; else goto c3B3U;
       u3B55: // global
           call _c3B3S(R1) args: 0, res: 0, upd: 0;
       c3B3U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3B2Y: // global
           I64[Sp] = block_c3B3D_info;
           _s3yhn::P64 = P64[R1 + 5];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhn::P64;
           if (R1 & 7 != 0) goto u3B54; else goto c3B3F;
       u3B54: // global
           call _c3B3D(R1) args: 0, res: 0, upd: 0;
       c3B3F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3B2X: // global
           I64[Sp] = block_c3B3o_info;
           _s3yhk::P64 = P64[R1 + 6];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhk::P64;
           if (R1 & 7 != 0) goto u3B53; else goto c3B3q;
       u3B53: // global
           call _c3B3o(R1) args: 0, res: 0, upd: 0;
       c3B3q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3B2W: // global
           I64[Sp] = block_c3B39_info;
           _s3yhh::P64 = P64[R1 + 7];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhh::P64;
           if (R1 & 7 != 0) goto u3B52; else goto c3B3b;
       u3B52: // global
           call _c3B39(R1) args: 0, res: 0, upd: 0;
       c3B3b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B4B() //  [R1]
         { info_tbl: [(c3B4B,
                       label: block_c3B4B_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B4B: // global
           if (R1 & 7 == 7) goto c3B4N; else goto u3B4V;
       c3B4N: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3B4V: // global
           Sp = Sp + 8;
           call _c3B4J() args: 0, res: 0, upd: 0;
     }
 },
 _c3B4m() //  [R1]
         { info_tbl: [(c3B4m,
                       label: block_c3B4m_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B4m: // global
           if (R1 & 7 == 6) goto c3B4y; else goto u3B4W;
       c3B4y: // global
           R3 = P64[R1 + 2];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.Read.Lex.$fEqLexeme_$c==1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       u3B4W: // global
           Sp = Sp + 16;
           call _c3B4J() args: 0, res: 0, upd: 0;
     }
 },
 _c3B47() //  [R1]
         { info_tbl: [(c3B47,
                       label: block_c3B47_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B47: // global
           if (R1 & 7 == 5) goto c3B4j; else goto u3B4X;
       c3B4j: // global
           R3 = P64[R1 + 3];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3B4X: // global
           Sp = Sp + 16;
           call _c3B4J() args: 0, res: 0, upd: 0;
     }
 },
 _c3B3S() //  [R1]
         { info_tbl: [(c3B3S,
                       label: block_c3B3S_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B3S: // global
           if (R1 & 7 == 4) goto c3B44; else goto u3B4Y;
       c3B44: // global
           R3 = P64[R1 + 4];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3B4Y: // global
           Sp = Sp + 16;
           call _c3B4J() args: 0, res: 0, upd: 0;
     }
 },
 _c3B3D() //  [R1]
         { info_tbl: [(c3B3D,
                       label: block_c3B3D_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B3D: // global
           if (R1 & 7 == 3) goto c3B3P; else goto u3B4Z;
       c3B3P: // global
           R3 = P64[R1 + 5];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3B4Z: // global
           Sp = Sp + 16;
           call _c3B4J() args: 0, res: 0, upd: 0;
     }
 },
 _c3B3o() //  [R1]
         { info_tbl: [(c3B3o,
                       label: block_c3B3o_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B3o: // global
           if (R1 & 7 == 2) goto c3B3A; else goto u3B50;
       c3B3A: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3B50: // global
           Sp = Sp + 16;
           call _c3B4J() args: 0, res: 0, upd: 0;
     }
 },
 _c3B39() //  [R1]
         { info_tbl: [(c3B39,
                       label: block_c3B39_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B39: // global
           if (R1 & 7 == 1) goto c3B3l; else goto u3B51;
       c3B3l: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.eqChar_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3B51: // global
           Sp = Sp + 16;
           call _c3B4J() args: 0, res: 0, upd: 0;
     }
 },
 _c3B4J() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B4J: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.07396423 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c/=_closure" {
     Text.Read.Lex.$fEqLexeme_$c/=_closure:
         const Text.Read.Lex.$fEqLexeme_$c/=_info;
 },
 Text.Read.Lex.$fEqLexeme_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c3B5r,
                       label: Text.Read.Lex.$fEqLexeme_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B5r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3B5s; else goto c3B5t;
       c3B5s: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3B5t: // global
           I64[Sp - 8] = block_c3B5l_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$fEqLexeme_$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3B5l() //  [R1]
         { info_tbl: [(c3B5l,
                       label: block_c3B5l_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B5l: // global
           if (R1 & 7 == 1) goto c3B5o; else goto c3B5p;
       c3B5o: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3B5p: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.074985969 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_closure" {
     Text.Read.Lex.$fEqLexeme_closure:
         const GHC.Classes.C:Eq_con_info;
         const Text.Read.Lex.$fEqLexeme_$c==_closure+2;
         const Text.Read.Lex.$fEqLexeme_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.075783698 UTC

[section ""data" . Text.Read.Lex.numberToFixed2_closure" {
     Text.Read.Lex.numberToFixed2_closure:
         const Text.Read.Lex.numberToFixed2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToFixed2_entry() //  [R1]
         { info_tbl: [(c3B5G,
                       label: Text.Read.Lex.numberToFixed2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B5G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3B5H; else goto c3B5I;
       c3B5H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3B5I: // global
           (_c3B5D::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3B5D::I64 == 0) goto c3B5F; else goto c3B5E;
       c3B5F: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3B5E: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3B5D::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.076722797 UTC

[section ""cstring" . lvl2_r3y9r_bytes" {
     lvl2_r3y9r_bytes:
         I8[] [116,104,105,115,32,115,104,111,117,108,100,32,110,111,116,32,104,97,112,112,101,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.077533044 UTC

[section ""data" . lvl3_r3y9s_closure" {
     lvl3_r3y9s_closure:
         const lvl3_r3y9s_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r3y9s_entry() //  [R1]
         { info_tbl: [(c3B5R,
                       label: lvl3_r3y9s_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B5R: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3B5S; else goto c3B5T;
       c3B5S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3B5T: // global
           (_c3B5M::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3B5M::I64 == 0) goto c3B5O; else goto c3B5N;
       c3B5O: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3B5N: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3B5M::I64;
           I64[Sp - 24] = block_c3B5P_info;
           R2 = lvl2_r3y9r_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3B5P() //  [R1]
         { info_tbl: [(c3B5P,
                       label: block_c3B5P_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B5P: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.079325304 UTC

[section ""data" . combine_r3y9t_closure" {
     combine_r3y9t_closure:
         const combine_r3y9t_info;
         const 0;
 },
 sat_s3yhO_entry() //  [R1]
         { info_tbl: [(c3B6p,
                       label: sat_s3yhO_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B6p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3B6q; else goto c3B6r;
       c3B6q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3B6r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call combine_r3y9t_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 combine_r3y9t_entry() //  [R2, R3]
         { info_tbl: [(c3B6w,
                       label: combine_r3y9t_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B6w: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3B6x; else goto c3B6y;
       c3B6x: // global
           R3 = R3;
           R2 = R2;
           R1 = combine_r3y9t_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3B6y: // global
           I64[Sp - 16] = block_c3B61_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3B6P; else goto c3B62;
       u3B6P: // global
           call _c3B61(R1) args: 0, res: 0, upd: 0;
       c3B62: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B61() //  [R1]
         { info_tbl: [(c3B61,
                       label: block_c3B61_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B61: // global
           if (R1 & 7 == 1) goto c3B6t; else goto c3B6u;
       c3B6t: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3B6u: // global
           I64[Sp - 8] = block_c3B67_info;
           _s3yhH::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3yhH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3B6O; else goto c3B68;
       u3B6O: // global
           call _c3B67(R1) args: 0, res: 0, upd: 0;
       c3B68: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B67() //  [R1]
         { info_tbl: [(c3B67,
                       label: block_c3B67_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B67: // global
           if (R1 & 7 == 1) goto c3B6F; else goto c3B6I;
       c3B6F: // global
           R1 = lvl3_r3y9s_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3B6I: // global
           I64[Sp - 8] = block_c3B6d_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3B6d() //  [R1]
         { info_tbl: [(c3B6d,
                       label: block_c3B6d_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B6d: // global
           I64[Sp] = block_c3B6h_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3B6h() //  [R1]
         { info_tbl: [(c3B6h,
                       label: block_c3B6h_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B6h: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3B6M; else goto c3B6L;
       c3B6M: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3B6L: // global
           I64[Hp - 48] = sat_s3yhO_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.084422886 UTC

[section ""data" . Text.Read.Lex.numberToFixed_go_closure" {
     Text.Read.Lex.numberToFixed_go_closure:
         const Text.Read.Lex.numberToFixed_go_info;
         const 0;
 },
 Text.Read.Lex.numberToFixed_go_entry() //  [R2, R3, R4]
         { info_tbl: [(c3B7U,
                       label: Text.Read.Lex.numberToFixed_go_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B7U: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3B7V; else goto u3B8S;
       c3B7V: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_go_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3B8S: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3B6R() args: 0, res: 0, upd: 0;
     }
 },
 _c3B6R() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B6R: // global
           I64[Sp - 8] = block_c3B6U_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3B8Z; else goto c3B6V;
       u3B8Z: // global
           call _c3B6U(R1) args: 0, res: 0, upd: 0;
       c3B6V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B6U() //  [R1]
         { info_tbl: [(c3B6U,
                       label: block_c3B6U_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B6U: // global
           if (R1 & 7 == 1) goto c3B7R; else goto c3B7S;
       c3B7R: // global
           R1 = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3B7S: // global
           I64[Sp - 8] = block_c3B70_info;
           _s3yhS::P64 = R1;
           _s3yhT::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3yhT::P64;
           P64[Sp + 24] = _s3yhS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3B90; else goto c3B71;
       u3B90: // global
           call _c3B70(R1) args: 0, res: 0, upd: 0;
       c3B71: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B70() //  [R1]
         { info_tbl: [(c3B70,
                       label: block_c3B70_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B70: // global
           if (R1 & 7 == 1) goto c3B83; else goto c3B85;
       c3B83: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3B85: // global
           I64[Sp + 8] = block_c3B76_info;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3B91; else goto c3B77;
       u3B91: // global
           call _c3B76(R1) args: 0, res: 0, upd: 0;
       c3B77: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B76() //  [R1]
         { info_tbl: [(c3B76,
                       label: block_c3B76_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B76: // global
           _s3yhZ::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_s3yhZ::I64, 40)) goto c3B8A; else goto c3B8B;
       c3B8A: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 8;
           call _c3B8a() args: 0, res: 0, upd: 0;
       c3B8B: // global
           I64[Sp] = block_c3B7f_info;
           _s3yhP::P64 = P64[Sp + 8];
           R3 = _s3yhP::P64;
           R2 = _s3yhP::P64;
           I64[Sp + 16] = _s3yhZ::I64;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3B8a() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B8a: // global
           I64[Sp - 8] = block_c3B8c_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3B98; else goto c3B8e;
       u3B98: // global
           call _c3B8c(R1) args: 0, res: 0, upd: 0;
       c3B8e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B8c() //  [R1]
         { info_tbl: [(c3B8c,
                       label: block_c3B8c_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B8c: // global
           _s3yi2::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3B8k; else goto c3B8t;
       c3B8k: // global
           R1 = _s3yi2::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3B8t: // global
           I64[Sp] = block_c3B8n_info;
           R3 = P64[Sp + 8];
           R2 = _s3yi2::P64;
           P64[Sp + 16] = P64[R1 + 14];
           P64[Sp + 24] = P64[R1 + 6];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3B8n() //  [R1]
         { info_tbl: [(c3B8n,
                       label: block_c3B8n_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B8n: // global
           I64[Sp] = block_c3B8r_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3B8r() //  [R1]
         { info_tbl: [(c3B8r,
                       label: block_c3B8r_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B8r: // global
           P64[Sp + 24] = R1;
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp + 8;
           call _c3B8a() args: 0, res: 0, upd: 0;
     }
 },
 _c3B7f() //  [R1]
         { info_tbl: [(c3B7f,
                       label: block_c3B7f_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B7f: // global
           _s3yhZ::I64 = I64[Sp + 16];
           _s3yia::I64 = _s3yhZ::I64 - (_s3yhZ::I64 + (_s3yhZ::I64 >> 63)) & (-2);
           if (_s3yia::I64 == 0) goto c3B8L; else goto u3B8V;
       c3B8L: // global
           _s3yhP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3B7F_info;
           R3 = P64[Sp + 24];
           R2 = _s3yhP::P64;
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call combine_r3y9t_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3B8V: // global
           I64[Sp - 8] = _s3yia::I64;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c3B7n() args: 0, res: 0, upd: 0;
     }
 },
 _c3B7F() //  [R1]
         { info_tbl: [(c3B7F,
                       label: block_c3B7F_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B7F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3B8P; else goto c3B8O;
       c3B8P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3B8O: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3yig::I64 = I64[Sp + 8] + 1;
           I64[Hp] = %MO_S_Shr_W64(_s3yig::I64 + (_s3yig::I64 >> 63), 1);
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = R1;
           call _c3B6R() args: 0, res: 0, upd: 0;
     }
 },
 _c3B7n() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B7n: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3B8H; else goto c3B8G;
       c3B8H: // global
           HpAlloc = 24;
           _s3yia::I64 = I64[Sp];
           I64[Sp] = block_c3B7m_info;
           R1 = _s3yia::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3B8G: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Text.Read.Lex.numberToFixed2_closure;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3B7q_info;
           R3 = Hp - 14;
           R2 = P64[Sp + 16];
           call combine_r3y9t_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3B7m() //  [R1]
         { info_tbl: [(c3B7m,
                       label: block_c3B7m_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B7m: // global
           I64[Sp] = R1;
           call _c3B7n() args: 0, res: 0, upd: 0;
     }
 },
 _c3B7q() //  [R1]
         { info_tbl: [(c3B7q,
                       label: block_c3B7q_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B7q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3B8K; else goto c3B8J;
       c3B8K: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3B8J: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3yib::I64 = I64[Sp + 24] + 1;
           I64[Hp] = %MO_S_Shr_W64(_s3yib::I64 + (_s3yib::I64 >> 63), 1);
           P64[Sp + 16] = P64[Sp + 8];
           P64[Sp + 24] = Hp - 7;
           P64[Sp + 32] = R1;
           Sp = Sp + 16;
           call _c3B6R() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.088997535 UTC

[section ""data" . Text.Read.Lex.valInteger_closure" {
     Text.Read.Lex.valInteger_closure:
         const Text.Read.Lex.valInteger_info;
         const 0;
 },
 sat_s3yin_entry() //  [R1]
         { info_tbl: [(c3B9o,
                       label: sat_s3yin_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B9o: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3B9s; else goto c3B9t;
       c3B9s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3B9t: // global
           I64[Sp - 8] = block_c3B9m_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3B9m() //  [R1]
         { info_tbl: [(c3B9m,
                       label: block_c3B9m_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B9m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3B9w; else goto c3B9v;
       c3B9w: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3B9v: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.valInteger_entry() //  [R2, R3]
         { info_tbl: [(c3B9x,
                       label: Text.Read.Lex.valInteger_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B9x: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3B9y; else goto c3B9z;
       c3B9y: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.valInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3B9z: // global
           I64[Sp - 24] = block_c3B9e_info;
           _s3yil::P64 = R3;
           R3 = R3;
           _s3yik::P64 = R2;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 16] = _s3yik::P64;
           P64[Sp - 8] = _s3yil::P64;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3B9e() //  [R1]
         { info_tbl: [(c3B9e,
                       label: block_c3B9e_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B9e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3B9C; else goto c3B9B;
       c3B9C: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3B9B: // global
           I64[Hp - 16] = sat_s3yin_info;
           P64[Hp] = P64[Sp + 16];
           R4 = R1;
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.092054078 UTC

[section ""data" . Text.Read.Lex.$w$sreadIntP_closure" {
     Text.Read.Lex.$w$sreadIntP_closure:
         const Text.Read.Lex.$w$sreadIntP_info;
         const 0;
 },
 sat_s3yiz_entry() //  [R1]
         { info_tbl: [(c3Baf,
                       label: sat_s3yiz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Baf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Baj; else goto c3Bak;
       c3Baj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bak: // global
           I64[Sp - 8] = block_c3Bad_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bad() //  [R1]
         { info_tbl: [(c3Bad,
                       label: block_c3Bad_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bad: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ban; else goto c3Bam;
       c3Ban: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Bam: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yiB_entry() //  [R1]
         { info_tbl: [(c3Bao,
                       label: sat_s3yiB_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bao: // global
           _s3yiB::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3Bap; else goto c3Baq;
       c3Baq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Bas; else goto c3Bar;
       c3Bas: // global
           HpAlloc = 24;
           goto c3Bap;
       c3Bap: // global
           R1 = _s3yiB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bar: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yiB::P64;
           _s3yip::P64 = P64[_s3yiB::P64 + 16];
           _s3yir::P64 = P64[_s3yiB::P64 + 24];
           _s3yit::P64 = P64[_s3yiB::P64 + 32];
           _s3yiv::P64 = P64[_s3yiB::P64 + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yit::P64;
           P64[Hp] = _s3yiv::P64;
           I64[Sp - 32] = block_c3Ba1_info;
           R3 = Hp - 14;
           R2 = _s3yir::P64;
           P64[Sp - 24] = _s3yip::P64;
           Sp = Sp - 32;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Ba1() //  [R1]
         { info_tbl: [(c3Ba1,
                       label: block_c3Ba1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ba1: // global
           I64[Sp - 8] = block_c3Ba5_info;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Ba5() //  [R1]
         { info_tbl: [(c3Ba5,
                       label: block_c3Ba5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ba5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Baw; else goto c3Bav;
       c3Baw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Bav: // global
           I64[Hp - 16] = sat_s3yiz_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yiC_entry() //  [R1, R2]
         { info_tbl: [(c3Bax,
                       label: sat_s3yiC_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bax: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3BaB; else goto c3BaA;
       c3BaB: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BaA: // global
           _s3yip::P64 = P64[R1 + 7];
           _s3yir::P64 = P64[R1 + 15];
           _s3yis::P64 = P64[R1 + 23];
           _s3yit::P64 = P64[R1 + 31];
           I64[Hp - 40] = sat_s3yiB_info;
           P64[Hp - 24] = _s3yip::P64;
           P64[Hp - 16] = _s3yir::P64;
           P64[Hp - 8] = _s3yit::P64;
           P64[Hp] = R2;
           R2 = Hp - 40;
           R1 = _s3yis::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yiF_entry() //  [R1, R2]
         { info_tbl: [(c3BaG,
                       label: sat_s3yiF_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BaG: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3BaH; else goto c3BaI;
       c3BaH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BaI: // global
           I64[Sp - 48] = block_c3B9M_info;
           _s3yit::P64 = R2;
           R2 = R2;
           _s3yip::P64 = P64[R1 + 7];
           _s3yiq::P64 = P64[R1 + 15];
           _s3yir::P64 = P64[R1 + 23];
           _s3yis::P64 = P64[R1 + 31];
           R1 = _s3yiq::P64;
           P64[Sp - 40] = _s3yip::P64;
           P64[Sp - 32] = _s3yiq::P64;
           P64[Sp - 24] = _s3yir::P64;
           P64[Sp - 16] = _s3yis::P64;
           P64[Sp - 8] = _s3yit::P64;
           Sp = Sp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3B9M() //  [R1]
         { info_tbl: [(c3B9M,
                       label: block_c3B9M_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3B9M: // global
           if (R1 & 7 == 1) goto c3BaD; else goto c3BaE;
       c3BaD: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3BaE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BaQ; else goto c3BaP;
       c3BaQ: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BaP: // global
           I64[Hp - 32] = sat_s3yiC_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           I64[Sp + 40] = block_c3BaL_info;
           R3 = Hp - 31;
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BaL() //  [R1]
         { info_tbl: [(c3BaL,
                       label: block_c3BaL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BaL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BaT; else goto c3BaS;
       c3BaT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BaS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$w$sreadIntP_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3BaU,
                       label: Text.Read.Lex.$w$sreadIntP_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BaU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BaY; else goto c3BaX;
       c3BaY: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$sreadIntP_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3BaX: // global
           I64[Hp - 32] = sat_s3yiF_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.09681326 UTC

[section ""data" . Text.Read.Lex.readIntP1_closure" {
     Text.Read.Lex.readIntP1_closure:
         const Text.Read.Lex.readIntP1_info;
         const 0;
 },
 Text.Read.Lex.readIntP1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3Bb6,
                       label: Text.Read.Lex.readIntP1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bb6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Bb7; else goto c3Bb8;
       c3Bb7: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readIntP1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Bb8: // global
           I64[Sp - 8] = block_c3Bb3_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bb3() //  [R1]
         { info_tbl: [(c3Bb3,
                       label: block_c3Bb3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bb3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Bbb; else goto c3Bba;
       c3Bbb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Bba: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.098338727 UTC

[section ""data" . Text.Read.Lex.readIntP_$sreadIntP_closure" {
     Text.Read.Lex.readIntP_$sreadIntP_closure:
         const Text.Read.Lex.readIntP_$sreadIntP_info;
         const 0;
 },
 Text.Read.Lex.readIntP_$sreadIntP_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3Bbg,
                       label: Text.Read.Lex.readIntP_$sreadIntP_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bbg: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readIntP1_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.101413346 UTC

[section ""data" . Text.Read.Lex.$wreadIntP_closure" {
     Text.Read.Lex.$wreadIntP_closure:
         const Text.Read.Lex.$wreadIntP_info;
         const 0;
 },
 lvl116_s3yiR_entry() //  [R1]
         { info_tbl: [(c3Bbr,
                       label: lvl116_s3yiR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bbr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Bbs; else goto c3Bbt;
       c3Bbs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bbt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yj4_entry() //  [R1]
         { info_tbl: [(c3Bce,
                       label: sat_s3yj4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bce: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Bcf; else goto c3Bcg;
       c3Bcf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bcg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Bcb_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Bck; else goto c3Bcc;
       u3Bck: // global
           call _c3Bcb(R1) args: 0, res: 0, upd: 0;
       c3Bcc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3Bcb() //  [R1]
         { info_tbl: [(c3Bcb,
                       label: block_c3Bcb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bcb: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yj5_entry() //  [R1]
         { info_tbl: [(c3Bcl,
                       label: sat_s3yj5_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bcl: // global
           _s3yj5::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Bcm; else goto c3Bcn;
       c3Bcn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Bcp; else goto c3Bco;
       c3Bcp: // global
           HpAlloc = 24;
           goto c3Bcm;
       c3Bcm: // global
           R1 = _s3yj5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bco: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yj5::P64;
           _s3yiM::P64 = P64[_s3yj5::P64 + 16];
           _s3yiZ::P64 = P64[_s3yj5::P64 + 24];
           I64[Hp - 16] = sat_s3yj4_info;
           P64[Hp] = _s3yiZ::P64;
           R2 = _s3yiM::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yj1_entry() //  [R1]
         { info_tbl: [(c3Bcu,
                       label: sat_s3yj1_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bcu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Bcv; else goto c3Bcw;
       c3Bcv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bcw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s3yj9_entry() //  [R1]
         { info_tbl: [(c3Bcx,
                       label: sat_s3yj9_info
                       rep:HeapRep 6 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bcx: // global
           _s3yj9::P64 = R1;
           if ((Sp + -72) < SpLim) (likely: False) goto c3Bcy; else goto c3Bcz;
       c3Bcz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3BcB; else goto c3BcA;
       c3BcB: // global
           HpAlloc = 24;
           goto c3Bcy;
       c3Bcy: // global
           R1 = _s3yj9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BcA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yj9::P64;
           _s3yiM::P64 = P64[_s3yj9::P64 + 16];
           _s3yiN::P64 = P64[_s3yj9::P64 + 24];
           _s3yiP::P64 = P64[_s3yj9::P64 + 32];
           _s3yiR::P64 = P64[_s3yj9::P64 + 40];
           _s3yiS::P64 = P64[_s3yj9::P64 + 48];
           _s3yiU::P64 = P64[_s3yj9::P64 + 56];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yiS::P64;
           P64[Hp] = _s3yiU::P64;
           I64[Sp - 48] = block_c3BbO_info;
           R3 = Hp - 14;
           R2 = _s3yiP::P64;
           P64[Sp - 40] = _s3yiM::P64;
           P64[Sp - 32] = _s3yiN::P64;
           P64[Sp - 24] = _s3yiR::P64;
           Sp = Sp - 48;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3BbO() //  [R1]
         { info_tbl: [(c3BbO,
                       label: block_c3BbO_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BbO: // global
           P64[Sp] = R1;
           P64[Sp + 24] = P64[Sp + 24];
           call _c3BbV() args: 0, res: 0, upd: 0;
     }
 },
 _c3BbV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BbV: // global
           _s3yiX::P64 = P64[Sp];
           I64[Sp] = block_c3BbX_info;
           R1 = _s3yiX::P64;
           if (R1 & 7 != 0) goto u3BcT; else goto c3BbY;
       u3BcT: // global
           call _c3BbX(R1) args: 0, res: 0, upd: 0;
       c3BbY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3BbX() //  [R1]
         { info_tbl: [(c3BbX,
                       label: block_c3BbX_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BbX: // global
           _s3yiW::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3BcH; else goto c3BcJ;
       c3BcH: // global
           R1 = _s3yiW::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c3BcJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3BcM; else goto c3BcL;
       c3BcM: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3BcL: // global
           _s3yiZ::P64 = P64[R1 + 6];
           _s3yj0::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_s3yj5_info;
           _s3yiM::P64 = P64[Sp + 8];
           P64[Hp - 48] = _s3yiM::P64;
           P64[Hp - 40] = _s3yiZ::P64;
           I64[Hp - 32] = sat_s3yj1_info;
           P64[Hp - 16] = _s3yiM::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s3yiW::P64;
           I64[Sp] = block_c3BcI_info;
           R2 = _s3yiM::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 64;
           P64[Sp + 24] = _s3yj0::P64;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 _c3BcI() //  [R1]
         { info_tbl: [(c3BcI,
                       label: block_c3BcI_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BcI: // global
           _s3yiX::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp] = _s3yiX::P64;
           call _c3BbV() args: 0, res: 0, upd: 0;
     }
 },
 sat_s3yja_entry() //  [R1, R2]
         { info_tbl: [(c3BcV,
                       label: sat_s3yja_info
                       rep:HeapRep 6 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BcV: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3BcZ; else goto c3BcY;
       c3BcZ: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BcY: // global
           _s3yiM::P64 = P64[R1 + 7];
           _s3yiN::P64 = P64[R1 + 15];
           _s3yiP::P64 = P64[R1 + 23];
           _s3yiQ::P64 = P64[R1 + 31];
           _s3yiR::P64 = P64[R1 + 39];
           _s3yiS::P64 = P64[R1 + 47];
           I64[Hp - 56] = sat_s3yj9_info;
           P64[Hp - 40] = _s3yiM::P64;
           P64[Hp - 32] = _s3yiN::P64;
           P64[Hp - 24] = _s3yiP::P64;
           P64[Hp - 16] = _s3yiR::P64;
           P64[Hp - 8] = _s3yiS::P64;
           P64[Hp] = R2;
           R2 = Hp - 56;
           R1 = _s3yiQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yjd_entry() //  [R1, R2]
         { info_tbl: [(c3Bd4,
                       label: sat_s3yjd_info
                       rep:HeapRep 6 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bd4: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3Bd5; else goto c3Bd6;
       c3Bd5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Bd6: // global
           I64[Sp - 64] = block_c3Bbz_info;
           _s3yiS::P64 = R2;
           R2 = R2;
           _s3yiM::P64 = P64[R1 + 7];
           _s3yiN::P64 = P64[R1 + 15];
           _s3yiO::P64 = P64[R1 + 23];
           _s3yiP::P64 = P64[R1 + 31];
           _s3yiQ::P64 = P64[R1 + 39];
           _s3yiR::P64 = P64[R1 + 47];
           R1 = _s3yiO::P64;
           P64[Sp - 56] = _s3yiM::P64;
           P64[Sp - 48] = _s3yiN::P64;
           P64[Sp - 40] = _s3yiO::P64;
           P64[Sp - 32] = _s3yiP::P64;
           P64[Sp - 24] = _s3yiQ::P64;
           P64[Sp - 16] = _s3yiR::P64;
           P64[Sp - 8] = _s3yiS::P64;
           Sp = Sp - 64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bbz() //  [R1]
         { info_tbl: [(c3Bbz,
                       label: block_c3Bbz_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bbz: // global
           if (R1 & 7 == 1) goto c3Bd1; else goto c3Bd2;
       c3Bd1: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Bd2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Bde; else goto c3Bdd;
       c3Bde: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Bdd: // global
           I64[Hp - 48] = sat_s3yja_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           I64[Sp + 56] = block_c3Bd9_info;
           R3 = Hp - 47;
           R2 = P64[Sp + 24];
           Sp = Sp + 56;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bd9() //  [R1]
         { info_tbl: [(c3Bd9,
                       label: block_c3Bd9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bd9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Bdh; else goto c3Bdg;
       c3Bdh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Bdg: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wreadIntP_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3Bdi,
                       label: Text.Read.Lex.$wreadIntP_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bdi: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Bdm; else goto c3Bdl;
       c3Bdm: // global
           HpAlloc = 80;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wreadIntP_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Bdl: // global
           I64[Hp - 72] = lvl116_s3yiR_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3yjd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = Hp - 72;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.106837557 UTC

[section ""data" . Text.Read.Lex.readIntP2_closure" {
     Text.Read.Lex.readIntP2_closure:
         const Text.Read.Lex.readIntP2_info;
         const 0;
 },
 Text.Read.Lex.readIntP2_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3Bdu,
                       label: Text.Read.Lex.readIntP2_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bdu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Bdv; else goto c3Bdw;
       c3Bdv: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readIntP2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Bdw: // global
           I64[Sp - 8] = block_c3Bdr_info;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bdr() //  [R1]
         { info_tbl: [(c3Bdr,
                       label: block_c3Bdr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bdr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Bdz; else goto c3Bdy;
       c3Bdz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Bdy: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.108191922 UTC

[section ""data" . Text.Read.Lex.readIntP_closure" {
     Text.Read.Lex.readIntP_closure:
         const Text.Read.Lex.readIntP_info;
         const 0;
 },
 Text.Read.Lex.readIntP_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3BdE,
                       label: Text.Read.Lex.readIntP_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BdE: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readIntP2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.109022777 UTC

[section ""data" . sat_s3yjl_closure" {
     sat_s3yjl_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.110349776 UTC

[section ""data" . sat_s3yjm_closure" {
     sat_s3yjm_closure:
         const :_con_info;
         const sat_s3yjl_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.111092204 UTC

[section ""data" . Text.Read.Lex.numberToFixed1_closure" {
     Text.Read.Lex.numberToFixed1_closure:
         const Text.Read.Lex.numberToFixed1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToFixed1_entry() //  [R1]
         { info_tbl: [(c3BdN,
                       label: Text.Read.Lex.numberToFixed1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BdN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BdO; else goto c3BdP;
       c3BdO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BdP: // global
           (_c3BdK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BdK::I64 == 0) goto c3BdM; else goto c3BdL;
       c3BdM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BdL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BdK::I64;
           R3 = sat_s3yjm_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.113627325 UTC

[section ""data" . Text.Read.Lex.numberToInteger_closure" {
     Text.Read.Lex.numberToInteger_closure:
         const Text.Read.Lex.numberToInteger_info;
         const 0;
 },
 sat_s3yjt_entry() //  [R1]
         { info_tbl: [(c3Bed,
                       label: sat_s3yjt_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bed: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Beh; else goto c3Bei;
       c3Beh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bei: // global
           I64[Sp - 8] = block_c3Beb_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Beb() //  [R1]
         { info_tbl: [(c3Beb,
                       label: block_c3Beb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Beb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Bel; else goto c3Bek;
       c3Bel: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Bek: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yjr_entry() //  [R1]
         { info_tbl: [(c3Beq,
                       label: sat_s3yjr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Beq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ber; else goto c3Bes;
       c3Ber: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bes: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yjv_entry() //  [R1]
         { info_tbl: [(c3Bet,
                       label: sat_s3yjv_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bet: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Beu; else goto c3Bev;
       c3Beu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bev: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3Be3_info;
           _s3yjq::P64 = P64[R1 + 24];
           R3 = _s3yjq::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s3yjq::P64;
           Sp = Sp - 40;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Be3() //  [R1]
         { info_tbl: [(c3Be3,
                       label: block_c3Be3_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Be3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Bey; else goto c3Bex;
       c3Bey: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Bex: // global
           I64[Hp - 40] = sat_s3yjt_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_s3yjr_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yjB_entry() //  [R1]
         { info_tbl: [(c3BeP,
                       label: sat_s3yjB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BeP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BeQ; else goto c3BeR;
       c3BeQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BeR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.numberToInteger_entry() //  [R2]
         { info_tbl: [(c3BeW,
                       label: Text.Read.Lex.numberToInteger_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BeW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3BeX; else goto c3BeY;
       c3BeX: // global
           R2 = R2;
           R1 = Text.Read.Lex.numberToInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BeY: // global
           I64[Sp - 8] = block_c3BdU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Bft; else goto c3BdV;
       u3Bft: // global
           call _c3BdU(R1) args: 0, res: 0, upd: 0;
       c3BdV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BdU() //  [R1]
         { info_tbl: [(c3BdU,
                       label: block_c3BdU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BdU: // global
           if (R1 & 7 == 1) goto c3BeT; else goto c3BeU;
       c3BeT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Bf2; else goto c3Bf1;
       c3Bf2: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Bf1: // global
           _s3yjp::P64 = P64[R1 + 7];
           _s3yjq::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3yjv_info;
           P64[Hp - 24] = _s3yjp::P64;
           P64[Hp - 16] = _s3yjq::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3BeU: // global
           I64[Sp - 16] = block_c3BeB_info;
           _s3yjw::P64 = P64[R1 + 6];
           _s3yjy::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3yjy::P64;
           P64[Sp] = _s3yjw::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Bfp; else goto c3BeC;
       u3Bfp: // global
           call _c3BeB(R1) args: 0, res: 0, upd: 0;
       c3BeC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BeB() //  [R1]
         { info_tbl: [(c3BeB,
                       label: block_c3BeB_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BeB: // global
           if (R1 & 7 == 1) goto c3Bf6; else goto u3Bfn;
       c3Bf6: // global
           _s3yjy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3BeG_info;
           R1 = _s3yjy::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Bfq; else goto c3BeH;
       u3Bfq: // global
           call _c3BeG(R1) args: 0, res: 0, upd: 0;
       c3BeH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Bfn: // global
           Sp = Sp + 24;
           call _c3Bfk() args: 0, res: 0, upd: 0;
     }
 },
 _c3BeG() //  [R1]
         { info_tbl: [(c3BeG,
                       label: block_c3BeG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BeG: // global
           if (R1 & 7 == 1) goto c3Bf9; else goto u3Bfo;
       c3Bf9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Bfc; else goto c3Bfb;
       c3Bfc: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Bfb: // global
           I64[Hp - 32] = sat_s3yjB_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Bfo: // global
           Sp = Sp + 16;
           call _c3Bfk() args: 0, res: 0, upd: 0;
     }
 },
 _c3Bfk() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bfk: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.117449576 UTC

[section ""data" . sat_s3yjE_closure" {
     sat_s3yjE_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.118055691 UTC

[section ""data" . sat_s3yjF_closure" {
     sat_s3yjF_closure:
         const :_con_info;
         const sat_s3yjE_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.118925434 UTC

[section ""data" . lvl4_r3y9u_closure" {
     lvl4_r3y9u_closure:
         const lvl4_r3y9u_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r3y9u_entry() //  [R1]
         { info_tbl: [(c3BfA,
                       label: lvl4_r3y9u_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BfA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BfB; else goto c3BfC;
       c3BfB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BfC: // global
           (_c3Bfx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Bfx::I64 == 0) goto c3Bfz; else goto c3Bfy;
       c3Bfz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Bfy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Bfx::I64;
           R3 = sat_s3yjF_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.12091522 UTC

[section ""data" . $wfracExp_r3y9v_closure" {
     $wfracExp_r3y9v_closure:
         const $wfracExp_r3y9v_info;
         const 0;
 },
 $wfracExp_r3y9v_entry() //  [R2, R3, R4]
         { info_tbl: [(c3BfO,
                       label: $wfracExp_r3y9v_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BfO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3BfP; else goto u3Bh7;
       c3BfP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wfracExp_r3y9v_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3Bh7: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3BfE() args: 0, res: 0, upd: 0;
     }
 },
 _c3BfE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BfE: // global
           I64[Sp - 8] = block_c3BfH_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Bh9; else goto c3BfI;
       u3Bh9: // global
           call _c3BfH(R1) args: 0, res: 0, upd: 0;
       c3BfI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BfH() //  [R1]
         { info_tbl: [(c3BfH,
                       label: block_c3BfH_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BfH: // global
           _s3yjG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3BfL; else goto c3BfM;
       c3BfL: // global
           I64[Sp] = block_c3BfT_info;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           R2 = _s3yjG::P64;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c3BfM: // global
           I64[Sp] = block_c3BgG_info;
           R3 = lvl4_r3y9u_closure;
           R2 = _s3yjG::P64;
           P64[Sp + 8] = P64[R1 + 14];
           P64[Sp + 24] = P64[R1 + 6];
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BfT() //  [R1]
         { info_tbl: [(c3BfT,
                       label: block_c3BfT_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BfT: // global
           _s3yjG::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3Bgv; else goto c3Bg5;
       c3Bgv: // global
           I64[Sp + 8] = block_c3Bgd_info;
           R2 = _s3yjG::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c3Bg5: // global
           I64[Sp + 8] = block_c3BfY_info;
           R3 = _s3yjG::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bgd() //  [R1]
         { info_tbl: [(c3Bgd,
                       label: block_c3Bgd_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bgd: // global
           I64[Sp] = block_c3Bgh_info;
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bgh() //  [R1]
         { info_tbl: [(c3Bgh,
                       label: block_c3Bgh_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bgh: // global
           I64[Sp] = block_c3Bgl_info;
           R2 = R1;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bgl() //  [R1]
         { info_tbl: [(c3Bgl,
                       label: block_c3Bgl_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bgl: // global
           I64[Sp] = block_c3Bgp_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bgp() //  [R1]
         { info_tbl: [(c3Bgp,
                       label: block_c3Bgp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bgp: // global
           _s3yjH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Bgt_info;
           R3 = R1;
           R2 = _s3yjH::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bgt() //  [R1]
         { info_tbl: [(c3Bgt,
                       label: block_c3Bgt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bgt: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3BfY() //  [R1]
         { info_tbl: [(c3BfY,
                       label: block_c3BfY_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BfY: // global
           I64[Sp + 16] = block_c3Bg2_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bg2() //  [R1]
         { info_tbl: [(c3Bg2,
                       label: block_c3Bg2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bg2: // global
           R2 = GHC.Real.$fEnumRatio1_closure;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3BgG() //  [R1]
         { info_tbl: [(c3BgG,
                       label: block_c3BgG_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BgG: // global
           I64[Sp] = block_c3BgK_info;
           _s3yjU::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3yjU::P64;
           if (R1 & 7 != 0) goto u3Bhb; else goto c3BgL;
       u3Bhb: // global
           call _c3BgK(R1) args: 0, res: 0, upd: 0;
       c3BgL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BgK() //  [R1]
         { info_tbl: [(c3BgK,
                       label: block_c3BgK_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BgK: // global
           I64[Sp] = block_c3BgP_info;
           R2 = I64[R1 + 7];
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BgP() //  [R1]
         { info_tbl: [(c3BgP,
                       label: block_c3BgP_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BgP: // global
           I64[Sp] = block_c3BgT_info;
           R3 = Text.Read.Lex.numberToFixed1_closure;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BgT() //  [R1]
         { info_tbl: [(c3BgT,
                       label: block_c3BgT_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BgT: // global
           I64[Sp] = block_c3BgX_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BgX() //  [R1]
         { info_tbl: [(c3BgX,
                       label: block_c3BgX_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BgX: // global
           _s3yjI::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = R1;
           P64[Sp + 24] = _s3yjI::P64;
           Sp = Sp + 8;
           call _c3BfE() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.126161362 UTC

[section ""data" . Text.Read.Lex.numberToFixed_integerTake_closure" {
     Text.Read.Lex.numberToFixed_integerTake_closure:
         const Text.Read.Lex.numberToFixed_integerTake_info;
         const 0;
 },
 sat_s3yk7_entry() //  [R1]
         { info_tbl: [(c3Bhx,
                       label: sat_s3yk7_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bhx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Bhy; else goto c3Bhz;
       c3Bhy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bhz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3Bhv_info;
           R3 = lvl4_r3y9u_closure;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Bhv() //  [R1]
         { info_tbl: [(c3Bhv,
                       label: block_c3Bhv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bhv: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_integerTake_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.numberToFixed_integerTake_entry() //  [R2, R3]
         { info_tbl: [(c3BhG,
                       label: Text.Read.Lex.numberToFixed_integerTake_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BhG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3BhH; else goto c3BhI;
       c3BhH: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_integerTake_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3BhI: // global
           I64[Sp - 24] = block_c3Bhh_info;
           _s3yk1::P64 = R3;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           _s3yk0::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3yk0::P64;
           P64[Sp - 8] = _s3yk1::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bhh() //  [R1]
         { info_tbl: [(c3Bhh,
                       label: block_c3Bhh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bhh: // global
           if (R1 == 1) goto u3BhX; else goto c3BhE;
       u3BhX: // global
           Sp = Sp + 24;
           call _c3BhF() args: 0, res: 0, upd: 0;
       c3BhE: // global
           I64[Sp] = block_c3Bhl_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3BhZ; else goto c3Bhm;
       u3BhZ: // global
           call _c3Bhl(R1) args: 0, res: 0, upd: 0;
       c3Bhm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bhl() //  [R1]
         { info_tbl: [(c3Bhl,
                       label: block_c3Bhl_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bhl: // global
           if (R1 & 7 == 1) goto u3BhY; else goto c3BhP;
       u3BhY: // global
           Sp = Sp + 24;
           call _c3BhF() args: 0, res: 0, upd: 0;
       c3BhP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3BhS; else goto c3BhR;
       c3BhS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BhR: // global
           _s3yk4::P64 = P64[R1 + 6];
           _s3yk5::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s3yk7_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s3yk5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yk4::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3BhF() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BhF: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.128128223 UTC

[section ""data" . Text.Read.Lex.numberToFixed_xs_closure" {
     Text.Read.Lex.numberToFixed_xs_closure:
         const :_con_info;
         const Text.Read.Lex.$fShowLexeme2_closure+1;
         const Text.Read.Lex.numberToFixed_xs_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.131176034 UTC

[section ""data" . Text.Read.Lex.numberToFixed_closure" {
     Text.Read.Lex.numberToFixed_closure:
         const Text.Read.Lex.numberToFixed_info;
         const 0;
 },
 sat_s3ykf_entry() //  [R1]
         { info_tbl: [(c3Bip,
                       label: sat_s3ykf_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bip: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Bit; else goto c3Biu;
       c3Bit: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Biu: // global
           I64[Sp - 8] = block_c3Bin_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bin() //  [R1]
         { info_tbl: [(c3Bin,
                       label: block_c3Bin_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bin: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Bix; else goto c3Biw;
       c3Bix: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Biw: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ykd_entry() //  [R1]
         { info_tbl: [(c3BiC,
                       label: sat_s3ykd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BiC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BiD; else goto c3BiE;
       c3BiD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BiE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ykh_entry() //  [R1]
         { info_tbl: [(c3BiF,
                       label: sat_s3ykh_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BiF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3BiG; else goto c3BiH;
       c3BiG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BiH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3Bif_info;
           _s3ykc::P64 = P64[R1 + 24];
           R3 = _s3ykc::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s3ykc::P64;
           Sp = Sp - 40;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Bif() //  [R1]
         { info_tbl: [(c3Bif,
                       label: block_c3Bif_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bif: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3BiK; else goto c3BiJ;
       c3BiK: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3BiJ: // global
           I64[Hp - 40] = sat_s3ykf_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_s3ykd_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yko_entry() //  [R1]
         { info_tbl: [(c3Bj1,
                       label: sat_s3yko_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bj1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Bj2; else goto c3Bj3;
       c3Bj2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bj3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ykv_entry() //  [R1]
         { info_tbl: [(c3Bjj,
                       label: sat_s3ykv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bjj: // global
           R3 = Text.Read.Lex.numberToFixed_xs_closure+2;
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ykx_entry() //  [R1]
         { info_tbl: [(c3BjA,
                       label: sat_s3ykx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BjA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3BjE; else goto c3BjF;
       c3BjE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BjF: // global
           I64[Sp - 8] = block_c3Bjy_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bjy() //  [R1]
         { info_tbl: [(c3Bjy,
                       label: block_c3Bjy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bjy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BjI; else goto c3BjH;
       c3BjI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3BjH: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ykz_entry() //  [R1]
         { info_tbl: [(c3BjJ,
                       label: sat_s3ykz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BjJ: // global
           _s3ykz::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3BjK; else goto c3BjL;
       c3BjL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3BjN; else goto c3BjM;
       c3BjN: // global
           HpAlloc = 24;
           goto c3BjK;
       c3BjK: // global
           R1 = _s3ykz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BjM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ykz::P64;
           _s3yk8::P64 = P64[_s3ykz::P64 + 16];
           _s3ykr::P64 = P64[_s3ykz::P64 + 24];
           I64[Hp - 16] = sat_s3ykv_info;
           P64[Hp] = _s3ykr::P64;
           I64[Sp - 24] = block_c3Bjm_info;
           R3 = Hp - 16;
           R2 = _s3yk8::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.numberToFixed_integerTake_entry(R3,
                                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Bjm() //  [R1]
         { info_tbl: [(c3Bjm,
                       label: block_c3Bjm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bjm: // global
           I64[Sp - 8] = block_c3Bjq_info;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Bjq() //  [R1]
         { info_tbl: [(c3Bjq,
                       label: block_c3Bjq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bjq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3BjR; else goto c3BjQ;
       c3BjR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3BjQ: // global
           I64[Hp - 16] = sat_s3ykx_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ykt_entry() //  [R1]
         { info_tbl: [(c3BjW,
                       label: sat_s3ykt_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BjW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BjX; else goto c3BjY;
       c3BjX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BjY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.numberToFixed_entry() //  [R2, R3]
         { info_tbl: [(c3Bk3,
                       label: Text.Read.Lex.numberToFixed_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bk3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Bk4; else goto c3Bk5;
       c3Bk4: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Bk5: // global
           I64[Sp - 16] = block_c3Bi6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3BkN; else goto c3Bi7;
       u3BkN: // global
           call _c3Bi6(R1) args: 0, res: 0, upd: 0;
       c3Bi7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bi6() //  [R1]
         { info_tbl: [(c3Bi6,
                       label: block_c3Bi6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bi6: // global
           if (R1 & 7 == 1) goto c3Bk0; else goto c3Bk1;
       c3Bk0: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Bka; else goto c3Bk9;
       c3Bka: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Bk9: // global
           _s3ykb::P64 = P64[R1 + 7];
           _s3ykc::P64 = P64[R1 + 15];
           I64[Hp - 64] = sat_s3ykh_info;
           P64[Hp - 48] = _s3ykb::P64;
           P64[Hp - 40] = _s3ykc::P64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = Text.Read.Lex.numberToFixed2_closure;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Bk1: // global
           I64[Sp - 16] = block_c3BiN_info;
           _s3ykj::P64 = P64[R1 + 6];
           _s3ykl::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3ykl::P64;
           P64[Sp] = _s3ykj::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3BkI; else goto c3BiO;
       u3BkI: // global
           call _c3BiN(R1) args: 0, res: 0, upd: 0;
       c3BiO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BiN() //  [R1]
         { info_tbl: [(c3BiN,
                       label: block_c3BiN_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BiN: // global
           _s3ykl::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3Bke; else goto c3Bkr;
       c3Bke: // global
           I64[Sp + 8] = block_c3BiS_info;
           R1 = _s3ykl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3BkJ; else goto c3BiT;
       u3BkJ: // global
           call _c3BiS(R1) args: 0, res: 0, upd: 0;
       c3BiT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Bkr: // global
           I64[Sp] = block_c3Bj6_info;
           _s3ykr::P64 = P64[R1 + 6];
           R1 = _s3ykl::P64;
           P64[Sp + 8] = _s3ykr::P64;
           if (R1 & 7 != 0) goto u3BkK; else goto c3Bj7;
       u3BkK: // global
           call _c3Bj6(R1) args: 0, res: 0, upd: 0;
       c3Bj7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BiS() //  [R1]
         { info_tbl: [(c3BiS,
                       label: block_c3BiS_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BiS: // global
           if (R1 & 7 == 1) goto c3Bki; else goto u3BkH;
       c3Bki: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Bkl; else goto c3Bkk;
       c3Bkl: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Bkk: // global
           I64[Hp - 56] = sat_s3yko_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Text.Read.Lex.numberToFixed2_closure;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3BkH: // global
           Sp = Sp + 24;
           call _c3BkC() args: 0, res: 0, upd: 0;
     }
 },
 _c3Bj6() //  [R1]
         { info_tbl: [(c3Bj6,
                       label: block_c3Bj6_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bj6: // global
           if (R1 & 7 == 1) goto c3Bkv; else goto u3BkG;
       c3Bkv: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Bky; else goto c3Bkx;
       c3Bky: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Bkx: // global
           I64[Hp - 88] = sat_s3ykz_info;
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sat_s3ykt_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 88;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3BkG: // global
           Sp = Sp + 32;
           call _c3BkC() args: 0, res: 0, upd: 0;
     }
 },
 _c3BkC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BkC: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.138877221 UTC

[section ""data" . Text.Read.Lex.$wnumberToRational_closure" {
     Text.Read.Lex.$wnumberToRational_closure:
         const Text.Read.Lex.$wnumberToRational_info;
         const 0;
 },
 sat_s3ykK_entry() //  [R1]
         { info_tbl: [(c3Bl7,
                       label: sat_s3ykK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bl7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Blb; else goto c3Blc;
       c3Blb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Blc: // global
           I64[Sp - 8] = block_c3Bl5_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bl5() //  [R1]
         { info_tbl: [(c3Bl5,
                       label: block_c3Bl5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bl5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Blf; else goto c3Ble;
       c3Blf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Ble: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ykI_entry() //  [R1]
         { info_tbl: [(c3Bln,
                       label: sat_s3ykI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bln: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Blo; else goto c3Blp;
       c3Blo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Blp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Blk_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Blt; else goto c3Bll;
       u3Blt: // global
           call _c3Blk(R1) args: 0, res: 0, upd: 0;
       c3Bll: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3Blk() //  [R1]
         { info_tbl: [(c3Blk,
                       label: block_c3Blk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Blk: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.$wnumberToRational_entry() //  [R2]
         { info_tbl: [(c3Bly,
                       label: Text.Read.Lex.$wnumberToRational_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bly: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Blz; else goto c3BlA;
       c3Blz: // global
           R2 = R2;
           R1 = Text.Read.Lex.$wnumberToRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BlA: // global
           I64[Sp - 8] = block_c3BkS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3BnP; else goto c3BkT;
       u3BnP: // global
           call _c3BkS(R1) args: 0, res: 0, upd: 0;
       c3BkT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BkS() //  [R1]
         { info_tbl: [(c3BkS,
                       label: block_c3BkS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BkS: // global
           if (R1 & 7 == 1) goto c3Blv; else goto c3Blw;
       c3Blv: // global
           I64[Sp - 16] = block_c3BkX_info;
           _s3ykF::P64 = P64[R1 + 15];
           R3 = _s3ykF::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 8] = _s3ykF::P64;
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3Blw: // global
           I64[Sp - 16] = block_c3BlR_info;
           _s3ykO::P64 = P64[R1 + 6];
           _s3ykQ::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3ykQ::P64;
           P64[Sp] = _s3ykO::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3BnO; else goto c3BlT;
       u3BnO: // global
           call _c3BlR(R1) args: 0, res: 0, upd: 0;
       c3BlT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BkX() //  [R1]
         { info_tbl: [(c3BkX,
                       label: block_c3BkX_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BkX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3BlJ; else goto c3BlI;
       c3BlJ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BlI: // global
           I64[Hp - 40] = sat_s3ykK_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = sat_s3ykI_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3BlB_info;
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BlB() //  [R1]
         { info_tbl: [(c3BlB,
                       label: block_c3BlB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BlB: // global
           I64[Sp] = block_c3BlF_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BlF() //  [R1]
         { info_tbl: [(c3BlF,
                       label: block_c3BlF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BlF: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3BlR() //  [R1]
         { info_tbl: [(c3BlR,
                       label: block_c3BlR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BlR: // global
           _s3ykQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3Bm0; else goto c3Bnp;
       c3Bm0: // global
           I64[Sp + 8] = block_c3BlX_info;
           R1 = _s3ykQ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3BnQ; else goto c3Bm1;
       u3BnQ: // global
           call _c3BlX(R1) args: 0, res: 0, upd: 0;
       c3Bm1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Bnp: // global
           I64[Sp] = block_c3Bnn_info;
           _s3yl7::P64 = P64[R1 + 6];
           R1 = _s3ykQ::P64;
           P64[Sp + 8] = _s3yl7::P64;
           if (R1 & 7 != 0) goto u3BnR; else goto c3Bnq;
       u3BnR: // global
           call _c3Bnn(R1) args: 0, res: 0, upd: 0;
       c3Bnq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BlX() //  [R1]
         { info_tbl: [(c3BlX,
                       label: block_c3BlX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BlX: // global
           if (R1 & 7 == 1) goto c3Bmc; else goto c3Bmm;
       c3Bmc: // global
           _s3ykO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Bm5_info;
           R3 = _s3ykO::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
       c3Bmm: // global
           I64[Sp - 8] = block_c3Bmk_info;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           _s3ykV::P64 = P64[R1 + 6];
           R2 = _s3ykV::P64;
           P64[Sp] = _s3ykV::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bm5() //  [R1]
         { info_tbl: [(c3Bm5,
                       label: block_c3Bm5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bm5: // global
           I64[Sp] = block_c3Bm9_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bm9() //  [R1]
         { info_tbl: [(c3Bm9,
                       label: block_c3Bm9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bm9: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3Bmk() //  [R1]
         { info_tbl: [(c3Bmk,
                       label: block_c3Bmk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bmk: // global
           _s3ykV::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3Bnd; else goto c3BmN;
       c3Bnd: // global
           I64[Sp + 8] = block_c3BmZ_info;
           R3 = _s3ykV::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3BmN: // global
           I64[Sp + 8] = block_c3Bmq_info;
           R2 = _s3ykV::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BmZ() //  [R1]
         { info_tbl: [(c3BmZ,
                       label: block_c3BmZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BmZ: // global
           I64[Sp] = block_c3Bn3_info;
           R3 = P64[Sp + 8];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 8] = R1;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bn3() //  [R1]
         { info_tbl: [(c3Bn3,
                       label: block_c3Bn3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bn3: // global
           _s3yl4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Bn7_info;
           R3 = _s3yl4::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bn7() //  [R1]
         { info_tbl: [(c3Bn7,
                       label: block_c3Bn7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bn7: // global
           I64[Sp] = block_c3Bnb_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bnb() //  [R1]
         { info_tbl: [(c3Bnb,
                       label: block_c3Bnb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bnb: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3Bmq() //  [R1]
         { info_tbl: [(c3Bmq,
                       label: block_c3Bmq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bmq: // global
           I64[Sp] = block_c3Bmu_info;
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bmu() //  [R1]
         { info_tbl: [(c3Bmu,
                       label: block_c3Bmu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bmu: // global
           I64[Sp - 8] = block_c3Bmy_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bmy() //  [R1]
         { info_tbl: [(c3Bmy,
                       label: block_c3Bmy_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bmy: // global
           I64[Sp] = block_c3BmC_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BmC() //  [R1]
         { info_tbl: [(c3BmC,
                       label: block_c3BmC_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BmC: // global
           I64[Sp] = block_c3BmG_info;
           R3 = P64[Sp + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 16] = R1;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BmG() //  [R1]
         { info_tbl: [(c3BmG,
                       label: block_c3BmG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BmG: // global
           I64[Sp] = block_c3BmK_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BmK() //  [R1]
         { info_tbl: [(c3BmK,
                       label: block_c3BmK_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BmK: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3Bnn() //  [R1]
         { info_tbl: [(c3Bnn,
                       label: block_c3Bnn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bnn: // global
           _s3ykO::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c3Bnx; else goto c3BnG;
       c3Bnx: // global
           I64[Sp] = block_c3Bnu_info;
           R3 = _s3ykO::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
       c3BnG: // global
           I64[Sp] = block_c3BnE_info;
           R3 = _s3ykO::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 16] = P64[R1 + 6];
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bnu() //  [R1]
         { info_tbl: [(c3Bnu,
                       label: block_c3Bnu_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bnu: // global
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 24;
           call $wfracExp_r3y9v_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3BnE() //  [R1]
         { info_tbl: [(c3BnE,
                       label: block_c3BnE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BnE: // global
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call $wfracExp_r3y9v_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.146383126 UTC

[section ""data" . Text.Read.Lex.numberToRational_closure" {
     Text.Read.Lex.numberToRational_closure:
         const Text.Read.Lex.numberToRational_info;
         const 0;
 },
 Text.Read.Lex.numberToRational_entry() //  [R2]
         { info_tbl: [(c3BnZ,
                       label: Text.Read.Lex.numberToRational_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BnZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Bo0; else goto c3Bo1;
       c3Bo0: // global
           R2 = R2;
           R1 = Text.Read.Lex.numberToRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Bo1: // global
           I64[Sp - 8] = block_c3BnW_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BnW() //  [R1, R2]
         { info_tbl: [(c3BnW,
                       label: block_c3BnW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BnW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Bo4; else goto c3Bo3;
       c3Bo4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3Bo3: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.147531055 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational3_closure" {
     Text.Read.Lex.numberToRangedRational3_closure:
         const GHC.Real.:%_con_info;
         const Text.Read.Lex.numberToFixed2_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.148128377 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational2_closure" {
     Text.Read.Lex.numberToRangedRational2_closure:
         const GHC.Base.Just_con_info;
         const Text.Read.Lex.numberToRangedRational3_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.148873588 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational1_closure" {
     Text.Read.Lex.numberToRangedRational1_closure:
         const Text.Read.Lex.numberToRangedRational1_info;
 },
 Text.Read.Lex.numberToRangedRational1_entry() //  [R2]
         { info_tbl: [(c3Bo9,
                       label: Text.Read.Lex.numberToRangedRational1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bo9: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme2_closure+1;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.149662767 UTC

[section ""data" . sat_s3yli_closure" {
     sat_s3yli_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.150265715 UTC

[section ""data" . sat_s3ylj_closure" {
     sat_s3ylj_closure:
         const :_con_info;
         const sat_s3yli_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.150859778 UTC

[section ""data" . sat_s3ylh_closure" {
     sat_s3ylh_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.151495313 UTC

[section ""data" . sat_s3ylk_closure" {
     sat_s3ylk_closure:
         const :_con_info;
         const sat_s3ylh_closure+1;
         const sat_s3ylj_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.152855093 UTC

[section ""data" . sat_s3ylg_closure" {
     sat_s3ylg_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.153545309 UTC

[section ""data" . sat_s3yll_closure" {
     sat_s3yll_closure:
         const :_con_info;
         const sat_s3ylg_closure+1;
         const sat_s3ylk_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.154431845 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational4_closure" {
     Text.Read.Lex.numberToRangedRational4_closure:
         const Text.Read.Lex.numberToRangedRational4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational4_entry() //  [R1]
         { info_tbl: [(c3Boi,
                       label: Text.Read.Lex.numberToRangedRational4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Boi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Boj; else goto c3Bok;
       c3Boj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bok: // global
           (_c3Bof::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Bof::I64 == 0) goto c3Boh; else goto c3Bog;
       c3Boh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Bog: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Bof::I64;
           R3 = sat_s3yll_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.155478138 UTC

[section ""data" . sat_s3ylo_closure" {
     sat_s3ylo_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.156110504 UTC

[section ""data" . sat_s3ylp_closure" {
     sat_s3ylp_closure:
         const :_con_info;
         const sat_s3ylo_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.156711197 UTC

[section ""data" . sat_s3yln_closure" {
     sat_s3yln_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.157306463 UTC

[section ""data" . sat_s3ylq_closure" {
     sat_s3ylq_closure:
         const :_con_info;
         const sat_s3yln_closure+1;
         const sat_s3ylp_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.157944337 UTC

[section ""data" . sat_s3ylm_closure" {
     sat_s3ylm_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.158495879 UTC

[section ""data" . sat_s3ylr_closure" {
     sat_s3ylr_closure:
         const :_con_info;
         const sat_s3ylm_closure+1;
         const sat_s3ylq_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.159412924 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational5_closure" {
     Text.Read.Lex.numberToRangedRational5_closure:
         const Text.Read.Lex.numberToRangedRational5_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational5_entry() //  [R1]
         { info_tbl: [(c3Bor,
                       label: Text.Read.Lex.numberToRangedRational5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bor: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Bos; else goto c3Bot;
       c3Bos: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bot: // global
           (_c3Boo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Boo::I64 == 0) goto c3Boq; else goto c3Bop;
       c3Boq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Bop: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Boo::I64;
           R3 = sat_s3ylr_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.1632175 UTC

[section ""data" . Text.Read.Lex.$wnumberToRangedRational_closure" {
     Text.Read.Lex.$wnumberToRangedRational_closure:
         const Text.Read.Lex.$wnumberToRangedRational_info;
         const 0;
 },
 sat_s3ylB_entry() //  [R1]
         { info_tbl: [(c3BoK,
                       label: sat_s3ylB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BoK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3BoL; else goto c3BoM;
       c3BoL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BoM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3BoH_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3BoH() //  [R1, R2]
         { info_tbl: [(c3BoH,
                       label: block_c3BoH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BoH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3BoP; else goto c3BoO;
       c3BoP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3BoO: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ylJ_entry() //  [R1]
         { info_tbl: [(c3Bp4,
                       label: sat_s3ylJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bp4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Bp5; else goto c3Bp6;
       c3Bp5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bp6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Bp1_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Bp1() //  [R1, R2]
         { info_tbl: [(c3Bp1,
                       label: block_c3Bp1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bp1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Bp9; else goto c3Bp8;
       c3Bp9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3Bp8: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ym2_entry() //  [R1]
         { info_tbl: [(c3BpZ,
                       label: sat_s3ym2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BpZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Bq0; else goto c3Bq1;
       c3Bq0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bq1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3BpW_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3BpW() //  [R1, R2]
         { info_tbl: [(c3BpW,
                       label: block_c3BpW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BpW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Bq4; else goto c3Bq3;
       c3Bq4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3Bq3: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.$wnumberToRangedRational_entry() //  [R2, R3, R4]
         { info_tbl: [(c3Bq9,
                       label: Text.Read.Lex.$wnumberToRangedRational_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bq9: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3Bqa; else goto c3Bqb;
       c3Bqa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wnumberToRangedRational_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Bqb: // global
           I64[Sp - 24] = block_c3Boy_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3BrT; else goto c3Boz;
       u3BrT: // global
           call _c3Boy(R1) args: 0, res: 0, upd: 0;
       c3Boz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Boy() //  [R1]
         { info_tbl: [(c3Boy,
                       label: block_c3Boy_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Boy: // global
           if (R1 & 7 == 1) goto c3Bq6; else goto c3Bq7;
       c3Bq6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Bqf; else goto c3Bqe;
       c3Bqf: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Bqe: // global
           I64[Hp - 32] = sat_s3ylB_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Bq7: // global
           I64[Sp - 24] = block_c3BoS_info;
           _s3ylv::P64 = R1;
           _s3ylC::P64 = P64[R1 + 6];
           _s3ylD::P64 = P64[R1 + 14];
           R1 = P64[R1 + 22];
           P64[Sp - 16] = _s3ylC::P64;
           P64[Sp - 8] = _s3ylD::P64;
           P64[Sp] = _s3ylv::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3BrO; else goto c3BoT;
       u3BrO: // global
           call _c3BoS(R1) args: 0, res: 0, upd: 0;
       c3BoT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BoS() //  [R1]
         { info_tbl: [(c3BoS,
                       label: block_c3BoS_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BoS: // global
           if (R1 & 7 == 1) goto c3Bqj; else goto c3Bqo;
       c3Bqj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Bqm; else goto c3Bql;
       c3Bqm: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Bql: // global
           I64[Hp - 32] = sat_s3ylJ_info;
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Bqo: // global
           I64[Sp - 8] = block_c3Bpc_info;
           R3 = Text.Read.Lex.numberToRangedRational5_closure;
           _s3ylK::P64 = P64[R1 + 6];
           R2 = _s3ylK::P64;
           P64[Sp] = _s3ylK::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bpc() //  [R1]
         { info_tbl: [(c3Bpc,
                       label: block_c3Bpc_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bpc: // global
           if (R1 == 1) goto u3BrH; else goto c3Bqr;
       u3BrH: // global
           Sp = Sp + 56;
           call _c3BrB() args: 0, res: 0, upd: 0;
       c3Bqr: // global
           I64[Sp] = block_c3Bpg_info;
           R3 = Text.Read.Lex.numberToRangedRational4_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bpg() //  [R1]
         { info_tbl: [(c3Bpg,
                       label: block_c3Bpg_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bpg: // global
           if (R1 == 1) goto u3BrI; else goto c3BqI;
       u3BrI: // global
           Sp = Sp + 56;
           call _c3BrB() args: 0, res: 0, upd: 0;
       c3BqI: // global
           I64[Sp] = block_c3Bqs_info;
           R3 = P64[Sp + 16];
           R2 = Text.Read.Lex.numberToRangedRational1_closure+1;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bqs() //  [R1]
         { info_tbl: [(c3Bqs,
                       label: block_c3Bqs_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bqs: // global
           if (R1 & 7 == 1) goto c3BqP; else goto c3Brp;
       c3BqP: // global
           I64[Sp] = block_c3BqM_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3BrU; else goto c3BqQ;
       u3BrU: // global
           call _c3BqM(R1) args: 0, res: 0, upd: 0;
       c3BqQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Brp: // global
           I64[Sp] = block_c3Brn_info;
           R3 = 0;
           R2 = R1;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BqM() //  [R1]
         { info_tbl: [(c3BqM,
                       label: block_c3BqM_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BqM: // global
           if (R1 & 7 == 1) goto u3BrK; else goto c3Br3;
       u3BrK: // global
           Sp = Sp + 56;
           call _c3Brb() args: 0, res: 0, upd: 0;
       c3Br3: // global
           I64[Sp] = block_c3BqZ_info;
           R3 = P64[R1 + 6];
           R2 = Text.Read.Lex.numberToRangedRational1_closure+1;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BqZ() //  [R1, R2]
         { info_tbl: [(c3BqZ,
                       label: block_c3BqZ_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BqZ: // global
           I64[Sp] = block_c3Br1_info;
           _s3ym7::P64 = R1;
           R1 = R2;
           P64[Sp + 24] = _s3ym7::P64;
           if (R1 & 7 != 0) goto u3BrW; else goto c3Br5;
       u3BrW: // global
           call _c3Br1(R1) args: 0, res: 0, upd: 0;
       c3Br5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Br1() //  [R1]
         { info_tbl: [(c3Br1,
                       label: block_c3Br1_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Br1: // global
           if (R1 & 7 == 1) goto u3BrL; else goto c3Brg;
       u3BrL: // global
           Sp = Sp + 56;
           call _c3Brb() args: 0, res: 0, upd: 0;
       c3Brg: // global
           I64[Sp] = block_c3Bre_info;
           R3 = 0;
           R2 = P64[Sp + 24];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Brb() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Brb: // global
           R1 = Text.Read.Lex.numberToRangedRational2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Bre() //  [R1]
         { info_tbl: [(c3Bre,
                       label: block_c3Bre_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bre: // global
           I64[Sp + 24] = -R1;
           Sp = Sp + 8;
           call _s3ylN() args: 0, res: 0, upd: 0;
     }
 },
 _c3Brn() //  [R1]
         { info_tbl: [(c3Brn,
                       label: block_c3Brn_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Brn: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _s3ylN() args: 0, res: 0, upd: 0;
     }
 },
 _s3ylN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3ylN: // global
           I64[Sp - 8] = block_c3Bpp_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Bs0; else goto c3Bpq;
       u3Bs0: // global
           call _c3Bpp(R1) args: 0, res: 0, upd: 0;
       c3Bpq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bpp() //  [R1]
         { info_tbl: [(c3Bpp,
                       label: block_c3Bpp_info
                       rep:StackRep [False, True, True, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bpp: // global
           I64[Sp + 16] = block_c3Bpu_info;
           R2 = P64[Sp + 8];
           I64[Sp + 48] = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bpu() //  [R1]
         { info_tbl: [(c3Bpu,
                       label: block_c3Bpu_info
                       rep:StackRep [True, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bpu: // global
           _s3ylS::I64 = I64[Sp + 8] + R1;
           if (%MO_S_Le_W64(_s3ylS::I64,
                            I64[Sp + 32] + 3)) goto c3Bqy; else goto u3BrN;
       c3Bqy: // global
           I64[Sp + 8] = block_c3BpH_info;
           R1 = P64[Sp + 24];
           I64[Sp + 32] = _s3ylS::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3BrR; else goto c3BpI;
       u3BrR: // global
           call _c3BpH(R1) args: 0, res: 0, upd: 0;
       c3BpI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3BrN: // global
           Sp = Sp + 40;
           call _c3BrB() args: 0, res: 0, upd: 0;
     }
 },
 _c3BpH() //  [R1]
         { info_tbl: [(c3BpH,
                       label: block_c3BpH_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BpH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BqB; else goto c3BqA;
       c3BqB: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BqA: // global
           if (%MO_S_Ge_W64(I64[Sp + 24],
                            I64[R1 + 7] - 3)) goto c3BqE; else goto c3BqF;
       c3BqE: // global
           I64[Hp - 32] = sat_s3ym2_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3BqF: // global
           Hp = Hp - 40;
           R1 = Text.Read.Lex.numberToRangedRational2_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3BrB() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BrB: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.170497917 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational_closure" {
     Text.Read.Lex.numberToRangedRational_closure:
         const Text.Read.Lex.numberToRangedRational_info;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational_entry() //  [R2, R3]
         { info_tbl: [(c3Bs8,
                       label: Text.Read.Lex.numberToRangedRational_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bs8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Bs9; else goto c3Bsa;
       c3Bs9: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToRangedRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Bsa: // global
           I64[Sp - 16] = block_c3Bs5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Bse; else goto c3Bs6;
       u3Bse: // global
           call _c3Bs5(R1) args: 0, res: 0, upd: 0;
       c3Bs6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bs5() //  [R1]
         { info_tbl: [(c3Bs5,
                       label: block_c3Bs5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bs5: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call Text.Read.Lex.$wnumberToRangedRational_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.171848389 UTC

[section ""cstring" . lvl5_r3y9w_bytes" {
     lvl5_r3y9w_bytes:
         I8[] [118,97,108,68,105,103,58,32,66,97,100,32,98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.173072444 UTC

[section ""data" . Text.Read.Lex.readDecP2_closure" {
     Text.Read.Lex.readDecP2_closure:
         const Text.Read.Lex.readDecP2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP2_entry() //  [R1]
         { info_tbl: [(c3Bsn,
                       label: Text.Read.Lex.readDecP2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bsn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Bso; else goto c3Bsp;
       c3Bso: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bsp: // global
           (_c3Bsi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Bsi::I64 == 0) goto c3Bsk; else goto c3Bsj;
       c3Bsk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Bsj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Bsi::I64;
           I64[Sp - 24] = block_c3Bsl_info;
           R2 = lvl5_r3y9w_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Bsl() //  [R1]
         { info_tbl: [(c3Bsl,
                       label: block_c3Bsl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bsl: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.174554804 UTC

[section ""data" . sat_s3ymn_closure" {
     sat_s3ymn_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.175172196 UTC

[section ""data" . sat_s3ymo_closure" {
     sat_s3ymo_closure:
         const :_con_info;
         const sat_s3ymn_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.17598993 UTC

[section ""data" . Text.Read.Lex.readDecP3_closure" {
     Text.Read.Lex.readDecP3_closure:
         const Text.Read.Lex.readDecP3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP3_entry() //  [R1]
         { info_tbl: [(c3Bsz,
                       label: Text.Read.Lex.readDecP3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bsz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BsA; else goto c3BsB;
       c3BsA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BsB: // global
           (_c3Bsw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Bsw::I64 == 0) goto c3Bsy; else goto c3Bsx;
       c3Bsy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Bsx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Bsw::I64;
           R3 = sat_s3ymo_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.176957078 UTC

[section ""data" . sat_s3ymp_closure" {
     sat_s3ymp_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.177693567 UTC

[section ""data" . sat_s3ymq_closure" {
     sat_s3ymq_closure:
         const :_con_info;
         const sat_s3ymp_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.178577403 UTC

[section ""data" . Text.Read.Lex.readDecP4_closure" {
     Text.Read.Lex.readDecP4_closure:
         const Text.Read.Lex.readDecP4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP4_entry() //  [R1]
         { info_tbl: [(c3BsI,
                       label: Text.Read.Lex.readDecP4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BsI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BsJ; else goto c3BsK;
       c3BsJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BsK: // global
           (_c3BsF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BsF::I64 == 0) goto c3BsH; else goto c3BsG;
       c3BsH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BsG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BsF::I64;
           R3 = sat_s3ymq_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.183168936 UTC

[section ""data" . Text.Read.Lex.$w$svalDig_closure" {
     Text.Read.Lex.$w$svalDig_closure:
         const Text.Read.Lex.$w$svalDig_info;
         const 0;
 },
 Text.Read.Lex.$w$svalDig_entry() //  [R2, R3]
         { info_tbl: [(c3BsU,
                       label: Text.Read.Lex.$w$svalDig_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BsU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3BsV; else goto c3BsW;
       c3BsV: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$svalDig_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3BsW: // global
           I64[Sp - 24] = block_c3BsP_info;
           _s3yms::I64 = R3;
           R3 = Text.Read.Lex.readDecP4_closure;
           _s3ymr::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3ymr::P64;
           I64[Sp - 8] = _s3yms::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BsP() //  [R1]
         { info_tbl: [(c3BsP,
                       label: block_c3BsP_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BsP: // global
           if (R1 == 1) goto c3BsT; else goto c3BsS;
       c3BsT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Bvg; else goto c3Bvf;
       c3Bvg: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Bvf: // global
           _s3yms::I64 = I64[Sp + 16];
           if (48 > _s3yms::I64) goto u3BvH; else goto c3BvC;
       u3BvH: // global
           Sp = Sp + 24;
           goto u3BvK;
       c3BvC: // global
           if (_s3yms::I64 > 55) goto u3BvI; else goto c3BvB;
       u3BvI: // global
           Sp = Sp + 24;
           goto u3BvK;
       u3BvK: // global
           call _c3Bvq() args: 0, res: 0, upd: 0;
       c3BvB: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3BsS: // global
           I64[Sp] = block_c3BsZ_info;
           R3 = Text.Read.Lex.numberToFixed1_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BsZ() //  [R1]
         { info_tbl: [(c3BsZ,
                       label: block_c3BsZ_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BsZ: // global
           if (R1 == 1) goto c3BuK; else goto c3Bt7;
       c3BuK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3BuP; else goto c3BuO;
       c3BuP: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3BuO: // global
           _s3yms::I64 = I64[Sp + 16];
           if (48 > _s3yms::I64) goto u3BvF; else goto c3Bvb;
       u3BvF: // global
           Sp = Sp + 24;
           goto u3BvM;
       c3Bvb: // global
           if (_s3yms::I64 > 57) goto u3BvG; else goto c3Bva;
       u3BvG: // global
           Sp = Sp + 24;
           goto u3BvM;
       u3BvM: // global
           call _c3Bvq() args: 0, res: 0, upd: 0;
       c3Bva: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Bt7: // global
           _s3ymr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Bt4_info;
           R3 = Text.Read.Lex.readDecP3_closure;
           R2 = _s3ymr::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Bt4() //  [R1]
         { info_tbl: [(c3Bt4,
                       label: block_c3Bt4_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bt4: // global
           if (R1 == 1) goto c3Bte; else goto c3Btd;
       c3Bte: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Btj; else goto c3Bti;
       c3Btj: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Bti: // global
           _s3yms::I64 = I64[Sp + 8];
           if (48 > _s3yms::I64) goto c3Bux; else goto c3BuJ;
       c3BuJ: // global
           if (_s3yms::I64 > 57) goto c3Bux; else goto c3BuI;
       c3Bux: // global
           Hp = Hp - 32;
           call _c3Btn() args: 0, res: 0, upd: 0;
       c3BuI: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Btd: // global
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Btn() //  []
         { info_tbl: [(c3Btn,
                       label: block_c3Btn_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Btn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Btr; else goto c3Btq;
       c3Btr: // global
           HpAlloc = 32;
           I64[Sp] = block_c3Btn_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Btq: // global
           _s3yms::I64 = I64[Sp + 8];
           if (97 > _s3yms::I64) goto c3Bu8; else goto c3Bun;
       c3Bun: // global
           if (_s3yms::I64 > 102) goto c3Bu8; else goto c3Bum;
       c3Bu8: // global
           Hp = Hp - 32;
           call _c3Btv() args: 0, res: 0, upd: 0;
       c3Bum: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 87;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Btv() //  []
         { info_tbl: [(c3Btv,
                       label: block_c3Btv_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Btv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Btz; else goto c3Bty;
       c3Btz: // global
           HpAlloc = 32;
           I64[Sp] = block_c3Btv_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Bty: // global
           _s3yms::I64 = I64[Sp + 8];
           if (65 > _s3yms::I64) goto u3BvD; else goto c3BtY;
       u3BvD: // global
           Sp = Sp + 16;
           goto u3BvQ;
       c3BtY: // global
           if (_s3yms::I64 > 70) goto u3BvE; else goto c3BtX;
       u3BvE: // global
           Sp = Sp + 16;
           goto u3BvQ;
       u3BvQ: // global
           call _c3Bvq() args: 0, res: 0, upd: 0;
       c3BtX: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 55;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Bvq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bvq: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.192198156 UTC

[section ""data" . Text.Read.Lex.$wvalDig_closure" {
     Text.Read.Lex.$wvalDig_closure:
         const Text.Read.Lex.$wvalDig_info;
         const 0;
 },
 Text.Read.Lex.$wvalDig_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BvS: // global
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yn3_entry() //  [R1]
         { info_tbl: [(c3Bw0,
                       label: sat_s3yn3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bw0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Bw1; else goto c3Bw2;
       c3Bw1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bw2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yn5_entry() //  [R1]
         { info_tbl: [(c3Bwb,
                       label: sat_s3yn5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bwb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Bwc; else goto c3Bwd;
       c3Bwc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bwd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yn7_entry() //  [R1]
         { info_tbl: [(c3Bwm,
                       label: sat_s3yn7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bwm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Bwn; else goto c3Bwo;
       c3Bwn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Bwo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.$wvalDig_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3Bwt,
                       label: Text.Read.Lex.$wvalDig_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, False, True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bwt: // global
           _s3yn2::I64 = R5;
           _s3yn1::P64 = R4;
           _s3yn0::P64 = R3;
           _s3ymZ::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c3Bwu; else goto c3Bwv;
       c3Bwv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Bwx; else goto c3Bww;
       c3Bwx: // global
           HpAlloc = 24;
           goto c3Bwu;
       c3Bwu: // global
           R1 = Text.Read.Lex.$wvalDig_closure;
           P64[Sp - 32] = _s3ymZ::P64;
           P64[Sp - 24] = _s3yn0::P64;
           P64[Sp - 16] = _s3yn1::P64;
           I64[Sp - 8] = _s3yn2::I64;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3Bww: // global
           I64[Hp - 16] = sat_s3yn3_info;
           P64[Hp] = _s3yn0::P64;
           I64[Sp - 40] = block_c3Bw3_info;
           R2 = _s3ymZ::P64;
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = _s3yn1::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 32] = _s3ymZ::P64;
           P64[Sp - 24] = _s3yn0::P64;
           P64[Sp - 16] = _s3yn1::P64;
           I64[Sp - 8] = _s3yn2::I64;
           Sp = Sp - 64;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c3Bw3() //  [R1]
         { info_tbl: [(c3Bw3,
                       label: block_c3Bw3_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bw3: // global
           if (R1 & 7 == 1) goto c3Bwq; else goto c3Bwr;
       c3Bwq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3BwA; else goto c3Bwz;
       c3BwA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Bwz: // global
           I64[Hp - 16] = sat_s3yn5_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c3Bwe_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c3Bwr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ByP; else goto c3ByO;
       c3ByP: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ByO: // global
           _s3yn2::I64 = I64[Sp + 32];
           if (48 > _s3yn2::I64) goto u3Bze; else goto c3Bzb;
       u3Bze: // global
           Sp = Sp + 40;
           goto u3Bzl;
       c3Bzb: // global
           if (_s3yn2::I64 > 55) goto u3Bzf; else goto c3Bza;
       u3Bzf: // global
           Sp = Sp + 40;
           goto u3Bzl;
       u3Bzl: // global
           call _c3ByZ() args: 0, res: 0, upd: 0;
       c3Bza: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Bwe() //  [R1]
         { info_tbl: [(c3Bwe,
                       label: block_c3Bwe_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bwe: // global
           if (R1 & 7 == 1) goto c3BwD; else goto c3Byj;
       c3BwD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3BwG; else goto c3BwF;
       c3BwG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BwF: // global
           I64[Hp - 16] = sat_s3yn7_info;
           P64[Hp] = P64[Sp + 16];
           _s3yn1::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3BwB_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s3yn1::P64;
           P64[Sp + 16] = Hp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c3Byj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Byo; else goto c3Byn;
       c3Byo: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Byn: // global
           _s3yn2::I64 = I64[Sp + 32];
           if (48 > _s3yn2::I64) goto u3Bzg; else goto c3ByK;
       u3Bzg: // global
           Sp = Sp + 40;
           goto u3Bzn;
       c3ByK: // global
           if (_s3yn2::I64 > 57) goto u3Bzh; else goto c3ByJ;
       u3Bzh: // global
           Sp = Sp + 40;
           goto u3Bzn;
       u3Bzn: // global
           call _c3ByZ() args: 0, res: 0, upd: 0;
       c3ByJ: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3BwB() //  [R1]
         { info_tbl: [(c3BwB,
                       label: block_c3BwB_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BwB: // global
           if (R1 & 7 == 1) goto c3BwM; else goto c3BwN;
       c3BwM: // global
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3BwN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3BwS; else goto c3BwR;
       c3BwS: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BwR: // global
           _s3yn2::I64 = I64[Sp + 8];
           if (48 > _s3yn2::I64) goto c3By6; else goto c3Byi;
       c3Byi: // global
           if (_s3yn2::I64 > 57) goto c3By6; else goto c3Byh;
       c3By6: // global
           Hp = Hp - 32;
           call _c3BwW() args: 0, res: 0, upd: 0;
       c3Byh: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3BwW() //  []
         { info_tbl: [(c3BwW,
                       label: block_c3BwW_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BwW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Bx0; else goto c3BwZ;
       c3Bx0: // global
           HpAlloc = 32;
           I64[Sp] = block_c3BwW_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3BwZ: // global
           _s3yn2::I64 = I64[Sp + 8];
           if (97 > _s3yn2::I64) goto c3BxH; else goto c3BxW;
       c3BxW: // global
           if (_s3yn2::I64 > 102) goto c3BxH; else goto c3BxV;
       c3BxH: // global
           Hp = Hp - 32;
           call _c3Bx4() args: 0, res: 0, upd: 0;
       c3BxV: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 87;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Bx4() //  []
         { info_tbl: [(c3Bx4,
                       label: block_c3Bx4_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Bx4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Bx8; else goto c3Bx7;
       c3Bx8: // global
           HpAlloc = 32;
           I64[Sp] = block_c3Bx4_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Bx7: // global
           _s3yn2::I64 = I64[Sp + 8];
           if (65 > _s3yn2::I64) goto u3Bzi; else goto c3Bxx;
       u3Bzi: // global
           Sp = Sp + 16;
           goto u3Bzr;
       c3Bxx: // global
           if (_s3yn2::I64 > 70) goto u3Bzj; else goto c3Bxw;
       u3Bzj: // global
           Sp = Sp + 16;
           goto u3Bzr;
       u3Bzr: // global
           call _c3ByZ() args: 0, res: 0, upd: 0;
       c3Bxw: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 55;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ByZ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ByZ: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.198195425 UTC

[section ""data" . Text.Read.Lex.$w$sreadIntP'_closure" {
     Text.Read.Lex.$w$sreadIntP'_closure:
         const Text.Read.Lex.$w$sreadIntP'_info;
         const 0;
 },
 sat_s3ynP_entry() //  [R1, R2]
         { info_tbl: [(c3BzE,
                       label: sat_s3ynP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BzE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BzF; else goto c3BzG;
       c3BzF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BzG: // global
           I64[Sp - 16] = block_c3BzB_info;
           _s3ynC::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ynC::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3BzW; else goto c3BzC;
       u3BzW: // global
           call _c3BzB(R1) args: 0, res: 0, upd: 0;
       c3BzC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BzB() //  [R1]
         { info_tbl: [(c3BzB,
                       label: block_c3BzB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BzB: // global
           _s3ynC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3BzJ_info;
           R3 = I64[R1 + 7];
           R2 = _s3ynC::P64;
           Sp = Sp + 8;
           call Text.Read.Lex.$w$svalDig_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BzJ() //  [R1]
         { info_tbl: [(c3BzJ,
                       label: block_c3BzJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BzJ: // global
           if (R1 & 7 == 1) goto c3BzQ; else goto c3BzU;
       c3BzQ: // global
           R1 = Text.Read.Lex.$fShowLexeme2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3BzU: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ynJ_entry() //  [R1, R2]
         { info_tbl: [(c3BA5,
                       label: sat_s3ynJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BA5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BA6; else goto c3BA7;
       c3BA6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BA7: // global
           I64[Sp - 16] = block_c3BA2_info;
           _s3ynC::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ynC::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3BAn; else goto c3BA3;
       u3BAn: // global
           call _c3BA2(R1) args: 0, res: 0, upd: 0;
       c3BA3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BA2() //  [R1]
         { info_tbl: [(c3BA2,
                       label: block_c3BA2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BA2: // global
           _s3ynC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3BAa_info;
           R3 = I64[R1 + 7];
           R2 = _s3ynC::P64;
           Sp = Sp + 8;
           call Text.Read.Lex.$w$svalDig_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BAa() //  [R1]
         { info_tbl: [(c3BAa,
                       label: block_c3BAa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BAa: // global
           if (R1 & 7 == 1) goto c3BAh; else goto c3BAl;
       c3BAh: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3BAl: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3BAt_srtd" {
     u3BAt_srtd:
         const S3yFW_srt+240;
         const 34;
         const 8858370049;
 },
 Text.Read.Lex.$w$sreadIntP'_entry() //  [R2, R3]
         { info_tbl: [(c3BAo,
                       label: Text.Read.Lex.$w$sreadIntP'_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BAo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3BAs; else goto c3BAr;
       c3BAs: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$sreadIntP'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3BAr: // global
           I64[Hp - 24] = sat_s3ynP_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3ynJ_info;
           P64[Hp] = R2;
           R5 = R3;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = R2;
           call Text.Read.Lex.$w$sreadIntP_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.202327614 UTC

[section ""data" . Text.Read.Lex.$wreadIntP'_closure" {
     Text.Read.Lex.$wreadIntP'_closure:
         const Text.Read.Lex.$wreadIntP'_info;
         const 0;
 },
 sat_s3yo5_entry() //  [R1, R2]
         { info_tbl: [(c3BAG,
                       label: sat_s3yo5_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BAG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3BAH; else goto c3BAI;
       c3BAH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BAI: // global
           I64[Sp - 32] = block_c3BAD_info;
           _s3ynQ::P64 = P64[R1 + 7];
           _s3ynR::P64 = P64[R1 + 15];
           _s3ynS::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3ynQ::P64;
           P64[Sp - 16] = _s3ynR::P64;
           P64[Sp - 8] = _s3ynS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3BAY; else goto c3BAE;
       u3BAY: // global
           call _c3BAD(R1) args: 0, res: 0, upd: 0;
       c3BAE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BAD() //  [R1]
         { info_tbl: [(c3BAD,
                       label: block_c3BAD_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BAD: // global
           _s3ynS::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3BAL_info;
           R5 = I64[R1 + 7];
           R4 = _s3ynS::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BAL() //  [R1]
         { info_tbl: [(c3BAL,
                       label: block_c3BAL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BAL: // global
           if (R1 & 7 == 1) goto c3BAS; else goto c3BAW;
       c3BAS: // global
           R1 = Text.Read.Lex.$fShowLexeme2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3BAW: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ynZ_entry() //  [R1, R2]
         { info_tbl: [(c3BB7,
                       label: sat_s3ynZ_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BB7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3BB8; else goto c3BB9;
       c3BB8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BB9: // global
           I64[Sp - 32] = block_c3BB4_info;
           _s3ynQ::P64 = P64[R1 + 7];
           _s3ynR::P64 = P64[R1 + 15];
           _s3ynS::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3ynQ::P64;
           P64[Sp - 16] = _s3ynR::P64;
           P64[Sp - 8] = _s3ynS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3BBp; else goto c3BB5;
       u3BBp: // global
           call _c3BB4(R1) args: 0, res: 0, upd: 0;
       c3BB5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BB4() //  [R1]
         { info_tbl: [(c3BB4,
                       label: block_c3BB4_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BB4: // global
           _s3ynS::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3BBc_info;
           R5 = I64[R1 + 7];
           R4 = _s3ynS::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BBc() //  [R1]
         { info_tbl: [(c3BBc,
                       label: block_c3BBc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BBc: // global
           if (R1 & 7 == 1) goto c3BBj; else goto c3BBn;
       c3BBj: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3BBn: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3BBv_srtd" {
     u3BBv_srtd:
         const S3yFW_srt+256;
         const 33;
         const 5368709121;
 },
 Text.Read.Lex.$wreadIntP'_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3BBq,
                       label: Text.Read.Lex.$wreadIntP'_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BBq: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3BBu; else goto c3BBt;
       c3BBu: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wreadIntP'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3BBt: // global
           I64[Hp - 56] = sat_s3yo5_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3ynZ_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R6 = R5;
           R5 = Hp - 55;
           _s3ynS::P64 = R4;
           R4 = Hp - 23;
           _s3ynR::P64 = R3;
           R3 = _s3ynS::P64;
           R2 = _s3ynR::P64;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.205202785 UTC

[section ""data" . Text.Read.Lex.readDecP6_closure" {
     Text.Read.Lex.readDecP6_closure:
         const Text.Read.Lex.readDecP6_info;
         const 0;
 },
 Text.Read.Lex.readDecP6_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3BBD,
                       label: Text.Read.Lex.readDecP6_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BBD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3BBE; else goto c3BBF;
       c3BBE: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readDecP6_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3BBF: // global
           I64[Sp - 8] = block_c3BBA_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BBA() //  [R1]
         { info_tbl: [(c3BBA,
                       label: block_c3BBA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BBA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BBI; else goto c3BBH;
       c3BBI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BBH: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.206577764 UTC

[section ""data" . Text.Read.Lex.readOctP1_closure" {
     Text.Read.Lex.readOctP1_closure:
         const Text.Read.Lex.readOctP1_info;
         const 0;
 },
 Text.Read.Lex.readOctP1_entry() //  [R2]
         { info_tbl: [(c3BBQ,
                       label: Text.Read.Lex.readOctP1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BBQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3BBR; else goto c3BBS;
       c3BBR: // global
           R2 = R2;
           R1 = Text.Read.Lex.readOctP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BBS: // global
           I64[Sp - 8] = block_c3BBN_info;
           R3 = R2;
           R2 = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BBN() //  [R1]
         { info_tbl: [(c3BBN,
                       label: block_c3BBN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BBN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BBV; else goto c3BBU;
       c3BBV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BBU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.207772842 UTC

[section ""data" . Text.Read.Lex.readOctP_$sreadOctP_closure" {
     Text.Read.Lex.readOctP_$sreadOctP_closure:
         const Text.Read.Lex.readOctP_$sreadOctP_info;
         const 0;
 },
 Text.Read.Lex.readOctP_$sreadOctP_entry() //  [R2]
         { info_tbl: [(c3BC0,
                       label: Text.Read.Lex.readOctP_$sreadOctP_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BC0: // global
           R2 = R2;
           call Text.Read.Lex.readOctP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.209086432 UTC

[section ""data" . Text.Read.Lex.readOctP2_closure" {
     Text.Read.Lex.readOctP2_closure:
         const Text.Read.Lex.readOctP2_info;
         const 0;
 },
 w2_s3yoh_entry() //  [R1]
         { info_tbl: [(c3BCb,
                       label: w2_s3yoh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BCb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3BCc; else goto c3BCd;
       c3BCc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BCd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yol_entry() //  [R1, R2]
         { info_tbl: [(c3BCm,
                       label: sat_s3yol_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BCm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3BCn; else goto c3BCo;
       c3BCn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BCo: // global
           I64[Sp - 8] = block_c3BCj_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BCj() //  [R1]
         { info_tbl: [(c3BCj,
                       label: block_c3BCj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BCj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BCr; else goto c3BCq;
       c3BCr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BCq: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.readOctP2_entry() //  [R2, R3]
         { info_tbl: [(c3BCs,
                       label: Text.Read.Lex.readOctP2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BCs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3BCw; else goto c3BCv;
       c3BCw: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readOctP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3BCv: // global
           I64[Hp - 48] = w2_s3yoh_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yol_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.211709099 UTC

[section ""data" . Text.Read.Lex.readOctP_closure" {
     Text.Read.Lex.readOctP_closure:
         const Text.Read.Lex.readOctP_info;
         const 0;
 },
 Text.Read.Lex.readOctP_entry() //  [R2, R3]
         { info_tbl: [(c3BCB,
                       label: Text.Read.Lex.readOctP_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BCB: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readOctP2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.21275883 UTC

[section ""data" . Text.Read.Lex.readDecP1_closure" {
     Text.Read.Lex.readDecP1_closure:
         const Text.Read.Lex.readDecP1_info;
         const 0;
 },
 section ""relreadonly" . u3BCR_srtd" {
     u3BCR_srtd:
         const S3yFW_srt+280;
         const 34;
         const 8858370049;
 },
 Text.Read.Lex.readDecP1_entry() //  [R2]
         { info_tbl: [(c3BCL,
                       label: Text.Read.Lex.readDecP1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BCL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3BCM; else goto c3BCN;
       c3BCM: // global
           R2 = R2;
           R1 = Text.Read.Lex.readDecP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BCN: // global
           I64[Sp - 8] = block_c3BCI_info;
           R3 = R2;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BCI() //  [R1]
         { info_tbl: [(c3BCI,
                       label: block_c3BCI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BCI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BCQ; else goto c3BCP;
       c3BCQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BCP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.214818484 UTC

[section ""data" . Text.Read.Lex.readDecP_$sreadDecP_closure" {
     Text.Read.Lex.readDecP_$sreadDecP_closure:
         const Text.Read.Lex.readDecP_$sreadDecP_info;
         const 0;
 },
 Text.Read.Lex.readDecP_$sreadDecP_entry() //  [R2]
         { info_tbl: [(c3BCW,
                       label: Text.Read.Lex.readDecP_$sreadDecP_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BCW: // global
           R2 = R2;
           call Text.Read.Lex.readDecP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.216134049 UTC

[section ""data" . Text.Read.Lex.readDecP5_closure" {
     Text.Read.Lex.readDecP5_closure:
         const Text.Read.Lex.readDecP5_info;
         const 0;
 },
 w2_s3yor_entry() //  [R1]
         { info_tbl: [(c3BD7,
                       label: w2_s3yor_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BD7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3BD8; else goto c3BD9;
       c3BD8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BD9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yov_entry() //  [R1, R2]
         { info_tbl: [(c3BDi,
                       label: sat_s3yov_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BDi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3BDj; else goto c3BDk;
       c3BDj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BDk: // global
           I64[Sp - 8] = block_c3BDf_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BDf() //  [R1]
         { info_tbl: [(c3BDf,
                       label: block_c3BDf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BDf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BDn; else goto c3BDm;
       c3BDn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BDm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.readDecP5_entry() //  [R2, R3]
         { info_tbl: [(c3BDo,
                       label: Text.Read.Lex.readDecP5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BDo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3BDs; else goto c3BDr;
       c3BDs: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readDecP5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3BDr: // global
           I64[Hp - 48] = w2_s3yor_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yov_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.218009747 UTC

[section ""data" . Text.Read.Lex.readDecP_closure" {
     Text.Read.Lex.readDecP_closure:
         const Text.Read.Lex.readDecP_info;
         const 0;
 },
 Text.Read.Lex.readDecP_entry() //  [R2, R3]
         { info_tbl: [(c3BDx,
                       label: Text.Read.Lex.readDecP_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BDx: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readDecP5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.219002998 UTC

[section ""data" . Text.Read.Lex.readHexP1_closure" {
     Text.Read.Lex.readHexP1_closure:
         const Text.Read.Lex.readHexP1_info;
         const 0;
 },
 Text.Read.Lex.readHexP1_entry() //  [R2]
         { info_tbl: [(c3BDH,
                       label: Text.Read.Lex.readHexP1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BDH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3BDI; else goto c3BDJ;
       c3BDI: // global
           R2 = R2;
           R1 = Text.Read.Lex.readHexP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BDJ: // global
           I64[Sp - 8] = block_c3BDE_info;
           R3 = R2;
           R2 = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BDE() //  [R1]
         { info_tbl: [(c3BDE,
                       label: block_c3BDE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BDE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BDM; else goto c3BDL;
       c3BDM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BDL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.220237576 UTC

[section ""data" . Text.Read.Lex.readHexP_$sreadHexP_closure" {
     Text.Read.Lex.readHexP_$sreadHexP_closure:
         const Text.Read.Lex.readHexP_$sreadHexP_info;
         const 0;
 },
 Text.Read.Lex.readHexP_$sreadHexP_entry() //  [R2]
         { info_tbl: [(c3BDR,
                       label: Text.Read.Lex.readHexP_$sreadHexP_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BDR: // global
           R2 = R2;
           call Text.Read.Lex.readHexP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.221624614 UTC

[section ""data" . Text.Read.Lex.readHexP2_closure" {
     Text.Read.Lex.readHexP2_closure:
         const Text.Read.Lex.readHexP2_info;
         const 0;
 },
 w2_s3yoB_entry() //  [R1]
         { info_tbl: [(c3BE2,
                       label: w2_s3yoB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BE2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3BE3; else goto c3BE4;
       c3BE3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BE4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yoF_entry() //  [R1, R2]
         { info_tbl: [(c3BEd,
                       label: sat_s3yoF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BEd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3BEe; else goto c3BEf;
       c3BEe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BEf: // global
           I64[Sp - 8] = block_c3BEa_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BEa() //  [R1]
         { info_tbl: [(c3BEa,
                       label: block_c3BEa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BEa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BEi; else goto c3BEh;
       c3BEi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BEh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.readHexP2_entry() //  [R2, R3]
         { info_tbl: [(c3BEj,
                       label: Text.Read.Lex.readHexP2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BEj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3BEn; else goto c3BEm;
       c3BEn: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readHexP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3BEm: // global
           I64[Hp - 48] = w2_s3yoB_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yoF_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.223513717 UTC

[section ""data" . Text.Read.Lex.readHexP_closure" {
     Text.Read.Lex.readHexP_closure:
         const Text.Read.Lex.readHexP_info;
         const 0;
 },
 Text.Read.Lex.readHexP_entry() //  [R2, R3]
         { info_tbl: [(c3BEs,
                       label: Text.Read.Lex.readHexP_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BEs: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readHexP2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.228264478 UTC

[section ""data" . $wlexDigits_r3y9x_closure" {
     $wlexDigits_r3y9x_closure:
         const $wlexDigits_r3y9x_info;
         const 0;
 },
 lvl116_s3yoI_entry() //  [R1, R2]
         { info_tbl: [(c3BEL,
                       label: lvl116_s3yoI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BEL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BEM; else goto c3BEN;
       c3BEM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BEN: // global
           I64[Sp - 16] = block_c3BEE_info;
           _s3yoH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yoH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3BEU; else goto c3BEF;
       u3BEU: // global
           call _c3BEE(R1) args: 0, res: 0, upd: 0;
       c3BEF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BEE() //  [R1]
         { info_tbl: [(c3BEE,
                       label: block_c3BEE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BEE: // global
           if (R1 & 7 == 1) goto c3BEI; else goto c3BEJ;
       c3BEI: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3BEJ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yoS_entry() //  [R1]
         { info_tbl: [(c3BF9,
                       label: sat_s3yoS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BF9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BFa; else goto c3BFb;
       c3BFa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BFb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yp4_entry() //  [R1, R2]
         { info_tbl: [(c3BFD,
                       label: sat_s3yp4_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BFD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3BFH; else goto c3BFG;
       c3BFH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BFG: // global
           _s3yoP::P64 = P64[R1 + 7];
           _s3yp0::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yp0::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3yoP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3yp1_entry() //  [R1]
         { info_tbl: [(c3BFI,
                       label: lvl117_s3yp1_info
                       rep:HeapRep 5 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BFI: // global
           _s3yp1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3BFJ; else goto c3BFK;
       c3BFK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3BFM; else goto c3BFL;
       c3BFM: // global
           HpAlloc = 24;
           goto c3BFJ;
       c3BFJ: // global
           R1 = _s3yp1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BFL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yp1::P64;
           _s3yoN::P64 = P64[_s3yp1::P64 + 16];
           _s3yoP::P64 = P64[_s3yp1::P64 + 24];
           _s3yoQ::P64 = P64[_s3yp1::P64 + 32];
           _s3yoU::P64 = P64[_s3yp1::P64 + 40];
           _s3yp0::P64 = P64[_s3yp1::P64 + 48];
           I64[Hp - 16] = sat_s3yp4_info;
           P64[Hp - 8] = _s3yoP::P64;
           P64[Hp] = _s3yp0::P64;
           R4 = _s3yoQ::P64;
           R3 = Hp - 15;
           R2 = _s3yoU::P64;
           R1 = _s3yoN::P64;
           Sp = Sp - 16;
           call scan_s3yoN_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yp6_entry() //  [R1]
         { info_tbl: [(c3BFS,
                       label: sat_s3yp6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BFS: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ypa_entry() //  [R1]
         { info_tbl: [(c3BG5,
                       label: sat_s3ypa_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BG5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BG6; else goto c3BG7;
       c3BG6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BG7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ypc_entry() //  [R1]
         { info_tbl: [(c3BGg,
                       label: sat_s3ypc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BGg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BGh; else goto c3BGi;
       c3BGh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BGi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yph_entry() //  [R1]
         { info_tbl: [(c3BGr,
                       label: sat_s3yph_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BGr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BGs; else goto c3BGt;
       c3BGs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BGt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ypj_entry() //  [R1]
         { info_tbl: [(c3BGC,
                       label: sat_s3ypj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BGC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BGD; else goto c3BGE;
       c3BGD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BGE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ypq_entry() //  [R1]
         { info_tbl: [(c3BGX,
                       label: sat_s3ypq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BGX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BGY; else goto c3BGZ;
       c3BGY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BGZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yps_entry() //  [R1]
         { info_tbl: [(c3BH8,
                       label: sat_s3yps_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BH8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BH9; else goto c3BHa;
       c3BH9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BHa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 scan_s3yoN_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c3BHf,
                       label: scan_s3yoN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BHf: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3BHg; else goto c3BHh;
       c3BHg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3BHh: // global
           I64[Sp - 40] = block_c3BF0_info;
           _s3yoN::P64 = R1;
           _s3yoG::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3yoG::P64;
           P64[Sp - 24] = _s3yoN::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3BJr; else goto c3BF1;
       u3BJr: // global
           call _c3BF0(R1) args: 0, res: 0, upd: 0;
       c3BF1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BF0() //  [R1]
         { info_tbl: [(c3BF0,
                       label: block_c3BF0_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BF0: // global
           if (R1 & 7 == 1) goto c3BHc; else goto c3BHd;
       c3BHc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3BHk; else goto c3BHj;
       c3BHk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BHj: // global
           I64[Hp - 16] = sat_s3yoS_info;
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 16;
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3BHd: // global
           I64[Sp - 8] = block_c3BFe_info;
           _s3yoT::P64 = P64[R1 + 6];
           _s3yoU::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s3yoU::P64;
           P64[Sp + 8] = _s3yoT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3BJh; else goto c3BFf;
       u3BJh: // global
           call _c3BFe(R1) args: 0, res: 0, upd: 0;
       c3BFf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BFe() //  [R1]
         { info_tbl: [(c3BFe,
                       label: block_c3BFe_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BFe: // global
           I64[Sp] = block_c3BFj_info;
           _s3yoW::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3yoW::I64;
           if (R1 & 7 != 0) goto u3BJi; else goto c3BFk;
       u3BJi: // global
           call _c3BFj(R1) args: 0, res: 0, upd: 0;
       c3BFk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BFj() //  [R1]
         { info_tbl: [(c3BFj,
                       label: block_c3BFj_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BFj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3BHp; else goto c3BHo;
       c3BHp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BHo: // global
           _s3yoY::I64 = I64[R1 + 7];
           _s3yp7::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s3yp7::I64, 11)) goto u3BJ7; else goto u3BJ9;
       u3BJ7: // global
           _s3yoP::P64 = P64[Sp + 32];
           _s3yoQ::P64 = P64[Sp + 40];
           if (%MO_S_Lt_W64(_s3yp7::I64, 10)) goto u3BJ8; else goto c3BHJ;
       u3BJ8: // global
           if (_s3yp7::I64 != 8) goto c3BHv; else goto c3BHC;
       c3BHC: // global
           if (48 > _s3yoY::I64) goto c3BHx; else goto c3BHB;
       c3BHx: // global
           I64[Hp - 16] = sat_s3ypa_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3BHB: // global
           if (_s3yoY::I64 > 55) goto c3BHz; else goto c3BHA;
       c3BHz: // global
           I64[Hp - 16] = sat_s3ypc_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3BHA: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 48;
           _c3BJ6::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3BJ6::P64;
           Sp = Sp + 8;
           goto u3BJm;
       c3BHJ: // global
           if (48 > _s3yoY::I64) goto c3BHE; else goto c3BHI;
       c3BHE: // global
           I64[Hp - 16] = sat_s3yph_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3BHI: // global
           if (_s3yoY::I64 > 57) goto c3BHG; else goto c3BHH;
       c3BHG: // global
           I64[Hp - 16] = sat_s3ypj_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3BHH: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 48;
           _c3BJ0::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3BJ0::P64;
           Sp = Sp + 8;
           goto u3BJm;
       u3BJ9: // global
           if (_s3yp7::I64 != 16) goto c3BHv; else goto c3BIk;
       c3BHv: // global
           Hp = Hp - 24;
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3BIk: // global
           if (48 > _s3yoY::I64) goto c3BIh; else goto c3BIj;
       c3BIj: // global
           if (_s3yoY::I64 > 57) goto c3BIh; else goto c3BIi;
       c3BIh: // global
           Hp = Hp - 24;
           I64[Sp + 16] = _s3yoY::I64;
           call _c3BGJ() args: 0, res: 0, upd: 0;
       c3BIi: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 48;
           _c3BIC::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3BIC::P64;
           Sp = Sp + 8;
           goto u3BJm;
       u3BJm: // global
           call _c3BFr() args: 0, res: 0, upd: 0;
     }
 },
 _c3BGJ() //  []
         { info_tbl: [(c3BGJ,
                       label: block_c3BGJ_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BGJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BHM; else goto c3BHL;
       c3BHM: // global
           HpAlloc = 16;
           I64[Sp] = block_c3BGJ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3BHL: // global
           _s3yoY::I64 = I64[Sp + 16];
           if (97 > _s3yoY::I64) goto c3BI5; else goto c3BI7;
       c3BI7: // global
           if (_s3yoY::I64 > 102) goto c3BI5; else goto c3BI6;
       c3BI5: // global
           Hp = Hp - 16;
           call _c3BGO() args: 0, res: 0, upd: 0;
       c3BI6: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3yoY::I64 - 87;
           P64[Sp + 16] = Hp - 7;
           Sp = Sp + 8;
           call _c3BFr() args: 0, res: 0, upd: 0;
     }
 },
 _c3BGO() //  []
         { info_tbl: [(c3BGO,
                       label: block_c3BGO_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BGO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3BHP; else goto c3BHO;
       c3BHP: // global
           HpAlloc = 24;
           I64[Sp] = block_c3BGO_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3BHO: // global
           _s3yoP::P64 = P64[Sp + 32];
           _s3yoQ::P64 = P64[Sp + 40];
           _s3yoY::I64 = I64[Sp + 16];
           if (65 > _s3yoY::I64) goto c3BHR; else goto c3BHV;
       c3BHR: // global
           I64[Hp - 16] = sat_s3ypq_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3BHV: // global
           if (_s3yoY::I64 > 70) goto c3BHT; else goto c3BHU;
       c3BHT: // global
           I64[Hp - 16] = sat_s3yps_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3BHU: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 55;
           _c3BIU::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3BIU::P64;
           Sp = Sp + 8;
           call _c3BFr() args: 0, res: 0, upd: 0;
     }
 },
 _c3BFr() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BFr: // global
           Hp = Hp + 88;
           _s3yp0::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c3BHt; else goto c3BHs;
       c3BHt: // global
           HpAlloc = 88;
           I64[Sp - 8] = block_c3BFq_info;
           R1 = _s3yp0::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BHs: // global
           I64[Hp - 80] = lvl117_s3yp1_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = _s3yp0::P64;
           I64[Hp - 24] = sat_s3yp6_info;
           P64[Hp - 16] = Hp - 80;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3BFq() //  [R1]
         { info_tbl: [(c3BFq,
                       label: block_c3BFq_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BFq: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c3BFr() args: 0, res: 0, upd: 0;
     }
 },
 sat_s3ypJ_entry() //  [R1, R2]
         { info_tbl: [(c3BJx,
                       label: sat_s3ypJ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BJx: // global
           R4 = P64[R1 + 7];
           R3 = GHC.Base.id_closure+1;
           R2 = R2;
           R1 = P64[R1 + 15];
           call scan_s3yoN_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlexDigits_r3y9x_entry() //  [R2, R3]
         { info_tbl: [(c3BJA,
                       label: $wlexDigits_r3y9x_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BJA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3BJE; else goto c3BJD;
       c3BJE: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = $wlexDigits_r3y9x_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3BJD: // global
           I64[Hp - 48] = lvl116_s3yoI_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = scan_s3yoN_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3ypJ_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 29;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.236851151 UTC

[section ""data" . a1_r3y9y_closure" {
     a1_r3y9y_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.23748783 UTC

[section ""data" . a2_r3y9z_closure" {
     a2_r3y9z_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.240819001 UTC

[section ""data" . $wlexHexOct_r3y9A_closure" {
     $wlexHexOct_r3y9A_closure:
         const $wlexHexOct_r3y9A_info;
         const 0;
 },
 sat_s3ypP_entry() //  [R1, R2]
         { info_tbl: [(c3BJU,
                       label: sat_s3ypP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BJU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BJY; else goto c3BJX;
       c3BJY: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BJX: // global
           _s3ypK::P64 = P64[R1 + 7];
           I64[Hp - 32] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 24] = a2_r3y9z_closure+1;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 2;
           R1 = _s3ypK::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3ypL_entry() //  [R1]
         { info_tbl: [(c3BK2,
                       label: lvl116_s3ypL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BK2: // global
           _s3ypL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3BK3; else goto c3BK4;
       c3BK4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BK6; else goto c3BK5;
       c3BK6: // global
           HpAlloc = 16;
           goto c3BK3;
       c3BK3: // global
           R1 = _s3ypL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BK5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ypL::P64;
           _s3ypK::P64 = P64[_s3ypL::P64 + 16];
           I64[Hp - 8] = sat_s3ypP_info;
           P64[Hp] = _s3ypK::P64;
           I64[Sp - 24] = block_c3BJZ_info;
           R3 = Hp - 7;
           R2 = a2_r3y9z_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3BJZ() //  [R1]
         { info_tbl: [(c3BJZ,
                       label: block_c3BJZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BJZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BK9; else goto c3BK8;
       c3BK9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3BK8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ypW_entry() //  [R1, R2]
         { info_tbl: [(c3BKl,
                       label: sat_s3ypW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BKl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BKp; else goto c3BKo;
       c3BKp: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BKo: // global
           _s3ypK::P64 = P64[R1 + 7];
           I64[Hp - 32] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 24] = a1_r3y9y_closure+1;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 2;
           R1 = _s3ypK::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3ypS_entry() //  [R1]
         { info_tbl: [(c3BKt,
                       label: lvl117_s3ypS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BKt: // global
           _s3ypS::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3BKu; else goto c3BKv;
       c3BKv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BKx; else goto c3BKw;
       c3BKx: // global
           HpAlloc = 16;
           goto c3BKu;
       c3BKu: // global
           R1 = _s3ypS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BKw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ypS::P64;
           _s3ypK::P64 = P64[_s3ypS::P64 + 16];
           I64[Hp - 8] = sat_s3ypW_info;
           P64[Hp] = _s3ypK::P64;
           I64[Sp - 24] = block_c3BKq_info;
           R3 = Hp - 7;
           R2 = a1_r3y9y_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3BKq() //  [R1]
         { info_tbl: [(c3BKq,
                       label: block_c3BKq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BKq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BKA; else goto c3BKz;
       c3BKA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3BKz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3ypZ_entry() //  [R1, R2]
         { info_tbl: [(c3BKJ,
                       label: lvl118_s3ypZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BKJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3BKK; else goto c3BKL;
       c3BKK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BKL: // global
           I64[Sp - 24] = block_c3BKG_info;
           _s3ypL::P64 = P64[R1 + 7];
           _s3ypS::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ypL::P64;
           P64[Sp - 8] = _s3ypS::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3BL1; else goto c3BKH;
       u3BL1: // global
           call _c3BKG(R1) args: 0, res: 0, upd: 0;
       c3BKH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BKG() //  [R1]
         { info_tbl: [(c3BKG,
                       label: block_c3BKG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BKG: // global
           _s3ypL::P64 = P64[Sp + 8];
           _s3yq3::I64 = I64[R1 + 7];
           if (_s3yq3::I64 < 120) goto u3BKW; else goto u3BL0;
       u3BKW: // global
           _s3ypS::P64 = P64[Sp + 16];
           if (_s3yq3::I64 < 89) goto u3BKX; else goto u3BKZ;
       u3BKX: // global
           if (_s3yq3::I64 >= 88) goto c3BKV; else goto u3BKY;
       u3BKY: // global
           if (_s3yq3::I64 != 79) goto c3BKR; else goto c3BKU;
       u3BKZ: // global
           if (_s3yq3::I64 != 111) goto c3BKR; else goto c3BKU;
       c3BKU: // global
           R1 = _s3ypS::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3BL0: // global
           if (_s3yq3::I64 < 121) goto c3BKV; else goto c3BKR;
       c3BKV: // global
           R1 = _s3ypL::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3BKR: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yq9_entry() //  [R1, R2]
         { info_tbl: [(c3BLb,
                       label: sat_s3yq9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BLb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BLc; else goto c3BLd;
       c3BLc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BLd: // global
           I64[Sp - 16] = block_c3BL8_info;
           _s3yq4::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yq4::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3BLl; else goto c3BL9;
       u3BLl: // global
           call _c3BL8(R1) args: 0, res: 0, upd: 0;
       c3BL9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BL8() //  [R1]
         { info_tbl: [(c3BL8,
                       label: block_c3BL8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BL8: // global
           if (I64[R1 + 7] == 48) goto c3BLk; else goto c3BLj;
       c3BLk: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3BLj: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlexHexOct_r3y9A_entry() //  [R2]
         { info_tbl: [(c3BLm,
                       label: $wlexHexOct_r3y9A_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BLm: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3BLq; else goto c3BLp;
       c3BLq: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = $wlexHexOct_r3y9A_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BLp: // global
           I64[Hp - 96] = lvl116_s3ypL_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = lvl117_s3ypS_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = lvl118_s3ypZ_info;
           P64[Hp - 40] = Hp - 96;
           P64[Hp - 32] = Hp - 72;
           I64[Hp - 24] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = sat_s3yq9_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.246974944 UTC

[section ""data" . lexHexOct_r3y9B_closure" {
     lexHexOct_r3y9B_closure:
         const lexHexOct_r3y9B_info;
         const 0;
 },
 lexHexOct_r3y9B_entry() //  [R2]
         { info_tbl: [(c3BLy,
                       label: lexHexOct_r3y9B_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BLy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3BLz; else goto c3BLA;
       c3BLz: // global
           R2 = R2;
           R1 = lexHexOct_r3y9B_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BLA: // global
           I64[Sp - 8] = block_c3BLv_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexHexOct_r3y9A_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BLv() //  [R1]
         { info_tbl: [(c3BLv,
                       label: block_c3BLv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BLv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BLD; else goto c3BLC;
       c3BLD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BLC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.248011808 UTC

[section ""data" . lvl6_r3y9C_closure" {
     lvl6_r3y9C_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.249485074 UTC

[section ""data" . $wlexFrac_r3y9D_closure" {
     $wlexFrac_r3y9D_closure:
         const $wlexFrac_r3y9D_info;
         const 0;
 },
 sat_s3yqh_entry() //  [R1, R2]
         { info_tbl: [(c3BLS,
                       label: sat_s3yqh_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BLS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BLW; else goto c3BLV;
       c3BLW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BLV: // global
           _s3yqd::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s3yqd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yqe_entry() //  [R1]
         { info_tbl: [(c3BM0,
                       label: lvl116_s3yqe_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BM0: // global
           _s3yqe::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3BM1; else goto c3BM2;
       c3BM2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BM4; else goto c3BM3;
       c3BM4: // global
           HpAlloc = 16;
           goto c3BM1;
       c3BM1: // global
           R1 = _s3yqe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BM3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yqe::P64;
           _s3yqd::P64 = P64[_s3yqe::P64 + 16];
           I64[Hp - 8] = sat_s3yqh_info;
           P64[Hp] = _s3yqd::P64;
           I64[Sp - 24] = block_c3BLX_info;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3BLX() //  [R1]
         { info_tbl: [(c3BLX,
                       label: block_c3BLX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BLX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BM7; else goto c3BM6;
       c3BM7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3BM6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqo_entry() //  [R1, R2]
         { info_tbl: [(c3BMg,
                       label: sat_s3yqo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BMg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BMh; else goto c3BMi;
       c3BMh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BMi: // global
           I64[Sp - 16] = block_c3BMd_info;
           _s3yqe::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yqe::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3BMq; else goto c3BMe;
       u3BMq: // global
           call _c3BMd(R1) args: 0, res: 0, upd: 0;
       c3BMe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3BMd() //  [R1]
         { info_tbl: [(c3BMd,
                       label: block_c3BMd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BMd: // global
           if (I64[R1 + 7] == 46) goto c3BMp; else goto c3BMo;
       c3BMp: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3BMo: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlexFrac_r3y9D_entry() //  [R2]
         { info_tbl: [(c3BMr,
                       label: $wlexFrac_r3y9D_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BMr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BMv; else goto c3BMu;
       c3BMv: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = $wlexFrac_r3y9D_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BMu: // global
           I64[Hp - 32] = lvl116_s3yqe_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3yqo_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.251908755 UTC

[section ""data" . lexFrac_r3y9E_closure" {
     lexFrac_r3y9E_closure:
         const lexFrac_r3y9E_info;
         const 0;
 },
 lexFrac_r3y9E_entry() //  [R2]
         { info_tbl: [(c3BMD,
                       label: lexFrac_r3y9E_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BMD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3BME; else goto c3BMF;
       c3BME: // global
           R2 = R2;
           R1 = lexFrac_r3y9E_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BMF: // global
           I64[Sp - 8] = block_c3BMA_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexFrac_r3y9D_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BMA() //  [R1]
         { info_tbl: [(c3BMA,
                       label: block_c3BMA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BMA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BMI; else goto c3BMH;
       c3BMI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BMH: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.25293396 UTC

[section ""cstring" . m1_r3y9F_bytes" {
     m1_r3y9F_bytes:
         I8[] [83,79,72]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.253713492 UTC

[section ""data" . m2_r3y9G_closure" {
     m2_r3y9G_closure:
         const m2_r3y9G_info;
         const 0;
         const 0;
         const 0;
 },
 m2_r3y9G_entry() //  [R1]
         { info_tbl: [(c3BMP,
                       label: m2_r3y9G_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BMP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BMQ; else goto c3BMR;
       c3BMQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BMR: // global
           (_c3BMM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BMM::I64 == 0) goto c3BMO; else goto c3BMN;
       c3BMO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BMN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BMM::I64;
           R2 = m1_r3y9F_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.254611098 UTC

[section ""data" . x_r3y9H_closure" {
     x_r3y9H_closure:
         const GHC.Types.C#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.255155594 UTC

[section ""cstring" . m3_r3y9I_bytes" {
     m3_r3y9I_bytes:
         I8[] [83,79]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.255929081 UTC

[section ""data" . m4_r3y9J_closure" {
     m4_r3y9J_closure:
         const m4_r3y9J_info;
         const 0;
         const 0;
         const 0;
 },
 m4_r3y9J_entry() //  [R1]
         { info_tbl: [(c3BMY,
                       label: m4_r3y9J_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BMY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BMZ; else goto c3BN0;
       c3BMZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BN0: // global
           (_c3BMV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BMV::I64 == 0) goto c3BMX; else goto c3BMW;
       c3BMX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BMW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BMV::I64;
           R2 = m3_r3y9I_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.257802019 UTC

[section ""data" . x1_r3y9K_closure" {
     x1_r3y9K_closure:
         const GHC.Types.C#_con_info;
         const 14;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.258396589 UTC

[section ""cstring" . m5_r3y9L_bytes" {
     m5_r3y9L_bytes:
         I8[] [78,85,76]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.259149004 UTC

[section ""data" . m6_r3y9M_closure" {
     m6_r3y9M_closure:
         const m6_r3y9M_info;
         const 0;
         const 0;
         const 0;
 },
 m6_r3y9M_entry() //  [R1]
         { info_tbl: [(c3BN7,
                       label: m6_r3y9M_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BN7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BN8; else goto c3BN9;
       c3BN8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BN9: // global
           (_c3BN4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BN4::I64 == 0) goto c3BN6; else goto c3BN5;
       c3BN6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BN5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BN4::I64;
           R2 = m5_r3y9L_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.260040948 UTC

[section ""data" . x2_r3y9N_closure" {
     x2_r3y9N_closure:
         const GHC.Types.C#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.260597205 UTC

[section ""cstring" . m7_r3y9O_bytes" {
     m7_r3y9O_bytes:
         I8[] [83,84,88]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.261385722 UTC

[section ""data" . m8_r3y9P_closure" {
     m8_r3y9P_closure:
         const m8_r3y9P_info;
         const 0;
         const 0;
         const 0;
 },
 m8_r3y9P_entry() //  [R1]
         { info_tbl: [(c3BNg,
                       label: m8_r3y9P_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BNg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BNh; else goto c3BNi;
       c3BNh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BNi: // global
           (_c3BNd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BNd::I64 == 0) goto c3BNf; else goto c3BNe;
       c3BNf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BNe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BNd::I64;
           R2 = m7_r3y9O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.262271834 UTC

[section ""data" . x3_r3y9Q_closure" {
     x3_r3y9Q_closure:
         const GHC.Types.C#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.262855426 UTC

[section ""cstring" . m9_r3y9R_bytes" {
     m9_r3y9R_bytes:
         I8[] [69,84,88]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.263568177 UTC

[section ""data" . m10_r3y9S_closure" {
     m10_r3y9S_closure:
         const m10_r3y9S_info;
         const 0;
         const 0;
         const 0;
 },
 m10_r3y9S_entry() //  [R1]
         { info_tbl: [(c3BNp,
                       label: m10_r3y9S_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BNp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BNq; else goto c3BNr;
       c3BNq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BNr: // global
           (_c3BNm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BNm::I64 == 0) goto c3BNo; else goto c3BNn;
       c3BNo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BNn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BNm::I64;
           R2 = m9_r3y9R_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.264494886 UTC

[section ""data" . x4_r3y9T_closure" {
     x4_r3y9T_closure:
         const GHC.Types.C#_con_info;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.265063875 UTC

[section ""cstring" . m11_r3y9U_bytes" {
     m11_r3y9U_bytes:
         I8[] [69,79,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.265846455 UTC

[section ""data" . m12_r3y9V_closure" {
     m12_r3y9V_closure:
         const m12_r3y9V_info;
         const 0;
         const 0;
         const 0;
 },
 m12_r3y9V_entry() //  [R1]
         { info_tbl: [(c3BNy,
                       label: m12_r3y9V_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BNy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BNz; else goto c3BNA;
       c3BNz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BNA: // global
           (_c3BNv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BNv::I64 == 0) goto c3BNx; else goto c3BNw;
       c3BNx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BNw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BNv::I64;
           R2 = m11_r3y9U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.266776647 UTC

[section ""data" . x5_r3y9W_closure" {
     x5_r3y9W_closure:
         const GHC.Types.C#_con_info;
         const 4;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.267429761 UTC

[section ""cstring" . m13_r3y9X_bytes" {
     m13_r3y9X_bytes:
         I8[] [69,78,81]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.268161063 UTC

[section ""data" . m14_r3y9Y_closure" {
     m14_r3y9Y_closure:
         const m14_r3y9Y_info;
         const 0;
         const 0;
         const 0;
 },
 m14_r3y9Y_entry() //  [R1]
         { info_tbl: [(c3BNH,
                       label: m14_r3y9Y_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BNH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BNI; else goto c3BNJ;
       c3BNI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BNJ: // global
           (_c3BNE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BNE::I64 == 0) goto c3BNG; else goto c3BNF;
       c3BNG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BNF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BNE::I64;
           R2 = m13_r3y9X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.269630909 UTC

[section ""data" . x6_r3y9Z_closure" {
     x6_r3y9Z_closure:
         const GHC.Types.C#_con_info;
         const 5;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.270221742 UTC

[section ""cstring" . m15_r3ya0_bytes" {
     m15_r3ya0_bytes:
         I8[] [65,67,75]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.270967771 UTC

[section ""data" . m16_r3ya1_closure" {
     m16_r3ya1_closure:
         const m16_r3ya1_info;
         const 0;
         const 0;
         const 0;
 },
 m16_r3ya1_entry() //  [R1]
         { info_tbl: [(c3BNQ,
                       label: m16_r3ya1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BNQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BNR; else goto c3BNS;
       c3BNR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BNS: // global
           (_c3BNN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BNN::I64 == 0) goto c3BNP; else goto c3BNO;
       c3BNP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BNO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BNN::I64;
           R2 = m15_r3ya0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.27187914 UTC

[section ""data" . x7_r3ya2_closure" {
     x7_r3ya2_closure:
         const GHC.Types.C#_con_info;
         const 6;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.272666484 UTC

[section ""cstring" . m17_r3ya3_bytes" {
     m17_r3ya3_bytes:
         I8[] [66,69,76]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.273581366 UTC

[section ""data" . m18_r3ya4_closure" {
     m18_r3ya4_closure:
         const m18_r3ya4_info;
         const 0;
         const 0;
         const 0;
 },
 m18_r3ya4_entry() //  [R1]
         { info_tbl: [(c3BNZ,
                       label: m18_r3ya4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BNZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BO0; else goto c3BO1;
       c3BO0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BO1: // global
           (_c3BNW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BNW::I64 == 0) goto c3BNY; else goto c3BNX;
       c3BNY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BNX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BNW::I64;
           R2 = m17_r3ya3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.274452567 UTC

[section ""data" . x8_r3ya5_closure" {
     x8_r3ya5_closure:
         const GHC.Types.C#_con_info;
         const 7;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.27503905 UTC

[section ""cstring" . m19_r3ya6_bytes" {
     m19_r3ya6_bytes:
         I8[] [66,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.275765637 UTC

[section ""data" . m20_r3ya7_closure" {
     m20_r3ya7_closure:
         const m20_r3ya7_info;
         const 0;
         const 0;
         const 0;
 },
 m20_r3ya7_entry() //  [R1]
         { info_tbl: [(c3BO8,
                       label: m20_r3ya7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BO8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BO9; else goto c3BOa;
       c3BO9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BOa: // global
           (_c3BO5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BO5::I64 == 0) goto c3BO7; else goto c3BO6;
       c3BO7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BO6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BO5::I64;
           R2 = m19_r3ya6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.276678361 UTC

[section ""data" . x9_r3ya8_closure" {
     x9_r3ya8_closure:
         const GHC.Types.C#_con_info;
         const 8;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.277308079 UTC

[section ""cstring" . m21_r3ya9_bytes" {
     m21_r3ya9_bytes:
         I8[] [72,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.278049239 UTC

[section ""data" . m22_r3yaa_closure" {
     m22_r3yaa_closure:
         const m22_r3yaa_info;
         const 0;
         const 0;
         const 0;
 },
 m22_r3yaa_entry() //  [R1]
         { info_tbl: [(c3BOh,
                       label: m22_r3yaa_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BOh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BOi; else goto c3BOj;
       c3BOi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BOj: // global
           (_c3BOe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BOe::I64 == 0) goto c3BOg; else goto c3BOf;
       c3BOg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BOf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BOe::I64;
           R2 = m21_r3ya9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.278944806 UTC

[section ""data" . x10_r3yab_closure" {
     x10_r3yab_closure:
         const GHC.Types.C#_con_info;
         const 9;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.279582639 UTC

[section ""cstring" . m23_r3yac_bytes" {
     m23_r3yac_bytes:
         I8[] [76,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.280373706 UTC

[section ""data" . m24_r3yad_closure" {
     m24_r3yad_closure:
         const m24_r3yad_info;
         const 0;
         const 0;
         const 0;
 },
 m24_r3yad_entry() //  [R1]
         { info_tbl: [(c3BOq,
                       label: m24_r3yad_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BOq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BOr; else goto c3BOs;
       c3BOr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BOs: // global
           (_c3BOn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BOn::I64 == 0) goto c3BOp; else goto c3BOo;
       c3BOp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BOo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BOn::I64;
           R2 = m23_r3yac_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.282438204 UTC

[section ""data" . x11_r3yae_closure" {
     x11_r3yae_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.28335802 UTC

[section ""cstring" . m25_r3yaf_bytes" {
     m25_r3yaf_bytes:
         I8[] [86,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.284529598 UTC

[section ""data" . m26_r3yag_closure" {
     m26_r3yag_closure:
         const m26_r3yag_info;
         const 0;
         const 0;
         const 0;
 },
 m26_r3yag_entry() //  [R1]
         { info_tbl: [(c3BOz,
                       label: m26_r3yag_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BOz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BOA; else goto c3BOB;
       c3BOA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BOB: // global
           (_c3BOw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BOw::I64 == 0) goto c3BOy; else goto c3BOx;
       c3BOy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BOx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BOw::I64;
           R2 = m25_r3yaf_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.286007061 UTC

[section ""data" . x12_r3yah_closure" {
     x12_r3yah_closure:
         const GHC.Types.C#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.286843445 UTC

[section ""cstring" . m27_r3yai_bytes" {
     m27_r3yai_bytes:
         I8[] [70,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.287942724 UTC

[section ""data" . m28_r3yaj_closure" {
     m28_r3yaj_closure:
         const m28_r3yaj_info;
         const 0;
         const 0;
         const 0;
 },
 m28_r3yaj_entry() //  [R1]
         { info_tbl: [(c3BOI,
                       label: m28_r3yaj_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BOI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BOJ; else goto c3BOK;
       c3BOJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BOK: // global
           (_c3BOF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BOF::I64 == 0) goto c3BOH; else goto c3BOG;
       c3BOH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BOG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BOF::I64;
           R2 = m27_r3yai_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.28941212 UTC

[section ""data" . x13_r3yak_closure" {
     x13_r3yak_closure:
         const GHC.Types.C#_con_info;
         const 12;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.290234685 UTC

[section ""cstring" . m29_r3yal_bytes" {
     m29_r3yal_bytes:
         I8[] [67,82]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.291158547 UTC

[section ""data" . m30_r3yam_closure" {
     m30_r3yam_closure:
         const m30_r3yam_info;
         const 0;
         const 0;
         const 0;
 },
 m30_r3yam_entry() //  [R1]
         { info_tbl: [(c3BOR,
                       label: m30_r3yam_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BOR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BOS; else goto c3BOT;
       c3BOS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BOT: // global
           (_c3BOO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BOO::I64 == 0) goto c3BOQ; else goto c3BOP;
       c3BOQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BOP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BOO::I64;
           R2 = m29_r3yal_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.292101611 UTC

[section ""data" . x14_r3yan_closure" {
     x14_r3yan_closure:
         const GHC.Types.C#_con_info;
         const 13;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.292692697 UTC

[section ""cstring" . m31_r3yao_bytes" {
     m31_r3yao_bytes:
         I8[] [83,73]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.293467025 UTC

[section ""data" . m32_r3yap_closure" {
     m32_r3yap_closure:
         const m32_r3yap_info;
         const 0;
         const 0;
         const 0;
 },
 m32_r3yap_entry() //  [R1]
         { info_tbl: [(c3BP0,
                       label: m32_r3yap_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BP0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BP1; else goto c3BP2;
       c3BP1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BP2: // global
           (_c3BOX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BOX::I64 == 0) goto c3BOZ; else goto c3BOY;
       c3BOZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BOY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BOX::I64;
           R2 = m31_r3yao_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.294379973 UTC

[section ""data" . x15_r3yaq_closure" {
     x15_r3yaq_closure:
         const GHC.Types.C#_con_info;
         const 15;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.294982753 UTC

[section ""cstring" . m33_r3yar_bytes" {
     m33_r3yar_bytes:
         I8[] [68,76,69]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.295781488 UTC

[section ""data" . m34_r3yas_closure" {
     m34_r3yas_closure:
         const m34_r3yas_info;
         const 0;
         const 0;
         const 0;
 },
 m34_r3yas_entry() //  [R1]
         { info_tbl: [(c3BP9,
                       label: m34_r3yas_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BP9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BPa; else goto c3BPb;
       c3BPa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BPb: // global
           (_c3BP6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BP6::I64 == 0) goto c3BP8; else goto c3BP7;
       c3BP8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BP7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BP6::I64;
           R2 = m33_r3yar_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.297281697 UTC

[section ""data" . x16_r3yat_closure" {
     x16_r3yat_closure:
         const GHC.Types.C#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.297829565 UTC

[section ""cstring" . m35_r3yau_bytes" {
     m35_r3yau_bytes:
         I8[] [68,67,49]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.29859064 UTC

[section ""data" . m36_r3yav_closure" {
     m36_r3yav_closure:
         const m36_r3yav_info;
         const 0;
         const 0;
         const 0;
 },
 m36_r3yav_entry() //  [R1]
         { info_tbl: [(c3BPi,
                       label: m36_r3yav_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BPi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BPj; else goto c3BPk;
       c3BPj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BPk: // global
           (_c3BPf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BPf::I64 == 0) goto c3BPh; else goto c3BPg;
       c3BPh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BPg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BPf::I64;
           R2 = m35_r3yau_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.299472166 UTC

[section ""data" . x17_r3yaw_closure" {
     x17_r3yaw_closure:
         const GHC.Types.C#_con_info;
         const 17;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.300051683 UTC

[section ""cstring" . m37_r3yax_bytes" {
     m37_r3yax_bytes:
         I8[] [68,67,50]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.300825716 UTC

[section ""data" . m38_r3yay_closure" {
     m38_r3yay_closure:
         const m38_r3yay_info;
         const 0;
         const 0;
         const 0;
 },
 m38_r3yay_entry() //  [R1]
         { info_tbl: [(c3BPr,
                       label: m38_r3yay_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BPr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BPs; else goto c3BPt;
       c3BPs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BPt: // global
           (_c3BPo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BPo::I64 == 0) goto c3BPq; else goto c3BPp;
       c3BPq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BPp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BPo::I64;
           R2 = m37_r3yax_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.30175838 UTC

[section ""data" . x18_r3yaz_closure" {
     x18_r3yaz_closure:
         const GHC.Types.C#_con_info;
         const 18;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.302344745 UTC

[section ""cstring" . m39_r3yaA_bytes" {
     m39_r3yaA_bytes:
         I8[] [68,67,51]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.303092109 UTC

[section ""data" . m40_r3yaB_closure" {
     m40_r3yaB_closure:
         const m40_r3yaB_info;
         const 0;
         const 0;
         const 0;
 },
 m40_r3yaB_entry() //  [R1]
         { info_tbl: [(c3BPA,
                       label: m40_r3yaB_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BPA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BPB; else goto c3BPC;
       c3BPB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BPC: // global
           (_c3BPx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BPx::I64 == 0) goto c3BPz; else goto c3BPy;
       c3BPz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BPy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BPx::I64;
           R2 = m39_r3yaA_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.304018175 UTC

[section ""data" . x19_r3yaC_closure" {
     x19_r3yaC_closure:
         const GHC.Types.C#_con_info;
         const 19;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.304555046 UTC

[section ""cstring" . m41_r3yaD_bytes" {
     m41_r3yaD_bytes:
         I8[] [68,67,52]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.305343737 UTC

[section ""data" . m42_r3yaE_closure" {
     m42_r3yaE_closure:
         const m42_r3yaE_info;
         const 0;
         const 0;
         const 0;
 },
 m42_r3yaE_entry() //  [R1]
         { info_tbl: [(c3BPJ,
                       label: m42_r3yaE_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BPJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BPK; else goto c3BPL;
       c3BPK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BPL: // global
           (_c3BPG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BPG::I64 == 0) goto c3BPI; else goto c3BPH;
       c3BPI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BPH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BPG::I64;
           R2 = m41_r3yaD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.306318935 UTC

[section ""data" . x20_r3yaF_closure" {
     x20_r3yaF_closure:
         const GHC.Types.C#_con_info;
         const 20;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.306955079 UTC

[section ""cstring" . m43_r3yaG_bytes" {
     m43_r3yaG_bytes:
         I8[] [78,65,75]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.308227492 UTC

[section ""data" . m44_r3yaH_closure" {
     m44_r3yaH_closure:
         const m44_r3yaH_info;
         const 0;
         const 0;
         const 0;
 },
 m44_r3yaH_entry() //  [R1]
         { info_tbl: [(c3BPS,
                       label: m44_r3yaH_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BPS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BPT; else goto c3BPU;
       c3BPT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BPU: // global
           (_c3BPP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BPP::I64 == 0) goto c3BPR; else goto c3BPQ;
       c3BPR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BPQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BPP::I64;
           R2 = m43_r3yaG_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.309164459 UTC

[section ""data" . x21_r3yaI_closure" {
     x21_r3yaI_closure:
         const GHC.Types.C#_con_info;
         const 21;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.309821825 UTC

[section ""cstring" . m45_r3yaJ_bytes" {
     m45_r3yaJ_bytes:
         I8[] [83,89,78]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.310585666 UTC

[section ""data" . m46_r3yaK_closure" {
     m46_r3yaK_closure:
         const m46_r3yaK_info;
         const 0;
         const 0;
         const 0;
 },
 m46_r3yaK_entry() //  [R1]
         { info_tbl: [(c3BQ1,
                       label: m46_r3yaK_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BQ1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BQ2; else goto c3BQ3;
       c3BQ2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BQ3: // global
           (_c3BPY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BPY::I64 == 0) goto c3BQ0; else goto c3BPZ;
       c3BQ0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BPZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BPY::I64;
           R2 = m45_r3yaJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.311538726 UTC

[section ""data" . x22_r3yaL_closure" {
     x22_r3yaL_closure:
         const GHC.Types.C#_con_info;
         const 22;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.312101801 UTC

[section ""cstring" . m47_r3yaM_bytes" {
     m47_r3yaM_bytes:
         I8[] [69,84,66]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.31281034 UTC

[section ""data" . m48_r3yaN_closure" {
     m48_r3yaN_closure:
         const m48_r3yaN_info;
         const 0;
         const 0;
         const 0;
 },
 m48_r3yaN_entry() //  [R1]
         { info_tbl: [(c3BQa,
                       label: m48_r3yaN_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BQa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BQb; else goto c3BQc;
       c3BQb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BQc: // global
           (_c3BQ7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BQ7::I64 == 0) goto c3BQ9; else goto c3BQ8;
       c3BQ9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BQ8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BQ7::I64;
           R2 = m47_r3yaM_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.31376158 UTC

[section ""data" . x23_r3yaO_closure" {
     x23_r3yaO_closure:
         const GHC.Types.C#_con_info;
         const 23;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.314304773 UTC

[section ""cstring" . m49_r3yaP_bytes" {
     m49_r3yaP_bytes:
         I8[] [67,65,78]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.315073848 UTC

[section ""data" . m50_r3yaQ_closure" {
     m50_r3yaQ_closure:
         const m50_r3yaQ_info;
         const 0;
         const 0;
         const 0;
 },
 m50_r3yaQ_entry() //  [R1]
         { info_tbl: [(c3BQj,
                       label: m50_r3yaQ_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BQj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BQk; else goto c3BQl;
       c3BQk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BQl: // global
           (_c3BQg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BQg::I64 == 0) goto c3BQi; else goto c3BQh;
       c3BQi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BQh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BQg::I64;
           R2 = m49_r3yaP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.316010985 UTC

[section ""data" . x24_r3yaR_closure" {
     x24_r3yaR_closure:
         const GHC.Types.C#_con_info;
         const 24;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.316549394 UTC

[section ""cstring" . m51_r3yaS_bytes" {
     m51_r3yaS_bytes:
         I8[] [69,77]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.317632106 UTC

[section ""data" . m52_r3yaT_closure" {
     m52_r3yaT_closure:
         const m52_r3yaT_info;
         const 0;
         const 0;
         const 0;
 },
 m52_r3yaT_entry() //  [R1]
         { info_tbl: [(c3BQs,
                       label: m52_r3yaT_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BQs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BQt; else goto c3BQu;
       c3BQt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BQu: // global
           (_c3BQp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BQp::I64 == 0) goto c3BQr; else goto c3BQq;
       c3BQr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BQq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BQp::I64;
           R2 = m51_r3yaS_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.318605974 UTC

[section ""data" . x25_r3yaU_closure" {
     x25_r3yaU_closure:
         const GHC.Types.C#_con_info;
         const 25;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.319230854 UTC

[section ""cstring" . m53_r3yaV_bytes" {
     m53_r3yaV_bytes:
         I8[] [83,85,66]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.320485177 UTC

[section ""data" . m54_r3yaW_closure" {
     m54_r3yaW_closure:
         const m54_r3yaW_info;
         const 0;
         const 0;
         const 0;
 },
 m54_r3yaW_entry() //  [R1]
         { info_tbl: [(c3BQB,
                       label: m54_r3yaW_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BQB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BQC; else goto c3BQD;
       c3BQC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BQD: // global
           (_c3BQy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BQy::I64 == 0) goto c3BQA; else goto c3BQz;
       c3BQA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BQz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BQy::I64;
           R2 = m53_r3yaV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.321393859 UTC

[section ""data" . x26_r3yaX_closure" {
     x26_r3yaX_closure:
         const GHC.Types.C#_con_info;
         const 26;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.321966892 UTC

[section ""cstring" . m55_r3yaY_bytes" {
     m55_r3yaY_bytes:
         I8[] [69,83,67]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.322663217 UTC

[section ""data" . m56_r3yaZ_closure" {
     m56_r3yaZ_closure:
         const m56_r3yaZ_info;
         const 0;
         const 0;
         const 0;
 },
 m56_r3yaZ_entry() //  [R1]
         { info_tbl: [(c3BQK,
                       label: m56_r3yaZ_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BQK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BQL; else goto c3BQM;
       c3BQL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BQM: // global
           (_c3BQH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BQH::I64 == 0) goto c3BQJ; else goto c3BQI;
       c3BQJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BQI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BQH::I64;
           R2 = m55_r3yaY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.323510534 UTC

[section ""data" . x27_r3yb0_closure" {
     x27_r3yb0_closure:
         const GHC.Types.C#_con_info;
         const 27;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.324037127 UTC

[section ""cstring" . m57_r3yb1_bytes" {
     m57_r3yb1_bytes:
         I8[] [70,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.32474991 UTC

[section ""data" . m58_r3yb2_closure" {
     m58_r3yb2_closure:
         const m58_r3yb2_info;
         const 0;
         const 0;
         const 0;
 },
 m58_r3yb2_entry() //  [R1]
         { info_tbl: [(c3BQT,
                       label: m58_r3yb2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BQT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BQU; else goto c3BQV;
       c3BQU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BQV: // global
           (_c3BQQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BQQ::I64 == 0) goto c3BQS; else goto c3BQR;
       c3BQS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BQR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BQQ::I64;
           R2 = m57_r3yb1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.325714739 UTC

[section ""data" . x28_r3yb3_closure" {
     x28_r3yb3_closure:
         const GHC.Types.C#_con_info;
         const 28;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.326325551 UTC

[section ""cstring" . m59_r3yb4_bytes" {
     m59_r3yb4_bytes:
         I8[] [71,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.327071967 UTC

[section ""data" . m60_r3yb5_closure" {
     m60_r3yb5_closure:
         const m60_r3yb5_info;
         const 0;
         const 0;
         const 0;
 },
 m60_r3yb5_entry() //  [R1]
         { info_tbl: [(c3BR2,
                       label: m60_r3yb5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BR2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BR3; else goto c3BR4;
       c3BR3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BR4: // global
           (_c3BQZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BQZ::I64 == 0) goto c3BR1; else goto c3BR0;
       c3BR1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BR0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BQZ::I64;
           R2 = m59_r3yb4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.328051539 UTC

[section ""data" . x29_r3yb6_closure" {
     x29_r3yb6_closure:
         const GHC.Types.C#_con_info;
         const 29;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.328677546 UTC

[section ""cstring" . m61_r3yb7_bytes" {
     m61_r3yb7_bytes:
         I8[] [82,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.329943662 UTC

[section ""data" . m62_r3yb8_closure" {
     m62_r3yb8_closure:
         const m62_r3yb8_info;
         const 0;
         const 0;
         const 0;
 },
 m62_r3yb8_entry() //  [R1]
         { info_tbl: [(c3BRb,
                       label: m62_r3yb8_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BRb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BRc; else goto c3BRd;
       c3BRc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BRd: // global
           (_c3BR8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BR8::I64 == 0) goto c3BRa; else goto c3BR9;
       c3BRa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BR9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BR8::I64;
           R2 = m61_r3yb7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.330911313 UTC

[section ""data" . x30_r3yb9_closure" {
     x30_r3yb9_closure:
         const GHC.Types.C#_con_info;
         const 30;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.331995569 UTC

[section ""cstring" . m63_r3yba_bytes" {
     m63_r3yba_bytes:
         I8[] [85,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.332752092 UTC

[section ""data" . m64_r3ybb_closure" {
     m64_r3ybb_closure:
         const m64_r3ybb_info;
         const 0;
         const 0;
         const 0;
 },
 m64_r3ybb_entry() //  [R1]
         { info_tbl: [(c3BRk,
                       label: m64_r3ybb_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BRk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BRl; else goto c3BRm;
       c3BRl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BRm: // global
           (_c3BRh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BRh::I64 == 0) goto c3BRj; else goto c3BRi;
       c3BRj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BRi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BRh::I64;
           R2 = m63_r3yba_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.333677447 UTC

[section ""data" . x31_r3ybc_closure" {
     x31_r3ybc_closure:
         const GHC.Types.C#_con_info;
         const 31;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.334232781 UTC

[section ""cstring" . m65_r3ybd_bytes" {
     m65_r3ybd_bytes:
         I8[] [83,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.334991001 UTC

[section ""data" . m66_r3ybe_closure" {
     m66_r3ybe_closure:
         const m66_r3ybe_info;
         const 0;
         const 0;
         const 0;
 },
 m66_r3ybe_entry() //  [R1]
         { info_tbl: [(c3BRt,
                       label: m66_r3ybe_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BRt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BRu; else goto c3BRv;
       c3BRu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BRv: // global
           (_c3BRq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BRq::I64 == 0) goto c3BRs; else goto c3BRr;
       c3BRs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BRr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BRq::I64;
           R2 = m65_r3ybd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.335892651 UTC

[section ""data" . x32_r3ybf_closure" {
     x32_r3ybf_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.336472816 UTC

[section ""cstring" . m67_r3ybg_bytes" {
     m67_r3ybg_bytes:
         I8[] [68,69,76]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.3371883 UTC

[section ""data" . m68_r3ybh_closure" {
     m68_r3ybh_closure:
         const m68_r3ybh_info;
         const 0;
         const 0;
         const 0;
 },
 m68_r3ybh_entry() //  [R1]
         { info_tbl: [(c3BRC,
                       label: m68_r3ybh_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BRC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BRD; else goto c3BRE;
       c3BRD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BRE: // global
           (_c3BRz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BRz::I64 == 0) goto c3BRB; else goto c3BRA;
       c3BRB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BRA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BRz::I64;
           R2 = m67_r3ybg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.338121678 UTC

[section ""data" . x33_r3ybi_closure" {
     x33_r3ybi_closure:
         const GHC.Types.C#_con_info;
         const 127;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.338703425 UTC

[section ""data" . sat_s3yqs_closure" {
     sat_s3yqs_closure:
         const GHC.Types.I#_con_info;
         const 1114111;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.339253578 UTC

[section ""data" . sat_s3yqt_closure" {
     sat_s3yqt_closure:
         const :_con_info;
         const sat_s3yqs_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.340036304 UTC

[section ""data" . lvl7_r3ybj_closure" {
     lvl7_r3ybj_closure:
         const lvl7_r3ybj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r3ybj_entry() //  [R1]
         { info_tbl: [(c3BRL,
                       label: lvl7_r3ybj_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BRL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BRM; else goto c3BRN;
       c3BRM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BRN: // global
           (_c3BRI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3BRI::I64 == 0) goto c3BRK; else goto c3BRJ;
       c3BRK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3BRJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3BRI::I64;
           R3 = sat_s3yqt_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.34098961 UTC

[section ""data" . lvl8_r3ybk_closure" {
     lvl8_r3ybk_closure:
         const GHC.Types.C#_con_info;
         const 34;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.341908608 UTC

[section ""data" . lvl9_r3ybl_closure" {
     lvl9_r3ybl_closure:
         const (,)_con_info;
         const lvl8_r3ybk_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.342514927 UTC

[section ""data" . lvl10_r3ybm_closure" {
     lvl10_r3ybm_closure:
         const GHC.Types.C#_con_info;
         const 39;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.343703153 UTC

[section ""data" . lvl11_r3ybn_closure" {
     lvl11_r3ybn_closure:
         const (,)_con_info;
         const lvl10_r3ybm_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.3443649 UTC

[section ""data" . lvl12_r3ybo_closure" {
     lvl12_r3ybo_closure:
         const GHC.Types.C#_con_info;
         const 92;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.345005664 UTC

[section ""data" . lvl13_r3ybp_closure" {
     lvl13_r3ybp_closure:
         const (,)_con_info;
         const lvl12_r3ybo_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.345711532 UTC

[section ""data" . lvl14_r3ybq_closure" {
     lvl14_r3ybq_closure:
         const (,)_con_info;
         const x8_r3ya5_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.346374207 UTC

[section ""data" . lvl15_r3ybr_closure" {
     lvl15_r3ybr_closure:
         const (,)_con_info;
         const x9_r3ya8_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.346996184 UTC

[section ""data" . lvl16_r3ybs_closure" {
     lvl16_r3ybs_closure:
         const (,)_con_info;
         const x13_r3yak_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.347614758 UTC

[section ""data" . lvl17_r3ybt_closure" {
     lvl17_r3ybt_closure:
         const (,)_con_info;
         const x11_r3yae_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.348255442 UTC

[section ""data" . lvl18_r3ybu_closure" {
     lvl18_r3ybu_closure:
         const (,)_con_info;
         const x14_r3yan_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.348824386 UTC

[section ""data" . lvl19_r3ybv_closure" {
     lvl19_r3ybv_closure:
         const (,)_con_info;
         const x10_r3yab_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.349490626 UTC

[section ""data" . lvl20_r3ybw_closure" {
     lvl20_r3ybw_closure:
         const (,)_con_info;
         const x12_r3yah_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.350101258 UTC

[section ""data" . lvl21_r3ybx_closure" {
     lvl21_r3ybx_closure:
         const (,)_con_info;
         const x2_r3y9N_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.350707388 UTC

[section ""data" . lvl22_r3yby_closure" {
     lvl22_r3yby_closure:
         const (,)_con_info;
         const x_r3y9H_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.351339761 UTC

[section ""data" . lvl23_r3ybz_closure" {
     lvl23_r3ybz_closure:
         const (,)_con_info;
         const x3_r3y9Q_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.351886115 UTC

[section ""data" . lvl24_r3ybA_closure" {
     lvl24_r3ybA_closure:
         const (,)_con_info;
         const x4_r3y9T_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.352496929 UTC

[section ""data" . lvl25_r3ybB_closure" {
     lvl25_r3ybB_closure:
         const (,)_con_info;
         const x5_r3y9W_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.35316518 UTC

[section ""data" . lvl26_r3ybC_closure" {
     lvl26_r3ybC_closure:
         const (,)_con_info;
         const x6_r3y9Z_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.354307265 UTC

[section ""data" . lvl27_r3ybD_closure" {
     lvl27_r3ybD_closure:
         const (,)_con_info;
         const x7_r3ya2_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.354928204 UTC

[section ""data" . lvl28_r3ybE_closure" {
     lvl28_r3ybE_closure:
         const (,)_con_info;
         const x1_r3y9K_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.355534011 UTC

[section ""data" . lvl29_r3ybF_closure" {
     lvl29_r3ybF_closure:
         const (,)_con_info;
         const x15_r3yaq_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.356149748 UTC

[section ""data" . lvl30_r3ybG_closure" {
     lvl30_r3ybG_closure:
         const (,)_con_info;
         const x16_r3yat_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.356723571 UTC

[section ""data" . lvl31_r3ybH_closure" {
     lvl31_r3ybH_closure:
         const (,)_con_info;
         const x17_r3yaw_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.357370075 UTC

[section ""data" . lvl32_r3ybI_closure" {
     lvl32_r3ybI_closure:
         const (,)_con_info;
         const x18_r3yaz_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.357924313 UTC

[section ""data" . lvl33_r3ybJ_closure" {
     lvl33_r3ybJ_closure:
         const (,)_con_info;
         const x19_r3yaC_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.358515592 UTC

[section ""data" . lvl34_r3ybK_closure" {
     lvl34_r3ybK_closure:
         const (,)_con_info;
         const x20_r3yaF_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.359085915 UTC

[section ""data" . lvl35_r3ybL_closure" {
     lvl35_r3ybL_closure:
         const (,)_con_info;
         const x21_r3yaI_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.35967738 UTC

[section ""data" . lvl36_r3ybM_closure" {
     lvl36_r3ybM_closure:
         const (,)_con_info;
         const x22_r3yaL_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.360253764 UTC

[section ""data" . lvl37_r3ybN_closure" {
     lvl37_r3ybN_closure:
         const (,)_con_info;
         const x23_r3yaO_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.360850101 UTC

[section ""data" . lvl38_r3ybO_closure" {
     lvl38_r3ybO_closure:
         const (,)_con_info;
         const x24_r3yaR_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.361496658 UTC

[section ""data" . lvl39_r3ybP_closure" {
     lvl39_r3ybP_closure:
         const (,)_con_info;
         const x25_r3yaU_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.362122025 UTC

[section ""data" . lvl40_r3ybQ_closure" {
     lvl40_r3ybQ_closure:
         const (,)_con_info;
         const x26_r3yaX_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.362706541 UTC

[section ""data" . lvl41_r3ybR_closure" {
     lvl41_r3ybR_closure:
         const (,)_con_info;
         const x27_r3yb0_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.363377097 UTC

[section ""data" . lvl42_r3ybS_closure" {
     lvl42_r3ybS_closure:
         const (,)_con_info;
         const x28_r3yb3_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.36439699 UTC

[section ""data" . lvl43_r3ybT_closure" {
     lvl43_r3ybT_closure:
         const (,)_con_info;
         const x29_r3yb6_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.365017808 UTC

[section ""data" . lvl44_r3ybU_closure" {
     lvl44_r3ybU_closure:
         const (,)_con_info;
         const x30_r3yb9_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.365639605 UTC

[section ""data" . lvl45_r3ybV_closure" {
     lvl45_r3ybV_closure:
         const (,)_con_info;
         const x31_r3ybc_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.366869933 UTC

[section ""data" . w1_r3ybW_closure" {
     w1_r3ybW_closure:
         const w1_r3ybW_info;
         const 0;
 },
 lvl116_s3yqv_entry() //  [R1]
         { info_tbl: [(c3BRW,
                       label: lvl116_s3yqv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BRW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BRX; else goto c3BRY;
       c3BRX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BRY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x1_r3y9K_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqx_entry() //  [R1]
         { info_tbl: [(c3BS4,
                       label: sat_s3yqx_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BS4: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 w1_r3ybW_entry() //  [R2]
         { info_tbl: [(c3BSa,
                       label: w1_r3ybW_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BSa: // global
           _s3yqu::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BSb; else goto c3BSc;
       c3BSc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BSe; else goto c3BSd;
       c3BSe: // global
           HpAlloc = 40;
           goto c3BSb;
       c3BSb: // global
           R2 = _s3yqu::P64;
           R1 = w1_r3ybW_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BSd: // global
           I64[Hp - 32] = lvl116_s3yqv_info;
           P64[Hp - 16] = _s3yqu::P64;
           I64[Hp - 8] = sat_s3yqx_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BS7_info;
           R3 = Hp - 7;
           R2 = m4_r3y9J_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BS7() //  [R1]
         { info_tbl: [(c3BS7,
                       label: block_c3BS7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BS7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BSh; else goto c3BSg;
       c3BSh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BSg: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.368966191 UTC

[section ""data" . w_r3ybX_closure" {
     w_r3ybX_closure:
         const w_r3ybX_info;
         const 0;
 },
 lvl116_s3yqB_entry() //  [R1]
         { info_tbl: [(c3BSq,
                       label: lvl116_s3yqB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BSq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BSr; else goto c3BSs;
       c3BSr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BSs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x_r3y9H_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqD_entry() //  [R1]
         { info_tbl: [(c3BSy,
                       label: sat_s3yqD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BSy: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 w_r3ybX_entry() //  [R2]
         { info_tbl: [(c3BSE,
                       label: w_r3ybX_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BSE: // global
           _s3yqA::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BSF; else goto c3BSG;
       c3BSG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BSI; else goto c3BSH;
       c3BSI: // global
           HpAlloc = 40;
           goto c3BSF;
       c3BSF: // global
           R2 = _s3yqA::P64;
           R1 = w_r3ybX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BSH: // global
           I64[Hp - 32] = lvl116_s3yqB_info;
           P64[Hp - 16] = _s3yqA::P64;
           I64[Hp - 8] = sat_s3yqD_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BSB_info;
           R3 = Hp - 7;
           R2 = m2_r3y9G_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BSB() //  [R1]
         { info_tbl: [(c3BSB,
                       label: block_c3BSB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BSB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BSL; else goto c3BSK;
       c3BSL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BSK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.371354949 UTC

[section ""data" . lvl46_r3ybY_closure" {
     lvl46_r3ybY_closure:
         const lvl46_r3ybY_info;
         const 0;
 },
 lvl46_r3ybY_entry() //  [R2]
         { info_tbl: [(c3BST,
                       label: lvl46_r3ybY_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BST: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3BSU; else goto c3BSV;
       c3BSU: // global
           R2 = R2;
           R1 = lvl46_r3ybY_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BSV: // global
           I64[Sp - 8] = block_c3BSQ_info;
           R4 = R2;
           R3 = w1_r3ybW_closure+1;
           R2 = w_r3ybX_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BSQ() //  [R1]
         { info_tbl: [(c3BSQ,
                       label: block_c3BSQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BSQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BSY; else goto c3BSX;
       c3BSY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BSX: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.373007697 UTC

[section ""data" . lvl47_r3ybZ_closure" {
     lvl47_r3ybZ_closure:
         const lvl47_r3ybZ_info;
         const 0;
 },
 lvl116_s3yqK_entry() //  [R1]
         { info_tbl: [(c3BT7,
                       label: lvl116_s3yqK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BT7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BT8; else goto c3BT9;
       c3BT8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BT9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x2_r3y9N_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqM_entry() //  [R1]
         { info_tbl: [(c3BTf,
                       label: sat_s3yqM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BTf: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl47_r3ybZ_entry() //  [R2]
         { info_tbl: [(c3BTl,
                       label: lvl47_r3ybZ_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BTl: // global
           _s3yqJ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BTm; else goto c3BTn;
       c3BTn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BTp; else goto c3BTo;
       c3BTp: // global
           HpAlloc = 40;
           goto c3BTm;
       c3BTm: // global
           R2 = _s3yqJ::P64;
           R1 = lvl47_r3ybZ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BTo: // global
           I64[Hp - 32] = lvl116_s3yqK_info;
           P64[Hp - 16] = _s3yqJ::P64;
           I64[Hp - 8] = sat_s3yqM_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BTi_info;
           R3 = Hp - 7;
           R2 = m6_r3y9M_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BTi() //  [R1]
         { info_tbl: [(c3BTi,
                       label: block_c3BTi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BTi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BTs; else goto c3BTr;
       c3BTs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BTr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.375150133 UTC

[section ""data" . lvl48_r3yc0_closure" {
     lvl48_r3yc0_closure:
         const lvl48_r3yc0_info;
         const 0;
 },
 lvl116_s3yqQ_entry() //  [R1]
         { info_tbl: [(c3BTB,
                       label: lvl116_s3yqQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BTB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BTC; else goto c3BTD;
       c3BTC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BTD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x3_r3y9Q_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqS_entry() //  [R1]
         { info_tbl: [(c3BTJ,
                       label: sat_s3yqS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BTJ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl48_r3yc0_entry() //  [R2]
         { info_tbl: [(c3BTP,
                       label: lvl48_r3yc0_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BTP: // global
           _s3yqP::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BTQ; else goto c3BTR;
       c3BTR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BTT; else goto c3BTS;
       c3BTT: // global
           HpAlloc = 40;
           goto c3BTQ;
       c3BTQ: // global
           R2 = _s3yqP::P64;
           R1 = lvl48_r3yc0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BTS: // global
           I64[Hp - 32] = lvl116_s3yqQ_info;
           P64[Hp - 16] = _s3yqP::P64;
           I64[Hp - 8] = sat_s3yqS_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BTM_info;
           R3 = Hp - 7;
           R2 = m8_r3y9P_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BTM() //  [R1]
         { info_tbl: [(c3BTM,
                       label: block_c3BTM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BTM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BTW; else goto c3BTV;
       c3BTW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BTV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.377296556 UTC

[section ""data" . lvl49_r3yc1_closure" {
     lvl49_r3yc1_closure:
         const lvl49_r3yc1_info;
         const 0;
 },
 lvl116_s3yqW_entry() //  [R1]
         { info_tbl: [(c3BU5,
                       label: lvl116_s3yqW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BU5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BU6; else goto c3BU7;
       c3BU6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BU7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x4_r3y9T_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqY_entry() //  [R1]
         { info_tbl: [(c3BUd,
                       label: sat_s3yqY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BUd: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl49_r3yc1_entry() //  [R2]
         { info_tbl: [(c3BUj,
                       label: lvl49_r3yc1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BUj: // global
           _s3yqV::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BUk; else goto c3BUl;
       c3BUl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BUn; else goto c3BUm;
       c3BUn: // global
           HpAlloc = 40;
           goto c3BUk;
       c3BUk: // global
           R2 = _s3yqV::P64;
           R1 = lvl49_r3yc1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BUm: // global
           I64[Hp - 32] = lvl116_s3yqW_info;
           P64[Hp - 16] = _s3yqV::P64;
           I64[Hp - 8] = sat_s3yqY_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BUg_info;
           R3 = Hp - 7;
           R2 = m10_r3y9S_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BUg() //  [R1]
         { info_tbl: [(c3BUg,
                       label: block_c3BUg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BUg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BUq; else goto c3BUp;
       c3BUq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BUp: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.379921471 UTC

[section ""data" . lvl50_r3yc2_closure" {
     lvl50_r3yc2_closure:
         const lvl50_r3yc2_info;
         const 0;
 },
 lvl116_s3yr2_entry() //  [R1]
         { info_tbl: [(c3BUz,
                       label: lvl116_s3yr2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BUz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BUA; else goto c3BUB;
       c3BUA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BUB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x5_r3y9W_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yr4_entry() //  [R1]
         { info_tbl: [(c3BUH,
                       label: sat_s3yr4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BUH: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl50_r3yc2_entry() //  [R2]
         { info_tbl: [(c3BUN,
                       label: lvl50_r3yc2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BUN: // global
           _s3yr1::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BUO; else goto c3BUP;
       c3BUP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BUR; else goto c3BUQ;
       c3BUR: // global
           HpAlloc = 40;
           goto c3BUO;
       c3BUO: // global
           R2 = _s3yr1::P64;
           R1 = lvl50_r3yc2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BUQ: // global
           I64[Hp - 32] = lvl116_s3yr2_info;
           P64[Hp - 16] = _s3yr1::P64;
           I64[Hp - 8] = sat_s3yr4_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BUK_info;
           R3 = Hp - 7;
           R2 = m12_r3y9V_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BUK() //  [R1]
         { info_tbl: [(c3BUK,
                       label: block_c3BUK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BUK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BUU; else goto c3BUT;
       c3BUU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BUT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.381943709 UTC

[section ""data" . lvl51_r3yc3_closure" {
     lvl51_r3yc3_closure:
         const lvl51_r3yc3_info;
         const 0;
 },
 lvl116_s3yr8_entry() //  [R1]
         { info_tbl: [(c3BV3,
                       label: lvl116_s3yr8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BV3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BV4; else goto c3BV5;
       c3BV4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BV5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x6_r3y9Z_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yra_entry() //  [R1]
         { info_tbl: [(c3BVb,
                       label: sat_s3yra_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BVb: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl51_r3yc3_entry() //  [R2]
         { info_tbl: [(c3BVh,
                       label: lvl51_r3yc3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BVh: // global
           _s3yr7::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BVi; else goto c3BVj;
       c3BVj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BVl; else goto c3BVk;
       c3BVl: // global
           HpAlloc = 40;
           goto c3BVi;
       c3BVi: // global
           R2 = _s3yr7::P64;
           R1 = lvl51_r3yc3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BVk: // global
           I64[Hp - 32] = lvl116_s3yr8_info;
           P64[Hp - 16] = _s3yr7::P64;
           I64[Hp - 8] = sat_s3yra_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BVe_info;
           R3 = Hp - 7;
           R2 = m14_r3y9Y_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BVe() //  [R1]
         { info_tbl: [(c3BVe,
                       label: block_c3BVe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BVe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BVo; else goto c3BVn;
       c3BVo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BVn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.383969491 UTC

[section ""data" . lvl52_r3yc4_closure" {
     lvl52_r3yc4_closure:
         const lvl52_r3yc4_info;
         const 0;
 },
 lvl116_s3yre_entry() //  [R1]
         { info_tbl: [(c3BVx,
                       label: lvl116_s3yre_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BVx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BVy; else goto c3BVz;
       c3BVy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BVz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x7_r3ya2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrg_entry() //  [R1]
         { info_tbl: [(c3BVF,
                       label: sat_s3yrg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BVF: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl52_r3yc4_entry() //  [R2]
         { info_tbl: [(c3BVL,
                       label: lvl52_r3yc4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BVL: // global
           _s3yrd::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BVM; else goto c3BVN;
       c3BVN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BVP; else goto c3BVO;
       c3BVP: // global
           HpAlloc = 40;
           goto c3BVM;
       c3BVM: // global
           R2 = _s3yrd::P64;
           R1 = lvl52_r3yc4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BVO: // global
           I64[Hp - 32] = lvl116_s3yre_info;
           P64[Hp - 16] = _s3yrd::P64;
           I64[Hp - 8] = sat_s3yrg_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BVI_info;
           R3 = Hp - 7;
           R2 = m16_r3ya1_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BVI() //  [R1]
         { info_tbl: [(c3BVI,
                       label: block_c3BVI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BVI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BVS; else goto c3BVR;
       c3BVS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BVR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.386052892 UTC

[section ""data" . lvl53_r3yc5_closure" {
     lvl53_r3yc5_closure:
         const lvl53_r3yc5_info;
         const 0;
 },
 lvl116_s3yrk_entry() //  [R1]
         { info_tbl: [(c3BW1,
                       label: lvl116_s3yrk_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BW1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BW2; else goto c3BW3;
       c3BW2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BW3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x8_r3ya5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrm_entry() //  [R1]
         { info_tbl: [(c3BW9,
                       label: sat_s3yrm_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BW9: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl53_r3yc5_entry() //  [R2]
         { info_tbl: [(c3BWf,
                       label: lvl53_r3yc5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BWf: // global
           _s3yrj::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BWg; else goto c3BWh;
       c3BWh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BWj; else goto c3BWi;
       c3BWj: // global
           HpAlloc = 40;
           goto c3BWg;
       c3BWg: // global
           R2 = _s3yrj::P64;
           R1 = lvl53_r3yc5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BWi: // global
           I64[Hp - 32] = lvl116_s3yrk_info;
           P64[Hp - 16] = _s3yrj::P64;
           I64[Hp - 8] = sat_s3yrm_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BWc_info;
           R3 = Hp - 7;
           R2 = m18_r3ya4_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BWc() //  [R1]
         { info_tbl: [(c3BWc,
                       label: block_c3BWc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BWc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BWm; else goto c3BWl;
       c3BWm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BWl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.388076125 UTC

[section ""data" . lvl54_r3yc6_closure" {
     lvl54_r3yc6_closure:
         const lvl54_r3yc6_info;
         const 0;
 },
 lvl116_s3yrq_entry() //  [R1]
         { info_tbl: [(c3BWv,
                       label: lvl116_s3yrq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BWv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BWw; else goto c3BWx;
       c3BWw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BWx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x9_r3ya8_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrs_entry() //  [R1]
         { info_tbl: [(c3BWD,
                       label: sat_s3yrs_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BWD: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl54_r3yc6_entry() //  [R2]
         { info_tbl: [(c3BWJ,
                       label: lvl54_r3yc6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BWJ: // global
           _s3yrp::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BWK; else goto c3BWL;
       c3BWL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BWN; else goto c3BWM;
       c3BWN: // global
           HpAlloc = 40;
           goto c3BWK;
       c3BWK: // global
           R2 = _s3yrp::P64;
           R1 = lvl54_r3yc6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BWM: // global
           I64[Hp - 32] = lvl116_s3yrq_info;
           P64[Hp - 16] = _s3yrp::P64;
           I64[Hp - 8] = sat_s3yrs_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BWG_info;
           R3 = Hp - 7;
           R2 = m20_r3ya7_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BWG() //  [R1]
         { info_tbl: [(c3BWG,
                       label: block_c3BWG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BWG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BWQ; else goto c3BWP;
       c3BWQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BWP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.39014806 UTC

[section ""data" . lvl55_r3yc7_closure" {
     lvl55_r3yc7_closure:
         const lvl55_r3yc7_info;
         const 0;
 },
 lvl116_s3yrw_entry() //  [R1]
         { info_tbl: [(c3BWZ,
                       label: lvl116_s3yrw_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BWZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BX0; else goto c3BX1;
       c3BX0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BX1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x10_r3yab_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yry_entry() //  [R1]
         { info_tbl: [(c3BX7,
                       label: sat_s3yry_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BX7: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl55_r3yc7_entry() //  [R2]
         { info_tbl: [(c3BXd,
                       label: lvl55_r3yc7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BXd: // global
           _s3yrv::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BXe; else goto c3BXf;
       c3BXf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BXh; else goto c3BXg;
       c3BXh: // global
           HpAlloc = 40;
           goto c3BXe;
       c3BXe: // global
           R2 = _s3yrv::P64;
           R1 = lvl55_r3yc7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BXg: // global
           I64[Hp - 32] = lvl116_s3yrw_info;
           P64[Hp - 16] = _s3yrv::P64;
           I64[Hp - 8] = sat_s3yry_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BXa_info;
           R3 = Hp - 7;
           R2 = m22_r3yaa_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BXa() //  [R1]
         { info_tbl: [(c3BXa,
                       label: block_c3BXa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BXa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BXk; else goto c3BXj;
       c3BXk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BXj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.392856362 UTC

[section ""data" . lvl56_r3yc8_closure" {
     lvl56_r3yc8_closure:
         const lvl56_r3yc8_info;
         const 0;
 },
 lvl116_s3yrC_entry() //  [R1]
         { info_tbl: [(c3BXt,
                       label: lvl116_s3yrC_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BXt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BXu; else goto c3BXv;
       c3BXu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BXv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x11_r3yae_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrE_entry() //  [R1]
         { info_tbl: [(c3BXB,
                       label: sat_s3yrE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BXB: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl56_r3yc8_entry() //  [R2]
         { info_tbl: [(c3BXH,
                       label: lvl56_r3yc8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BXH: // global
           _s3yrB::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BXI; else goto c3BXJ;
       c3BXJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BXL; else goto c3BXK;
       c3BXL: // global
           HpAlloc = 40;
           goto c3BXI;
       c3BXI: // global
           R2 = _s3yrB::P64;
           R1 = lvl56_r3yc8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BXK: // global
           I64[Hp - 32] = lvl116_s3yrC_info;
           P64[Hp - 16] = _s3yrB::P64;
           I64[Hp - 8] = sat_s3yrE_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BXE_info;
           R3 = Hp - 7;
           R2 = m24_r3yad_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BXE() //  [R1]
         { info_tbl: [(c3BXE,
                       label: block_c3BXE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BXE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BXO; else goto c3BXN;
       c3BXO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BXN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.39487998 UTC

[section ""data" . lvl57_r3yc9_closure" {
     lvl57_r3yc9_closure:
         const lvl57_r3yc9_info;
         const 0;
 },
 lvl116_s3yrI_entry() //  [R1]
         { info_tbl: [(c3BXX,
                       label: lvl116_s3yrI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BXX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BXY; else goto c3BXZ;
       c3BXY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BXZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x12_r3yah_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrK_entry() //  [R1]
         { info_tbl: [(c3BY5,
                       label: sat_s3yrK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BY5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl57_r3yc9_entry() //  [R2]
         { info_tbl: [(c3BYb,
                       label: lvl57_r3yc9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BYb: // global
           _s3yrH::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BYc; else goto c3BYd;
       c3BYd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BYf; else goto c3BYe;
       c3BYf: // global
           HpAlloc = 40;
           goto c3BYc;
       c3BYc: // global
           R2 = _s3yrH::P64;
           R1 = lvl57_r3yc9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BYe: // global
           I64[Hp - 32] = lvl116_s3yrI_info;
           P64[Hp - 16] = _s3yrH::P64;
           I64[Hp - 8] = sat_s3yrK_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BY8_info;
           R3 = Hp - 7;
           R2 = m26_r3yag_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BY8() //  [R1]
         { info_tbl: [(c3BY8,
                       label: block_c3BY8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BY8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BYi; else goto c3BYh;
       c3BYi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BYh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.396899263 UTC

[section ""data" . lvl58_r3yca_closure" {
     lvl58_r3yca_closure:
         const lvl58_r3yca_info;
         const 0;
 },
 lvl116_s3yrO_entry() //  [R1]
         { info_tbl: [(c3BYr,
                       label: lvl116_s3yrO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BYr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BYs; else goto c3BYt;
       c3BYs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BYt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x13_r3yak_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrQ_entry() //  [R1]
         { info_tbl: [(c3BYz,
                       label: sat_s3yrQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BYz: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl58_r3yca_entry() //  [R2]
         { info_tbl: [(c3BYF,
                       label: lvl58_r3yca_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BYF: // global
           _s3yrN::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BYG; else goto c3BYH;
       c3BYH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BYJ; else goto c3BYI;
       c3BYJ: // global
           HpAlloc = 40;
           goto c3BYG;
       c3BYG: // global
           R2 = _s3yrN::P64;
           R1 = lvl58_r3yca_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BYI: // global
           I64[Hp - 32] = lvl116_s3yrO_info;
           P64[Hp - 16] = _s3yrN::P64;
           I64[Hp - 8] = sat_s3yrQ_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BYC_info;
           R3 = Hp - 7;
           R2 = m28_r3yaj_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BYC() //  [R1]
         { info_tbl: [(c3BYC,
                       label: block_c3BYC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BYC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BYM; else goto c3BYL;
       c3BYM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BYL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.39894346 UTC

[section ""data" . lvl59_r3ycb_closure" {
     lvl59_r3ycb_closure:
         const lvl59_r3ycb_info;
         const 0;
 },
 lvl116_s3yrU_entry() //  [R1]
         { info_tbl: [(c3BYV,
                       label: lvl116_s3yrU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BYV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BYW; else goto c3BYX;
       c3BYW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BYX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x14_r3yan_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrW_entry() //  [R1]
         { info_tbl: [(c3BZ3,
                       label: sat_s3yrW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BZ3: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl59_r3ycb_entry() //  [R2]
         { info_tbl: [(c3BZ9,
                       label: lvl59_r3ycb_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BZ9: // global
           _s3yrT::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BZa; else goto c3BZb;
       c3BZb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BZd; else goto c3BZc;
       c3BZd: // global
           HpAlloc = 40;
           goto c3BZa;
       c3BZa: // global
           R2 = _s3yrT::P64;
           R1 = lvl59_r3ycb_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BZc: // global
           I64[Hp - 32] = lvl116_s3yrU_info;
           P64[Hp - 16] = _s3yrT::P64;
           I64[Hp - 8] = sat_s3yrW_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BZ6_info;
           R3 = Hp - 7;
           R2 = m30_r3yam_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BZ6() //  [R1]
         { info_tbl: [(c3BZ6,
                       label: block_c3BZ6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BZ6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BZg; else goto c3BZf;
       c3BZg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BZf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.400930466 UTC

[section ""data" . lvl60_r3ycc_closure" {
     lvl60_r3ycc_closure:
         const lvl60_r3ycc_info;
         const 0;
 },
 lvl116_s3ys0_entry() //  [R1]
         { info_tbl: [(c3BZp,
                       label: lvl116_s3ys0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BZp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BZq; else goto c3BZr;
       c3BZq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BZr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x15_r3yaq_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ys2_entry() //  [R1]
         { info_tbl: [(c3BZx,
                       label: sat_s3ys2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BZx: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl60_r3ycc_entry() //  [R2]
         { info_tbl: [(c3BZD,
                       label: lvl60_r3ycc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BZD: // global
           _s3yrZ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3BZE; else goto c3BZF;
       c3BZF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3BZH; else goto c3BZG;
       c3BZH: // global
           HpAlloc = 40;
           goto c3BZE;
       c3BZE: // global
           R2 = _s3yrZ::P64;
           R1 = lvl60_r3ycc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3BZG: // global
           I64[Hp - 32] = lvl116_s3ys0_info;
           P64[Hp - 16] = _s3yrZ::P64;
           I64[Hp - 8] = sat_s3ys2_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3BZA_info;
           R3 = Hp - 7;
           R2 = m32_r3yap_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3BZA() //  [R1]
         { info_tbl: [(c3BZA,
                       label: block_c3BZA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BZA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3BZK; else goto c3BZJ;
       c3BZK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3BZJ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.403818934 UTC

[section ""data" . lvl61_r3ycd_closure" {
     lvl61_r3ycd_closure:
         const lvl61_r3ycd_info;
         const 0;
 },
 lvl116_s3ys6_entry() //  [R1]
         { info_tbl: [(c3BZT,
                       label: lvl116_s3ys6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3BZT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3BZU; else goto c3BZV;
       c3BZU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3BZV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x16_r3yat_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ys8_entry() //  [R1]
         { info_tbl: [(c3C01,
                       label: sat_s3ys8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C01: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl61_r3ycd_entry() //  [R2]
         { info_tbl: [(c3C07,
                       label: lvl61_r3ycd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C07: // global
           _s3ys5::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C08; else goto c3C09;
       c3C09: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C0b; else goto c3C0a;
       c3C0b: // global
           HpAlloc = 40;
           goto c3C08;
       c3C08: // global
           R2 = _s3ys5::P64;
           R1 = lvl61_r3ycd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C0a: // global
           I64[Hp - 32] = lvl116_s3ys6_info;
           P64[Hp - 16] = _s3ys5::P64;
           I64[Hp - 8] = sat_s3ys8_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C04_info;
           R3 = Hp - 7;
           R2 = m34_r3yas_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C04() //  [R1]
         { info_tbl: [(c3C04,
                       label: block_c3C04_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C04: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C0e; else goto c3C0d;
       c3C0e: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C0d: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.40660113 UTC

[section ""data" . lvl62_r3yce_closure" {
     lvl62_r3yce_closure:
         const lvl62_r3yce_info;
         const 0;
 },
 lvl116_s3ysc_entry() //  [R1]
         { info_tbl: [(c3C0n,
                       label: lvl116_s3ysc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C0n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C0o; else goto c3C0p;
       c3C0o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C0p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x17_r3yaw_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yse_entry() //  [R1]
         { info_tbl: [(c3C0v,
                       label: sat_s3yse_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C0v: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl62_r3yce_entry() //  [R2]
         { info_tbl: [(c3C0B,
                       label: lvl62_r3yce_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C0B: // global
           _s3ysb::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C0C; else goto c3C0D;
       c3C0D: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C0F; else goto c3C0E;
       c3C0F: // global
           HpAlloc = 40;
           goto c3C0C;
       c3C0C: // global
           R2 = _s3ysb::P64;
           R1 = lvl62_r3yce_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C0E: // global
           I64[Hp - 32] = lvl116_s3ysc_info;
           P64[Hp - 16] = _s3ysb::P64;
           I64[Hp - 8] = sat_s3yse_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C0y_info;
           R3 = Hp - 7;
           R2 = m36_r3yav_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C0y() //  [R1]
         { info_tbl: [(c3C0y,
                       label: block_c3C0y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C0y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C0I; else goto c3C0H;
       c3C0I: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C0H: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.408575505 UTC

[section ""data" . lvl63_r3ycf_closure" {
     lvl63_r3ycf_closure:
         const lvl63_r3ycf_info;
         const 0;
 },
 lvl116_s3ysi_entry() //  [R1]
         { info_tbl: [(c3C0R,
                       label: lvl116_s3ysi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C0R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C0S; else goto c3C0T;
       c3C0S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C0T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x18_r3yaz_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysk_entry() //  [R1]
         { info_tbl: [(c3C0Z,
                       label: sat_s3ysk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C0Z: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl63_r3ycf_entry() //  [R2]
         { info_tbl: [(c3C15,
                       label: lvl63_r3ycf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C15: // global
           _s3ysh::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C16; else goto c3C17;
       c3C17: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C19; else goto c3C18;
       c3C19: // global
           HpAlloc = 40;
           goto c3C16;
       c3C16: // global
           R2 = _s3ysh::P64;
           R1 = lvl63_r3ycf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C18: // global
           I64[Hp - 32] = lvl116_s3ysi_info;
           P64[Hp - 16] = _s3ysh::P64;
           I64[Hp - 8] = sat_s3ysk_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C12_info;
           R3 = Hp - 7;
           R2 = m38_r3yay_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C12() //  [R1]
         { info_tbl: [(c3C12,
                       label: block_c3C12_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C12: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C1c; else goto c3C1b;
       c3C1c: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C1b: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.410592677 UTC

[section ""data" . lvl64_r3ycg_closure" {
     lvl64_r3ycg_closure:
         const lvl64_r3ycg_info;
         const 0;
 },
 lvl116_s3yso_entry() //  [R1]
         { info_tbl: [(c3C1l,
                       label: lvl116_s3yso_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C1l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C1m; else goto c3C1n;
       c3C1m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C1n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x19_r3yaC_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysq_entry() //  [R1]
         { info_tbl: [(c3C1t,
                       label: sat_s3ysq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C1t: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl64_r3ycg_entry() //  [R2]
         { info_tbl: [(c3C1z,
                       label: lvl64_r3ycg_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C1z: // global
           _s3ysn::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C1A; else goto c3C1B;
       c3C1B: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C1D; else goto c3C1C;
       c3C1D: // global
           HpAlloc = 40;
           goto c3C1A;
       c3C1A: // global
           R2 = _s3ysn::P64;
           R1 = lvl64_r3ycg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C1C: // global
           I64[Hp - 32] = lvl116_s3yso_info;
           P64[Hp - 16] = _s3ysn::P64;
           I64[Hp - 8] = sat_s3ysq_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C1w_info;
           R3 = Hp - 7;
           R2 = m40_r3yaB_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C1w() //  [R1]
         { info_tbl: [(c3C1w,
                       label: block_c3C1w_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C1w: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C1G; else goto c3C1F;
       c3C1G: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C1F: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.412584084 UTC

[section ""data" . lvl65_r3ych_closure" {
     lvl65_r3ych_closure:
         const lvl65_r3ych_info;
         const 0;
 },
 lvl116_s3ysu_entry() //  [R1]
         { info_tbl: [(c3C1P,
                       label: lvl116_s3ysu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C1P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C1Q; else goto c3C1R;
       c3C1Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C1R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x20_r3yaF_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysw_entry() //  [R1]
         { info_tbl: [(c3C1X,
                       label: sat_s3ysw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C1X: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl65_r3ych_entry() //  [R2]
         { info_tbl: [(c3C23,
                       label: lvl65_r3ych_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C23: // global
           _s3yst::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C24; else goto c3C25;
       c3C25: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C27; else goto c3C26;
       c3C27: // global
           HpAlloc = 40;
           goto c3C24;
       c3C24: // global
           R2 = _s3yst::P64;
           R1 = lvl65_r3ych_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C26: // global
           I64[Hp - 32] = lvl116_s3ysu_info;
           P64[Hp - 16] = _s3yst::P64;
           I64[Hp - 8] = sat_s3ysw_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C20_info;
           R3 = Hp - 7;
           R2 = m42_r3yaE_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C20() //  [R1]
         { info_tbl: [(c3C20,
                       label: block_c3C20_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C20: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C2a; else goto c3C29;
       c3C2a: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C29: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.41483603 UTC

[section ""data" . lvl66_r3yci_closure" {
     lvl66_r3yci_closure:
         const lvl66_r3yci_info;
         const 0;
 },
 lvl116_s3ysA_entry() //  [R1]
         { info_tbl: [(c3C2j,
                       label: lvl116_s3ysA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C2j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C2k; else goto c3C2l;
       c3C2k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C2l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x21_r3yaI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysC_entry() //  [R1]
         { info_tbl: [(c3C2r,
                       label: sat_s3ysC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C2r: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl66_r3yci_entry() //  [R2]
         { info_tbl: [(c3C2x,
                       label: lvl66_r3yci_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C2x: // global
           _s3ysz::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C2y; else goto c3C2z;
       c3C2z: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C2B; else goto c3C2A;
       c3C2B: // global
           HpAlloc = 40;
           goto c3C2y;
       c3C2y: // global
           R2 = _s3ysz::P64;
           R1 = lvl66_r3yci_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C2A: // global
           I64[Hp - 32] = lvl116_s3ysA_info;
           P64[Hp - 16] = _s3ysz::P64;
           I64[Hp - 8] = sat_s3ysC_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C2u_info;
           R3 = Hp - 7;
           R2 = m44_r3yaH_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C2u() //  [R1]
         { info_tbl: [(c3C2u,
                       label: block_c3C2u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C2u: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C2E; else goto c3C2D;
       c3C2E: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C2D: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.416859321 UTC

[section ""data" . lvl67_r3ycj_closure" {
     lvl67_r3ycj_closure:
         const lvl67_r3ycj_info;
         const 0;
 },
 lvl116_s3ysG_entry() //  [R1]
         { info_tbl: [(c3C2N,
                       label: lvl116_s3ysG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C2N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C2O; else goto c3C2P;
       c3C2O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C2P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x22_r3yaL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysI_entry() //  [R1]
         { info_tbl: [(c3C2V,
                       label: sat_s3ysI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C2V: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl67_r3ycj_entry() //  [R2]
         { info_tbl: [(c3C31,
                       label: lvl67_r3ycj_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C31: // global
           _s3ysF::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C32; else goto c3C33;
       c3C33: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C35; else goto c3C34;
       c3C35: // global
           HpAlloc = 40;
           goto c3C32;
       c3C32: // global
           R2 = _s3ysF::P64;
           R1 = lvl67_r3ycj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C34: // global
           I64[Hp - 32] = lvl116_s3ysG_info;
           P64[Hp - 16] = _s3ysF::P64;
           I64[Hp - 8] = sat_s3ysI_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C2Y_info;
           R3 = Hp - 7;
           R2 = m46_r3yaK_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C2Y() //  [R1]
         { info_tbl: [(c3C2Y,
                       label: block_c3C2Y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C2Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C38; else goto c3C37;
       c3C38: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C37: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.419739713 UTC

[section ""data" . lvl68_r3yck_closure" {
     lvl68_r3yck_closure:
         const lvl68_r3yck_info;
         const 0;
 },
 lvl116_s3ysM_entry() //  [R1]
         { info_tbl: [(c3C3h,
                       label: lvl116_s3ysM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C3h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C3i; else goto c3C3j;
       c3C3i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C3j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x23_r3yaO_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysO_entry() //  [R1]
         { info_tbl: [(c3C3p,
                       label: sat_s3ysO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C3p: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl68_r3yck_entry() //  [R2]
         { info_tbl: [(c3C3v,
                       label: lvl68_r3yck_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C3v: // global
           _s3ysL::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C3w; else goto c3C3x;
       c3C3x: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C3z; else goto c3C3y;
       c3C3z: // global
           HpAlloc = 40;
           goto c3C3w;
       c3C3w: // global
           R2 = _s3ysL::P64;
           R1 = lvl68_r3yck_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C3y: // global
           I64[Hp - 32] = lvl116_s3ysM_info;
           P64[Hp - 16] = _s3ysL::P64;
           I64[Hp - 8] = sat_s3ysO_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C3s_info;
           R3 = Hp - 7;
           R2 = m48_r3yaN_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C3s() //  [R1]
         { info_tbl: [(c3C3s,
                       label: block_c3C3s_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C3s: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C3C; else goto c3C3B;
       c3C3C: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C3B: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.421760755 UTC

[section ""data" . lvl69_r3ycl_closure" {
     lvl69_r3ycl_closure:
         const lvl69_r3ycl_info;
         const 0;
 },
 lvl116_s3ysS_entry() //  [R1]
         { info_tbl: [(c3C3L,
                       label: lvl116_s3ysS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C3L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C3M; else goto c3C3N;
       c3C3M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C3N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x24_r3yaR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysU_entry() //  [R1]
         { info_tbl: [(c3C3T,
                       label: sat_s3ysU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C3T: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl69_r3ycl_entry() //  [R2]
         { info_tbl: [(c3C3Z,
                       label: lvl69_r3ycl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C3Z: // global
           _s3ysR::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C40; else goto c3C41;
       c3C41: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C43; else goto c3C42;
       c3C43: // global
           HpAlloc = 40;
           goto c3C40;
       c3C40: // global
           R2 = _s3ysR::P64;
           R1 = lvl69_r3ycl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C42: // global
           I64[Hp - 32] = lvl116_s3ysS_info;
           P64[Hp - 16] = _s3ysR::P64;
           I64[Hp - 8] = sat_s3ysU_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C3W_info;
           R3 = Hp - 7;
           R2 = m50_r3yaQ_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C3W() //  [R1]
         { info_tbl: [(c3C3W,
                       label: block_c3C3W_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C3W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C46; else goto c3C45;
       c3C46: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C45: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.423736331 UTC

[section ""data" . lvl70_r3ycm_closure" {
     lvl70_r3ycm_closure:
         const lvl70_r3ycm_info;
         const 0;
 },
 lvl116_s3ysY_entry() //  [R1]
         { info_tbl: [(c3C4f,
                       label: lvl116_s3ysY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C4f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C4g; else goto c3C4h;
       c3C4g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C4h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x25_r3yaU_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yt0_entry() //  [R1]
         { info_tbl: [(c3C4n,
                       label: sat_s3yt0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C4n: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl70_r3ycm_entry() //  [R2]
         { info_tbl: [(c3C4t,
                       label: lvl70_r3ycm_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C4t: // global
           _s3ysX::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C4u; else goto c3C4v;
       c3C4v: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C4x; else goto c3C4w;
       c3C4x: // global
           HpAlloc = 40;
           goto c3C4u;
       c3C4u: // global
           R2 = _s3ysX::P64;
           R1 = lvl70_r3ycm_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C4w: // global
           I64[Hp - 32] = lvl116_s3ysY_info;
           P64[Hp - 16] = _s3ysX::P64;
           I64[Hp - 8] = sat_s3yt0_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C4q_info;
           R3 = Hp - 7;
           R2 = m52_r3yaT_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C4q() //  [R1]
         { info_tbl: [(c3C4q,
                       label: block_c3C4q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C4q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C4A; else goto c3C4z;
       c3C4A: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C4z: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.425773894 UTC

[section ""data" . lvl71_r3ycn_closure" {
     lvl71_r3ycn_closure:
         const lvl71_r3ycn_info;
         const 0;
 },
 lvl116_s3yt4_entry() //  [R1]
         { info_tbl: [(c3C4J,
                       label: lvl116_s3yt4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C4J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C4K; else goto c3C4L;
       c3C4K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C4L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x26_r3yaX_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yt6_entry() //  [R1]
         { info_tbl: [(c3C4R,
                       label: sat_s3yt6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C4R: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl71_r3ycn_entry() //  [R2]
         { info_tbl: [(c3C4X,
                       label: lvl71_r3ycn_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C4X: // global
           _s3yt3::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C4Y; else goto c3C4Z;
       c3C4Z: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C51; else goto c3C50;
       c3C51: // global
           HpAlloc = 40;
           goto c3C4Y;
       c3C4Y: // global
           R2 = _s3yt3::P64;
           R1 = lvl71_r3ycn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C50: // global
           I64[Hp - 32] = lvl116_s3yt4_info;
           P64[Hp - 16] = _s3yt3::P64;
           I64[Hp - 8] = sat_s3yt6_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C4U_info;
           R3 = Hp - 7;
           R2 = m54_r3yaW_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C4U() //  [R1]
         { info_tbl: [(c3C4U,
                       label: block_c3C4U_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C4U: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C54; else goto c3C53;
       c3C54: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C53: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.427825317 UTC

[section ""data" . lvl72_r3yco_closure" {
     lvl72_r3yco_closure:
         const lvl72_r3yco_info;
         const 0;
 },
 lvl116_s3yta_entry() //  [R1]
         { info_tbl: [(c3C5d,
                       label: lvl116_s3yta_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C5d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C5e; else goto c3C5f;
       c3C5e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C5f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x27_r3yb0_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytc_entry() //  [R1]
         { info_tbl: [(c3C5l,
                       label: sat_s3ytc_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C5l: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl72_r3yco_entry() //  [R2]
         { info_tbl: [(c3C5r,
                       label: lvl72_r3yco_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C5r: // global
           _s3yt9::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C5s; else goto c3C5t;
       c3C5t: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C5v; else goto c3C5u;
       c3C5v: // global
           HpAlloc = 40;
           goto c3C5s;
       c3C5s: // global
           R2 = _s3yt9::P64;
           R1 = lvl72_r3yco_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C5u: // global
           I64[Hp - 32] = lvl116_s3yta_info;
           P64[Hp - 16] = _s3yt9::P64;
           I64[Hp - 8] = sat_s3ytc_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C5o_info;
           R3 = Hp - 7;
           R2 = m56_r3yaZ_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C5o() //  [R1]
         { info_tbl: [(c3C5o,
                       label: block_c3C5o_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C5o: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C5y; else goto c3C5x;
       c3C5y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C5x: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.430194333 UTC

[section ""data" . lvl73_r3ycp_closure" {
     lvl73_r3ycp_closure:
         const lvl73_r3ycp_info;
         const 0;
 },
 lvl116_s3ytg_entry() //  [R1]
         { info_tbl: [(c3C5H,
                       label: lvl116_s3ytg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C5H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C5I; else goto c3C5J;
       c3C5I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C5J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x28_r3yb3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yti_entry() //  [R1]
         { info_tbl: [(c3C5P,
                       label: sat_s3yti_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C5P: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl73_r3ycp_entry() //  [R2]
         { info_tbl: [(c3C5V,
                       label: lvl73_r3ycp_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C5V: // global
           _s3ytf::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C5W; else goto c3C5X;
       c3C5X: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C5Z; else goto c3C5Y;
       c3C5Z: // global
           HpAlloc = 40;
           goto c3C5W;
       c3C5W: // global
           R2 = _s3ytf::P64;
           R1 = lvl73_r3ycp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C5Y: // global
           I64[Hp - 32] = lvl116_s3ytg_info;
           P64[Hp - 16] = _s3ytf::P64;
           I64[Hp - 8] = sat_s3yti_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C5S_info;
           R3 = Hp - 7;
           R2 = m58_r3yb2_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C5S() //  [R1]
         { info_tbl: [(c3C5S,
                       label: block_c3C5S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C5S: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C62; else goto c3C61;
       c3C62: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C61: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.432960674 UTC

[section ""data" . lvl74_r3ycq_closure" {
     lvl74_r3ycq_closure:
         const lvl74_r3ycq_info;
         const 0;
 },
 lvl116_s3ytm_entry() //  [R1]
         { info_tbl: [(c3C6b,
                       label: lvl116_s3ytm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C6b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C6c; else goto c3C6d;
       c3C6c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C6d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x29_r3yb6_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yto_entry() //  [R1]
         { info_tbl: [(c3C6j,
                       label: sat_s3yto_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C6j: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl74_r3ycq_entry() //  [R2]
         { info_tbl: [(c3C6p,
                       label: lvl74_r3ycq_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C6p: // global
           _s3ytl::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C6q; else goto c3C6r;
       c3C6r: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C6t; else goto c3C6s;
       c3C6t: // global
           HpAlloc = 40;
           goto c3C6q;
       c3C6q: // global
           R2 = _s3ytl::P64;
           R1 = lvl74_r3ycq_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C6s: // global
           I64[Hp - 32] = lvl116_s3ytm_info;
           P64[Hp - 16] = _s3ytl::P64;
           I64[Hp - 8] = sat_s3yto_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C6m_info;
           R3 = Hp - 7;
           R2 = m60_r3yb5_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C6m() //  [R1]
         { info_tbl: [(c3C6m,
                       label: block_c3C6m_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C6m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C6w; else goto c3C6v;
       c3C6w: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C6v: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.435006439 UTC

[section ""data" . lvl75_r3ycr_closure" {
     lvl75_r3ycr_closure:
         const lvl75_r3ycr_info;
         const 0;
 },
 lvl116_s3yts_entry() //  [R1]
         { info_tbl: [(c3C6F,
                       label: lvl116_s3yts_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C6F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C6G; else goto c3C6H;
       c3C6G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C6H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x30_r3yb9_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytu_entry() //  [R1]
         { info_tbl: [(c3C6N,
                       label: sat_s3ytu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C6N: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl75_r3ycr_entry() //  [R2]
         { info_tbl: [(c3C6T,
                       label: lvl75_r3ycr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C6T: // global
           _s3ytr::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C6U; else goto c3C6V;
       c3C6V: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C6X; else goto c3C6W;
       c3C6X: // global
           HpAlloc = 40;
           goto c3C6U;
       c3C6U: // global
           R2 = _s3ytr::P64;
           R1 = lvl75_r3ycr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C6W: // global
           I64[Hp - 32] = lvl116_s3yts_info;
           P64[Hp - 16] = _s3ytr::P64;
           I64[Hp - 8] = sat_s3ytu_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C6Q_info;
           R3 = Hp - 7;
           R2 = m62_r3yb8_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C6Q() //  [R1]
         { info_tbl: [(c3C6Q,
                       label: block_c3C6Q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C6Q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C70; else goto c3C6Z;
       c3C70: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C6Z: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.436977717 UTC

[section ""data" . lvl76_r3ycs_closure" {
     lvl76_r3ycs_closure:
         const lvl76_r3ycs_info;
         const 0;
 },
 lvl116_s3yty_entry() //  [R1]
         { info_tbl: [(c3C79,
                       label: lvl116_s3yty_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C79: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C7a; else goto c3C7b;
       c3C7a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C7b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x31_r3ybc_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytA_entry() //  [R1]
         { info_tbl: [(c3C7h,
                       label: sat_s3ytA_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C7h: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl76_r3ycs_entry() //  [R2]
         { info_tbl: [(c3C7n,
                       label: lvl76_r3ycs_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C7n: // global
           _s3ytx::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C7o; else goto c3C7p;
       c3C7p: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C7r; else goto c3C7q;
       c3C7r: // global
           HpAlloc = 40;
           goto c3C7o;
       c3C7o: // global
           R2 = _s3ytx::P64;
           R1 = lvl76_r3ycs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C7q: // global
           I64[Hp - 32] = lvl116_s3yty_info;
           P64[Hp - 16] = _s3ytx::P64;
           I64[Hp - 8] = sat_s3ytA_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C7k_info;
           R3 = Hp - 7;
           R2 = m64_r3ybb_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C7k() //  [R1]
         { info_tbl: [(c3C7k,
                       label: block_c3C7k_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C7k: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C7u; else goto c3C7t;
       c3C7u: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C7t: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.438971509 UTC

[section ""data" . lvl77_r3yct_closure" {
     lvl77_r3yct_closure:
         const lvl77_r3yct_info;
         const 0;
 },
 lvl116_s3ytE_entry() //  [R1]
         { info_tbl: [(c3C7D,
                       label: lvl116_s3ytE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C7D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C7E; else goto c3C7F;
       c3C7E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C7F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x32_r3ybf_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytG_entry() //  [R1]
         { info_tbl: [(c3C7L,
                       label: sat_s3ytG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C7L: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl77_r3yct_entry() //  [R2]
         { info_tbl: [(c3C7R,
                       label: lvl77_r3yct_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C7R: // global
           _s3ytD::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C7S; else goto c3C7T;
       c3C7T: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C7V; else goto c3C7U;
       c3C7V: // global
           HpAlloc = 40;
           goto c3C7S;
       c3C7S: // global
           R2 = _s3ytD::P64;
           R1 = lvl77_r3yct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C7U: // global
           I64[Hp - 32] = lvl116_s3ytE_info;
           P64[Hp - 16] = _s3ytD::P64;
           I64[Hp - 8] = sat_s3ytG_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C7O_info;
           R3 = Hp - 7;
           R2 = m66_r3ybe_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C7O() //  [R1]
         { info_tbl: [(c3C7O,
                       label: block_c3C7O_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C7O: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C7Y; else goto c3C7X;
       c3C7Y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C7X: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.441008587 UTC

[section ""data" . lvl78_r3ycu_closure" {
     lvl78_r3ycu_closure:
         const lvl78_r3ycu_info;
         const 0;
 },
 lvl116_s3ytK_entry() //  [R1]
         { info_tbl: [(c3C87,
                       label: lvl116_s3ytK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C87: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C88; else goto c3C89;
       c3C88: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C89: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x33_r3ybi_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytM_entry() //  [R1]
         { info_tbl: [(c3C8f,
                       label: sat_s3ytM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C8f: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl78_r3ycu_entry() //  [R2]
         { info_tbl: [(c3C8l,
                       label: lvl78_r3ycu_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C8l: // global
           _s3ytJ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3C8m; else goto c3C8n;
       c3C8n: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3C8p; else goto c3C8o;
       c3C8p: // global
           HpAlloc = 40;
           goto c3C8m;
       c3C8m: // global
           R2 = _s3ytJ::P64;
           R1 = lvl78_r3ycu_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C8o: // global
           I64[Hp - 32] = lvl116_s3ytK_info;
           P64[Hp - 16] = _s3ytJ::P64;
           I64[Hp - 8] = sat_s3ytM_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3C8i_info;
           R3 = Hp - 7;
           R2 = m68_r3ybh_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3C8i() //  [R1]
         { info_tbl: [(c3C8i,
                       label: block_c3C8i_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C8i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3C8s; else goto c3C8r;
       c3C8s: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3C8r: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.442758294 UTC

[section ""data" . lvl79_r3ycv_closure" {
     lvl79_r3ycv_closure:
         const :_con_info;
         const lvl78_r3ycu_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.443373613 UTC

[section ""data" . lvl80_r3ycw_closure" {
     lvl80_r3ycw_closure:
         const :_con_info;
         const lvl77_r3yct_closure+1;
         const lvl79_r3ycv_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.443976039 UTC

[section ""data" . lvl81_r3ycx_closure" {
     lvl81_r3ycx_closure:
         const :_con_info;
         const lvl76_r3ycs_closure+1;
         const lvl80_r3ycw_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.44523602 UTC

[section ""data" . lvl82_r3ycy_closure" {
     lvl82_r3ycy_closure:
         const :_con_info;
         const lvl75_r3ycr_closure+1;
         const lvl81_r3ycx_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.445824743 UTC

[section ""data" . lvl83_r3ycz_closure" {
     lvl83_r3ycz_closure:
         const :_con_info;
         const lvl74_r3ycq_closure+1;
         const lvl82_r3ycy_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.446431421 UTC

[section ""data" . lvl84_r3ycA_closure" {
     lvl84_r3ycA_closure:
         const :_con_info;
         const lvl73_r3ycp_closure+1;
         const lvl83_r3ycz_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.447026433 UTC

[section ""data" . lvl85_r3ycB_closure" {
     lvl85_r3ycB_closure:
         const :_con_info;
         const lvl72_r3yco_closure+1;
         const lvl84_r3ycA_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.447609981 UTC

[section ""data" . lvl86_r3ycC_closure" {
     lvl86_r3ycC_closure:
         const :_con_info;
         const lvl71_r3ycn_closure+1;
         const lvl85_r3ycB_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.44819877 UTC

[section ""data" . lvl87_r3ycD_closure" {
     lvl87_r3ycD_closure:
         const :_con_info;
         const lvl70_r3ycm_closure+1;
         const lvl86_r3ycC_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.448745507 UTC

[section ""data" . lvl88_r3ycE_closure" {
     lvl88_r3ycE_closure:
         const :_con_info;
         const lvl69_r3ycl_closure+1;
         const lvl87_r3ycD_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.449347613 UTC

[section ""data" . lvl89_r3ycF_closure" {
     lvl89_r3ycF_closure:
         const :_con_info;
         const lvl68_r3yck_closure+1;
         const lvl88_r3ycE_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.449956322 UTC

[section ""data" . lvl90_r3ycG_closure" {
     lvl90_r3ycG_closure:
         const :_con_info;
         const lvl67_r3ycj_closure+1;
         const lvl89_r3ycF_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.450552434 UTC

[section ""data" . lvl91_r3ycH_closure" {
     lvl91_r3ycH_closure:
         const :_con_info;
         const lvl66_r3yci_closure+1;
         const lvl90_r3ycG_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.451150559 UTC

[section ""data" . lvl92_r3ycI_closure" {
     lvl92_r3ycI_closure:
         const :_con_info;
         const lvl65_r3ych_closure+1;
         const lvl91_r3ycH_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.451785973 UTC

[section ""data" . lvl93_r3ycJ_closure" {
     lvl93_r3ycJ_closure:
         const :_con_info;
         const lvl64_r3ycg_closure+1;
         const lvl92_r3ycI_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.452374525 UTC

[section ""data" . lvl94_r3ycK_closure" {
     lvl94_r3ycK_closure:
         const :_con_info;
         const lvl63_r3ycf_closure+1;
         const lvl93_r3ycJ_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.45290761 UTC

[section ""data" . lvl95_r3ycL_closure" {
     lvl95_r3ycL_closure:
         const :_con_info;
         const lvl62_r3yce_closure+1;
         const lvl94_r3ycK_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.453595523 UTC

[section ""data" . lvl96_r3ycM_closure" {
     lvl96_r3ycM_closure:
         const :_con_info;
         const lvl61_r3ycd_closure+1;
         const lvl95_r3ycL_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.45418895 UTC

[section ""data" . lvl97_r3ycN_closure" {
     lvl97_r3ycN_closure:
         const :_con_info;
         const lvl60_r3ycc_closure+1;
         const lvl96_r3ycM_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.454785023 UTC

[section ""data" . lvl98_r3ycO_closure" {
     lvl98_r3ycO_closure:
         const :_con_info;
         const lvl59_r3ycb_closure+1;
         const lvl97_r3ycN_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.455840602 UTC

[section ""data" . lvl99_r3ycP_closure" {
     lvl99_r3ycP_closure:
         const :_con_info;
         const lvl58_r3yca_closure+1;
         const lvl98_r3ycO_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.456393534 UTC

[section ""data" . lvl100_r3ycQ_closure" {
     lvl100_r3ycQ_closure:
         const :_con_info;
         const lvl57_r3yc9_closure+1;
         const lvl99_r3ycP_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.456993166 UTC

[section ""data" . lvl101_r3ycR_closure" {
     lvl101_r3ycR_closure:
         const :_con_info;
         const lvl56_r3yc8_closure+1;
         const lvl100_r3ycQ_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.457624933 UTC

[section ""data" . lvl102_r3ycS_closure" {
     lvl102_r3ycS_closure:
         const :_con_info;
         const lvl55_r3yc7_closure+1;
         const lvl101_r3ycR_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.458222276 UTC

[section ""data" . lvl103_r3ycT_closure" {
     lvl103_r3ycT_closure:
         const :_con_info;
         const lvl54_r3yc6_closure+1;
         const lvl102_r3ycS_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.458825353 UTC

[section ""data" . lvl104_r3ycU_closure" {
     lvl104_r3ycU_closure:
         const :_con_info;
         const lvl53_r3yc5_closure+1;
         const lvl103_r3ycT_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.459419304 UTC

[section ""data" . lvl105_r3ycV_closure" {
     lvl105_r3ycV_closure:
         const :_con_info;
         const lvl52_r3yc4_closure+1;
         const lvl104_r3ycU_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.459993379 UTC

[section ""data" . lvl106_r3ycW_closure" {
     lvl106_r3ycW_closure:
         const :_con_info;
         const lvl51_r3yc3_closure+1;
         const lvl105_r3ycV_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.460582592 UTC

[section ""data" . lvl107_r3ycX_closure" {
     lvl107_r3ycX_closure:
         const :_con_info;
         const lvl50_r3yc2_closure+1;
         const lvl106_r3ycW_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.461111392 UTC

[section ""data" . lvl108_r3ycY_closure" {
     lvl108_r3ycY_closure:
         const :_con_info;
         const lvl49_r3yc1_closure+1;
         const lvl107_r3ycX_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.461702956 UTC

[section ""data" . lvl109_r3ycZ_closure" {
     lvl109_r3ycZ_closure:
         const :_con_info;
         const lvl48_r3yc0_closure+1;
         const lvl108_r3ycY_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.462280764 UTC

[section ""data" . lvl110_r3yd0_closure" {
     lvl110_r3yd0_closure:
         const :_con_info;
         const lvl47_r3ybZ_closure+1;
         const lvl109_r3ycZ_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.462850559 UTC

[section ""data" . lvl111_r3yd1_closure" {
     lvl111_r3yd1_closure:
         const :_con_info;
         const lvl46_r3ybY_closure+1;
         const lvl110_r3yd0_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.464567084 UTC

[section ""data" . lvl112_r3yd2_closure" {
     lvl112_r3yd2_closure:
         const lvl112_r3yd2_info;
 },
 lvl116_s3ytQ_entry() //  [R1]
         { info_tbl: [(c3C8B,
                       label: lvl116_s3ytQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C8B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C8C; else goto c3C8D;
       c3C8C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C8D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = a2_r3y9z_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3ytR_entry() //  [R1]
         { info_tbl: [(c3C8I,
                       label: lvl117_s3ytR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C8I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C8J; else goto c3C8K;
       c3C8J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C8K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = a1_r3y9y_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytW_entry() //  [R1, R2]
         { info_tbl: [(c3C8T,
                       label: sat_s3ytW_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C8T: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3C8U; else goto c3C8V;
       c3C8U: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C8V: // global
           I64[Sp - 24] = block_c3C8Q_info;
           _s3ytQ::P64 = P64[R1 + 7];
           _s3ytR::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ytQ::P64;
           P64[Sp - 8] = _s3ytR::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3C9b; else goto c3C8R;
       u3C9b: // global
           call _c3C8Q(R1) args: 0, res: 0, upd: 0;
       c3C8R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3C8Q() //  [R1]
         { info_tbl: [(c3C8Q,
                       label: block_c3C8Q_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C8Q: // global
           _s3ytQ::P64 = P64[Sp + 8];
           _s3ytV::I64 = I64[R1 + 7];
           if (_s3ytV::I64 < 120) goto u3C96; else goto u3C9a;
       u3C96: // global
           _s3ytR::P64 = P64[Sp + 16];
           if (_s3ytV::I64 < 89) goto u3C97; else goto u3C99;
       u3C97: // global
           if (_s3ytV::I64 >= 88) goto c3C95; else goto u3C98;
       u3C98: // global
           if (_s3ytV::I64 != 79) goto c3C91; else goto c3C94;
       u3C99: // global
           if (_s3ytV::I64 != 111) goto c3C91; else goto c3C94;
       c3C94: // global
           R1 = _s3ytR::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3C9a: // global
           if (_s3ytV::I64 < 121) goto c3C95; else goto c3C91;
       c3C95: // global
           R1 = _s3ytQ::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3C91: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl112_r3yd2_entry() //  [R2]
         { info_tbl: [(c3C9d,
                       label: lvl112_r3yd2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C9d: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3C9h; else goto c3C9g;
       c3C9h: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = lvl112_r3yd2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3C9g: // global
           I64[Hp - 80] = lvl116_s3ytQ_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = lvl117_s3ytR_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s3ytW_info;
           P64[Hp - 24] = Hp - 80;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.46736713 UTC

[section ""data" . lvl113_r3yd3_closure" {
     lvl113_r3yd3_closure:
         const lvl113_r3yd3_info;
 },
 lvl113_r3yd3_entry() //  [R2]
         { info_tbl: [(c3C9m,
                       label: lvl113_r3yd3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C9m: // global
           _s3ytX::P64 = R2;
           R2 = lvl6_r3y9C_closure+1;
           R1 = _s3ytX::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.47697676 UTC

[section ""data" . Text.Read.Lex.lexChar2_closure" {
     Text.Read.Lex.lexChar2_closure:
         const Text.Read.Lex.lexChar2_info;
         const 0;
 },
 lvl116_s3ytZ_entry() //  [R1]
         { info_tbl: [(c3C9x,
                       label: lvl116_s3ytZ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C9x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C9y; else goto c3C9z;
       c3C9y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C9z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl18_r3ybu_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3yu0_entry() //  [R1]
         { info_tbl: [(c3C9E,
                       label: lvl117_s3yu0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C9E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C9F; else goto c3C9G;
       c3C9F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C9G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl16_r3ybs_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3yu1_entry() //  [R1]
         { info_tbl: [(c3C9L,
                       label: lvl118_s3yu1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C9L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C9M; else goto c3C9N;
       c3C9M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C9N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl20_r3ybw_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl119_s3yu2_entry() //  [R1]
         { info_tbl: [(c3C9S,
                       label: lvl119_s3yu2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C9S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3C9T; else goto c3C9U;
       c3C9T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3C9U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl17_r3ybt_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl120_s3yu3_entry() //  [R1]
         { info_tbl: [(c3C9Z,
                       label: lvl120_s3yu3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3C9Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ca0; else goto c3Ca1;
       c3Ca0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ca1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl19_r3ybv_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl121_s3yu4_entry() //  [R1]
         { info_tbl: [(c3Ca6,
                       label: lvl121_s3yu4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ca6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ca7; else goto c3Ca8;
       c3Ca7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ca8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl15_r3ybr_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl122_s3yu5_entry() //  [R1]
         { info_tbl: [(c3Cad,
                       label: lvl122_s3yu5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cad: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cae; else goto c3Caf;
       c3Cae: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Caf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl14_r3ybq_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl123_s3yu6_entry() //  [R1]
         { info_tbl: [(c3Cak,
                       label: lvl123_s3yu6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cak: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cal; else goto c3Cam;
       c3Cal: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cam: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl13_r3ybp_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl124_s3yu7_entry() //  [R1]
         { info_tbl: [(c3Car,
                       label: lvl124_s3yu7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Car: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cas; else goto c3Cat;
       c3Cas: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cat: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl11_r3ybn_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl125_s3yu8_entry() //  [R1]
         { info_tbl: [(c3Cay,
                       label: lvl125_s3yu8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cay: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Caz; else goto c3CaA;
       c3Caz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CaA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl9_r3ybl_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl126_s3yug_entry() //  [R1]
         { info_tbl: [(c3CaR,
                       label: lvl126_s3yug_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CaR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3CaS; else goto c3CaT;
       c3CaS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CaT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3CaO_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3CaX; else goto c3CaP;
       u3CaX: // global
           call _c3CaO(R1) args: 0, res: 0, upd: 0;
       c3CaP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3CaO() //  [R1]
         { info_tbl: [(c3CaO,
                       label: block_c3CaO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CaO: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yuq_entry() //  [R1]
         { info_tbl: [(c3Cbi,
                       label: sat_s3yuq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cbi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Cbj; else goto c3Cbk;
       c3Cbj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cbk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Cbg_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Cbg() //  [R1]
         { info_tbl: [(c3Cbg,
                       label: block_c3Cbg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cbg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Cbp; else goto c3Cbo;
       c3Cbp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3Cbo: // global
           if (R1 > 1114111) goto c3Cbw; else goto c3CbD;
       c3Cbw: // global
           Hp = Hp - 16;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c3CbD: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3Chz_srtd" {
     u3Chz_srtd:
         const S3yFW_srt+232;
         const 122;
         const 1;
         const 216172782113783808;
 },
 sat_s3yus_entry() //  [R1, R2]
         { info_tbl: [(c3CbE,
                       label: sat_s3yus_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CbE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3CbF; else goto c3CbG;
       c3CbF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CbG: // global
           I64[Sp - 16] = block_c3Cb3_info;
           R3 = R2;
           R2 = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cb3() //  [R1]
         { info_tbl: [(c3Cb3,
                       label: block_c3Cb3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cb3: // global
           I64[Sp - 8] = block_c3Cb7_info;
           R3 = lvl7_r3ybj_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cb7() //  [R1]
         { info_tbl: [(c3Cb7,
                       label: block_c3Cb7_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cb7: // global
           if (R1 == 1) goto c3CbN; else goto c3CbL;
       c3CbN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3CbQ; else goto c3CbP;
       c3CbQ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3CbP: // global
           I64[Hp - 40] = sat_s3yuq_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = Hp - 15;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3CbL: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3ChA_srtd" {
     u3ChA_srtd:
         const S3yFW_srt+232;
         const 122;
         const 17592186044417;
         const 216172782113783808;
 },
 sat_s3yuv_entry() //  [R1, R2]
         { info_tbl: [(c3CbU,
                       label: sat_s3yuv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CbU: // global
           _s3yuf::P64 = R2;
           _s3yuv::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3CbV; else goto c3CbW;
       c3CbW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3CbY; else goto c3CbX;
       c3CbY: // global
           HpAlloc = 48;
           goto c3CbV;
       c3CbV: // global
           R2 = _s3yuf::P64;
           R1 = _s3yuv::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CbX: // global
           _s3ytY::P64 = P64[_s3yuv::P64 + 7];
           I64[Hp - 40] = lvl126_s3yug_info;
           P64[Hp - 24] = _s3yuf::P64;
           I64[Hp - 16] = sat_s3yus_info;
           P64[Hp - 8] = _s3ytY::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_c3CbR_info;
           R3 = Hp - 15;
           R2 = _s3yuf::P64;
           Sp = Sp - 8;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3CbR() //  [R1]
         { info_tbl: [(c3CbR,
                       label: block_c3CbR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CbR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Cc1; else goto c3Cc0;
       c3Cc1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Cc0: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl126_s3yuz_entry() //  [R1]
         { info_tbl: [(c3Ccc,
                       label: lvl126_s3yuz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ccc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ccd; else goto c3Cce;
       c3Ccd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cce: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl45_r3ybV_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl127_s3yuA_entry() //  [R1]
         { info_tbl: [(c3Ccj,
                       label: lvl127_s3yuA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ccj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cck; else goto c3Ccl;
       c3Cck: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ccl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl44_r3ybU_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl128_s3yuB_entry() //  [R1]
         { info_tbl: [(c3Ccq,
                       label: lvl128_s3yuB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ccq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ccr; else goto c3Ccs;
       c3Ccr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ccs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl43_r3ybT_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl129_s3yuC_entry() //  [R1]
         { info_tbl: [(c3Ccx,
                       label: lvl129_s3yuC_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ccx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ccy; else goto c3Ccz;
       c3Ccy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ccz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl42_r3ybS_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl130_s3yuD_entry() //  [R1]
         { info_tbl: [(c3CcE,
                       label: lvl130_s3yuD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CcE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CcF; else goto c3CcG;
       c3CcF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CcG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl41_r3ybR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl131_s3yuE_entry() //  [R1]
         { info_tbl: [(c3CcL,
                       label: lvl131_s3yuE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CcL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CcM; else goto c3CcN;
       c3CcM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CcN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl40_r3ybQ_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl132_s3yuF_entry() //  [R1]
         { info_tbl: [(c3CcS,
                       label: lvl132_s3yuF_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CcS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CcT; else goto c3CcU;
       c3CcT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CcU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl39_r3ybP_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl133_s3yuG_entry() //  [R1]
         { info_tbl: [(c3CcZ,
                       label: lvl133_s3yuG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CcZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cd0; else goto c3Cd1;
       c3Cd0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cd1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl38_r3ybO_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl134_s3yuH_entry() //  [R1]
         { info_tbl: [(c3Cd6,
                       label: lvl134_s3yuH_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cd6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cd7; else goto c3Cd8;
       c3Cd7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cd8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl37_r3ybN_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl135_s3yuI_entry() //  [R1]
         { info_tbl: [(c3Cdd,
                       label: lvl135_s3yuI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cdd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cde; else goto c3Cdf;
       c3Cde: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cdf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl36_r3ybM_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl136_s3yuJ_entry() //  [R1]
         { info_tbl: [(c3Cdk,
                       label: lvl136_s3yuJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cdk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cdl; else goto c3Cdm;
       c3Cdl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cdm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl35_r3ybL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl137_s3yuK_entry() //  [R1]
         { info_tbl: [(c3Cdr,
                       label: lvl137_s3yuK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cdr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cds; else goto c3Cdt;
       c3Cds: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cdt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl34_r3ybK_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl138_s3yuL_entry() //  [R1]
         { info_tbl: [(c3Cdy,
                       label: lvl138_s3yuL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cdy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cdz; else goto c3CdA;
       c3Cdz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CdA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl33_r3ybJ_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl139_s3yuM_entry() //  [R1]
         { info_tbl: [(c3CdF,
                       label: lvl139_s3yuM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CdF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CdG; else goto c3CdH;
       c3CdG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CdH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl32_r3ybI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl140_s3yuN_entry() //  [R1]
         { info_tbl: [(c3CdM,
                       label: lvl140_s3yuN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CdM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CdN; else goto c3CdO;
       c3CdN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CdO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl31_r3ybH_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl141_s3yuO_entry() //  [R1]
         { info_tbl: [(c3CdT,
                       label: lvl141_s3yuO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CdT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CdU; else goto c3CdV;
       c3CdU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CdV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl30_r3ybG_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl142_s3yuP_entry() //  [R1]
         { info_tbl: [(c3Ce0,
                       label: lvl142_s3yuP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ce0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ce1; else goto c3Ce2;
       c3Ce1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ce2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl29_r3ybF_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl143_s3yuQ_entry() //  [R1]
         { info_tbl: [(c3Ce7,
                       label: lvl143_s3yuQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ce7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ce8; else goto c3Ce9;
       c3Ce8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ce9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl28_r3ybE_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl144_s3yuR_entry() //  [R1]
         { info_tbl: [(c3Cee,
                       label: lvl144_s3yuR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cee: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cef; else goto c3Ceg;
       c3Cef: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ceg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl27_r3ybD_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl145_s3yuS_entry() //  [R1]
         { info_tbl: [(c3Cel,
                       label: lvl145_s3yuS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cel: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cem; else goto c3Cen;
       c3Cem: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cen: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl26_r3ybC_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl146_s3yuT_entry() //  [R1]
         { info_tbl: [(c3Ces,
                       label: lvl146_s3yuT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ces: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cet; else goto c3Ceu;
       c3Cet: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ceu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl25_r3ybB_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl147_s3yuU_entry() //  [R1]
         { info_tbl: [(c3Cez,
                       label: lvl147_s3yuU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cez: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CeA; else goto c3CeB;
       c3CeA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CeB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl24_r3ybA_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl148_s3yuV_entry() //  [R1]
         { info_tbl: [(c3CeG,
                       label: lvl148_s3yuV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CeG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CeH; else goto c3CeI;
       c3CeH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CeI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl23_r3ybz_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl149_s3yuW_entry() //  [R1]
         { info_tbl: [(c3CeN,
                       label: lvl149_s3yuW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CeN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CeO; else goto c3CeP;
       c3CeO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CeP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl22_r3yby_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl150_s3yuX_entry() //  [R1]
         { info_tbl: [(c3CeU,
                       label: lvl150_s3yuX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CeU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CeV; else goto c3CeW;
       c3CeV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CeW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl21_r3ybx_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 $wlvl1_s3yuY_entry() //  [R1, R2]
         { info_tbl: [(c3CfB,
                       label: $wlvl1_s3yuY_info
                       rep:HeapRep 32 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CfB: // global
           if (R2 >= 96) goto c3Cf4; else goto u3CfE;
       u3CfE: // global
           if (R2 < 64) goto c3Cf4; else goto u3CfF;
       c3Cf4: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3CfF: // global
           switch [64 .. 95] R2 {
               case 64 : goto c3Cf5;
               case 65 : goto c3Cf6;
               case 66 : goto c3Cf7;
               case 67 : goto c3Cf8;
               case 68 : goto c3Cf9;
               case 69 : goto c3Cfa;
               case 70 : goto c3Cfb;
               case 71 : goto c3Cfc;
               case 72 : goto c3Cfd;
               case 73 : goto c3Cfe;
               case 74 : goto c3Cff;
               case 75 : goto c3Cfg;
               case 76 : goto c3Cfh;
               case 77 : goto c3Cfi;
               case 78 : goto c3Cfj;
               case 79 : goto c3Cfk;
               case 80 : goto c3Cfl;
               case 81 : goto c3Cfm;
               case 82 : goto c3Cfn;
               case 83 : goto c3Cfo;
               case 84 : goto c3Cfp;
               case 85 : goto c3Cfq;
               case 86 : goto c3Cfr;
               case 87 : goto c3Cfs;
               case 88 : goto c3Cft;
               case 89 : goto c3Cfu;
               case 90 : goto c3Cfv;
               case 91 : goto c3Cfw;
               case 92 : goto c3Cfx;
               case 93 : goto c3Cfy;
               case 94 : goto c3Cfz;
               case 95 : goto c3CfA;
           }
       c3CfA: // global
           R1 = P64[R1 + 63] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfz: // global
           R1 = P64[R1 + 71] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfy: // global
           R1 = P64[R1 + 79] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfx: // global
           R1 = P64[R1 + 87] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfw: // global
           R1 = P64[R1 + 95] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfv: // global
           R1 = P64[R1 + 103] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfu: // global
           R1 = P64[R1 + 111] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cft: // global
           R1 = P64[R1 + 119] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfs: // global
           R1 = P64[R1 + 127] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfr: // global
           R1 = P64[R1 + 135] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfq: // global
           R1 = P64[R1 + 143] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfp: // global
           R1 = P64[R1 + 151] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfo: // global
           R1 = P64[R1 + 159] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfn: // global
           R1 = P64[R1 + 167] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfm: // global
           R1 = P64[R1 + 175] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfl: // global
           R1 = P64[R1 + 183] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfk: // global
           R1 = P64[R1 + 191] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfj: // global
           R1 = P64[R1 + 199] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfi: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfh: // global
           R1 = P64[R1 + 15] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfg: // global
           R1 = P64[R1 + 23] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cff: // global
           R1 = P64[R1 + 31] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfe: // global
           R1 = P64[R1 + 39] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfd: // global
           R1 = P64[R1 + 47] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfc: // global
           R1 = P64[R1 + 55] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfb: // global
           R1 = P64[R1 + 207] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cfa: // global
           R1 = P64[R1 + 215] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cf9: // global
           R1 = P64[R1 + 223] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cf8: // global
           R1 = P64[R1 + 231] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cf7: // global
           R1 = P64[R1 + 239] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cf6: // global
           R1 = P64[R1 + 247] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cf5: // global
           R1 = P64[R1 + 255] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl151_s3yv1_entry() //  [R1, R2]
         { info_tbl: [(c3CfO,
                       label: lvl151_s3yv1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CfO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CfP; else goto c3CfQ;
       c3CfP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CfQ: // global
           I64[Sp - 16] = block_c3CfL_info;
           _s3yuY::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yuY::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CfU; else goto c3CfM;
       u3CfU: // global
           call _c3CfL(R1) args: 0, res: 0, upd: 0;
       c3CfM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CfL() //  [R1]
         { info_tbl: [(c3CfL,
                       label: block_c3CfL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CfL: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wlvl1_s3yuY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yve_entry() //  [R1, R2]
         { info_tbl: [(c3Cg6,
                       label: sat_s3yve_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cg6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Cga; else goto c3Cg9;
       c3Cga: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cg9: // global
           _s3ytY::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = Hp - 15;
           R1 = _s3ytY::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yvf_entry() //  [R1]
         { info_tbl: [(c3Cgb,
                       label: sat_s3yvf_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cgb: // global
           _s3yvf::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Cgc; else goto c3Cgd;
       c3Cgd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Cgf; else goto c3Cge;
       c3Cgf: // global
           HpAlloc = 16;
           goto c3Cgc;
       c3Cgc: // global
           R1 = _s3yvf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cge: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvf::P64;
           _s3ytY::P64 = P64[_s3yvf::P64 + 16];
           I64[Hp - 8] = sat_s3yve_info;
           P64[Hp] = _s3ytY::P64;
           R2 = lvl111_r3yd1_closure+2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.choice_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yva_entry() //  [R1, R2]
         { info_tbl: [(c3Cgo,
                       label: sat_s3yva_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cgo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cgp; else goto c3Cgq;
       c3Cgp: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cgq: // global
           I64[Sp - 16] = block_c3Cgl_info;
           _s3yv5::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yv5::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Cgy; else goto c3Cgm;
       u3Cgy: // global
           call _c3Cgl(R1) args: 0, res: 0, upd: 0;
       c3Cgm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cgl() //  [R1]
         { info_tbl: [(c3Cgl,
                       label: block_c3Cgl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cgl: // global
           if (I64[R1 + 7] == 94) goto c3Cgx; else goto c3Cgw;
       c3Cgx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Cgw: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yvg_entry() //  [R1]
         { info_tbl: [(c3CgA,
                       label: sat_s3yvg_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CgA: // global
           _s3yvg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CgB; else goto c3CgC;
       c3CgC: // global
           Hp = Hp + 952;
           if (Hp > HpLim) (likely: False) goto c3CgE; else goto c3CgD;
       c3CgE: // global
           HpAlloc = 952;
           goto c3CgB;
       c3CgB: // global
           R1 = _s3yvg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CgD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvg::P64;
           _s3ytY::P64 = P64[_s3yvg::P64 + 16];
           _s3ytZ::P64 = P64[_s3yvg::P64 + 24];
           _s3yu0::P64 = P64[_s3yvg::P64 + 32];
           _s3yu1::P64 = P64[_s3yvg::P64 + 40];
           _s3yu2::P64 = P64[_s3yvg::P64 + 48];
           _s3yu3::P64 = P64[_s3yvg::P64 + 56];
           _s3yu4::P64 = P64[_s3yvg::P64 + 64];
           _s3yu5::P64 = P64[_s3yvg::P64 + 72];
           I64[Hp - 944] = lvl126_s3yuz_info;
           P64[Hp - 928] = _s3ytY::P64;
           I64[Hp - 920] = lvl127_s3yuA_info;
           P64[Hp - 904] = _s3ytY::P64;
           I64[Hp - 896] = lvl128_s3yuB_info;
           P64[Hp - 880] = _s3ytY::P64;
           I64[Hp - 872] = lvl129_s3yuC_info;
           P64[Hp - 856] = _s3ytY::P64;
           I64[Hp - 848] = lvl130_s3yuD_info;
           P64[Hp - 832] = _s3ytY::P64;
           I64[Hp - 824] = lvl131_s3yuE_info;
           P64[Hp - 808] = _s3ytY::P64;
           I64[Hp - 800] = lvl132_s3yuF_info;
           P64[Hp - 784] = _s3ytY::P64;
           I64[Hp - 776] = lvl133_s3yuG_info;
           P64[Hp - 760] = _s3ytY::P64;
           I64[Hp - 752] = lvl134_s3yuH_info;
           P64[Hp - 736] = _s3ytY::P64;
           I64[Hp - 728] = lvl135_s3yuI_info;
           P64[Hp - 712] = _s3ytY::P64;
           I64[Hp - 704] = lvl136_s3yuJ_info;
           P64[Hp - 688] = _s3ytY::P64;
           I64[Hp - 680] = lvl137_s3yuK_info;
           P64[Hp - 664] = _s3ytY::P64;
           I64[Hp - 656] = lvl138_s3yuL_info;
           P64[Hp - 640] = _s3ytY::P64;
           I64[Hp - 632] = lvl139_s3yuM_info;
           P64[Hp - 616] = _s3ytY::P64;
           I64[Hp - 608] = lvl140_s3yuN_info;
           P64[Hp - 592] = _s3ytY::P64;
           I64[Hp - 584] = lvl141_s3yuO_info;
           P64[Hp - 568] = _s3ytY::P64;
           I64[Hp - 560] = lvl142_s3yuP_info;
           P64[Hp - 544] = _s3ytY::P64;
           I64[Hp - 536] = lvl143_s3yuQ_info;
           P64[Hp - 520] = _s3ytY::P64;
           I64[Hp - 512] = lvl144_s3yuR_info;
           P64[Hp - 496] = _s3ytY::P64;
           I64[Hp - 488] = lvl145_s3yuS_info;
           P64[Hp - 472] = _s3ytY::P64;
           I64[Hp - 464] = lvl146_s3yuT_info;
           P64[Hp - 448] = _s3ytY::P64;
           I64[Hp - 440] = lvl147_s3yuU_info;
           P64[Hp - 424] = _s3ytY::P64;
           I64[Hp - 416] = lvl148_s3yuV_info;
           P64[Hp - 400] = _s3ytY::P64;
           I64[Hp - 392] = lvl149_s3yuW_info;
           P64[Hp - 376] = _s3ytY::P64;
           I64[Hp - 368] = lvl150_s3yuX_info;
           P64[Hp - 352] = _s3ytY::P64;
           I64[Hp - 344] = $wlvl1_s3yuY_info;
           P64[Hp - 336] = _s3ytZ::P64;
           P64[Hp - 328] = _s3yu0::P64;
           P64[Hp - 320] = _s3yu1::P64;
           P64[Hp - 312] = _s3yu2::P64;
           P64[Hp - 304] = _s3yu3::P64;
           P64[Hp - 296] = _s3yu4::P64;
           P64[Hp - 288] = _s3yu5::P64;
           P64[Hp - 280] = Hp - 944;
           P64[Hp - 272] = Hp - 920;
           P64[Hp - 264] = Hp - 896;
           P64[Hp - 256] = Hp - 872;
           P64[Hp - 248] = Hp - 848;
           P64[Hp - 240] = Hp - 824;
           P64[Hp - 232] = Hp - 800;
           P64[Hp - 224] = Hp - 776;
           P64[Hp - 216] = Hp - 752;
           P64[Hp - 208] = Hp - 728;
           P64[Hp - 200] = Hp - 704;
           P64[Hp - 192] = Hp - 680;
           P64[Hp - 184] = Hp - 656;
           P64[Hp - 176] = Hp - 632;
           P64[Hp - 168] = Hp - 608;
           P64[Hp - 160] = Hp - 584;
           P64[Hp - 152] = Hp - 560;
           P64[Hp - 144] = Hp - 536;
           P64[Hp - 136] = Hp - 512;
           P64[Hp - 128] = Hp - 488;
           P64[Hp - 120] = Hp - 464;
           P64[Hp - 112] = Hp - 440;
           P64[Hp - 104] = Hp - 416;
           P64[Hp - 96] = Hp - 392;
           P64[Hp - 88] = Hp - 368;
           I64[Hp - 80] = lvl151_s3yv1_info;
           P64[Hp - 72] = Hp - 343;
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 56] = Hp - 79;
           I64[Hp - 48] = sat_s3yvf_info;
           P64[Hp - 32] = _s3ytY::P64;
           I64[Hp - 24] = sat_s3yva_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3ChB_srtd" {
     u3ChB_srtd:
         const S3yFW_srt+232;
         const 125;
         const 18031990695526401;
         const 2233785415175766016;
 },
 sat_s3yvh_entry() //  [R1]
         { info_tbl: [(c3CgG,
                       label: sat_s3yvh_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CgG: // global
           _s3yvh::P64 = R1;
           if ((Sp + -88) < SpLim) (likely: False) goto c3CgH; else goto c3CgI;
       c3CgI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CgK; else goto c3CgJ;
       c3CgK: // global
           HpAlloc = 16;
           goto c3CgH;
       c3CgH: // global
           R1 = _s3yvh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CgJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvh::P64;
           _s3ytY::P64 = P64[_s3yvh::P64 + 16];
           _s3ytZ::P64 = P64[_s3yvh::P64 + 24];
           _s3yu0::P64 = P64[_s3yvh::P64 + 32];
           _s3yu1::P64 = P64[_s3yvh::P64 + 40];
           _s3yu2::P64 = P64[_s3yvh::P64 + 48];
           _s3yu3::P64 = P64[_s3yvh::P64 + 56];
           _s3yu4::P64 = P64[_s3yvh::P64 + 64];
           _s3yu5::P64 = P64[_s3yvh::P64 + 72];
           I64[Hp - 8] = sat_s3yuv_info;
           P64[Hp] = _s3ytY::P64;
           I64[Sp - 88] = block_c3Cc2_info;
           R4 = Hp - 7;
           R3 = lvl113_r3yd3_closure+1;
           R2 = lvl112_r3yd2_closure+1;
           P64[Sp - 80] = _s3ytY::P64;
           P64[Sp - 72] = _s3ytZ::P64;
           P64[Sp - 64] = _s3yu0::P64;
           P64[Sp - 56] = _s3yu1::P64;
           P64[Sp - 48] = _s3yu2::P64;
           P64[Sp - 40] = _s3yu3::P64;
           P64[Sp - 32] = _s3yu4::P64;
           P64[Sp - 24] = _s3yu5::P64;
           Sp = Sp - 88;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Cc2() //  [R1]
         { info_tbl: [(c3Cc2,
                       label: block_c3Cc2_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cc2: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3CgN; else goto c3CgM;
       c3CgN: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3CgM: // global
           I64[Hp - 88] = sat_s3yvg_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 88;
           R2 = Hp - 6;
           Sp = Sp + 72;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yud_entry() //  [R1, R2]
         { info_tbl: [(c3CgW,
                       label: sat_s3yud_info
                       rep:HeapRep 10 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CgW: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3CgX; else goto c3CgY;
       c3CgX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CgY: // global
           I64[Sp - 88] = block_c3CgT_info;
           _s3ytZ::P64 = P64[R1 + 7];
           _s3yu0::P64 = P64[R1 + 15];
           _s3yu1::P64 = P64[R1 + 23];
           _s3yu2::P64 = P64[R1 + 31];
           _s3yu3::P64 = P64[R1 + 39];
           _s3yu4::P64 = P64[R1 + 47];
           _s3yu5::P64 = P64[R1 + 55];
           _s3yu6::P64 = P64[R1 + 63];
           _s3yu7::P64 = P64[R1 + 71];
           _s3yu8::P64 = P64[R1 + 79];
           R1 = R2;
           P64[Sp - 80] = _s3ytZ::P64;
           P64[Sp - 72] = _s3yu0::P64;
           P64[Sp - 64] = _s3yu1::P64;
           P64[Sp - 56] = _s3yu2::P64;
           P64[Sp - 48] = _s3yu3::P64;
           P64[Sp - 40] = _s3yu4::P64;
           P64[Sp - 32] = _s3yu5::P64;
           P64[Sp - 24] = _s3yu6::P64;
           P64[Sp - 16] = _s3yu7::P64;
           P64[Sp - 8] = _s3yu8::P64;
           Sp = Sp - 88;
           if (R1 & 7 != 0) goto u3Chs; else goto c3CgU;
       u3Chs: // global
           call _c3CgT(R1) args: 0, res: 0, upd: 0;
       c3CgU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CgT() //  [R1]
         { info_tbl: [(c3CgT,
                       label: block_c3CgT_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CgT: // global
           _s3yuc::I64 = I64[R1 + 7];
           if (_s3yuc::I64 < 99) goto u3Chf; else goto u3Chl;
       u3Chf: // global
           if (_s3yuc::I64 < 97) goto u3Chg; else goto u3Chk;
       u3Chg: // global
           if (_s3yuc::I64 < 40) goto u3Chh; else goto u3Chj;
       u3Chh: // global
           if (_s3yuc::I64 < 39) goto u3Chi; else goto c3Ch6;
       u3Chi: // global
           if (_s3yuc::I64 != 34) goto c3Ch4; else goto c3Ch5;
       c3Ch5: // global
           R1 = P64[Sp + 80] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Ch6: // global
           R1 = P64[Sp + 72] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Chj: // global
           if (_s3yuc::I64 != 92) goto c3Ch4; else goto c3Ch7;
       c3Ch7: // global
           R1 = P64[Sp + 64] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Chk: // global
           if (_s3yuc::I64 < 98) goto c3Ch8; else goto c3Ch9;
       c3Ch8: // global
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Ch9: // global
           R1 = P64[Sp + 48] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Chl: // global
           if (_s3yuc::I64 < 116) goto u3Chm; else goto u3Chq;
       u3Chm: // global
           if (_s3yuc::I64 < 111) goto u3Chn; else goto u3Chp;
       u3Chn: // global
           if (_s3yuc::I64 < 110) goto u3Cho; else goto c3Chb;
       u3Cho: // global
           if (_s3yuc::I64 != 102) goto c3Ch4; else goto c3Cha;
       c3Cha: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Chb: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Chp: // global
           if (_s3yuc::I64 != 114) goto c3Ch4; else goto c3Chc;
       c3Chc: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Chq: // global
           if (_s3yuc::I64 < 117) goto c3Chd; else goto u3Chr;
       c3Chd: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Chr: // global
           if (_s3yuc::I64 != 118) goto c3Ch4; else goto c3Che;
       c3Ch4: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Che: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3ChC_srtd" {
     u3ChC_srtd:
         const S3yFW_srt+232;
         const 126;
         const 18031990695526401;
         const 4539628424389459968;
 },
 Text.Read.Lex.lexChar2_entry() //  [R2]
         { info_tbl: [(c3Chu,
                       label: Text.Read.Lex.lexChar2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Chu: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto c3Chy; else goto c3Chx;
       c3Chy: // global
           HpAlloc = 424;
           R2 = R2;
           R1 = Text.Read.Lex.lexChar2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Chx: // global
           I64[Hp - 416] = lvl116_s3ytZ_info;
           P64[Hp - 400] = R2;
           I64[Hp - 392] = lvl117_s3yu0_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = lvl118_s3yu1_info;
           P64[Hp - 352] = R2;
           I64[Hp - 344] = lvl119_s3yu2_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = lvl120_s3yu3_info;
           P64[Hp - 304] = R2;
           I64[Hp - 296] = lvl121_s3yu4_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = lvl122_s3yu5_info;
           P64[Hp - 256] = R2;
           I64[Hp - 248] = lvl123_s3yu6_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = lvl124_s3yu7_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = lvl125_s3yu8_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s3yvh_info;
           P64[Hp - 160] = R2;
           _c3C9t::P64 = Hp - 416;
           P64[Hp - 152] = _c3C9t::P64;
           _c3C9A::P64 = Hp - 392;
           P64[Hp - 144] = _c3C9A::P64;
           _c3C9H::P64 = Hp - 368;
           P64[Hp - 136] = _c3C9H::P64;
           _c3C9O::P64 = Hp - 344;
           P64[Hp - 128] = _c3C9O::P64;
           _c3C9V::P64 = Hp - 320;
           P64[Hp - 120] = _c3C9V::P64;
           _c3Ca2::P64 = Hp - 296;
           P64[Hp - 112] = _c3Ca2::P64;
           _c3Ca9::P64 = Hp - 272;
           P64[Hp - 104] = _c3Ca9::P64;
           I64[Hp - 96] = sat_s3yud_info;
           P64[Hp - 88] = _c3C9t::P64;
           P64[Hp - 80] = _c3C9A::P64;
           P64[Hp - 72] = _c3C9H::P64;
           P64[Hp - 64] = _c3C9O::P64;
           P64[Hp - 56] = _c3C9V::P64;
           P64[Hp - 48] = _c3Ca2::P64;
           P64[Hp - 40] = _c3Ca9::P64;
           P64[Hp - 32] = Hp - 248;
           P64[Hp - 24] = Hp - 224;
           P64[Hp - 16] = Hp - 200;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 95;
           R3 = Hp - 176;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.49874907 UTC

[section ""cstring" . Text.Read.Lex.lexChar4_bytes" {
     Text.Read.Lex.lexChar4_bytes:
         I8[] [92,38]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.499637692 UTC

[section ""data" . Text.Read.Lex.lexChar3_closure" {
     Text.Read.Lex.lexChar3_closure:
         const Text.Read.Lex.lexChar3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.lexChar3_entry() //  [R1]
         { info_tbl: [(c3ChJ,
                       label: Text.Read.Lex.lexChar3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ChJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ChK; else goto c3ChL;
       c3ChK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ChL: // global
           (_c3ChG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ChG::I64 == 0) goto c3ChI; else goto c3ChH;
       c3ChI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ChH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ChG::I64;
           R2 = Text.Read.Lex.lexChar4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.502359506 UTC

[section ""data" . Text.Read.Lex.$wlvl_closure" {
     Text.Read.Lex.$wlvl_closure:
         const Text.Read.Lex.$wlvl_info;
         const 0;
 },
 lvl116_s3yvj_entry() //  [R1]
         { info_tbl: [(c3ChX,
                       label: lvl116_s3yvj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ChX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3ChY; else goto c3ChZ;
       c3ChY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ChZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3ChU_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wconsumeEmpties_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3ChU() //  [R1]
         { info_tbl: [(c3ChU,
                       label: block_c3ChU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ChU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ci2; else goto c3Ci1;
       c3Ci2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Ci1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yvn_entry() //  [R1]
         { info_tbl: [(c3Ci8,
                       label: sat_s3yvn_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ci8: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wlvl_entry() //  [R2]
         { info_tbl: [(c3Cib,
                       label: Text.Read.Lex.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cib: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Cif; else goto c3Cie;
       c3Cif: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Text.Read.Lex.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cie: // global
           I64[Hp - 32] = lvl116_s3yvj_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3yvn_info;
           P64[Hp] = Hp - 32;
           R3 = Hp - 7;
           R2 = Text.Read.Lex.lexChar3_closure;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Text.Read.Lex.$wconsumeEmpties_closure" {
     Text.Read.Lex.$wconsumeEmpties_closure:
         const Text.Read.Lex.$wconsumeEmpties_info;
         const 0;
 },
 lvl116_s3yvp_entry() //  [R1]
         { info_tbl: [(c3Cir,
                       label: lvl116_s3yvp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cir: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Cis; else goto c3Cit;
       c3Cis: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cit: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Cio_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Cio() //  [R1]
         { info_tbl: [(c3Cio,
                       label: block_c3Cio_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cio: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ciw; else goto c3Civ;
       c3Ciw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Civ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3yvs_entry() //  [R1]
         { info_tbl: [(c3CiB,
                       label: lvl117_s3yvs_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CiB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CiC; else goto c3CiD;
       c3CiC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CiD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yvG_entry() //  [R1, R2]
         { info_tbl: [(c3CiQ,
                       label: sat_s3yvG_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CiQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3CiR; else goto c3CiS;
       c3CiR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CiS: // global
           I64[Sp - 24] = block_c3CiJ_info;
           _s3yvp::P64 = P64[R1 + 7];
           _s3yvs::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yvp::P64;
           P64[Sp - 8] = _s3yvs::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3CjE; else goto c3CiK;
       u3CjE: // global
           call _c3CiJ(R1) args: 0, res: 0, upd: 0;
       c3CiK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CiJ() //  [R1]
         { info_tbl: [(c3CiJ,
                       label: block_c3CiJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CiJ: // global
           if (R1 & 7 == 1) goto u3Cjy; else goto c3CiO;
       u3Cjy: // global
           Sp = Sp + 16;
           call _c3Cjv() args: 0, res: 0, upd: 0;
       c3CiO: // global
           I64[Sp - 8] = block_c3CiY_info;
           _s3yvw::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3yvw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3CjC; else goto c3Cj0;
       u3CjC: // global
           call _c3CiY(R1) args: 0, res: 0, upd: 0;
       c3Cj0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CiY() //  [R1]
         { info_tbl: [(c3CiY,
                       label: block_c3CiY_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CiY: // global
           if (I64[R1 + 7] == 92) goto c3Cjb; else goto u3Cjz;
       c3Cjb: // global
           _s3yvw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Cja_info;
           R1 = _s3yvw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3CjF; else goto c3Cjc;
       u3CjF: // global
           call _c3Cja(R1) args: 0, res: 0, upd: 0;
       c3Cjc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Cjz: // global
           Sp = Sp + 24;
           call _c3Cjv() args: 0, res: 0, upd: 0;
     }
 },
 _c3Cja() //  [R1]
         { info_tbl: [(c3Cja,
                       label: block_c3Cja_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cja: // global
           if (R1 & 7 == 1) goto u3CjA; else goto c3Cjn;
       u3CjA: // global
           Sp = Sp + 16;
           call _c3Cjv() args: 0, res: 0, upd: 0;
       c3Cjn: // global
           I64[Sp] = block_c3Cjl_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3CjH; else goto c3Cjo;
       u3CjH: // global
           call _c3Cjl(R1) args: 0, res: 0, upd: 0;
       c3Cjo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cjl() //  [R1]
         { info_tbl: [(c3Cjl,
                       label: block_c3Cjl_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cjl: // global
           if (I64[R1 + 7] == 38) goto c3Cjw; else goto u3CjB;
       c3Cjw: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3CjB: // global
           Sp = Sp + 16;
           call _c3Cjv() args: 0, res: 0, upd: 0;
     }
 },
 _c3Cjv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cjv: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wconsumeEmpties_entry() //  [R2]
         { info_tbl: [(c3CjK,
                       label: Text.Read.Lex.$wconsumeEmpties_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CjK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3CjO; else goto c3CjN;
       c3CjO: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Text.Read.Lex.$wconsumeEmpties_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CjN: // global
           I64[Hp - 64] = lvl116_s3yvp_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl117_s3yvs_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3yvG_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.507169165 UTC

[section ""data" . Text.Read.Lex.lexChar5_closure" {
     Text.Read.Lex.lexChar5_closure:
         const Text.Read.Lex.lexChar5_info;
         const 0;
 },
 Text.Read.Lex.lexChar5_entry() //  [R2]
         { info_tbl: [(c3CjW,
                       label: Text.Read.Lex.lexChar5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CjW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3CjX; else goto c3CjY;
       c3CjX: // global
           R2 = R2;
           R1 = Text.Read.Lex.lexChar5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CjY: // global
           I64[Sp - 8] = block_c3CjT_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wconsumeEmpties_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3CjT() //  [R1]
         { info_tbl: [(c3CjT,
                       label: block_c3CjT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CjT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ck1; else goto c3Ck0;
       c3Ck1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ck0: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.511312441 UTC

[section ""data" . Text.Read.Lex.$wlexChar_closure" {
     Text.Read.Lex.$wlexChar_closure:
         const Text.Read.Lex.$wlexChar_info;
         const 0;
 },
 sat_s3yvU_entry() //  [R1]
         { info_tbl: [(c3Cku,
                       label: sat_s3yvU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cku: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl118_s3yvS_entry() //  [R1]
         { info_tbl: [(c3CkA,
                       label: lvl118_s3yvS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CkA: // global
           _s3yvS::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3CkB; else goto c3CkC;
       c3CkC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CkE; else goto c3CkD;
       c3CkE: // global
           HpAlloc = 16;
           goto c3CkB;
       c3CkB: // global
           R1 = _s3yvS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CkD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvS::P64;
           _s3yvR::P64 = P64[_s3yvS::P64 + 16];
           I64[Hp - 8] = sat_s3yvU_info;
           P64[Hp] = _s3yvR::P64;
           I64[Sp - 24] = block_c3Ckx_info;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Ckx() //  [R1]
         { info_tbl: [(c3Ckx,
                       label: block_c3Ckx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ckx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CkH; else goto c3CkG;
       c3CkH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3CkG: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ywa_entry() //  [R1, R2]
         { info_tbl: [(c3CkU,
                       label: sat_s3ywa_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CkU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3CkV; else goto c3CkW;
       c3CkV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CkW: // global
           I64[Sp - 24] = block_c3CkN_info;
           _s3yvR::P64 = P64[R1 + 7];
           _s3yvS::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yvR::P64;
           P64[Sp - 8] = _s3yvS::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3ClI; else goto c3CkO;
       u3ClI: // global
           call _c3CkN(R1) args: 0, res: 0, upd: 0;
       c3CkO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CkN() //  [R1]
         { info_tbl: [(c3CkN,
                       label: block_c3CkN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CkN: // global
           if (R1 & 7 == 1) goto u3ClC; else goto c3CkS;
       u3ClC: // global
           Sp = Sp + 8;
           call _c3Clz() args: 0, res: 0, upd: 0;
       c3CkS: // global
           I64[Sp - 8] = block_c3Cl2_info;
           _s3yw0::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3yw0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ClG; else goto c3Cl4;
       u3ClG: // global
           call _c3Cl2(R1) args: 0, res: 0, upd: 0;
       c3Cl4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cl2() //  [R1]
         { info_tbl: [(c3Cl2,
                       label: block_c3Cl2_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cl2: // global
           if (I64[R1 + 7] == 92) goto c3Clf; else goto u3ClD;
       c3Clf: // global
           _s3yw0::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Cle_info;
           R1 = _s3yw0::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3ClJ; else goto c3Clg;
       u3ClJ: // global
           call _c3Cle(R1) args: 0, res: 0, upd: 0;
       c3Clg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3ClD: // global
           Sp = Sp + 16;
           call _c3Clz() args: 0, res: 0, upd: 0;
     }
 },
 _c3Cle() //  [R1]
         { info_tbl: [(c3Cle,
                       label: block_c3Cle_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cle: // global
           if (R1 & 7 == 1) goto u3ClE; else goto c3Clr;
       u3ClE: // global
           Sp = Sp + 8;
           call _c3Clz() args: 0, res: 0, upd: 0;
       c3Clr: // global
           I64[Sp] = block_c3Clp_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3ClL; else goto c3Cls;
       u3ClL: // global
           call _c3Clp(R1) args: 0, res: 0, upd: 0;
       c3Cls: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Clp() //  [R1]
         { info_tbl: [(c3Clp,
                       label: block_c3Clp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Clp: // global
           if (I64[R1 + 7] == 38) goto c3ClA; else goto u3ClF;
       c3ClA: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3ClF: // global
           Sp = Sp + 8;
           call _c3Clz() args: 0, res: 0, upd: 0;
     }
 },
 _c3Clz() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Clz: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k_s3yvM_entry() //  [R1, R2]
         { info_tbl: [(c3ClO,
                       label: k_s3yvM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ClO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ClQ; else goto c3ClR;
       c3ClQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ClR: // global
           I64[Sp - 16] = block_c3Ckf_info;
           _s3yvK::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yvK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3ClV; else goto c3Ckg;
       u3ClV: // global
           call _c3Ckf(R1) args: 0, res: 0, upd: 0;
       c3Ckg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ckf() //  [R1]
         { info_tbl: [(c3Ckf,
                       label: block_c3Ckf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ckf: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3ClU; else goto c3ClT;
       c3ClU: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ClT: // global
           _s3yvP::P64 = P64[R1 + 7];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _s3yvP::P64;
           I64[Hp - 56] = lvl118_s3yvS_info;
           _c3Ckk::P64 = Hp - 88;
           P64[Hp - 40] = _c3Ckk::P64;
           I64[Hp - 32] = sat_s3ywa_info;
           P64[Hp - 24] = _c3Ckk::P64;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yvL_entry() //  [R1]
         { info_tbl: [(c3ClW,
                       label: lvl116_s3yvL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ClW: // global
           _s3yvL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ClX; else goto c3ClY;
       c3ClY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Cm0; else goto c3ClZ;
       c3Cm0: // global
           HpAlloc = 16;
           goto c3ClX;
       c3ClX: // global
           R1 = _s3yvL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ClZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvL::P64;
           _s3yvK::P64 = P64[_s3yvL::P64 + 16];
           I64[Hp - 8] = k_s3yvM_info;
           P64[Hp] = _s3yvK::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ywi_entry() //  [R1]
         { info_tbl: [(c3Cmn,
                       label: sat_s3ywi_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cmn: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl118_s3ywg_entry() //  [R1]
         { info_tbl: [(c3Cmt,
                       label: lvl118_s3ywg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cmt: // global
           _s3ywg::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Cmu; else goto c3Cmv;
       c3Cmv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Cmx; else goto c3Cmw;
       c3Cmx: // global
           HpAlloc = 16;
           goto c3Cmu;
       c3Cmu: // global
           R1 = _s3ywg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cmw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ywg::P64;
           _s3ywf::P64 = P64[_s3ywg::P64 + 16];
           I64[Hp - 8] = sat_s3ywi_info;
           P64[Hp] = _s3ywf::P64;
           I64[Sp - 24] = block_c3Cmq_info;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Cmq() //  [R1]
         { info_tbl: [(c3Cmq,
                       label: block_c3Cmq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cmq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CmA; else goto c3Cmz;
       c3CmA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Cmz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ywy_entry() //  [R1, R2]
         { info_tbl: [(c3CmN,
                       label: sat_s3ywy_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CmN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3CmO; else goto c3CmP;
       c3CmO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CmP: // global
           I64[Sp - 24] = block_c3CmG_info;
           _s3ywf::P64 = P64[R1 + 7];
           _s3ywg::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ywf::P64;
           P64[Sp - 8] = _s3ywg::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3CnB; else goto c3CmH;
       u3CnB: // global
           call _c3CmG(R1) args: 0, res: 0, upd: 0;
       c3CmH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CmG() //  [R1]
         { info_tbl: [(c3CmG,
                       label: block_c3CmG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CmG: // global
           if (R1 & 7 == 1) goto u3Cnv; else goto c3CmL;
       u3Cnv: // global
           Sp = Sp + 8;
           call _c3Cns() args: 0, res: 0, upd: 0;
       c3CmL: // global
           I64[Sp - 8] = block_c3CmV_info;
           _s3ywo::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3ywo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Cnz; else goto c3CmX;
       u3Cnz: // global
           call _c3CmV(R1) args: 0, res: 0, upd: 0;
       c3CmX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CmV() //  [R1]
         { info_tbl: [(c3CmV,
                       label: block_c3CmV_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CmV: // global
           if (I64[R1 + 7] == 92) goto c3Cn8; else goto u3Cnw;
       c3Cn8: // global
           _s3ywo::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Cn7_info;
           R1 = _s3ywo::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3CnC; else goto c3Cn9;
       u3CnC: // global
           call _c3Cn7(R1) args: 0, res: 0, upd: 0;
       c3Cn9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Cnw: // global
           Sp = Sp + 16;
           call _c3Cns() args: 0, res: 0, upd: 0;
     }
 },
 _c3Cn7() //  [R1]
         { info_tbl: [(c3Cn7,
                       label: block_c3Cn7_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cn7: // global
           if (R1 & 7 == 1) goto u3Cnx; else goto c3Cnk;
       u3Cnx: // global
           Sp = Sp + 8;
           call _c3Cns() args: 0, res: 0, upd: 0;
       c3Cnk: // global
           I64[Sp] = block_c3Cni_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3CnE; else goto c3Cnl;
       u3CnE: // global
           call _c3Cni(R1) args: 0, res: 0, upd: 0;
       c3Cnl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cni() //  [R1]
         { info_tbl: [(c3Cni,
                       label: block_c3Cni_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cni: // global
           if (I64[R1 + 7] == 38) goto c3Cnt; else goto u3Cny;
       c3Cnt: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Cny: // global
           Sp = Sp + 8;
           call _c3Cns() args: 0, res: 0, upd: 0;
     }
 },
 _c3Cns() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cns: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ywz_entry() //  [R1, R2]
         { info_tbl: [(c3CnH,
                       label: sat_s3ywz_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CnH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3CnI; else goto c3CnJ;
       c3CnI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CnJ: // global
           I64[Sp - 24] = block_c3Cm6_info;
           _s3yvK::P64 = P64[R1 + 7];
           _s3yvL::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yvK::P64;
           P64[Sp - 8] = _s3yvL::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3CnR; else goto c3Cm7;
       u3CnR: // global
           call _c3Cm6(R1) args: 0, res: 0, upd: 0;
       c3Cm7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cm6() //  [R1]
         { info_tbl: [(c3Cm6,
                       label: block_c3Cm6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cm6: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3CnM; else goto c3CnL;
       c3CnM: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CnL: // global
           if (I64[R1 + 7] == 92) goto c3CnQ; else goto c3CnP;
       c3CnQ: // global
           Hp = Hp - 96;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3CnP: // global
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = lvl118_s3ywg_info;
           _c3Cmd::P64 = Hp - 88;
           P64[Hp - 40] = _c3Cmd::P64;
           I64[Hp - 32] = sat_s3ywy_info;
           P64[Hp - 24] = _c3Cmd::P64;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wlexChar_entry() //  [R2]
         { info_tbl: [(c3CnS,
                       label: Text.Read.Lex.$wlexChar_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CnS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3CnW; else goto c3CnV;
       c3CnW: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Text.Read.Lex.$wlexChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CnV: // global
           I64[Hp - 40] = lvl116_s3yvL_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3ywz_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.519392645 UTC

[section ""data" . Text.Read.Lex.lexChar1_closure" {
     Text.Read.Lex.lexChar1_closure:
         const Text.Read.Lex.lexChar1_info;
         const 0;
 },
 Text.Read.Lex.lexChar1_entry() //  [R2]
         { info_tbl: [(c3Co4,
                       label: Text.Read.Lex.lexChar1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Co4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Co5; else goto c3Co6;
       c3Co5: // global
           R2 = R2;
           R1 = Text.Read.Lex.lexChar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Co6: // global
           I64[Sp - 8] = block_c3Co1_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wlexChar_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Co1() //  [R1]
         { info_tbl: [(c3Co1,
                       label: block_c3Co1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Co1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Co9; else goto c3Co8;
       c3Co9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Co8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.520611562 UTC

[section ""data" . Text.Read.Lex.lexChar_closure" {
     Text.Read.Lex.lexChar_closure:
         const Text.Read.Lex.lexChar_info;
         const 0;
 },
 Text.Read.Lex.lexChar_entry() //  [R2]
         { info_tbl: [(c3Coe,
                       label: Text.Read.Lex.lexChar_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Coe: // global
           R2 = R2;
           call Text.Read.Lex.lexChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.523772963 UTC

[section ""data" . lexStrItem_r3yd4_closure" {
     lexStrItem_r3yd4_closure:
         const lexStrItem_r3yd4_info;
         const 0;
 },
 lvl116_s3ywE_entry() //  [R1]
         { info_tbl: [(c3Cop,
                       label: lvl116_s3ywE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cop: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Coq; else goto c3Cor;
       c3Coq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cor: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call lexStrItem_r3yd4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3ywF_entry() //  [R1, R2]
         { info_tbl: [(c3CoA,
                       label: lvl117_s3ywF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CoA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CoB; else goto c3CoC;
       c3CoB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CoC: // global
           I64[Sp - 16] = block_c3Cox_info;
           _s3ywE::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ywE::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CoK; else goto c3Coy;
       u3CoK: // global
           call _c3Cox(R1) args: 0, res: 0, upd: 0;
       c3Coy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cox() //  [R1]
         { info_tbl: [(c3Cox,
                       label: block_c3Cox_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cox: // global
           if (I64[R1 + 7] == 92) goto c3CoJ; else goto c3CoI;
       c3CoJ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3CoI: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k1_s3ywL_entry() //  [R1]
         { info_tbl: [(c3CoR,
                       label: k1_s3ywL_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CoR: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl119_s3ywN_entry() //  [R1, R2]
         { info_tbl: [(c3CoZ,
                       label: lvl119_s3ywN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CoZ: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl1_s3ywP_entry() //  [R1, R2]
         { info_tbl: [(c3Cpb,
                       label: $wlvl1_s3ywP_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cpb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Cpf; else goto c3Cpe;
       c3Cpf: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cpe: // global
           if (R2 == 38) goto c3Cpa; else goto c3Cp9;
       c3Cpa: // global
           _s3ywE::P64 = P64[R1 + 7];
           Hp = Hp - 16;
           R1 = _s3ywE::P64 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cp9: // global
           _s3ywN::P64 = P64[R1 + 15];
           if (R2 > 887) goto c3CpC; else goto c3Cq3;
       c3CpC: // global
           (_s3ywZ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(R2);
           if (_s3ywZ::I64 == 0) goto c3CpO; else goto c3Cpz;
       c3Cpz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Cq3: // global
           if (R2 == 32) goto c3Cq2; else goto c3CpZ;
       c3Cq2: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CpZ: // global
           if ((R2 + -9) > 4) goto c3CpU; else goto c3CpX;
       c3CpU: // global
           if (R2 != 160) goto c3CpO; else goto c3CpS;
       c3CpO: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CpS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CpX: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl120_s3yx5_entry() //  [R1, R2]
         { info_tbl: [(c3Cqc,
                       label: lvl120_s3yx5_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cqc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cqd; else goto c3Cqe;
       c3Cqd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cqe: // global
           I64[Sp - 16] = block_c3Cq9_info;
           _s3ywP::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ywP::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Cqi; else goto c3Cqa;
       u3Cqi: // global
           call _c3Cq9(R1) args: 0, res: 0, upd: 0;
       c3Cqa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cq9() //  [R1]
         { info_tbl: [(c3Cq9,
                       label: block_c3Cq9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cq9: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wlvl1_s3ywP_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl122_s3yxa_entry() //  [R1]
         { info_tbl: [(c3Cqo,
                       label: lvl122_s3yxa_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cqo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cqp; else goto c3Cqq;
       c3Cqp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cqq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yxm_entry() //  [R1, R2]
         { info_tbl: [(c3Cqz,
                       label: sat_s3yxm_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cqz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3CqA; else goto c3CqB;
       c3CqA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CqB: // global
           I64[Sp - 24] = block_c3Cqw_info;
           _s3ywD::P64 = P64[R1 + 7];
           _s3yxa::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ywD::P64;
           P64[Sp - 8] = _s3yxa::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3CqN; else goto c3Cqx;
       u3CqN: // global
           call _c3Cqw(R1) args: 0, res: 0, upd: 0;
       c3Cqx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cqw() //  [R1]
         { info_tbl: [(c3Cqw,
                       label: block_c3Cqw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cqw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CqG; else goto c3CqF;
       c3CqG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CqF: // global
           if (I64[R1 + 7] == 92) goto c3CqM; else goto c3CqL;
       c3CqM: // global
           Hp = Hp - 24;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3CqL: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = Hp - 15;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yxf_entry() //  [R1, R2]
         { info_tbl: [(c3CqX,
                       label: sat_s3yxf_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CqX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CqY; else goto c3CqZ;
       c3CqY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CqZ: // global
           I64[Sp - 16] = block_c3CqU_info;
           _s3yx9::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yx9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Cr7; else goto c3CqV;
       u3Cr7: // global
           call _c3CqU(R1) args: 0, res: 0, upd: 0;
       c3CqV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CqU() //  [R1]
         { info_tbl: [(c3CqU,
                       label: block_c3CqU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CqU: // global
           if (I64[R1 + 7] == 92) goto c3Cr6; else goto c3Cr5;
       c3Cr6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Cr5: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lexStrItem_r3yd4_entry() //  [R2]
         { info_tbl: [(c3Cr9,
                       label: lexStrItem_r3yd4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cr9: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto c3Crd; else goto c3Crc;
       c3Crd: // global
           HpAlloc = 240;
           R2 = R2;
           R1 = lexStrItem_r3yd4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Crc: // global
           I64[Hp - 232] = lvl116_s3ywE_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = lvl117_s3ywF_info;
           _c3Col::P64 = Hp - 232;
           P64[Hp - 200] = _c3Col::P64;
           I64[Hp - 192] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 184] = Hp - 207;
           I64[Hp - 176] = k1_s3ywL_info;
           P64[Hp - 168] = Hp - 191;
           I64[Hp - 160] = lvl119_s3ywN_info;
           P64[Hp - 152] = Hp - 175;
           I64[Hp - 144] = $wlvl1_s3ywP_info;
           P64[Hp - 136] = _c3Col::P64;
           P64[Hp - 128] = Hp - 159;
           I64[Hp - 120] = lvl120_s3yx5_info;
           P64[Hp - 112] = Hp - 143;
           I64[Hp - 104] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 96] = Hp - 119;
           I64[Hp - 88] = lvl122_s3yxa_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s3yxm_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = sat_s3yxf_info;
           P64[Hp - 16] = Hp - 103;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 39;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.53019765 UTC

[section ""data" . body_r3yd5_closure" {
     body_r3yd5_closure:
         const body_r3yd5_info;
         const 0;
 },
 sat_s3yxr_entry() //  [R1]
         { info_tbl: [(c3Crq,
                       label: sat_s3yxr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Crq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Crr; else goto c3Crs;
       c3Crr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Crs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl116_s3yxq_entry() //  [R1]
         { info_tbl: [(c3Cru,
                       label: lvl116_s3yxq_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cru: // global
           _s3yxq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Crv; else goto c3Crw;
       c3Crw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Cry; else goto c3Crx;
       c3Cry: // global
           HpAlloc = 40;
           goto c3Crv;
       c3Crv: // global
           R1 = _s3yxq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Crx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yxq::P64;
           _s3yxo::P64 = P64[_s3yxq::P64 + 16];
           _s3yxp::P64 = P64[_s3yxq::P64 + 24];
           I64[Hp - 32] = sat_s3yxr_info;
           P64[Hp - 16] = _s3yxo::P64;
           I64[Hp - 8] = Text.Read.Lex.String_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           R1 = _s3yxp::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yxC_entry() //  [R1, R2]
         { info_tbl: [(c3CrZ,
                       label: sat_s3yxC_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CrZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Cs3; else goto c3Cs2;
       c3Cs3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cs2: // global
           _s3yxo::P64 = P64[R1 + 7];
           _s3yxx::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yxx::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3yxo::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yxF_entry() //  [R1, R2]
         { info_tbl: [(c3Cs4,
                       label: sat_s3yxF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cs4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Cs5; else goto c3Cs6;
       c3Cs5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cs6: // global
           I64[Sp - 32] = block_c3CrE_info;
           _s3yxo::P64 = P64[R1 + 7];
           _s3yxp::P64 = P64[R1 + 15];
           _s3yxq::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3yxo::P64;
           P64[Sp - 16] = _s3yxp::P64;
           P64[Sp - 8] = _s3yxq::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3CsA; else goto c3CrF;
       u3CsA: // global
           call _c3CrE(R1) args: 0, res: 0, upd: 0;
       c3CrF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CrE() //  [R1]
         { info_tbl: [(c3CrE,
                       label: block_c3CrE_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CrE: // global
           I64[Sp - 8] = block_c3CrJ_info;
           _s3yxw::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3yxw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Csx; else goto c3CrK;
       u3Csx: // global
           call _c3CrJ(R1) args: 0, res: 0, upd: 0;
       c3CrK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CrJ() //  [R1]
         { info_tbl: [(c3CrJ,
                       label: block_c3CrJ_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CrJ: // global
           if (I64[R1 + 7] == 34) goto c3Csi; else goto u3Csv;
       c3Csi: // global
           I64[Sp] = block_c3Csh_info;
           _s3yxx::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3yxx::P64;
           if (R1 & 7 != 0) goto u3Csy; else goto c3Csj;
       u3Csy: // global
           call _c3Csh(R1) args: 0, res: 0, upd: 0;
       c3Csj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Csv: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3CrR() args: 0, res: 0, upd: 0;
     }
 },
 _c3Csh() //  [R1]
         { info_tbl: [(c3Csh,
                       label: block_c3Csh_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Csh: // global
           if (R1 & 7 == 1) goto c3Csp; else goto u3Csw;
       c3Csp: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Csw: // global
           P64[Sp + 32] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c3CrR() args: 0, res: 0, upd: 0;
     }
 },
 _c3CrR() //  []
         { info_tbl: [(c3CrR,
                       label: block_c3CrR_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CrR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Csb; else goto c3Csa;
       c3Csb: // global
           HpAlloc = 24;
           I64[Sp] = block_c3CrR_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Csa: // global
           I64[Hp - 16] = sat_s3yxC_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = Hp - 15;
           Sp = Sp + 32;
           call body_r3yd5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 body_r3yd5_entry() //  [R2, R3]
         { info_tbl: [(c3CsC,
                       label: body_r3yd5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CsC: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3CsG; else goto c3CsF;
       c3CsG: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = body_r3yd5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3CsF: // global
           I64[Hp - 56] = lvl116_s3yxq_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yxF_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R2 = Hp - 23;
           call lexStrItem_r3yd4_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.537123187 UTC

[section ""data" . lexExp_r3yd6_closure" {
     lexExp_r3yd6_closure:
         const lexExp_r3yd6_info;
         const 0;
 },
 sat_s3yxP_entry() //  [R1]
         { info_tbl: [(c3Ct6,
                       label: sat_s3yxP_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ct6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Ct7; else goto c3Ct8;
       c3Ct7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ct8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3Ct3_info;
           _s3yxK::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yxK::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3Ctn; else goto c3Ct4;
       u3Ctn: // global
           call _c3Ct3(R1) args: 0, res: 0, upd: 0;
       c3Ct4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3Ct3() //  [R1]
         { info_tbl: [(c3Ct3,
                       label: block_c3Ct3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ct3: // global
           _s3yxK::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 45) goto c3Cti; else goto c3Cte;
       c3Cti: // global
           I64[Sp + 8] = block_c3Cth_info;
           R3 = _s3yxK::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 24;
       c3Cte: // global
           R3 = _s3yxK::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 _c3Cth() //  [R1]
         { info_tbl: [(c3Cth,
                       label: block_c3Cth_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cth: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yxR_entry() //  [R1, R2]
         { info_tbl: [(c3Ctp,
                       label: sat_s3yxR_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ctp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Ctt; else goto c3Cts;
       c3Ctt: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cts: // global
           _s3yxG::P64 = P64[R1 + 7];
           _s3yxJ::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3yxP_info;
           P64[Hp - 24] = _s3yxJ::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 6;
           R1 = _s3yxG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CvJ_srtd" {
     u3CvJ_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 k1_s3yxI_entry() //  [R1, R2]
         { info_tbl: [(c3Ctx,
                       label: k1_s3yxI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ctx: // global
           _s3yxJ::P64 = R2;
           _s3yxI::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Cty; else goto c3Ctz;
       c3Ctz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CtB; else goto c3CtA;
       c3CtB: // global
           HpAlloc = 24;
           goto c3Cty;
       c3Cty: // global
           R2 = _s3yxJ::P64;
           R1 = _s3yxI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CtA: // global
           _s3yxG::P64 = P64[_s3yxI::P64 + 7];
           I64[Hp - 16] = sat_s3yxR_info;
           P64[Hp - 8] = _s3yxG::P64;
           P64[Hp] = _s3yxJ::P64;
           I64[Sp - 8] = block_c3Ctu_info;
           R3 = Hp - 15;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 8;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ctu() //  [R1]
         { info_tbl: [(c3Ctu,
                       label: block_c3Ctu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ctu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CtE; else goto c3CtD;
       c3CtE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CtD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yy8_entry() //  [R1]
         { info_tbl: [(c3CtS,
                       label: sat_s3yy8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CtS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CtT; else goto c3CtU;
       c3CtT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CtU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yya_entry() //  [R1, R2]
         { info_tbl: [(c3CtW,
                       label: sat_s3yya_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CtW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Cu0; else goto c3CtZ;
       c3Cu0: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CtZ: // global
           _s3yxG::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_s3yy8_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           R1 = _s3yxG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CvK_srtd" {
     u3CvK_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3yyd_entry() //  [R1]
         { info_tbl: [(c3Cu4,
                       label: sat_s3yyd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cu4: // global
           _s3yyd::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Cu5; else goto c3Cu6;
       c3Cu6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Cu8; else goto c3Cu7;
       c3Cu8: // global
           HpAlloc = 16;
           goto c3Cu5;
       c3Cu5: // global
           R1 = _s3yyd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cu7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yyd::P64;
           _s3yxG::P64 = P64[_s3yyd::P64 + 16];
           I64[Hp - 8] = sat_s3yya_info;
           P64[Hp] = _s3yxG::P64;
           I64[Sp - 24] = block_c3Cu1_info;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Cu1() //  [R1]
         { info_tbl: [(c3Cu1,
                       label: block_c3Cu1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cu1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Cub; else goto c3Cua;
       c3Cub: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Cua: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3CvL_srtd" {
     u3CvL_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3yy4_entry() //  [R1, R2]
         { info_tbl: [(c3Cuk,
                       label: sat_s3yy4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cuk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cul; else goto c3Cum;
       c3Cul: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cum: // global
           I64[Sp - 16] = block_c3Cuh_info;
           _s3yxI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Cuu; else goto c3Cui;
       u3Cuu: // global
           call _c3Cuh(R1) args: 0, res: 0, upd: 0;
       c3Cui: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3CvM_srtd" {
     u3CvM_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 _c3Cuh() //  [R1]
         { info_tbl: [(c3Cuh,
                       label: block_c3Cuh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cuh: // global
           if (I64[R1 + 7] == 43) goto c3Cut; else goto c3Cus;
       c3Cut: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call k1_s3yxI_entry(R2, R1) args: 8, res: 0, upd: 8;
       c3Cus: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CvN_srtd" {
     u3CvN_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3yxY_entry() //  [R1, R2]
         { info_tbl: [(c3CuE,
                       label: sat_s3yxY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CuE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CuF; else goto c3CuG;
       c3CuF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CuG: // global
           I64[Sp - 16] = block_c3CuB_info;
           _s3yxI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CuO; else goto c3CuC;
       u3CuO: // global
           call _c3CuB(R1) args: 0, res: 0, upd: 0;
       c3CuC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3CvO_srtd" {
     u3CvO_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 _c3CuB() //  [R1]
         { info_tbl: [(c3CuB,
                       label: block_c3CuB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CuB: // global
           if (I64[R1 + 7] == 45) goto c3CuN; else goto c3CuM;
       c3CuN: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call k1_s3yxI_entry(R2, R1) args: 8, res: 0, upd: 8;
       c3CuM: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CvP_srtd" {
     u3CvP_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201392128;
 },
 lvl116_s3yxH_entry() //  [R1]
         { info_tbl: [(c3CuS,
                       label: lvl116_s3yxH_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CuS: // global
           _s3yxH::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3CuT; else goto c3CuU;
       c3CuU: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3CuW; else goto c3CuV;
       c3CuW: // global
           HpAlloc = 104;
           goto c3CuT;
       c3CuT: // global
           R1 = _s3yxH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CuV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yxH::P64;
           _s3yxG::P64 = P64[_s3yxH::P64 + 16];
           I64[Hp - 96] = k1_s3yxI_info;
           P64[Hp - 88] = _s3yxG::P64;
           I64[Hp - 80] = sat_s3yyd_info;
           P64[Hp - 64] = _s3yxG::P64;
           I64[Hp - 56] = sat_s3yy4_info;
           _c3CsP::P64 = Hp - 95;
           P64[Hp - 48] = _c3CsP::P64;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = sat_s3yxY_info;
           P64[Hp - 16] = _c3CsP::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 32] = block_c3CuQ_info;
           R3 = Hp - 39;
           R2 = Hp - 7;
           P64[Sp - 24] = Hp - 80;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3CuQ() //  [R1]
         { info_tbl: [(c3CuQ,
                       label: block_c3CuQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CuQ: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yyo_entry() //  [R1, R2]
         { info_tbl: [(c3Cv8,
                       label: sat_s3yyo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cv8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cv9; else goto c3Cva;
       c3Cv9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cva: // global
           I64[Sp - 16] = block_c3Cv5_info;
           _s3yxH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Cvi; else goto c3Cv6;
       u3Cvi: // global
           call _c3Cv5(R1) args: 0, res: 0, upd: 0;
       c3Cv6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cv5() //  [R1]
         { info_tbl: [(c3Cv5,
                       label: block_c3Cv5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cv5: // global
           if (I64[R1 + 7] == 69) goto c3Cvh; else goto c3Cvg;
       c3Cvh: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cvg: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yyi_entry() //  [R1, R2]
         { info_tbl: [(c3Cvs,
                       label: sat_s3yyi_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cvs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cvt; else goto c3Cvu;
       c3Cvt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cvu: // global
           I64[Sp - 16] = block_c3Cvp_info;
           _s3yxH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CvC; else goto c3Cvq;
       u3CvC: // global
           call _c3Cvp(R1) args: 0, res: 0, upd: 0;
       c3Cvq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cvp() //  [R1]
         { info_tbl: [(c3Cvp,
                       label: block_c3Cvp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cvp: // global
           if (I64[R1 + 7] == 101) goto c3CvB; else goto c3CvA;
       c3CvB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3CvA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CvQ_srtd" {
     u3CvQ_srtd:
         const S3yFW_srt+584;
         const 93;
         const 1;
         const 469827584;
 },
 lexExp_r3yd6_entry() //  [R2]
         { info_tbl: [(c3CvE,
                       label: lexExp_r3yd6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CvE: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3CvI; else goto c3CvH;
       c3CvI: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = lexExp_r3yd6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CvH: // global
           I64[Hp - 80] = lvl116_s3yxH_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s3yyo_info;
           _c3CsL::P64 = Hp - 80;
           P64[Hp - 48] = _c3CsL::P64;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = sat_s3yyi_info;
           P64[Hp - 16] = _c3CsL::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 39;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.544355932 UTC

[section ""data" . lvl114_r3yd7_closure" {
     lvl114_r3yd7_closure:
         const lvl114_r3yd7_info;
 },
 lvl114_r3yd7_entry() //  [R2]
         { info_tbl: [(c3CvV,
                       label: lvl114_r3yd7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CvV: // global
           _s3yyq::P64 = R2;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _s3yyq::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.547608893 UTC

[section ""data" . lvl115_r3yd8_closure" {
     lvl115_r3yd8_closure:
         const lvl115_r3yd8_info;
 },
 lvl115_r3yd8_entry() //  [R2]
         { info_tbl: [(c3Cw2,
                       label: lvl115_r3yd8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cw2: // global
           _s3yyr::P64 = R2;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _s3yyr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.550383262 UTC

[section ""data" . $wlexDecNumber_r3yd9_closure" {
     $wlexDecNumber_r3yd9_closure:
         const $wlexDecNumber_r3yd9_info;
         const 0;
 },
 sat_s3yyy_entry() //  [R1, R2]
         { info_tbl: [(c3Cwq,
                       label: sat_s3yyy_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cwq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Cwu; else goto c3Cwt;
       c3Cwu: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cwt: // global
           _s3yys::P64 = P64[R1 + 7];
           _s3yyt::P64 = P64[R1 + 15];
           _s3yyu::P64 = P64[R1 + 23];
           I64[Hp - 40] = Text.Read.Lex.MkDecimal_con_info;
           P64[Hp - 32] = _s3yyt::P64;
           P64[Hp - 24] = _s3yyu::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 38;
           R2 = Hp - 2;
           R1 = _s3yys::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CwW_srtd" {
     u3CwW_srtd:
         const S3yFW_srt+664;
         const 83;
         const 1;
         const 262144;
 },
 sat_s3yyB_entry() //  [R1, R2]
         { info_tbl: [(c3Cwy,
                       label: sat_s3yyB_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cwy: // global
           _s3yyu::P64 = R2;
           _s3yyB::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Cwz; else goto c3CwA;
       c3CwA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CwC; else goto c3CwB;
       c3CwC: // global
           HpAlloc = 32;
           goto c3Cwz;
       c3Cwz: // global
           R2 = _s3yyu::P64;
           R1 = _s3yyB::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CwB: // global
           _s3yys::P64 = P64[_s3yyB::P64 + 7];
           _s3yyt::P64 = P64[_s3yyB::P64 + 15];
           I64[Hp - 24] = sat_s3yyy_info;
           P64[Hp - 16] = _s3yys::P64;
           P64[Hp - 8] = _s3yyt::P64;
           P64[Hp] = _s3yyu::P64;
           I64[Sp - 8] = block_c3Cwv_info;
           R4 = Hp - 23;
           R3 = lvl115_r3yd8_closure+1;
           R2 = lexExp_r3yd6_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cwv() //  [R1]
         { info_tbl: [(c3Cwv,
                       label: block_c3Cwv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cwv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CwF; else goto c3CwE;
       c3CwF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CwE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CwX_srtd" {
     u3CwX_srtd:
         const S3yFW_srt+616;
         const 89;
         const 65;
         const 16777216;
 },
 sat_s3yyE_entry() //  [R1, R2]
         { info_tbl: [(c3CwJ,
                       label: sat_s3yyE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CwJ: // global
           _s3yyt::P64 = R2;
           _s3yyE::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3CwK; else goto c3CwL;
       c3CwL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CwN; else goto c3CwM;
       c3CwN: // global
           HpAlloc = 24;
           goto c3CwK;
       c3CwK: // global
           R2 = _s3yyt::P64;
           R1 = _s3yyE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CwM: // global
           _s3yys::P64 = P64[_s3yyE::P64 + 7];
           I64[Hp - 16] = sat_s3yyB_info;
           P64[Hp - 8] = _s3yys::P64;
           P64[Hp] = _s3yyt::P64;
           I64[Sp - 8] = block_c3CwG_info;
           R4 = Hp - 15;
           R3 = lvl114_r3yd7_closure+1;
           R2 = lexFrac_r3y9E_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3CwG() //  [R1]
         { info_tbl: [(c3CwG,
                       label: block_c3CwG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CwG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CwQ; else goto c3CwP;
       c3CwQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CwP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CwY_srtd" {
     u3CwY_srtd:
         const S3yFW_srt+584;
         const 94;
         const 1041;
         const 805306368;
 },
 $wlexDecNumber_r3yd9_entry() //  [R2]
         { info_tbl: [(c3CwR,
                       label: $wlexDecNumber_r3yd9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CwR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CwV; else goto c3CwU;
       c3CwV: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = $wlexDecNumber_r3yd9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CwU: // global
           I64[Hp - 8] = sat_s3yyE_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.553402159 UTC

[section ""data" . lexDecNumber_r3yda_closure" {
     lexDecNumber_r3yda_closure:
         const lexDecNumber_r3yda_info;
         const 0;
 },
 lexDecNumber_r3yda_entry() //  [R2]
         { info_tbl: [(c3Cx6,
                       label: lexDecNumber_r3yda_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cx6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Cx7; else goto c3Cx8;
       c3Cx7: // global
           R2 = R2;
           R1 = lexDecNumber_r3yda_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cx8: // global
           I64[Sp - 8] = block_c3Cx3_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexDecNumber_r3yd9_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cx3() //  [R1]
         { info_tbl: [(c3Cx3,
                       label: block_c3Cx3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cx3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Cxb; else goto c3Cxa;
       c3Cxb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Cxa: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.560956885 UTC

[section ""data" . Text.Read.Lex.expect2_closure" {
     Text.Read.Lex.expect2_closure:
         const Text.Read.Lex.expect2_info;
         const 0;
 },
 lvl116_s3yyM_entry() //  [R1]
         { info_tbl: [(c3Cxq,
                       label: lvl116_s3yyM_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cxq: // global
           _s3yyM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cxr; else goto c3Cxs;
       c3Cxs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Cxu; else goto c3Cxt;
       c3Cxu: // global
           HpAlloc = 16;
           goto c3Cxr;
       c3Cxr: // global
           R1 = _s3yyM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cxt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yyM::P64;
           _s3yyI::P64 = P64[_s3yyM::P64 + 16];
           _s3yyK::P64 = P64[_s3yyM::P64 + 24];
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = _s3yyK::P64;
           R2 = Hp - 7;
           R1 = _s3yyI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yyW_entry() //  [R1, R2]
         { info_tbl: [(c3CxP,
                       label: sat_s3yyW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CxP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CxQ; else goto c3CxR;
       c3CxQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CxR: // global
           I64[Sp - 16] = block_c3CxM_info;
           _s3yyM::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CxZ; else goto c3CxN;
       u3CxZ: // global
           call _c3CxM(R1) args: 0, res: 0, upd: 0;
       c3CxN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CxM() //  [R1]
         { info_tbl: [(c3CxM,
                       label: block_c3CxM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CxM: // global
           if (I64[R1 + 7] == 39) goto c3CxY; else goto c3CxX;
       c3CxY: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3CxX: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yz1_entry() //  [R1, R2]
         { info_tbl: [(c3Cya,
                       label: sat_s3yz1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cya: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cyb; else goto c3Cyc;
       c3Cyb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Cyc: // global
           I64[Sp - 16] = block_c3Cy7_info;
           _s3yyM::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Cyk; else goto c3Cy8;
       u3Cyk: // global
           call _c3Cy7(R1) args: 0, res: 0, upd: 0;
       c3Cy8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cy7() //  [R1]
         { info_tbl: [(c3Cy7,
                       label: block_c3Cy7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cy7: // global
           if (I64[R1 + 7] == 39) goto c3Cyj; else goto c3Cyi;
       c3Cyj: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Cyi: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wk_s3yyJ_entry() //  [R1, R2, R3]
         { info_tbl: [(c3Cyp,
                       label: $wk_s3yyJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cyp: // global
           _s3yyL::P64 = R3;
           _s3yyK::P64 = R2;
           _s3yyJ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Cyq; else goto c3Cyr;
       c3Cyr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Cyt; else goto c3Cys;
       c3Cyt: // global
           HpAlloc = 32;
           goto c3Cyq;
       c3Cyq: // global
           R3 = _s3yyL::P64;
           R2 = _s3yyK::P64;
           R1 = _s3yyJ::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Cys: // global
           _s3yyI::P64 = P64[_s3yyJ::P64 + 6];
           I64[Hp - 24] = lvl116_s3yyM_info;
           P64[Hp - 8] = _s3yyI::P64;
           P64[Hp] = _s3yyK::P64;
           I64[Sp - 24] = block_c3Cxv_info;
           R1 = _s3yyL::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s3yyK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3CyH; else goto c3Cxw;
       u3CyH: // global
           call _c3Cxv(R1) args: 0, res: 0, upd: 0;
       c3Cxw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cxv() //  [R1]
         { info_tbl: [(c3Cxv,
                       label: block_c3Cxv_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cxv: // global
           if (R1 & 7 == 1) goto c3Cym; else goto c3Cyn;
       c3Cym: // global
           I64[Sp] = block_c3CxA_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3CyG; else goto c3CxB;
       u3CyG: // global
           call _c3CxA(R1) args: 0, res: 0, upd: 0;
       c3CxB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Cyn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CyF; else goto c3CyE;
       c3CyF: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CyE: // global
           I64[Hp - 24] = sat_s3yz1_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3CxA() //  [R1]
         { info_tbl: [(c3CxA,
                       label: block_c3CxA_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CxA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Cyx; else goto c3Cyw;
       c3Cyx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Cyw: // global
           if (I64[R1 + 7] == 39) goto c3CyB; else goto c3CyA;
       c3CyB: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CyA: // global
           I64[Hp - 24] = sat_s3yyW_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k1_s3yz2_entry() //  [R1, R2]
         { info_tbl: [(c3CyQ,
                       label: k1_s3yz2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CyQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CyR; else goto c3CyS;
       c3CyR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CyS: // global
           I64[Sp - 16] = block_c3CyN_info;
           _s3yyJ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CyW; else goto c3CyO;
       u3CyW: // global
           call _c3CyN(R1) args: 0, res: 0, upd: 0;
       c3CyO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CyN() //  [R1]
         { info_tbl: [(c3CyN,
                       label: block_c3CyN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CyN: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wk_s3yyJ_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yz7_entry() //  [R1]
         { info_tbl: [(c3Cz1,
                       label: lvl116_s3yz7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cz1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Cz2; else goto c3Cz3;
       c3Cz2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Cz3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3yzd_entry() //  [R1]
         { info_tbl: [(c3Czl,
                       label: lvl118_s3yzd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Czl: // global
           _s3yzd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Czm; else goto c3Czn;
       c3Czn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Czp; else goto c3Czo;
       c3Czp: // global
           HpAlloc = 16;
           goto c3Czm;
       c3Czm: // global
           R1 = _s3yzd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Czo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yzd::P64;
           _s3yyI::P64 = P64[_s3yzd::P64 + 16];
           _s3yza::P64 = P64[_s3yzd::P64 + 24];
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = _s3yza::P64;
           R2 = Hp - 7;
           R1 = _s3yyI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzj_entry() //  [R1, R2]
         { info_tbl: [(c3Czy,
                       label: sat_s3yzj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Czy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Czz; else goto c3CzA;
       c3Czz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CzA: // global
           I64[Sp - 16] = block_c3Czv_info;
           _s3yzd::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yzd::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CzI; else goto c3Czw;
       u3CzI: // global
           call _c3Czv(R1) args: 0, res: 0, upd: 0;
       c3Czw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Czv() //  [R1]
         { info_tbl: [(c3Czv,
                       label: block_c3Czv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Czv: // global
           if (I64[R1 + 7] == 39) goto c3CzH; else goto c3CzG;
       c3CzH: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3CzG: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3yz8_entry() //  [R1, R2]
         { info_tbl: [(c3CzJ,
                       label: lvl117_s3yz8_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CzJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3CzK; else goto c3CzL;
       c3CzK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CzL: // global
           I64[Sp - 24] = block_c3Cz9_info;
           _s3yyI::P64 = P64[R1 + 7];
           _s3yz7::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yyI::P64;
           P64[Sp - 8] = _s3yz7::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3CzV; else goto c3Cza;
       u3CzV: // global
           call _c3Cz9(R1) args: 0, res: 0, upd: 0;
       c3Cza: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Cz9() //  [R1]
         { info_tbl: [(c3Cz9,
                       label: block_c3Cz9_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Cz9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3CzO; else goto c3CzN;
       c3CzO: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CzN: // global
           _s3yzc::I64 = I64[R1 + 7];
           if (_s3yzc::I64 == 39) goto c3CzS; else goto u3CzU;
       c3CzS: // global
           Hp = Hp - 64;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3CzU: // global
           if (_s3yzc::I64 == 92) goto c3CzT; else goto c3CzR;
       c3CzT: // global
           Hp = Hp - 64;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3CzR: // global
           I64[Hp - 56] = lvl118_s3yzd_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_s3yzj_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl119_s3yzr_entry() //  [R1]
         { info_tbl: [(c3CA5,
                       label: lvl119_s3yzr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CA5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CA6; else goto c3CA7;
       c3CA6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CA7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Base.id_closure+1;
           Sp = Sp - 16;
           call body_r3yd5_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3CDU_srtd" {
     u3CDU_srtd:
         const S3yFW_srt+600;
         const 93;
         const 257;
         const 268435456;
 },
 sat_s3yAb_entry() //  [R1]
         { info_tbl: [(c3CAr,
                       label: sat_s3yAb_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CAr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3CAs; else goto c3CAt;
       c3CAs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CAt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3CAo_info;
           R4 = P64[R1 + 16];
           R3 = lexDecNumber_r3yda_closure+1;
           R2 = lexHexOct_r3y9B_closure+1;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3CAo() //  [R1]
         { info_tbl: [(c3CAo,
                       label: block_c3CAo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CAo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CAw; else goto c3CAv;
       c3CAw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3CAv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yA2_entry() //  [R1, R2]
         { info_tbl: [(c3CAY,
                       label: sat_s3yA2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CAY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3CB2; else goto c3CB1;
       c3CB2: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CB1: // global
           _s3yyI::P64 = P64[R1 + 7];
           _s3yzR::P64 = P64[R1 + 15];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = _s3yzR::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = Hp - 30;
           R2 = Hp - 4;
           R1 = _s3yyI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yA7_entry() //  [R1, R2]
         { info_tbl: [(c3CB3,
                       label: sat_s3yA7_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CB3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3CB4; else goto c3CB5;
       c3CB4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CB5: // global
           I64[Sp - 16] = block_c3CAC_info;
           _s3yyI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CBu; else goto c3CAD;
       u3CBu: // global
           call _c3CAC(R1) args: 0, res: 0, upd: 0;
       c3CAD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CAC() //  [R1]
         { info_tbl: [(c3CAC,
                       label: block_c3CAC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CAC: // global
           _s3yzS::I64 = I64[R1 + 7];
           (_s3yzX::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalpha(_s3yzS::I64);
           if (_s3yzX::I64 == 0) goto c3CBp; else goto u3CBq;
       c3CBp: // global
           if (_s3yzS::I64 == 95) goto u3CBr; else goto c3CBn;
       u3CBr: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           goto u3CBt;
       c3CBn: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3CBq: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           goto u3CBt;
       u3CBt: // global
           call _c3CAP() args: 0, res: 0, upd: 0;
     }
 },
 _c3CAP() //  []
         { info_tbl: [(c3CAP,
                       label: block_c3CAP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CAP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CBc; else goto c3CBb;
       c3CBc: // global
           HpAlloc = 24;
           I64[Sp] = block_c3CAP_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3CBb: // global
           I64[Hp - 16] = sat_s3yA2_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c3CB7_info;
           R3 = Hp - 15;
           R2 = isIdfChar_r3y8W_closure+1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3CB7() //  [R1]
         { info_tbl: [(c3CB7,
                       label: block_c3CB7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CB7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CBf; else goto c3CBe;
       c3CBf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CBe: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CDV_srtd" {
     u3CDV_srtd:
         const S3yFW_srt+600;
         const 94;
         const 257;
         const 805322752;
 },
 sat_s3yAc_entry() //  [R1]
         { info_tbl: [(c3CBw,
                       label: sat_s3yAc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CBw: // global
           _s3yAc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CBx; else goto c3CBy;
       c3CBy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CBA; else goto c3CBz;
       c3CBA: // global
           HpAlloc = 56;
           goto c3CBx;
       c3CBx: // global
           R1 = _s3yAc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CBz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAc::P64;
           _s3yyI::P64 = P64[_s3yAc::P64 + 16];
           I64[Hp - 48] = sat_s3yAb_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yA7_info;
           P64[Hp - 16] = _s3yyI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzL_entry() //  [R1, R2]
         { info_tbl: [(c3CBX,
                       label: sat_s3yzL_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CBX: // global
           _s3yzG::P64 = R2;
           _s3yzL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3CBY; else goto c3CBZ;
       c3CBZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CC1; else goto c3CC0;
       c3CC1: // global
           HpAlloc = 24;
           goto c3CBY;
       c3CBY: // global
           R2 = _s3yzG::P64;
           R1 = _s3yzL::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CC0: // global
           _s3yyI::P64 = P64[_s3yzL::P64 + 7];
           _s3yzE::P64 = P64[_s3yzL::P64 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yzE::P64;
           P64[Hp] = _s3yzG::P64;
           I64[Sp - 24] = block_c3CBR_info;
           R4 = reserved_ops29_r3y9q_closure+2;
           _c3CBQ::P64 = Hp - 14;
           R3 = _c3CBQ::P64;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           P64[Sp - 16] = _c3CBQ::P64;
           P64[Sp - 8] = _s3yyI::P64;
           Sp = Sp - 24;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3CBR() //  [R1]
         { info_tbl: [(c3CBR,
                       label: block_c3CBR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CBR: // global
           _c3CBQ::P64 = P64[Sp + 8];
           _s3yyI::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c3CBU; else goto c3CBV;
       c3CBU: // global
           Hp = Hp + 16;
           _s3yzI::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3CCd; else goto c3CC6;
       c3CC6: // global
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = _c3CBQ::P64;
           R2 = Hp - 3;
           R1 = _s3yyI::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3CBV: // global
           Hp = Hp + 16;
           _s3yzI::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3CCd; else goto c3CCc;
       c3CCd: // global
           HpAlloc = 16;
           R1 = _s3yzI::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CCc: // global
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = _c3CBQ::P64;
           R2 = Hp - 5;
           R1 = _s3yyI::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CDW_srtd" {
     u3CDW_srtd:
         const S3yFW_srt+128;
         const 154;
         const 1;
         const 0;
         const 33554432;
 },
 sat_s3yzO_entry() //  [R1, R2]
         { info_tbl: [(c3CCi,
                       label: sat_s3yzO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CCi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3CCj; else goto c3CCk;
       c3CCj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CCk: // global
           I64[Sp - 24] = block_c3CBG_info;
           _s3yzE::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s3yzE::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.isSymbolChar_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3CDX_srtd" {
     u3CDX_srtd:
         const S3yFW_srt+128;
         const 154;
         const 1;
         const 0;
         const 33554432;
 },
 _c3CBG() //  [R1]
         { info_tbl: [(c3CBG,
                       label: block_c3CBG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CBG: // global
           if (R1 & 7 == 1) goto c3CCf; else goto c3CCg;
       c3CCf: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CCg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CCs; else goto c3CCr;
       c3CCs: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CCr: // global
           I64[Hp - 16] = sat_s3yzL_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3CCn_info;
           R3 = Hp - 15;
           R2 = Text.Read.Lex.isSymbolChar_closure+1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3CCn() //  [R1]
         { info_tbl: [(c3CCn,
                       label: block_c3CCn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CCn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CCv; else goto c3CCu;
       c3CCv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CCu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CDY_srtd" {
     u3CDY_srtd:
         const S3yFW_srt+128;
         const 154;
         const 576460752303423489;
         const 8;
         const 58720768;
 },
 sat_s3yAd_entry() //  [R1]
         { info_tbl: [(c3CCx,
                       label: sat_s3yAd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CCx: // global
           _s3yAd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CCy; else goto c3CCz;
       c3CCz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CCB; else goto c3CCA;
       c3CCB: // global
           HpAlloc = 56;
           goto c3CCy;
       c3CCy: // global
           R1 = _s3yAd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CCA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAd::P64;
           _s3yyI::P64 = P64[_s3yAd::P64 + 16];
           I64[Hp - 48] = sat_s3yAc_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yzO_info;
           P64[Hp - 16] = _s3yyI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzC_entry() //  [R1, R2]
         { info_tbl: [(c3CCN,
                       label: sat_s3yzC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CCN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3CCO; else goto c3CCP;
       c3CCO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CCP: // global
           I64[Sp - 24] = block_c3CCH_info;
           R4 = Text.Read.Lex.isSymbolChar3_closure;
           R3 = R2;
           _s3yzy::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s3yzy::P64;
           Sp = Sp - 24;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3CCH() //  [R1]
         { info_tbl: [(c3CCH,
                       label: block_c3CCH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CCH: // global
           if (R1 & 7 == 1) goto c3CCK; else goto c3CCL;
       c3CCK: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CCL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3CCZ; else goto c3CCY;
       c3CCZ: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CCY: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = Hp - 30;
           R2 = Hp - 5;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CDZ_srtd" {
     u3CDZ_srtd:
         const S3yFW_srt+128;
         const 155;
         const 576460752303423489;
         const 8;
         const 125829632;
 },
 sat_s3yAe_entry() //  [R1]
         { info_tbl: [(c3CD1,
                       label: sat_s3yAe_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CD1: // global
           _s3yAe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CD2; else goto c3CD3;
       c3CD3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CD5; else goto c3CD4;
       c3CD5: // global
           HpAlloc = 56;
           goto c3CD2;
       c3CD2: // global
           R1 = _s3yAe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CD4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAe::P64;
           _s3yyI::P64 = P64[_s3yAe::P64 + 16];
           I64[Hp - 48] = sat_s3yAd_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yzC_info;
           P64[Hp - 16] = _s3yyI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzw_entry() //  [R1, R2]
         { info_tbl: [(c3CDe,
                       label: sat_s3yzw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CDe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CDf; else goto c3CDg;
       c3CDf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CDg: // global
           I64[Sp - 16] = block_c3CDb_info;
           _s3yzr::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yzr::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CDo; else goto c3CDc;
       u3CDo: // global
           call _c3CDb(R1) args: 0, res: 0, upd: 0;
       c3CDc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CDb() //  [R1]
         { info_tbl: [(c3CDb,
                       label: block_c3CDb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CDb: // global
           if (I64[R1 + 7] == 34) goto c3CDn; else goto c3CDm;
       c3CDn: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3CDm: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CE0_srtd" {
     u3CE0_srtd:
         const S3yFW_srt+128;
         const 155;
         const 576460752303423489;
         const 8;
         const 126091776;
 },
 sat_s3yAf_entry() //  [R1]
         { info_tbl: [(c3CDq,
                       label: sat_s3yAf_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CDq: // global
           _s3yAf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CDr; else goto c3CDs;
       c3CDs: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3CDu; else goto c3CDt;
       c3CDu: // global
           HpAlloc = 80;
           goto c3CDr;
       c3CDr: // global
           R1 = _s3yAf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CDt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAf::P64;
           _s3yyI::P64 = P64[_s3yAf::P64 + 16];
           I64[Hp - 72] = lvl119_s3yzr_info;
           P64[Hp - 56] = _s3yyI::P64;
           I64[Hp - 48] = sat_s3yAe_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yzw_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzp_entry() //  [R1, R2]
         { info_tbl: [(c3CDD,
                       label: sat_s3yzp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CDD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CDE; else goto c3CDF;
       c3CDE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CDF: // global
           I64[Sp - 16] = block_c3CDA_info;
           _s3yzk::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yzk::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CDN; else goto c3CDB;
       u3CDN: // global
           call _c3CDA(R1) args: 0, res: 0, upd: 0;
       c3CDB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CDA() //  [R1]
         { info_tbl: [(c3CDA,
                       label: block_c3CDA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CDA: // global
           if (I64[R1 + 7] == 39) goto c3CDM; else goto c3CDL;
       c3CDM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CDL: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3CE1_srtd" {
     u3CE1_srtd:
         const S3yFW_srt+128;
         const 156;
         const 576460752303423489;
         const 8;
         const 260310528;
 },
 Text.Read.Lex.expect2_entry() //  [R2]
         { info_tbl: [(c3CDP,
                       label: Text.Read.Lex.expect2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CDP: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3CDT; else goto c3CDS;
       c3CDT: // global
           HpAlloc = 152;
           R2 = R2;
           R1 = Text.Read.Lex.expect2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CDS: // global
           I64[Hp - 144] = $wk_s3yyJ_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = k1_s3yz2_info;
           P64[Hp - 120] = Hp - 142;
           I64[Hp - 112] = lvl116_s3yz7_info;
           P64[Hp - 96] = Hp - 127;
           I64[Hp - 88] = lvl117_s3yz8_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = Hp - 112;
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 56] = Hp - 87;
           I64[Hp - 48] = sat_s3yAf_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3yzp_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.57794371 UTC

[section ""data" . Text.Read.Lex.$wlex_closure" {
     Text.Read.Lex.$wlex_closure:
         const Text.Read.Lex.$wlex_info;
         const 0;
 },
 lvl117_s3yAi_entry() //  [R1]
         { info_tbl: [(c3CEe,
                       label: lvl117_s3yAi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CEe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CEf; else goto c3CEg;
       c3CEf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CEg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yAp_entry() //  [R1]
         { info_tbl: [(c3CEl,
                       label: sat_s3yAp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CEl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CEm; else goto c3CEn;
       c3CEm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CEn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yAn_entry() //  [R1, R2]
         { info_tbl: [(c3CEA,
                       label: sat_s3yAn_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CEA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CEB; else goto c3CEC;
       c3CEB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CEC: // global
           I64[Sp - 16] = block_c3CEt_info;
           _s3yAi::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yAi::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CEJ; else goto c3CEu;
       u3CEJ: // global
           call _c3CEt(R1) args: 0, res: 0, upd: 0;
       c3CEu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CEt() //  [R1]
         { info_tbl: [(c3CEt,
                       label: block_c3CEt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CEt: // global
           if (R1 & 7 == 1) goto c3CEx; else goto c3CEy;
       c3CEx: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3CEy: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yAh_entry() //  [R1]
         { info_tbl: [(c3CEL,
                       label: lvl116_s3yAh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CEL: // global
           _s3yAh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CEM; else goto c3CEN;
       c3CEN: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3CEP; else goto c3CEO;
       c3CEP: // global
           HpAlloc = 80;
           goto c3CEM;
       c3CEM: // global
           R1 = _s3yAh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CEO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAh::P64;
           _s3yAg::P64 = P64[_s3yAh::P64 + 16];
           I64[Hp - 72] = lvl117_s3yAi_info;
           P64[Hp - 56] = _s3yAg::P64;
           I64[Hp - 48] = sat_s3yAp_info;
           P64[Hp - 32] = _s3yAg::P64;
           I64[Hp - 24] = sat_s3yAn_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 k_s3yAq_entry() //  [R1]
         { info_tbl: [(c3CEV,
                       label: k_s3yAq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CEV: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yAt_entry() //  [R1, R2]
         { info_tbl: [(c3CF3,
                       label: sat_s3yAt_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CF3: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wlex_entry() //  [R2]
         { info_tbl: [(c3CF6,
                       label: Text.Read.Lex.$wlex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CF6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CFa; else goto c3CF9;
       c3CFa: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.Read.Lex.$wlex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CF9: // global
           I64[Hp - 48] = lvl116_s3yAh_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3yAq_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3yAt_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.580732379 UTC

[section ""data" . Text.Read.Lex.lex1_closure" {
     Text.Read.Lex.lex1_closure:
         const Text.Read.Lex.lex1_info;
         const 0;
 },
 Text.Read.Lex.lex1_entry() //  [R2]
         { info_tbl: [(c3CFi,
                       label: Text.Read.Lex.lex1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CFi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3CFj; else goto c3CFk;
       c3CFj: // global
           R2 = R2;
           R1 = Text.Read.Lex.lex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CFk: // global
           I64[Sp - 8] = block_c3CFf_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wlex_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3CFf() //  [R1]
         { info_tbl: [(c3CFf,
                       label: block_c3CFf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CFf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CFn; else goto c3CFm;
       c3CFn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CFm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.581956703 UTC

[section ""data" . Text.Read.Lex.lex_closure" {
     Text.Read.Lex.lex_closure:
         const Text.Read.Lex.lex_info;
         const 0;
 },
 Text.Read.Lex.lex_entry() //  [R2]
         { info_tbl: [(c3CFs,
                       label: Text.Read.Lex.lex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CFs: // global
           R2 = R2;
           call Text.Read.Lex.lex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.584336126 UTC

[section ""data" . Text.Read.Lex.$wexpect_closure" {
     Text.Read.Lex.$wexpect_closure:
         const Text.Read.Lex.$wexpect_info;
         const 0;
 },
 lvl117_s3yAA_entry() //  [R1]
         { info_tbl: [(c3CFH,
                       label: lvl117_s3yAA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CFH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CFI; else goto c3CFJ;
       c3CFI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CFJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3yAB_entry() //  [R1]
         { info_tbl: [(c3CFV,
                       label: lvl118_s3yAB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CFV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3CFW; else goto c3CFX;
       c3CFW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CFX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3CFO_info;
           _s3yAA::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yAA::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3CG4; else goto c3CFP;
       u3CG4: // global
           call _c3CFO(R1) args: 0, res: 0, upd: 0;
       c3CFP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3CFO() //  [R1]
         { info_tbl: [(c3CFO,
                       label: block_c3CFO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CFO: // global
           if (R1 & 7 == 7) goto c3CFT; else goto c3CFS;
       c3CFT: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3CFS: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yAL_entry() //  [R1, R2]
         { info_tbl: [(c3CGk,
                       label: sat_s3yAL_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CGk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CGl; else goto c3CGm;
       c3CGl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CGm: // global
           I64[Sp - 16] = block_c3CGe_info;
           R3 = P64[R1 + 7];
           R2 = R2;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 16;
           call Text.Read.Lex.$fEqLexeme_$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3CGe() //  [R1]
         { info_tbl: [(c3CGe,
                       label: block_c3CGe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CGe: // global
           if (R1 & 7 == 1) goto c3CGh; else goto c3CGi;
       c3CGh: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CGi: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yAM_entry() //  [R1]
         { info_tbl: [(c3CGt,
                       label: sat_s3yAM_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CGt: // global
           _s3yAM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CGu; else goto c3CGv;
       c3CGv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CGx; else goto c3CGw;
       c3CGx: // global
           HpAlloc = 24;
           goto c3CGu;
       c3CGu: // global
           R1 = _s3yAM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CGw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAM::P64;
           _s3yAx::P64 = P64[_s3yAM::P64 + 16];
           _s3yAA::P64 = P64[_s3yAM::P64 + 24];
           I64[Hp - 16] = sat_s3yAL_info;
           P64[Hp - 8] = _s3yAx::P64;
           P64[Hp] = _s3yAA::P64;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yAH_entry() //  [R1, R2]
         { info_tbl: [(c3CGK,
                       label: sat_s3yAH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CGK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CGL; else goto c3CGM;
       c3CGL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CGM: // global
           I64[Sp - 16] = block_c3CGD_info;
           _s3yAB::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yAB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CGT; else goto c3CGE;
       u3CGT: // global
           call _c3CGD(R1) args: 0, res: 0, upd: 0;
       c3CGE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CGD() //  [R1]
         { info_tbl: [(c3CGD,
                       label: block_c3CGD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CGD: // global
           if (R1 & 7 == 1) goto c3CGH; else goto c3CGI;
       c3CGH: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3CGI: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yAz_entry() //  [R1]
         { info_tbl: [(c3CGV,
                       label: lvl116_s3yAz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CGV: // global
           _s3yAz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CGW; else goto c3CGX;
       c3CGX: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3CGZ; else goto c3CGY;
       c3CGZ: // global
           HpAlloc = 120;
           goto c3CGW;
       c3CGW: // global
           R1 = _s3yAz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CGY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAz::P64;
           _s3yAx::P64 = P64[_s3yAz::P64 + 16];
           _s3yAy::P64 = P64[_s3yAz::P64 + 24];
           I64[Hp - 112] = lvl117_s3yAA_info;
           P64[Hp - 96] = _s3yAy::P64;
           I64[Hp - 88] = lvl118_s3yAB_info;
           P64[Hp - 72] = _s3yAx::P64;
           _c3CFD::P64 = Hp - 112;
           P64[Hp - 64] = _c3CFD::P64;
           I64[Hp - 56] = sat_s3yAM_info;
           P64[Hp - 40] = _s3yAx::P64;
           P64[Hp - 32] = _c3CFD::P64;
           I64[Hp - 24] = sat_s3yAH_info;
           P64[Hp - 16] = Hp - 88;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 56;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 k_s3yAN_entry() //  [R1]
         { info_tbl: [(c3CH5,
                       label: k_s3yAN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CH5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yAQ_entry() //  [R1, R2]
         { info_tbl: [(c3CHd,
                       label: sat_s3yAQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CHd: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wexpect_entry() //  [R2, R3]
         { info_tbl: [(c3CHg,
                       label: Text.Read.Lex.$wexpect_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CHg: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3CHk; else goto c3CHj;
       c3CHk: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wexpect_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3CHj: // global
           I64[Hp - 56] = lvl116_s3yAz_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = k_s3yAN_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = sat_s3yAQ_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.589312944 UTC

[section ""data" . Text.Read.Lex.expect1_closure" {
     Text.Read.Lex.expect1_closure:
         const Text.Read.Lex.expect1_info;
         const 0;
 },
 Text.Read.Lex.expect1_entry() //  [R2, R3]
         { info_tbl: [(c3CHs,
                       label: Text.Read.Lex.expect1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CHs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3CHt; else goto c3CHu;
       c3CHt: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.expect1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3CHu: // global
           I64[Sp - 8] = block_c3CHp_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3CHp() //  [R1]
         { info_tbl: [(c3CHp,
                       label: block_c3CHp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CHp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CHx; else goto c3CHw;
       c3CHx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CHw: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.590514377 UTC

[section ""data" . Text.Read.Lex.expect_closure" {
     Text.Read.Lex.expect_closure:
         const Text.Read.Lex.expect_info;
         const 0;
 },
 Text.Read.Lex.expect_entry() //  [R2, R3]
         { info_tbl: [(c3CHC,
                       label: Text.Read.Lex.expect_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CHC: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.expect1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.592556296 UTC

[section ""data" . Text.Read.Lex.$whsLex_closure" {
     Text.Read.Lex.$whsLex_closure:
         const Text.Read.Lex.$whsLex_info;
         const 0;
 },
 lvl117_s3yAX_entry() //  [R1, R2]
         { info_tbl: [(c3CHS,
                       label: lvl117_s3yAX_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CHS: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yB7_entry() //  [R1]
         { info_tbl: [(c3CI5,
                       label: sat_s3yB7_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CI5: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yB8_entry() //  [R1]
         { info_tbl: [(c3CI8,
                       label: sat_s3yB8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CI8: // global
           _s3yB8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CI9; else goto c3CIa;
       c3CIa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CIc; else goto c3CIb;
       c3CIc: // global
           HpAlloc = 16;
           goto c3CI9;
       c3CI9: // global
           R1 = _s3yB8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CIb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yB8::P64;
           _s3yAZ::P64 = P64[_s3yB8::P64 + 16];
           I64[Hp - 8] = sat_s3yB7_info;
           P64[Hp] = _s3yAZ::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yB4_entry() //  [R1, R2]
         { info_tbl: [(c3CIp,
                       label: sat_s3yB4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CIp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CIq; else goto c3CIr;
       c3CIq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CIr: // global
           I64[Sp - 16] = block_c3CIi_info;
           _s3yAZ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yAZ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CIy; else goto c3CIj;
       u3CIy: // global
           call _c3CIi(R1) args: 0, res: 0, upd: 0;
       c3CIj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CIi() //  [R1]
         { info_tbl: [(c3CIi,
                       label: block_c3CIi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CIi: // global
           if (R1 & 7 == 1) goto c3CIm; else goto c3CIn;
       c3CIm: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CIn: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yAW_entry() //  [R1]
         { info_tbl: [(c3CIC,
                       label: lvl116_s3yAW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CIC: // global
           _s3yAW::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3CID; else goto c3CIE;
       c3CIE: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3CIG; else goto c3CIF;
       c3CIG: // global
           HpAlloc = 96;
           goto c3CID;
       c3CID: // global
           R1 = _s3yAW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CIF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAW::P64;
           _s3yAV::P64 = P64[_s3yAW::P64 + 16];
           I64[Hp - 88] = lvl117_s3yAX_info;
           P64[Hp - 80] = _s3yAV::P64;
           I64[Hp - 72] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 64] = Hp - 87;
           P64[Hp - 56] = Text.ParserCombinators.ReadP.Fail_closure+3;
           I64[Hp - 48] = sat_s3yB8_info;
           _c3CHV::P64 = Hp - 68;
           P64[Hp - 32] = _c3CHV::P64;
           I64[Hp - 24] = sat_s3yB4_info;
           P64[Hp - 16] = _c3CHV::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 24] = block_c3CIA_info;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3CIA() //  [R1]
         { info_tbl: [(c3CIA,
                       label: block_c3CIA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CIA: // global
           R3 = R1;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 k_s3yBa_entry() //  [R1]
         { info_tbl: [(c3CIP,
                       label: k_s3yBa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CIP: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yBd_entry() //  [R1, R2]
         { info_tbl: [(c3CIX,
                       label: sat_s3yBd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CIX: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$whsLex_entry() //  [R2]
         { info_tbl: [(c3CJ0,
                       label: Text.Read.Lex.$whsLex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CJ0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CJ4; else goto c3CJ3;
       c3CJ4: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.Read.Lex.$whsLex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CJ3: // global
           I64[Hp - 48] = lvl116_s3yAW_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3yBa_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3yBd_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.595807688 UTC

[section ""data" . Text.Read.Lex.hsLex1_closure" {
     Text.Read.Lex.hsLex1_closure:
         const Text.Read.Lex.hsLex1_info;
         const 0;
 },
 Text.Read.Lex.hsLex1_entry() //  [R2]
         { info_tbl: [(c3CJc,
                       label: Text.Read.Lex.hsLex1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CJc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3CJd; else goto c3CJe;
       c3CJd: // global
           R2 = R2;
           R1 = Text.Read.Lex.hsLex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CJe: // global
           I64[Sp - 8] = block_c3CJ9_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$whsLex_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3CJ9() //  [R1]
         { info_tbl: [(c3CJ9,
                       label: block_c3CJ9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CJ9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CJh; else goto c3CJg;
       c3CJh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CJg: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.596991597 UTC

[section ""data" . Text.Read.Lex.hsLex_closure" {
     Text.Read.Lex.hsLex_closure:
         const Text.Read.Lex.hsLex_info;
         const 0;
 },
 Text.Read.Lex.hsLex_entry() //  [R2]
         { info_tbl: [(c3CJm,
                       label: Text.Read.Lex.hsLex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CJm: // global
           R2 = R2;
           call Text.Read.Lex.hsLex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.597963296 UTC

[section ""data" . Text.Read.Lex.MkNumber_closure" {
     Text.Read.Lex.MkNumber_closure:
         const Text.Read.Lex.MkNumber_info;
 },
 Text.Read.Lex.MkNumber_entry() //  [R2, R3]
         { info_tbl: [(c3CJu,
                       label: Text.Read.Lex.MkNumber_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CJu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CJy; else goto c3CJx;
       c3CJy: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.MkNumber_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3CJx: // global
           I64[Hp - 16] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.59900713 UTC

[section ""data" . Text.Read.Lex.MkDecimal_closure" {
     Text.Read.Lex.MkDecimal_closure:
         const Text.Read.Lex.MkDecimal_info;
 },
 Text.Read.Lex.MkDecimal_entry() //  [R2, R3, R4]
         { info_tbl: [(c3CJE,
                       label: Text.Read.Lex.MkDecimal_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CJE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CJI; else goto c3CJH;
       c3CJI: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.MkDecimal_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3CJH: // global
           I64[Hp - 24] = Text.Read.Lex.MkDecimal_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.600120639 UTC

[section ""data" . Text.Read.Lex.Char_closure" {
     Text.Read.Lex.Char_closure:
         const Text.Read.Lex.Char_info;
 },
 Text.Read.Lex.Char_entry() //  [R2]
         { info_tbl: [(c3CJO,
                       label: Text.Read.Lex.Char_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CJO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CJS; else goto c3CJR;
       c3CJS: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Char_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CJR: // global
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.601121517 UTC

[section ""data" . Text.Read.Lex.String_closure" {
     Text.Read.Lex.String_closure:
         const Text.Read.Lex.String_info;
 },
 Text.Read.Lex.String_entry() //  [R2]
         { info_tbl: [(c3CJY,
                       label: Text.Read.Lex.String_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CJY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CK2; else goto c3CK1;
       c3CK2: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.String_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CK1: // global
           I64[Hp - 8] = Text.Read.Lex.String_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.602957718 UTC

[section ""data" . Text.Read.Lex.Punc_closure" {
     Text.Read.Lex.Punc_closure:
         const Text.Read.Lex.Punc_info;
 },
 Text.Read.Lex.Punc_entry() //  [R2]
         { info_tbl: [(c3CK8,
                       label: Text.Read.Lex.Punc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CK8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CKc; else goto c3CKb;
       c3CKc: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Punc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CKb: // global
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.60393709 UTC

[section ""data" . Text.Read.Lex.Ident_closure" {
     Text.Read.Lex.Ident_closure:
         const Text.Read.Lex.Ident_info;
 },
 Text.Read.Lex.Ident_entry() //  [R2]
         { info_tbl: [(c3CKi,
                       label: Text.Read.Lex.Ident_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CKi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CKm; else goto c3CKl;
       c3CKm: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Ident_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CKl: // global
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = R2;
           R1 = Hp - 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.604907581 UTC

[section ""data" . Text.Read.Lex.Symbol_closure" {
     Text.Read.Lex.Symbol_closure:
         const Text.Read.Lex.Symbol_info;
 },
 Text.Read.Lex.Symbol_entry() //  [R2]
         { info_tbl: [(c3CKs,
                       label: Text.Read.Lex.Symbol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CKs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CKw; else goto c3CKv;
       c3CKw: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Symbol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CKv: // global
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.605969521 UTC

[section ""data" . Text.Read.Lex.Number_closure" {
     Text.Read.Lex.Number_closure:
         const Text.Read.Lex.Number_info;
 },
 Text.Read.Lex.Number_entry() //  [R2]
         { info_tbl: [(c3CKC,
                       label: Text.Read.Lex.Number_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CKC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3CKG; else goto c3CKF;
       c3CKG: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Number_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CKF: // global
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = R2;
           R1 = Hp - 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.606812494 UTC

[section ""data" . Text.Read.Lex.EOF_closure" {
     Text.Read.Lex.EOF_closure:
         const Text.Read.Lex.EOF_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.607460395 UTC

[Text.Read.Lex.MkNumber_con_entry() //  [R1]
         { info_tbl: [(c3CKH,
                       label: Text.Read.Lex.MkNumber_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,77,107,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CKH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.608242953 UTC

[Text.Read.Lex.MkDecimal_con_entry() //  [R1]
         { info_tbl: [(c3CKJ,
                       label: Text.Read.Lex.MkDecimal_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,77,107,68,101,99,105,109,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CKJ: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.608974511 UTC

[Text.Read.Lex.Char_con_entry() //  [R1]
         { info_tbl: [(c3CKL,
                       label: Text.Read.Lex.Char_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,67,104,97,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CKL: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.609770341 UTC

[Text.Read.Lex.String_con_entry() //  [R1]
         { info_tbl: [(c3CKN,
                       label: Text.Read.Lex.String_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,83,116,114,105,110,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CKN: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.610481787 UTC

[Text.Read.Lex.Punc_con_entry() //  [R1]
         { info_tbl: [(c3CKP,
                       label: Text.Read.Lex.Punc_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,80,117,110,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CKP: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.611279751 UTC

[Text.Read.Lex.Ident_con_entry() //  [R1]
         { info_tbl: [(c3CKR,
                       label: Text.Read.Lex.Ident_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,73,100,101,110,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CKR: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.612094842 UTC

[Text.Read.Lex.Symbol_con_entry() //  [R1]
         { info_tbl: [(c3CKT,
                       label: Text.Read.Lex.Symbol_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CKT: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.61350943 UTC

[Text.Read.Lex.Number_con_entry() //  [R1]
         { info_tbl: [(c3CKV,
                       label: Text.Read.Lex.Number_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 5
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CKV: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.614218665 UTC

[Text.Read.Lex.EOF_con_entry() //  [R1]
         { info_tbl: [(c3CKX,
                       label: Text.Read.Lex.EOF_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 6
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,69,79,70]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CKX: // global
           R1 = R1 + 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.614887281 UTC

[section ""relreadonly" . S3yFW_srt" {
     S3yFW_srt:
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.Show.$fShowInteger_closure;
         const Text.Read.Lex.$fShowLexeme8_closure;
         const Text.Read.Lex.$w$cshowsPrec_closure;
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_closure;
         const Text.Read.Lex.$fShowNumber_$cshow_closure;
         const Text.Read.Lex.$fShowNumber1_closure;
         const Text.Read.Lex.$fShowLexeme4_closure;
         const GHC.Show.$w$cshowsPrec3_closure;
         const GHC.Show.showLitString_closure;
         const Text.Read.Lex.$fShowLexeme6_closure;
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure;
         const Text.Read.Lex.$fShowLexeme3_closure;
         const Text.Read.Lex.$fShowLexeme_$cshow_closure;
         const Text.Read.Lex.$fShowLexeme1_closure;
         const GHC.Unicode.$wgeneralCategory_closure;
         const Text.Read.Lex.isSymbolChar_closure;
         const Text.Read.Lex.isSymbolChar1_closure;
         const Text.Read.Lex.isSymbolChar3_closure;
         const lvl1_r3y8U_closure;
         const $wisIdfChar_r3y8V_closure;
         const isIdfChar_r3y8W_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const combine_r3y9t_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const lvl3_r3y9s_closure;
         const Text.Read.Lex.numberToFixed_go_closure;
         const Text.Read.Lex.numberToFixed2_closure;
         const Text.Read.Lex.valInteger_closure;
         const Text.Read.Lex.$w$sreadIntP_closure;
         const Text.Read.Lex.readIntP1_closure;
         const Text.Read.Lex.$wreadIntP_closure;
         const Text.Read.Lex.readIntP2_closure;
         const sat_s3yjm_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.numberToInteger_closure;
         const sat_s3yjF_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.^_$s^_closure;
         const lvl4_r3y9u_closure;
         const $wfracExp_r3y9v_closure;
         const Text.Read.Lex.numberToFixed_integerTake_closure;
         const Text.Read.Lex.numberToFixed_closure;
         const Text.Read.Lex.$wnumberToRational_closure;
         const Text.Read.Lex.numberToRational_closure;
         const sat_s3yll_closure;
         const sat_s3ylr_closure;
         const Text.Read.Lex.$wnumberToRangedRational_closure;
         const Text.Read.Lex.numberToRangedRational2_closure;
         const Text.Read.Lex.numberToRangedRational4_closure;
         const Text.Read.Lex.numberToRangedRational5_closure;
         const Text.Read.Lex.numberToRangedRational_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const sat_s3ymo_closure;
         const sat_s3ymq_closure;
         const Text.Read.Lex.$w$svalDig_closure;
         const Text.Read.Lex.readDecP2_closure;
         const Text.Read.Lex.readDecP3_closure;
         const Text.Read.Lex.readDecP4_closure;
         const Text.Read.Lex.$wvalDig_closure;
         const Text.Read.Lex.$w$sreadIntP'_closure;
         const Text.Read.Lex.$wreadIntP'_closure;
         const Text.Read.Lex.readDecP6_closure;
         const Text.Read.Lex.readOctP1_closure;
         const Text.Read.Lex.readOctP2_closure;
         const Text.Read.Lex.readDecP1_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.readDecP5_closure;
         const Text.Read.Lex.readHexP1_closure;
         const Text.Read.Lex.readHexP2_closure;
         const $wlexDigits_r3y9x_closure;
         const $wlexHexOct_r3y9A_closure;
         const lexHexOct_r3y9B_closure;
         const $wlexFrac_r3y9D_closure;
         const lexFrac_r3y9E_closure;
         const sat_s3yqt_closure;
         const m4_r3y9J_closure;
         const w1_r3ybW_closure;
         const m2_r3y9G_closure;
         const w_r3ybX_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const lvl46_r3ybY_closure;
         const m6_r3y9M_closure;
         const lvl47_r3ybZ_closure;
         const m8_r3y9P_closure;
         const lvl48_r3yc0_closure;
         const m10_r3y9S_closure;
         const lvl49_r3yc1_closure;
         const m12_r3y9V_closure;
         const lvl50_r3yc2_closure;
         const m14_r3y9Y_closure;
         const lvl51_r3yc3_closure;
         const m16_r3ya1_closure;
         const lvl52_r3yc4_closure;
         const m18_r3ya4_closure;
         const lvl53_r3yc5_closure;
         const m20_r3ya7_closure;
         const lvl54_r3yc6_closure;
         const m22_r3yaa_closure;
         const lvl55_r3yc7_closure;
         const m24_r3yad_closure;
         const lvl56_r3yc8_closure;
         const m26_r3yag_closure;
         const lvl57_r3yc9_closure;
         const m28_r3yaj_closure;
         const lvl58_r3yca_closure;
         const m30_r3yam_closure;
         const lvl59_r3ycb_closure;
         const m32_r3yap_closure;
         const lvl60_r3ycc_closure;
         const m34_r3yas_closure;
         const lvl61_r3ycd_closure;
         const m36_r3yav_closure;
         const lvl62_r3yce_closure;
         const m38_r3yay_closure;
         const lvl63_r3ycf_closure;
         const m40_r3yaB_closure;
         const lvl64_r3ycg_closure;
         const m42_r3yaE_closure;
         const lvl65_r3ych_closure;
         const m44_r3yaH_closure;
         const lvl66_r3yci_closure;
         const m46_r3yaK_closure;
         const lvl67_r3ycj_closure;
         const m48_r3yaN_closure;
         const lvl68_r3yck_closure;
         const m50_r3yaQ_closure;
         const lvl69_r3ycl_closure;
         const m52_r3yaT_closure;
         const lvl70_r3ycm_closure;
         const m54_r3yaW_closure;
         const lvl71_r3ycn_closure;
         const m56_r3yaZ_closure;
         const lvl72_r3yco_closure;
         const m58_r3yb2_closure;
         const lvl73_r3ycp_closure;
         const m60_r3yb5_closure;
         const lvl74_r3ycq_closure;
         const m62_r3yb8_closure;
         const lvl75_r3ycr_closure;
         const m64_r3ybb_closure;
         const lvl76_r3ycs_closure;
         const m66_r3ybe_closure;
         const lvl77_r3yct_closure;
         const m68_r3ybh_closure;
         const lvl78_r3ycu_closure;
         const GHC.Char.$wlvl_closure;
         const lvl7_r3ybj_closure;
         const Text.ParserCombinators.ReadP.choice_closure;
         const lvl111_r3yd1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Text.Read.Lex.lexChar2_closure;
         const Text.Read.Lex.$wconsumeEmpties_closure;
         const Text.Read.Lex.$wlvl_closure;
         const Text.Read.Lex.lexChar3_closure;
         const Text.Read.Lex.lexChar5_closure;
         const Text.Read.Lex.$wlexChar_closure;
         const Text.Read.Lex.lexChar1_closure;
         const lexStrItem_r3yd4_closure;
         const body_r3yd5_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.valInteger_closure;
         const lexExp_r3yd6_closure;
         const $wlexDecNumber_r3yd9_closure;
         const lexDecNumber_r3yda_closure;
         const isIdfChar_r3y8W_closure;
         const reserved_ops29_r3y9q_closure;
         const Text.Read.Lex.isSymbolChar3_closure;
         const Text.Read.Lex.expect2_closure;
         const Text.Read.Lex.$wlex_closure;
         const Text.Read.Lex.lex1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Text.Read.Lex.expect1_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const Text.Read.Lex.$whsLex_closure;
         const Text.Read.Lex.hsLex1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.616865708 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:58:11.618051678 UTC

[section ""cstring" . Text.Read.Lex.$trModule4_bytes" {
     Text.Read.Lex.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.620012136 UTC

[section ""data" . Text.Read.Lex.$trModule3_closure" {
     Text.Read.Lex.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.621892565 UTC

[section ""cstring" . Text.Read.Lex.$trModule2_bytes" {
     Text.Read.Lex.$trModule2_bytes:
         I8[] [84,101,120,116,46,82,101,97,100,46,76,101,120]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.624176575 UTC

[section ""data" . Text.Read.Lex.$trModule1_closure" {
     Text.Read.Lex.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.625924831 UTC

[section ""data" . Text.Read.Lex.$trModule_closure" {
     Text.Read.Lex.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.Read.Lex.$trModule3_closure+1;
         const Text.Read.Lex.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.627690995 UTC

[section ""data" . $krep_r3y8E_closure" {
     $krep_r3y8E_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.629580512 UTC

[section ""data" . $krep1_r3y8F_closure" {
     $krep1_r3y8F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.631420131 UTC

[section ""data" . $krep2_r3y8G_closure" {
     $krep2_r3y8G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.634144943 UTC

[section ""data" . $krep3_r3y8H_closure" {
     $krep3_r3y8H_closure:
         const :_con_info;
         const $krep_r3y8E_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.635877134 UTC

[section ""data" . $krep4_r3y8I_closure" {
     $krep4_r3y8I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_r3y8H_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.637700046 UTC

[section ""data" . $krep5_r3y8J_closure" {
     $krep5_r3y8J_closure:
         const :_con_info;
         const $krep1_r3y8F_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.639492425 UTC

[section ""data" . $krep6_r3y8K_closure" {
     $krep6_r3y8K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep5_r3y8J_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.641350302 UTC

[section ""data" . $krep7_r3y8L_closure" {
     $krep7_r3y8L_closure:
         const :_con_info;
         const $krep6_r3y8K_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.643544647 UTC

[section ""data" . $krep8_r3y8M_closure" {
     $krep8_r3y8M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep7_r3y8L_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.645349636 UTC

[section ""data" . $krep9_r3y8N_closure" {
     $krep9_r3y8N_closure:
         const :_con_info;
         const $krep2_r3y8G_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.647119951 UTC

[section ""data" . $krep10_r3y8O_closure" {
     $krep10_r3y8O_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep9_r3y8N_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.648915694 UTC

[section ""cstring" . Text.Read.Lex.$tcNumber2_bytes" {
     Text.Read.Lex.$tcNumber2_bytes:
         I8[] [78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.650922443 UTC

[section ""data" . Text.Read.Lex.$tcNumber1_closure" {
     Text.Read.Lex.$tcNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tcNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.653104426 UTC

[section ""data" . Text.Read.Lex.$tcNumber_closure" {
     Text.Read.Lex.$tcNumber_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tcNumber1_closure+1;
         const GHC.Types.krep$*_closure;
         const 309030926258572567;
         const 15861928963352354800;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.655050408 UTC

[section ""data" . $krep11_r3y8P_closure" {
     $krep11_r3y8P_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Read.Lex.$tcNumber_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.656785691 UTC

[section ""data" . $krep12_r3y8Q_closure" {
     $krep12_r3y8Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3y8I_closure+1;
         const $krep11_r3y8P_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.658677002 UTC

[section ""data" . $krep13_r3y8R_closure" {
     $krep13_r3y8R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r3y8M_closure+1;
         const $krep12_r3y8Q_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.660395779 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal1_closure" {
     Text.Read.Lex.$tc'MkDecimal1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r3y8K_closure+1;
         const $krep13_r3y8R_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.662646146 UTC

[section ""cstring" . Text.Read.Lex.$tc'MkDecimal3_bytes" {
     Text.Read.Lex.$tc'MkDecimal3_bytes:
         I8[] [39,77,107,68,101,99,105,109,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.664342955 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal2_closure" {
     Text.Read.Lex.$tc'MkDecimal2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'MkDecimal3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.666385507 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal_closure" {
     Text.Read.Lex.$tc'MkDecimal_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'MkDecimal2_closure+1;
         const Text.Read.Lex.$tc'MkDecimal1_closure+4;
         const 3768064156751246198;
         const 12661213050981530502;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.668196984 UTC

[section ""data" . $krep14_r3y8S_closure" {
     $krep14_r3y8S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r3y8K_closure+1;
         const $krep11_r3y8P_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.669936832 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber1_closure" {
     Text.Read.Lex.$tc'MkNumber1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3y8F_closure+1;
         const $krep14_r3y8S_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.67167344 UTC

[section ""cstring" . Text.Read.Lex.$tc'MkNumber3_bytes" {
     Text.Read.Lex.$tc'MkNumber3_bytes:
         I8[] [39,77,107,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.673707002 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber2_closure" {
     Text.Read.Lex.$tc'MkNumber2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'MkNumber3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.67536085 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber_closure" {
     Text.Read.Lex.$tc'MkNumber_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'MkNumber2_closure+1;
         const Text.Read.Lex.$tc'MkNumber1_closure+4;
         const 13396293166029931455;
         const 9655480518931438202;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.67717443 UTC

[section ""cstring" . Text.Read.Lex.$tcLexeme2_bytes" {
     Text.Read.Lex.$tcLexeme2_bytes:
         I8[] [76,101,120,101,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.67890789 UTC

[section ""data" . Text.Read.Lex.$tcLexeme1_closure" {
     Text.Read.Lex.$tcLexeme1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tcLexeme2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.68061778 UTC

[section ""data" . Text.Read.Lex.$tcLexeme_closure" {
     Text.Read.Lex.$tcLexeme_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tcLexeme1_closure+1;
         const GHC.Types.krep$*_closure;
         const 80462090517814070;
         const 11862718491065697853;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.683457445 UTC

[section ""data" . Text.Read.Lex.$tc'EOF1_closure" {
     Text.Read.Lex.$tc'EOF1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Read.Lex.$tcLexeme_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.685222138 UTC

[section ""cstring" . Text.Read.Lex.$tc'EOF3_bytes" {
     Text.Read.Lex.$tc'EOF3_bytes:
         I8[] [39,69,79,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.68695068 UTC

[section ""data" . Text.Read.Lex.$tc'EOF2_closure" {
     Text.Read.Lex.$tc'EOF2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'EOF3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.688630322 UTC

[section ""data" . Text.Read.Lex.$tc'EOF_closure" {
     Text.Read.Lex.$tc'EOF_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'EOF2_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3510729917506789415;
         const 3927434500167946503;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.690581381 UTC

[section ""data" . Text.Read.Lex.$tc'Ident1_closure" {
     Text.Read.Lex.$tc'Ident1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r3y8O_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.692834723 UTC

[section ""cstring" . Text.Read.Lex.$tc'String2_bytes" {
     Text.Read.Lex.$tc'String2_bytes:
         I8[] [39,83,116,114,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.694604087 UTC

[section ""data" . Text.Read.Lex.$tc'String1_closure" {
     Text.Read.Lex.$tc'String1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'String2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.696365287 UTC

[section ""data" . Text.Read.Lex.$tc'String_closure" {
     Text.Read.Lex.$tc'String_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'String1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 4234975262003182519;
         const 13764813366371540099;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.698348921 UTC

[section ""cstring" . Text.Read.Lex.$tc'Punc2_bytes" {
     Text.Read.Lex.$tc'Punc2_bytes:
         I8[] [39,80,117,110,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.700020836 UTC

[section ""data" . Text.Read.Lex.$tc'Punc1_closure" {
     Text.Read.Lex.$tc'Punc1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Punc2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.703140148 UTC

[section ""data" . Text.Read.Lex.$tc'Punc_closure" {
     Text.Read.Lex.$tc'Punc_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Punc1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 12518860736485891069;
         const 4367633479442506190;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.705001385 UTC

[section ""cstring" . Text.Read.Lex.$tc'Ident3_bytes" {
     Text.Read.Lex.$tc'Ident3_bytes:
         I8[] [39,73,100,101,110,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.706699188 UTC

[section ""data" . Text.Read.Lex.$tc'Ident2_closure" {
     Text.Read.Lex.$tc'Ident2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Ident3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.708391566 UTC

[section ""data" . Text.Read.Lex.$tc'Ident_closure" {
     Text.Read.Lex.$tc'Ident_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Ident2_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 17378133866674838049;
         const 11361322998352874125;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.710240453 UTC

[section ""cstring" . Text.Read.Lex.$tc'Symbol2_bytes" {
     Text.Read.Lex.$tc'Symbol2_bytes:
         I8[] [39,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.712383874 UTC

[section ""data" . Text.Read.Lex.$tc'Symbol1_closure" {
     Text.Read.Lex.$tc'Symbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Symbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.714148801 UTC

[section ""data" . Text.Read.Lex.$tc'Symbol_closure" {
     Text.Read.Lex.$tc'Symbol_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Symbol1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 434905475898525586;
         const 17609692850475477756;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.715970983 UTC

[section ""data" . Text.Read.Lex.$tc'Char1_closure" {
     Text.Read.Lex.$tc'Char1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3y8G_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.718414259 UTC

[section ""cstring" . Text.Read.Lex.$tc'Char3_bytes" {
     Text.Read.Lex.$tc'Char3_bytes:
         I8[] [39,67,104,97,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.720186394 UTC

[section ""data" . Text.Read.Lex.$tc'Char2_closure" {
     Text.Read.Lex.$tc'Char2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Char3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.722477724 UTC

[section ""data" . Text.Read.Lex.$tc'Char_closure" {
     Text.Read.Lex.$tc'Char_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Char2_closure+1;
         const Text.Read.Lex.$tc'Char1_closure+4;
         const 4794546904228625478;
         const 396576625805862141;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.724442414 UTC

[section ""data" . Text.Read.Lex.$tc'Number1_closure" {
     Text.Read.Lex.$tc'Number1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r3y8P_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.726306858 UTC

[section ""cstring" . Text.Read.Lex.$tc'Number3_bytes" {
     Text.Read.Lex.$tc'Number3_bytes:
         I8[] [39,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.728122513 UTC

[section ""data" . Text.Read.Lex.$tc'Number2_closure" {
     Text.Read.Lex.$tc'Number2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Number3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.730164059 UTC

[section ""data" . Text.Read.Lex.$tc'Number_closure" {
     Text.Read.Lex.$tc'Number_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Number2_closure+1;
         const Text.Read.Lex.$tc'Number1_closure+4;
         const 3115835552307058655;
         const 14198768466951480548;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.732520371 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme9_bytes" {
     Text.Read.Lex.$fShowLexeme9_bytes:
         I8[] [77,107,68,101,99,105,109,97,108,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.734572307 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme8_closure" {
     Text.Read.Lex.$fShowLexeme8_closure:
         const Text.Read.Lex.$fShowLexeme8_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme8_entry() //  [R1]
         { info_tbl: [(c3CM3,
                       label: Text.Read.Lex.$fShowLexeme8_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CM3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CM4; else goto c3CM5;
       c3CM4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CM5: // global
           (_c3CM0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3CM0::I64 == 0) goto c3CM2; else goto c3CM1;
       c3CM2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3CM1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3CM0::I64;
           R2 = Text.Read.Lex.$fShowLexeme9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.738694282 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme10_closure" {
     Text.Read.Lex.$fShowLexeme10_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.740458917 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme11_bytes" {
     Text.Read.Lex.$fShowLexeme11_bytes:
         I8[] [77,107,78,117,109,98,101,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.747662223 UTC

[section ""data" . Text.Read.Lex.$w$cshowsPrec_closure" {
     Text.Read.Lex.$w$cshowsPrec_closure:
         const Text.Read.Lex.$w$cshowsPrec_info;
         const 0;
 },
 sat_s3ydC_entry() //  [R1]
         { info_tbl: [(c3CNi,
                       label: sat_s3ydC_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CNi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3CNp; else goto c3CNq;
       c3CNp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CNq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3CNf_info;
           _s3ydr::P64 = P64[R1 + 16];
           _s3ydv::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3ydr::P64;
           P64[Sp - 24] = _s3ydv::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3CNx; else goto c3CNg;
       u3CNx: // global
           call _c3CNf(R1) args: 0, res: 0, upd: 0;
       c3CNg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3CNf() //  [R1]
         { info_tbl: [(c3CNf,
                       label: block_c3CNf_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CNf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CNt; else goto c3CNs;
       c3CNt: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3CNs: // global
           _s3ydx::I64 = I64[R1 + 7];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3CNm_info;
           R4 = Hp - 24;
           R3 = _s3ydx::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3CNm() //  [R1, R2]
         { info_tbl: [(c3CNm,
                       label: block_c3CNm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CNm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CNw; else goto c3CNv;
       c3CNw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3CNv: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 showl_s3ydr_entry() //  [R1, R2]
         { info_tbl: [(c3CNC,
                       label: showl_s3ydr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CNC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3CND; else goto c3CNE;
       c3CND: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CNE: // global
           I64[Sp - 24] = block_c3CN5_info;
           _s3ydr::P64 = R1;
           _s3ydq::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3ydq::P64;
           P64[Sp - 8] = _s3ydr::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3CNL; else goto c3CN6;
       u3CNL: // global
           call _c3CN5(R1) args: 0, res: 0, upd: 0;
       c3CN6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CN5() //  [R1]
         { info_tbl: [(c3CN5,
                       label: block_c3CN5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CN5: // global
           if (R1 & 7 == 1) goto c3CNz; else goto c3CNA;
       c3CNz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CNA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3CNK; else goto c3CNJ;
       c3CNK: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CNJ: // global
           _s3ydu::P64 = P64[R1 + 6];
           _s3ydv::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s3ydC_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3ydu::P64;
           P64[Hp - 24] = _s3ydv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ydD_entry() //  [R1]
         { info_tbl: [(c3CNM,
                       label: sat_s3ydD_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CNM: // global
           _s3ydD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CNN; else goto c3CNO;
       c3CNO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3CNQ; else goto c3CNP;
       c3CNQ: // global
           HpAlloc = 40;
           goto c3CNN;
       c3CNN: // global
           R1 = _s3ydD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CNP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ydD::P64;
           _s3ydi::P64 = P64[_s3ydD::P64 + 16];
           _s3ydn::P64 = P64[_s3ydD::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure;
           P64[Hp - 16] = _s3ydi::P64;
           I64[Hp - 8] = showl_s3ydr_info;
           P64[Hp] = Hp - 30;
           R2 = _s3ydn::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_s3ydr_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ydH_entry() //  [R1]
         { info_tbl: [(c3CNR,
                       label: sat_s3ydH_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CNR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3CNV; else goto c3CNW;
       c3CNV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CNW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3CMQ_info;
           _s3ydi::P64 = P64[R1 + 16];
           _s3ydn::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3ydi::P64;
           P64[Sp - 24] = _s3ydn::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3CO3; else goto c3CMR;
       u3CO3: // global
           call _c3CMQ(R1) args: 0, res: 0, upd: 0;
       c3CMR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3CMQ() //  [R1]
         { info_tbl: [(c3CMQ,
                       label: block_c3CMQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CMQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CNZ; else goto c3CNY;
       c3CNZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3CNY: // global
           _s3ydp::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_s3ydD_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3CNS_info;
           R4 = Hp - 24;
           R3 = _s3ydp::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3CNS() //  [R1, R2]
         { info_tbl: [(c3CNS,
                       label: block_c3CNS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CNS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CO2; else goto c3CO1;
       c3CO2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3CO1: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ydI_entry() //  [R1]
         { info_tbl: [(c3CO8,
                       label: sat_s3ydI_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CO8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3CO9; else goto c3COa;
       c3CO9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3COa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3CMG_info;
           _s3ydi::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3ydi::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3COh; else goto c3CMH;
       u3COh: // global
           call _c3CMG(R1) args: 0, res: 0, upd: 0;
       c3CMH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3CMG() //  [R1]
         { info_tbl: [(c3CMG,
                       label: block_c3CMG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CMG: // global
           _s3ydi::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3CO5; else goto c3CO6;
       c3CO5: // global
           R3 = _s3ydi::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       c3CO6: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3COg; else goto c3COf;
       c3COg: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3COf: // global
           _s3ydm::P64 = P64[R1 + 6];
           _s3ydn::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s3ydH_info;
           P64[Hp - 40] = _s3ydi::P64;
           P64[Hp - 32] = _s3ydm::P64;
           P64[Hp - 24] = _s3ydn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ydN_entry() //  [R1]
         { info_tbl: [(c3COi,
                       label: sat_s3ydN_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3COi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3COn; else goto c3COo;
       c3COn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3COo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3CMx_info;
           _s3ydg::P64 = P64[R1 + 24];
           _s3ydi::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s3ydg::P64;
           P64[Sp - 24] = _s3ydi::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3COv; else goto c3CMy;
       u3COv: // global
           call _c3CMx(R1) args: 0, res: 0, upd: 0;
       c3CMy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3CMx() //  [R1]
         { info_tbl: [(c3CMx,
                       label: block_c3CMx_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CMx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3COr; else goto c3COq;
       c3COr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3COq: // global
           _s3ydk::I64 = I64[R1 + 7];
           I64[Hp - 48] = sat_s3ydI_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp + 16] = block_c3COk_info;
           R4 = Hp - 14;
           R3 = _s3ydk::I64;
           R2 = 11;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3COk() //  [R1, R2]
         { info_tbl: [(c3COk,
                       label: block_c3COk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3COk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3COu; else goto c3COt;
       c3COu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3COt: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 p_s3ydh_entry() //  [R1, R2]
         { info_tbl: [(c3COw,
                       label: p_s3ydh_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3COw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3COA; else goto c3COz;
       c3COA: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3COz: // global
           _s3ydf::P64 = P64[R1 + 7];
           _s3ydg::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s3ydN_info;
           P64[Hp - 16] = _s3ydf::P64;
           P64[Hp - 8] = _s3ydg::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = Text.Read.Lex.$fShowLexeme11_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ydR_entry() //  [R1]
         { info_tbl: [(c3COP,
                       label: sat_s3ydR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3COP: // global
           _s3ydR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3COQ; else goto c3COR;
       c3COR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3COT; else goto c3COS;
       c3COT: // global
           HpAlloc = 24;
           goto c3COQ;
       c3COQ: // global
           R1 = _s3ydR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3COS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ydR::P64;
           _s3ydh::P64 = P64[_s3ydR::P64 + 16];
           _s3ydP::P64 = P64[_s3ydR::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3ydP::P64;
           R2 = Hp - 14;
           R1 = _s3ydh::P64;
           Sp = Sp - 16;
           call p_s3ydh_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ydS_entry() //  [R1, R2]
         { info_tbl: [(c3COV,
                       label: sat_s3ydS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3COV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3COZ; else goto c3COY;
       c3COZ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3COY: // global
           _s3ydh::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3ydR_info;
           P64[Hp - 32] = _s3ydh::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 f_s3ydW_entry() //  [R1]
         { info_tbl: [(c3CP6,
                       label: f_s3ydW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CP6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CP7; else goto c3CP8;
       c3CP7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CP8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = Text.Read.Lex.$fShowLexeme10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 g_s3ydX_entry() //  [R1]
         { info_tbl: [(c3CPd,
                       label: g_s3ydX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CPd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CPe; else goto c3CPf;
       c3CPe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CPf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = Text.Read.Lex.$fShowLexeme10_closure+1;
           R2 = GHC.Show.$fShowInteger_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ye2_entry() //  [R1]
         { info_tbl: [(c3CPr,
                       label: sat_s3ye2_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CPr: // global
           _s3ye2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CPs; else goto c3CPt;
       c3CPt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CPv; else goto c3CPu;
       c3CPv: // global
           HpAlloc = 56;
           goto c3CPs;
       c3CPs: // global
           R1 = _s3ye2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CPu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ye2::P64;
           _s3ydW::P64 = P64[_s3ye2::P64 + 16];
           _s3ydX::P64 = P64[_s3ye2::P64 + 24];
           _s3ydZ::P64 = P64[_s3ye2::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ydX::P64;
           P64[Hp - 24] = _s3ydZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _s3ydW::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 g1_s3ydY_entry() //  [R1, R2]
         { info_tbl: [(c3CPx,
                       label: g1_s3ydY_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CPx: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3CPB; else goto c3CPA;
       c3CPB: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CPA: // global
           _s3ydT::P64 = P64[R1 + 7];
           _s3ydW::P64 = P64[R1 + 15];
           _s3ydX::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_s3ye2_info;
           P64[Hp - 40] = _s3ydW::P64;
           P64[Hp - 32] = _s3ydX::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 56;
           R4 = Hp - 14;
           R3 = _s3ydT::P64;
           R2 = GHC.Show.$fShowInt1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ye6_entry() //  [R1]
         { info_tbl: [(c3CPO,
                       label: sat_s3ye6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CPO: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_s3ydY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ye7_entry() //  [R1, R2]
         { info_tbl: [(c3CPR,
                       label: sat_s3ye7_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CPR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CPV; else goto c3CPU;
       c3CPV: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CPU: // global
           _s3ydY::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3ye6_info;
           P64[Hp - 8] = _s3ydY::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme8_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yea_entry() //  [R1]
         { info_tbl: [(c3CQb,
                       label: sat_s3yea_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CQb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CQf; else goto c3CQe;
       c3CQf: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CQe: // global
           _s3ydY::P64 = P64[R1 + 16];
           _s3ye8::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3ye8::P64;
           R2 = Hp - 14;
           R1 = _s3ydY::P64;
           call g1_s3ydY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yeb_entry() //  [R1]
         { info_tbl: [(c3CQg,
                       label: sat_s3yeb_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CQg: // global
           _s3yeb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CQh; else goto c3CQi;
       c3CQi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CQk; else goto c3CQj;
       c3CQk: // global
           HpAlloc = 32;
           goto c3CQh;
       c3CQh: // global
           R1 = _s3yeb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CQj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeb::P64;
           _s3ydY::P64 = P64[_s3yeb::P64 + 16];
           _s3ye8::P64 = P64[_s3yeb::P64 + 24];
           I64[Hp - 24] = sat_s3yea_info;
           P64[Hp - 8] = _s3ydY::P64;
           P64[Hp] = _s3ye8::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme8_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yec_entry() //  [R1, R2]
         { info_tbl: [(c3CQm,
                       label: sat_s3yec_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CQm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CQq; else goto c3CQp;
       c3CQq: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CQp: // global
           _s3ydY::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeb_info;
           P64[Hp - 32] = _s3ydY::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c3CQv,
                       label: Text.Read.Lex.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CQv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CQw; else goto c3CQx;
       c3CQw: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3CQx: // global
           I64[Sp - 16] = block_c3CMj_info;
           R1 = R3;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CQK; else goto c3CMk;
       u3CQK: // global
           call _c3CMj(R1) args: 0, res: 0, upd: 0;
       c3CMk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CMj() //  [R1]
         { info_tbl: [(c3CMj,
                       label: block_c3CMj_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CMj: // global
           _s3ydc::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c3CQs; else goto c3CQt;
       c3CQs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3CQA; else goto c3CQz;
       c3CQA: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CQz: // global
           _s3ydf::P64 = P64[R1 + 7];
           _s3ydg::P64 = P64[R1 + 15];
           I64[Hp - 32] = p_s3ydh_info;
           P64[Hp - 24] = _s3ydf::P64;
           P64[Hp - 16] = _s3ydg::P64;
           _c3CMo::P64 = Hp - 31;
           if (%MO_S_Lt_W64(_s3ydc::I64, 11)) goto c3CQC; else goto c3CQD;
       c3CQC: // global
           Hp = Hp - 16;
           R1 = _c3CMo::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CQD: // global
           I64[Hp - 8] = sat_s3ydS_info;
           P64[Hp] = _c3CMo::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CQt: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3CQG; else goto c3CQF;
       c3CQG: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3CQF: // global
           _s3ydT::P64 = P64[R1 + 6];
           _s3ydU::P64 = P64[R1 + 14];
           _s3ydV::P64 = P64[R1 + 22];
           I64[Hp - 88] = f_s3ydW_info;
           P64[Hp - 72] = _s3ydU::P64;
           I64[Hp - 64] = g_s3ydX_info;
           P64[Hp - 48] = _s3ydV::P64;
           I64[Hp - 40] = g1_s3ydY_info;
           P64[Hp - 32] = _s3ydT::P64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 64;
           _c3CPg::P64 = Hp - 39;
           if (%MO_S_Lt_W64(_s3ydc::I64, 11)) goto c3CQI; else goto c3CQJ;
       c3CQI: // global
           I64[Hp - 8] = sat_s3ye7_info;
           P64[Hp] = _c3CPg::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3CQJ: // global
           I64[Hp - 8] = sat_s3yec_info;
           P64[Hp] = _c3CPg::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.811984956 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshowsPrec_closure" {
     Text.Read.Lex.$fShowNumber_$cshowsPrec_closure:
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c3CT6,
                       label: Text.Read.Lex.$fShowNumber_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CT6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CT7; else goto c3CT8;
       c3CT7: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fShowNumber_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3CT8: // global
           I64[Sp - 16] = block_c3CT3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3CTc; else goto c3CT4;
       u3CTc: // global
           call _c3CT3(R1) args: 0, res: 0, upd: 0;
       c3CT4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CT3() //  [R1]
         { info_tbl: [(c3CT3,
                       label: block_c3CT3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CT3: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.818039404 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme2_closure" {
     Text.Read.Lex.$fShowLexeme2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.819880356 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshow_closure" {
     Text.Read.Lex.$fShowNumber_$cshow_closure:
         const Text.Read.Lex.$fShowNumber_$cshow_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshow_entry() //  [R2]
         { info_tbl: [(c3CTr,
                       label: Text.Read.Lex.$fShowNumber_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CTr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CTs; else goto c3CTt;
       c3CTs: // global
           R2 = R2;
           R1 = Text.Read.Lex.$fShowNumber_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CTt: // global
           R3 = R2;
           R2 = 0;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.824581304 UTC

[section ""data" . Text.Read.Lex.$fShowNumber1_closure" {
     Text.Read.Lex.$fShowNumber1_closure:
         const Text.Read.Lex.$fShowNumber1_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber1_entry() //  [R2]
         { info_tbl: [(c3CTD,
                       label: Text.Read.Lex.$fShowNumber1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CTD: // global
           R3 = R2;
           R2 = 0;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.828050027 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshowList_closure" {
     Text.Read.Lex.$fShowNumber_$cshowList_closure:
         const Text.Read.Lex.$fShowNumber_$cshowList_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c3CTO,
                       label: Text.Read.Lex.$fShowNumber_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CTO: // global
           R4 = R3;
           R3 = R2;
           R2 = Text.Read.Lex.$fShowNumber1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.831796465 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_closure" {
     Text.Read.Lex.$fShowNumber_closure:
         const GHC.Show.C:Show_con_info;
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_closure+2;
         const Text.Read.Lex.$fShowNumber_$cshow_closure+1;
         const Text.Read.Lex.$fShowNumber_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.833639423 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme7_bytes" {
     Text.Read.Lex.$fShowLexeme7_bytes:
         I8[] [78,117,109,98,101,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.835607268 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme6_closure" {
     Text.Read.Lex.$fShowLexeme6_closure:
         const Text.Read.Lex.$fShowLexeme6_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme6_entry() //  [R1]
         { info_tbl: [(c3CU3,
                       label: Text.Read.Lex.$fShowLexeme6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CU3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CU4; else goto c3CU5;
       c3CU4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CU5: // global
           (_c3CU0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3CU0::I64 == 0) goto c3CU2; else goto c3CU1;
       c3CU2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3CU1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3CU0::I64;
           R2 = Text.Read.Lex.$fShowLexeme7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.840105822 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme5_bytes" {
     Text.Read.Lex.$fShowLexeme5_bytes:
         I8[] [69,79,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.842264603 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme4_closure" {
     Text.Read.Lex.$fShowLexeme4_closure:
         const Text.Read.Lex.$fShowLexeme4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme4_entry() //  [R1]
         { info_tbl: [(c3CUk,
                       label: Text.Read.Lex.$fShowLexeme4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CUk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3CUl; else goto c3CUm;
       c3CUl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CUm: // global
           (_c3CUh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3CUh::I64 == 0) goto c3CUj; else goto c3CUi;
       c3CUj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3CUi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3CUh::I64;
           R2 = Text.Read.Lex.$fShowLexeme5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.846462618 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme3_closure" {
     Text.Read.Lex.$fShowLexeme3_closure:
         const Text.Read.Lex.$fShowLexeme3_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme3_entry() //  [R2]
         { info_tbl: [(c3CUy,
                       label: Text.Read.Lex.$fShowLexeme3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CUy: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.850282757 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme16_bytes" {
     Text.Read.Lex.$fShowLexeme16_bytes:
         I8[] [67,104,97,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.851929403 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme15_bytes" {
     Text.Read.Lex.$fShowLexeme15_bytes:
         I8[] [83,116,114,105,110,103,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.854151446 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme14_bytes" {
     Text.Read.Lex.$fShowLexeme14_bytes:
         I8[] [80,117,110,99,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.855744462 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme13_bytes" {
     Text.Read.Lex.$fShowLexeme13_bytes:
         I8[] [73,100,101,110,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.857422186 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme12_bytes" {
     Text.Read.Lex.$fShowLexeme12_bytes:
         I8[] [83,121,109,98,111,108,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.866507265 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure" {
     Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure:
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_info;
         const 0;
 },
 sat_s3yev_entry() //  [R1]
         { info_tbl: [(c3CVd,
                       label: sat_s3yev_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CVd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3CVe; else goto c3CVf;
       c3CVe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CVf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3CVa_info;
           _s3yes::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yes::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3CVj; else goto c3CVb;
       u3CVj: // global
           call _c3CVa(R1) args: 0, res: 0, upd: 0;
       c3CVb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3CVa() //  [R1]
         { info_tbl: [(c3CVa,
                       label: block_c3CVa_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CVa: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yew_entry() //  [R1, R2]
         { info_tbl: [(c3CVk,
                       label: sat_s3yew_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CVk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CVo; else goto c3CVn;
       c3CVo: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CVn: // global
           _s3yeo::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3yev_info;
           P64[Hp - 8] = _s3yeo::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yeB_entry() //  [R1]
         { info_tbl: [(c3CVG,
                       label: sat_s3yeB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CVG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3CVK; else goto c3CVL;
       c3CVK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CVL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3CVD_info;
           _s3yex::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yex::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3CVP; else goto c3CVE;
       u3CVP: // global
           call _c3CVD(R1) args: 0, res: 0, upd: 0;
       c3CVE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3CVD() //  [R1]
         { info_tbl: [(c3CVD,
                       label: block_c3CVD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CVD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CVO; else goto c3CVN;
       c3CVO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3CVN: // global
           _s3yez::I64 = I64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 14;
           R2 = _s3yez::I64;
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeC_entry() //  [R1]
         { info_tbl: [(c3CVQ,
                       label: sat_s3yeC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CVQ: // global
           _s3yeC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CVR; else goto c3CVS;
       c3CVS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3CVU; else goto c3CVT;
       c3CVU: // global
           HpAlloc = 32;
           goto c3CVR;
       c3CVR: // global
           R1 = _s3yeC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CVT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeC::P64;
           _s3yeo::P64 = P64[_s3yeC::P64 + 16];
           _s3yex::P64 = P64[_s3yeC::P64 + 24];
           I64[Hp - 24] = sat_s3yeB_info;
           P64[Hp - 8] = _s3yeo::P64;
           P64[Hp] = _s3yex::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeD_entry() //  [R1, R2]
         { info_tbl: [(c3CVW,
                       label: sat_s3yeD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CVW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CW0; else goto c3CVZ;
       c3CW0: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CVZ: // global
           _s3yeo::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeC_info;
           P64[Hp - 32] = _s3yeo::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yeK_entry() //  [R1]
         { info_tbl: [(c3CWl,
                       label: sat_s3yeK_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CWl: // global
           _s3yeK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CWm; else goto c3CWn;
       c3CWn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CWp; else goto c3CWo;
       c3CWp: // global
           HpAlloc = 24;
           goto c3CWm;
       c3CWm: // global
           R1 = _s3yeK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CWo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeK::P64;
           _s3yeE::P64 = P64[_s3yeK::P64 + 16];
           _s3yeI::P64 = P64[_s3yeK::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yeI::P64;
           R3 = Hp - 14;
           R2 = _s3yeE::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeM_entry() //  [R1, R2]
         { info_tbl: [(c3CWr,
                       label: sat_s3yeM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CWr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CWv; else goto c3CWu;
       c3CWv: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CWu: // global
           _s3yeE::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeK_info;
           P64[Hp - 32] = _s3yeE::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yeQ_entry() //  [R1]
         { info_tbl: [(c3CWM,
                       label: sat_s3yeQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CWM: // global
           _s3yeQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CWN; else goto c3CWO;
       c3CWO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3CWQ; else goto c3CWP;
       c3CWQ: // global
           HpAlloc = 48;
           goto c3CWN;
       c3CWN: // global
           R1 = _s3yeQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CWP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeQ::P64;
           _s3yeE::P64 = P64[_s3yeQ::P64 + 16];
           _s3yeN::P64 = P64[_s3yeQ::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yeN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yeE::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeS_entry() //  [R1]
         { info_tbl: [(c3CWS,
                       label: sat_s3yeS_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CWS: // global
           _s3yeS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CWT; else goto c3CWU;
       c3CWU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CWW; else goto c3CWV;
       c3CWW: // global
           HpAlloc = 56;
           goto c3CWT;
       c3CWT: // global
           R1 = _s3yeS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CWV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yeS::P64;
           _s3yeE::P64 = P64[_s3yeS::P64 + 16];
           _s3yeN::P64 = P64[_s3yeS::P64 + 24];
           I64[Hp - 48] = sat_s3yeQ_info;
           P64[Hp - 32] = _s3yeE::P64;
           P64[Hp - 24] = _s3yeN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yeT_entry() //  [R1, R2]
         { info_tbl: [(c3CWY,
                       label: sat_s3yeT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CWY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CX2; else goto c3CX1;
       c3CX2: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CX1: // global
           _s3yeE::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yeS_info;
           P64[Hp - 32] = _s3yeE::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yf0_entry() //  [R1]
         { info_tbl: [(c3CXn,
                       label: sat_s3yf0_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CXn: // global
           _s3yf0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CXo; else goto c3CXp;
       c3CXp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CXr; else goto c3CXq;
       c3CXr: // global
           HpAlloc = 24;
           goto c3CXo;
       c3CXo: // global
           R1 = _s3yf0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CXq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yf0::P64;
           _s3yeU::P64 = P64[_s3yf0::P64 + 16];
           _s3yeY::P64 = P64[_s3yf0::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yeY::P64;
           R3 = Hp - 14;
           R2 = _s3yeU::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yf2_entry() //  [R1, R2]
         { info_tbl: [(c3CXt,
                       label: sat_s3yf2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CXt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CXx; else goto c3CXw;
       c3CXx: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CXw: // global
           _s3yeU::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yf0_info;
           P64[Hp - 32] = _s3yeU::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yf6_entry() //  [R1]
         { info_tbl: [(c3CXO,
                       label: sat_s3yf6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CXO: // global
           _s3yf6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CXP; else goto c3CXQ;
       c3CXQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3CXS; else goto c3CXR;
       c3CXS: // global
           HpAlloc = 48;
           goto c3CXP;
       c3CXP: // global
           R1 = _s3yf6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CXR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yf6::P64;
           _s3yeU::P64 = P64[_s3yf6::P64 + 16];
           _s3yf3::P64 = P64[_s3yf6::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yf3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yeU::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yf8_entry() //  [R1]
         { info_tbl: [(c3CXU,
                       label: sat_s3yf8_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CXU: // global
           _s3yf8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CXV; else goto c3CXW;
       c3CXW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CXY; else goto c3CXX;
       c3CXY: // global
           HpAlloc = 56;
           goto c3CXV;
       c3CXV: // global
           R1 = _s3yf8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CXX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yf8::P64;
           _s3yeU::P64 = P64[_s3yf8::P64 + 16];
           _s3yf3::P64 = P64[_s3yf8::P64 + 24];
           I64[Hp - 48] = sat_s3yf6_info;
           P64[Hp - 32] = _s3yeU::P64;
           P64[Hp - 24] = _s3yf3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yf9_entry() //  [R1, R2]
         { info_tbl: [(c3CY0,
                       label: sat_s3yf9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CY0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CY4; else goto c3CY3;
       c3CY4: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CY3: // global
           _s3yeU::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yf8_info;
           P64[Hp - 32] = _s3yeU::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfg_entry() //  [R1]
         { info_tbl: [(c3CYp,
                       label: sat_s3yfg_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CYp: // global
           _s3yfg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CYq; else goto c3CYr;
       c3CYr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CYt; else goto c3CYs;
       c3CYt: // global
           HpAlloc = 24;
           goto c3CYq;
       c3CYq: // global
           R1 = _s3yfg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CYs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfg::P64;
           _s3yfa::P64 = P64[_s3yfg::P64 + 16];
           _s3yfe::P64 = P64[_s3yfg::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yfe::P64;
           R3 = Hp - 14;
           R2 = _s3yfa::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfi_entry() //  [R1, R2]
         { info_tbl: [(c3CYv,
                       label: sat_s3yfi_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CYv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CYz; else goto c3CYy;
       c3CYz: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CYy: // global
           _s3yfa::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfg_info;
           P64[Hp - 32] = _s3yfa::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfm_entry() //  [R1]
         { info_tbl: [(c3CYQ,
                       label: sat_s3yfm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CYQ: // global
           _s3yfm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CYR; else goto c3CYS;
       c3CYS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3CYU; else goto c3CYT;
       c3CYU: // global
           HpAlloc = 48;
           goto c3CYR;
       c3CYR: // global
           R1 = _s3yfm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CYT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfm::P64;
           _s3yfa::P64 = P64[_s3yfm::P64 + 16];
           _s3yfj::P64 = P64[_s3yfm::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yfj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yfa::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfo_entry() //  [R1]
         { info_tbl: [(c3CYW,
                       label: sat_s3yfo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CYW: // global
           _s3yfo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CYX; else goto c3CYY;
       c3CYY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CZ0; else goto c3CYZ;
       c3CZ0: // global
           HpAlloc = 56;
           goto c3CYX;
       c3CYX: // global
           R1 = _s3yfo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CYZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfo::P64;
           _s3yfa::P64 = P64[_s3yfo::P64 + 16];
           _s3yfj::P64 = P64[_s3yfo::P64 + 24];
           I64[Hp - 48] = sat_s3yfm_info;
           P64[Hp - 32] = _s3yfa::P64;
           P64[Hp - 24] = _s3yfj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfp_entry() //  [R1, R2]
         { info_tbl: [(c3CZ2,
                       label: sat_s3yfp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CZ2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CZ6; else goto c3CZ5;
       c3CZ6: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CZ5: // global
           _s3yfa::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfo_info;
           P64[Hp - 32] = _s3yfa::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfw_entry() //  [R1]
         { info_tbl: [(c3CZr,
                       label: sat_s3yfw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CZr: // global
           _s3yfw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CZs; else goto c3CZt;
       c3CZt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3CZv; else goto c3CZu;
       c3CZv: // global
           HpAlloc = 24;
           goto c3CZs;
       c3CZs: // global
           R1 = _s3yfw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CZu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfw::P64;
           _s3yfq::P64 = P64[_s3yfw::P64 + 16];
           _s3yfu::P64 = P64[_s3yfw::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3yfu::P64;
           R3 = Hp - 14;
           R2 = _s3yfq::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfy_entry() //  [R1, R2]
         { info_tbl: [(c3CZx,
                       label: sat_s3yfy_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CZx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3CZB; else goto c3CZA;
       c3CZB: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3CZA: // global
           _s3yfq::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfw_info;
           P64[Hp - 32] = _s3yfq::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfC_entry() //  [R1]
         { info_tbl: [(c3CZS,
                       label: sat_s3yfC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CZS: // global
           _s3yfC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CZT; else goto c3CZU;
       c3CZU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3CZW; else goto c3CZV;
       c3CZW: // global
           HpAlloc = 48;
           goto c3CZT;
       c3CZT: // global
           R1 = _s3yfC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3CZV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfC::P64;
           _s3yfq::P64 = P64[_s3yfC::P64 + 16];
           _s3yfz::P64 = P64[_s3yfC::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3yfz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3yfq::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfE_entry() //  [R1]
         { info_tbl: [(c3CZY,
                       label: sat_s3yfE_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CZY: // global
           _s3yfE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3CZZ; else goto c3D00;
       c3D00: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3D02; else goto c3D01;
       c3D02: // global
           HpAlloc = 56;
           goto c3CZZ;
       c3CZZ: // global
           R1 = _s3yfE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D01: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfE::P64;
           _s3yfq::P64 = P64[_s3yfE::P64 + 16];
           _s3yfz::P64 = P64[_s3yfE::P64 + 24];
           I64[Hp - 48] = sat_s3yfC_info;
           P64[Hp - 32] = _s3yfq::P64;
           P64[Hp - 24] = _s3yfz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfF_entry() //  [R1, R2]
         { info_tbl: [(c3D04,
                       label: sat_s3yfF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D04: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3D08; else goto c3D07;
       c3D08: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3D07: // global
           _s3yfq::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfE_info;
           P64[Hp - 32] = _s3yfq::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s3yfJ_entry() //  [R1]
         { info_tbl: [(c3D0k,
                       label: g_s3yfJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D0k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D0l; else goto c3D0m;
       c3D0l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D0m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfM_entry() //  [R1]
         { info_tbl: [(c3D0z,
                       label: sat_s3yfM_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D0z: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfN_entry() //  [R1, R2]
         { info_tbl: [(c3D0C,
                       label: sat_s3yfN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D0C: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3D0G; else goto c3D0F;
       c3D0G: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3D0F: // global
           _s3yfJ::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3yfM_info;
           P64[Hp - 8] = _s3yfJ::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfQ_entry() //  [R1]
         { info_tbl: [(c3D0W,
                       label: sat_s3yfQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D0W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3D10; else goto c3D0Z;
       c3D10: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D0Z: // global
           _s3yfJ::P64 = P64[R1 + 16];
           _s3yfO::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3yfO::P64;
           R2 = Hp - 14;
           R1 = _s3yfJ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yfR_entry() //  [R1]
         { info_tbl: [(c3D11,
                       label: sat_s3yfR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D11: // global
           _s3yfR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3D12; else goto c3D13;
       c3D13: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3D15; else goto c3D14;
       c3D15: // global
           HpAlloc = 32;
           goto c3D12;
       c3D12: // global
           R1 = _s3yfR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D14: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yfR::P64;
           _s3yfJ::P64 = P64[_s3yfR::P64 + 16];
           _s3yfO::P64 = P64[_s3yfR::P64 + 24];
           I64[Hp - 24] = sat_s3yfQ_info;
           P64[Hp - 8] = _s3yfJ::P64;
           P64[Hp] = _s3yfO::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yfS_entry() //  [R1, R2]
         { info_tbl: [(c3D17,
                       label: sat_s3yfS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D17: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3D1b; else goto c3D1a;
       c3D1b: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3D1a: // global
           _s3yfJ::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3yfR_info;
           P64[Hp - 32] = _s3yfJ::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c3D1l,
                       label: Text.Read.Lex.$fShowLexeme_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D1l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D1m; else goto c3D1n;
       c3D1m: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3D1n: // global
           I64[Sp - 16] = block_c3CUO_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3D2d; else goto c3CUP;
       u3D2d: // global
           call _c3CUO(R1) args: 0, res: 0, upd: 0;
       c3CUP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3CUO() //  [R1]
         { info_tbl: [(c3CUO,
                       label: block_c3CUO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CUO: // global
           _s3yel::P64 = P64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3D1d;
               case 2 : goto c3D1e;
               case 3 : goto c3D1f;
               case 4 : goto c3D1g;
               case 5 : goto c3D1h;
               case 6 : goto c3D1i;
               case 7 : goto c3D1j;
           }
       c3D1j: // global
           R1 = Text.Read.Lex.$fShowLexeme3_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D1i: // global
           I64[Sp] = block_c3D0b_info;
           _s3yfG::P64 = P64[R1 + 2];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yfG::P64;
           if (R1 & 7 != 0) goto u3D2c; else goto c3D0c;
       u3D2c: // global
           call _c3D0b(R1) args: 0, res: 0, upd: 0;
       c3D0c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3D1h: // global
           I64[Sp] = block_c3CZ9_info;
           _s3yfq::P64 = P64[R1 + 3];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yfq::P64;
           if (R1 & 7 != 0) goto u3D2b; else goto c3CZa;
       u3D2b: // global
           call _c3CZ9(R1) args: 0, res: 0, upd: 0;
       c3CZa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3D1g: // global
           I64[Sp] = block_c3CY7_info;
           _s3yfa::P64 = P64[R1 + 4];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yfa::P64;
           if (R1 & 7 != 0) goto u3D2a; else goto c3CY8;
       u3D2a: // global
           call _c3CY7(R1) args: 0, res: 0, upd: 0;
       c3CY8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3D1f: // global
           I64[Sp] = block_c3CX5_info;
           _s3yeU::P64 = P64[R1 + 5];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yeU::P64;
           if (R1 & 7 != 0) goto u3D29; else goto c3CX6;
       u3D29: // global
           call _c3CX5(R1) args: 0, res: 0, upd: 0;
       c3CX6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3D1e: // global
           I64[Sp] = block_c3CW3_info;
           _s3yeE::P64 = P64[R1 + 6];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yeE::P64;
           if (R1 & 7 != 0) goto u3D28; else goto c3CW4;
       u3D28: // global
           call _c3CW3(R1) args: 0, res: 0, upd: 0;
       c3CW4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3D1d: // global
           I64[Sp] = block_c3CUT_info;
           _s3yeo::P64 = P64[R1 + 7];
           R1 = _s3yel::P64;
           P64[Sp + 8] = _s3yeo::P64;
           if (R1 & 7 != 0) goto u3D27; else goto c3CUU;
       u3D27: // global
           call _c3CUT(R1) args: 0, res: 0, upd: 0;
       c3CUU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3D0b() //  [R1]
         { info_tbl: [(c3D0b,
                       label: block_c3D0b_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D0b: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3D20; else goto c3D1Z;
       c3D20: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D1Z: // global
           _s3yfI::I64 = I64[R1 + 7];
           I64[Hp - 32] = g_s3yfJ_info;
           P64[Hp - 16] = P64[Sp + 8];
           _c3D0g::P64 = Hp - 32;
           if (%MO_S_Lt_W64(_s3yfI::I64, 11)) goto c3D22; else goto c3D23;
       c3D22: // global
           I64[Hp - 8] = sat_s3yfN_info;
           P64[Hp] = _c3D0g::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D23: // global
           I64[Hp - 8] = sat_s3yfS_info;
           P64[Hp] = _c3D0g::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3CZ9() //  [R1]
         { info_tbl: [(c3CZ9,
                       label: block_c3CZ9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CZ9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3D1T; else goto c3D1S;
       c3D1T: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D1S: // global
           _s3yfq::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3D1V; else goto c3D1W;
       c3D1V: // global
           I64[Hp - 8] = sat_s3yfy_info;
           P64[Hp] = _s3yfq::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D1W: // global
           I64[Hp - 8] = sat_s3yfF_info;
           P64[Hp] = _s3yfq::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3CY7() //  [R1]
         { info_tbl: [(c3CY7,
                       label: block_c3CY7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CY7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3D1M; else goto c3D1L;
       c3D1M: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D1L: // global
           _s3yfa::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3D1O; else goto c3D1P;
       c3D1O: // global
           I64[Hp - 8] = sat_s3yfi_info;
           P64[Hp] = _s3yfa::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D1P: // global
           I64[Hp - 8] = sat_s3yfp_info;
           P64[Hp] = _s3yfa::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3CX5() //  [R1]
         { info_tbl: [(c3CX5,
                       label: block_c3CX5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CX5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3D1F; else goto c3D1E;
       c3D1F: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D1E: // global
           _s3yeU::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3D1H; else goto c3D1I;
       c3D1H: // global
           I64[Hp - 8] = sat_s3yf2_info;
           P64[Hp] = _s3yeU::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D1I: // global
           I64[Hp - 8] = sat_s3yf9_info;
           P64[Hp] = _s3yeU::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3CW3() //  [R1]
         { info_tbl: [(c3CW3,
                       label: block_c3CW3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CW3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3D1y; else goto c3D1x;
       c3D1y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D1x: // global
           _s3yeE::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3D1A; else goto c3D1B;
       c3D1A: // global
           I64[Hp - 8] = sat_s3yeM_info;
           P64[Hp] = _s3yeE::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D1B: // global
           I64[Hp - 8] = sat_s3yeT_info;
           P64[Hp] = _s3yeE::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3CUT() //  [R1]
         { info_tbl: [(c3CUT,
                       label: block_c3CUT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3CUT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3D1r; else goto c3D1q;
       c3D1r: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D1q: // global
           _s3yeo::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3D1t; else goto c3D1u;
       c3D1t: // global
           I64[Hp - 8] = sat_s3yew_info;
           P64[Hp] = _s3yeo::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3D1u: // global
           I64[Hp - 8] = sat_s3yeD_info;
           P64[Hp] = _s3yeo::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.960464188 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme17_closure" {
     Text.Read.Lex.$fShowLexeme17_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.964691437 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshow_closure" {
     Text.Read.Lex.$fShowLexeme_$cshow_closure:
         const Text.Read.Lex.$fShowLexeme_$cshow_info;
         const 0;
 },
 sat_s3yfY_entry() //  [R1]
         { info_tbl: [(c3D5C,
                       label: sat_s3yfY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D5C: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3D5D; else goto c3D5E;
       c3D5D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D5E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3D5z_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3D5I; else goto c3D5A;
       u3D5I: // global
           call _c3D5z(R1) args: 0, res: 0, upd: 0;
       c3D5A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3D5z() //  [R1]
         { info_tbl: [(c3D5z,
                       label: block_c3D5z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D5z: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yg0_entry() //  [R1]
         { info_tbl: [(c3D5P,
                       label: sat_s3yg0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D5P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D5Q; else goto c3D5R;
       c3D5Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D5R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yg3_entry() //  [R1]
         { info_tbl: [(c3D5Y,
                       label: sat_s3yg3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D5Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D5Z; else goto c3D60;
       c3D5Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D60: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yg6_entry() //  [R1]
         { info_tbl: [(c3D67,
                       label: sat_s3yg6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D67: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D68; else goto c3D69;
       c3D68: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D69: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yg9_entry() //  [R1]
         { info_tbl: [(c3D6g,
                       label: sat_s3yg9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D6g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D6h; else goto c3D6i;
       c3D6h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D6i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ygc_entry() //  [R1]
         { info_tbl: [(c3D6p,
                       label: sat_s3ygc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D6p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D6q; else goto c3D6r;
       c3D6q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D6r: // global
           R3 = P64[R1 + 16];
           R2 = 11;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$fShowLexeme_$cshow_entry() //  [R2]
         { info_tbl: [(c3D6B,
                       label: Text.Read.Lex.$fShowLexeme_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D6B: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3D6C; else goto c3D6D;
       c3D6C: // global
           R2 = R2;
           R1 = Text.Read.Lex.$fShowLexeme_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3D6D: // global
           I64[Sp - 8] = block_c3D5q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3D73; else goto c3D5r;
       u3D73: // global
           call _c3D5q(R1) args: 0, res: 0, upd: 0;
       c3D5r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3D5q() //  [R1]
         { info_tbl: [(c3D5q,
                       label: block_c3D5q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D5q: // global
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3D6t;
               case 2 : goto c3D6u;
               case 3 : goto c3D6v;
               case 4 : goto c3D6w;
               case 5 : goto c3D6x;
               case 6 : goto c3D6y;
               case 7 : goto c3D6z;
           }
       c3D6z: // global
           R1 = Text.Read.Lex.$fShowLexeme4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3D6y: // global
           Hp = Hp + 24;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3D6Z; else goto c3D6Y;
       c3D6Y: // global
           _s3ygb::P64 = P64[_s3yfU::P64 + 2];
           I64[Hp - 16] = sat_s3ygc_info;
           P64[Hp] = _s3ygb::P64;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3D6x: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3D6W; else goto c3D6V;
       c3D6V: // global
           _s3yg8::P64 = P64[_s3yfU::P64 + 3];
           I64[Hp - 40] = sat_s3yg9_info;
           P64[Hp - 24] = _s3yg8::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3D6w: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3D6W; else goto c3D6R;
       c3D6R: // global
           _s3yg5::P64 = P64[_s3yfU::P64 + 4];
           I64[Hp - 40] = sat_s3yg6_info;
           P64[Hp - 24] = _s3yg5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3D6v: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3D6W; else goto c3D6N;
       c3D6N: // global
           _s3yg2::P64 = P64[_s3yfU::P64 + 5];
           I64[Hp - 40] = sat_s3yg3_info;
           P64[Hp - 24] = _s3yg2::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3D6u: // global
           Hp = Hp + 48;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3D6W; else goto c3D6J;
       c3D6W: // global
           HpAlloc = 48;
           R1 = _s3yfU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D6J: // global
           _s3yfZ::P64 = P64[_s3yfU::P64 + 6];
           I64[Hp - 40] = sat_s3yg0_info;
           P64[Hp - 24] = _s3yfZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3D6t: // global
           Hp = Hp + 24;
           _s3yfU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3D6Z; else goto c3D6F;
       c3D6Z: // global
           HpAlloc = 24;
           R1 = _s3yfU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3D6F: // global
           _s3yfV::P64 = P64[_s3yfU::P64 + 7];
           I64[Hp - 16] = sat_s3yfY_info;
           P64[Hp] = _s3yfV::P64;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.987546577 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme1_closure" {
     Text.Read.Lex.$fShowLexeme1_closure:
         const Text.Read.Lex.$fShowLexeme1_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme1_entry() //  [R2]
         { info_tbl: [(c3D7R,
                       label: Text.Read.Lex.$fShowLexeme1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D7R: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme2_closure+1;
           call Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.991478533 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshowList_closure" {
     Text.Read.Lex.$fShowLexeme_$cshowList_closure:
         const Text.Read.Lex.$fShowLexeme_$cshowList_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c3D82,
                       label: Text.Read.Lex.$fShowLexeme_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D82: // global
           R4 = R3;
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.995123008 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_closure" {
     Text.Read.Lex.$fShowLexeme_closure:
         const GHC.Show.C:Show_con_info;
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure+2;
         const Text.Read.Lex.$fShowLexeme_$cshow_closure+1;
         const Text.Read.Lex.$fShowLexeme_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.996861865 UTC

[section ""cstring" . Text.Read.Lex.isSymbolChar4_bytes" {
     Text.Read.Lex.isSymbolChar4_bytes:
         I8[] [44,59,40,41,91,93,123,125,96]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:11.998811131 UTC

[section ""data" . Text.Read.Lex.isSymbolChar3_closure" {
     Text.Read.Lex.isSymbolChar3_closure:
         const Text.Read.Lex.isSymbolChar3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.isSymbolChar3_entry() //  [R1]
         { info_tbl: [(c3D8h,
                       label: Text.Read.Lex.isSymbolChar3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D8h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D8i; else goto c3D8j;
       c3D8i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D8j: // global
           (_c3D8e::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3D8e::I64 == 0) goto c3D8g; else goto c3D8f;
       c3D8g: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3D8f: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3D8e::I64;
           R2 = Text.Read.Lex.isSymbolChar4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.003059526 UTC

[section ""cstring" . Text.Read.Lex.isSymbolChar2_bytes" {
     Text.Read.Lex.isSymbolChar2_bytes:
         I8[] [39,34]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.004894503 UTC

[section ""data" . Text.Read.Lex.isSymbolChar1_closure" {
     Text.Read.Lex.isSymbolChar1_closure:
         const Text.Read.Lex.isSymbolChar1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.isSymbolChar1_entry() //  [R1]
         { info_tbl: [(c3D8y,
                       label: Text.Read.Lex.isSymbolChar1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D8y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3D8z; else goto c3D8A;
       c3D8z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3D8A: // global
           (_c3D8v::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3D8v::I64 == 0) goto c3D8x; else goto c3D8w;
       c3D8x: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3D8w: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3D8v::I64;
           R2 = Text.Read.Lex.isSymbolChar2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.010165505 UTC

[section ""data" . Text.Read.Lex.isSymbolChar_closure" {
     Text.Read.Lex.isSymbolChar_closure:
         const Text.Read.Lex.isSymbolChar_info;
         const 0;
 },
 Text.Read.Lex.isSymbolChar_entry() //  [R2]
         { info_tbl: [(c3D8S,
                       label: Text.Read.Lex.isSymbolChar_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D8S: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3D8T; else goto c3D8U;
       c3D8T: // global
           R2 = R2;
           R1 = Text.Read.Lex.isSymbolChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3D8U: // global
           I64[Sp - 16] = block_c3D8M_info;
           R4 = Text.Read.Lex.isSymbolChar3_closure;
           R3 = R2;
           _s3ygf::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 8] = _s3ygf::P64;
           Sp = Sp - 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3D8M() //  [R1]
         { info_tbl: [(c3D8M,
                       label: block_c3D8M_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D8M: // global
           if (R1 & 7 == 1) goto c3D8P; else goto u3D9Z;
       c3D8P: // global
           _s3ygf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3D8X_info;
           R1 = _s3ygf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Dac; else goto c3D8Z;
       u3Dac: // global
           call _c3D8X(R1) args: 0, res: 0, upd: 0;
       c3D8Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3D9Z: // global
           Sp = Sp + 16;
           call _c3D8Q() args: 0, res: 0, upd: 0;
     }
 },
 _c3D8X() //  [R1]
         { info_tbl: [(c3D8X,
                       label: block_c3D8X_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D8X: // global
           I64[Sp - 16] = block_c3D93_info;
           _s3ygi::I64 = I64[R1 + 7];
           R2 = _s3ygi::I64;
           I64[Sp - 8] = _s3ygi::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3D93() //  [R1]
         { info_tbl: [(c3D93,
                       label: block_c3D93_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D93: // global
           _c3D9V::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c3D9V::I64 < 22) goto u3D9X; else goto u3Da0;
       u3D9X: // global
           if (_c3D9V::I64 < 11) goto u3Da1; else goto u3D9Y;
       u3Da1: // global
           Sp = Sp + 24;
           goto u3Dai;
       u3D9Y: // global
           switch [11 .. 21] _c3D9V::I64 {
               case 11 : goto c3D9i;
               case 12 : goto u3Da7;
               case 17 : goto c3D9r;
               case 18, 19, 20, 21 : goto u3Da7;
               default: {goto u3Da2;}
           }
       c3D9r: // global
           _s3ygh::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3D9p_info;
           R4 = Text.Read.Lex.isSymbolChar1_closure;
           R3 = _s3ygh::P64;
           R2 = GHC.Classes.$fEqChar_closure;
           Sp = Sp + 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       u3Da7: // global
           Sp = Sp + 24;
           goto u3Daj;
       c3D9i: // global
           if (I64[Sp + 8] == 95) goto u3Daa; else goto u3Dab;
       u3Daa: // global
           Sp = Sp + 24;
           goto u3Dai;
       u3Dab: // global
           Sp = Sp + 24;
           goto u3Daj;
       u3Daj: // global
           call _c3D9R() args: 0, res: 0, upd: 0;
       u3Da2: // global
           Sp = Sp + 24;
           goto u3Dai;
       u3Da0: // global
           Sp = Sp + 24;
           goto u3Dai;
       u3Dai: // global
           call _c3D8Q() args: 0, res: 0, upd: 0;
     }
 },
 _c3D9p() //  [R1]
         { info_tbl: [(c3D9p,
                       label: block_c3D9p_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D9p: // global
           if (R1 & 7 == 1) goto u3Da8; else goto u3Da9;
       u3Da8: // global
           Sp = Sp + 8;
           call _c3D9R() args: 0, res: 0, upd: 0;
       u3Da9: // global
           Sp = Sp + 8;
           call _c3D8Q() args: 0, res: 0, upd: 0;
     }
 },
 _c3D9R() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D9R: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3D8Q() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3D8Q: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.024234861 UTC

[section ""cstring" . lvl_r3y8T_bytes" {
     lvl_r3y8T_bytes:
         I8[] [95,39]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.026129323 UTC

[section ""data" . lvl1_r3y8U_closure" {
     lvl1_r3y8U_closure:
         const lvl1_r3y8U_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3y8U_entry() //  [R1]
         { info_tbl: [(c3DaY,
                       label: lvl1_r3y8U_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DaY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DaZ; else goto c3Db0;
       c3DaZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Db0: // global
           (_c3DaV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DaV::I64 == 0) goto c3DaX; else goto c3DaW;
       c3DaX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DaW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DaV::I64;
           R2 = lvl_r3y8T_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.030467974 UTC

[section ""data" . $wisIdfChar_r3y8V_closure" {
     $wisIdfChar_r3y8V_closure:
         const $wisIdfChar_r3y8V_info;
         const 0;
 },
 $wisIdfChar_r3y8V_entry() //  [R2]
         { info_tbl: [(c3Dbe,
                       label: $wisIdfChar_r3y8V_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dbe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Dbi; else goto c3Dbh;
       c3Dbi: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = $wisIdfChar_r3y8V_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Dbh: // global
           (_s3ygr::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(R2);
           if (_s3ygr::I64 == 0) goto c3Dbs; else goto c3Dbo;
       c3Dbs: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R2;
           R4 = lvl1_r3y8U_closure;
           R3 = Hp - 7;
           R2 = GHC.Classes.$fEqChar_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3Dbo: // global
           Hp = Hp - 16;
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.035224017 UTC

[section ""data" . isIdfChar_r3y8W_closure" {
     isIdfChar_r3y8W_closure:
         const isIdfChar_r3y8W_info;
         const 0;
 },
 isIdfChar_r3y8W_entry() //  [R2]
         { info_tbl: [(c3DbF,
                       label: isIdfChar_r3y8W_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DbF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DbG; else goto c3DbH;
       c3DbG: // global
           R2 = R2;
           R1 = isIdfChar_r3y8W_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3DbH: // global
           I64[Sp - 8] = block_c3DbC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DbL; else goto c3DbD;
       u3DbL: // global
           call _c3DbC(R1) args: 0, res: 0, upd: 0;
       c3DbD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DbC() //  [R1]
         { info_tbl: [(c3DbC,
                       label: block_c3DbC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DbC: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call $wisIdfChar_r3y8V_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.040391534 UTC

[section ""cstring" . reserved_ops_r3y8X_bytes" {
     reserved_ops_r3y8X_bytes:
         I8[] [46,46]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.043091014 UTC

[section ""data" . reserved_ops1_r3y8Y_closure" {
     reserved_ops1_r3y8Y_closure:
         const reserved_ops1_r3y8Y_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops1_r3y8Y_entry() //  [R1]
         { info_tbl: [(c3Dc2,
                       label: reserved_ops1_r3y8Y_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dc2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Dc3; else goto c3Dc4;
       c3Dc3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dc4: // global
           (_c3DbZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DbZ::I64 == 0) goto c3Dc1; else goto c3Dc0;
       c3Dc1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Dc0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DbZ::I64;
           R2 = reserved_ops_r3y8X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.046945457 UTC

[section ""cstring" . reserved_ops2_r3y8Z_bytes" {
     reserved_ops2_r3y8Z_bytes:
         I8[] [58,58]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.048740982 UTC

[section ""data" . reserved_ops3_r3y90_closure" {
     reserved_ops3_r3y90_closure:
         const reserved_ops3_r3y90_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops3_r3y90_entry() //  [R1]
         { info_tbl: [(c3Dcj,
                       label: reserved_ops3_r3y90_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dcj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Dck; else goto c3Dcl;
       c3Dck: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dcl: // global
           (_c3Dcg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Dcg::I64 == 0) goto c3Dci; else goto c3Dch;
       c3Dci: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Dch: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Dcg::I64;
           R2 = reserved_ops2_r3y8Z_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.053037253 UTC

[section ""cstring" . reserved_ops4_r3y91_bytes" {
     reserved_ops4_r3y91_bytes:
         I8[] [61]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.05554222 UTC

[section ""data" . reserved_ops5_r3y92_closure" {
     reserved_ops5_r3y92_closure:
         const reserved_ops5_r3y92_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops5_r3y92_entry() //  [R1]
         { info_tbl: [(c3DcA,
                       label: reserved_ops5_r3y92_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DcA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DcB; else goto c3DcC;
       c3DcB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DcC: // global
           (_c3Dcx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Dcx::I64 == 0) goto c3Dcz; else goto c3Dcy;
       c3Dcz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Dcy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Dcx::I64;
           R2 = reserved_ops4_r3y91_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.05938419 UTC

[section ""cstring" . reserved_ops6_r3y93_bytes" {
     reserved_ops6_r3y93_bytes:
         I8[] [92]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.061185128 UTC

[section ""data" . reserved_ops7_r3y94_closure" {
     reserved_ops7_r3y94_closure:
         const reserved_ops7_r3y94_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops7_r3y94_entry() //  [R1]
         { info_tbl: [(c3DcR,
                       label: reserved_ops7_r3y94_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DcR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DcS; else goto c3DcT;
       c3DcS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DcT: // global
           (_c3DcO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DcO::I64 == 0) goto c3DcQ; else goto c3DcP;
       c3DcQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DcP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DcO::I64;
           R2 = reserved_ops6_r3y93_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.065493706 UTC

[section ""cstring" . reserved_ops8_r3y95_bytes" {
     reserved_ops8_r3y95_bytes:
         I8[] [124]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.067375588 UTC

[section ""data" . reserved_ops9_r3y96_closure" {
     reserved_ops9_r3y96_closure:
         const reserved_ops9_r3y96_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops9_r3y96_entry() //  [R1]
         { info_tbl: [(c3Dd8,
                       label: reserved_ops9_r3y96_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dd8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Dd9; else goto c3Dda;
       c3Dd9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dda: // global
           (_c3Dd5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Dd5::I64 == 0) goto c3Dd7; else goto c3Dd6;
       c3Dd7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Dd6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Dd5::I64;
           R2 = reserved_ops8_r3y95_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.071611208 UTC

[section ""cstring" . reserved_ops10_r3y97_bytes" {
     reserved_ops10_r3y97_bytes:
         I8[] [60,45]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.073530468 UTC

[section ""data" . reserved_ops11_r3y98_closure" {
     reserved_ops11_r3y98_closure:
         const reserved_ops11_r3y98_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops11_r3y98_entry() //  [R1]
         { info_tbl: [(c3Ddp,
                       label: reserved_ops11_r3y98_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ddp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ddq; else goto c3Ddr;
       c3Ddq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ddr: // global
           (_c3Ddm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ddm::I64 == 0) goto c3Ddo; else goto c3Ddn;
       c3Ddo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ddn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ddm::I64;
           R2 = reserved_ops10_r3y97_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.077776185 UTC

[section ""cstring" . reserved_ops12_r3y99_bytes" {
     reserved_ops12_r3y99_bytes:
         I8[] [45,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.079582103 UTC

[section ""data" . reserved_ops13_r3y9a_closure" {
     reserved_ops13_r3y9a_closure:
         const reserved_ops13_r3y9a_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops13_r3y9a_entry() //  [R1]
         { info_tbl: [(c3DdG,
                       label: reserved_ops13_r3y9a_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DdG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DdH; else goto c3DdI;
       c3DdH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DdI: // global
           (_c3DdD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DdD::I64 == 0) goto c3DdF; else goto c3DdE;
       c3DdF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DdE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DdD::I64;
           R2 = reserved_ops12_r3y99_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.083843681 UTC

[section ""cstring" . reserved_ops14_r3y9b_bytes" {
     reserved_ops14_r3y9b_bytes:
         I8[] [64]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.086142845 UTC

[section ""data" . reserved_ops15_r3y9c_closure" {
     reserved_ops15_r3y9c_closure:
         const reserved_ops15_r3y9c_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops15_r3y9c_entry() //  [R1]
         { info_tbl: [(c3DdX,
                       label: reserved_ops15_r3y9c_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DdX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DdY; else goto c3DdZ;
       c3DdY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DdZ: // global
           (_c3DdU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DdU::I64 == 0) goto c3DdW; else goto c3DdV;
       c3DdW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DdV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DdU::I64;
           R2 = reserved_ops14_r3y9b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.089978097 UTC

[section ""cstring" . reserved_ops16_r3y9d_bytes" {
     reserved_ops16_r3y9d_bytes:
         I8[] [126]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.091843195 UTC

[section ""data" . reserved_ops17_r3y9e_closure" {
     reserved_ops17_r3y9e_closure:
         const reserved_ops17_r3y9e_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops17_r3y9e_entry() //  [R1]
         { info_tbl: [(c3Dee,
                       label: reserved_ops17_r3y9e_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dee: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Def; else goto c3Deg;
       c3Def: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Deg: // global
           (_c3Deb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Deb::I64 == 0) goto c3Ded; else goto c3Dec;
       c3Ded: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Dec: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Deb::I64;
           R2 = reserved_ops16_r3y9d_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.096183373 UTC

[section ""cstring" . reserved_ops18_r3y9f_bytes" {
     reserved_ops18_r3y9f_bytes:
         I8[] [61,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.098331903 UTC

[section ""data" . reserved_ops19_r3y9g_closure" {
     reserved_ops19_r3y9g_closure:
         const reserved_ops19_r3y9g_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops19_r3y9g_entry() //  [R1]
         { info_tbl: [(c3Dev,
                       label: reserved_ops19_r3y9g_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dev: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Dew; else goto c3Dex;
       c3Dew: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dex: // global
           (_c3Des::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Des::I64 == 0) goto c3Deu; else goto c3Det;
       c3Deu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Det: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Des::I64;
           R2 = reserved_ops18_r3y9f_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.102201396 UTC

[section ""data" . reserved_ops20_r3y9h_closure" {
     reserved_ops20_r3y9h_closure:
         const :_con_info;
         const reserved_ops19_r3y9g_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.103997367 UTC

[section ""data" . reserved_ops21_r3y9i_closure" {
     reserved_ops21_r3y9i_closure:
         const :_con_info;
         const reserved_ops17_r3y9e_closure;
         const reserved_ops20_r3y9h_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.106159023 UTC

[section ""data" . reserved_ops22_r3y9j_closure" {
     reserved_ops22_r3y9j_closure:
         const :_con_info;
         const reserved_ops15_r3y9c_closure;
         const reserved_ops21_r3y9i_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.107886543 UTC

[section ""data" . reserved_ops23_r3y9k_closure" {
     reserved_ops23_r3y9k_closure:
         const :_con_info;
         const reserved_ops13_r3y9a_closure;
         const reserved_ops22_r3y9j_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.109637324 UTC

[section ""data" . reserved_ops24_r3y9l_closure" {
     reserved_ops24_r3y9l_closure:
         const :_con_info;
         const reserved_ops11_r3y98_closure;
         const reserved_ops23_r3y9k_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.111390957 UTC

[section ""data" . reserved_ops25_r3y9m_closure" {
     reserved_ops25_r3y9m_closure:
         const :_con_info;
         const reserved_ops9_r3y96_closure;
         const reserved_ops24_r3y9l_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.113172307 UTC

[section ""data" . reserved_ops26_r3y9n_closure" {
     reserved_ops26_r3y9n_closure:
         const :_con_info;
         const reserved_ops7_r3y94_closure;
         const reserved_ops25_r3y9m_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.115353054 UTC

[section ""data" . reserved_ops27_r3y9o_closure" {
     reserved_ops27_r3y9o_closure:
         const :_con_info;
         const reserved_ops5_r3y92_closure;
         const reserved_ops26_r3y9n_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.117024974 UTC

[section ""data" . reserved_ops28_r3y9p_closure" {
     reserved_ops28_r3y9p_closure:
         const :_con_info;
         const reserved_ops3_r3y90_closure;
         const reserved_ops27_r3y9o_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.119145791 UTC

[section ""data" . reserved_ops29_r3y9q_closure" {
     reserved_ops29_r3y9q_closure:
         const :_con_info;
         const reserved_ops1_r3y8Y_closure;
         const reserved_ops28_r3y9p_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.122921728 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c==1_closure" {
     Text.Read.Lex.$fEqLexeme_$c==1_closure:
         const Text.Read.Lex.$fEqLexeme_$c==1_info;
 },
 Text.Read.Lex.$fEqLexeme_$c==1_entry() //  [R2, R3]
         { info_tbl: [(c3Df0,
                       label: Text.Read.Lex.$fEqLexeme_$c==1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Df0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Df1; else goto c3Df2;
       c3Df1: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c==1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Df2: // global
           I64[Sp - 16] = block_c3DeT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DhN; else goto c3DeU;
       u3DhN: // global
           call _c3DeT(R1) args: 0, res: 0, upd: 0;
       c3DeU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DeT() //  [R1]
         { info_tbl: [(c3DeT,
                       label: block_c3DeT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DeT: // global
           _s3ygy::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3DeX; else goto c3DeY;
       c3DeX: // global
           I64[Sp - 8] = block_c3Df5_info;
           _s3ygA::P64 = P64[R1 + 7];
           _s3ygB::P64 = P64[R1 + 15];
           R1 = _s3ygy::P64;
           P64[Sp] = _s3ygB::P64;
           P64[Sp + 8] = _s3ygA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DhL; else goto c3Df7;
       u3DhL: // global
           call _c3Df5(R1) args: 0, res: 0, upd: 0;
       c3Df7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3DeY: // global
           I64[Sp - 16] = block_c3DfB_info;
           _s3ygN::P64 = P64[R1 + 6];
           _s3ygO::P64 = P64[R1 + 14];
           _s3ygP::P64 = P64[R1 + 22];
           R1 = _s3ygy::P64;
           P64[Sp - 8] = _s3ygP::P64;
           P64[Sp] = _s3ygO::P64;
           P64[Sp + 8] = _s3ygN::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DhM; else goto c3DfD;
       u3DhM: // global
           call _c3DfB(R1) args: 0, res: 0, upd: 0;
       c3DfD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Df5() //  [R1]
         { info_tbl: [(c3Df5,
                       label: block_c3Df5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Df5: // global
           if (R1 & 7 == 1) goto c3Dfj; else goto u3DhJ;
       c3Dfj: // global
           I64[Sp - 8] = block_c3Dfb_info;
           _s3ygD::P64 = P64[R1 + 7];
           _s3ygE::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s3ygE::P64;
           P64[Sp + 16] = _s3ygD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DhO; else goto c3Dfc;
       u3DhO: // global
           call _c3Dfb(R1) args: 0, res: 0, upd: 0;
       c3Dfc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3DhJ: // global
           Sp = Sp + 24;
           call _c3Dhl() args: 0, res: 0, upd: 0;
     }
 },
 _c3Dfb() //  [R1]
         { info_tbl: [(c3Dfb,
                       label: block_c3Dfb_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dfb: // global
           I64[Sp] = block_c3Dfg_info;
           _s3ygG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s3ygG::I64;
           if (R1 & 7 != 0) goto u3DhQ; else goto c3Dfl;
       u3DhQ: // global
           call _c3Dfg(R1) args: 0, res: 0, upd: 0;
       c3Dfl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dfg() //  [R1]
         { info_tbl: [(c3Dfg,
                       label: block_c3Dfg_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dfg: // global
           if (I64[Sp + 24] == I64[R1 + 7]) goto c3Dfu; else goto u3DhK;
       c3Dfu: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
       u3DhK: // global
           Sp = Sp + 32;
           call _c3Dhl() args: 0, res: 0, upd: 0;
     }
 },
 _c3DfB() //  [R1]
         { info_tbl: [(c3DfB,
                       label: block_c3DfB_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DfB: // global
           if (R1 & 7 == 1) goto u3DhA; else goto c3DfO;
       u3DhA: // global
           Sp = Sp + 32;
           call _c3Dhl() args: 0, res: 0, upd: 0;
       c3DfO: // global
           I64[Sp - 8] = block_c3DfM_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 22];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 8;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DfM() //  [R1]
         { info_tbl: [(c3DfM,
                       label: block_c3DfM_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DfM: // global
           if (R1 & 7 == 1) goto u3DhB; else goto c3DgF;
       u3DhB: // global
           Sp = Sp + 40;
           call _c3Dhl() args: 0, res: 0, upd: 0;
       c3DgF: // global
           I64[Sp] = block_c3DfZ_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3DhT; else goto c3DgG;
       u3DhT: // global
           call _c3DfZ(R1) args: 0, res: 0, upd: 0;
       c3DgG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DfZ() //  [R1]
         { info_tbl: [(c3DfZ,
                       label: block_c3DfZ_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DfZ: // global
           _s3ygU::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c3DgN; else goto c3Dh3;
       c3DgN: // global
           I64[Sp] = block_c3DgK_info;
           R1 = _s3ygU::P64;
           if (R1 & 7 != 0) goto u3DhV; else goto c3DgO;
       u3DhV: // global
           call _c3DgK(R1) args: 0, res: 0, upd: 0;
       c3DgO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dh3: // global
           I64[Sp] = block_c3Dh1_info;
           _s3yh7::P64 = P64[R1 + 6];
           R1 = _s3ygU::P64;
           P64[Sp + 32] = _s3yh7::P64;
           if (R1 & 7 != 0) goto u3DhW; else goto c3Dh4;
       u3DhW: // global
           call _c3Dh1(R1) args: 0, res: 0, upd: 0;
       c3Dh4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DgK() //  [R1]
         { info_tbl: [(c3DgK,
                       label: block_c3DgK_info
                       rep:StackRep [False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DgK: // global
           if (R1 & 7 == 1) goto u3DhF; else goto u3DhG;
       u3DhF: // global
           Sp = Sp + 8;
           call _s3ygX() args: 0, res: 0, upd: 0;
       u3DhG: // global
           Sp = Sp + 40;
           call _c3Dhl() args: 0, res: 0, upd: 0;
     }
 },
 _c3Dh1() //  [R1]
         { info_tbl: [(c3Dh1,
                       label: block_c3Dh1_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dh1: // global
           if (R1 & 7 == 1) goto u3DhC; else goto c3Dhf;
       u3DhC: // global
           Sp = Sp + 40;
           call _c3Dhl() args: 0, res: 0, upd: 0;
       c3Dhf: // global
           I64[Sp] = block_c3Dhd_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 32];
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dhd() //  [R1]
         { info_tbl: [(c3Dhd,
                       label: block_c3Dhd_info
                       rep:StackRep [False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dhd: // global
           if (R1 & 7 == 1) goto u3DhD; else goto u3DhE;
       u3DhD: // global
           Sp = Sp + 40;
           call _c3Dhl() args: 0, res: 0, upd: 0;
       u3DhE: // global
           Sp = Sp + 8;
           call _s3ygX() args: 0, res: 0, upd: 0;
     }
 },
 _s3ygX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3ygX: // global
           I64[Sp - 8] = block_c3Dg4_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Di6; else goto c3Dg6;
       u3Di6: // global
           call _c3Dg4(R1) args: 0, res: 0, upd: 0;
       c3Dg6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dg4() //  [R1]
         { info_tbl: [(c3Dg4,
                       label: block_c3Dg4_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dg4: // global
           _s3ygV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3Dgd; else goto c3Dgt;
       c3Dgd: // global
           I64[Sp + 32] = block_c3Dga_info;
           R1 = _s3ygV::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3DhX; else goto c3Dge;
       u3DhX: // global
           call _c3Dga(R1) args: 0, res: 0, upd: 0;
       c3Dge: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dgt: // global
           I64[Sp + 24] = block_c3Dgr_info;
           _s3yh1::P64 = P64[R1 + 6];
           R1 = _s3ygV::P64;
           P64[Sp + 32] = _s3yh1::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3DhY; else goto c3Dgu;
       u3DhY: // global
           call _c3Dgr(R1) args: 0, res: 0, upd: 0;
       c3Dgu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dga() //  [R1]
         { info_tbl: [(c3Dga,
                       label: block_c3Dga_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dga: // global
           if (R1 & 7 == 1) goto c3Dgk; else goto u3DhI;
       c3Dgk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3DhI: // global
           Sp = Sp + 8;
           call _c3Dhl() args: 0, res: 0, upd: 0;
     }
 },
 _c3Dgr() //  [R1]
         { info_tbl: [(c3Dgr,
                       label: block_c3Dgr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dgr: // global
           if (R1 & 7 == 1) goto u3DhH; else goto c3DgE;
       u3DhH: // global
           Sp = Sp + 16;
           call _c3Dhl() args: 0, res: 0, upd: 0;
       c3DgE: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3Dhl() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dhl: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.154973226 UTC

[section ""data" . Text.Read.Lex.$fEqNumber_$c/=_closure" {
     Text.Read.Lex.$fEqNumber_$c/=_closure:
         const Text.Read.Lex.$fEqNumber_$c/=_info;
 },
 Text.Read.Lex.$fEqNumber_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c3DjF,
                       label: Text.Read.Lex.$fEqNumber_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DjF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DjG; else goto c3DjH;
       c3DjG: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqNumber_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DjH: // global
           I64[Sp - 8] = block_c3Djz_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$fEqLexeme_$c==1_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Djz() //  [R1]
         { info_tbl: [(c3Djz,
                       label: block_c3Djz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Djz: // global
           if (R1 & 7 == 1) goto c3DjC; else goto c3DjD;
       c3DjC: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DjD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.160741332 UTC

[section ""data" . Text.Read.Lex.$fEqNumber_closure" {
     Text.Read.Lex.$fEqNumber_closure:
         const GHC.Classes.C:Eq_con_info;
         const Text.Read.Lex.$fEqLexeme_$c==1_closure+2;
         const Text.Read.Lex.$fEqNumber_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.163918837 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c==_closure" {
     Text.Read.Lex.$fEqLexeme_$c==_closure:
         const Text.Read.Lex.$fEqLexeme_$c==_info;
 },
 Text.Read.Lex.$fEqLexeme_$c==_entry() //  [R2, R3]
         { info_tbl: [(c3Dkh,
                       label: Text.Read.Lex.$fEqLexeme_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dkh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Dki; else goto c3Dkj;
       c3Dki: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Dkj: // global
           I64[Sp - 16] = block_c3Dk5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Dmm; else goto c3Dk6;
       u3Dmm: // global
           call _c3Dk5(R1) args: 0, res: 0, upd: 0;
       c3Dk6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dk5() //  [R1]
         { info_tbl: [(c3Dk5,
                       label: block_c3Dk5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dk5: // global
           _s3yhf::P64 = P64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3Dk9;
               case 2 : goto c3Dka;
               case 3 : goto c3Dkb;
               case 4 : goto c3Dkc;
               case 5 : goto c3Dkd;
               case 6 : goto c3Dke;
               case 7 : goto c3Dkf;
           }
       c3Dkf: // global
           I64[Sp + 8] = block_c3DlO_info;
           R1 = _s3yhf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Dml; else goto c3DlQ;
       u3Dml: // global
           call _c3DlO(R1) args: 0, res: 0, upd: 0;
       c3DlQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dke: // global
           I64[Sp] = block_c3Dlz_info;
           _s3yhw::P64 = P64[R1 + 2];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhw::P64;
           if (R1 & 7 != 0) goto u3Dmk; else goto c3DlB;
       u3Dmk: // global
           call _c3Dlz(R1) args: 0, res: 0, upd: 0;
       c3DlB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dkd: // global
           I64[Sp] = block_c3Dlk_info;
           _s3yht::P64 = P64[R1 + 3];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yht::P64;
           if (R1 & 7 != 0) goto u3Dmj; else goto c3Dlm;
       u3Dmj: // global
           call _c3Dlk(R1) args: 0, res: 0, upd: 0;
       c3Dlm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dkc: // global
           I64[Sp] = block_c3Dl5_info;
           _s3yhq::P64 = P64[R1 + 4];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhq::P64;
           if (R1 & 7 != 0) goto u3Dmi; else goto c3Dl7;
       u3Dmi: // global
           call _c3Dl5(R1) args: 0, res: 0, upd: 0;
       c3Dl7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dkb: // global
           I64[Sp] = block_c3DkQ_info;
           _s3yhn::P64 = P64[R1 + 5];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhn::P64;
           if (R1 & 7 != 0) goto u3Dmh; else goto c3DkS;
       u3Dmh: // global
           call _c3DkQ(R1) args: 0, res: 0, upd: 0;
       c3DkS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dka: // global
           I64[Sp] = block_c3DkB_info;
           _s3yhk::P64 = P64[R1 + 6];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhk::P64;
           if (R1 & 7 != 0) goto u3Dmg; else goto c3DkD;
       u3Dmg: // global
           call _c3DkB(R1) args: 0, res: 0, upd: 0;
       c3DkD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Dk9: // global
           I64[Sp] = block_c3Dkm_info;
           _s3yhh::P64 = P64[R1 + 7];
           R1 = _s3yhf::P64;
           P64[Sp + 8] = _s3yhh::P64;
           if (R1 & 7 != 0) goto u3Dmf; else goto c3Dko;
       u3Dmf: // global
           call _c3Dkm(R1) args: 0, res: 0, upd: 0;
       c3Dko: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DlO() //  [R1]
         { info_tbl: [(c3DlO,
                       label: block_c3DlO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DlO: // global
           if (R1 & 7 == 7) goto c3Dm0; else goto u3Dm8;
       c3Dm0: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Dm8: // global
           Sp = Sp + 8;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 _c3Dlz() //  [R1]
         { info_tbl: [(c3Dlz,
                       label: block_c3Dlz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dlz: // global
           if (R1 & 7 == 6) goto c3DlL; else goto u3Dm9;
       c3DlL: // global
           R3 = P64[R1 + 2];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.Read.Lex.$fEqLexeme_$c==1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       u3Dm9: // global
           Sp = Sp + 16;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 _c3Dlk() //  [R1]
         { info_tbl: [(c3Dlk,
                       label: block_c3Dlk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dlk: // global
           if (R1 & 7 == 5) goto c3Dlw; else goto u3Dma;
       c3Dlw: // global
           R3 = P64[R1 + 3];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3Dma: // global
           Sp = Sp + 16;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 _c3Dl5() //  [R1]
         { info_tbl: [(c3Dl5,
                       label: block_c3Dl5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dl5: // global
           if (R1 & 7 == 4) goto c3Dlh; else goto u3Dmb;
       c3Dlh: // global
           R3 = P64[R1 + 4];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3Dmb: // global
           Sp = Sp + 16;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 _c3DkQ() //  [R1]
         { info_tbl: [(c3DkQ,
                       label: block_c3DkQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DkQ: // global
           if (R1 & 7 == 3) goto c3Dl2; else goto u3Dmc;
       c3Dl2: // global
           R3 = P64[R1 + 5];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3Dmc: // global
           Sp = Sp + 16;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 _c3DkB() //  [R1]
         { info_tbl: [(c3DkB,
                       label: block_c3DkB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DkB: // global
           if (R1 & 7 == 2) goto c3DkN; else goto u3Dmd;
       c3DkN: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3Dmd: // global
           Sp = Sp + 16;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 _c3Dkm() //  [R1]
         { info_tbl: [(c3Dkm,
                       label: block_c3Dkm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dkm: // global
           if (R1 & 7 == 1) goto c3Dky; else goto u3Dme;
       c3Dky: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.eqChar_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3Dme: // global
           Sp = Sp + 16;
           call _c3DlW() args: 0, res: 0, upd: 0;
     }
 },
 _c3DlW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DlW: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.187105346 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c/=_closure" {
     Text.Read.Lex.$fEqLexeme_$c/=_closure:
         const Text.Read.Lex.$fEqLexeme_$c/=_info;
 },
 Text.Read.Lex.$fEqLexeme_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c3DnA,
                       label: Text.Read.Lex.$fEqLexeme_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DnA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DnB; else goto c3DnC;
       c3DnB: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DnC: // global
           I64[Sp - 8] = block_c3Dnu_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$fEqLexeme_$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dnu() //  [R1]
         { info_tbl: [(c3Dnu,
                       label: block_c3Dnu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dnu: // global
           if (R1 & 7 == 1) goto c3Dnx; else goto c3Dny;
       c3Dnx: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Dny: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.192949495 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_closure" {
     Text.Read.Lex.$fEqLexeme_closure:
         const GHC.Classes.C:Eq_con_info;
         const Text.Read.Lex.$fEqLexeme_$c==_closure+2;
         const Text.Read.Lex.$fEqLexeme_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.195047061 UTC

[section ""data" . Text.Read.Lex.numberToFixed2_closure" {
     Text.Read.Lex.numberToFixed2_closure:
         const Text.Read.Lex.numberToFixed2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToFixed2_entry() //  [R1]
         { info_tbl: [(c3Do2,
                       label: Text.Read.Lex.numberToFixed2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Do2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Do3; else goto c3Do4;
       c3Do3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Do4: // global
           (_c3DnZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DnZ::I64 == 0) goto c3Do1; else goto c3Do0;
       c3Do1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Do0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DnZ::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.199785773 UTC

[section ""cstring" . lvl2_r3y9r_bytes" {
     lvl2_r3y9r_bytes:
         I8[] [116,104,105,115,32,115,104,111,117,108,100,32,110,111,116,32,104,97,112,112,101,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.201852389 UTC

[section ""data" . lvl3_r3y9s_closure" {
     lvl3_r3y9s_closure:
         const lvl3_r3y9s_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r3y9s_entry() //  [R1]
         { info_tbl: [(c3Dol,
                       label: lvl3_r3y9s_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dol: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Dom; else goto c3Don;
       c3Dom: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Don: // global
           (_c3Dog::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Dog::I64 == 0) goto c3Doi; else goto c3Doh;
       c3Doi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Doh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Dog::I64;
           I64[Sp - 24] = block_c3Doj_info;
           R2 = lvl2_r3y9r_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Doj() //  [R1]
         { info_tbl: [(c3Doj,
                       label: block_c3Doj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Doj: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.208791071 UTC

[section ""data" . combine_r3y9t_closure" {
     combine_r3y9t_closure:
         const combine_r3y9t_info;
         const 0;
 },
 sat_s3yhO_entry() //  [R1]
         { info_tbl: [(c3Dp3,
                       label: sat_s3yhO_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dp3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Dp4; else goto c3Dp5;
       c3Dp4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dp5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call combine_r3y9t_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 combine_r3y9t_entry() //  [R2, R3]
         { info_tbl: [(c3Dpa,
                       label: combine_r3y9t_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dpa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Dpb; else goto c3Dpc;
       c3Dpb: // global
           R3 = R3;
           R2 = R2;
           R1 = combine_r3y9t_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Dpc: // global
           I64[Sp - 16] = block_c3DoF_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Dpt; else goto c3DoG;
       u3Dpt: // global
           call _c3DoF(R1) args: 0, res: 0, upd: 0;
       c3DoG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DoF() //  [R1]
         { info_tbl: [(c3DoF,
                       label: block_c3DoF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DoF: // global
           if (R1 & 7 == 1) goto c3Dp7; else goto c3Dp8;
       c3Dp7: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Dp8: // global
           I64[Sp - 8] = block_c3DoL_info;
           _s3yhH::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3yhH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Dps; else goto c3DoM;
       u3Dps: // global
           call _c3DoL(R1) args: 0, res: 0, upd: 0;
       c3DoM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DoL() //  [R1]
         { info_tbl: [(c3DoL,
                       label: block_c3DoL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DoL: // global
           if (R1 & 7 == 1) goto c3Dpj; else goto c3Dpm;
       c3Dpj: // global
           R1 = lvl3_r3y9s_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Dpm: // global
           I64[Sp - 8] = block_c3DoR_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DoR() //  [R1]
         { info_tbl: [(c3DoR,
                       label: block_c3DoR_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DoR: // global
           I64[Sp] = block_c3DoV_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DoV() //  [R1]
         { info_tbl: [(c3DoV,
                       label: block_c3DoV_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DoV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Dpq; else goto c3Dpp;
       c3Dpq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Dpp: // global
           I64[Hp - 48] = sat_s3yhO_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.224615176 UTC

[section ""data" . Text.Read.Lex.numberToFixed_go_closure" {
     Text.Read.Lex.numberToFixed_go_closure:
         const Text.Read.Lex.numberToFixed_go_info;
         const 0;
 },
 Text.Read.Lex.numberToFixed_go_entry() //  [R2, R3, R4]
         { info_tbl: [(c3Dr7,
                       label: Text.Read.Lex.numberToFixed_go_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dr7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Dr8; else goto u3Ds5;
       c3Dr8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_go_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3Ds5: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3Dq4() args: 0, res: 0, upd: 0;
     }
 },
 _c3Dq4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dq4: // global
           I64[Sp - 8] = block_c3Dq7_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Dsc; else goto c3Dq8;
       u3Dsc: // global
           call _c3Dq7(R1) args: 0, res: 0, upd: 0;
       c3Dq8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dq7() //  [R1]
         { info_tbl: [(c3Dq7,
                       label: block_c3Dq7_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dq7: // global
           if (R1 & 7 == 1) goto c3Dr4; else goto c3Dr5;
       c3Dr4: // global
           R1 = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Dr5: // global
           I64[Sp - 8] = block_c3Dqd_info;
           _s3yhS::P64 = R1;
           _s3yhT::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3yhT::P64;
           P64[Sp + 24] = _s3yhS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Dsd; else goto c3Dqe;
       u3Dsd: // global
           call _c3Dqd(R1) args: 0, res: 0, upd: 0;
       c3Dqe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dqd() //  [R1]
         { info_tbl: [(c3Dqd,
                       label: block_c3Dqd_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dqd: // global
           if (R1 & 7 == 1) goto c3Drg; else goto c3Dri;
       c3Drg: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Dri: // global
           I64[Sp + 8] = block_c3Dqj_info;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Dse; else goto c3Dqk;
       u3Dse: // global
           call _c3Dqj(R1) args: 0, res: 0, upd: 0;
       c3Dqk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dqj() //  [R1]
         { info_tbl: [(c3Dqj,
                       label: block_c3Dqj_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dqj: // global
           _s3yhZ::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_s3yhZ::I64, 40)) goto c3DrN; else goto c3DrO;
       c3DrN: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 8;
           call _c3Drn() args: 0, res: 0, upd: 0;
       c3DrO: // global
           I64[Sp] = block_c3Dqs_info;
           _s3yhP::P64 = P64[Sp + 8];
           R3 = _s3yhP::P64;
           R2 = _s3yhP::P64;
           I64[Sp + 16] = _s3yhZ::I64;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Drn() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Drn: // global
           I64[Sp - 8] = block_c3Drp_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Dsl; else goto c3Drr;
       u3Dsl: // global
           call _c3Drp(R1) args: 0, res: 0, upd: 0;
       c3Drr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Drp() //  [R1]
         { info_tbl: [(c3Drp,
                       label: block_c3Drp_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Drp: // global
           _s3yi2::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3Drx; else goto c3DrG;
       c3Drx: // global
           R1 = _s3yi2::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3DrG: // global
           I64[Sp] = block_c3DrA_info;
           R3 = P64[Sp + 8];
           R2 = _s3yi2::P64;
           P64[Sp + 16] = P64[R1 + 14];
           P64[Sp + 24] = P64[R1 + 6];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DrA() //  [R1]
         { info_tbl: [(c3DrA,
                       label: block_c3DrA_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DrA: // global
           I64[Sp] = block_c3DrE_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DrE() //  [R1]
         { info_tbl: [(c3DrE,
                       label: block_c3DrE_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DrE: // global
           P64[Sp + 24] = R1;
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp + 8;
           call _c3Drn() args: 0, res: 0, upd: 0;
     }
 },
 _c3Dqs() //  [R1]
         { info_tbl: [(c3Dqs,
                       label: block_c3Dqs_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dqs: // global
           _s3yhZ::I64 = I64[Sp + 16];
           _s3yia::I64 = _s3yhZ::I64 - (_s3yhZ::I64 + (_s3yhZ::I64 >> 63)) & (-2);
           if (_s3yia::I64 == 0) goto c3DrY; else goto u3Ds8;
       c3DrY: // global
           _s3yhP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3DqS_info;
           R3 = P64[Sp + 24];
           R2 = _s3yhP::P64;
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call combine_r3y9t_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3Ds8: // global
           I64[Sp - 8] = _s3yia::I64;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c3DqA() args: 0, res: 0, upd: 0;
     }
 },
 _c3DqS() //  [R1]
         { info_tbl: [(c3DqS,
                       label: block_c3DqS_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DqS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ds2; else goto c3Ds1;
       c3Ds2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ds1: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3yig::I64 = I64[Sp + 8] + 1;
           I64[Hp] = %MO_S_Shr_W64(_s3yig::I64 + (_s3yig::I64 >> 63), 1);
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = R1;
           call _c3Dq4() args: 0, res: 0, upd: 0;
     }
 },
 _c3DqA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DqA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DrU; else goto c3DrT;
       c3DrU: // global
           HpAlloc = 24;
           _s3yia::I64 = I64[Sp];
           I64[Sp] = block_c3Dqz_info;
           R1 = _s3yia::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DrT: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Text.Read.Lex.numberToFixed2_closure;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3DqD_info;
           R3 = Hp - 14;
           R2 = P64[Sp + 16];
           call combine_r3y9t_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dqz() //  [R1]
         { info_tbl: [(c3Dqz,
                       label: block_c3Dqz_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dqz: // global
           I64[Sp] = R1;
           call _c3DqA() args: 0, res: 0, upd: 0;
     }
 },
 _c3DqD() //  [R1]
         { info_tbl: [(c3DqD,
                       label: block_c3DqD_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DqD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DrX; else goto c3DrW;
       c3DrX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DrW: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3yib::I64 = I64[Sp + 24] + 1;
           I64[Hp] = %MO_S_Shr_W64(_s3yib::I64 + (_s3yib::I64 >> 63), 1);
           P64[Sp + 16] = P64[Sp + 8];
           P64[Sp + 24] = Hp - 7;
           P64[Sp + 32] = R1;
           Sp = Sp + 16;
           call _c3Dq4() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.25283257 UTC

[section ""data" . Text.Read.Lex.valInteger_closure" {
     Text.Read.Lex.valInteger_closure:
         const Text.Read.Lex.valInteger_info;
         const 0;
 },
 sat_s3yin_entry() //  [R1]
         { info_tbl: [(c3DtR,
                       label: sat_s3yin_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DtR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DtV; else goto c3DtW;
       c3DtV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DtW: // global
           I64[Sp - 8] = block_c3DtP_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DtP() //  [R1]
         { info_tbl: [(c3DtP,
                       label: block_c3DtP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DtP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DtZ; else goto c3DtY;
       c3DtZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DtY: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.valInteger_entry() //  [R2, R3]
         { info_tbl: [(c3Du0,
                       label: Text.Read.Lex.valInteger_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Du0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Du1; else goto c3Du2;
       c3Du1: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.valInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Du2: // global
           I64[Sp - 24] = block_c3DtH_info;
           _s3yil::P64 = R3;
           R3 = R3;
           _s3yik::P64 = R2;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 16] = _s3yik::P64;
           P64[Sp - 8] = _s3yil::P64;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DtH() //  [R1]
         { info_tbl: [(c3DtH,
                       label: block_c3DtH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DtH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Du5; else goto c3Du4;
       c3Du5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Du4: // global
           I64[Hp - 16] = sat_s3yin_info;
           P64[Hp] = P64[Sp + 16];
           R4 = R1;
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.264374223 UTC

[section ""data" . Text.Read.Lex.$w$sreadIntP_closure" {
     Text.Read.Lex.$w$sreadIntP_closure:
         const Text.Read.Lex.$w$sreadIntP_info;
         const 0;
 },
 sat_s3yiz_entry() //  [R1]
         { info_tbl: [(c3DuZ,
                       label: sat_s3yiz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DuZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Dv3; else goto c3Dv4;
       c3Dv3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dv4: // global
           I64[Sp - 8] = block_c3DuX_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DuX() //  [R1]
         { info_tbl: [(c3DuX,
                       label: block_c3DuX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DuX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Dv7; else goto c3Dv6;
       c3Dv7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Dv6: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yiB_entry() //  [R1]
         { info_tbl: [(c3Dv8,
                       label: sat_s3yiB_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dv8: // global
           _s3yiB::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3Dv9; else goto c3Dva;
       c3Dva: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Dvc; else goto c3Dvb;
       c3Dvc: // global
           HpAlloc = 24;
           goto c3Dv9;
       c3Dv9: // global
           R1 = _s3yiB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dvb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yiB::P64;
           _s3yip::P64 = P64[_s3yiB::P64 + 16];
           _s3yir::P64 = P64[_s3yiB::P64 + 24];
           _s3yit::P64 = P64[_s3yiB::P64 + 32];
           _s3yiv::P64 = P64[_s3yiB::P64 + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yit::P64;
           P64[Hp] = _s3yiv::P64;
           I64[Sp - 32] = block_c3DuL_info;
           R3 = Hp - 14;
           R2 = _s3yir::P64;
           P64[Sp - 24] = _s3yip::P64;
           Sp = Sp - 32;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3DuL() //  [R1]
         { info_tbl: [(c3DuL,
                       label: block_c3DuL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DuL: // global
           I64[Sp - 8] = block_c3DuP_info;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3DuP() //  [R1]
         { info_tbl: [(c3DuP,
                       label: block_c3DuP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DuP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Dvg; else goto c3Dvf;
       c3Dvg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Dvf: // global
           I64[Hp - 16] = sat_s3yiz_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yiC_entry() //  [R1, R2]
         { info_tbl: [(c3Dvh,
                       label: sat_s3yiC_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dvh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Dvl; else goto c3Dvk;
       c3Dvl: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Dvk: // global
           _s3yip::P64 = P64[R1 + 7];
           _s3yir::P64 = P64[R1 + 15];
           _s3yis::P64 = P64[R1 + 23];
           _s3yit::P64 = P64[R1 + 31];
           I64[Hp - 40] = sat_s3yiB_info;
           P64[Hp - 24] = _s3yip::P64;
           P64[Hp - 16] = _s3yir::P64;
           P64[Hp - 8] = _s3yit::P64;
           P64[Hp] = R2;
           R2 = Hp - 40;
           R1 = _s3yis::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yiF_entry() //  [R1, R2]
         { info_tbl: [(c3Dvq,
                       label: sat_s3yiF_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dvq: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3Dvr; else goto c3Dvs;
       c3Dvr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Dvs: // global
           I64[Sp - 48] = block_c3Duw_info;
           _s3yit::P64 = R2;
           R2 = R2;
           _s3yip::P64 = P64[R1 + 7];
           _s3yiq::P64 = P64[R1 + 15];
           _s3yir::P64 = P64[R1 + 23];
           _s3yis::P64 = P64[R1 + 31];
           R1 = _s3yiq::P64;
           P64[Sp - 40] = _s3yip::P64;
           P64[Sp - 32] = _s3yiq::P64;
           P64[Sp - 24] = _s3yir::P64;
           P64[Sp - 16] = _s3yis::P64;
           P64[Sp - 8] = _s3yit::P64;
           Sp = Sp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Duw() //  [R1]
         { info_tbl: [(c3Duw,
                       label: block_c3Duw_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Duw: // global
           if (R1 & 7 == 1) goto c3Dvn; else goto c3Dvo;
       c3Dvn: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Dvo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3DvA; else goto c3Dvz;
       c3DvA: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Dvz: // global
           I64[Hp - 32] = sat_s3yiC_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           I64[Sp + 40] = block_c3Dvv_info;
           R3 = Hp - 31;
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dvv() //  [R1]
         { info_tbl: [(c3Dvv,
                       label: block_c3Dvv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dvv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DvD; else goto c3DvC;
       c3DvD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DvC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$w$sreadIntP_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3DvE,
                       label: Text.Read.Lex.$w$sreadIntP_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DvE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3DvI; else goto c3DvH;
       c3DvI: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$sreadIntP_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DvH: // global
           I64[Hp - 32] = sat_s3yiF_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.287957332 UTC

[section ""data" . Text.Read.Lex.readIntP1_closure" {
     Text.Read.Lex.readIntP1_closure:
         const Text.Read.Lex.readIntP1_info;
         const 0;
 },
 Text.Read.Lex.readIntP1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3Dwz,
                       label: Text.Read.Lex.readIntP1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dwz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DwA; else goto c3DwB;
       c3DwA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readIntP1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DwB: // global
           I64[Sp - 8] = block_c3Dww_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dww() //  [R1]
         { info_tbl: [(c3Dww,
                       label: block_c3Dww_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dww: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DwE; else goto c3DwD;
       c3DwE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DwD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.294762072 UTC

[section ""data" . Text.Read.Lex.readIntP_$sreadIntP_closure" {
     Text.Read.Lex.readIntP_$sreadIntP_closure:
         const Text.Read.Lex.readIntP_$sreadIntP_info;
         const 0;
 },
 Text.Read.Lex.readIntP_$sreadIntP_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3DwS,
                       label: Text.Read.Lex.readIntP_$sreadIntP_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DwS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readIntP1_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.300547554 UTC

[section ""data" . Text.Read.Lex.$wreadIntP_closure" {
     Text.Read.Lex.$wreadIntP_closure:
         const Text.Read.Lex.$wreadIntP_info;
         const 0;
 },
 lvl116_s3yiR_entry() //  [R1]
         { info_tbl: [(c3Dx7,
                       label: lvl116_s3yiR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dx7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Dx8; else goto c3Dx9;
       c3Dx8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dx9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yj4_entry() //  [R1]
         { info_tbl: [(c3DxU,
                       label: sat_s3yj4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DxU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DxV; else goto c3DxW;
       c3DxV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DxW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3DxR_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Dy0; else goto c3DxS;
       u3Dy0: // global
           call _c3DxR(R1) args: 0, res: 0, upd: 0;
       c3DxS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3DxR() //  [R1]
         { info_tbl: [(c3DxR,
                       label: block_c3DxR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DxR: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yj5_entry() //  [R1]
         { info_tbl: [(c3Dy1,
                       label: sat_s3yj5_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dy1: // global
           _s3yj5::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Dy2; else goto c3Dy3;
       c3Dy3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Dy5; else goto c3Dy4;
       c3Dy5: // global
           HpAlloc = 24;
           goto c3Dy2;
       c3Dy2: // global
           R1 = _s3yj5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dy4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yj5::P64;
           _s3yiM::P64 = P64[_s3yj5::P64 + 16];
           _s3yiZ::P64 = P64[_s3yj5::P64 + 24];
           I64[Hp - 16] = sat_s3yj4_info;
           P64[Hp] = _s3yiZ::P64;
           R2 = _s3yiM::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yj1_entry() //  [R1]
         { info_tbl: [(c3Dya,
                       label: sat_s3yj1_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dya: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Dyb; else goto c3Dyc;
       c3Dyb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dyc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s3yj9_entry() //  [R1]
         { info_tbl: [(c3Dyd,
                       label: sat_s3yj9_info
                       rep:HeapRep 6 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dyd: // global
           _s3yj9::P64 = R1;
           if ((Sp + -72) < SpLim) (likely: False) goto c3Dye; else goto c3Dyf;
       c3Dyf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Dyh; else goto c3Dyg;
       c3Dyh: // global
           HpAlloc = 24;
           goto c3Dye;
       c3Dye: // global
           R1 = _s3yj9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Dyg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yj9::P64;
           _s3yiM::P64 = P64[_s3yj9::P64 + 16];
           _s3yiN::P64 = P64[_s3yj9::P64 + 24];
           _s3yiP::P64 = P64[_s3yj9::P64 + 32];
           _s3yiR::P64 = P64[_s3yj9::P64 + 40];
           _s3yiS::P64 = P64[_s3yj9::P64 + 48];
           _s3yiU::P64 = P64[_s3yj9::P64 + 56];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yiS::P64;
           P64[Hp] = _s3yiU::P64;
           I64[Sp - 48] = block_c3Dxu_info;
           R3 = Hp - 14;
           R2 = _s3yiP::P64;
           P64[Sp - 40] = _s3yiM::P64;
           P64[Sp - 32] = _s3yiN::P64;
           P64[Sp - 24] = _s3yiR::P64;
           Sp = Sp - 48;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Dxu() //  [R1]
         { info_tbl: [(c3Dxu,
                       label: block_c3Dxu_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dxu: // global
           P64[Sp] = R1;
           P64[Sp + 24] = P64[Sp + 24];
           call _c3DxB() args: 0, res: 0, upd: 0;
     }
 },
 _c3DxB() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DxB: // global
           _s3yiX::P64 = P64[Sp];
           I64[Sp] = block_c3DxD_info;
           R1 = _s3yiX::P64;
           if (R1 & 7 != 0) goto u3Dyz; else goto c3DxE;
       u3Dyz: // global
           call _c3DxD(R1) args: 0, res: 0, upd: 0;
       c3DxE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3DxD() //  [R1]
         { info_tbl: [(c3DxD,
                       label: block_c3DxD_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DxD: // global
           _s3yiW::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3Dyn; else goto c3Dyp;
       c3Dyn: // global
           R1 = _s3yiW::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c3Dyp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Dys; else goto c3Dyr;
       c3Dys: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Dyr: // global
           _s3yiZ::P64 = P64[R1 + 6];
           _s3yj0::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_s3yj5_info;
           _s3yiM::P64 = P64[Sp + 8];
           P64[Hp - 48] = _s3yiM::P64;
           P64[Hp - 40] = _s3yiZ::P64;
           I64[Hp - 32] = sat_s3yj1_info;
           P64[Hp - 16] = _s3yiM::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s3yiW::P64;
           I64[Sp] = block_c3Dyo_info;
           R2 = _s3yiM::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 64;
           P64[Sp + 24] = _s3yj0::P64;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 _c3Dyo() //  [R1]
         { info_tbl: [(c3Dyo,
                       label: block_c3Dyo_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dyo: // global
           _s3yiX::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp] = _s3yiX::P64;
           call _c3DxB() args: 0, res: 0, upd: 0;
     }
 },
 sat_s3yja_entry() //  [R1, R2]
         { info_tbl: [(c3DyB,
                       label: sat_s3yja_info
                       rep:HeapRep 6 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DyB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3DyF; else goto c3DyE;
       c3DyF: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3DyE: // global
           _s3yiM::P64 = P64[R1 + 7];
           _s3yiN::P64 = P64[R1 + 15];
           _s3yiP::P64 = P64[R1 + 23];
           _s3yiQ::P64 = P64[R1 + 31];
           _s3yiR::P64 = P64[R1 + 39];
           _s3yiS::P64 = P64[R1 + 47];
           I64[Hp - 56] = sat_s3yj9_info;
           P64[Hp - 40] = _s3yiM::P64;
           P64[Hp - 32] = _s3yiN::P64;
           P64[Hp - 24] = _s3yiP::P64;
           P64[Hp - 16] = _s3yiR::P64;
           P64[Hp - 8] = _s3yiS::P64;
           P64[Hp] = R2;
           R2 = Hp - 56;
           R1 = _s3yiQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yjd_entry() //  [R1, R2]
         { info_tbl: [(c3DyK,
                       label: sat_s3yjd_info
                       rep:HeapRep 6 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DyK: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3DyL; else goto c3DyM;
       c3DyL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3DyM: // global
           I64[Sp - 64] = block_c3Dxf_info;
           _s3yiS::P64 = R2;
           R2 = R2;
           _s3yiM::P64 = P64[R1 + 7];
           _s3yiN::P64 = P64[R1 + 15];
           _s3yiO::P64 = P64[R1 + 23];
           _s3yiP::P64 = P64[R1 + 31];
           _s3yiQ::P64 = P64[R1 + 39];
           _s3yiR::P64 = P64[R1 + 47];
           R1 = _s3yiO::P64;
           P64[Sp - 56] = _s3yiM::P64;
           P64[Sp - 48] = _s3yiN::P64;
           P64[Sp - 40] = _s3yiO::P64;
           P64[Sp - 32] = _s3yiP::P64;
           P64[Sp - 24] = _s3yiQ::P64;
           P64[Sp - 16] = _s3yiR::P64;
           P64[Sp - 8] = _s3yiS::P64;
           Sp = Sp - 64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Dxf() //  [R1]
         { info_tbl: [(c3Dxf,
                       label: block_c3Dxf_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Dxf: // global
           if (R1 & 7 == 1) goto c3DyH; else goto c3DyI;
       c3DyH: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DyI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3DyU; else goto c3DyT;
       c3DyU: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DyT: // global
           I64[Hp - 48] = sat_s3yja_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           I64[Sp + 56] = block_c3DyP_info;
           R3 = Hp - 47;
           R2 = P64[Sp + 24];
           Sp = Sp + 56;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DyP() //  [R1]
         { info_tbl: [(c3DyP,
                       label: block_c3DyP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DyP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DyX; else goto c3DyW;
       c3DyX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DyW: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wreadIntP_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3DyY,
                       label: Text.Read.Lex.$wreadIntP_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DyY: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Dz2; else goto c3Dz1;
       c3Dz2: // global
           HpAlloc = 80;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wreadIntP_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Dz1: // global
           I64[Hp - 72] = lvl116_s3yiR_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3yjd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = Hp - 72;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.334783986 UTC

[section ""data" . Text.Read.Lex.readIntP2_closure" {
     Text.Read.Lex.readIntP2_closure:
         const Text.Read.Lex.readIntP2_info;
         const 0;
 },
 Text.Read.Lex.readIntP2_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3DAm,
                       label: Text.Read.Lex.readIntP2_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DAm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DAn; else goto c3DAo;
       c3DAn: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readIntP2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DAo: // global
           I64[Sp - 8] = block_c3DAj_info;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DAj() //  [R1]
         { info_tbl: [(c3DAj,
                       label: block_c3DAj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DAj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DAr; else goto c3DAq;
       c3DAr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DAq: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.341459732 UTC

[section ""data" . Text.Read.Lex.readIntP_closure" {
     Text.Read.Lex.readIntP_closure:
         const Text.Read.Lex.readIntP_info;
         const 0;
 },
 Text.Read.Lex.readIntP_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3DAF,
                       label: Text.Read.Lex.readIntP_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DAF: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readIntP2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.344814458 UTC

[section ""data" . sat_s3yjl_closure" {
     sat_s3yjl_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.347037982 UTC

[section ""data" . sat_s3yjm_closure" {
     sat_s3yjm_closure:
         const :_con_info;
         const sat_s3yjl_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.349111549 UTC

[section ""data" . Text.Read.Lex.numberToFixed1_closure" {
     Text.Read.Lex.numberToFixed1_closure:
         const Text.Read.Lex.numberToFixed1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToFixed1_entry() //  [R1]
         { info_tbl: [(c3DAU,
                       label: Text.Read.Lex.numberToFixed1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DAU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DAV; else goto c3DAW;
       c3DAV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DAW: // global
           (_c3DAR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DAR::I64 == 0) goto c3DAT; else goto c3DAS;
       c3DAT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DAS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DAR::I64;
           R3 = sat_s3yjm_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.355282784 UTC

[section ""data" . Text.Read.Lex.numberToInteger_closure" {
     Text.Read.Lex.numberToInteger_closure:
         const Text.Read.Lex.numberToInteger_info;
         const 0;
 },
 sat_s3yjt_entry() //  [R1]
         { info_tbl: [(c3DBr,
                       label: sat_s3yjt_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DBr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DBv; else goto c3DBw;
       c3DBv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DBw: // global
           I64[Sp - 8] = block_c3DBp_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DBp() //  [R1]
         { info_tbl: [(c3DBp,
                       label: block_c3DBp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DBp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DBz; else goto c3DBy;
       c3DBz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DBy: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yjr_entry() //  [R1]
         { info_tbl: [(c3DBE,
                       label: sat_s3yjr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DBE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DBF; else goto c3DBG;
       c3DBF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DBG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yjv_entry() //  [R1]
         { info_tbl: [(c3DBH,
                       label: sat_s3yjv_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DBH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3DBI; else goto c3DBJ;
       c3DBI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DBJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3DBh_info;
           _s3yjq::P64 = P64[R1 + 24];
           R3 = _s3yjq::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s3yjq::P64;
           Sp = Sp - 40;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3DBh() //  [R1]
         { info_tbl: [(c3DBh,
                       label: block_c3DBh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DBh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3DBM; else goto c3DBL;
       c3DBM: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3DBL: // global
           I64[Hp - 40] = sat_s3yjt_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_s3yjr_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yjB_entry() //  [R1]
         { info_tbl: [(c3DC3,
                       label: sat_s3yjB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DC3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DC4; else goto c3DC5;
       c3DC4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DC5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.numberToInteger_entry() //  [R2]
         { info_tbl: [(c3DCa,
                       label: Text.Read.Lex.numberToInteger_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DCa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DCb; else goto c3DCc;
       c3DCb: // global
           R2 = R2;
           R1 = Text.Read.Lex.numberToInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3DCc: // global
           I64[Sp - 8] = block_c3DB8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DCH; else goto c3DB9;
       u3DCH: // global
           call _c3DB8(R1) args: 0, res: 0, upd: 0;
       c3DB9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DB8() //  [R1]
         { info_tbl: [(c3DB8,
                       label: block_c3DB8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DB8: // global
           if (R1 & 7 == 1) goto c3DC7; else goto c3DC8;
       c3DC7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3DCg; else goto c3DCf;
       c3DCg: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DCf: // global
           _s3yjp::P64 = P64[R1 + 7];
           _s3yjq::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3yjv_info;
           P64[Hp - 24] = _s3yjp::P64;
           P64[Hp - 16] = _s3yjq::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DC8: // global
           I64[Sp - 16] = block_c3DBP_info;
           _s3yjw::P64 = P64[R1 + 6];
           _s3yjy::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3yjy::P64;
           P64[Sp] = _s3yjw::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DCD; else goto c3DBQ;
       u3DCD: // global
           call _c3DBP(R1) args: 0, res: 0, upd: 0;
       c3DBQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DBP() //  [R1]
         { info_tbl: [(c3DBP,
                       label: block_c3DBP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DBP: // global
           if (R1 & 7 == 1) goto c3DCk; else goto u3DCB;
       c3DCk: // global
           _s3yjy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3DBU_info;
           R1 = _s3yjy::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3DCE; else goto c3DBV;
       u3DCE: // global
           call _c3DBU(R1) args: 0, res: 0, upd: 0;
       c3DBV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3DCB: // global
           Sp = Sp + 24;
           call _c3DCy() args: 0, res: 0, upd: 0;
     }
 },
 _c3DBU() //  [R1]
         { info_tbl: [(c3DBU,
                       label: block_c3DBU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DBU: // global
           if (R1 & 7 == 1) goto c3DCn; else goto u3DCC;
       c3DCn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3DCq; else goto c3DCp;
       c3DCq: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DCp: // global
           I64[Hp - 32] = sat_s3yjB_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3DCC: // global
           Sp = Sp + 16;
           call _c3DCy() args: 0, res: 0, upd: 0;
     }
 },
 _c3DCy() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DCy: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.379866536 UTC

[section ""data" . sat_s3yjE_closure" {
     sat_s3yjE_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.381713217 UTC

[section ""data" . sat_s3yjF_closure" {
     sat_s3yjF_closure:
         const :_con_info;
         const sat_s3yjE_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.383823882 UTC

[section ""data" . lvl4_r3y9u_closure" {
     lvl4_r3y9u_closure:
         const lvl4_r3y9u_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r3y9u_entry() //  [R1]
         { info_tbl: [(c3DDL,
                       label: lvl4_r3y9u_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DDL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DDM; else goto c3DDN;
       c3DDM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DDN: // global
           (_c3DDI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DDI::I64 == 0) goto c3DDK; else goto c3DDJ;
       c3DDK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DDJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DDI::I64;
           R3 = sat_s3yjF_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.389836829 UTC

[section ""data" . $wfracExp_r3y9v_closure" {
     $wfracExp_r3y9v_closure:
         const $wfracExp_r3y9v_info;
         const 0;
 },
 $wfracExp_r3y9v_entry() //  [R2, R3, R4]
         { info_tbl: [(c3DE6,
                       label: $wfracExp_r3y9v_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DE6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3DE7; else goto u3DFp;
       c3DE7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wfracExp_r3y9v_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3DFp: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3DDW() args: 0, res: 0, upd: 0;
     }
 },
 _c3DDW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DDW: // global
           I64[Sp - 8] = block_c3DDZ_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DFr; else goto c3DE0;
       u3DFr: // global
           call _c3DDZ(R1) args: 0, res: 0, upd: 0;
       c3DE0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DDZ() //  [R1]
         { info_tbl: [(c3DDZ,
                       label: block_c3DDZ_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DDZ: // global
           _s3yjG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3DE3; else goto c3DE4;
       c3DE3: // global
           I64[Sp] = block_c3DEb_info;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           R2 = _s3yjG::P64;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c3DE4: // global
           I64[Sp] = block_c3DEY_info;
           R3 = lvl4_r3y9u_closure;
           R2 = _s3yjG::P64;
           P64[Sp + 8] = P64[R1 + 14];
           P64[Sp + 24] = P64[R1 + 6];
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DEb() //  [R1]
         { info_tbl: [(c3DEb,
                       label: block_c3DEb_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DEb: // global
           _s3yjG::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3DEN; else goto c3DEn;
       c3DEN: // global
           I64[Sp + 8] = block_c3DEv_info;
           R2 = _s3yjG::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c3DEn: // global
           I64[Sp + 8] = block_c3DEg_info;
           R3 = _s3yjG::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DEv() //  [R1]
         { info_tbl: [(c3DEv,
                       label: block_c3DEv_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DEv: // global
           I64[Sp] = block_c3DEz_info;
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DEz() //  [R1]
         { info_tbl: [(c3DEz,
                       label: block_c3DEz_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DEz: // global
           I64[Sp] = block_c3DED_info;
           R2 = R1;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DED() //  [R1]
         { info_tbl: [(c3DED,
                       label: block_c3DED_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DED: // global
           I64[Sp] = block_c3DEH_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DEH() //  [R1]
         { info_tbl: [(c3DEH,
                       label: block_c3DEH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DEH: // global
           _s3yjH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3DEL_info;
           R3 = R1;
           R2 = _s3yjH::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DEL() //  [R1]
         { info_tbl: [(c3DEL,
                       label: block_c3DEL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DEL: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3DEg() //  [R1]
         { info_tbl: [(c3DEg,
                       label: block_c3DEg_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DEg: // global
           I64[Sp + 16] = block_c3DEk_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DEk() //  [R1]
         { info_tbl: [(c3DEk,
                       label: block_c3DEk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DEk: // global
           R2 = GHC.Real.$fEnumRatio1_closure;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3DEY() //  [R1]
         { info_tbl: [(c3DEY,
                       label: block_c3DEY_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DEY: // global
           I64[Sp] = block_c3DF2_info;
           _s3yjU::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3yjU::P64;
           if (R1 & 7 != 0) goto u3DFt; else goto c3DF3;
       u3DFt: // global
           call _c3DF2(R1) args: 0, res: 0, upd: 0;
       c3DF3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DF2() //  [R1]
         { info_tbl: [(c3DF2,
                       label: block_c3DF2_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DF2: // global
           I64[Sp] = block_c3DF7_info;
           R2 = I64[R1 + 7];
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DF7() //  [R1]
         { info_tbl: [(c3DF7,
                       label: block_c3DF7_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DF7: // global
           I64[Sp] = block_c3DFb_info;
           R3 = Text.Read.Lex.numberToFixed1_closure;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DFb() //  [R1]
         { info_tbl: [(c3DFb,
                       label: block_c3DFb_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DFb: // global
           I64[Sp] = block_c3DFf_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DFf() //  [R1]
         { info_tbl: [(c3DFf,
                       label: block_c3DFf_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DFf: // global
           _s3yjI::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = R1;
           P64[Sp + 24] = _s3yjI::P64;
           Sp = Sp + 8;
           call _c3DDW() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.420352741 UTC

[section ""data" . Text.Read.Lex.numberToFixed_integerTake_closure" {
     Text.Read.Lex.numberToFixed_integerTake_closure:
         const Text.Read.Lex.numberToFixed_integerTake_info;
         const 0;
 },
 sat_s3yk7_entry() //  [R1]
         { info_tbl: [(c3DGK,
                       label: sat_s3yk7_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DGK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3DGL; else goto c3DGM;
       c3DGL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DGM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3DGI_info;
           R3 = lvl4_r3y9u_closure;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3DGI() //  [R1]
         { info_tbl: [(c3DGI,
                       label: block_c3DGI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DGI: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_integerTake_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.numberToFixed_integerTake_entry() //  [R2, R3]
         { info_tbl: [(c3DGT,
                       label: Text.Read.Lex.numberToFixed_integerTake_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DGT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DGU; else goto c3DGV;
       c3DGU: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_integerTake_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DGV: // global
           I64[Sp - 24] = block_c3DGu_info;
           _s3yk1::P64 = R3;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           _s3yk0::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3yk0::P64;
           P64[Sp - 8] = _s3yk1::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DGu() //  [R1]
         { info_tbl: [(c3DGu,
                       label: block_c3DGu_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DGu: // global
           if (R1 == 1) goto u3DHa; else goto c3DGR;
       u3DHa: // global
           Sp = Sp + 24;
           call _c3DGS() args: 0, res: 0, upd: 0;
       c3DGR: // global
           I64[Sp] = block_c3DGy_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3DHc; else goto c3DGz;
       u3DHc: // global
           call _c3DGy(R1) args: 0, res: 0, upd: 0;
       c3DGz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DGy() //  [R1]
         { info_tbl: [(c3DGy,
                       label: block_c3DGy_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DGy: // global
           if (R1 & 7 == 1) goto u3DHb; else goto c3DH2;
       u3DHb: // global
           Sp = Sp + 24;
           call _c3DGS() args: 0, res: 0, upd: 0;
       c3DH2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3DH5; else goto c3DH4;
       c3DH5: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DH4: // global
           _s3yk4::P64 = P64[R1 + 6];
           _s3yk5::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s3yk7_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s3yk5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yk4::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3DGS() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DGS: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.433490605 UTC

[section ""data" . Text.Read.Lex.numberToFixed_xs_closure" {
     Text.Read.Lex.numberToFixed_xs_closure:
         const :_con_info;
         const Text.Read.Lex.$fShowLexeme2_closure+1;
         const Text.Read.Lex.numberToFixed_xs_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.438445609 UTC

[section ""data" . Text.Read.Lex.numberToFixed_closure" {
     Text.Read.Lex.numberToFixed_closure:
         const Text.Read.Lex.numberToFixed_info;
         const 0;
 },
 sat_s3ykf_entry() //  [R1]
         { info_tbl: [(c3DI5,
                       label: sat_s3ykf_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DI5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DI9; else goto c3DIa;
       c3DI9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DIa: // global
           I64[Sp - 8] = block_c3DI3_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DI3() //  [R1]
         { info_tbl: [(c3DI3,
                       label: block_c3DI3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DI3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DId; else goto c3DIc;
       c3DId: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DIc: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ykd_entry() //  [R1]
         { info_tbl: [(c3DIi,
                       label: sat_s3ykd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DIi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DIj; else goto c3DIk;
       c3DIj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DIk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ykh_entry() //  [R1]
         { info_tbl: [(c3DIl,
                       label: sat_s3ykh_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DIl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3DIm; else goto c3DIn;
       c3DIm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DIn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3DHV_info;
           _s3ykc::P64 = P64[R1 + 24];
           R3 = _s3ykc::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s3ykc::P64;
           Sp = Sp - 40;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3DHV() //  [R1]
         { info_tbl: [(c3DHV,
                       label: block_c3DHV_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DHV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3DIq; else goto c3DIp;
       c3DIq: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3DIp: // global
           I64[Hp - 40] = sat_s3ykf_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_s3ykd_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yko_entry() //  [R1]
         { info_tbl: [(c3DIH,
                       label: sat_s3yko_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DIH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DII; else goto c3DIJ;
       c3DII: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DIJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ykv_entry() //  [R1]
         { info_tbl: [(c3DIZ,
                       label: sat_s3ykv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DIZ: // global
           R3 = Text.Read.Lex.numberToFixed_xs_closure+2;
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ykx_entry() //  [R1]
         { info_tbl: [(c3DJg,
                       label: sat_s3ykx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DJg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DJk; else goto c3DJl;
       c3DJk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DJl: // global
           I64[Sp - 8] = block_c3DJe_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DJe() //  [R1]
         { info_tbl: [(c3DJe,
                       label: block_c3DJe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DJe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DJo; else goto c3DJn;
       c3DJo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DJn: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ykz_entry() //  [R1]
         { info_tbl: [(c3DJp,
                       label: sat_s3ykz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DJp: // global
           _s3ykz::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3DJq; else goto c3DJr;
       c3DJr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DJt; else goto c3DJs;
       c3DJt: // global
           HpAlloc = 24;
           goto c3DJq;
       c3DJq: // global
           R1 = _s3ykz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DJs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ykz::P64;
           _s3yk8::P64 = P64[_s3ykz::P64 + 16];
           _s3ykr::P64 = P64[_s3ykz::P64 + 24];
           I64[Hp - 16] = sat_s3ykv_info;
           P64[Hp] = _s3ykr::P64;
           I64[Sp - 24] = block_c3DJ2_info;
           R3 = Hp - 16;
           R2 = _s3yk8::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.numberToFixed_integerTake_entry(R3,
                                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3DJ2() //  [R1]
         { info_tbl: [(c3DJ2,
                       label: block_c3DJ2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DJ2: // global
           I64[Sp - 8] = block_c3DJ6_info;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3DJ6() //  [R1]
         { info_tbl: [(c3DJ6,
                       label: block_c3DJ6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DJ6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DJx; else goto c3DJw;
       c3DJx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3DJw: // global
           I64[Hp - 16] = sat_s3ykx_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ykt_entry() //  [R1]
         { info_tbl: [(c3DJC,
                       label: sat_s3ykt_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DJC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DJD; else goto c3DJE;
       c3DJD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DJE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.numberToFixed_entry() //  [R2, R3]
         { info_tbl: [(c3DJJ,
                       label: Text.Read.Lex.numberToFixed_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DJJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3DJK; else goto c3DJL;
       c3DJK: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DJL: // global
           I64[Sp - 16] = block_c3DHM_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DKt; else goto c3DHN;
       u3DKt: // global
           call _c3DHM(R1) args: 0, res: 0, upd: 0;
       c3DHN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DHM() //  [R1]
         { info_tbl: [(c3DHM,
                       label: block_c3DHM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DHM: // global
           if (R1 & 7 == 1) goto c3DJG; else goto c3DJH;
       c3DJG: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3DJQ; else goto c3DJP;
       c3DJQ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DJP: // global
           _s3ykb::P64 = P64[R1 + 7];
           _s3ykc::P64 = P64[R1 + 15];
           I64[Hp - 64] = sat_s3ykh_info;
           P64[Hp - 48] = _s3ykb::P64;
           P64[Hp - 40] = _s3ykc::P64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = Text.Read.Lex.numberToFixed2_closure;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DJH: // global
           I64[Sp - 16] = block_c3DIt_info;
           _s3ykj::P64 = P64[R1 + 6];
           _s3ykl::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3ykl::P64;
           P64[Sp] = _s3ykj::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DKo; else goto c3DIu;
       u3DKo: // global
           call _c3DIt(R1) args: 0, res: 0, upd: 0;
       c3DIu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DIt() //  [R1]
         { info_tbl: [(c3DIt,
                       label: block_c3DIt_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DIt: // global
           _s3ykl::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3DJU; else goto c3DK7;
       c3DJU: // global
           I64[Sp + 8] = block_c3DIy_info;
           R1 = _s3ykl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3DKp; else goto c3DIz;
       u3DKp: // global
           call _c3DIy(R1) args: 0, res: 0, upd: 0;
       c3DIz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3DK7: // global
           I64[Sp] = block_c3DIM_info;
           _s3ykr::P64 = P64[R1 + 6];
           R1 = _s3ykl::P64;
           P64[Sp + 8] = _s3ykr::P64;
           if (R1 & 7 != 0) goto u3DKq; else goto c3DIN;
       u3DKq: // global
           call _c3DIM(R1) args: 0, res: 0, upd: 0;
       c3DIN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DIy() //  [R1]
         { info_tbl: [(c3DIy,
                       label: block_c3DIy_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DIy: // global
           if (R1 & 7 == 1) goto c3DJY; else goto u3DKn;
       c3DJY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3DK1; else goto c3DK0;
       c3DK1: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DK0: // global
           I64[Hp - 56] = sat_s3yko_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Text.Read.Lex.numberToFixed2_closure;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3DKn: // global
           Sp = Sp + 24;
           call _c3DKi() args: 0, res: 0, upd: 0;
     }
 },
 _c3DIM() //  [R1]
         { info_tbl: [(c3DIM,
                       label: block_c3DIM_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DIM: // global
           if (R1 & 7 == 1) goto c3DKb; else goto u3DKm;
       c3DKb: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3DKe; else goto c3DKd;
       c3DKe: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DKd: // global
           I64[Hp - 88] = sat_s3ykz_info;
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sat_s3ykt_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 88;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3DKm: // global
           Sp = Sp + 32;
           call _c3DKi() args: 0, res: 0, upd: 0;
     }
 },
 _c3DKi() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DKi: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.481485452 UTC

[section ""data" . Text.Read.Lex.$wnumberToRational_closure" {
     Text.Read.Lex.$wnumberToRational_closure:
         const Text.Read.Lex.$wnumberToRational_info;
         const 0;
 },
 sat_s3ykK_entry() //  [R1]
         { info_tbl: [(c3DMn,
                       label: sat_s3ykK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DMn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DMr; else goto c3DMs;
       c3DMr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DMs: // global
           I64[Sp - 8] = block_c3DMl_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DMl() //  [R1]
         { info_tbl: [(c3DMl,
                       label: block_c3DMl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DMl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3DMv; else goto c3DMu;
       c3DMv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DMu: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ykI_entry() //  [R1]
         { info_tbl: [(c3DMD,
                       label: sat_s3ykI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DMD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DME; else goto c3DMF;
       c3DME: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DMF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3DMA_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3DMJ; else goto c3DMB;
       u3DMJ: // global
           call _c3DMA(R1) args: 0, res: 0, upd: 0;
       c3DMB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3DMA() //  [R1]
         { info_tbl: [(c3DMA,
                       label: block_c3DMA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DMA: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.$wnumberToRational_entry() //  [R2]
         { info_tbl: [(c3DMO,
                       label: Text.Read.Lex.$wnumberToRational_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DMO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DMP; else goto c3DMQ;
       c3DMP: // global
           R2 = R2;
           R1 = Text.Read.Lex.$wnumberToRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3DMQ: // global
           I64[Sp - 8] = block_c3DM8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DP5; else goto c3DM9;
       u3DP5: // global
           call _c3DM8(R1) args: 0, res: 0, upd: 0;
       c3DM9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DM8() //  [R1]
         { info_tbl: [(c3DM8,
                       label: block_c3DM8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DM8: // global
           if (R1 & 7 == 1) goto c3DML; else goto c3DMM;
       c3DML: // global
           I64[Sp - 16] = block_c3DMd_info;
           _s3ykF::P64 = P64[R1 + 15];
           R3 = _s3ykF::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 8] = _s3ykF::P64;
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3DMM: // global
           I64[Sp - 16] = block_c3DN7_info;
           _s3ykO::P64 = P64[R1 + 6];
           _s3ykQ::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3ykQ::P64;
           P64[Sp] = _s3ykO::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DP4; else goto c3DN9;
       u3DP4: // global
           call _c3DN7(R1) args: 0, res: 0, upd: 0;
       c3DN9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DMd() //  [R1]
         { info_tbl: [(c3DMd,
                       label: block_c3DMd_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DMd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3DMZ; else goto c3DMY;
       c3DMZ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DMY: // global
           I64[Hp - 40] = sat_s3ykK_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = sat_s3ykI_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3DMR_info;
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DMR() //  [R1]
         { info_tbl: [(c3DMR,
                       label: block_c3DMR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DMR: // global
           I64[Sp] = block_c3DMV_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DMV() //  [R1]
         { info_tbl: [(c3DMV,
                       label: block_c3DMV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DMV: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3DN7() //  [R1]
         { info_tbl: [(c3DN7,
                       label: block_c3DN7_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DN7: // global
           _s3ykQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3DNg; else goto c3DOF;
       c3DNg: // global
           I64[Sp + 8] = block_c3DNd_info;
           R1 = _s3ykQ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3DP6; else goto c3DNh;
       u3DP6: // global
           call _c3DNd(R1) args: 0, res: 0, upd: 0;
       c3DNh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3DOF: // global
           I64[Sp] = block_c3DOD_info;
           _s3yl7::P64 = P64[R1 + 6];
           R1 = _s3ykQ::P64;
           P64[Sp + 8] = _s3yl7::P64;
           if (R1 & 7 != 0) goto u3DP7; else goto c3DOG;
       u3DP7: // global
           call _c3DOD(R1) args: 0, res: 0, upd: 0;
       c3DOG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DNd() //  [R1]
         { info_tbl: [(c3DNd,
                       label: block_c3DNd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DNd: // global
           if (R1 & 7 == 1) goto c3DNs; else goto c3DNC;
       c3DNs: // global
           _s3ykO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3DNl_info;
           R3 = _s3ykO::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
       c3DNC: // global
           I64[Sp - 8] = block_c3DNA_info;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           _s3ykV::P64 = P64[R1 + 6];
           R2 = _s3ykV::P64;
           P64[Sp] = _s3ykV::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DNl() //  [R1]
         { info_tbl: [(c3DNl,
                       label: block_c3DNl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DNl: // global
           I64[Sp] = block_c3DNp_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DNp() //  [R1]
         { info_tbl: [(c3DNp,
                       label: block_c3DNp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DNp: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3DNA() //  [R1]
         { info_tbl: [(c3DNA,
                       label: block_c3DNA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DNA: // global
           _s3ykV::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3DOt; else goto c3DO3;
       c3DOt: // global
           I64[Sp + 8] = block_c3DOf_info;
           R3 = _s3ykV::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3DO3: // global
           I64[Sp + 8] = block_c3DNG_info;
           R2 = _s3ykV::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DOf() //  [R1]
         { info_tbl: [(c3DOf,
                       label: block_c3DOf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DOf: // global
           I64[Sp] = block_c3DOj_info;
           R3 = P64[Sp + 8];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 8] = R1;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DOj() //  [R1]
         { info_tbl: [(c3DOj,
                       label: block_c3DOj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DOj: // global
           _s3yl4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3DOn_info;
           R3 = _s3yl4::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DOn() //  [R1]
         { info_tbl: [(c3DOn,
                       label: block_c3DOn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DOn: // global
           I64[Sp] = block_c3DOr_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DOr() //  [R1]
         { info_tbl: [(c3DOr,
                       label: block_c3DOr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DOr: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3DNG() //  [R1]
         { info_tbl: [(c3DNG,
                       label: block_c3DNG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DNG: // global
           I64[Sp] = block_c3DNK_info;
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DNK() //  [R1]
         { info_tbl: [(c3DNK,
                       label: block_c3DNK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DNK: // global
           I64[Sp - 8] = block_c3DNO_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DNO() //  [R1]
         { info_tbl: [(c3DNO,
                       label: block_c3DNO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DNO: // global
           I64[Sp] = block_c3DNS_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DNS() //  [R1]
         { info_tbl: [(c3DNS,
                       label: block_c3DNS_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DNS: // global
           I64[Sp] = block_c3DNW_info;
           R3 = P64[Sp + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 16] = R1;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DNW() //  [R1]
         { info_tbl: [(c3DNW,
                       label: block_c3DNW_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DNW: // global
           I64[Sp] = block_c3DO0_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DO0() //  [R1]
         { info_tbl: [(c3DO0,
                       label: block_c3DO0_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DO0: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3DOD() //  [R1]
         { info_tbl: [(c3DOD,
                       label: block_c3DOD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DOD: // global
           _s3ykO::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c3DON; else goto c3DOW;
       c3DON: // global
           I64[Sp] = block_c3DOK_info;
           R3 = _s3ykO::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
       c3DOW: // global
           I64[Sp] = block_c3DOU_info;
           R3 = _s3ykO::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 16] = P64[R1 + 6];
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DOK() //  [R1]
         { info_tbl: [(c3DOK,
                       label: block_c3DOK_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DOK: // global
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 24;
           call $wfracExp_r3y9v_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3DOU() //  [R1]
         { info_tbl: [(c3DOU,
                       label: block_c3DOU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DOU: // global
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call $wfracExp_r3y9v_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.534377989 UTC

[section ""data" . Text.Read.Lex.numberToRational_closure" {
     Text.Read.Lex.numberToRational_closure:
         const Text.Read.Lex.numberToRational_info;
         const 0;
 },
 Text.Read.Lex.numberToRational_entry() //  [R2]
         { info_tbl: [(c3DQU,
                       label: Text.Read.Lex.numberToRational_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DQU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3DQV; else goto c3DQW;
       c3DQV: // global
           R2 = R2;
           R1 = Text.Read.Lex.numberToRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3DQW: // global
           I64[Sp - 8] = block_c3DQR_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DQR() //  [R1, R2]
         { info_tbl: [(c3DQR,
                       label: block_c3DQR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DQR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DQZ; else goto c3DQY;
       c3DQZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3DQY: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.540218174 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational3_closure" {
     Text.Read.Lex.numberToRangedRational3_closure:
         const GHC.Real.:%_con_info;
         const Text.Read.Lex.numberToFixed2_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.542236083 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational2_closure" {
     Text.Read.Lex.numberToRangedRational2_closure:
         const GHC.Base.Just_con_info;
         const Text.Read.Lex.numberToRangedRational3_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.54477458 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational1_closure" {
     Text.Read.Lex.numberToRangedRational1_closure:
         const Text.Read.Lex.numberToRangedRational1_info;
 },
 Text.Read.Lex.numberToRangedRational1_entry() //  [R2]
         { info_tbl: [(c3DRf,
                       label: Text.Read.Lex.numberToRangedRational1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DRf: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme2_closure+1;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.548282725 UTC

[section ""data" . sat_s3yli_closure" {
     sat_s3yli_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.55075063 UTC

[section ""data" . sat_s3ylj_closure" {
     sat_s3ylj_closure:
         const :_con_info;
         const sat_s3yli_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.552551169 UTC

[section ""data" . sat_s3ylh_closure" {
     sat_s3ylh_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.554814701 UTC

[section ""data" . sat_s3ylk_closure" {
     sat_s3ylk_closure:
         const :_con_info;
         const sat_s3ylh_closure+1;
         const sat_s3ylj_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.556601008 UTC

[section ""data" . sat_s3ylg_closure" {
     sat_s3ylg_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.558335044 UTC

[section ""data" . sat_s3yll_closure" {
     sat_s3yll_closure:
         const :_con_info;
         const sat_s3ylg_closure+1;
         const sat_s3ylk_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.5604057 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational4_closure" {
     Text.Read.Lex.numberToRangedRational4_closure:
         const Text.Read.Lex.numberToRangedRational4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational4_entry() //  [R1]
         { info_tbl: [(c3DRy,
                       label: Text.Read.Lex.numberToRangedRational4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DRy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DRz; else goto c3DRA;
       c3DRz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DRA: // global
           (_c3DRv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DRv::I64 == 0) goto c3DRx; else goto c3DRw;
       c3DRx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DRw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DRv::I64;
           R3 = sat_s3yll_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.565150893 UTC

[section ""data" . sat_s3ylo_closure" {
     sat_s3ylo_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.567012642 UTC

[section ""data" . sat_s3ylp_closure" {
     sat_s3ylp_closure:
         const :_con_info;
         const sat_s3ylo_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.568792533 UTC

[section ""data" . sat_s3yln_closure" {
     sat_s3yln_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.57054251 UTC

[section ""data" . sat_s3ylq_closure" {
     sat_s3ylq_closure:
         const :_con_info;
         const sat_s3yln_closure+1;
         const sat_s3ylp_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.572810979 UTC

[section ""data" . sat_s3ylm_closure" {
     sat_s3ylm_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.574943386 UTC

[section ""data" . sat_s3ylr_closure" {
     sat_s3ylr_closure:
         const :_con_info;
         const sat_s3ylm_closure+1;
         const sat_s3ylq_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.577060803 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational5_closure" {
     Text.Read.Lex.numberToRangedRational5_closure:
         const Text.Read.Lex.numberToRangedRational5_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational5_entry() //  [R1]
         { info_tbl: [(c3DRU,
                       label: Text.Read.Lex.numberToRangedRational5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DRU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DRV; else goto c3DRW;
       c3DRV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DRW: // global
           (_c3DRR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DRR::I64 == 0) goto c3DRT; else goto c3DRS;
       c3DRT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DRS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DRR::I64;
           R3 = sat_s3ylr_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.584982733 UTC

[section ""data" . Text.Read.Lex.$wnumberToRangedRational_closure" {
     Text.Read.Lex.$wnumberToRangedRational_closure:
         const Text.Read.Lex.$wnumberToRangedRational_info;
         const 0;
 },
 sat_s3ylB_entry() //  [R1]
         { info_tbl: [(c3DSk,
                       label: sat_s3ylB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DSk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DSl; else goto c3DSm;
       c3DSl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DSm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3DSh_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3DSh() //  [R1, R2]
         { info_tbl: [(c3DSh,
                       label: block_c3DSh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DSh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DSp; else goto c3DSo;
       c3DSp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3DSo: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ylJ_entry() //  [R1]
         { info_tbl: [(c3DSE,
                       label: sat_s3ylJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DSE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DSF; else goto c3DSG;
       c3DSF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DSG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3DSB_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3DSB() //  [R1, R2]
         { info_tbl: [(c3DSB,
                       label: block_c3DSB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DSB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DSJ; else goto c3DSI;
       c3DSJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3DSI: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ym2_entry() //  [R1]
         { info_tbl: [(c3DTz,
                       label: sat_s3ym2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DTz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DTA; else goto c3DTB;
       c3DTA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DTB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3DTw_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3DTw() //  [R1, R2]
         { info_tbl: [(c3DTw,
                       label: block_c3DTw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DTw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3DTE; else goto c3DTD;
       c3DTE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3DTD: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.$wnumberToRangedRational_entry() //  [R2, R3, R4]
         { info_tbl: [(c3DTJ,
                       label: Text.Read.Lex.$wnumberToRangedRational_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DTJ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3DTK; else goto c3DTL;
       c3DTK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wnumberToRangedRational_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DTL: // global
           I64[Sp - 24] = block_c3DS8_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3DVt; else goto c3DS9;
       u3DVt: // global
           call _c3DS8(R1) args: 0, res: 0, upd: 0;
       c3DS9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DS8() //  [R1]
         { info_tbl: [(c3DS8,
                       label: block_c3DS8_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DS8: // global
           if (R1 & 7 == 1) goto c3DTG; else goto c3DTH;
       c3DTG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3DTP; else goto c3DTO;
       c3DTP: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DTO: // global
           I64[Hp - 32] = sat_s3ylB_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DTH: // global
           I64[Sp - 24] = block_c3DSs_info;
           _s3ylv::P64 = R1;
           _s3ylC::P64 = P64[R1 + 6];
           _s3ylD::P64 = P64[R1 + 14];
           R1 = P64[R1 + 22];
           P64[Sp - 16] = _s3ylC::P64;
           P64[Sp - 8] = _s3ylD::P64;
           P64[Sp] = _s3ylv::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3DVo; else goto c3DSt;
       u3DVo: // global
           call _c3DSs(R1) args: 0, res: 0, upd: 0;
       c3DSt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DSs() //  [R1]
         { info_tbl: [(c3DSs,
                       label: block_c3DSs_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DSs: // global
           if (R1 & 7 == 1) goto c3DTT; else goto c3DTY;
       c3DTT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3DTW; else goto c3DTV;
       c3DTW: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DTV: // global
           I64[Hp - 32] = sat_s3ylJ_info;
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DTY: // global
           I64[Sp - 8] = block_c3DSM_info;
           R3 = Text.Read.Lex.numberToRangedRational5_closure;
           _s3ylK::P64 = P64[R1 + 6];
           R2 = _s3ylK::P64;
           P64[Sp] = _s3ylK::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DSM() //  [R1]
         { info_tbl: [(c3DSM,
                       label: block_c3DSM_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DSM: // global
           if (R1 == 1) goto u3DVh; else goto c3DU1;
       u3DVh: // global
           Sp = Sp + 56;
           call _c3DVb() args: 0, res: 0, upd: 0;
       c3DU1: // global
           I64[Sp] = block_c3DSQ_info;
           R3 = Text.Read.Lex.numberToRangedRational4_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DSQ() //  [R1]
         { info_tbl: [(c3DSQ,
                       label: block_c3DSQ_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DSQ: // global
           if (R1 == 1) goto u3DVi; else goto c3DUi;
       u3DVi: // global
           Sp = Sp + 56;
           call _c3DVb() args: 0, res: 0, upd: 0;
       c3DUi: // global
           I64[Sp] = block_c3DU2_info;
           R3 = P64[Sp + 16];
           R2 = Text.Read.Lex.numberToRangedRational1_closure+1;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DU2() //  [R1]
         { info_tbl: [(c3DU2,
                       label: block_c3DU2_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DU2: // global
           if (R1 & 7 == 1) goto c3DUp; else goto c3DUZ;
       c3DUp: // global
           I64[Sp] = block_c3DUm_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3DVu; else goto c3DUq;
       u3DVu: // global
           call _c3DUm(R1) args: 0, res: 0, upd: 0;
       c3DUq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3DUZ: // global
           I64[Sp] = block_c3DUX_info;
           R3 = 0;
           R2 = R1;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DUm() //  [R1]
         { info_tbl: [(c3DUm,
                       label: block_c3DUm_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DUm: // global
           if (R1 & 7 == 1) goto u3DVk; else goto c3DUD;
       u3DVk: // global
           Sp = Sp + 56;
           call _c3DUL() args: 0, res: 0, upd: 0;
       c3DUD: // global
           I64[Sp] = block_c3DUz_info;
           R3 = P64[R1 + 6];
           R2 = Text.Read.Lex.numberToRangedRational1_closure+1;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DUz() //  [R1, R2]
         { info_tbl: [(c3DUz,
                       label: block_c3DUz_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DUz: // global
           I64[Sp] = block_c3DUB_info;
           _s3ym7::P64 = R1;
           R1 = R2;
           P64[Sp + 24] = _s3ym7::P64;
           if (R1 & 7 != 0) goto u3DVw; else goto c3DUF;
       u3DVw: // global
           call _c3DUB(R1) args: 0, res: 0, upd: 0;
       c3DUF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DUB() //  [R1]
         { info_tbl: [(c3DUB,
                       label: block_c3DUB_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DUB: // global
           if (R1 & 7 == 1) goto u3DVl; else goto c3DUQ;
       u3DVl: // global
           Sp = Sp + 56;
           call _c3DUL() args: 0, res: 0, upd: 0;
       c3DUQ: // global
           I64[Sp] = block_c3DUO_info;
           R3 = 0;
           R2 = P64[Sp + 24];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DUL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DUL: // global
           R1 = Text.Read.Lex.numberToRangedRational2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3DUO() //  [R1]
         { info_tbl: [(c3DUO,
                       label: block_c3DUO_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DUO: // global
           I64[Sp + 24] = -R1;
           Sp = Sp + 8;
           call _s3ylN() args: 0, res: 0, upd: 0;
     }
 },
 _c3DUX() //  [R1]
         { info_tbl: [(c3DUX,
                       label: block_c3DUX_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DUX: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _s3ylN() args: 0, res: 0, upd: 0;
     }
 },
 _s3ylN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3ylN: // global
           I64[Sp - 8] = block_c3DSZ_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3DVA; else goto c3DT0;
       u3DVA: // global
           call _c3DSZ(R1) args: 0, res: 0, upd: 0;
       c3DT0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DSZ() //  [R1]
         { info_tbl: [(c3DSZ,
                       label: block_c3DSZ_info
                       rep:StackRep [False, True, True, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DSZ: // global
           I64[Sp + 16] = block_c3DT4_info;
           R2 = P64[Sp + 8];
           I64[Sp + 48] = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DT4() //  [R1]
         { info_tbl: [(c3DT4,
                       label: block_c3DT4_info
                       rep:StackRep [True, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DT4: // global
           _s3ylS::I64 = I64[Sp + 8] + R1;
           if (%MO_S_Le_W64(_s3ylS::I64,
                            I64[Sp + 32] + 3)) goto c3DU8; else goto u3DVn;
       c3DU8: // global
           I64[Sp + 8] = block_c3DTh_info;
           R1 = P64[Sp + 24];
           I64[Sp + 32] = _s3ylS::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3DVr; else goto c3DTi;
       u3DVr: // global
           call _c3DTh(R1) args: 0, res: 0, upd: 0;
       c3DTi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3DVn: // global
           Sp = Sp + 40;
           call _c3DVb() args: 0, res: 0, upd: 0;
     }
 },
 _c3DTh() //  [R1]
         { info_tbl: [(c3DTh,
                       label: block_c3DTh_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DTh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3DUb; else goto c3DUa;
       c3DUb: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3DUa: // global
           if (%MO_S_Ge_W64(I64[Sp + 24],
                            I64[R1 + 7] - 3)) goto c3DUe; else goto c3DUf;
       c3DUe: // global
           I64[Hp - 32] = sat_s3ym2_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DUf: // global
           Hp = Hp - 40;
           R1 = Text.Read.Lex.numberToRangedRational2_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3DVb() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DVb: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.631327576 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational_closure" {
     Text.Read.Lex.numberToRangedRational_closure:
         const Text.Read.Lex.numberToRangedRational_info;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational_entry() //  [R2, R3]
         { info_tbl: [(c3DXs,
                       label: Text.Read.Lex.numberToRangedRational_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DXs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DXt; else goto c3DXu;
       c3DXt: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToRangedRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DXu: // global
           I64[Sp - 16] = block_c3DXp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3DXy; else goto c3DXq;
       u3DXy: // global
           call _c3DXp(R1) args: 0, res: 0, upd: 0;
       c3DXq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3DXp() //  [R1]
         { info_tbl: [(c3DXp,
                       label: block_c3DXp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DXp: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call Text.Read.Lex.$wnumberToRangedRational_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.637583766 UTC

[section ""cstring" . lvl5_r3y9w_bytes" {
     lvl5_r3y9w_bytes:
         I8[] [118,97,108,68,105,103,58,32,66,97,100,32,98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.639694066 UTC

[section ""data" . Text.Read.Lex.readDecP2_closure" {
     Text.Read.Lex.readDecP2_closure:
         const Text.Read.Lex.readDecP2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP2_entry() //  [R1]
         { info_tbl: [(c3DXR,
                       label: Text.Read.Lex.readDecP2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DXR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DXS; else goto c3DXT;
       c3DXS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DXT: // global
           (_c3DXM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DXM::I64 == 0) goto c3DXO; else goto c3DXN;
       c3DXO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DXN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DXM::I64;
           I64[Sp - 24] = block_c3DXP_info;
           R2 = lvl5_r3y9w_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3DXP() //  [R1]
         { info_tbl: [(c3DXP,
                       label: block_c3DXP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DXP: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.645951669 UTC

[section ""data" . sat_s3ymn_closure" {
     sat_s3ymn_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.647765513 UTC

[section ""data" . sat_s3ymo_closure" {
     sat_s3ymo_closure:
         const :_con_info;
         const sat_s3ymn_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.65021603 UTC

[section ""data" . Text.Read.Lex.readDecP3_closure" {
     Text.Read.Lex.readDecP3_closure:
         const Text.Read.Lex.readDecP3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP3_entry() //  [R1]
         { info_tbl: [(c3DYf,
                       label: Text.Read.Lex.readDecP3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DYf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DYg; else goto c3DYh;
       c3DYg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DYh: // global
           (_c3DYc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DYc::I64 == 0) goto c3DYe; else goto c3DYd;
       c3DYe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DYd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DYc::I64;
           R3 = sat_s3ymo_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.654940226 UTC

[section ""data" . sat_s3ymp_closure" {
     sat_s3ymp_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.656686691 UTC

[section ""data" . sat_s3ymq_closure" {
     sat_s3ymq_closure:
         const :_con_info;
         const sat_s3ymp_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.65888856 UTC

[section ""data" . Text.Read.Lex.readDecP4_closure" {
     Text.Read.Lex.readDecP4_closure:
         const Text.Read.Lex.readDecP4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP4_entry() //  [R1]
         { info_tbl: [(c3DYx,
                       label: Text.Read.Lex.readDecP4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DYx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3DYy; else goto c3DYz;
       c3DYy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3DYz: // global
           (_c3DYu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3DYu::I64 == 0) goto c3DYw; else goto c3DYv;
       c3DYw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3DYv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3DYu::I64;
           R3 = sat_s3ymq_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.665887895 UTC

[section ""data" . Text.Read.Lex.$w$svalDig_closure" {
     Text.Read.Lex.$w$svalDig_closure:
         const Text.Read.Lex.$w$svalDig_info;
         const 0;
 },
 Text.Read.Lex.$w$svalDig_entry() //  [R2, R3]
         { info_tbl: [(c3DYQ,
                       label: Text.Read.Lex.$w$svalDig_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DYQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3DYR; else goto c3DYS;
       c3DYR: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$svalDig_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3DYS: // global
           I64[Sp - 24] = block_c3DYL_info;
           _s3yms::I64 = R3;
           R3 = Text.Read.Lex.readDecP4_closure;
           _s3ymr::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3ymr::P64;
           I64[Sp - 8] = _s3yms::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DYL() //  [R1]
         { info_tbl: [(c3DYL,
                       label: block_c3DYL_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DYL: // global
           if (R1 == 1) goto c3DYP; else goto c3DYO;
       c3DYP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E1c; else goto c3E1b;
       c3E1c: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3E1b: // global
           _s3yms::I64 = I64[Sp + 16];
           if (48 > _s3yms::I64) goto u3E1D; else goto c3E1y;
       u3E1D: // global
           Sp = Sp + 24;
           goto u3E1G;
       c3E1y: // global
           if (_s3yms::I64 > 55) goto u3E1E; else goto c3E1x;
       u3E1E: // global
           Sp = Sp + 24;
           goto u3E1G;
       u3E1G: // global
           call _c3E1m() args: 0, res: 0, upd: 0;
       c3E1x: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DYO: // global
           I64[Sp] = block_c3DYV_info;
           R3 = Text.Read.Lex.numberToFixed1_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DYV() //  [R1]
         { info_tbl: [(c3DYV,
                       label: block_c3DYV_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DYV: // global
           if (R1 == 1) goto c3E0G; else goto c3DZ3;
       c3E0G: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E0L; else goto c3E0K;
       c3E0L: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3E0K: // global
           _s3yms::I64 = I64[Sp + 16];
           if (48 > _s3yms::I64) goto u3E1B; else goto c3E17;
       u3E1B: // global
           Sp = Sp + 24;
           goto u3E1I;
       c3E17: // global
           if (_s3yms::I64 > 57) goto u3E1C; else goto c3E16;
       u3E1C: // global
           Sp = Sp + 24;
           goto u3E1I;
       u3E1I: // global
           call _c3E1m() args: 0, res: 0, upd: 0;
       c3E16: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DZ3: // global
           _s3ymr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3DZ0_info;
           R3 = Text.Read.Lex.readDecP3_closure;
           R2 = _s3ymr::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3DZ0() //  [R1]
         { info_tbl: [(c3DZ0,
                       label: block_c3DZ0_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DZ0: // global
           if (R1 == 1) goto c3DZa; else goto c3DZ9;
       c3DZa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3DZf; else goto c3DZe;
       c3DZf: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3DZe: // global
           _s3yms::I64 = I64[Sp + 8];
           if (48 > _s3yms::I64) goto c3E0t; else goto c3E0F;
       c3E0F: // global
           if (_s3yms::I64 > 57) goto c3E0t; else goto c3E0E;
       c3E0t: // global
           Hp = Hp - 32;
           call _c3DZj() args: 0, res: 0, upd: 0;
       c3E0E: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3DZ9: // global
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3DZj() //  []
         { info_tbl: [(c3DZj,
                       label: block_c3DZj_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DZj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3DZn; else goto c3DZm;
       c3DZn: // global
           HpAlloc = 32;
           I64[Sp] = block_c3DZj_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3DZm: // global
           _s3yms::I64 = I64[Sp + 8];
           if (97 > _s3yms::I64) goto c3E04; else goto c3E0j;
       c3E0j: // global
           if (_s3yms::I64 > 102) goto c3E04; else goto c3E0i;
       c3E04: // global
           Hp = Hp - 32;
           call _c3DZr() args: 0, res: 0, upd: 0;
       c3E0i: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 87;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3DZr() //  []
         { info_tbl: [(c3DZr,
                       label: block_c3DZr_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3DZr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3DZv; else goto c3DZu;
       c3DZv: // global
           HpAlloc = 32;
           I64[Sp] = block_c3DZr_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3DZu: // global
           _s3yms::I64 = I64[Sp + 8];
           if (65 > _s3yms::I64) goto u3E1z; else goto c3DZU;
       u3E1z: // global
           Sp = Sp + 16;
           goto u3E1M;
       c3DZU: // global
           if (_s3yms::I64 > 70) goto u3E1A; else goto c3DZT;
       u3E1A: // global
           Sp = Sp + 16;
           goto u3E1M;
       u3E1M: // global
           call _c3E1m() args: 0, res: 0, upd: 0;
       c3DZT: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yms::I64 - 55;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3E1m() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E1m: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.688464224 UTC

[section ""data" . Text.Read.Lex.$wvalDig_closure" {
     Text.Read.Lex.$wvalDig_closure:
         const Text.Read.Lex.$wvalDig_info;
         const 0;
 },
 Text.Read.Lex.$wvalDig_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E2r: // global
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yn3_entry() //  [R1]
         { info_tbl: [(c3E2z,
                       label: sat_s3yn3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E2z: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3E2A; else goto c3E2B;
       c3E2A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3E2B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yn5_entry() //  [R1]
         { info_tbl: [(c3E2K,
                       label: sat_s3yn5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E2K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3E2L; else goto c3E2M;
       c3E2L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3E2M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yn7_entry() //  [R1]
         { info_tbl: [(c3E2V,
                       label: sat_s3yn7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E2V: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3E2W; else goto c3E2X;
       c3E2W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3E2X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.$wvalDig_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3E32,
                       label: Text.Read.Lex.$wvalDig_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, False, True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E32: // global
           _s3yn2::I64 = R5;
           _s3yn1::P64 = R4;
           _s3yn0::P64 = R3;
           _s3ymZ::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c3E33; else goto c3E34;
       c3E34: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3E36; else goto c3E35;
       c3E36: // global
           HpAlloc = 24;
           goto c3E33;
       c3E33: // global
           R1 = Text.Read.Lex.$wvalDig_closure;
           P64[Sp - 32] = _s3ymZ::P64;
           P64[Sp - 24] = _s3yn0::P64;
           P64[Sp - 16] = _s3yn1::P64;
           I64[Sp - 8] = _s3yn2::I64;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3E35: // global
           I64[Hp - 16] = sat_s3yn3_info;
           P64[Hp] = _s3yn0::P64;
           I64[Sp - 40] = block_c3E2C_info;
           R2 = _s3ymZ::P64;
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = _s3yn1::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 32] = _s3ymZ::P64;
           P64[Sp - 24] = _s3yn0::P64;
           P64[Sp - 16] = _s3yn1::P64;
           I64[Sp - 8] = _s3yn2::I64;
           Sp = Sp - 64;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c3E2C() //  [R1]
         { info_tbl: [(c3E2C,
                       label: block_c3E2C_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E2C: // global
           if (R1 & 7 == 1) goto c3E2Z; else goto c3E30;
       c3E2Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3E39; else goto c3E38;
       c3E39: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3E38: // global
           I64[Hp - 16] = sat_s3yn5_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c3E2N_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c3E30: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E5o; else goto c3E5n;
       c3E5o: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3E5n: // global
           _s3yn2::I64 = I64[Sp + 32];
           if (48 > _s3yn2::I64) goto u3E5N; else goto c3E5K;
       u3E5N: // global
           Sp = Sp + 40;
           goto u3E5U;
       c3E5K: // global
           if (_s3yn2::I64 > 55) goto u3E5O; else goto c3E5J;
       u3E5O: // global
           Sp = Sp + 40;
           goto u3E5U;
       u3E5U: // global
           call _c3E5y() args: 0, res: 0, upd: 0;
       c3E5J: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3E2N() //  [R1]
         { info_tbl: [(c3E2N,
                       label: block_c3E2N_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E2N: // global
           if (R1 & 7 == 1) goto c3E3c; else goto c3E4S;
       c3E3c: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3E3f; else goto c3E3e;
       c3E3f: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3E3e: // global
           I64[Hp - 16] = sat_s3yn7_info;
           P64[Hp] = P64[Sp + 16];
           _s3yn1::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3E3a_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s3yn1::P64;
           P64[Sp + 16] = Hp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c3E4S: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E4X; else goto c3E4W;
       c3E4X: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3E4W: // global
           _s3yn2::I64 = I64[Sp + 32];
           if (48 > _s3yn2::I64) goto u3E5P; else goto c3E5j;
       u3E5P: // global
           Sp = Sp + 40;
           goto u3E5W;
       c3E5j: // global
           if (_s3yn2::I64 > 57) goto u3E5Q; else goto c3E5i;
       u3E5Q: // global
           Sp = Sp + 40;
           goto u3E5W;
       u3E5W: // global
           call _c3E5y() args: 0, res: 0, upd: 0;
       c3E5i: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3E3a() //  [R1]
         { info_tbl: [(c3E3a,
                       label: block_c3E3a_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E3a: // global
           if (R1 & 7 == 1) goto c3E3l; else goto c3E3m;
       c3E3l: // global
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3E3m: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E3r; else goto c3E3q;
       c3E3r: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3E3q: // global
           _s3yn2::I64 = I64[Sp + 8];
           if (48 > _s3yn2::I64) goto c3E4F; else goto c3E4R;
       c3E4R: // global
           if (_s3yn2::I64 > 57) goto c3E4F; else goto c3E4Q;
       c3E4F: // global
           Hp = Hp - 32;
           call _c3E3v() args: 0, res: 0, upd: 0;
       c3E4Q: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3E3v() //  []
         { info_tbl: [(c3E3v,
                       label: block_c3E3v_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E3v: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E3z; else goto c3E3y;
       c3E3z: // global
           HpAlloc = 32;
           I64[Sp] = block_c3E3v_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3E3y: // global
           _s3yn2::I64 = I64[Sp + 8];
           if (97 > _s3yn2::I64) goto c3E4g; else goto c3E4v;
       c3E4v: // global
           if (_s3yn2::I64 > 102) goto c3E4g; else goto c3E4u;
       c3E4g: // global
           Hp = Hp - 32;
           call _c3E3D() args: 0, res: 0, upd: 0;
       c3E4u: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 87;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3E3D() //  []
         { info_tbl: [(c3E3D,
                       label: block_c3E3D_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E3D: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E3H; else goto c3E3G;
       c3E3H: // global
           HpAlloc = 32;
           I64[Sp] = block_c3E3D_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3E3G: // global
           _s3yn2::I64 = I64[Sp + 8];
           if (65 > _s3yn2::I64) goto u3E5R; else goto c3E46;
       u3E5R: // global
           Sp = Sp + 16;
           goto u3E60;
       c3E46: // global
           if (_s3yn2::I64 > 70) goto u3E5S; else goto c3E45;
       u3E5S: // global
           Sp = Sp + 16;
           goto u3E60;
       u3E60: // global
           call _c3E5y() args: 0, res: 0, upd: 0;
       c3E45: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3yn2::I64 - 55;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3E5y() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E5y: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.716277012 UTC

[section ""data" . Text.Read.Lex.$w$sreadIntP'_closure" {
     Text.Read.Lex.$w$sreadIntP'_closure:
         const Text.Read.Lex.$w$sreadIntP'_info;
         const 0;
 },
 sat_s3ynP_entry() //  [R1, R2]
         { info_tbl: [(c3E7g,
                       label: sat_s3ynP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E7g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3E7h; else goto c3E7i;
       c3E7h: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3E7i: // global
           I64[Sp - 16] = block_c3E7d_info;
           _s3ynC::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ynC::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3E7y; else goto c3E7e;
       u3E7y: // global
           call _c3E7d(R1) args: 0, res: 0, upd: 0;
       c3E7e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3E7d() //  [R1]
         { info_tbl: [(c3E7d,
                       label: block_c3E7d_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E7d: // global
           _s3ynC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3E7l_info;
           R3 = I64[R1 + 7];
           R2 = _s3ynC::P64;
           Sp = Sp + 8;
           call Text.Read.Lex.$w$svalDig_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3E7l() //  [R1]
         { info_tbl: [(c3E7l,
                       label: block_c3E7l_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E7l: // global
           if (R1 & 7 == 1) goto c3E7s; else goto c3E7w;
       c3E7s: // global
           R1 = Text.Read.Lex.$fShowLexeme2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3E7w: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ynJ_entry() //  [R1, R2]
         { info_tbl: [(c3E7H,
                       label: sat_s3ynJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E7H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3E7I; else goto c3E7J;
       c3E7I: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3E7J: // global
           I64[Sp - 16] = block_c3E7E_info;
           _s3ynC::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ynC::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3E7Z; else goto c3E7F;
       u3E7Z: // global
           call _c3E7E(R1) args: 0, res: 0, upd: 0;
       c3E7F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3E7E() //  [R1]
         { info_tbl: [(c3E7E,
                       label: block_c3E7E_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E7E: // global
           _s3ynC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3E7M_info;
           R3 = I64[R1 + 7];
           R2 = _s3ynC::P64;
           Sp = Sp + 8;
           call Text.Read.Lex.$w$svalDig_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3E7M() //  [R1]
         { info_tbl: [(c3E7M,
                       label: block_c3E7M_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E7M: // global
           if (R1 & 7 == 1) goto c3E7T; else goto c3E7X;
       c3E7T: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3E7X: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3E85_srtd" {
     u3E85_srtd:
         const S3yFW_srt+240;
         const 34;
         const 8858370049;
 },
 Text.Read.Lex.$w$sreadIntP'_entry() //  [R2, R3]
         { info_tbl: [(c3E80,
                       label: Text.Read.Lex.$w$sreadIntP'_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E80: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3E84; else goto c3E83;
       c3E84: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$sreadIntP'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3E83: // global
           I64[Hp - 24] = sat_s3ynP_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3ynJ_info;
           P64[Hp] = R2;
           R5 = R3;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = R2;
           call Text.Read.Lex.$w$sreadIntP_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.735236505 UTC

[section ""data" . Text.Read.Lex.$wreadIntP'_closure" {
     Text.Read.Lex.$wreadIntP'_closure:
         const Text.Read.Lex.$wreadIntP'_info;
         const 0;
 },
 sat_s3yo5_entry() //  [R1, R2]
         { info_tbl: [(c3E8S,
                       label: sat_s3yo5_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E8S: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3E8T; else goto c3E8U;
       c3E8T: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3E8U: // global
           I64[Sp - 32] = block_c3E8P_info;
           _s3ynQ::P64 = P64[R1 + 7];
           _s3ynR::P64 = P64[R1 + 15];
           _s3ynS::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3ynQ::P64;
           P64[Sp - 16] = _s3ynR::P64;
           P64[Sp - 8] = _s3ynS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3E9a; else goto c3E8Q;
       u3E9a: // global
           call _c3E8P(R1) args: 0, res: 0, upd: 0;
       c3E8Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3E8P() //  [R1]
         { info_tbl: [(c3E8P,
                       label: block_c3E8P_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E8P: // global
           _s3ynS::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3E8X_info;
           R5 = I64[R1 + 7];
           R4 = _s3ynS::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3E8X() //  [R1]
         { info_tbl: [(c3E8X,
                       label: block_c3E8X_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E8X: // global
           if (R1 & 7 == 1) goto c3E94; else goto c3E98;
       c3E94: // global
           R1 = Text.Read.Lex.$fShowLexeme2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3E98: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ynZ_entry() //  [R1, R2]
         { info_tbl: [(c3E9j,
                       label: sat_s3ynZ_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E9j: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3E9k; else goto c3E9l;
       c3E9k: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3E9l: // global
           I64[Sp - 32] = block_c3E9g_info;
           _s3ynQ::P64 = P64[R1 + 7];
           _s3ynR::P64 = P64[R1 + 15];
           _s3ynS::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3ynQ::P64;
           P64[Sp - 16] = _s3ynR::P64;
           P64[Sp - 8] = _s3ynS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3E9B; else goto c3E9h;
       u3E9B: // global
           call _c3E9g(R1) args: 0, res: 0, upd: 0;
       c3E9h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3E9g() //  [R1]
         { info_tbl: [(c3E9g,
                       label: block_c3E9g_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E9g: // global
           _s3ynS::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3E9o_info;
           R5 = I64[R1 + 7];
           R4 = _s3ynS::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3E9o() //  [R1]
         { info_tbl: [(c3E9o,
                       label: block_c3E9o_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E9o: // global
           if (R1 & 7 == 1) goto c3E9v; else goto c3E9z;
       c3E9v: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3E9z: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3E9H_srtd" {
     u3E9H_srtd:
         const S3yFW_srt+256;
         const 33;
         const 5368709121;
 },
 Text.Read.Lex.$wreadIntP'_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3E9C,
                       label: Text.Read.Lex.$wreadIntP'_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3E9C: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3E9G; else goto c3E9F;
       c3E9G: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wreadIntP'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3E9F: // global
           I64[Hp - 56] = sat_s3yo5_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3ynZ_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R6 = R5;
           R5 = Hp - 55;
           _s3ynS::P64 = R4;
           R4 = Hp - 23;
           _s3ynR::P64 = R3;
           R3 = _s3ynS::P64;
           R2 = _s3ynR::P64;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.753125715 UTC

[section ""data" . Text.Read.Lex.readDecP6_closure" {
     Text.Read.Lex.readDecP6_closure:
         const Text.Read.Lex.readDecP6_info;
         const 0;
 },
 Text.Read.Lex.readDecP6_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3Eap,
                       label: Text.Read.Lex.readDecP6_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eap: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Eaq; else goto c3Ear;
       c3Eaq: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readDecP6_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ear: // global
           I64[Sp - 8] = block_c3Eam_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Eam() //  [R1]
         { info_tbl: [(c3Eam,
                       label: block_c3Eam_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eam: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Eau; else goto c3Eat;
       c3Eau: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Eat: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.759788573 UTC

[section ""data" . Text.Read.Lex.readOctP1_closure" {
     Text.Read.Lex.readOctP1_closure:
         const Text.Read.Lex.readOctP1_info;
         const 0;
 },
 Text.Read.Lex.readOctP1_entry() //  [R2]
         { info_tbl: [(c3EaL,
                       label: Text.Read.Lex.readOctP1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EaL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3EaM; else goto c3EaN;
       c3EaM: // global
           R2 = R2;
           R1 = Text.Read.Lex.readOctP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EaN: // global
           I64[Sp - 8] = block_c3EaI_info;
           R3 = R2;
           R2 = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EaI() //  [R1]
         { info_tbl: [(c3EaI,
                       label: block_c3EaI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EaI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EaQ; else goto c3EaP;
       c3EaQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EaP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.766009806 UTC

[section ""data" . Text.Read.Lex.readOctP_$sreadOctP_closure" {
     Text.Read.Lex.readOctP_$sreadOctP_closure:
         const Text.Read.Lex.readOctP_$sreadOctP_info;
         const 0;
 },
 Text.Read.Lex.readOctP_$sreadOctP_entry() //  [R2]
         { info_tbl: [(c3Eb4,
                       label: Text.Read.Lex.readOctP_$sreadOctP_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eb4: // global
           R2 = R2;
           call Text.Read.Lex.readOctP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.770573902 UTC

[section ""data" . Text.Read.Lex.readOctP2_closure" {
     Text.Read.Lex.readOctP2_closure:
         const Text.Read.Lex.readOctP2_info;
         const 0;
 },
 w2_s3yoh_entry() //  [R1]
         { info_tbl: [(c3Ebj,
                       label: w2_s3yoh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ebj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Ebk; else goto c3Ebl;
       c3Ebk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ebl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yol_entry() //  [R1, R2]
         { info_tbl: [(c3Ebu,
                       label: sat_s3yol_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ebu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ebv; else goto c3Ebw;
       c3Ebv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ebw: // global
           I64[Sp - 8] = block_c3Ebr_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ebr() //  [R1]
         { info_tbl: [(c3Ebr,
                       label: block_c3Ebr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ebr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ebz; else goto c3Eby;
       c3Ebz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Eby: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.readOctP2_entry() //  [R2, R3]
         { info_tbl: [(c3EbA,
                       label: Text.Read.Lex.readOctP2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EbA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3EbE; else goto c3EbD;
       c3EbE: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readOctP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3EbD: // global
           I64[Hp - 48] = w2_s3yoh_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yol_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.781102378 UTC

[section ""data" . Text.Read.Lex.readOctP_closure" {
     Text.Read.Lex.readOctP_closure:
         const Text.Read.Lex.readOctP_info;
         const 0;
 },
 Text.Read.Lex.readOctP_entry() //  [R2, R3]
         { info_tbl: [(c3Ec1,
                       label: Text.Read.Lex.readOctP_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ec1: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readOctP2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.785611682 UTC

[section ""data" . Text.Read.Lex.readDecP1_closure" {
     Text.Read.Lex.readDecP1_closure:
         const Text.Read.Lex.readDecP1_info;
         const 0;
 },
 section ""relreadonly" . u3Ecl_srtd" {
     u3Ecl_srtd:
         const S3yFW_srt+280;
         const 34;
         const 8858370049;
 },
 Text.Read.Lex.readDecP1_entry() //  [R2]
         { info_tbl: [(c3Ecf,
                       label: Text.Read.Lex.readDecP1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ecf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ecg; else goto c3Ech;
       c3Ecg: // global
           R2 = R2;
           R1 = Text.Read.Lex.readDecP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ech: // global
           I64[Sp - 8] = block_c3Ecc_info;
           R3 = R2;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ecc() //  [R1]
         { info_tbl: [(c3Ecc,
                       label: block_c3Ecc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ecc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Eck; else goto c3Ecj;
       c3Eck: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ecj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.792568145 UTC

[section ""data" . Text.Read.Lex.readDecP_$sreadDecP_closure" {
     Text.Read.Lex.readDecP_$sreadDecP_closure:
         const Text.Read.Lex.readDecP_$sreadDecP_info;
         const 0;
 },
 Text.Read.Lex.readDecP_$sreadDecP_entry() //  [R2]
         { info_tbl: [(c3EcA,
                       label: Text.Read.Lex.readDecP_$sreadDecP_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EcA: // global
           R2 = R2;
           call Text.Read.Lex.readDecP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.796779542 UTC

[section ""data" . Text.Read.Lex.readDecP5_closure" {
     Text.Read.Lex.readDecP5_closure:
         const Text.Read.Lex.readDecP5_info;
         const 0;
 },
 w2_s3yor_entry() //  [R1]
         { info_tbl: [(c3EcP,
                       label: w2_s3yor_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EcP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3EcQ; else goto c3EcR;
       c3EcQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EcR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yov_entry() //  [R1, R2]
         { info_tbl: [(c3Ed0,
                       label: sat_s3yov_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ed0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ed1; else goto c3Ed2;
       c3Ed1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ed2: // global
           I64[Sp - 8] = block_c3EcX_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EcX() //  [R1]
         { info_tbl: [(c3EcX,
                       label: block_c3EcX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EcX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ed5; else goto c3Ed4;
       c3Ed5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ed4: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.readDecP5_entry() //  [R2, R3]
         { info_tbl: [(c3Ed6,
                       label: Text.Read.Lex.readDecP5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ed6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Eda; else goto c3Ed9;
       c3Eda: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readDecP5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ed9: // global
           I64[Hp - 48] = w2_s3yor_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yov_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.807853136 UTC

[section ""data" . Text.Read.Lex.readDecP_closure" {
     Text.Read.Lex.readDecP_closure:
         const Text.Read.Lex.readDecP_info;
         const 0;
 },
 Text.Read.Lex.readDecP_entry() //  [R2, R3]
         { info_tbl: [(c3Edx,
                       label: Text.Read.Lex.readDecP_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Edx: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readDecP5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.812288054 UTC

[section ""data" . Text.Read.Lex.readHexP1_closure" {
     Text.Read.Lex.readHexP1_closure:
         const Text.Read.Lex.readHexP1_info;
         const 0;
 },
 Text.Read.Lex.readHexP1_entry() //  [R2]
         { info_tbl: [(c3EdL,
                       label: Text.Read.Lex.readHexP1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EdL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3EdM; else goto c3EdN;
       c3EdM: // global
           R2 = R2;
           R1 = Text.Read.Lex.readHexP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EdN: // global
           I64[Sp - 8] = block_c3EdI_info;
           R3 = R2;
           R2 = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EdI() //  [R1]
         { info_tbl: [(c3EdI,
                       label: block_c3EdI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EdI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EdQ; else goto c3EdP;
       c3EdQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EdP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.818480895 UTC

[section ""data" . Text.Read.Lex.readHexP_$sreadHexP_closure" {
     Text.Read.Lex.readHexP_$sreadHexP_closure:
         const Text.Read.Lex.readHexP_$sreadHexP_info;
         const 0;
 },
 Text.Read.Lex.readHexP_$sreadHexP_entry() //  [R2]
         { info_tbl: [(c3Ee4,
                       label: Text.Read.Lex.readHexP_$sreadHexP_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ee4: // global
           R2 = R2;
           call Text.Read.Lex.readHexP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.823183486 UTC

[section ""data" . Text.Read.Lex.readHexP2_closure" {
     Text.Read.Lex.readHexP2_closure:
         const Text.Read.Lex.readHexP2_info;
         const 0;
 },
 w2_s3yoB_entry() //  [R1]
         { info_tbl: [(c3Eej,
                       label: w2_s3yoB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eej: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Eek; else goto c3Eel;
       c3Eek: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Eel: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yoF_entry() //  [R1, R2]
         { info_tbl: [(c3Eeu,
                       label: sat_s3yoF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eeu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Eev; else goto c3Eew;
       c3Eev: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Eew: // global
           I64[Sp - 8] = block_c3Eer_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Eer() //  [R1]
         { info_tbl: [(c3Eer,
                       label: block_c3Eer_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eer: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Eez; else goto c3Eey;
       c3Eez: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Eey: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.readHexP2_entry() //  [R2, R3]
         { info_tbl: [(c3EeA,
                       label: Text.Read.Lex.readHexP2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EeA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3EeE; else goto c3EeD;
       c3EeE: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readHexP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3EeD: // global
           I64[Hp - 48] = w2_s3yoB_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yoF_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.833969267 UTC

[section ""data" . Text.Read.Lex.readHexP_closure" {
     Text.Read.Lex.readHexP_closure:
         const Text.Read.Lex.readHexP_info;
         const 0;
 },
 Text.Read.Lex.readHexP_entry() //  [R2, R3]
         { info_tbl: [(c3Ef1,
                       label: Text.Read.Lex.readHexP_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ef1: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readHexP2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.84152354 UTC

[section ""data" . $wlexDigits_r3y9x_closure" {
     $wlexDigits_r3y9x_closure:
         const $wlexDigits_r3y9x_info;
         const 0;
 },
 lvl116_s3yoI_entry() //  [R1, R2]
         { info_tbl: [(c3Efo,
                       label: lvl116_s3yoI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Efo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Efp; else goto c3Efq;
       c3Efp: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Efq: // global
           I64[Sp - 16] = block_c3Efh_info;
           _s3yoH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yoH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Efx; else goto c3Efi;
       u3Efx: // global
           call _c3Efh(R1) args: 0, res: 0, upd: 0;
       c3Efi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Efh() //  [R1]
         { info_tbl: [(c3Efh,
                       label: block_c3Efh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Efh: // global
           if (R1 & 7 == 1) goto c3Efl; else goto c3Efm;
       c3Efl: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Efm: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yoS_entry() //  [R1]
         { info_tbl: [(c3EfM,
                       label: sat_s3yoS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EfM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EfN; else goto c3EfO;
       c3EfN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EfO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yp4_entry() //  [R1, R2]
         { info_tbl: [(c3Egg,
                       label: sat_s3yp4_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Egg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Egk; else goto c3Egj;
       c3Egk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Egj: // global
           _s3yoP::P64 = P64[R1 + 7];
           _s3yp0::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yp0::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3yoP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3yp1_entry() //  [R1]
         { info_tbl: [(c3Egl,
                       label: lvl117_s3yp1_info
                       rep:HeapRep 5 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Egl: // global
           _s3yp1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Egm; else goto c3Egn;
       c3Egn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Egp; else goto c3Ego;
       c3Egp: // global
           HpAlloc = 24;
           goto c3Egm;
       c3Egm: // global
           R1 = _s3yp1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ego: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yp1::P64;
           _s3yoN::P64 = P64[_s3yp1::P64 + 16];
           _s3yoP::P64 = P64[_s3yp1::P64 + 24];
           _s3yoQ::P64 = P64[_s3yp1::P64 + 32];
           _s3yoU::P64 = P64[_s3yp1::P64 + 40];
           _s3yp0::P64 = P64[_s3yp1::P64 + 48];
           I64[Hp - 16] = sat_s3yp4_info;
           P64[Hp - 8] = _s3yoP::P64;
           P64[Hp] = _s3yp0::P64;
           R4 = _s3yoQ::P64;
           R3 = Hp - 15;
           R2 = _s3yoU::P64;
           R1 = _s3yoN::P64;
           Sp = Sp - 16;
           call scan_s3yoN_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yp6_entry() //  [R1]
         { info_tbl: [(c3Egv,
                       label: sat_s3yp6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Egv: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ypa_entry() //  [R1]
         { info_tbl: [(c3EgI,
                       label: sat_s3ypa_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EgI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EgJ; else goto c3EgK;
       c3EgJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EgK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ypc_entry() //  [R1]
         { info_tbl: [(c3EgT,
                       label: sat_s3ypc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EgT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EgU; else goto c3EgV;
       c3EgU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EgV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yph_entry() //  [R1]
         { info_tbl: [(c3Eh4,
                       label: sat_s3yph_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eh4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Eh5; else goto c3Eh6;
       c3Eh5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Eh6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ypj_entry() //  [R1]
         { info_tbl: [(c3Ehf,
                       label: sat_s3ypj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ehf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ehg; else goto c3Ehh;
       c3Ehg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ehh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ypq_entry() //  [R1]
         { info_tbl: [(c3EhA,
                       label: sat_s3ypq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EhA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EhB; else goto c3EhC;
       c3EhB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EhC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yps_entry() //  [R1]
         { info_tbl: [(c3EhL,
                       label: sat_s3yps_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EhL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EhM; else goto c3EhN;
       c3EhM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EhN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 scan_s3yoN_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c3EhS,
                       label: scan_s3yoN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EhS: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3EhT; else goto c3EhU;
       c3EhT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3EhU: // global
           I64[Sp - 40] = block_c3EfD_info;
           _s3yoN::P64 = R1;
           _s3yoG::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3yoG::P64;
           P64[Sp - 24] = _s3yoN::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3Ek4; else goto c3EfE;
       u3Ek4: // global
           call _c3EfD(R1) args: 0, res: 0, upd: 0;
       c3EfE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3EfD() //  [R1]
         { info_tbl: [(c3EfD,
                       label: block_c3EfD_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EfD: // global
           if (R1 & 7 == 1) goto c3EhP; else goto c3EhQ;
       c3EhP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3EhX; else goto c3EhW;
       c3EhX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EhW: // global
           I64[Hp - 16] = sat_s3yoS_info;
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 16;
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3EhQ: // global
           I64[Sp - 8] = block_c3EfR_info;
           _s3yoT::P64 = P64[R1 + 6];
           _s3yoU::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s3yoU::P64;
           P64[Sp + 8] = _s3yoT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3EjU; else goto c3EfS;
       u3EjU: // global
           call _c3EfR(R1) args: 0, res: 0, upd: 0;
       c3EfS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3EfR() //  [R1]
         { info_tbl: [(c3EfR,
                       label: block_c3EfR_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EfR: // global
           I64[Sp] = block_c3EfW_info;
           _s3yoW::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3yoW::I64;
           if (R1 & 7 != 0) goto u3EjV; else goto c3EfX;
       u3EjV: // global
           call _c3EfW(R1) args: 0, res: 0, upd: 0;
       c3EfX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3EfW() //  [R1]
         { info_tbl: [(c3EfW,
                       label: block_c3EfW_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EfW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Ei2; else goto c3Ei1;
       c3Ei2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ei1: // global
           _s3yoY::I64 = I64[R1 + 7];
           _s3yp7::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s3yp7::I64, 11)) goto u3EjK; else goto u3EjM;
       u3EjK: // global
           _s3yoP::P64 = P64[Sp + 32];
           _s3yoQ::P64 = P64[Sp + 40];
           if (%MO_S_Lt_W64(_s3yp7::I64, 10)) goto u3EjL; else goto c3Eim;
       u3EjL: // global
           if (_s3yp7::I64 != 8) goto c3Ei8; else goto c3Eif;
       c3Eif: // global
           if (48 > _s3yoY::I64) goto c3Eia; else goto c3Eie;
       c3Eia: // global
           I64[Hp - 16] = sat_s3ypa_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Eie: // global
           if (_s3yoY::I64 > 55) goto c3Eic; else goto c3Eid;
       c3Eic: // global
           I64[Hp - 16] = sat_s3ypc_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Eid: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 48;
           _c3EjJ::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3EjJ::P64;
           Sp = Sp + 8;
           goto u3EjZ;
       c3Eim: // global
           if (48 > _s3yoY::I64) goto c3Eih; else goto c3Eil;
       c3Eih: // global
           I64[Hp - 16] = sat_s3yph_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Eil: // global
           if (_s3yoY::I64 > 57) goto c3Eij; else goto c3Eik;
       c3Eij: // global
           I64[Hp - 16] = sat_s3ypj_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Eik: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 48;
           _c3EjD::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3EjD::P64;
           Sp = Sp + 8;
           goto u3EjZ;
       u3EjM: // global
           if (_s3yp7::I64 != 16) goto c3Ei8; else goto c3EiX;
       c3Ei8: // global
           Hp = Hp - 24;
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3EiX: // global
           if (48 > _s3yoY::I64) goto c3EiU; else goto c3EiW;
       c3EiW: // global
           if (_s3yoY::I64 > 57) goto c3EiU; else goto c3EiV;
       c3EiU: // global
           Hp = Hp - 24;
           I64[Sp + 16] = _s3yoY::I64;
           call _c3Ehm() args: 0, res: 0, upd: 0;
       c3EiV: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 48;
           _c3Ejf::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3Ejf::P64;
           Sp = Sp + 8;
           goto u3EjZ;
       u3EjZ: // global
           call _c3Eg4() args: 0, res: 0, upd: 0;
     }
 },
 _c3Ehm() //  []
         { info_tbl: [(c3Ehm,
                       label: block_c3Ehm_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ehm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Eip; else goto c3Eio;
       c3Eip: // global
           HpAlloc = 16;
           I64[Sp] = block_c3Ehm_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Eio: // global
           _s3yoY::I64 = I64[Sp + 16];
           if (97 > _s3yoY::I64) goto c3EiI; else goto c3EiK;
       c3EiK: // global
           if (_s3yoY::I64 > 102) goto c3EiI; else goto c3EiJ;
       c3EiI: // global
           Hp = Hp - 16;
           call _c3Ehr() args: 0, res: 0, upd: 0;
       c3EiJ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3yoY::I64 - 87;
           P64[Sp + 16] = Hp - 7;
           Sp = Sp + 8;
           call _c3Eg4() args: 0, res: 0, upd: 0;
     }
 },
 _c3Ehr() //  []
         { info_tbl: [(c3Ehr,
                       label: block_c3Ehr_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ehr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Eis; else goto c3Eir;
       c3Eis: // global
           HpAlloc = 24;
           I64[Sp] = block_c3Ehr_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Eir: // global
           _s3yoP::P64 = P64[Sp + 32];
           _s3yoQ::P64 = P64[Sp + 40];
           _s3yoY::I64 = I64[Sp + 16];
           if (65 > _s3yoY::I64) goto c3Eiu; else goto c3Eiy;
       c3Eiu: // global
           I64[Hp - 16] = sat_s3ypq_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Eiy: // global
           if (_s3yoY::I64 > 70) goto c3Eiw; else goto c3Eix;
       c3Eiw: // global
           I64[Hp - 16] = sat_s3yps_info;
           P64[Hp] = _s3yoP::P64;
           R2 = Hp - 16;
           R1 = _s3yoQ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3Eix: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3yoY::I64 - 55;
           _c3Ejx::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3Ejx::P64;
           Sp = Sp + 8;
           call _c3Eg4() args: 0, res: 0, upd: 0;
     }
 },
 _c3Eg4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eg4: // global
           Hp = Hp + 88;
           _s3yp0::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c3Ei6; else goto c3Ei5;
       c3Ei6: // global
           HpAlloc = 88;
           I64[Sp - 8] = block_c3Eg3_info;
           R1 = _s3yp0::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ei5: // global
           I64[Hp - 80] = lvl117_s3yp1_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = _s3yp0::P64;
           I64[Hp - 24] = sat_s3yp6_info;
           P64[Hp - 16] = Hp - 80;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Eg3() //  [R1]
         { info_tbl: [(c3Eg3,
                       label: block_c3Eg3_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eg3: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c3Eg4() args: 0, res: 0, upd: 0;
     }
 },
 sat_s3ypJ_entry() //  [R1, R2]
         { info_tbl: [(c3Eka,
                       label: sat_s3ypJ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eka: // global
           R4 = P64[R1 + 7];
           R3 = GHC.Base.id_closure+1;
           R2 = R2;
           R1 = P64[R1 + 15];
           call scan_s3yoN_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlexDigits_r3y9x_entry() //  [R2, R3]
         { info_tbl: [(c3Ekd,
                       label: $wlexDigits_r3y9x_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ekd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Ekh; else goto c3Ekg;
       c3Ekh: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = $wlexDigits_r3y9x_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ekg: // global
           I64[Hp - 48] = lvl116_s3yoI_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = scan_s3yoN_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3ypJ_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 29;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.8931364 UTC

[section ""data" . a1_r3y9y_closure" {
     a1_r3y9y_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.895311865 UTC

[section ""data" . a2_r3y9z_closure" {
     a2_r3y9z_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.899065596 UTC

[section ""data" . $wlexHexOct_r3y9A_closure" {
     $wlexHexOct_r3y9A_closure:
         const $wlexHexOct_r3y9A_info;
         const 0;
 },
 sat_s3ypP_entry() //  [R1, R2]
         { info_tbl: [(c3Emg,
                       label: sat_s3ypP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Emg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Emk; else goto c3Emj;
       c3Emk: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Emj: // global
           _s3ypK::P64 = P64[R1 + 7];
           I64[Hp - 32] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 24] = a2_r3y9z_closure+1;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 2;
           R1 = _s3ypK::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3ypL_entry() //  [R1]
         { info_tbl: [(c3Emo,
                       label: lvl116_s3ypL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Emo: // global
           _s3ypL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Emp; else goto c3Emq;
       c3Emq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ems; else goto c3Emr;
       c3Ems: // global
           HpAlloc = 16;
           goto c3Emp;
       c3Emp: // global
           R1 = _s3ypL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Emr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ypL::P64;
           _s3ypK::P64 = P64[_s3ypL::P64 + 16];
           I64[Hp - 8] = sat_s3ypP_info;
           P64[Hp] = _s3ypK::P64;
           I64[Sp - 24] = block_c3Eml_info;
           R3 = Hp - 7;
           R2 = a2_r3y9z_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Eml() //  [R1]
         { info_tbl: [(c3Eml,
                       label: block_c3Eml_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eml: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Emv; else goto c3Emu;
       c3Emv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Emu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ypW_entry() //  [R1, R2]
         { info_tbl: [(c3EmH,
                       label: sat_s3ypW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EmH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EmL; else goto c3EmK;
       c3EmL: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EmK: // global
           _s3ypK::P64 = P64[R1 + 7];
           I64[Hp - 32] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 24] = a1_r3y9y_closure+1;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 2;
           R1 = _s3ypK::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3ypS_entry() //  [R1]
         { info_tbl: [(c3EmP,
                       label: lvl117_s3ypS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EmP: // global
           _s3ypS::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3EmQ; else goto c3EmR;
       c3EmR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EmT; else goto c3EmS;
       c3EmT: // global
           HpAlloc = 16;
           goto c3EmQ;
       c3EmQ: // global
           R1 = _s3ypS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EmS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ypS::P64;
           _s3ypK::P64 = P64[_s3ypS::P64 + 16];
           I64[Hp - 8] = sat_s3ypW_info;
           P64[Hp] = _s3ypK::P64;
           I64[Sp - 24] = block_c3EmM_info;
           R3 = Hp - 7;
           R2 = a1_r3y9y_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3EmM() //  [R1]
         { info_tbl: [(c3EmM,
                       label: block_c3EmM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EmM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EmW; else goto c3EmV;
       c3EmW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3EmV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3ypZ_entry() //  [R1, R2]
         { info_tbl: [(c3En5,
                       label: lvl118_s3ypZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3En5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3En6; else goto c3En7;
       c3En6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3En7: // global
           I64[Sp - 24] = block_c3En2_info;
           _s3ypL::P64 = P64[R1 + 7];
           _s3ypS::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ypL::P64;
           P64[Sp - 8] = _s3ypS::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Enn; else goto c3En3;
       u3Enn: // global
           call _c3En2(R1) args: 0, res: 0, upd: 0;
       c3En3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3En2() //  [R1]
         { info_tbl: [(c3En2,
                       label: block_c3En2_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3En2: // global
           _s3ypL::P64 = P64[Sp + 8];
           _s3yq3::I64 = I64[R1 + 7];
           if (_s3yq3::I64 < 120) goto u3Eni; else goto u3Enm;
       u3Eni: // global
           _s3ypS::P64 = P64[Sp + 16];
           if (_s3yq3::I64 < 89) goto u3Enj; else goto u3Enl;
       u3Enj: // global
           if (_s3yq3::I64 >= 88) goto c3Enh; else goto u3Enk;
       u3Enk: // global
           if (_s3yq3::I64 != 79) goto c3End; else goto c3Eng;
       u3Enl: // global
           if (_s3yq3::I64 != 111) goto c3End; else goto c3Eng;
       c3Eng: // global
           R1 = _s3ypS::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Enm: // global
           if (_s3yq3::I64 < 121) goto c3Enh; else goto c3End;
       c3Enh: // global
           R1 = _s3ypL::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3End: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yq9_entry() //  [R1, R2]
         { info_tbl: [(c3Enx,
                       label: sat_s3yq9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Enx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Eny; else goto c3Enz;
       c3Eny: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Enz: // global
           I64[Sp - 16] = block_c3Enu_info;
           _s3yq4::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yq4::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3EnH; else goto c3Env;
       u3EnH: // global
           call _c3Enu(R1) args: 0, res: 0, upd: 0;
       c3Env: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Enu() //  [R1]
         { info_tbl: [(c3Enu,
                       label: block_c3Enu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Enu: // global
           if (I64[R1 + 7] == 48) goto c3EnG; else goto c3EnF;
       c3EnG: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3EnF: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlexHexOct_r3y9A_entry() //  [R2]
         { info_tbl: [(c3EnI,
                       label: $wlexHexOct_r3y9A_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EnI: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3EnM; else goto c3EnL;
       c3EnM: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = $wlexHexOct_r3y9A_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EnL: // global
           I64[Hp - 96] = lvl116_s3ypL_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = lvl117_s3ypS_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = lvl118_s3ypZ_info;
           P64[Hp - 40] = Hp - 96;
           P64[Hp - 32] = Hp - 72;
           I64[Hp - 24] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = sat_s3yq9_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.930688559 UTC

[section ""data" . lexHexOct_r3y9B_closure" {
     lexHexOct_r3y9B_closure:
         const lexHexOct_r3y9B_info;
         const 0;
 },
 lexHexOct_r3y9B_entry() //  [R2]
         { info_tbl: [(c3EoO,
                       label: lexHexOct_r3y9B_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EoO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3EoP; else goto c3EoQ;
       c3EoP: // global
           R2 = R2;
           R1 = lexHexOct_r3y9B_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EoQ: // global
           I64[Sp - 8] = block_c3EoL_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexHexOct_r3y9A_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EoL() //  [R1]
         { info_tbl: [(c3EoL,
                       label: block_c3EoL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EoL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EoT; else goto c3EoS;
       c3EoT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EoS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.939245757 UTC

[section ""data" . lvl6_r3y9C_closure" {
     lvl6_r3y9C_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.943578032 UTC

[section ""data" . $wlexFrac_r3y9D_closure" {
     $wlexFrac_r3y9D_closure:
         const $wlexFrac_r3y9D_info;
         const 0;
 },
 sat_s3yqh_entry() //  [R1, R2]
         { info_tbl: [(c3Epi,
                       label: sat_s3yqh_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Epi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Epm; else goto c3Epl;
       c3Epm: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Epl: // global
           _s3yqd::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s3yqd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yqe_entry() //  [R1]
         { info_tbl: [(c3Epq,
                       label: lvl116_s3yqe_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Epq: // global
           _s3yqe::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Epr; else goto c3Eps;
       c3Eps: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Epu; else goto c3Ept;
       c3Epu: // global
           HpAlloc = 16;
           goto c3Epr;
       c3Epr: // global
           R1 = _s3yqe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ept: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yqe::P64;
           _s3yqd::P64 = P64[_s3yqe::P64 + 16];
           I64[Hp - 8] = sat_s3yqh_info;
           P64[Hp] = _s3yqd::P64;
           I64[Sp - 24] = block_c3Epn_info;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Epn() //  [R1]
         { info_tbl: [(c3Epn,
                       label: block_c3Epn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Epn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Epx; else goto c3Epw;
       c3Epx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Epw: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqo_entry() //  [R1, R2]
         { info_tbl: [(c3EpG,
                       label: sat_s3yqo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EpG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EpH; else goto c3EpI;
       c3EpH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EpI: // global
           I64[Sp - 16] = block_c3EpD_info;
           _s3yqe::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yqe::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3EpQ; else goto c3EpE;
       u3EpQ: // global
           call _c3EpD(R1) args: 0, res: 0, upd: 0;
       c3EpE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3EpD() //  [R1]
         { info_tbl: [(c3EpD,
                       label: block_c3EpD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EpD: // global
           if (I64[R1 + 7] == 46) goto c3EpP; else goto c3EpO;
       c3EpP: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3EpO: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlexFrac_r3y9D_entry() //  [R2]
         { info_tbl: [(c3EpR,
                       label: $wlexFrac_r3y9D_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EpR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EpV; else goto c3EpU;
       c3EpV: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = $wlexFrac_r3y9D_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EpU: // global
           I64[Hp - 32] = lvl116_s3yqe_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3yqo_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.967424066 UTC

[section ""data" . lexFrac_r3y9E_closure" {
     lexFrac_r3y9E_closure:
         const lexFrac_r3y9E_info;
         const 0;
 },
 lexFrac_r3y9E_entry() //  [R2]
         { info_tbl: [(c3Eqv,
                       label: lexFrac_r3y9E_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eqv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Eqw; else goto c3Eqx;
       c3Eqw: // global
           R2 = R2;
           R1 = lexFrac_r3y9E_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Eqx: // global
           I64[Sp - 8] = block_c3Eqs_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexFrac_r3y9D_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Eqs() //  [R1]
         { info_tbl: [(c3Eqs,
                       label: block_c3Eqs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eqs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EqA; else goto c3Eqz;
       c3EqA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Eqz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.976879154 UTC

[section ""cstring" . m1_r3y9F_bytes" {
     m1_r3y9F_bytes:
         I8[] [83,79,72]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.9793383 UTC

[section ""data" . m2_r3y9G_closure" {
     m2_r3y9G_closure:
         const m2_r3y9G_info;
         const 0;
         const 0;
         const 0;
 },
 m2_r3y9G_entry() //  [R1]
         { info_tbl: [(c3EqR,
                       label: m2_r3y9G_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EqR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EqS; else goto c3EqT;
       c3EqS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EqT: // global
           (_c3EqO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EqO::I64 == 0) goto c3EqQ; else goto c3EqP;
       c3EqQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EqP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EqO::I64;
           R2 = m1_r3y9F_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.983534487 UTC

[section ""data" . x_r3y9H_closure" {
     x_r3y9H_closure:
         const GHC.Types.C#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.98541207 UTC

[section ""cstring" . m3_r3y9I_bytes" {
     m3_r3y9I_bytes:
         I8[] [83,79]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.987818102 UTC

[section ""data" . m4_r3y9J_closure" {
     m4_r3y9J_closure:
         const m4_r3y9J_info;
         const 0;
         const 0;
         const 0;
 },
 m4_r3y9J_entry() //  [R1]
         { info_tbl: [(c3Er9,
                       label: m4_r3y9J_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Er9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Era; else goto c3Erb;
       c3Era: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Erb: // global
           (_c3Er6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Er6::I64 == 0) goto c3Er8; else goto c3Er7;
       c3Er8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Er7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Er6::I64;
           R2 = m3_r3y9I_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.992106403 UTC

[section ""data" . x1_r3y9K_closure" {
     x1_r3y9K_closure:
         const GHC.Types.C#_con_info;
         const 14;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.994041871 UTC

[section ""cstring" . m5_r3y9L_bytes" {
     m5_r3y9L_bytes:
         I8[] [78,85,76]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:12.996559673 UTC

[section ""data" . m6_r3y9M_closure" {
     m6_r3y9M_closure:
         const m6_r3y9M_info;
         const 0;
         const 0;
         const 0;
 },
 m6_r3y9M_entry() //  [R1]
         { info_tbl: [(c3Err,
                       label: m6_r3y9M_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Err: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ers; else goto c3Ert;
       c3Ers: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ert: // global
           (_c3Ero::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ero::I64 == 0) goto c3Erq; else goto c3Erp;
       c3Erq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Erp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ero::I64;
           R2 = m5_r3y9L_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.000682632 UTC

[section ""data" . x2_r3y9N_closure" {
     x2_r3y9N_closure:
         const GHC.Types.C#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.002445136 UTC

[section ""cstring" . m7_r3y9O_bytes" {
     m7_r3y9O_bytes:
         I8[] [83,84,88]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.004433666 UTC

[section ""data" . m8_r3y9P_closure" {
     m8_r3y9P_closure:
         const m8_r3y9P_info;
         const 0;
         const 0;
         const 0;
 },
 m8_r3y9P_entry() //  [R1]
         { info_tbl: [(c3ErJ,
                       label: m8_r3y9P_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ErJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ErK; else goto c3ErL;
       c3ErK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ErL: // global
           (_c3ErG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ErG::I64 == 0) goto c3ErI; else goto c3ErH;
       c3ErI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ErH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ErG::I64;
           R2 = m7_r3y9O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.009077057 UTC

[section ""data" . x3_r3y9Q_closure" {
     x3_r3y9Q_closure:
         const GHC.Types.C#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.010831648 UTC

[section ""cstring" . m9_r3y9R_bytes" {
     m9_r3y9R_bytes:
         I8[] [69,84,88]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.012848684 UTC

[section ""data" . m10_r3y9S_closure" {
     m10_r3y9S_closure:
         const m10_r3y9S_info;
         const 0;
         const 0;
         const 0;
 },
 m10_r3y9S_entry() //  [R1]
         { info_tbl: [(c3Es1,
                       label: m10_r3y9S_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Es1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Es2; else goto c3Es3;
       c3Es2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Es3: // global
           (_c3ErY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ErY::I64 == 0) goto c3Es0; else goto c3ErZ;
       c3Es0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ErZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ErY::I64;
           R2 = m9_r3y9R_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.017481437 UTC

[section ""data" . x4_r3y9T_closure" {
     x4_r3y9T_closure:
         const GHC.Types.C#_con_info;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.019177352 UTC

[section ""cstring" . m11_r3y9U_bytes" {
     m11_r3y9U_bytes:
         I8[] [69,79,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.021141636 UTC

[section ""data" . m12_r3y9V_closure" {
     m12_r3y9V_closure:
         const m12_r3y9V_info;
         const 0;
         const 0;
         const 0;
 },
 m12_r3y9V_entry() //  [R1]
         { info_tbl: [(c3Esj,
                       label: m12_r3y9V_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Esj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Esk; else goto c3Esl;
       c3Esk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Esl: // global
           (_c3Esg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Esg::I64 == 0) goto c3Esi; else goto c3Esh;
       c3Esi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Esh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Esg::I64;
           R2 = m11_r3y9U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.026239015 UTC

[section ""data" . x5_r3y9W_closure" {
     x5_r3y9W_closure:
         const GHC.Types.C#_con_info;
         const 4;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.027961683 UTC

[section ""cstring" . m13_r3y9X_bytes" {
     m13_r3y9X_bytes:
         I8[] [69,78,81]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.030043306 UTC

[section ""data" . m14_r3y9Y_closure" {
     m14_r3y9Y_closure:
         const m14_r3y9Y_info;
         const 0;
         const 0;
         const 0;
 },
 m14_r3y9Y_entry() //  [R1]
         { info_tbl: [(c3EsB,
                       label: m14_r3y9Y_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EsB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EsC; else goto c3EsD;
       c3EsC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EsD: // global
           (_c3Esy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Esy::I64 == 0) goto c3EsA; else goto c3Esz;
       c3EsA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Esz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Esy::I64;
           R2 = m13_r3y9X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.034954898 UTC

[section ""data" . x6_r3y9Z_closure" {
     x6_r3y9Z_closure:
         const GHC.Types.C#_con_info;
         const 5;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.037284649 UTC

[section ""cstring" . m15_r3ya0_bytes" {
     m15_r3ya0_bytes:
         I8[] [65,67,75]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.039235638 UTC

[section ""data" . m16_r3ya1_closure" {
     m16_r3ya1_closure:
         const m16_r3ya1_info;
         const 0;
         const 0;
         const 0;
 },
 m16_r3ya1_entry() //  [R1]
         { info_tbl: [(c3EsT,
                       label: m16_r3ya1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EsT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EsU; else goto c3EsV;
       c3EsU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EsV: // global
           (_c3EsQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EsQ::I64 == 0) goto c3EsS; else goto c3EsR;
       c3EsS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EsR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EsQ::I64;
           R2 = m15_r3ya0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.043377364 UTC

[section ""data" . x7_r3ya2_closure" {
     x7_r3ya2_closure:
         const GHC.Types.C#_con_info;
         const 6;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.045100856 UTC

[section ""cstring" . m17_r3ya3_bytes" {
     m17_r3ya3_bytes:
         I8[] [66,69,76]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.048093836 UTC

[section ""data" . m18_r3ya4_closure" {
     m18_r3ya4_closure:
         const m18_r3ya4_info;
         const 0;
         const 0;
         const 0;
 },
 m18_r3ya4_entry() //  [R1]
         { info_tbl: [(c3Etb,
                       label: m18_r3ya4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Etb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Etc; else goto c3Etd;
       c3Etc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Etd: // global
           (_c3Et8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Et8::I64 == 0) goto c3Eta; else goto c3Et9;
       c3Eta: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Et9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Et8::I64;
           R2 = m17_r3ya3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.052159328 UTC

[section ""data" . x8_r3ya5_closure" {
     x8_r3ya5_closure:
         const GHC.Types.C#_con_info;
         const 7;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.053977152 UTC

[section ""cstring" . m19_r3ya6_bytes" {
     m19_r3ya6_bytes:
         I8[] [66,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.055994615 UTC

[section ""data" . m20_r3ya7_closure" {
     m20_r3ya7_closure:
         const m20_r3ya7_info;
         const 0;
         const 0;
         const 0;
 },
 m20_r3ya7_entry() //  [R1]
         { info_tbl: [(c3Ett,
                       label: m20_r3ya7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ett: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Etu; else goto c3Etv;
       c3Etu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Etv: // global
           (_c3Etq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Etq::I64 == 0) goto c3Ets; else goto c3Etr;
       c3Ets: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Etr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Etq::I64;
           R2 = m19_r3ya6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.060500215 UTC

[section ""data" . x9_r3ya8_closure" {
     x9_r3ya8_closure:
         const GHC.Types.C#_con_info;
         const 8;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.062502335 UTC

[section ""cstring" . m21_r3ya9_bytes" {
     m21_r3ya9_bytes:
         I8[] [72,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.064494527 UTC

[section ""data" . m22_r3yaa_closure" {
     m22_r3yaa_closure:
         const m22_r3yaa_info;
         const 0;
         const 0;
         const 0;
 },
 m22_r3yaa_entry() //  [R1]
         { info_tbl: [(c3EtL,
                       label: m22_r3yaa_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EtL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EtM; else goto c3EtN;
       c3EtM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EtN: // global
           (_c3EtI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EtI::I64 == 0) goto c3EtK; else goto c3EtJ;
       c3EtK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EtJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EtI::I64;
           R2 = m21_r3ya9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.069081795 UTC

[section ""data" . x10_r3yab_closure" {
     x10_r3yab_closure:
         const GHC.Types.C#_con_info;
         const 9;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.070921242 UTC

[section ""cstring" . m23_r3yac_bytes" {
     m23_r3yac_bytes:
         I8[] [76,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.073015892 UTC

[section ""data" . m24_r3yad_closure" {
     m24_r3yad_closure:
         const m24_r3yad_info;
         const 0;
         const 0;
         const 0;
 },
 m24_r3yad_entry() //  [R1]
         { info_tbl: [(c3Eu3,
                       label: m24_r3yad_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eu3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Eu4; else goto c3Eu5;
       c3Eu4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Eu5: // global
           (_c3Eu0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Eu0::I64 == 0) goto c3Eu2; else goto c3Eu1;
       c3Eu2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Eu1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Eu0::I64;
           R2 = m23_r3yac_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.077663478 UTC

[section ""data" . x11_r3yae_closure" {
     x11_r3yae_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.079415044 UTC

[section ""cstring" . m25_r3yaf_bytes" {
     m25_r3yaf_bytes:
         I8[] [86,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.08151263 UTC

[section ""data" . m26_r3yag_closure" {
     m26_r3yag_closure:
         const m26_r3yag_info;
         const 0;
         const 0;
         const 0;
 },
 m26_r3yag_entry() //  [R1]
         { info_tbl: [(c3Eul,
                       label: m26_r3yag_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eul: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Eum; else goto c3Eun;
       c3Eum: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Eun: // global
           (_c3Eui::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Eui::I64 == 0) goto c3Euk; else goto c3Euj;
       c3Euk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Euj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Eui::I64;
           R2 = m25_r3yaf_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.085936709 UTC

[section ""data" . x12_r3yah_closure" {
     x12_r3yah_closure:
         const GHC.Types.C#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.088198418 UTC

[section ""cstring" . m27_r3yai_bytes" {
     m27_r3yai_bytes:
         I8[] [70,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.090205355 UTC

[section ""data" . m28_r3yaj_closure" {
     m28_r3yaj_closure:
         const m28_r3yaj_info;
         const 0;
         const 0;
         const 0;
 },
 m28_r3yaj_entry() //  [R1]
         { info_tbl: [(c3EuD,
                       label: m28_r3yaj_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EuD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EuE; else goto c3EuF;
       c3EuE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EuF: // global
           (_c3EuA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EuA::I64 == 0) goto c3EuC; else goto c3EuB;
       c3EuC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EuB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EuA::I64;
           R2 = m27_r3yai_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.094313185 UTC

[section ""data" . x13_r3yak_closure" {
     x13_r3yak_closure:
         const GHC.Types.C#_con_info;
         const 12;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.096505078 UTC

[section ""cstring" . m29_r3yal_bytes" {
     m29_r3yal_bytes:
         I8[] [67,82]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.099146778 UTC

[section ""data" . m30_r3yam_closure" {
     m30_r3yam_closure:
         const m30_r3yam_info;
         const 0;
         const 0;
         const 0;
 },
 m30_r3yam_entry() //  [R1]
         { info_tbl: [(c3EuV,
                       label: m30_r3yam_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EuV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EuW; else goto c3EuX;
       c3EuW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EuX: // global
           (_c3EuS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EuS::I64 == 0) goto c3EuU; else goto c3EuT;
       c3EuU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EuT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EuS::I64;
           R2 = m29_r3yal_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.103329259 UTC

[section ""data" . x14_r3yan_closure" {
     x14_r3yan_closure:
         const GHC.Types.C#_con_info;
         const 13;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.10514879 UTC

[section ""cstring" . m31_r3yao_bytes" {
     m31_r3yao_bytes:
         I8[] [83,73]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.107646892 UTC

[section ""data" . m32_r3yap_closure" {
     m32_r3yap_closure:
         const m32_r3yap_info;
         const 0;
         const 0;
         const 0;
 },
 m32_r3yap_entry() //  [R1]
         { info_tbl: [(c3Evd,
                       label: m32_r3yap_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Evd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Eve; else goto c3Evf;
       c3Eve: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Evf: // global
           (_c3Eva::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Eva::I64 == 0) goto c3Evc; else goto c3Evb;
       c3Evc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Evb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Eva::I64;
           R2 = m31_r3yao_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.11267269 UTC

[section ""data" . x15_r3yaq_closure" {
     x15_r3yaq_closure:
         const GHC.Types.C#_con_info;
         const 15;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.114458238 UTC

[section ""cstring" . m33_r3yar_bytes" {
     m33_r3yar_bytes:
         I8[] [68,76,69]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.116953878 UTC

[section ""data" . m34_r3yas_closure" {
     m34_r3yas_closure:
         const m34_r3yas_info;
         const 0;
         const 0;
         const 0;
 },
 m34_r3yas_entry() //  [R1]
         { info_tbl: [(c3Evv,
                       label: m34_r3yas_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Evv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Evw; else goto c3Evx;
       c3Evw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Evx: // global
           (_c3Evs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Evs::I64 == 0) goto c3Evu; else goto c3Evt;
       c3Evu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Evt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Evs::I64;
           R2 = m33_r3yar_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.121097646 UTC

[section ""data" . x16_r3yat_closure" {
     x16_r3yat_closure:
         const GHC.Types.C#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.123145704 UTC

[section ""cstring" . m35_r3yau_bytes" {
     m35_r3yau_bytes:
         I8[] [68,67,49]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.125219102 UTC

[section ""data" . m36_r3yav_closure" {
     m36_r3yav_closure:
         const m36_r3yav_info;
         const 0;
         const 0;
         const 0;
 },
 m36_r3yav_entry() //  [R1]
         { info_tbl: [(c3EvN,
                       label: m36_r3yav_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EvN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EvO; else goto c3EvP;
       c3EvO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EvP: // global
           (_c3EvK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EvK::I64 == 0) goto c3EvM; else goto c3EvL;
       c3EvM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EvL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EvK::I64;
           R2 = m35_r3yau_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.129862084 UTC

[section ""data" . x17_r3yaw_closure" {
     x17_r3yaw_closure:
         const GHC.Types.C#_con_info;
         const 17;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.131620621 UTC

[section ""cstring" . m37_r3yax_bytes" {
     m37_r3yax_bytes:
         I8[] [68,67,50]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.133725795 UTC

[section ""data" . m38_r3yay_closure" {
     m38_r3yay_closure:
         const m38_r3yay_info;
         const 0;
         const 0;
         const 0;
 },
 m38_r3yay_entry() //  [R1]
         { info_tbl: [(c3Ew5,
                       label: m38_r3yay_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ew5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ew6; else goto c3Ew7;
       c3Ew6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ew7: // global
           (_c3Ew2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ew2::I64 == 0) goto c3Ew4; else goto c3Ew3;
       c3Ew4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ew3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ew2::I64;
           R2 = m37_r3yax_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.138587458 UTC

[section ""data" . x18_r3yaz_closure" {
     x18_r3yaz_closure:
         const GHC.Types.C#_con_info;
         const 18;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.140301002 UTC

[section ""cstring" . m39_r3yaA_bytes" {
     m39_r3yaA_bytes:
         I8[] [68,67,51]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.142383974 UTC

[section ""data" . m40_r3yaB_closure" {
     m40_r3yaB_closure:
         const m40_r3yaB_info;
         const 0;
         const 0;
         const 0;
 },
 m40_r3yaB_entry() //  [R1]
         { info_tbl: [(c3Ewn,
                       label: m40_r3yaB_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ewn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ewo; else goto c3Ewp;
       c3Ewo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ewp: // global
           (_c3Ewk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ewk::I64 == 0) goto c3Ewm; else goto c3Ewl;
       c3Ewm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ewl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ewk::I64;
           R2 = m39_r3yaA_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.146930472 UTC

[section ""data" . x19_r3yaC_closure" {
     x19_r3yaC_closure:
         const GHC.Types.C#_con_info;
         const 19;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.148643844 UTC

[section ""cstring" . m41_r3yaD_bytes" {
     m41_r3yaD_bytes:
         I8[] [68,67,52]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.150852943 UTC

[section ""data" . m42_r3yaE_closure" {
     m42_r3yaE_closure:
         const m42_r3yaE_info;
         const 0;
         const 0;
         const 0;
 },
 m42_r3yaE_entry() //  [R1]
         { info_tbl: [(c3EwF,
                       label: m42_r3yaE_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EwF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EwG; else goto c3EwH;
       c3EwG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EwH: // global
           (_c3EwC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EwC::I64 == 0) goto c3EwE; else goto c3EwD;
       c3EwE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EwD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EwC::I64;
           R2 = m41_r3yaD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.155118565 UTC

[section ""data" . x20_r3yaF_closure" {
     x20_r3yaF_closure:
         const GHC.Types.C#_con_info;
         const 20;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.157357354 UTC

[section ""cstring" . m43_r3yaG_bytes" {
     m43_r3yaG_bytes:
         I8[] [78,65,75]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.159333939 UTC

[section ""data" . m44_r3yaH_closure" {
     m44_r3yaH_closure:
         const m44_r3yaH_info;
         const 0;
         const 0;
         const 0;
 },
 m44_r3yaH_entry() //  [R1]
         { info_tbl: [(c3EwX,
                       label: m44_r3yaH_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EwX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EwY; else goto c3EwZ;
       c3EwY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EwZ: // global
           (_c3EwU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EwU::I64 == 0) goto c3EwW; else goto c3EwV;
       c3EwW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EwV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EwU::I64;
           R2 = m43_r3yaG_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.163595008 UTC

[section ""data" . x21_r3yaI_closure" {
     x21_r3yaI_closure:
         const GHC.Types.C#_con_info;
         const 21;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.166095169 UTC

[section ""cstring" . m45_r3yaJ_bytes" {
     m45_r3yaJ_bytes:
         I8[] [83,89,78]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.168088146 UTC

[section ""data" . m46_r3yaK_closure" {
     m46_r3yaK_closure:
         const m46_r3yaK_info;
         const 0;
         const 0;
         const 0;
 },
 m46_r3yaK_entry() //  [R1]
         { info_tbl: [(c3Exf,
                       label: m46_r3yaK_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Exf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Exg; else goto c3Exh;
       c3Exg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Exh: // global
           (_c3Exc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Exc::I64 == 0) goto c3Exe; else goto c3Exd;
       c3Exe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Exd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Exc::I64;
           R2 = m45_r3yaJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.172271668 UTC

[section ""data" . x22_r3yaL_closure" {
     x22_r3yaL_closure:
         const GHC.Types.C#_con_info;
         const 22;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.174093602 UTC

[section ""cstring" . m47_r3yaM_bytes" {
     m47_r3yaM_bytes:
         I8[] [69,84,66]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.176540304 UTC

[section ""data" . m48_r3yaN_closure" {
     m48_r3yaN_closure:
         const m48_r3yaN_info;
         const 0;
         const 0;
         const 0;
 },
 m48_r3yaN_entry() //  [R1]
         { info_tbl: [(c3Exx,
                       label: m48_r3yaN_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Exx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Exy; else goto c3Exz;
       c3Exy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Exz: // global
           (_c3Exu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Exu::I64 == 0) goto c3Exw; else goto c3Exv;
       c3Exw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Exv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Exu::I64;
           R2 = m47_r3yaM_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.18058155 UTC

[section ""data" . x23_r3yaO_closure" {
     x23_r3yaO_closure:
         const GHC.Types.C#_con_info;
         const 23;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.183015988 UTC

[section ""cstring" . m49_r3yaP_bytes" {
     m49_r3yaP_bytes:
         I8[] [67,65,78]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.18507128 UTC

[section ""data" . m50_r3yaQ_closure" {
     m50_r3yaQ_closure:
         const m50_r3yaQ_info;
         const 0;
         const 0;
         const 0;
 },
 m50_r3yaQ_entry() //  [R1]
         { info_tbl: [(c3ExP,
                       label: m50_r3yaQ_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ExP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ExQ; else goto c3ExR;
       c3ExQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ExR: // global
           (_c3ExM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ExM::I64 == 0) goto c3ExO; else goto c3ExN;
       c3ExO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ExN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ExM::I64;
           R2 = m49_r3yaP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.189609152 UTC

[section ""data" . x24_r3yaR_closure" {
     x24_r3yaR_closure:
         const GHC.Types.C#_con_info;
         const 24;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.191384787 UTC

[section ""cstring" . m51_r3yaS_bytes" {
     m51_r3yaS_bytes:
         I8[] [69,77]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.193443525 UTC

[section ""data" . m52_r3yaT_closure" {
     m52_r3yaT_closure:
         const m52_r3yaT_info;
         const 0;
         const 0;
         const 0;
 },
 m52_r3yaT_entry() //  [R1]
         { info_tbl: [(c3Ey7,
                       label: m52_r3yaT_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ey7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ey8; else goto c3Ey9;
       c3Ey8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ey9: // global
           (_c3Ey4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ey4::I64 == 0) goto c3Ey6; else goto c3Ey5;
       c3Ey6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ey5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ey4::I64;
           R2 = m51_r3yaS_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.19798359 UTC

[section ""data" . x25_r3yaU_closure" {
     x25_r3yaU_closure:
         const GHC.Types.C#_con_info;
         const 25;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.199588582 UTC

[section ""cstring" . m53_r3yaV_bytes" {
     m53_r3yaV_bytes:
         I8[] [83,85,66]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.202022711 UTC

[section ""data" . m54_r3yaW_closure" {
     m54_r3yaW_closure:
         const m54_r3yaW_info;
         const 0;
         const 0;
         const 0;
 },
 m54_r3yaW_entry() //  [R1]
         { info_tbl: [(c3Eyp,
                       label: m54_r3yaW_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Eyp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Eyq; else goto c3Eyr;
       c3Eyq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Eyr: // global
           (_c3Eym::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Eym::I64 == 0) goto c3Eyo; else goto c3Eyn;
       c3Eyo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Eyn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Eym::I64;
           R2 = m53_r3yaV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.206770388 UTC

[section ""data" . x26_r3yaX_closure" {
     x26_r3yaX_closure:
         const GHC.Types.C#_con_info;
         const 26;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.208492449 UTC

[section ""cstring" . m55_r3yaY_bytes" {
     m55_r3yaY_bytes:
         I8[] [69,83,67]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.2106743 UTC

[section ""data" . m56_r3yaZ_closure" {
     m56_r3yaZ_closure:
         const m56_r3yaZ_info;
         const 0;
         const 0;
         const 0;
 },
 m56_r3yaZ_entry() //  [R1]
         { info_tbl: [(c3EyH,
                       label: m56_r3yaZ_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EyH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EyI; else goto c3EyJ;
       c3EyI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EyJ: // global
           (_c3EyE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EyE::I64 == 0) goto c3EyG; else goto c3EyF;
       c3EyG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EyF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EyE::I64;
           R2 = m55_r3yaY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.215501721 UTC

[section ""data" . x27_r3yb0_closure" {
     x27_r3yb0_closure:
         const GHC.Types.C#_con_info;
         const 27;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.217318766 UTC

[section ""cstring" . m57_r3yb1_bytes" {
     m57_r3yb1_bytes:
         I8[] [70,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.219385296 UTC

[section ""data" . m58_r3yb2_closure" {
     m58_r3yb2_closure:
         const m58_r3yb2_info;
         const 0;
         const 0;
         const 0;
 },
 m58_r3yb2_entry() //  [R1]
         { info_tbl: [(c3EyZ,
                       label: m58_r3yb2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EyZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ez0; else goto c3Ez1;
       c3Ez0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ez1: // global
           (_c3EyW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EyW::I64 == 0) goto c3EyY; else goto c3EyX;
       c3EyY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EyX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EyW::I64;
           R2 = m57_r3yb1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.22353872 UTC

[section ""data" . x28_r3yb3_closure" {
     x28_r3yb3_closure:
         const GHC.Types.C#_con_info;
         const 28;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.225720756 UTC

[section ""cstring" . m59_r3yb4_bytes" {
     m59_r3yb4_bytes:
         I8[] [71,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.227844901 UTC

[section ""data" . m60_r3yb5_closure" {
     m60_r3yb5_closure:
         const m60_r3yb5_info;
         const 0;
         const 0;
         const 0;
 },
 m60_r3yb5_entry() //  [R1]
         { info_tbl: [(c3Ezh,
                       label: m60_r3yb5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ezh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ezi; else goto c3Ezj;
       c3Ezi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ezj: // global
           (_c3Eze::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Eze::I64 == 0) goto c3Ezg; else goto c3Ezf;
       c3Ezg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ezf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Eze::I64;
           R2 = m59_r3yb4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.232037356 UTC

[section ""data" . x29_r3yb6_closure" {
     x29_r3yb6_closure:
         const GHC.Types.C#_con_info;
         const 29;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.23399854 UTC

[section ""cstring" . m61_r3yb7_bytes" {
     m61_r3yb7_bytes:
         I8[] [82,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.236372713 UTC

[section ""data" . m62_r3yb8_closure" {
     m62_r3yb8_closure:
         const m62_r3yb8_info;
         const 0;
         const 0;
         const 0;
 },
 m62_r3yb8_entry() //  [R1]
         { info_tbl: [(c3Ezz,
                       label: m62_r3yb8_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ezz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EzA; else goto c3EzB;
       c3EzA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EzB: // global
           (_c3Ezw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ezw::I64 == 0) goto c3Ezy; else goto c3Ezx;
       c3Ezy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ezx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ezw::I64;
           R2 = m61_r3yb7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.240522048 UTC

[section ""data" . x30_r3yb9_closure" {
     x30_r3yb9_closure:
         const GHC.Types.C#_con_info;
         const 30;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.242670511 UTC

[section ""cstring" . m63_r3yba_bytes" {
     m63_r3yba_bytes:
         I8[] [85,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.245152909 UTC

[section ""data" . m64_r3ybb_closure" {
     m64_r3ybb_closure:
         const m64_r3ybb_info;
         const 0;
         const 0;
         const 0;
 },
 m64_r3ybb_entry() //  [R1]
         { info_tbl: [(c3EzR,
                       label: m64_r3ybb_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EzR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EzS; else goto c3EzT;
       c3EzS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EzT: // global
           (_c3EzO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EzO::I64 == 0) goto c3EzQ; else goto c3EzP;
       c3EzQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EzP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EzO::I64;
           R2 = m63_r3yba_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.249165737 UTC

[section ""data" . x31_r3ybc_closure" {
     x31_r3ybc_closure:
         const GHC.Types.C#_con_info;
         const 31;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.250972523 UTC

[section ""cstring" . m65_r3ybd_bytes" {
     m65_r3ybd_bytes:
         I8[] [83,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.252977075 UTC

[section ""data" . m66_r3ybe_closure" {
     m66_r3ybe_closure:
         const m66_r3ybe_info;
         const 0;
         const 0;
         const 0;
 },
 m66_r3ybe_entry() //  [R1]
         { info_tbl: [(c3EA9,
                       label: m66_r3ybe_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EA9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EAa; else goto c3EAb;
       c3EAa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EAb: // global
           (_c3EA6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EA6::I64 == 0) goto c3EA8; else goto c3EA7;
       c3EA8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EA7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EA6::I64;
           R2 = m65_r3ybd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.257622644 UTC

[section ""data" . x32_r3ybf_closure" {
     x32_r3ybf_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.259336944 UTC

[section ""cstring" . m67_r3ybg_bytes" {
     m67_r3ybg_bytes:
         I8[] [68,69,76]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.261851798 UTC

[section ""data" . m68_r3ybh_closure" {
     m68_r3ybh_closure:
         const m68_r3ybh_info;
         const 0;
         const 0;
         const 0;
 },
 m68_r3ybh_entry() //  [R1]
         { info_tbl: [(c3EAr,
                       label: m68_r3ybh_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EAr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EAs; else goto c3EAt;
       c3EAs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EAt: // global
           (_c3EAo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EAo::I64 == 0) goto c3EAq; else goto c3EAp;
       c3EAq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EAp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EAo::I64;
           R2 = m67_r3ybg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.266441369 UTC

[section ""data" . x33_r3ybi_closure" {
     x33_r3ybi_closure:
         const GHC.Types.C#_con_info;
         const 127;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.268161648 UTC

[section ""data" . sat_s3yqs_closure" {
     sat_s3yqs_closure:
         const GHC.Types.I#_con_info;
         const 1114111;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.269973212 UTC

[section ""data" . sat_s3yqt_closure" {
     sat_s3yqt_closure:
         const :_con_info;
         const sat_s3yqs_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.272098462 UTC

[section ""data" . lvl7_r3ybj_closure" {
     lvl7_r3ybj_closure:
         const lvl7_r3ybj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r3ybj_entry() //  [R1]
         { info_tbl: [(c3EAK,
                       label: lvl7_r3ybj_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EAK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EAL; else goto c3EAM;
       c3EAL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EAM: // global
           (_c3EAH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3EAH::I64 == 0) goto c3EAJ; else goto c3EAI;
       c3EAJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3EAI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3EAH::I64;
           R3 = sat_s3yqt_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.277386728 UTC

[section ""data" . lvl8_r3ybk_closure" {
     lvl8_r3ybk_closure:
         const GHC.Types.C#_con_info;
         const 34;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.279164208 UTC

[section ""data" . lvl9_r3ybl_closure" {
     lvl9_r3ybl_closure:
         const (,)_con_info;
         const lvl8_r3ybk_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.28093405 UTC

[section ""data" . lvl10_r3ybm_closure" {
     lvl10_r3ybm_closure:
         const GHC.Types.C#_con_info;
         const 39;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.283141464 UTC

[section ""data" . lvl11_r3ybn_closure" {
     lvl11_r3ybn_closure:
         const (,)_con_info;
         const lvl10_r3ybm_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.284922506 UTC

[section ""data" . lvl12_r3ybo_closure" {
     lvl12_r3ybo_closure:
         const GHC.Types.C#_con_info;
         const 92;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.287300111 UTC

[section ""data" . lvl13_r3ybp_closure" {
     lvl13_r3ybp_closure:
         const (,)_con_info;
         const lvl12_r3ybo_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.288964398 UTC

[section ""data" . lvl14_r3ybq_closure" {
     lvl14_r3ybq_closure:
         const (,)_con_info;
         const x8_r3ya5_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.290817315 UTC

[section ""data" . lvl15_r3ybr_closure" {
     lvl15_r3ybr_closure:
         const (,)_con_info;
         const x9_r3ya8_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.29300459 UTC

[section ""data" . lvl16_r3ybs_closure" {
     lvl16_r3ybs_closure:
         const (,)_con_info;
         const x13_r3yak_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.294833214 UTC

[section ""data" . lvl17_r3ybt_closure" {
     lvl17_r3ybt_closure:
         const (,)_con_info;
         const x11_r3yae_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.296549491 UTC

[section ""data" . lvl18_r3ybu_closure" {
     lvl18_r3ybu_closure:
         const (,)_con_info;
         const x14_r3yan_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.298517682 UTC

[section ""data" . lvl19_r3ybv_closure" {
     lvl19_r3ybv_closure:
         const (,)_con_info;
         const x10_r3yab_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.300304561 UTC

[section ""data" . lvl20_r3ybw_closure" {
     lvl20_r3ybw_closure:
         const (,)_con_info;
         const x12_r3yah_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.302505212 UTC

[section ""data" . lvl21_r3ybx_closure" {
     lvl21_r3ybx_closure:
         const (,)_con_info;
         const x2_r3y9N_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.304142947 UTC

[section ""data" . lvl22_r3yby_closure" {
     lvl22_r3yby_closure:
         const (,)_con_info;
         const x_r3y9H_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.305993915 UTC

[section ""data" . lvl23_r3ybz_closure" {
     lvl23_r3ybz_closure:
         const (,)_con_info;
         const x3_r3y9Q_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.307738072 UTC

[section ""data" . lvl24_r3ybA_closure" {
     lvl24_r3ybA_closure:
         const (,)_con_info;
         const x4_r3y9T_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.310082591 UTC

[section ""data" . lvl25_r3ybB_closure" {
     lvl25_r3ybB_closure:
         const (,)_con_info;
         const x5_r3y9W_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.312769752 UTC

[section ""data" . lvl26_r3ybC_closure" {
     lvl26_r3ybC_closure:
         const (,)_con_info;
         const x6_r3y9Z_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.316240213 UTC

[section ""data" . lvl27_r3ybD_closure" {
     lvl27_r3ybD_closure:
         const (,)_con_info;
         const x7_r3ya2_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.319097653 UTC

[section ""data" . lvl28_r3ybE_closure" {
     lvl28_r3ybE_closure:
         const (,)_con_info;
         const x1_r3y9K_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.321828294 UTC

[section ""data" . lvl29_r3ybF_closure" {
     lvl29_r3ybF_closure:
         const (,)_con_info;
         const x15_r3yaq_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.32506546 UTC

[section ""data" . lvl30_r3ybG_closure" {
     lvl30_r3ybG_closure:
         const (,)_con_info;
         const x16_r3yat_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.327851121 UTC

[section ""data" . lvl31_r3ybH_closure" {
     lvl31_r3ybH_closure:
         const (,)_con_info;
         const x17_r3yaw_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.330664761 UTC

[section ""data" . lvl32_r3ybI_closure" {
     lvl32_r3ybI_closure:
         const (,)_con_info;
         const x18_r3yaz_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.332982379 UTC

[section ""data" . lvl33_r3ybJ_closure" {
     lvl33_r3ybJ_closure:
         const (,)_con_info;
         const x19_r3yaC_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.335324196 UTC

[section ""data" . lvl34_r3ybK_closure" {
     lvl34_r3ybK_closure:
         const (,)_con_info;
         const x20_r3yaF_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.33816208 UTC

[section ""data" . lvl35_r3ybL_closure" {
     lvl35_r3ybL_closure:
         const (,)_con_info;
         const x21_r3yaI_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.340512042 UTC

[section ""data" . lvl36_r3ybM_closure" {
     lvl36_r3ybM_closure:
         const (,)_con_info;
         const x22_r3yaL_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.342850495 UTC

[section ""data" . lvl37_r3ybN_closure" {
     lvl37_r3ybN_closure:
         const (,)_con_info;
         const x23_r3yaO_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.344613515 UTC

[section ""data" . lvl38_r3ybO_closure" {
     lvl38_r3ybO_closure:
         const (,)_con_info;
         const x24_r3yaR_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.34650192 UTC

[section ""data" . lvl39_r3ybP_closure" {
     lvl39_r3ybP_closure:
         const (,)_con_info;
         const x25_r3yaU_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.348673559 UTC

[section ""data" . lvl40_r3ybQ_closure" {
     lvl40_r3ybQ_closure:
         const (,)_con_info;
         const x26_r3yaX_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.350612893 UTC

[section ""data" . lvl41_r3ybR_closure" {
     lvl41_r3ybR_closure:
         const (,)_con_info;
         const x27_r3yb0_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.352376153 UTC

[section ""data" . lvl42_r3ybS_closure" {
     lvl42_r3ybS_closure:
         const (,)_con_info;
         const x28_r3yb3_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.354180436 UTC

[section ""data" . lvl43_r3ybT_closure" {
     lvl43_r3ybT_closure:
         const (,)_con_info;
         const x29_r3yb6_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.35631562 UTC

[section ""data" . lvl44_r3ybU_closure" {
     lvl44_r3ybU_closure:
         const (,)_con_info;
         const x30_r3yb9_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.358608899 UTC

[section ""data" . lvl45_r3ybV_closure" {
     lvl45_r3ybV_closure:
         const (,)_con_info;
         const x31_r3ybc_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.360980264 UTC

[section ""data" . w1_r3ybW_closure" {
     w1_r3ybW_closure:
         const w1_r3ybW_info;
         const 0;
 },
 lvl116_s3yqv_entry() //  [R1]
         { info_tbl: [(c3EBE,
                       label: lvl116_s3yqv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EBE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EBF; else goto c3EBG;
       c3EBF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EBG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x1_r3y9K_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqx_entry() //  [R1]
         { info_tbl: [(c3EBM,
                       label: sat_s3yqx_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EBM: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 w1_r3ybW_entry() //  [R2]
         { info_tbl: [(c3EBS,
                       label: w1_r3ybW_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EBS: // global
           _s3yqu::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EBT; else goto c3EBU;
       c3EBU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EBW; else goto c3EBV;
       c3EBW: // global
           HpAlloc = 40;
           goto c3EBT;
       c3EBT: // global
           R2 = _s3yqu::P64;
           R1 = w1_r3ybW_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EBV: // global
           I64[Hp - 32] = lvl116_s3yqv_info;
           P64[Hp - 16] = _s3yqu::P64;
           I64[Hp - 8] = sat_s3yqx_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EBP_info;
           R3 = Hp - 7;
           R2 = m4_r3y9J_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EBP() //  [R1]
         { info_tbl: [(c3EBP,
                       label: block_c3EBP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EBP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EBZ; else goto c3EBY;
       c3EBZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EBY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.371303615 UTC

[section ""data" . w_r3ybX_closure" {
     w_r3ybX_closure:
         const w_r3ybX_info;
         const 0;
 },
 lvl116_s3yqB_entry() //  [R1]
         { info_tbl: [(c3ECr,
                       label: lvl116_s3yqB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ECr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ECs; else goto c3ECt;
       c3ECs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ECt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x_r3y9H_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqD_entry() //  [R1]
         { info_tbl: [(c3ECz,
                       label: sat_s3yqD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ECz: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 w_r3ybX_entry() //  [R2]
         { info_tbl: [(c3ECF,
                       label: w_r3ybX_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ECF: // global
           _s3yqA::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ECG; else goto c3ECH;
       c3ECH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ECJ; else goto c3ECI;
       c3ECJ: // global
           HpAlloc = 40;
           goto c3ECG;
       c3ECG: // global
           R2 = _s3yqA::P64;
           R1 = w_r3ybX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ECI: // global
           I64[Hp - 32] = lvl116_s3yqB_info;
           P64[Hp - 16] = _s3yqA::P64;
           I64[Hp - 8] = sat_s3yqD_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ECC_info;
           R3 = Hp - 7;
           R2 = m2_r3y9G_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ECC() //  [R1]
         { info_tbl: [(c3ECC,
                       label: block_c3ECC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ECC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ECM; else goto c3ECL;
       c3ECM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ECL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.381707888 UTC

[section ""data" . lvl46_r3ybY_closure" {
     lvl46_r3ybY_closure:
         const lvl46_r3ybY_info;
         const 0;
 },
 lvl46_r3ybY_entry() //  [R2]
         { info_tbl: [(c3EDd,
                       label: lvl46_r3ybY_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EDd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3EDe; else goto c3EDf;
       c3EDe: // global
           R2 = R2;
           R1 = lvl46_r3ybY_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EDf: // global
           I64[Sp - 8] = block_c3EDa_info;
           R4 = R2;
           R3 = w1_r3ybW_closure+1;
           R2 = w_r3ybX_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EDa() //  [R1]
         { info_tbl: [(c3EDa,
                       label: block_c3EDa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EDa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EDi; else goto c3EDh;
       c3EDi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EDh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.388645032 UTC

[section ""data" . lvl47_r3ybZ_closure" {
     lvl47_r3ybZ_closure:
         const lvl47_r3ybZ_info;
         const 0;
 },
 lvl116_s3yqK_entry() //  [R1]
         { info_tbl: [(c3EDA,
                       label: lvl116_s3yqK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EDA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EDB; else goto c3EDC;
       c3EDB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EDC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x2_r3y9N_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqM_entry() //  [R1]
         { info_tbl: [(c3EDI,
                       label: sat_s3yqM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EDI: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl47_r3ybZ_entry() //  [R2]
         { info_tbl: [(c3EDO,
                       label: lvl47_r3ybZ_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EDO: // global
           _s3yqJ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EDP; else goto c3EDQ;
       c3EDQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EDS; else goto c3EDR;
       c3EDS: // global
           HpAlloc = 40;
           goto c3EDP;
       c3EDP: // global
           R2 = _s3yqJ::P64;
           R1 = lvl47_r3ybZ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EDR: // global
           I64[Hp - 32] = lvl116_s3yqK_info;
           P64[Hp - 16] = _s3yqJ::P64;
           I64[Hp - 8] = sat_s3yqM_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EDL_info;
           R3 = Hp - 7;
           R2 = m6_r3y9M_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EDL() //  [R1]
         { info_tbl: [(c3EDL,
                       label: block_c3EDL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EDL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EDV; else goto c3EDU;
       c3EDV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EDU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.398986416 UTC

[section ""data" . lvl48_r3yc0_closure" {
     lvl48_r3yc0_closure:
         const lvl48_r3yc0_info;
         const 0;
 },
 lvl116_s3yqQ_entry() //  [R1]
         { info_tbl: [(c3EEn,
                       label: lvl116_s3yqQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EEn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EEo; else goto c3EEp;
       c3EEo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EEp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x3_r3y9Q_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqS_entry() //  [R1]
         { info_tbl: [(c3EEv,
                       label: sat_s3yqS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EEv: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl48_r3yc0_entry() //  [R2]
         { info_tbl: [(c3EEB,
                       label: lvl48_r3yc0_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EEB: // global
           _s3yqP::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EEC; else goto c3EED;
       c3EED: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EEF; else goto c3EEE;
       c3EEF: // global
           HpAlloc = 40;
           goto c3EEC;
       c3EEC: // global
           R2 = _s3yqP::P64;
           R1 = lvl48_r3yc0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EEE: // global
           I64[Hp - 32] = lvl116_s3yqQ_info;
           P64[Hp - 16] = _s3yqP::P64;
           I64[Hp - 8] = sat_s3yqS_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EEy_info;
           R3 = Hp - 7;
           R2 = m8_r3y9P_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EEy() //  [R1]
         { info_tbl: [(c3EEy,
                       label: block_c3EEy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EEy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EEI; else goto c3EEH;
       c3EEI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EEH: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.409784999 UTC

[section ""data" . lvl49_r3yc1_closure" {
     lvl49_r3yc1_closure:
         const lvl49_r3yc1_info;
         const 0;
 },
 lvl116_s3yqW_entry() //  [R1]
         { info_tbl: [(c3EFa,
                       label: lvl116_s3yqW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EFa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EFb; else goto c3EFc;
       c3EFb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EFc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x4_r3y9T_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yqY_entry() //  [R1]
         { info_tbl: [(c3EFi,
                       label: sat_s3yqY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EFi: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl49_r3yc1_entry() //  [R2]
         { info_tbl: [(c3EFo,
                       label: lvl49_r3yc1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EFo: // global
           _s3yqV::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EFp; else goto c3EFq;
       c3EFq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EFs; else goto c3EFr;
       c3EFs: // global
           HpAlloc = 40;
           goto c3EFp;
       c3EFp: // global
           R2 = _s3yqV::P64;
           R1 = lvl49_r3yc1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EFr: // global
           I64[Hp - 32] = lvl116_s3yqW_info;
           P64[Hp - 16] = _s3yqV::P64;
           I64[Hp - 8] = sat_s3yqY_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EFl_info;
           R3 = Hp - 7;
           R2 = m10_r3y9S_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EFl() //  [R1]
         { info_tbl: [(c3EFl,
                       label: block_c3EFl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EFl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EFv; else goto c3EFu;
       c3EFv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EFu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.420079166 UTC

[section ""data" . lvl50_r3yc2_closure" {
     lvl50_r3yc2_closure:
         const lvl50_r3yc2_info;
         const 0;
 },
 lvl116_s3yr2_entry() //  [R1]
         { info_tbl: [(c3EFX,
                       label: lvl116_s3yr2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EFX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EFY; else goto c3EFZ;
       c3EFY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EFZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x5_r3y9W_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yr4_entry() //  [R1]
         { info_tbl: [(c3EG5,
                       label: sat_s3yr4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EG5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl50_r3yc2_entry() //  [R2]
         { info_tbl: [(c3EGb,
                       label: lvl50_r3yc2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EGb: // global
           _s3yr1::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EGc; else goto c3EGd;
       c3EGd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EGf; else goto c3EGe;
       c3EGf: // global
           HpAlloc = 40;
           goto c3EGc;
       c3EGc: // global
           R2 = _s3yr1::P64;
           R1 = lvl50_r3yc2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EGe: // global
           I64[Hp - 32] = lvl116_s3yr2_info;
           P64[Hp - 16] = _s3yr1::P64;
           I64[Hp - 8] = sat_s3yr4_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EG8_info;
           R3 = Hp - 7;
           R2 = m12_r3y9V_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EG8() //  [R1]
         { info_tbl: [(c3EG8,
                       label: block_c3EG8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EG8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EGi; else goto c3EGh;
       c3EGi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EGh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.430914626 UTC

[section ""data" . lvl51_r3yc3_closure" {
     lvl51_r3yc3_closure:
         const lvl51_r3yc3_info;
         const 0;
 },
 lvl116_s3yr8_entry() //  [R1]
         { info_tbl: [(c3EGK,
                       label: lvl116_s3yr8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EGK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EGL; else goto c3EGM;
       c3EGL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EGM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x6_r3y9Z_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yra_entry() //  [R1]
         { info_tbl: [(c3EGS,
                       label: sat_s3yra_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EGS: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl51_r3yc3_entry() //  [R2]
         { info_tbl: [(c3EGY,
                       label: lvl51_r3yc3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EGY: // global
           _s3yr7::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EGZ; else goto c3EH0;
       c3EH0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EH2; else goto c3EH1;
       c3EH2: // global
           HpAlloc = 40;
           goto c3EGZ;
       c3EGZ: // global
           R2 = _s3yr7::P64;
           R1 = lvl51_r3yc3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EH1: // global
           I64[Hp - 32] = lvl116_s3yr8_info;
           P64[Hp - 16] = _s3yr7::P64;
           I64[Hp - 8] = sat_s3yra_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EGV_info;
           R3 = Hp - 7;
           R2 = m14_r3y9Y_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EGV() //  [R1]
         { info_tbl: [(c3EGV,
                       label: block_c3EGV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EGV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EH5; else goto c3EH4;
       c3EH5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EH4: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.441605315 UTC

[section ""data" . lvl52_r3yc4_closure" {
     lvl52_r3yc4_closure:
         const lvl52_r3yc4_info;
         const 0;
 },
 lvl116_s3yre_entry() //  [R1]
         { info_tbl: [(c3EHx,
                       label: lvl116_s3yre_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EHx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EHy; else goto c3EHz;
       c3EHy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EHz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x7_r3ya2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrg_entry() //  [R1]
         { info_tbl: [(c3EHF,
                       label: sat_s3yrg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EHF: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl52_r3yc4_entry() //  [R2]
         { info_tbl: [(c3EHL,
                       label: lvl52_r3yc4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EHL: // global
           _s3yrd::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EHM; else goto c3EHN;
       c3EHN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EHP; else goto c3EHO;
       c3EHP: // global
           HpAlloc = 40;
           goto c3EHM;
       c3EHM: // global
           R2 = _s3yrd::P64;
           R1 = lvl52_r3yc4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EHO: // global
           I64[Hp - 32] = lvl116_s3yre_info;
           P64[Hp - 16] = _s3yrd::P64;
           I64[Hp - 8] = sat_s3yrg_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EHI_info;
           R3 = Hp - 7;
           R2 = m16_r3ya1_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EHI() //  [R1]
         { info_tbl: [(c3EHI,
                       label: block_c3EHI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EHI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EHS; else goto c3EHR;
       c3EHS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EHR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.451855563 UTC

[section ""data" . lvl53_r3yc5_closure" {
     lvl53_r3yc5_closure:
         const lvl53_r3yc5_info;
         const 0;
 },
 lvl116_s3yrk_entry() //  [R1]
         { info_tbl: [(c3EIk,
                       label: lvl116_s3yrk_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EIk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EIl; else goto c3EIm;
       c3EIl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EIm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x8_r3ya5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrm_entry() //  [R1]
         { info_tbl: [(c3EIs,
                       label: sat_s3yrm_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EIs: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl53_r3yc5_entry() //  [R2]
         { info_tbl: [(c3EIy,
                       label: lvl53_r3yc5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EIy: // global
           _s3yrj::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EIz; else goto c3EIA;
       c3EIA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EIC; else goto c3EIB;
       c3EIC: // global
           HpAlloc = 40;
           goto c3EIz;
       c3EIz: // global
           R2 = _s3yrj::P64;
           R1 = lvl53_r3yc5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EIB: // global
           I64[Hp - 32] = lvl116_s3yrk_info;
           P64[Hp - 16] = _s3yrj::P64;
           I64[Hp - 8] = sat_s3yrm_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EIv_info;
           R3 = Hp - 7;
           R2 = m18_r3ya4_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EIv() //  [R1]
         { info_tbl: [(c3EIv,
                       label: block_c3EIv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EIv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EIF; else goto c3EIE;
       c3EIF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EIE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.462730933 UTC

[section ""data" . lvl54_r3yc6_closure" {
     lvl54_r3yc6_closure:
         const lvl54_r3yc6_info;
         const 0;
 },
 lvl116_s3yrq_entry() //  [R1]
         { info_tbl: [(c3EJ7,
                       label: lvl116_s3yrq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EJ7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EJ8; else goto c3EJ9;
       c3EJ8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EJ9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x9_r3ya8_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrs_entry() //  [R1]
         { info_tbl: [(c3EJf,
                       label: sat_s3yrs_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EJf: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl54_r3yc6_entry() //  [R2]
         { info_tbl: [(c3EJl,
                       label: lvl54_r3yc6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EJl: // global
           _s3yrp::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EJm; else goto c3EJn;
       c3EJn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EJp; else goto c3EJo;
       c3EJp: // global
           HpAlloc = 40;
           goto c3EJm;
       c3EJm: // global
           R2 = _s3yrp::P64;
           R1 = lvl54_r3yc6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EJo: // global
           I64[Hp - 32] = lvl116_s3yrq_info;
           P64[Hp - 16] = _s3yrp::P64;
           I64[Hp - 8] = sat_s3yrs_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EJi_info;
           R3 = Hp - 7;
           R2 = m20_r3ya7_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EJi() //  [R1]
         { info_tbl: [(c3EJi,
                       label: block_c3EJi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EJi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EJs; else goto c3EJr;
       c3EJs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EJr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.473953465 UTC

[section ""data" . lvl55_r3yc7_closure" {
     lvl55_r3yc7_closure:
         const lvl55_r3yc7_info;
         const 0;
 },
 lvl116_s3yrw_entry() //  [R1]
         { info_tbl: [(c3EJU,
                       label: lvl116_s3yrw_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EJV; else goto c3EJW;
       c3EJV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EJW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x10_r3yab_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yry_entry() //  [R1]
         { info_tbl: [(c3EK2,
                       label: sat_s3yry_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EK2: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl55_r3yc7_entry() //  [R2]
         { info_tbl: [(c3EK8,
                       label: lvl55_r3yc7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EK8: // global
           _s3yrv::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EK9; else goto c3EKa;
       c3EKa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EKc; else goto c3EKb;
       c3EKc: // global
           HpAlloc = 40;
           goto c3EK9;
       c3EK9: // global
           R2 = _s3yrv::P64;
           R1 = lvl55_r3yc7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EKb: // global
           I64[Hp - 32] = lvl116_s3yrw_info;
           P64[Hp - 16] = _s3yrv::P64;
           I64[Hp - 8] = sat_s3yry_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EK5_info;
           R3 = Hp - 7;
           R2 = m22_r3yaa_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EK5() //  [R1]
         { info_tbl: [(c3EK5,
                       label: block_c3EK5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EK5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EKf; else goto c3EKe;
       c3EKf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EKe: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.484616612 UTC

[section ""data" . lvl56_r3yc8_closure" {
     lvl56_r3yc8_closure:
         const lvl56_r3yc8_info;
         const 0;
 },
 lvl116_s3yrC_entry() //  [R1]
         { info_tbl: [(c3EKH,
                       label: lvl116_s3yrC_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EKH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EKI; else goto c3EKJ;
       c3EKI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EKJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x11_r3yae_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrE_entry() //  [R1]
         { info_tbl: [(c3EKP,
                       label: sat_s3yrE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EKP: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl56_r3yc8_entry() //  [R2]
         { info_tbl: [(c3EKV,
                       label: lvl56_r3yc8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EKV: // global
           _s3yrB::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EKW; else goto c3EKX;
       c3EKX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EKZ; else goto c3EKY;
       c3EKZ: // global
           HpAlloc = 40;
           goto c3EKW;
       c3EKW: // global
           R2 = _s3yrB::P64;
           R1 = lvl56_r3yc8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EKY: // global
           I64[Hp - 32] = lvl116_s3yrC_info;
           P64[Hp - 16] = _s3yrB::P64;
           I64[Hp - 8] = sat_s3yrE_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EKS_info;
           R3 = Hp - 7;
           R2 = m24_r3yad_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EKS() //  [R1]
         { info_tbl: [(c3EKS,
                       label: block_c3EKS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EKS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EL2; else goto c3EL1;
       c3EL2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EL1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.495264443 UTC

[section ""data" . lvl57_r3yc9_closure" {
     lvl57_r3yc9_closure:
         const lvl57_r3yc9_info;
         const 0;
 },
 lvl116_s3yrI_entry() //  [R1]
         { info_tbl: [(c3ELu,
                       label: lvl116_s3yrI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ELu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ELv; else goto c3ELw;
       c3ELv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ELw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x12_r3yah_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrK_entry() //  [R1]
         { info_tbl: [(c3ELC,
                       label: sat_s3yrK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ELC: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl57_r3yc9_entry() //  [R2]
         { info_tbl: [(c3ELI,
                       label: lvl57_r3yc9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ELI: // global
           _s3yrH::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ELJ; else goto c3ELK;
       c3ELK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ELM; else goto c3ELL;
       c3ELM: // global
           HpAlloc = 40;
           goto c3ELJ;
       c3ELJ: // global
           R2 = _s3yrH::P64;
           R1 = lvl57_r3yc9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ELL: // global
           I64[Hp - 32] = lvl116_s3yrI_info;
           P64[Hp - 16] = _s3yrH::P64;
           I64[Hp - 8] = sat_s3yrK_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ELF_info;
           R3 = Hp - 7;
           R2 = m26_r3yag_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ELF() //  [R1]
         { info_tbl: [(c3ELF,
                       label: block_c3ELF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ELF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ELP; else goto c3ELO;
       c3ELP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ELO: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.50609764 UTC

[section ""data" . lvl58_r3yca_closure" {
     lvl58_r3yca_closure:
         const lvl58_r3yca_info;
         const 0;
 },
 lvl116_s3yrO_entry() //  [R1]
         { info_tbl: [(c3EMh,
                       label: lvl116_s3yrO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EMh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EMi; else goto c3EMj;
       c3EMi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EMj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x13_r3yak_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrQ_entry() //  [R1]
         { info_tbl: [(c3EMp,
                       label: sat_s3yrQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EMp: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl58_r3yca_entry() //  [R2]
         { info_tbl: [(c3EMv,
                       label: lvl58_r3yca_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EMv: // global
           _s3yrN::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EMw; else goto c3EMx;
       c3EMx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EMz; else goto c3EMy;
       c3EMz: // global
           HpAlloc = 40;
           goto c3EMw;
       c3EMw: // global
           R2 = _s3yrN::P64;
           R1 = lvl58_r3yca_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EMy: // global
           I64[Hp - 32] = lvl116_s3yrO_info;
           P64[Hp - 16] = _s3yrN::P64;
           I64[Hp - 8] = sat_s3yrQ_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EMs_info;
           R3 = Hp - 7;
           R2 = m28_r3yaj_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EMs() //  [R1]
         { info_tbl: [(c3EMs,
                       label: block_c3EMs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EMs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EMC; else goto c3EMB;
       c3EMC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EMB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.516863646 UTC

[section ""data" . lvl59_r3ycb_closure" {
     lvl59_r3ycb_closure:
         const lvl59_r3ycb_info;
         const 0;
 },
 lvl116_s3yrU_entry() //  [R1]
         { info_tbl: [(c3EN4,
                       label: lvl116_s3yrU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EN4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EN5; else goto c3EN6;
       c3EN5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EN6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x14_r3yan_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yrW_entry() //  [R1]
         { info_tbl: [(c3ENc,
                       label: sat_s3yrW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ENc: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl59_r3ycb_entry() //  [R2]
         { info_tbl: [(c3ENi,
                       label: lvl59_r3ycb_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ENi: // global
           _s3yrT::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ENj; else goto c3ENk;
       c3ENk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ENm; else goto c3ENl;
       c3ENm: // global
           HpAlloc = 40;
           goto c3ENj;
       c3ENj: // global
           R2 = _s3yrT::P64;
           R1 = lvl59_r3ycb_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ENl: // global
           I64[Hp - 32] = lvl116_s3yrU_info;
           P64[Hp - 16] = _s3yrT::P64;
           I64[Hp - 8] = sat_s3yrW_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ENf_info;
           R3 = Hp - 7;
           R2 = m30_r3yam_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ENf() //  [R1]
         { info_tbl: [(c3ENf,
                       label: block_c3ENf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ENf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ENp; else goto c3ENo;
       c3ENp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ENo: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.527768441 UTC

[section ""data" . lvl60_r3ycc_closure" {
     lvl60_r3ycc_closure:
         const lvl60_r3ycc_info;
         const 0;
 },
 lvl116_s3ys0_entry() //  [R1]
         { info_tbl: [(c3ENR,
                       label: lvl116_s3ys0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ENR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ENS; else goto c3ENT;
       c3ENS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ENT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x15_r3yaq_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ys2_entry() //  [R1]
         { info_tbl: [(c3ENZ,
                       label: sat_s3ys2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ENZ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl60_r3ycc_entry() //  [R2]
         { info_tbl: [(c3EO5,
                       label: lvl60_r3ycc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EO5: // global
           _s3yrZ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EO6; else goto c3EO7;
       c3EO7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EO9; else goto c3EO8;
       c3EO9: // global
           HpAlloc = 40;
           goto c3EO6;
       c3EO6: // global
           R2 = _s3yrZ::P64;
           R1 = lvl60_r3ycc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EO8: // global
           I64[Hp - 32] = lvl116_s3ys0_info;
           P64[Hp - 16] = _s3yrZ::P64;
           I64[Hp - 8] = sat_s3ys2_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EO2_info;
           R3 = Hp - 7;
           R2 = m32_r3yap_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EO2() //  [R1]
         { info_tbl: [(c3EO2,
                       label: block_c3EO2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EO2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EOc; else goto c3EOb;
       c3EOc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EOb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.539254455 UTC

[section ""data" . lvl61_r3ycd_closure" {
     lvl61_r3ycd_closure:
         const lvl61_r3ycd_info;
         const 0;
 },
 lvl116_s3ys6_entry() //  [R1]
         { info_tbl: [(c3EOE,
                       label: lvl116_s3ys6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EOE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EOF; else goto c3EOG;
       c3EOF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EOG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x16_r3yat_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ys8_entry() //  [R1]
         { info_tbl: [(c3EOM,
                       label: sat_s3ys8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EOM: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl61_r3ycd_entry() //  [R2]
         { info_tbl: [(c3EOS,
                       label: lvl61_r3ycd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EOS: // global
           _s3ys5::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EOT; else goto c3EOU;
       c3EOU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EOW; else goto c3EOV;
       c3EOW: // global
           HpAlloc = 40;
           goto c3EOT;
       c3EOT: // global
           R2 = _s3ys5::P64;
           R1 = lvl61_r3ycd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EOV: // global
           I64[Hp - 32] = lvl116_s3ys6_info;
           P64[Hp - 16] = _s3ys5::P64;
           I64[Hp - 8] = sat_s3ys8_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EOP_info;
           R3 = Hp - 7;
           R2 = m34_r3yas_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EOP() //  [R1]
         { info_tbl: [(c3EOP,
                       label: block_c3EOP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EOP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EOZ; else goto c3EOY;
       c3EOZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EOY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.550379649 UTC

[section ""data" . lvl62_r3yce_closure" {
     lvl62_r3yce_closure:
         const lvl62_r3yce_info;
         const 0;
 },
 lvl116_s3ysc_entry() //  [R1]
         { info_tbl: [(c3EPr,
                       label: lvl116_s3ysc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EPr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EPs; else goto c3EPt;
       c3EPs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EPt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x17_r3yaw_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yse_entry() //  [R1]
         { info_tbl: [(c3EPz,
                       label: sat_s3yse_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EPz: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl62_r3yce_entry() //  [R2]
         { info_tbl: [(c3EPF,
                       label: lvl62_r3yce_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EPF: // global
           _s3ysb::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EPG; else goto c3EPH;
       c3EPH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EPJ; else goto c3EPI;
       c3EPJ: // global
           HpAlloc = 40;
           goto c3EPG;
       c3EPG: // global
           R2 = _s3ysb::P64;
           R1 = lvl62_r3yce_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EPI: // global
           I64[Hp - 32] = lvl116_s3ysc_info;
           P64[Hp - 16] = _s3ysb::P64;
           I64[Hp - 8] = sat_s3yse_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EPC_info;
           R3 = Hp - 7;
           R2 = m36_r3yav_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EPC() //  [R1]
         { info_tbl: [(c3EPC,
                       label: block_c3EPC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EPC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EPM; else goto c3EPL;
       c3EPM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EPL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.561324711 UTC

[section ""data" . lvl63_r3ycf_closure" {
     lvl63_r3ycf_closure:
         const lvl63_r3ycf_info;
         const 0;
 },
 lvl116_s3ysi_entry() //  [R1]
         { info_tbl: [(c3EQe,
                       label: lvl116_s3ysi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EQe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EQf; else goto c3EQg;
       c3EQf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EQg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x18_r3yaz_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysk_entry() //  [R1]
         { info_tbl: [(c3EQm,
                       label: sat_s3ysk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EQm: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl63_r3ycf_entry() //  [R2]
         { info_tbl: [(c3EQs,
                       label: lvl63_r3ycf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EQs: // global
           _s3ysh::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EQt; else goto c3EQu;
       c3EQu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EQw; else goto c3EQv;
       c3EQw: // global
           HpAlloc = 40;
           goto c3EQt;
       c3EQt: // global
           R2 = _s3ysh::P64;
           R1 = lvl63_r3ycf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EQv: // global
           I64[Hp - 32] = lvl116_s3ysi_info;
           P64[Hp - 16] = _s3ysh::P64;
           I64[Hp - 8] = sat_s3ysk_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EQp_info;
           R3 = Hp - 7;
           R2 = m38_r3yay_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EQp() //  [R1]
         { info_tbl: [(c3EQp,
                       label: block_c3EQp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EQp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EQz; else goto c3EQy;
       c3EQz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EQy: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.573128334 UTC

[section ""data" . lvl64_r3ycg_closure" {
     lvl64_r3ycg_closure:
         const lvl64_r3ycg_info;
         const 0;
 },
 lvl116_s3yso_entry() //  [R1]
         { info_tbl: [(c3ER1,
                       label: lvl116_s3yso_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ER1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ER2; else goto c3ER3;
       c3ER2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ER3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x19_r3yaC_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysq_entry() //  [R1]
         { info_tbl: [(c3ER9,
                       label: sat_s3ysq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ER9: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl64_r3ycg_entry() //  [R2]
         { info_tbl: [(c3ERf,
                       label: lvl64_r3ycg_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ERf: // global
           _s3ysn::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ERg; else goto c3ERh;
       c3ERh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ERj; else goto c3ERi;
       c3ERj: // global
           HpAlloc = 40;
           goto c3ERg;
       c3ERg: // global
           R2 = _s3ysn::P64;
           R1 = lvl64_r3ycg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ERi: // global
           I64[Hp - 32] = lvl116_s3yso_info;
           P64[Hp - 16] = _s3ysn::P64;
           I64[Hp - 8] = sat_s3ysq_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ERc_info;
           R3 = Hp - 7;
           R2 = m40_r3yaB_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ERc() //  [R1]
         { info_tbl: [(c3ERc,
                       label: block_c3ERc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ERc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ERm; else goto c3ERl;
       c3ERm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ERl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.584356504 UTC

[section ""data" . lvl65_r3ych_closure" {
     lvl65_r3ych_closure:
         const lvl65_r3ych_info;
         const 0;
 },
 lvl116_s3ysu_entry() //  [R1]
         { info_tbl: [(c3ERO,
                       label: lvl116_s3ysu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ERO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ERP; else goto c3ERQ;
       c3ERP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ERQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x20_r3yaF_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysw_entry() //  [R1]
         { info_tbl: [(c3ERW,
                       label: sat_s3ysw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ERW: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl65_r3ych_entry() //  [R2]
         { info_tbl: [(c3ES2,
                       label: lvl65_r3ych_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ES2: // global
           _s3yst::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ES3; else goto c3ES4;
       c3ES4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ES6; else goto c3ES5;
       c3ES6: // global
           HpAlloc = 40;
           goto c3ES3;
       c3ES3: // global
           R2 = _s3yst::P64;
           R1 = lvl65_r3ych_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ES5: // global
           I64[Hp - 32] = lvl116_s3ysu_info;
           P64[Hp - 16] = _s3yst::P64;
           I64[Hp - 8] = sat_s3ysw_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ERZ_info;
           R3 = Hp - 7;
           R2 = m42_r3yaE_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ERZ() //  [R1]
         { info_tbl: [(c3ERZ,
                       label: block_c3ERZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ERZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ES9; else goto c3ES8;
       c3ES9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ES8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.595350952 UTC

[section ""data" . lvl66_r3yci_closure" {
     lvl66_r3yci_closure:
         const lvl66_r3yci_info;
         const 0;
 },
 lvl116_s3ysA_entry() //  [R1]
         { info_tbl: [(c3ESB,
                       label: lvl116_s3ysA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ESB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ESC; else goto c3ESD;
       c3ESC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ESD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x21_r3yaI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysC_entry() //  [R1]
         { info_tbl: [(c3ESJ,
                       label: sat_s3ysC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ESJ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl66_r3yci_entry() //  [R2]
         { info_tbl: [(c3ESP,
                       label: lvl66_r3yci_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ESP: // global
           _s3ysz::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ESQ; else goto c3ESR;
       c3ESR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EST; else goto c3ESS;
       c3EST: // global
           HpAlloc = 40;
           goto c3ESQ;
       c3ESQ: // global
           R2 = _s3ysz::P64;
           R1 = lvl66_r3yci_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ESS: // global
           I64[Hp - 32] = lvl116_s3ysA_info;
           P64[Hp - 16] = _s3ysz::P64;
           I64[Hp - 8] = sat_s3ysC_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ESM_info;
           R3 = Hp - 7;
           R2 = m44_r3yaH_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ESM() //  [R1]
         { info_tbl: [(c3ESM,
                       label: block_c3ESM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ESM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ESW; else goto c3ESV;
       c3ESW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ESV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.606455098 UTC

[section ""data" . lvl67_r3ycj_closure" {
     lvl67_r3ycj_closure:
         const lvl67_r3ycj_info;
         const 0;
 },
 lvl116_s3ysG_entry() //  [R1]
         { info_tbl: [(c3ETo,
                       label: lvl116_s3ysG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ETo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ETp; else goto c3ETq;
       c3ETp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ETq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x22_r3yaL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysI_entry() //  [R1]
         { info_tbl: [(c3ETw,
                       label: sat_s3ysI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ETw: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl67_r3ycj_entry() //  [R2]
         { info_tbl: [(c3ETC,
                       label: lvl67_r3ycj_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ETC: // global
           _s3ysF::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ETD; else goto c3ETE;
       c3ETE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ETG; else goto c3ETF;
       c3ETG: // global
           HpAlloc = 40;
           goto c3ETD;
       c3ETD: // global
           R2 = _s3ysF::P64;
           R1 = lvl67_r3ycj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ETF: // global
           I64[Hp - 32] = lvl116_s3ysG_info;
           P64[Hp - 16] = _s3ysF::P64;
           I64[Hp - 8] = sat_s3ysI_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ETz_info;
           R3 = Hp - 7;
           R2 = m46_r3yaK_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ETz() //  [R1]
         { info_tbl: [(c3ETz,
                       label: block_c3ETz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ETz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ETJ; else goto c3ETI;
       c3ETJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ETI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.617369683 UTC

[section ""data" . lvl68_r3yck_closure" {
     lvl68_r3yck_closure:
         const lvl68_r3yck_info;
         const 0;
 },
 lvl116_s3ysM_entry() //  [R1]
         { info_tbl: [(c3EUb,
                       label: lvl116_s3ysM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EUb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EUc; else goto c3EUd;
       c3EUc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EUd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x23_r3yaO_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysO_entry() //  [R1]
         { info_tbl: [(c3EUj,
                       label: sat_s3ysO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EUj: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl68_r3yck_entry() //  [R2]
         { info_tbl: [(c3EUp,
                       label: lvl68_r3yck_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EUp: // global
           _s3ysL::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EUq; else goto c3EUr;
       c3EUr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EUt; else goto c3EUs;
       c3EUt: // global
           HpAlloc = 40;
           goto c3EUq;
       c3EUq: // global
           R2 = _s3ysL::P64;
           R1 = lvl68_r3yck_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EUs: // global
           I64[Hp - 32] = lvl116_s3ysM_info;
           P64[Hp - 16] = _s3ysL::P64;
           I64[Hp - 8] = sat_s3ysO_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EUm_info;
           R3 = Hp - 7;
           R2 = m48_r3yaN_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EUm() //  [R1]
         { info_tbl: [(c3EUm,
                       label: block_c3EUm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EUm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EUw; else goto c3EUv;
       c3EUw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EUv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.62881233 UTC

[section ""data" . lvl69_r3ycl_closure" {
     lvl69_r3ycl_closure:
         const lvl69_r3ycl_info;
         const 0;
 },
 lvl116_s3ysS_entry() //  [R1]
         { info_tbl: [(c3EUY,
                       label: lvl116_s3ysS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EUY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EUZ; else goto c3EV0;
       c3EUZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EV0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x24_r3yaR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ysU_entry() //  [R1]
         { info_tbl: [(c3EV6,
                       label: sat_s3ysU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EV6: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl69_r3ycl_entry() //  [R2]
         { info_tbl: [(c3EVc,
                       label: lvl69_r3ycl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EVc: // global
           _s3ysR::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EVd; else goto c3EVe;
       c3EVe: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EVg; else goto c3EVf;
       c3EVg: // global
           HpAlloc = 40;
           goto c3EVd;
       c3EVd: // global
           R2 = _s3ysR::P64;
           R1 = lvl69_r3ycl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EVf: // global
           I64[Hp - 32] = lvl116_s3ysS_info;
           P64[Hp - 16] = _s3ysR::P64;
           I64[Hp - 8] = sat_s3ysU_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EV9_info;
           R3 = Hp - 7;
           R2 = m50_r3yaQ_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EV9() //  [R1]
         { info_tbl: [(c3EV9,
                       label: block_c3EV9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EV9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EVj; else goto c3EVi;
       c3EVj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EVi: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.639873351 UTC

[section ""data" . lvl70_r3ycm_closure" {
     lvl70_r3ycm_closure:
         const lvl70_r3ycm_info;
         const 0;
 },
 lvl116_s3ysY_entry() //  [R1]
         { info_tbl: [(c3EVL,
                       label: lvl116_s3ysY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EVL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EVM; else goto c3EVN;
       c3EVM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EVN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x25_r3yaU_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yt0_entry() //  [R1]
         { info_tbl: [(c3EVT,
                       label: sat_s3yt0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EVT: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl70_r3ycm_entry() //  [R2]
         { info_tbl: [(c3EVZ,
                       label: lvl70_r3ycm_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EVZ: // global
           _s3ysX::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EW0; else goto c3EW1;
       c3EW1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EW3; else goto c3EW2;
       c3EW3: // global
           HpAlloc = 40;
           goto c3EW0;
       c3EW0: // global
           R2 = _s3ysX::P64;
           R1 = lvl70_r3ycm_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EW2: // global
           I64[Hp - 32] = lvl116_s3ysY_info;
           P64[Hp - 16] = _s3ysX::P64;
           I64[Hp - 8] = sat_s3yt0_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EVW_info;
           R3 = Hp - 7;
           R2 = m52_r3yaT_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EVW() //  [R1]
         { info_tbl: [(c3EVW,
                       label: block_c3EVW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EVW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EW6; else goto c3EW5;
       c3EW6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EW5: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.650675861 UTC

[section ""data" . lvl71_r3ycn_closure" {
     lvl71_r3ycn_closure:
         const lvl71_r3ycn_info;
         const 0;
 },
 lvl116_s3yt4_entry() //  [R1]
         { info_tbl: [(c3EWy,
                       label: lvl116_s3yt4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EWy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EWz; else goto c3EWA;
       c3EWz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EWA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x26_r3yaX_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yt6_entry() //  [R1]
         { info_tbl: [(c3EWG,
                       label: sat_s3yt6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EWG: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl71_r3ycn_entry() //  [R2]
         { info_tbl: [(c3EWM,
                       label: lvl71_r3ycn_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EWM: // global
           _s3yt3::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EWN; else goto c3EWO;
       c3EWO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EWQ; else goto c3EWP;
       c3EWQ: // global
           HpAlloc = 40;
           goto c3EWN;
       c3EWN: // global
           R2 = _s3yt3::P64;
           R1 = lvl71_r3ycn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EWP: // global
           I64[Hp - 32] = lvl116_s3yt4_info;
           P64[Hp - 16] = _s3yt3::P64;
           I64[Hp - 8] = sat_s3yt6_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EWJ_info;
           R3 = Hp - 7;
           R2 = m54_r3yaW_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EWJ() //  [R1]
         { info_tbl: [(c3EWJ,
                       label: block_c3EWJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EWJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EWT; else goto c3EWS;
       c3EWT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EWS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.661888096 UTC

[section ""data" . lvl72_r3yco_closure" {
     lvl72_r3yco_closure:
         const lvl72_r3yco_info;
         const 0;
 },
 lvl116_s3yta_entry() //  [R1]
         { info_tbl: [(c3EXl,
                       label: lvl116_s3yta_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EXl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EXm; else goto c3EXn;
       c3EXm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EXn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x27_r3yb0_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytc_entry() //  [R1]
         { info_tbl: [(c3EXt,
                       label: sat_s3ytc_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EXt: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl72_r3yco_entry() //  [R2]
         { info_tbl: [(c3EXz,
                       label: lvl72_r3yco_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EXz: // global
           _s3yt9::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EXA; else goto c3EXB;
       c3EXB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EXD; else goto c3EXC;
       c3EXD: // global
           HpAlloc = 40;
           goto c3EXA;
       c3EXA: // global
           R2 = _s3yt9::P64;
           R1 = lvl72_r3yco_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EXC: // global
           I64[Hp - 32] = lvl116_s3yta_info;
           P64[Hp - 16] = _s3yt9::P64;
           I64[Hp - 8] = sat_s3ytc_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EXw_info;
           R3 = Hp - 7;
           R2 = m56_r3yaZ_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EXw() //  [R1]
         { info_tbl: [(c3EXw,
                       label: block_c3EXw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EXw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EXG; else goto c3EXF;
       c3EXG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EXF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.672608747 UTC

[section ""data" . lvl73_r3ycp_closure" {
     lvl73_r3ycp_closure:
         const lvl73_r3ycp_info;
         const 0;
 },
 lvl116_s3ytg_entry() //  [R1]
         { info_tbl: [(c3EY8,
                       label: lvl116_s3ytg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EY8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EY9; else goto c3EYa;
       c3EY9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EYa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x28_r3yb3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yti_entry() //  [R1]
         { info_tbl: [(c3EYg,
                       label: sat_s3yti_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EYg: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl73_r3ycp_entry() //  [R2]
         { info_tbl: [(c3EYm,
                       label: lvl73_r3ycp_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EYm: // global
           _s3ytf::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EYn; else goto c3EYo;
       c3EYo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EYq; else goto c3EYp;
       c3EYq: // global
           HpAlloc = 40;
           goto c3EYn;
       c3EYn: // global
           R2 = _s3ytf::P64;
           R1 = lvl73_r3ycp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EYp: // global
           I64[Hp - 32] = lvl116_s3ytg_info;
           P64[Hp - 16] = _s3ytf::P64;
           I64[Hp - 8] = sat_s3yti_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EYj_info;
           R3 = Hp - 7;
           R2 = m58_r3yb2_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EYj() //  [R1]
         { info_tbl: [(c3EYj,
                       label: block_c3EYj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EYj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EYt; else goto c3EYs;
       c3EYt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EYs: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.683898689 UTC

[section ""data" . lvl74_r3ycq_closure" {
     lvl74_r3ycq_closure:
         const lvl74_r3ycq_info;
         const 0;
 },
 lvl116_s3ytm_entry() //  [R1]
         { info_tbl: [(c3EYV,
                       label: lvl116_s3ytm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EYV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EYW; else goto c3EYX;
       c3EYW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EYX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x29_r3yb6_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yto_entry() //  [R1]
         { info_tbl: [(c3EZ3,
                       label: sat_s3yto_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EZ3: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl74_r3ycq_entry() //  [R2]
         { info_tbl: [(c3EZ9,
                       label: lvl74_r3ycq_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EZ9: // global
           _s3ytl::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EZa; else goto c3EZb;
       c3EZb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3EZd; else goto c3EZc;
       c3EZd: // global
           HpAlloc = 40;
           goto c3EZa;
       c3EZa: // global
           R2 = _s3ytl::P64;
           R1 = lvl74_r3ycq_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EZc: // global
           I64[Hp - 32] = lvl116_s3ytm_info;
           P64[Hp - 16] = _s3ytl::P64;
           I64[Hp - 8] = sat_s3yto_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EZ6_info;
           R3 = Hp - 7;
           R2 = m60_r3yb5_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EZ6() //  [R1]
         { info_tbl: [(c3EZ6,
                       label: block_c3EZ6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EZ6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3EZg; else goto c3EZf;
       c3EZg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3EZf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.694831101 UTC

[section ""data" . lvl75_r3ycr_closure" {
     lvl75_r3ycr_closure:
         const lvl75_r3ycr_info;
         const 0;
 },
 lvl116_s3yts_entry() //  [R1]
         { info_tbl: [(c3EZI,
                       label: lvl116_s3yts_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EZI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3EZJ; else goto c3EZK;
       c3EZJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3EZK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x30_r3yb9_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytu_entry() //  [R1]
         { info_tbl: [(c3EZQ,
                       label: sat_s3ytu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EZQ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl75_r3ycr_entry() //  [R2]
         { info_tbl: [(c3EZW,
                       label: lvl75_r3ycr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EZW: // global
           _s3ytr::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3EZX; else goto c3EZY;
       c3EZY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3F00; else goto c3EZZ;
       c3F00: // global
           HpAlloc = 40;
           goto c3EZX;
       c3EZX: // global
           R2 = _s3ytr::P64;
           R1 = lvl75_r3ycr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3EZZ: // global
           I64[Hp - 32] = lvl116_s3yts_info;
           P64[Hp - 16] = _s3ytr::P64;
           I64[Hp - 8] = sat_s3ytu_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3EZT_info;
           R3 = Hp - 7;
           R2 = m62_r3yb8_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3EZT() //  [R1]
         { info_tbl: [(c3EZT,
                       label: block_c3EZT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3EZT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3F03; else goto c3F02;
       c3F03: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3F02: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.706469057 UTC

[section ""data" . lvl76_r3ycs_closure" {
     lvl76_r3ycs_closure:
         const lvl76_r3ycs_info;
         const 0;
 },
 lvl116_s3yty_entry() //  [R1]
         { info_tbl: [(c3F0v,
                       label: lvl116_s3yty_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F0v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F0w; else goto c3F0x;
       c3F0w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F0x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x31_r3ybc_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytA_entry() //  [R1]
         { info_tbl: [(c3F0D,
                       label: sat_s3ytA_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F0D: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl76_r3ycs_entry() //  [R2]
         { info_tbl: [(c3F0J,
                       label: lvl76_r3ycs_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F0J: // global
           _s3ytx::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3F0K; else goto c3F0L;
       c3F0L: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3F0N; else goto c3F0M;
       c3F0N: // global
           HpAlloc = 40;
           goto c3F0K;
       c3F0K: // global
           R2 = _s3ytx::P64;
           R1 = lvl76_r3ycs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F0M: // global
           I64[Hp - 32] = lvl116_s3yty_info;
           P64[Hp - 16] = _s3ytx::P64;
           I64[Hp - 8] = sat_s3ytA_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3F0G_info;
           R3 = Hp - 7;
           R2 = m64_r3ybb_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3F0G() //  [R1]
         { info_tbl: [(c3F0G,
                       label: block_c3F0G_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F0G: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3F0Q; else goto c3F0P;
       c3F0Q: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3F0P: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.717757357 UTC

[section ""data" . lvl77_r3yct_closure" {
     lvl77_r3yct_closure:
         const lvl77_r3yct_info;
         const 0;
 },
 lvl116_s3ytE_entry() //  [R1]
         { info_tbl: [(c3F1i,
                       label: lvl116_s3ytE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F1i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F1j; else goto c3F1k;
       c3F1j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F1k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x32_r3ybf_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytG_entry() //  [R1]
         { info_tbl: [(c3F1q,
                       label: sat_s3ytG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F1q: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl77_r3yct_entry() //  [R2]
         { info_tbl: [(c3F1w,
                       label: lvl77_r3yct_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F1w: // global
           _s3ytD::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3F1x; else goto c3F1y;
       c3F1y: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3F1A; else goto c3F1z;
       c3F1A: // global
           HpAlloc = 40;
           goto c3F1x;
       c3F1x: // global
           R2 = _s3ytD::P64;
           R1 = lvl77_r3yct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F1z: // global
           I64[Hp - 32] = lvl116_s3ytE_info;
           P64[Hp - 16] = _s3ytD::P64;
           I64[Hp - 8] = sat_s3ytG_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3F1t_info;
           R3 = Hp - 7;
           R2 = m66_r3ybe_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3F1t() //  [R1]
         { info_tbl: [(c3F1t,
                       label: block_c3F1t_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F1t: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3F1D; else goto c3F1C;
       c3F1D: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3F1C: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.728978449 UTC

[section ""data" . lvl78_r3ycu_closure" {
     lvl78_r3ycu_closure:
         const lvl78_r3ycu_info;
         const 0;
 },
 lvl116_s3ytK_entry() //  [R1]
         { info_tbl: [(c3F25,
                       label: lvl116_s3ytK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F25: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F26; else goto c3F27;
       c3F26: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F27: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x33_r3ybi_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytM_entry() //  [R1]
         { info_tbl: [(c3F2d,
                       label: sat_s3ytM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F2d: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl78_r3ycu_entry() //  [R2]
         { info_tbl: [(c3F2j,
                       label: lvl78_r3ycu_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F2j: // global
           _s3ytJ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3F2k; else goto c3F2l;
       c3F2l: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3F2n; else goto c3F2m;
       c3F2n: // global
           HpAlloc = 40;
           goto c3F2k;
       c3F2k: // global
           R2 = _s3ytJ::P64;
           R1 = lvl78_r3ycu_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F2m: // global
           I64[Hp - 32] = lvl116_s3ytK_info;
           P64[Hp - 16] = _s3ytJ::P64;
           I64[Hp - 8] = sat_s3ytM_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3F2g_info;
           R3 = Hp - 7;
           R2 = m68_r3ybh_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3F2g() //  [R1]
         { info_tbl: [(c3F2g,
                       label: block_c3F2g_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F2g: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3F2q; else goto c3F2p;
       c3F2q: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3F2p: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.739045382 UTC

[section ""data" . lvl79_r3ycv_closure" {
     lvl79_r3ycv_closure:
         const :_con_info;
         const lvl78_r3ycu_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.740899445 UTC

[section ""data" . lvl80_r3ycw_closure" {
     lvl80_r3ycw_closure:
         const :_con_info;
         const lvl77_r3yct_closure+1;
         const lvl79_r3ycv_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.743112284 UTC

[section ""data" . lvl81_r3ycx_closure" {
     lvl81_r3ycx_closure:
         const :_con_info;
         const lvl76_r3ycs_closure+1;
         const lvl80_r3ycw_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.744881642 UTC

[section ""data" . lvl82_r3ycy_closure" {
     lvl82_r3ycy_closure:
         const :_con_info;
         const lvl75_r3ycr_closure+1;
         const lvl81_r3ycx_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.747092266 UTC

[section ""data" . lvl83_r3ycz_closure" {
     lvl83_r3ycz_closure:
         const :_con_info;
         const lvl74_r3ycq_closure+1;
         const lvl82_r3ycy_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.748904268 UTC

[section ""data" . lvl84_r3ycA_closure" {
     lvl84_r3ycA_closure:
         const :_con_info;
         const lvl73_r3ycp_closure+1;
         const lvl83_r3ycz_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.750595772 UTC

[section ""data" . lvl85_r3ycB_closure" {
     lvl85_r3ycB_closure:
         const :_con_info;
         const lvl72_r3yco_closure+1;
         const lvl84_r3ycA_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.752306118 UTC

[section ""data" . lvl86_r3ycC_closure" {
     lvl86_r3ycC_closure:
         const :_con_info;
         const lvl71_r3ycn_closure+1;
         const lvl85_r3ycB_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.754078836 UTC

[section ""data" . lvl87_r3ycD_closure" {
     lvl87_r3ycD_closure:
         const :_con_info;
         const lvl70_r3ycm_closure+1;
         const lvl86_r3ycC_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.756235008 UTC

[section ""data" . lvl88_r3ycE_closure" {
     lvl88_r3ycE_closure:
         const :_con_info;
         const lvl69_r3ycl_closure+1;
         const lvl87_r3ycD_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.75797054 UTC

[section ""data" . lvl89_r3ycF_closure" {
     lvl89_r3ycF_closure:
         const :_con_info;
         const lvl68_r3yck_closure+1;
         const lvl88_r3ycE_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.759648338 UTC

[section ""data" . lvl90_r3ycG_closure" {
     lvl90_r3ycG_closure:
         const :_con_info;
         const lvl67_r3ycj_closure+1;
         const lvl89_r3ycF_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.76149525 UTC

[section ""data" . lvl91_r3ycH_closure" {
     lvl91_r3ycH_closure:
         const :_con_info;
         const lvl66_r3yci_closure+1;
         const lvl90_r3ycG_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.763312603 UTC

[section ""data" . lvl92_r3ycI_closure" {
     lvl92_r3ycI_closure:
         const :_con_info;
         const lvl65_r3ych_closure+1;
         const lvl91_r3ycH_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.765566928 UTC

[section ""data" . lvl93_r3ycJ_closure" {
     lvl93_r3ycJ_closure:
         const :_con_info;
         const lvl64_r3ycg_closure+1;
         const lvl92_r3ycI_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.767339996 UTC

[section ""data" . lvl94_r3ycK_closure" {
     lvl94_r3ycK_closure:
         const :_con_info;
         const lvl63_r3ycf_closure+1;
         const lvl93_r3ycJ_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.76910315 UTC

[section ""data" . lvl95_r3ycL_closure" {
     lvl95_r3ycL_closure:
         const :_con_info;
         const lvl62_r3yce_closure+1;
         const lvl94_r3ycK_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.770906997 UTC

[section ""data" . lvl96_r3ycM_closure" {
     lvl96_r3ycM_closure:
         const :_con_info;
         const lvl61_r3ycd_closure+1;
         const lvl95_r3ycL_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.773147461 UTC

[section ""data" . lvl97_r3ycN_closure" {
     lvl97_r3ycN_closure:
         const :_con_info;
         const lvl60_r3ycc_closure+1;
         const lvl96_r3ycM_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.774971289 UTC

[section ""data" . lvl98_r3ycO_closure" {
     lvl98_r3ycO_closure:
         const :_con_info;
         const lvl59_r3ycb_closure+1;
         const lvl97_r3ycN_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.776735308 UTC

[section ""data" . lvl99_r3ycP_closure" {
     lvl99_r3ycP_closure:
         const :_con_info;
         const lvl58_r3yca_closure+1;
         const lvl98_r3ycO_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.779002621 UTC

[section ""data" . lvl100_r3ycQ_closure" {
     lvl100_r3ycQ_closure:
         const :_con_info;
         const lvl57_r3yc9_closure+1;
         const lvl99_r3ycP_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.780924135 UTC

[section ""data" . lvl101_r3ycR_closure" {
     lvl101_r3ycR_closure:
         const :_con_info;
         const lvl56_r3yc8_closure+1;
         const lvl100_r3ycQ_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.78318535 UTC

[section ""data" . lvl102_r3ycS_closure" {
     lvl102_r3ycS_closure:
         const :_con_info;
         const lvl55_r3yc7_closure+1;
         const lvl101_r3ycR_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.784913701 UTC

[section ""data" . lvl103_r3ycT_closure" {
     lvl103_r3ycT_closure:
         const :_con_info;
         const lvl54_r3yc6_closure+1;
         const lvl102_r3ycS_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.786773691 UTC

[section ""data" . lvl104_r3ycU_closure" {
     lvl104_r3ycU_closure:
         const :_con_info;
         const lvl53_r3yc5_closure+1;
         const lvl103_r3ycT_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.788663436 UTC

[section ""data" . lvl105_r3ycV_closure" {
     lvl105_r3ycV_closure:
         const :_con_info;
         const lvl52_r3yc4_closure+1;
         const lvl104_r3ycU_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.791042517 UTC

[section ""data" . lvl106_r3ycW_closure" {
     lvl106_r3ycW_closure:
         const :_con_info;
         const lvl51_r3yc3_closure+1;
         const lvl105_r3ycV_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.792789403 UTC

[section ""data" . lvl107_r3ycX_closure" {
     lvl107_r3ycX_closure:
         const :_con_info;
         const lvl50_r3yc2_closure+1;
         const lvl106_r3ycW_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.795731204 UTC

[section ""data" . lvl108_r3ycY_closure" {
     lvl108_r3ycY_closure:
         const :_con_info;
         const lvl49_r3yc1_closure+1;
         const lvl107_r3ycX_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.797588182 UTC

[section ""data" . lvl109_r3ycZ_closure" {
     lvl109_r3ycZ_closure:
         const :_con_info;
         const lvl48_r3yc0_closure+1;
         const lvl108_r3ycY_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.799841359 UTC

[section ""data" . lvl110_r3yd0_closure" {
     lvl110_r3yd0_closure:
         const :_con_info;
         const lvl47_r3ybZ_closure+1;
         const lvl109_r3ycZ_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.801666459 UTC

[section ""data" . lvl111_r3yd1_closure" {
     lvl111_r3yd1_closure:
         const :_con_info;
         const lvl46_r3ybY_closure+1;
         const lvl110_r3yd0_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.804462021 UTC

[section ""data" . lvl112_r3yd2_closure" {
     lvl112_r3yd2_closure:
         const lvl112_r3yd2_info;
 },
 lvl116_s3ytQ_entry() //  [R1]
         { info_tbl: [(c3F3p,
                       label: lvl116_s3ytQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F3p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F3q; else goto c3F3r;
       c3F3q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F3r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = a2_r3y9z_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3ytR_entry() //  [R1]
         { info_tbl: [(c3F3w,
                       label: lvl117_s3ytR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F3w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F3x; else goto c3F3y;
       c3F3x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F3y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = a1_r3y9y_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ytW_entry() //  [R1, R2]
         { info_tbl: [(c3F3H,
                       label: sat_s3ytW_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F3H: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3F3I; else goto c3F3J;
       c3F3I: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F3J: // global
           I64[Sp - 24] = block_c3F3E_info;
           _s3ytQ::P64 = P64[R1 + 7];
           _s3ytR::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ytQ::P64;
           P64[Sp - 8] = _s3ytR::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3F3Z; else goto c3F3F;
       u3F3Z: // global
           call _c3F3E(R1) args: 0, res: 0, upd: 0;
       c3F3F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3F3E() //  [R1]
         { info_tbl: [(c3F3E,
                       label: block_c3F3E_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F3E: // global
           _s3ytQ::P64 = P64[Sp + 8];
           _s3ytV::I64 = I64[R1 + 7];
           if (_s3ytV::I64 < 120) goto u3F3U; else goto u3F3Y;
       u3F3U: // global
           _s3ytR::P64 = P64[Sp + 16];
           if (_s3ytV::I64 < 89) goto u3F3V; else goto u3F3X;
       u3F3V: // global
           if (_s3ytV::I64 >= 88) goto c3F3T; else goto u3F3W;
       u3F3W: // global
           if (_s3ytV::I64 != 79) goto c3F3P; else goto c3F3S;
       u3F3X: // global
           if (_s3ytV::I64 != 111) goto c3F3P; else goto c3F3S;
       c3F3S: // global
           R1 = _s3ytR::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3F3Y: // global
           if (_s3ytV::I64 < 121) goto c3F3T; else goto c3F3P;
       c3F3T: // global
           R1 = _s3ytQ::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3F3P: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl112_r3yd2_entry() //  [R2]
         { info_tbl: [(c3F41,
                       label: lvl112_r3yd2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F41: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3F45; else goto c3F44;
       c3F45: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = lvl112_r3yd2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F44: // global
           I64[Hp - 80] = lvl116_s3ytQ_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = lvl117_s3ytR_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s3ytW_info;
           P64[Hp - 24] = Hp - 80;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.817810526 UTC

[section ""data" . lvl113_r3yd3_closure" {
     lvl113_r3yd3_closure:
         const lvl113_r3yd3_info;
 },
 lvl113_r3yd3_entry() //  [R2]
         { info_tbl: [(c3F4D,
                       label: lvl113_r3yd3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F4D: // global
           _s3ytX::P64 = R2;
           R2 = lvl6_r3y9C_closure+1;
           R1 = _s3ytX::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.831090583 UTC

[section ""data" . Text.Read.Lex.lexChar2_closure" {
     Text.Read.Lex.lexChar2_closure:
         const Text.Read.Lex.lexChar2_info;
         const 0;
 },
 lvl116_s3ytZ_entry() //  [R1]
         { info_tbl: [(c3F4S,
                       label: lvl116_s3ytZ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F4S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F4T; else goto c3F4U;
       c3F4T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F4U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl18_r3ybu_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3yu0_entry() //  [R1]
         { info_tbl: [(c3F4Z,
                       label: lvl117_s3yu0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F4Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F50; else goto c3F51;
       c3F50: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F51: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl16_r3ybs_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3yu1_entry() //  [R1]
         { info_tbl: [(c3F56,
                       label: lvl118_s3yu1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F56: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F57; else goto c3F58;
       c3F57: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F58: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl20_r3ybw_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl119_s3yu2_entry() //  [R1]
         { info_tbl: [(c3F5d,
                       label: lvl119_s3yu2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F5d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5e; else goto c3F5f;
       c3F5e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl17_r3ybt_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl120_s3yu3_entry() //  [R1]
         { info_tbl: [(c3F5k,
                       label: lvl120_s3yu3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F5k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5l; else goto c3F5m;
       c3F5l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl19_r3ybv_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl121_s3yu4_entry() //  [R1]
         { info_tbl: [(c3F5r,
                       label: lvl121_s3yu4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F5r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5s; else goto c3F5t;
       c3F5s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl15_r3ybr_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl122_s3yu5_entry() //  [R1]
         { info_tbl: [(c3F5y,
                       label: lvl122_s3yu5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F5y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5z; else goto c3F5A;
       c3F5z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl14_r3ybq_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl123_s3yu6_entry() //  [R1]
         { info_tbl: [(c3F5F,
                       label: lvl123_s3yu6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F5F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5G; else goto c3F5H;
       c3F5G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl13_r3ybp_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl124_s3yu7_entry() //  [R1]
         { info_tbl: [(c3F5M,
                       label: lvl124_s3yu7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F5M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5N; else goto c3F5O;
       c3F5N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl11_r3ybn_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl125_s3yu8_entry() //  [R1]
         { info_tbl: [(c3F5T,
                       label: lvl125_s3yu8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F5T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F5U; else goto c3F5V;
       c3F5U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F5V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl9_r3ybl_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl126_s3yug_entry() //  [R1]
         { info_tbl: [(c3F6c,
                       label: lvl126_s3yug_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F6c: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3F6d; else goto c3F6e;
       c3F6d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F6e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3F69_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3F6i; else goto c3F6a;
       u3F6i: // global
           call _c3F69(R1) args: 0, res: 0, upd: 0;
       c3F6a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3F69() //  [R1]
         { info_tbl: [(c3F69,
                       label: block_c3F69_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F69: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yuq_entry() //  [R1]
         { info_tbl: [(c3F6D,
                       label: sat_s3yuq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F6D: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3F6E; else goto c3F6F;
       c3F6E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F6F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3F6B_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3F6B() //  [R1]
         { info_tbl: [(c3F6B,
                       label: block_c3F6B_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F6B: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3F6K; else goto c3F6J;
       c3F6K: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3F6J: // global
           if (R1 > 1114111) goto c3F6R; else goto c3F6Y;
       c3F6R: // global
           Hp = Hp - 16;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c3F6Y: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3FcU_srtd" {
     u3FcU_srtd:
         const S3yFW_srt+232;
         const 122;
         const 1;
         const 216172782113783808;
 },
 sat_s3yus_entry() //  [R1, R2]
         { info_tbl: [(c3F6Z,
                       label: sat_s3yus_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F6Z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3F70; else goto c3F71;
       c3F70: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F71: // global
           I64[Sp - 16] = block_c3F6o_info;
           R3 = R2;
           R2 = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3F6o() //  [R1]
         { info_tbl: [(c3F6o,
                       label: block_c3F6o_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F6o: // global
           I64[Sp - 8] = block_c3F6s_info;
           R3 = lvl7_r3ybj_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3F6s() //  [R1]
         { info_tbl: [(c3F6s,
                       label: block_c3F6s_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F6s: // global
           if (R1 == 1) goto c3F78; else goto c3F76;
       c3F78: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3F7b; else goto c3F7a;
       c3F7b: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3F7a: // global
           I64[Hp - 40] = sat_s3yuq_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = Hp - 15;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3F76: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FcV_srtd" {
     u3FcV_srtd:
         const S3yFW_srt+232;
         const 122;
         const 17592186044417;
         const 216172782113783808;
 },
 sat_s3yuv_entry() //  [R1, R2]
         { info_tbl: [(c3F7f,
                       label: sat_s3yuv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F7f: // global
           _s3yuf::P64 = R2;
           _s3yuv::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3F7g; else goto c3F7h;
       c3F7h: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3F7j; else goto c3F7i;
       c3F7j: // global
           HpAlloc = 48;
           goto c3F7g;
       c3F7g: // global
           R2 = _s3yuf::P64;
           R1 = _s3yuv::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3F7i: // global
           _s3ytY::P64 = P64[_s3yuv::P64 + 7];
           I64[Hp - 40] = lvl126_s3yug_info;
           P64[Hp - 24] = _s3yuf::P64;
           I64[Hp - 16] = sat_s3yus_info;
           P64[Hp - 8] = _s3ytY::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_c3F7c_info;
           R3 = Hp - 15;
           R2 = _s3yuf::P64;
           Sp = Sp - 8;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3F7c() //  [R1]
         { info_tbl: [(c3F7c,
                       label: block_c3F7c_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F7c: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3F7m; else goto c3F7l;
       c3F7m: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3F7l: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl126_s3yuz_entry() //  [R1]
         { info_tbl: [(c3F7x,
                       label: lvl126_s3yuz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F7x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F7y; else goto c3F7z;
       c3F7y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F7z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl45_r3ybV_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl127_s3yuA_entry() //  [R1]
         { info_tbl: [(c3F7E,
                       label: lvl127_s3yuA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F7E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F7F; else goto c3F7G;
       c3F7F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F7G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl44_r3ybU_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl128_s3yuB_entry() //  [R1]
         { info_tbl: [(c3F7L,
                       label: lvl128_s3yuB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F7L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F7M; else goto c3F7N;
       c3F7M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F7N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl43_r3ybT_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl129_s3yuC_entry() //  [R1]
         { info_tbl: [(c3F7S,
                       label: lvl129_s3yuC_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F7S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F7T; else goto c3F7U;
       c3F7T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F7U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl42_r3ybS_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl130_s3yuD_entry() //  [R1]
         { info_tbl: [(c3F7Z,
                       label: lvl130_s3yuD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F7Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F80; else goto c3F81;
       c3F80: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F81: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl41_r3ybR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl131_s3yuE_entry() //  [R1]
         { info_tbl: [(c3F86,
                       label: lvl131_s3yuE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F86: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F87; else goto c3F88;
       c3F87: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F88: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl40_r3ybQ_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl132_s3yuF_entry() //  [R1]
         { info_tbl: [(c3F8d,
                       label: lvl132_s3yuF_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F8d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8e; else goto c3F8f;
       c3F8e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl39_r3ybP_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl133_s3yuG_entry() //  [R1]
         { info_tbl: [(c3F8k,
                       label: lvl133_s3yuG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F8k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8l; else goto c3F8m;
       c3F8l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl38_r3ybO_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl134_s3yuH_entry() //  [R1]
         { info_tbl: [(c3F8r,
                       label: lvl134_s3yuH_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F8r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8s; else goto c3F8t;
       c3F8s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl37_r3ybN_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl135_s3yuI_entry() //  [R1]
         { info_tbl: [(c3F8y,
                       label: lvl135_s3yuI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F8y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8z; else goto c3F8A;
       c3F8z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl36_r3ybM_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl136_s3yuJ_entry() //  [R1]
         { info_tbl: [(c3F8F,
                       label: lvl136_s3yuJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F8F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8G; else goto c3F8H;
       c3F8G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl35_r3ybL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl137_s3yuK_entry() //  [R1]
         { info_tbl: [(c3F8M,
                       label: lvl137_s3yuK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F8M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8N; else goto c3F8O;
       c3F8N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl34_r3ybK_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl138_s3yuL_entry() //  [R1]
         { info_tbl: [(c3F8T,
                       label: lvl138_s3yuL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F8T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F8U; else goto c3F8V;
       c3F8U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F8V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl33_r3ybJ_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl139_s3yuM_entry() //  [R1]
         { info_tbl: [(c3F90,
                       label: lvl139_s3yuM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F90: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F91; else goto c3F92;
       c3F91: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F92: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl32_r3ybI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl140_s3yuN_entry() //  [R1]
         { info_tbl: [(c3F97,
                       label: lvl140_s3yuN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F97: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F98; else goto c3F99;
       c3F98: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F99: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl31_r3ybH_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl141_s3yuO_entry() //  [R1]
         { info_tbl: [(c3F9e,
                       label: lvl141_s3yuO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F9e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9f; else goto c3F9g;
       c3F9f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl30_r3ybG_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl142_s3yuP_entry() //  [R1]
         { info_tbl: [(c3F9l,
                       label: lvl142_s3yuP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F9l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9m; else goto c3F9n;
       c3F9m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl29_r3ybF_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl143_s3yuQ_entry() //  [R1]
         { info_tbl: [(c3F9s,
                       label: lvl143_s3yuQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F9s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9t; else goto c3F9u;
       c3F9t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl28_r3ybE_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl144_s3yuR_entry() //  [R1]
         { info_tbl: [(c3F9z,
                       label: lvl144_s3yuR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F9z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9A; else goto c3F9B;
       c3F9A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl27_r3ybD_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl145_s3yuS_entry() //  [R1]
         { info_tbl: [(c3F9G,
                       label: lvl145_s3yuS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F9G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9H; else goto c3F9I;
       c3F9H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl26_r3ybC_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl146_s3yuT_entry() //  [R1]
         { info_tbl: [(c3F9N,
                       label: lvl146_s3yuT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F9N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9O; else goto c3F9P;
       c3F9O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl25_r3ybB_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl147_s3yuU_entry() //  [R1]
         { info_tbl: [(c3F9U,
                       label: lvl147_s3yuU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F9U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3F9V; else goto c3F9W;
       c3F9V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3F9W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl24_r3ybA_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl148_s3yuV_entry() //  [R1]
         { info_tbl: [(c3Fa1,
                       label: lvl148_s3yuV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fa1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fa2; else goto c3Fa3;
       c3Fa2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fa3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl23_r3ybz_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl149_s3yuW_entry() //  [R1]
         { info_tbl: [(c3Fa8,
                       label: lvl149_s3yuW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fa8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fa9; else goto c3Faa;
       c3Fa9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Faa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl22_r3yby_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl150_s3yuX_entry() //  [R1]
         { info_tbl: [(c3Faf,
                       label: lvl150_s3yuX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Faf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fag; else goto c3Fah;
       c3Fag: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fah: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl21_r3ybx_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 $wlvl1_s3yuY_entry() //  [R1, R2]
         { info_tbl: [(c3FaW,
                       label: $wlvl1_s3yuY_info
                       rep:HeapRep 32 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FaW: // global
           if (R2 >= 96) goto c3Fap; else goto u3FaZ;
       u3FaZ: // global
           if (R2 < 64) goto c3Fap; else goto u3Fb0;
       c3Fap: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Fb0: // global
           switch [64 .. 95] R2 {
               case 64 : goto c3Faq;
               case 65 : goto c3Far;
               case 66 : goto c3Fas;
               case 67 : goto c3Fat;
               case 68 : goto c3Fau;
               case 69 : goto c3Fav;
               case 70 : goto c3Faw;
               case 71 : goto c3Fax;
               case 72 : goto c3Fay;
               case 73 : goto c3Faz;
               case 74 : goto c3FaA;
               case 75 : goto c3FaB;
               case 76 : goto c3FaC;
               case 77 : goto c3FaD;
               case 78 : goto c3FaE;
               case 79 : goto c3FaF;
               case 80 : goto c3FaG;
               case 81 : goto c3FaH;
               case 82 : goto c3FaI;
               case 83 : goto c3FaJ;
               case 84 : goto c3FaK;
               case 85 : goto c3FaL;
               case 86 : goto c3FaM;
               case 87 : goto c3FaN;
               case 88 : goto c3FaO;
               case 89 : goto c3FaP;
               case 90 : goto c3FaQ;
               case 91 : goto c3FaR;
               case 92 : goto c3FaS;
               case 93 : goto c3FaT;
               case 94 : goto c3FaU;
               case 95 : goto c3FaV;
           }
       c3FaV: // global
           R1 = P64[R1 + 63] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaU: // global
           R1 = P64[R1 + 71] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaT: // global
           R1 = P64[R1 + 79] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaS: // global
           R1 = P64[R1 + 87] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaR: // global
           R1 = P64[R1 + 95] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaQ: // global
           R1 = P64[R1 + 103] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaP: // global
           R1 = P64[R1 + 111] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaO: // global
           R1 = P64[R1 + 119] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaN: // global
           R1 = P64[R1 + 127] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaM: // global
           R1 = P64[R1 + 135] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaL: // global
           R1 = P64[R1 + 143] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaK: // global
           R1 = P64[R1 + 151] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaJ: // global
           R1 = P64[R1 + 159] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaI: // global
           R1 = P64[R1 + 167] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaH: // global
           R1 = P64[R1 + 175] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaG: // global
           R1 = P64[R1 + 183] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaF: // global
           R1 = P64[R1 + 191] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaE: // global
           R1 = P64[R1 + 199] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaD: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaC: // global
           R1 = P64[R1 + 15] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaB: // global
           R1 = P64[R1 + 23] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FaA: // global
           R1 = P64[R1 + 31] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Faz: // global
           R1 = P64[R1 + 39] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fay: // global
           R1 = P64[R1 + 47] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fax: // global
           R1 = P64[R1 + 55] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Faw: // global
           R1 = P64[R1 + 207] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fav: // global
           R1 = P64[R1 + 215] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fau: // global
           R1 = P64[R1 + 223] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fat: // global
           R1 = P64[R1 + 231] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fas: // global
           R1 = P64[R1 + 239] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Far: // global
           R1 = P64[R1 + 247] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Faq: // global
           R1 = P64[R1 + 255] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl151_s3yv1_entry() //  [R1, R2]
         { info_tbl: [(c3Fb9,
                       label: lvl151_s3yv1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fb9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fba; else goto c3Fbb;
       c3Fba: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fbb: // global
           I64[Sp - 16] = block_c3Fb6_info;
           _s3yuY::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yuY::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Fbf; else goto c3Fb7;
       u3Fbf: // global
           call _c3Fb6(R1) args: 0, res: 0, upd: 0;
       c3Fb7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Fb6() //  [R1]
         { info_tbl: [(c3Fb6,
                       label: block_c3Fb6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fb6: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wlvl1_s3yuY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yve_entry() //  [R1, R2]
         { info_tbl: [(c3Fbr,
                       label: sat_s3yve_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fbr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Fbv; else goto c3Fbu;
       c3Fbv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fbu: // global
           _s3ytY::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = Hp - 15;
           R1 = _s3ytY::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yvf_entry() //  [R1]
         { info_tbl: [(c3Fbw,
                       label: sat_s3yvf_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fbw: // global
           _s3yvf::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Fbx; else goto c3Fby;
       c3Fby: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FbA; else goto c3Fbz;
       c3FbA: // global
           HpAlloc = 16;
           goto c3Fbx;
       c3Fbx: // global
           R1 = _s3yvf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fbz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvf::P64;
           _s3ytY::P64 = P64[_s3yvf::P64 + 16];
           I64[Hp - 8] = sat_s3yve_info;
           P64[Hp] = _s3ytY::P64;
           R2 = lvl111_r3yd1_closure+2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.choice_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3yva_entry() //  [R1, R2]
         { info_tbl: [(c3FbJ,
                       label: sat_s3yva_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FbJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FbK; else goto c3FbL;
       c3FbK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FbL: // global
           I64[Sp - 16] = block_c3FbG_info;
           _s3yv5::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yv5::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FbT; else goto c3FbH;
       u3FbT: // global
           call _c3FbG(R1) args: 0, res: 0, upd: 0;
       c3FbH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FbG() //  [R1]
         { info_tbl: [(c3FbG,
                       label: block_c3FbG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FbG: // global
           if (I64[R1 + 7] == 94) goto c3FbS; else goto c3FbR;
       c3FbS: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FbR: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yvg_entry() //  [R1]
         { info_tbl: [(c3FbV,
                       label: sat_s3yvg_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FbV: // global
           _s3yvg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FbW; else goto c3FbX;
       c3FbX: // global
           Hp = Hp + 952;
           if (Hp > HpLim) (likely: False) goto c3FbZ; else goto c3FbY;
       c3FbZ: // global
           HpAlloc = 952;
           goto c3FbW;
       c3FbW: // global
           R1 = _s3yvg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FbY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvg::P64;
           _s3ytY::P64 = P64[_s3yvg::P64 + 16];
           _s3ytZ::P64 = P64[_s3yvg::P64 + 24];
           _s3yu0::P64 = P64[_s3yvg::P64 + 32];
           _s3yu1::P64 = P64[_s3yvg::P64 + 40];
           _s3yu2::P64 = P64[_s3yvg::P64 + 48];
           _s3yu3::P64 = P64[_s3yvg::P64 + 56];
           _s3yu4::P64 = P64[_s3yvg::P64 + 64];
           _s3yu5::P64 = P64[_s3yvg::P64 + 72];
           I64[Hp - 944] = lvl126_s3yuz_info;
           P64[Hp - 928] = _s3ytY::P64;
           I64[Hp - 920] = lvl127_s3yuA_info;
           P64[Hp - 904] = _s3ytY::P64;
           I64[Hp - 896] = lvl128_s3yuB_info;
           P64[Hp - 880] = _s3ytY::P64;
           I64[Hp - 872] = lvl129_s3yuC_info;
           P64[Hp - 856] = _s3ytY::P64;
           I64[Hp - 848] = lvl130_s3yuD_info;
           P64[Hp - 832] = _s3ytY::P64;
           I64[Hp - 824] = lvl131_s3yuE_info;
           P64[Hp - 808] = _s3ytY::P64;
           I64[Hp - 800] = lvl132_s3yuF_info;
           P64[Hp - 784] = _s3ytY::P64;
           I64[Hp - 776] = lvl133_s3yuG_info;
           P64[Hp - 760] = _s3ytY::P64;
           I64[Hp - 752] = lvl134_s3yuH_info;
           P64[Hp - 736] = _s3ytY::P64;
           I64[Hp - 728] = lvl135_s3yuI_info;
           P64[Hp - 712] = _s3ytY::P64;
           I64[Hp - 704] = lvl136_s3yuJ_info;
           P64[Hp - 688] = _s3ytY::P64;
           I64[Hp - 680] = lvl137_s3yuK_info;
           P64[Hp - 664] = _s3ytY::P64;
           I64[Hp - 656] = lvl138_s3yuL_info;
           P64[Hp - 640] = _s3ytY::P64;
           I64[Hp - 632] = lvl139_s3yuM_info;
           P64[Hp - 616] = _s3ytY::P64;
           I64[Hp - 608] = lvl140_s3yuN_info;
           P64[Hp - 592] = _s3ytY::P64;
           I64[Hp - 584] = lvl141_s3yuO_info;
           P64[Hp - 568] = _s3ytY::P64;
           I64[Hp - 560] = lvl142_s3yuP_info;
           P64[Hp - 544] = _s3ytY::P64;
           I64[Hp - 536] = lvl143_s3yuQ_info;
           P64[Hp - 520] = _s3ytY::P64;
           I64[Hp - 512] = lvl144_s3yuR_info;
           P64[Hp - 496] = _s3ytY::P64;
           I64[Hp - 488] = lvl145_s3yuS_info;
           P64[Hp - 472] = _s3ytY::P64;
           I64[Hp - 464] = lvl146_s3yuT_info;
           P64[Hp - 448] = _s3ytY::P64;
           I64[Hp - 440] = lvl147_s3yuU_info;
           P64[Hp - 424] = _s3ytY::P64;
           I64[Hp - 416] = lvl148_s3yuV_info;
           P64[Hp - 400] = _s3ytY::P64;
           I64[Hp - 392] = lvl149_s3yuW_info;
           P64[Hp - 376] = _s3ytY::P64;
           I64[Hp - 368] = lvl150_s3yuX_info;
           P64[Hp - 352] = _s3ytY::P64;
           I64[Hp - 344] = $wlvl1_s3yuY_info;
           P64[Hp - 336] = _s3ytZ::P64;
           P64[Hp - 328] = _s3yu0::P64;
           P64[Hp - 320] = _s3yu1::P64;
           P64[Hp - 312] = _s3yu2::P64;
           P64[Hp - 304] = _s3yu3::P64;
           P64[Hp - 296] = _s3yu4::P64;
           P64[Hp - 288] = _s3yu5::P64;
           P64[Hp - 280] = Hp - 944;
           P64[Hp - 272] = Hp - 920;
           P64[Hp - 264] = Hp - 896;
           P64[Hp - 256] = Hp - 872;
           P64[Hp - 248] = Hp - 848;
           P64[Hp - 240] = Hp - 824;
           P64[Hp - 232] = Hp - 800;
           P64[Hp - 224] = Hp - 776;
           P64[Hp - 216] = Hp - 752;
           P64[Hp - 208] = Hp - 728;
           P64[Hp - 200] = Hp - 704;
           P64[Hp - 192] = Hp - 680;
           P64[Hp - 184] = Hp - 656;
           P64[Hp - 176] = Hp - 632;
           P64[Hp - 168] = Hp - 608;
           P64[Hp - 160] = Hp - 584;
           P64[Hp - 152] = Hp - 560;
           P64[Hp - 144] = Hp - 536;
           P64[Hp - 136] = Hp - 512;
           P64[Hp - 128] = Hp - 488;
           P64[Hp - 120] = Hp - 464;
           P64[Hp - 112] = Hp - 440;
           P64[Hp - 104] = Hp - 416;
           P64[Hp - 96] = Hp - 392;
           P64[Hp - 88] = Hp - 368;
           I64[Hp - 80] = lvl151_s3yv1_info;
           P64[Hp - 72] = Hp - 343;
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 56] = Hp - 79;
           I64[Hp - 48] = sat_s3yvf_info;
           P64[Hp - 32] = _s3ytY::P64;
           I64[Hp - 24] = sat_s3yva_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3FcW_srtd" {
     u3FcW_srtd:
         const S3yFW_srt+232;
         const 125;
         const 18031990695526401;
         const 2233785415175766016;
 },
 sat_s3yvh_entry() //  [R1]
         { info_tbl: [(c3Fc1,
                       label: sat_s3yvh_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fc1: // global
           _s3yvh::P64 = R1;
           if ((Sp + -88) < SpLim) (likely: False) goto c3Fc2; else goto c3Fc3;
       c3Fc3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fc5; else goto c3Fc4;
       c3Fc5: // global
           HpAlloc = 16;
           goto c3Fc2;
       c3Fc2: // global
           R1 = _s3yvh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fc4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvh::P64;
           _s3ytY::P64 = P64[_s3yvh::P64 + 16];
           _s3ytZ::P64 = P64[_s3yvh::P64 + 24];
           _s3yu0::P64 = P64[_s3yvh::P64 + 32];
           _s3yu1::P64 = P64[_s3yvh::P64 + 40];
           _s3yu2::P64 = P64[_s3yvh::P64 + 48];
           _s3yu3::P64 = P64[_s3yvh::P64 + 56];
           _s3yu4::P64 = P64[_s3yvh::P64 + 64];
           _s3yu5::P64 = P64[_s3yvh::P64 + 72];
           I64[Hp - 8] = sat_s3yuv_info;
           P64[Hp] = _s3ytY::P64;
           I64[Sp - 88] = block_c3F7n_info;
           R4 = Hp - 7;
           R3 = lvl113_r3yd3_closure+1;
           R2 = lvl112_r3yd2_closure+1;
           P64[Sp - 80] = _s3ytY::P64;
           P64[Sp - 72] = _s3ytZ::P64;
           P64[Sp - 64] = _s3yu0::P64;
           P64[Sp - 56] = _s3yu1::P64;
           P64[Sp - 48] = _s3yu2::P64;
           P64[Sp - 40] = _s3yu3::P64;
           P64[Sp - 32] = _s3yu4::P64;
           P64[Sp - 24] = _s3yu5::P64;
           Sp = Sp - 88;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3F7n() //  [R1]
         { info_tbl: [(c3F7n,
                       label: block_c3F7n_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3F7n: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Fc8; else goto c3Fc7;
       c3Fc8: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Fc7: // global
           I64[Hp - 88] = sat_s3yvg_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 88;
           R2 = Hp - 6;
           Sp = Sp + 72;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yud_entry() //  [R1, R2]
         { info_tbl: [(c3Fch,
                       label: sat_s3yud_info
                       rep:HeapRep 10 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fch: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3Fci; else goto c3Fcj;
       c3Fci: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fcj: // global
           I64[Sp - 88] = block_c3Fce_info;
           _s3ytZ::P64 = P64[R1 + 7];
           _s3yu0::P64 = P64[R1 + 15];
           _s3yu1::P64 = P64[R1 + 23];
           _s3yu2::P64 = P64[R1 + 31];
           _s3yu3::P64 = P64[R1 + 39];
           _s3yu4::P64 = P64[R1 + 47];
           _s3yu5::P64 = P64[R1 + 55];
           _s3yu6::P64 = P64[R1 + 63];
           _s3yu7::P64 = P64[R1 + 71];
           _s3yu8::P64 = P64[R1 + 79];
           R1 = R2;
           P64[Sp - 80] = _s3ytZ::P64;
           P64[Sp - 72] = _s3yu0::P64;
           P64[Sp - 64] = _s3yu1::P64;
           P64[Sp - 56] = _s3yu2::P64;
           P64[Sp - 48] = _s3yu3::P64;
           P64[Sp - 40] = _s3yu4::P64;
           P64[Sp - 32] = _s3yu5::P64;
           P64[Sp - 24] = _s3yu6::P64;
           P64[Sp - 16] = _s3yu7::P64;
           P64[Sp - 8] = _s3yu8::P64;
           Sp = Sp - 88;
           if (R1 & 7 != 0) goto u3FcN; else goto c3Fcf;
       u3FcN: // global
           call _c3Fce(R1) args: 0, res: 0, upd: 0;
       c3Fcf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Fce() //  [R1]
         { info_tbl: [(c3Fce,
                       label: block_c3Fce_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fce: // global
           _s3yuc::I64 = I64[R1 + 7];
           if (_s3yuc::I64 < 99) goto u3FcA; else goto u3FcG;
       u3FcA: // global
           if (_s3yuc::I64 < 97) goto u3FcB; else goto u3FcF;
       u3FcB: // global
           if (_s3yuc::I64 < 40) goto u3FcC; else goto u3FcE;
       u3FcC: // global
           if (_s3yuc::I64 < 39) goto u3FcD; else goto c3Fcr;
       u3FcD: // global
           if (_s3yuc::I64 != 34) goto c3Fcp; else goto c3Fcq;
       c3Fcq: // global
           R1 = P64[Sp + 80] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fcr: // global
           R1 = P64[Sp + 72] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FcE: // global
           if (_s3yuc::I64 != 92) goto c3Fcp; else goto c3Fcs;
       c3Fcs: // global
           R1 = P64[Sp + 64] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FcF: // global
           if (_s3yuc::I64 < 98) goto c3Fct; else goto c3Fcu;
       c3Fct: // global
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fcu: // global
           R1 = P64[Sp + 48] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FcG: // global
           if (_s3yuc::I64 < 116) goto u3FcH; else goto u3FcL;
       u3FcH: // global
           if (_s3yuc::I64 < 111) goto u3FcI; else goto u3FcK;
       u3FcI: // global
           if (_s3yuc::I64 < 110) goto u3FcJ; else goto c3Fcw;
       u3FcJ: // global
           if (_s3yuc::I64 != 102) goto c3Fcp; else goto c3Fcv;
       c3Fcv: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fcw: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FcK: // global
           if (_s3yuc::I64 != 114) goto c3Fcp; else goto c3Fcx;
       c3Fcx: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FcL: // global
           if (_s3yuc::I64 < 117) goto c3Fcy; else goto u3FcM;
       c3Fcy: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FcM: // global
           if (_s3yuc::I64 != 118) goto c3Fcp; else goto c3Fcz;
       c3Fcp: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Fcz: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FcX_srtd" {
     u3FcX_srtd:
         const S3yFW_srt+232;
         const 126;
         const 18031990695526401;
         const 4539628424389459968;
 },
 Text.Read.Lex.lexChar2_entry() //  [R2]
         { info_tbl: [(c3FcP,
                       label: Text.Read.Lex.lexChar2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FcP: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto c3FcT; else goto c3FcS;
       c3FcT: // global
           HpAlloc = 424;
           R2 = R2;
           R1 = Text.Read.Lex.lexChar2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FcS: // global
           I64[Hp - 416] = lvl116_s3ytZ_info;
           P64[Hp - 400] = R2;
           I64[Hp - 392] = lvl117_s3yu0_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = lvl118_s3yu1_info;
           P64[Hp - 352] = R2;
           I64[Hp - 344] = lvl119_s3yu2_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = lvl120_s3yu3_info;
           P64[Hp - 304] = R2;
           I64[Hp - 296] = lvl121_s3yu4_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = lvl122_s3yu5_info;
           P64[Hp - 256] = R2;
           I64[Hp - 248] = lvl123_s3yu6_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = lvl124_s3yu7_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = lvl125_s3yu8_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s3yvh_info;
           P64[Hp - 160] = R2;
           _c3F4O::P64 = Hp - 416;
           P64[Hp - 152] = _c3F4O::P64;
           _c3F4V::P64 = Hp - 392;
           P64[Hp - 144] = _c3F4V::P64;
           _c3F52::P64 = Hp - 368;
           P64[Hp - 136] = _c3F52::P64;
           _c3F59::P64 = Hp - 344;
           P64[Hp - 128] = _c3F59::P64;
           _c3F5g::P64 = Hp - 320;
           P64[Hp - 120] = _c3F5g::P64;
           _c3F5n::P64 = Hp - 296;
           P64[Hp - 112] = _c3F5n::P64;
           _c3F5u::P64 = Hp - 272;
           P64[Hp - 104] = _c3F5u::P64;
           I64[Hp - 96] = sat_s3yud_info;
           P64[Hp - 88] = _c3F4O::P64;
           P64[Hp - 80] = _c3F4V::P64;
           P64[Hp - 72] = _c3F52::P64;
           P64[Hp - 64] = _c3F59::P64;
           P64[Hp - 56] = _c3F5g::P64;
           P64[Hp - 48] = _c3F5n::P64;
           P64[Hp - 40] = _c3F5u::P64;
           P64[Hp - 32] = Hp - 248;
           P64[Hp - 24] = Hp - 224;
           P64[Hp - 16] = Hp - 200;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 95;
           R3 = Hp - 176;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.965794338 UTC

[section ""cstring" . Text.Read.Lex.lexChar4_bytes" {
     Text.Read.Lex.lexChar4_bytes:
         I8[] [92,38]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.967829864 UTC

[section ""data" . Text.Read.Lex.lexChar3_closure" {
     Text.Read.Lex.lexChar3_closure:
         const Text.Read.Lex.lexChar3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.lexChar3_entry() //  [R1]
         { info_tbl: [(c3FiX,
                       label: Text.Read.Lex.lexChar3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FiX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FiY; else goto c3FiZ;
       c3FiY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FiZ: // global
           (_c3FiU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3FiU::I64 == 0) goto c3FiW; else goto c3FiV;
       c3FiW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3FiV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3FiU::I64;
           R2 = Text.Read.Lex.lexChar4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:13.974438562 UTC

[section ""data" . Text.Read.Lex.$wlvl_closure" {
     Text.Read.Lex.$wlvl_closure:
         const Text.Read.Lex.$wlvl_info;
         const 0;
 },
 lvl116_s3yvj_entry() //  [R1]
         { info_tbl: [(c3Fji,
                       label: lvl116_s3yvj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fji: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Fjj; else goto c3Fjk;
       c3Fjj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fjk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Fjf_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wconsumeEmpties_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Fjf() //  [R1]
         { info_tbl: [(c3Fjf,
                       label: block_c3Fjf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fjf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fjn; else goto c3Fjm;
       c3Fjn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Fjm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yvn_entry() //  [R1]
         { info_tbl: [(c3Fjt,
                       label: sat_s3yvn_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fjt: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wlvl_entry() //  [R2]
         { info_tbl: [(c3Fjw,
                       label: Text.Read.Lex.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fjw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3FjA; else goto c3Fjz;
       c3FjA: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Text.Read.Lex.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fjz: // global
           I64[Hp - 32] = lvl116_s3yvj_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3yvn_info;
           P64[Hp] = Hp - 32;
           R3 = Hp - 7;
           R2 = Text.Read.Lex.lexChar3_closure;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Text.Read.Lex.$wconsumeEmpties_closure" {
     Text.Read.Lex.$wconsumeEmpties_closure:
         const Text.Read.Lex.$wconsumeEmpties_info;
         const 0;
 },
 lvl116_s3yvp_entry() //  [R1]
         { info_tbl: [(c3FjM,
                       label: lvl116_s3yvp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FjM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3FjN; else goto c3FjO;
       c3FjN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FjO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3FjJ_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3FjJ() //  [R1]
         { info_tbl: [(c3FjJ,
                       label: block_c3FjJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FjJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FjR; else goto c3FjQ;
       c3FjR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3FjQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3yvs_entry() //  [R1]
         { info_tbl: [(c3FjW,
                       label: lvl117_s3yvs_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FjW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FjX; else goto c3FjY;
       c3FjX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FjY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yvG_entry() //  [R1, R2]
         { info_tbl: [(c3Fkb,
                       label: sat_s3yvG_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fkb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Fkc; else goto c3Fkd;
       c3Fkc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fkd: // global
           I64[Sp - 24] = block_c3Fk4_info;
           _s3yvp::P64 = P64[R1 + 7];
           _s3yvs::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yvp::P64;
           P64[Sp - 8] = _s3yvs::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3FkZ; else goto c3Fk5;
       u3FkZ: // global
           call _c3Fk4(R1) args: 0, res: 0, upd: 0;
       c3Fk5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Fk4() //  [R1]
         { info_tbl: [(c3Fk4,
                       label: block_c3Fk4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fk4: // global
           if (R1 & 7 == 1) goto u3FkT; else goto c3Fk9;
       u3FkT: // global
           Sp = Sp + 16;
           call _c3FkQ() args: 0, res: 0, upd: 0;
       c3Fk9: // global
           I64[Sp - 8] = block_c3Fkj_info;
           _s3yvw::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3yvw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3FkX; else goto c3Fkl;
       u3FkX: // global
           call _c3Fkj(R1) args: 0, res: 0, upd: 0;
       c3Fkl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Fkj() //  [R1]
         { info_tbl: [(c3Fkj,
                       label: block_c3Fkj_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fkj: // global
           if (I64[R1 + 7] == 92) goto c3Fkw; else goto u3FkU;
       c3Fkw: // global
           _s3yvw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Fkv_info;
           R1 = _s3yvw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Fl0; else goto c3Fkx;
       u3Fl0: // global
           call _c3Fkv(R1) args: 0, res: 0, upd: 0;
       c3Fkx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3FkU: // global
           Sp = Sp + 24;
           call _c3FkQ() args: 0, res: 0, upd: 0;
     }
 },
 _c3Fkv() //  [R1]
         { info_tbl: [(c3Fkv,
                       label: block_c3Fkv_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fkv: // global
           if (R1 & 7 == 1) goto u3FkV; else goto c3FkI;
       u3FkV: // global
           Sp = Sp + 16;
           call _c3FkQ() args: 0, res: 0, upd: 0;
       c3FkI: // global
           I64[Sp] = block_c3FkG_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3Fl2; else goto c3FkJ;
       u3Fl2: // global
           call _c3FkG(R1) args: 0, res: 0, upd: 0;
       c3FkJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FkG() //  [R1]
         { info_tbl: [(c3FkG,
                       label: block_c3FkG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FkG: // global
           if (I64[R1 + 7] == 38) goto c3FkR; else goto u3FkW;
       c3FkR: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3FkW: // global
           Sp = Sp + 16;
           call _c3FkQ() args: 0, res: 0, upd: 0;
     }
 },
 _c3FkQ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FkQ: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wconsumeEmpties_entry() //  [R2]
         { info_tbl: [(c3Fl5,
                       label: Text.Read.Lex.$wconsumeEmpties_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fl5: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Fl9; else goto c3Fl8;
       c3Fl9: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Text.Read.Lex.$wconsumeEmpties_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fl8: // global
           I64[Hp - 64] = lvl116_s3yvp_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl117_s3yvs_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3yvG_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.004330337 UTC

[section ""data" . Text.Read.Lex.lexChar5_closure" {
     Text.Read.Lex.lexChar5_closure:
         const Text.Read.Lex.lexChar5_info;
         const 0;
 },
 Text.Read.Lex.lexChar5_entry() //  [R2]
         { info_tbl: [(c3Fmm,
                       label: Text.Read.Lex.lexChar5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fmm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Fmn; else goto c3Fmo;
       c3Fmn: // global
           R2 = R2;
           R1 = Text.Read.Lex.lexChar5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fmo: // global
           I64[Sp - 8] = block_c3Fmj_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wconsumeEmpties_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Fmj() //  [R1]
         { info_tbl: [(c3Fmj,
                       label: block_c3Fmj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fmj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fmr; else goto c3Fmq;
       c3Fmr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Fmq: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.01349232 UTC

[section ""data" . Text.Read.Lex.$wlexChar_closure" {
     Text.Read.Lex.$wlexChar_closure:
         const Text.Read.Lex.$wlexChar_info;
         const 0;
 },
 sat_s3yvU_entry() //  [R1]
         { info_tbl: [(c3Fn3,
                       label: sat_s3yvU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fn3: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl118_s3yvS_entry() //  [R1]
         { info_tbl: [(c3Fn9,
                       label: lvl118_s3yvS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fn9: // global
           _s3yvS::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Fna; else goto c3Fnb;
       c3Fnb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fnd; else goto c3Fnc;
       c3Fnd: // global
           HpAlloc = 16;
           goto c3Fna;
       c3Fna: // global
           R1 = _s3yvS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fnc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvS::P64;
           _s3yvR::P64 = P64[_s3yvS::P64 + 16];
           I64[Hp - 8] = sat_s3yvU_info;
           P64[Hp] = _s3yvR::P64;
           I64[Sp - 24] = block_c3Fn6_info;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Fn6() //  [R1]
         { info_tbl: [(c3Fn6,
                       label: block_c3Fn6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fn6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fng; else goto c3Fnf;
       c3Fng: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Fnf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ywa_entry() //  [R1, R2]
         { info_tbl: [(c3Fnt,
                       label: sat_s3ywa_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fnt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Fnu; else goto c3Fnv;
       c3Fnu: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fnv: // global
           I64[Sp - 24] = block_c3Fnm_info;
           _s3yvR::P64 = P64[R1 + 7];
           _s3yvS::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yvR::P64;
           P64[Sp - 8] = _s3yvS::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Foh; else goto c3Fnn;
       u3Foh: // global
           call _c3Fnm(R1) args: 0, res: 0, upd: 0;
       c3Fnn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Fnm() //  [R1]
         { info_tbl: [(c3Fnm,
                       label: block_c3Fnm_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fnm: // global
           if (R1 & 7 == 1) goto u3Fob; else goto c3Fnr;
       u3Fob: // global
           Sp = Sp + 8;
           call _c3Fo8() args: 0, res: 0, upd: 0;
       c3Fnr: // global
           I64[Sp - 8] = block_c3FnB_info;
           _s3yw0::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3yw0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Fof; else goto c3FnD;
       u3Fof: // global
           call _c3FnB(R1) args: 0, res: 0, upd: 0;
       c3FnD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FnB() //  [R1]
         { info_tbl: [(c3FnB,
                       label: block_c3FnB_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FnB: // global
           if (I64[R1 + 7] == 92) goto c3FnO; else goto u3Foc;
       c3FnO: // global
           _s3yw0::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3FnN_info;
           R1 = _s3yw0::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Foi; else goto c3FnP;
       u3Foi: // global
           call _c3FnN(R1) args: 0, res: 0, upd: 0;
       c3FnP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Foc: // global
           Sp = Sp + 16;
           call _c3Fo8() args: 0, res: 0, upd: 0;
     }
 },
 _c3FnN() //  [R1]
         { info_tbl: [(c3FnN,
                       label: block_c3FnN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FnN: // global
           if (R1 & 7 == 1) goto u3Fod; else goto c3Fo0;
       u3Fod: // global
           Sp = Sp + 8;
           call _c3Fo8() args: 0, res: 0, upd: 0;
       c3Fo0: // global
           I64[Sp] = block_c3FnY_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3Fok; else goto c3Fo1;
       u3Fok: // global
           call _c3FnY(R1) args: 0, res: 0, upd: 0;
       c3Fo1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FnY() //  [R1]
         { info_tbl: [(c3FnY,
                       label: block_c3FnY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FnY: // global
           if (I64[R1 + 7] == 38) goto c3Fo9; else goto u3Foe;
       c3Fo9: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Foe: // global
           Sp = Sp + 8;
           call _c3Fo8() args: 0, res: 0, upd: 0;
     }
 },
 _c3Fo8() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fo8: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k_s3yvM_entry() //  [R1, R2]
         { info_tbl: [(c3Fon,
                       label: k_s3yvM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fon: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fop; else goto c3Foq;
       c3Fop: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Foq: // global
           I64[Sp - 16] = block_c3FmO_info;
           _s3yvK::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yvK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Fou; else goto c3FmP;
       u3Fou: // global
           call _c3FmO(R1) args: 0, res: 0, upd: 0;
       c3FmP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FmO() //  [R1]
         { info_tbl: [(c3FmO,
                       label: block_c3FmO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FmO: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Fot; else goto c3Fos;
       c3Fot: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Fos: // global
           _s3yvP::P64 = P64[R1 + 7];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _s3yvP::P64;
           I64[Hp - 56] = lvl118_s3yvS_info;
           _c3FmT::P64 = Hp - 88;
           P64[Hp - 40] = _c3FmT::P64;
           I64[Hp - 32] = sat_s3ywa_info;
           P64[Hp - 24] = _c3FmT::P64;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yvL_entry() //  [R1]
         { info_tbl: [(c3Fov,
                       label: lvl116_s3yvL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fov: // global
           _s3yvL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fow; else goto c3Fox;
       c3Fox: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Foz; else goto c3Foy;
       c3Foz: // global
           HpAlloc = 16;
           goto c3Fow;
       c3Fow: // global
           R1 = _s3yvL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Foy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yvL::P64;
           _s3yvK::P64 = P64[_s3yvL::P64 + 16];
           I64[Hp - 8] = k_s3yvM_info;
           P64[Hp] = _s3yvK::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ywi_entry() //  [R1]
         { info_tbl: [(c3FoW,
                       label: sat_s3ywi_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FoW: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl118_s3ywg_entry() //  [R1]
         { info_tbl: [(c3Fp2,
                       label: lvl118_s3ywg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fp2: // global
           _s3ywg::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Fp3; else goto c3Fp4;
       c3Fp4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fp6; else goto c3Fp5;
       c3Fp6: // global
           HpAlloc = 16;
           goto c3Fp3;
       c3Fp3: // global
           R1 = _s3ywg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fp5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ywg::P64;
           _s3ywf::P64 = P64[_s3ywg::P64 + 16];
           I64[Hp - 8] = sat_s3ywi_info;
           P64[Hp] = _s3ywf::P64;
           I64[Sp - 24] = block_c3FoZ_info;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3FoZ() //  [R1]
         { info_tbl: [(c3FoZ,
                       label: block_c3FoZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FoZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Fp9; else goto c3Fp8;
       c3Fp9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Fp8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ywy_entry() //  [R1, R2]
         { info_tbl: [(c3Fpm,
                       label: sat_s3ywy_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fpm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Fpn; else goto c3Fpo;
       c3Fpn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fpo: // global
           I64[Sp - 24] = block_c3Fpf_info;
           _s3ywf::P64 = P64[R1 + 7];
           _s3ywg::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ywf::P64;
           P64[Sp - 8] = _s3ywg::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Fqa; else goto c3Fpg;
       u3Fqa: // global
           call _c3Fpf(R1) args: 0, res: 0, upd: 0;
       c3Fpg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Fpf() //  [R1]
         { info_tbl: [(c3Fpf,
                       label: block_c3Fpf_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fpf: // global
           if (R1 & 7 == 1) goto u3Fq4; else goto c3Fpk;
       u3Fq4: // global
           Sp = Sp + 8;
           call _c3Fq1() args: 0, res: 0, upd: 0;
       c3Fpk: // global
           I64[Sp - 8] = block_c3Fpu_info;
           _s3ywo::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3ywo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Fq8; else goto c3Fpw;
       u3Fq8: // global
           call _c3Fpu(R1) args: 0, res: 0, upd: 0;
       c3Fpw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Fpu() //  [R1]
         { info_tbl: [(c3Fpu,
                       label: block_c3Fpu_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fpu: // global
           if (I64[R1 + 7] == 92) goto c3FpH; else goto u3Fq5;
       c3FpH: // global
           _s3ywo::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3FpG_info;
           R1 = _s3ywo::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Fqb; else goto c3FpI;
       u3Fqb: // global
           call _c3FpG(R1) args: 0, res: 0, upd: 0;
       c3FpI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Fq5: // global
           Sp = Sp + 16;
           call _c3Fq1() args: 0, res: 0, upd: 0;
     }
 },
 _c3FpG() //  [R1]
         { info_tbl: [(c3FpG,
                       label: block_c3FpG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FpG: // global
           if (R1 & 7 == 1) goto u3Fq6; else goto c3FpT;
       u3Fq6: // global
           Sp = Sp + 8;
           call _c3Fq1() args: 0, res: 0, upd: 0;
       c3FpT: // global
           I64[Sp] = block_c3FpR_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3Fqd; else goto c3FpU;
       u3Fqd: // global
           call _c3FpR(R1) args: 0, res: 0, upd: 0;
       c3FpU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FpR() //  [R1]
         { info_tbl: [(c3FpR,
                       label: block_c3FpR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FpR: // global
           if (I64[R1 + 7] == 38) goto c3Fq2; else goto u3Fq7;
       c3Fq2: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Fq7: // global
           Sp = Sp + 8;
           call _c3Fq1() args: 0, res: 0, upd: 0;
     }
 },
 _c3Fq1() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fq1: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ywz_entry() //  [R1, R2]
         { info_tbl: [(c3Fqg,
                       label: sat_s3ywz_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fqg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Fqh; else goto c3Fqi;
       c3Fqh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fqi: // global
           I64[Sp - 24] = block_c3FoF_info;
           _s3yvK::P64 = P64[R1 + 7];
           _s3yvL::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yvK::P64;
           P64[Sp - 8] = _s3yvL::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Fqq; else goto c3FoG;
       u3Fqq: // global
           call _c3FoF(R1) args: 0, res: 0, upd: 0;
       c3FoG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FoF() //  [R1]
         { info_tbl: [(c3FoF,
                       label: block_c3FoF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FoF: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Fql; else goto c3Fqk;
       c3Fql: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Fqk: // global
           if (I64[R1 + 7] == 92) goto c3Fqp; else goto c3Fqo;
       c3Fqp: // global
           Hp = Hp - 96;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fqo: // global
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = lvl118_s3ywg_info;
           _c3FoM::P64 = Hp - 88;
           P64[Hp - 40] = _c3FoM::P64;
           I64[Hp - 32] = sat_s3ywy_info;
           P64[Hp - 24] = _c3FoM::P64;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wlexChar_entry() //  [R2]
         { info_tbl: [(c3Fqr,
                       label: Text.Read.Lex.$wlexChar_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fqr: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Fqv; else goto c3Fqu;
       c3Fqv: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Text.Read.Lex.$wlexChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fqu: // global
           I64[Hp - 40] = lvl116_s3yvL_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3ywz_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.070155148 UTC

[section ""data" . Text.Read.Lex.lexChar1_closure" {
     Text.Read.Lex.lexChar1_closure:
         const Text.Read.Lex.lexChar1_info;
         const 0;
 },
 Text.Read.Lex.lexChar1_entry() //  [R2]
         { info_tbl: [(c3FsB,
                       label: Text.Read.Lex.lexChar1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FsB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3FsC; else goto c3FsD;
       c3FsC: // global
           R2 = R2;
           R1 = Text.Read.Lex.lexChar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FsD: // global
           I64[Sp - 8] = block_c3Fsy_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wlexChar_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Fsy() //  [R1]
         { info_tbl: [(c3Fsy,
                       label: block_c3Fsy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fsy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FsG; else goto c3FsF;
       c3FsG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FsF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.076094839 UTC

[section ""data" . Text.Read.Lex.lexChar_closure" {
     Text.Read.Lex.lexChar_closure:
         const Text.Read.Lex.lexChar_info;
         const 0;
 },
 Text.Read.Lex.lexChar_entry() //  [R2]
         { info_tbl: [(c3FsU,
                       label: Text.Read.Lex.lexChar_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FsU: // global
           R2 = R2;
           call Text.Read.Lex.lexChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.082554591 UTC

[section ""data" . lexStrItem_r3yd4_closure" {
     lexStrItem_r3yd4_closure:
         const lexStrItem_r3yd4_info;
         const 0;
 },
 lvl116_s3ywE_entry() //  [R1]
         { info_tbl: [(c3Ft9,
                       label: lvl116_s3ywE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ft9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fta; else goto c3Ftb;
       c3Fta: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ftb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call lexStrItem_r3yd4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3ywF_entry() //  [R1, R2]
         { info_tbl: [(c3Ftk,
                       label: lvl117_s3ywF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ftk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ftl; else goto c3Ftm;
       c3Ftl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ftm: // global
           I64[Sp - 16] = block_c3Fth_info;
           _s3ywE::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ywE::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Ftu; else goto c3Fti;
       u3Ftu: // global
           call _c3Fth(R1) args: 0, res: 0, upd: 0;
       c3Fti: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Fth() //  [R1]
         { info_tbl: [(c3Fth,
                       label: block_c3Fth_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fth: // global
           if (I64[R1 + 7] == 92) goto c3Ftt; else goto c3Fts;
       c3Ftt: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fts: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k1_s3ywL_entry() //  [R1]
         { info_tbl: [(c3FtB,
                       label: k1_s3ywL_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FtB: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl119_s3ywN_entry() //  [R1, R2]
         { info_tbl: [(c3FtJ,
                       label: lvl119_s3ywN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FtJ: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl1_s3ywP_entry() //  [R1, R2]
         { info_tbl: [(c3FtV,
                       label: $wlvl1_s3ywP_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FtV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FtZ; else goto c3FtY;
       c3FtZ: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FtY: // global
           if (R2 == 38) goto c3FtU; else goto c3FtT;
       c3FtU: // global
           _s3ywE::P64 = P64[R1 + 7];
           Hp = Hp - 16;
           R1 = _s3ywE::P64 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FtT: // global
           _s3ywN::P64 = P64[R1 + 15];
           if (R2 > 887) goto c3Fum; else goto c3FuN;
       c3Fum: // global
           (_s3ywZ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(R2);
           if (_s3ywZ::I64 == 0) goto c3Fuy; else goto c3Fuj;
       c3Fuj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FuN: // global
           if (R2 == 32) goto c3FuM; else goto c3FuJ;
       c3FuM: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FuJ: // global
           if ((R2 + -9) > 4) goto c3FuE; else goto c3FuH;
       c3FuE: // global
           if (R2 != 160) goto c3Fuy; else goto c3FuC;
       c3Fuy: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FuC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FuH: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3ywN::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl120_s3yx5_entry() //  [R1, R2]
         { info_tbl: [(c3FuW,
                       label: lvl120_s3yx5_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FuW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FuX; else goto c3FuY;
       c3FuX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FuY: // global
           I64[Sp - 16] = block_c3FuT_info;
           _s3ywP::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ywP::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Fv2; else goto c3FuU;
       u3Fv2: // global
           call _c3FuT(R1) args: 0, res: 0, upd: 0;
       c3FuU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FuT() //  [R1]
         { info_tbl: [(c3FuT,
                       label: block_c3FuT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FuT: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wlvl1_s3ywP_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl122_s3yxa_entry() //  [R1]
         { info_tbl: [(c3Fv8,
                       label: lvl122_s3yxa_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fv8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fv9; else goto c3Fva;
       c3Fv9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fva: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yxm_entry() //  [R1, R2]
         { info_tbl: [(c3Fvj,
                       label: sat_s3yxm_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fvj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Fvk; else goto c3Fvl;
       c3Fvk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fvl: // global
           I64[Sp - 24] = block_c3Fvg_info;
           _s3ywD::P64 = P64[R1 + 7];
           _s3yxa::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3ywD::P64;
           P64[Sp - 8] = _s3yxa::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Fvx; else goto c3Fvh;
       u3Fvx: // global
           call _c3Fvg(R1) args: 0, res: 0, upd: 0;
       c3Fvh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Fvg() //  [R1]
         { info_tbl: [(c3Fvg,
                       label: block_c3Fvg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fvg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Fvq; else goto c3Fvp;
       c3Fvq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Fvp: // global
           if (I64[R1 + 7] == 92) goto c3Fvw; else goto c3Fvv;
       c3Fvw: // global
           Hp = Hp - 24;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Fvv: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = Hp - 15;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yxf_entry() //  [R1, R2]
         { info_tbl: [(c3FvH,
                       label: sat_s3yxf_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FvH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FvI; else goto c3FvJ;
       c3FvI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FvJ: // global
           I64[Sp - 16] = block_c3FvE_info;
           _s3yx9::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yx9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FvR; else goto c3FvF;
       u3FvR: // global
           call _c3FvE(R1) args: 0, res: 0, upd: 0;
       c3FvF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FvE() //  [R1]
         { info_tbl: [(c3FvE,
                       label: block_c3FvE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FvE: // global
           if (I64[R1 + 7] == 92) goto c3FvQ; else goto c3FvP;
       c3FvQ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FvP: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lexStrItem_r3yd4_entry() //  [R2]
         { info_tbl: [(c3FvT,
                       label: lexStrItem_r3yd4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FvT: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto c3FvX; else goto c3FvW;
       c3FvX: // global
           HpAlloc = 240;
           R2 = R2;
           R1 = lexStrItem_r3yd4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FvW: // global
           I64[Hp - 232] = lvl116_s3ywE_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = lvl117_s3ywF_info;
           _c3Ft5::P64 = Hp - 232;
           P64[Hp - 200] = _c3Ft5::P64;
           I64[Hp - 192] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 184] = Hp - 207;
           I64[Hp - 176] = k1_s3ywL_info;
           P64[Hp - 168] = Hp - 191;
           I64[Hp - 160] = lvl119_s3ywN_info;
           P64[Hp - 152] = Hp - 175;
           I64[Hp - 144] = $wlvl1_s3ywP_info;
           P64[Hp - 136] = _c3Ft5::P64;
           P64[Hp - 128] = Hp - 159;
           I64[Hp - 120] = lvl120_s3yx5_info;
           P64[Hp - 112] = Hp - 143;
           I64[Hp - 104] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 96] = Hp - 119;
           I64[Hp - 88] = lvl122_s3yxa_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s3yxm_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = sat_s3yxf_info;
           P64[Hp - 16] = Hp - 103;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 39;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.117988061 UTC

[section ""data" . body_r3yd5_closure" {
     body_r3yd5_closure:
         const body_r3yd5_info;
         const 0;
 },
 sat_s3yxr_entry() //  [R1]
         { info_tbl: [(c3Fxr,
                       label: sat_s3yxr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fxr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fxs; else goto c3Fxt;
       c3Fxs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fxt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl116_s3yxq_entry() //  [R1]
         { info_tbl: [(c3Fxv,
                       label: lvl116_s3yxq_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fxv: // global
           _s3yxq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Fxw; else goto c3Fxx;
       c3Fxx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Fxz; else goto c3Fxy;
       c3Fxz: // global
           HpAlloc = 40;
           goto c3Fxw;
       c3Fxw: // global
           R1 = _s3yxq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Fxy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yxq::P64;
           _s3yxo::P64 = P64[_s3yxq::P64 + 16];
           _s3yxp::P64 = P64[_s3yxq::P64 + 24];
           I64[Hp - 32] = sat_s3yxr_info;
           P64[Hp - 16] = _s3yxo::P64;
           I64[Hp - 8] = Text.Read.Lex.String_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           R1 = _s3yxp::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yxC_entry() //  [R1, R2]
         { info_tbl: [(c3Fy0,
                       label: sat_s3yxC_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fy0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Fy4; else goto c3Fy3;
       c3Fy4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fy3: // global
           _s3yxo::P64 = P64[R1 + 7];
           _s3yxx::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yxx::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3yxo::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yxF_entry() //  [R1, R2]
         { info_tbl: [(c3Fy5,
                       label: sat_s3yxF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fy5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Fy6; else goto c3Fy7;
       c3Fy6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Fy7: // global
           I64[Sp - 32] = block_c3FxF_info;
           _s3yxo::P64 = P64[R1 + 7];
           _s3yxp::P64 = P64[R1 + 15];
           _s3yxq::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3yxo::P64;
           P64[Sp - 16] = _s3yxp::P64;
           P64[Sp - 8] = _s3yxq::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3FyB; else goto c3FxG;
       u3FyB: // global
           call _c3FxF(R1) args: 0, res: 0, upd: 0;
       c3FxG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FxF() //  [R1]
         { info_tbl: [(c3FxF,
                       label: block_c3FxF_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FxF: // global
           I64[Sp - 8] = block_c3FxK_info;
           _s3yxw::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3yxw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Fyy; else goto c3FxL;
       u3Fyy: // global
           call _c3FxK(R1) args: 0, res: 0, upd: 0;
       c3FxL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FxK() //  [R1]
         { info_tbl: [(c3FxK,
                       label: block_c3FxK_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FxK: // global
           if (I64[R1 + 7] == 34) goto c3Fyj; else goto u3Fyw;
       c3Fyj: // global
           I64[Sp] = block_c3Fyi_info;
           _s3yxx::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3yxx::P64;
           if (R1 & 7 != 0) goto u3Fyz; else goto c3Fyk;
       u3Fyz: // global
           call _c3Fyi(R1) args: 0, res: 0, upd: 0;
       c3Fyk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Fyw: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3FxS() args: 0, res: 0, upd: 0;
     }
 },
 _c3Fyi() //  [R1]
         { info_tbl: [(c3Fyi,
                       label: block_c3Fyi_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Fyi: // global
           if (R1 & 7 == 1) goto c3Fyq; else goto u3Fyx;
       c3Fyq: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Fyx: // global
           P64[Sp + 32] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c3FxS() args: 0, res: 0, upd: 0;
     }
 },
 _c3FxS() //  []
         { info_tbl: [(c3FxS,
                       label: block_c3FxS_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FxS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Fyc; else goto c3Fyb;
       c3Fyc: // global
           HpAlloc = 24;
           I64[Sp] = block_c3FxS_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Fyb: // global
           I64[Hp - 16] = sat_s3yxC_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = Hp - 15;
           Sp = Sp + 32;
           call body_r3yd5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 body_r3yd5_entry() //  [R2, R3]
         { info_tbl: [(c3FyD,
                       label: body_r3yd5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FyD: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3FyH; else goto c3FyG;
       c3FyH: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = body_r3yd5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3FyG: // global
           I64[Hp - 56] = lvl116_s3yxq_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3yxF_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R2 = Hp - 23;
           call lexStrItem_r3yd4_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.142609601 UTC

[section ""data" . lexExp_r3yd6_closure" {
     lexExp_r3yd6_closure:
         const lexExp_r3yd6_info;
         const 0;
 },
 sat_s3yxP_entry() //  [R1]
         { info_tbl: [(c3FzO,
                       label: sat_s3yxP_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FzO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3FzP; else goto c3FzQ;
       c3FzP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FzQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3FzL_info;
           _s3yxK::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yxK::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3FA5; else goto c3FzM;
       u3FA5: // global
           call _c3FzL(R1) args: 0, res: 0, upd: 0;
       c3FzM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3FzL() //  [R1]
         { info_tbl: [(c3FzL,
                       label: block_c3FzL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FzL: // global
           _s3yxK::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 45) goto c3FA0; else goto c3FzW;
       c3FA0: // global
           I64[Sp + 8] = block_c3FzZ_info;
           R3 = _s3yxK::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 24;
       c3FzW: // global
           R3 = _s3yxK::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 _c3FzZ() //  [R1]
         { info_tbl: [(c3FzZ,
                       label: block_c3FzZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FzZ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yxR_entry() //  [R1, R2]
         { info_tbl: [(c3FA7,
                       label: sat_s3yxR_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FA7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3FAb; else goto c3FAa;
       c3FAb: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FAa: // global
           _s3yxG::P64 = P64[R1 + 7];
           _s3yxJ::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3yxP_info;
           P64[Hp - 24] = _s3yxJ::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 6;
           R1 = _s3yxG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FCr_srtd" {
     u3FCr_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 k1_s3yxI_entry() //  [R1, R2]
         { info_tbl: [(c3FAf,
                       label: k1_s3yxI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FAf: // global
           _s3yxJ::P64 = R2;
           _s3yxI::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3FAg; else goto c3FAh;
       c3FAh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FAj; else goto c3FAi;
       c3FAj: // global
           HpAlloc = 24;
           goto c3FAg;
       c3FAg: // global
           R2 = _s3yxJ::P64;
           R1 = _s3yxI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FAi: // global
           _s3yxG::P64 = P64[_s3yxI::P64 + 7];
           I64[Hp - 16] = sat_s3yxR_info;
           P64[Hp - 8] = _s3yxG::P64;
           P64[Hp] = _s3yxJ::P64;
           I64[Sp - 8] = block_c3FAc_info;
           R3 = Hp - 15;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 8;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3FAc() //  [R1]
         { info_tbl: [(c3FAc,
                       label: block_c3FAc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FAc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FAm; else goto c3FAl;
       c3FAm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FAl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yy8_entry() //  [R1]
         { info_tbl: [(c3FAA,
                       label: sat_s3yy8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FAA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FAB; else goto c3FAC;
       c3FAB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FAC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yya_entry() //  [R1, R2]
         { info_tbl: [(c3FAE,
                       label: sat_s3yya_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FAE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3FAI; else goto c3FAH;
       c3FAI: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FAH: // global
           _s3yxG::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_s3yy8_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           R1 = _s3yxG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FCs_srtd" {
     u3FCs_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3yyd_entry() //  [R1]
         { info_tbl: [(c3FAM,
                       label: sat_s3yyd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FAM: // global
           _s3yyd::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3FAN; else goto c3FAO;
       c3FAO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FAQ; else goto c3FAP;
       c3FAQ: // global
           HpAlloc = 16;
           goto c3FAN;
       c3FAN: // global
           R1 = _s3yyd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FAP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yyd::P64;
           _s3yxG::P64 = P64[_s3yyd::P64 + 16];
           I64[Hp - 8] = sat_s3yya_info;
           P64[Hp] = _s3yxG::P64;
           I64[Sp - 24] = block_c3FAJ_info;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3FAJ() //  [R1]
         { info_tbl: [(c3FAJ,
                       label: block_c3FAJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FAJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FAT; else goto c3FAS;
       c3FAT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3FAS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3FCt_srtd" {
     u3FCt_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3yy4_entry() //  [R1, R2]
         { info_tbl: [(c3FB2,
                       label: sat_s3yy4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FB2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FB3; else goto c3FB4;
       c3FB3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FB4: // global
           I64[Sp - 16] = block_c3FAZ_info;
           _s3yxI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FBc; else goto c3FB0;
       u3FBc: // global
           call _c3FAZ(R1) args: 0, res: 0, upd: 0;
       c3FB0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3FCu_srtd" {
     u3FCu_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 _c3FAZ() //  [R1]
         { info_tbl: [(c3FAZ,
                       label: block_c3FAZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FAZ: // global
           if (I64[R1 + 7] == 43) goto c3FBb; else goto c3FBa;
       c3FBb: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call k1_s3yxI_entry(R2, R1) args: 8, res: 0, upd: 8;
       c3FBa: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FCv_srtd" {
     u3FCv_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3yxY_entry() //  [R1, R2]
         { info_tbl: [(c3FBm,
                       label: sat_s3yxY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FBm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FBn; else goto c3FBo;
       c3FBn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FBo: // global
           I64[Sp - 16] = block_c3FBj_info;
           _s3yxI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FBw; else goto c3FBk;
       u3FBw: // global
           call _c3FBj(R1) args: 0, res: 0, upd: 0;
       c3FBk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3FCw_srtd" {
     u3FCw_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 _c3FBj() //  [R1]
         { info_tbl: [(c3FBj,
                       label: block_c3FBj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FBj: // global
           if (I64[R1 + 7] == 45) goto c3FBv; else goto c3FBu;
       c3FBv: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call k1_s3yxI_entry(R2, R1) args: 8, res: 0, upd: 8;
       c3FBu: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FCx_srtd" {
     u3FCx_srtd:
         const S3yFW_srt+584;
         const 92;
         const 1;
         const 201392128;
 },
 lvl116_s3yxH_entry() //  [R1]
         { info_tbl: [(c3FBA,
                       label: lvl116_s3yxH_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FBA: // global
           _s3yxH::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3FBB; else goto c3FBC;
       c3FBC: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3FBE; else goto c3FBD;
       c3FBE: // global
           HpAlloc = 104;
           goto c3FBB;
       c3FBB: // global
           R1 = _s3yxH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FBD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yxH::P64;
           _s3yxG::P64 = P64[_s3yxH::P64 + 16];
           I64[Hp - 96] = k1_s3yxI_info;
           P64[Hp - 88] = _s3yxG::P64;
           I64[Hp - 80] = sat_s3yyd_info;
           P64[Hp - 64] = _s3yxG::P64;
           I64[Hp - 56] = sat_s3yy4_info;
           _c3Fzx::P64 = Hp - 95;
           P64[Hp - 48] = _c3Fzx::P64;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = sat_s3yxY_info;
           P64[Hp - 16] = _c3Fzx::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 32] = block_c3FBy_info;
           R3 = Hp - 39;
           R2 = Hp - 7;
           P64[Sp - 24] = Hp - 80;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3FBy() //  [R1]
         { info_tbl: [(c3FBy,
                       label: block_c3FBy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FBy: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yyo_entry() //  [R1, R2]
         { info_tbl: [(c3FBQ,
                       label: sat_s3yyo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FBQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FBR; else goto c3FBS;
       c3FBR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FBS: // global
           I64[Sp - 16] = block_c3FBN_info;
           _s3yxH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FC0; else goto c3FBO;
       u3FC0: // global
           call _c3FBN(R1) args: 0, res: 0, upd: 0;
       c3FBO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FBN() //  [R1]
         { info_tbl: [(c3FBN,
                       label: block_c3FBN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FBN: // global
           if (I64[R1 + 7] == 69) goto c3FBZ; else goto c3FBY;
       c3FBZ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FBY: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yyi_entry() //  [R1, R2]
         { info_tbl: [(c3FCa,
                       label: sat_s3yyi_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FCa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FCb; else goto c3FCc;
       c3FCb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FCc: // global
           I64[Sp - 16] = block_c3FC7_info;
           _s3yxH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yxH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FCk; else goto c3FC8;
       u3FCk: // global
           call _c3FC7(R1) args: 0, res: 0, upd: 0;
       c3FC8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FC7() //  [R1]
         { info_tbl: [(c3FC7,
                       label: block_c3FC7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FC7: // global
           if (I64[R1 + 7] == 101) goto c3FCj; else goto c3FCi;
       c3FCj: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FCi: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FCy_srtd" {
     u3FCy_srtd:
         const S3yFW_srt+584;
         const 93;
         const 1;
         const 469827584;
 },
 lexExp_r3yd6_entry() //  [R2]
         { info_tbl: [(c3FCm,
                       label: lexExp_r3yd6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FCm: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3FCq; else goto c3FCp;
       c3FCq: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = lexExp_r3yd6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FCp: // global
           I64[Hp - 80] = lvl116_s3yxH_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s3yyo_info;
           _c3Fzt::P64 = Hp - 80;
           P64[Hp - 48] = _c3Fzt::P64;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = sat_s3yyi_info;
           P64[Hp - 16] = _c3Fzt::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 39;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.195435473 UTC

[section ""data" . lvl114_r3yd7_closure" {
     lvl114_r3yd7_closure:
         const lvl114_r3yd7_info;
 },
 lvl114_r3yd7_entry() //  [R2]
         { info_tbl: [(c3FEi,
                       label: lvl114_r3yd7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FEi: // global
           _s3yyq::P64 = R2;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _s3yyq::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.200788384 UTC

[section ""data" . lvl115_r3yd8_closure" {
     lvl115_r3yd8_closure:
         const lvl115_r3yd8_info;
 },
 lvl115_r3yd8_entry() //  [R2]
         { info_tbl: [(c3FEt,
                       label: lvl115_r3yd8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FEt: // global
           _s3yyr::P64 = R2;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _s3yyr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.208313339 UTC

[section ""data" . $wlexDecNumber_r3yd9_closure" {
     $wlexDecNumber_r3yd9_closure:
         const $wlexDecNumber_r3yd9_info;
         const 0;
 },
 sat_s3yyy_entry() //  [R1, R2]
         { info_tbl: [(c3FEV,
                       label: sat_s3yyy_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FEV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3FEZ; else goto c3FEY;
       c3FEZ: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FEY: // global
           _s3yys::P64 = P64[R1 + 7];
           _s3yyt::P64 = P64[R1 + 15];
           _s3yyu::P64 = P64[R1 + 23];
           I64[Hp - 40] = Text.Read.Lex.MkDecimal_con_info;
           P64[Hp - 32] = _s3yyt::P64;
           P64[Hp - 24] = _s3yyu::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 38;
           R2 = Hp - 2;
           R1 = _s3yys::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FFr_srtd" {
     u3FFr_srtd:
         const S3yFW_srt+664;
         const 83;
         const 1;
         const 262144;
 },
 sat_s3yyB_entry() //  [R1, R2]
         { info_tbl: [(c3FF3,
                       label: sat_s3yyB_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FF3: // global
           _s3yyu::P64 = R2;
           _s3yyB::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3FF4; else goto c3FF5;
       c3FF5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3FF7; else goto c3FF6;
       c3FF7: // global
           HpAlloc = 32;
           goto c3FF4;
       c3FF4: // global
           R2 = _s3yyu::P64;
           R1 = _s3yyB::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FF6: // global
           _s3yys::P64 = P64[_s3yyB::P64 + 7];
           _s3yyt::P64 = P64[_s3yyB::P64 + 15];
           I64[Hp - 24] = sat_s3yyy_info;
           P64[Hp - 16] = _s3yys::P64;
           P64[Hp - 8] = _s3yyt::P64;
           P64[Hp] = _s3yyu::P64;
           I64[Sp - 8] = block_c3FF0_info;
           R4 = Hp - 23;
           R3 = lvl115_r3yd8_closure+1;
           R2 = lexExp_r3yd6_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3FF0() //  [R1]
         { info_tbl: [(c3FF0,
                       label: block_c3FF0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FF0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FFa; else goto c3FF9;
       c3FFa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FF9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FFs_srtd" {
     u3FFs_srtd:
         const S3yFW_srt+616;
         const 89;
         const 65;
         const 16777216;
 },
 sat_s3yyE_entry() //  [R1, R2]
         { info_tbl: [(c3FFe,
                       label: sat_s3yyE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FFe: // global
           _s3yyt::P64 = R2;
           _s3yyE::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3FFf; else goto c3FFg;
       c3FFg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FFi; else goto c3FFh;
       c3FFi: // global
           HpAlloc = 24;
           goto c3FFf;
       c3FFf: // global
           R2 = _s3yyt::P64;
           R1 = _s3yyE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FFh: // global
           _s3yys::P64 = P64[_s3yyE::P64 + 7];
           I64[Hp - 16] = sat_s3yyB_info;
           P64[Hp - 8] = _s3yys::P64;
           P64[Hp] = _s3yyt::P64;
           I64[Sp - 8] = block_c3FFb_info;
           R4 = Hp - 15;
           R3 = lvl114_r3yd7_closure+1;
           R2 = lexFrac_r3y9E_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3FFb() //  [R1]
         { info_tbl: [(c3FFb,
                       label: block_c3FFb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FFb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FFl; else goto c3FFk;
       c3FFl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FFk: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FFt_srtd" {
     u3FFt_srtd:
         const S3yFW_srt+584;
         const 94;
         const 1041;
         const 805306368;
 },
 $wlexDecNumber_r3yd9_entry() //  [R2]
         { info_tbl: [(c3FFm,
                       label: $wlexDecNumber_r3yd9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FFm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FFq; else goto c3FFp;
       c3FFq: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = $wlexDecNumber_r3yd9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FFp: // global
           I64[Hp - 8] = sat_s3yyE_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.230520198 UTC

[section ""data" . lexDecNumber_r3yda_closure" {
     lexDecNumber_r3yda_closure:
         const lexDecNumber_r3yda_info;
         const 0;
 },
 lexDecNumber_r3yda_entry() //  [R2]
         { info_tbl: [(c3FG2,
                       label: lexDecNumber_r3yda_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FG2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3FG3; else goto c3FG4;
       c3FG3: // global
           R2 = R2;
           R1 = lexDecNumber_r3yda_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FG4: // global
           I64[Sp - 8] = block_c3FFZ_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexDecNumber_r3yd9_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3FFZ() //  [R1]
         { info_tbl: [(c3FFZ,
                       label: block_c3FFZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FFZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FG7; else goto c3FG6;
       c3FG7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FG6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.244697401 UTC

[section ""data" . Text.Read.Lex.expect2_closure" {
     Text.Read.Lex.expect2_closure:
         const Text.Read.Lex.expect2_info;
         const 0;
 },
 lvl116_s3yyM_entry() //  [R1]
         { info_tbl: [(c3FGv,
                       label: lvl116_s3yyM_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FGv: // global
           _s3yyM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FGw; else goto c3FGx;
       c3FGx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FGz; else goto c3FGy;
       c3FGz: // global
           HpAlloc = 16;
           goto c3FGw;
       c3FGw: // global
           R1 = _s3yyM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FGy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yyM::P64;
           _s3yyI::P64 = P64[_s3yyM::P64 + 16];
           _s3yyK::P64 = P64[_s3yyM::P64 + 24];
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = _s3yyK::P64;
           R2 = Hp - 7;
           R1 = _s3yyI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yyW_entry() //  [R1, R2]
         { info_tbl: [(c3FGU,
                       label: sat_s3yyW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FGU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FGV; else goto c3FGW;
       c3FGV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FGW: // global
           I64[Sp - 16] = block_c3FGR_info;
           _s3yyM::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FH4; else goto c3FGS;
       u3FH4: // global
           call _c3FGR(R1) args: 0, res: 0, upd: 0;
       c3FGS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FGR() //  [R1]
         { info_tbl: [(c3FGR,
                       label: block_c3FGR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FGR: // global
           if (I64[R1 + 7] == 39) goto c3FH3; else goto c3FH2;
       c3FH3: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FH2: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yz1_entry() //  [R1, R2]
         { info_tbl: [(c3FHf,
                       label: sat_s3yz1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FHf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FHg; else goto c3FHh;
       c3FHg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FHh: // global
           I64[Sp - 16] = block_c3FHc_info;
           _s3yyM::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FHp; else goto c3FHd;
       u3FHp: // global
           call _c3FHc(R1) args: 0, res: 0, upd: 0;
       c3FHd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FHc() //  [R1]
         { info_tbl: [(c3FHc,
                       label: block_c3FHc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FHc: // global
           if (I64[R1 + 7] == 39) goto c3FHo; else goto c3FHn;
       c3FHo: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FHn: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wk_s3yyJ_entry() //  [R1, R2, R3]
         { info_tbl: [(c3FHu,
                       label: $wk_s3yyJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FHu: // global
           _s3yyL::P64 = R3;
           _s3yyK::P64 = R2;
           _s3yyJ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3FHv; else goto c3FHw;
       c3FHw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3FHy; else goto c3FHx;
       c3FHy: // global
           HpAlloc = 32;
           goto c3FHv;
       c3FHv: // global
           R3 = _s3yyL::P64;
           R2 = _s3yyK::P64;
           R1 = _s3yyJ::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3FHx: // global
           _s3yyI::P64 = P64[_s3yyJ::P64 + 6];
           I64[Hp - 24] = lvl116_s3yyM_info;
           P64[Hp - 8] = _s3yyI::P64;
           P64[Hp] = _s3yyK::P64;
           I64[Sp - 24] = block_c3FGA_info;
           R1 = _s3yyL::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s3yyK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3FHM; else goto c3FGB;
       u3FHM: // global
           call _c3FGA(R1) args: 0, res: 0, upd: 0;
       c3FGB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FGA() //  [R1]
         { info_tbl: [(c3FGA,
                       label: block_c3FGA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FGA: // global
           if (R1 & 7 == 1) goto c3FHr; else goto c3FHs;
       c3FHr: // global
           I64[Sp] = block_c3FGF_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3FHL; else goto c3FGG;
       u3FHL: // global
           call _c3FGF(R1) args: 0, res: 0, upd: 0;
       c3FGG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3FHs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3FHK; else goto c3FHJ;
       c3FHK: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FHJ: // global
           I64[Hp - 24] = sat_s3yz1_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3FGF() //  [R1]
         { info_tbl: [(c3FGF,
                       label: block_c3FGF_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FGF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3FHC; else goto c3FHB;
       c3FHC: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FHB: // global
           if (I64[R1 + 7] == 39) goto c3FHG; else goto c3FHF;
       c3FHG: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FHF: // global
           I64[Hp - 24] = sat_s3yyW_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k1_s3yz2_entry() //  [R1, R2]
         { info_tbl: [(c3FHV,
                       label: k1_s3yz2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FHV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FHW; else goto c3FHX;
       c3FHW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FHX: // global
           I64[Sp - 16] = block_c3FHS_info;
           _s3yyJ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FI1; else goto c3FHT;
       u3FI1: // global
           call _c3FHS(R1) args: 0, res: 0, upd: 0;
       c3FHT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FHS() //  [R1]
         { info_tbl: [(c3FHS,
                       label: block_c3FHS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FHS: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wk_s3yyJ_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yz7_entry() //  [R1]
         { info_tbl: [(c3FI6,
                       label: lvl116_s3yz7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FI6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FI7; else goto c3FI8;
       c3FI7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FI8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3yzd_entry() //  [R1]
         { info_tbl: [(c3FIq,
                       label: lvl118_s3yzd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FIq: // global
           _s3yzd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FIr; else goto c3FIs;
       c3FIs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FIu; else goto c3FIt;
       c3FIu: // global
           HpAlloc = 16;
           goto c3FIr;
       c3FIr: // global
           R1 = _s3yzd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FIt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yzd::P64;
           _s3yyI::P64 = P64[_s3yzd::P64 + 16];
           _s3yza::P64 = P64[_s3yzd::P64 + 24];
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = _s3yza::P64;
           R2 = Hp - 7;
           R1 = _s3yyI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzj_entry() //  [R1, R2]
         { info_tbl: [(c3FID,
                       label: sat_s3yzj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FID: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FIE; else goto c3FIF;
       c3FIE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FIF: // global
           I64[Sp - 16] = block_c3FIA_info;
           _s3yzd::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yzd::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FIN; else goto c3FIB;
       u3FIN: // global
           call _c3FIA(R1) args: 0, res: 0, upd: 0;
       c3FIB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FIA() //  [R1]
         { info_tbl: [(c3FIA,
                       label: block_c3FIA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FIA: // global
           if (I64[R1 + 7] == 39) goto c3FIM; else goto c3FIL;
       c3FIM: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FIL: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3yz8_entry() //  [R1, R2]
         { info_tbl: [(c3FIO,
                       label: lvl117_s3yz8_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FIO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3FIP; else goto c3FIQ;
       c3FIP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FIQ: // global
           I64[Sp - 24] = block_c3FIe_info;
           _s3yyI::P64 = P64[R1 + 7];
           _s3yz7::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3yyI::P64;
           P64[Sp - 8] = _s3yz7::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3FJ0; else goto c3FIf;
       u3FJ0: // global
           call _c3FIe(R1) args: 0, res: 0, upd: 0;
       c3FIf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FIe() //  [R1]
         { info_tbl: [(c3FIe,
                       label: block_c3FIe_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FIe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3FIT; else goto c3FIS;
       c3FIT: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FIS: // global
           _s3yzc::I64 = I64[R1 + 7];
           if (_s3yzc::I64 == 39) goto c3FIX; else goto u3FIZ;
       c3FIX: // global
           Hp = Hp - 64;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3FIZ: // global
           if (_s3yzc::I64 == 92) goto c3FIY; else goto c3FIW;
       c3FIY: // global
           Hp = Hp - 64;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FIW: // global
           I64[Hp - 56] = lvl118_s3yzd_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_s3yzj_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl119_s3yzr_entry() //  [R1]
         { info_tbl: [(c3FJa,
                       label: lvl119_s3yzr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FJa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FJb; else goto c3FJc;
       c3FJb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FJc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Base.id_closure+1;
           Sp = Sp - 16;
           call body_r3yd5_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3FMZ_srtd" {
     u3FMZ_srtd:
         const S3yFW_srt+600;
         const 93;
         const 257;
         const 268435456;
 },
 sat_s3yAb_entry() //  [R1]
         { info_tbl: [(c3FJw,
                       label: sat_s3yAb_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FJw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3FJx; else goto c3FJy;
       c3FJx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FJy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3FJt_info;
           R4 = P64[R1 + 16];
           R3 = lexDecNumber_r3yda_closure+1;
           R2 = lexHexOct_r3y9B_closure+1;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3FJt() //  [R1]
         { info_tbl: [(c3FJt,
                       label: block_c3FJt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FJt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FJB; else goto c3FJA;
       c3FJB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3FJA: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yA2_entry() //  [R1, R2]
         { info_tbl: [(c3FK3,
                       label: sat_s3yA2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FK3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3FK7; else goto c3FK6;
       c3FK7: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FK6: // global
           _s3yyI::P64 = P64[R1 + 7];
           _s3yzR::P64 = P64[R1 + 15];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = _s3yzR::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = Hp - 30;
           R2 = Hp - 4;
           R1 = _s3yyI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yA7_entry() //  [R1, R2]
         { info_tbl: [(c3FK8,
                       label: sat_s3yA7_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FK8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3FK9; else goto c3FKa;
       c3FK9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FKa: // global
           I64[Sp - 16] = block_c3FJH_info;
           _s3yyI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yyI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FKz; else goto c3FJI;
       u3FKz: // global
           call _c3FJH(R1) args: 0, res: 0, upd: 0;
       c3FJI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FJH() //  [R1]
         { info_tbl: [(c3FJH,
                       label: block_c3FJH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FJH: // global
           _s3yzS::I64 = I64[R1 + 7];
           (_s3yzX::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalpha(_s3yzS::I64);
           if (_s3yzX::I64 == 0) goto c3FKu; else goto u3FKv;
       c3FKu: // global
           if (_s3yzS::I64 == 95) goto u3FKw; else goto c3FKs;
       u3FKw: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           goto u3FKy;
       c3FKs: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3FKv: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           goto u3FKy;
       u3FKy: // global
           call _c3FJU() args: 0, res: 0, upd: 0;
     }
 },
 _c3FJU() //  []
         { info_tbl: [(c3FJU,
                       label: block_c3FJU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FJU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FKh; else goto c3FKg;
       c3FKh: // global
           HpAlloc = 24;
           I64[Sp] = block_c3FJU_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3FKg: // global
           I64[Hp - 16] = sat_s3yA2_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c3FKc_info;
           R3 = Hp - 15;
           R2 = isIdfChar_r3y8W_closure+1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3FKc() //  [R1]
         { info_tbl: [(c3FKc,
                       label: block_c3FKc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FKc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FKk; else goto c3FKj;
       c3FKk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FKj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FN0_srtd" {
     u3FN0_srtd:
         const S3yFW_srt+600;
         const 94;
         const 257;
         const 805322752;
 },
 sat_s3yAc_entry() //  [R1]
         { info_tbl: [(c3FKB,
                       label: sat_s3yAc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FKB: // global
           _s3yAc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FKC; else goto c3FKD;
       c3FKD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3FKF; else goto c3FKE;
       c3FKF: // global
           HpAlloc = 56;
           goto c3FKC;
       c3FKC: // global
           R1 = _s3yAc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FKE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAc::P64;
           _s3yyI::P64 = P64[_s3yAc::P64 + 16];
           I64[Hp - 48] = sat_s3yAb_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yA7_info;
           P64[Hp - 16] = _s3yyI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzL_entry() //  [R1, R2]
         { info_tbl: [(c3FL2,
                       label: sat_s3yzL_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FL2: // global
           _s3yzG::P64 = R2;
           _s3yzL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3FL3; else goto c3FL4;
       c3FL4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FL6; else goto c3FL5;
       c3FL6: // global
           HpAlloc = 24;
           goto c3FL3;
       c3FL3: // global
           R2 = _s3yzG::P64;
           R1 = _s3yzL::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FL5: // global
           _s3yyI::P64 = P64[_s3yzL::P64 + 7];
           _s3yzE::P64 = P64[_s3yzL::P64 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3yzE::P64;
           P64[Hp] = _s3yzG::P64;
           I64[Sp - 24] = block_c3FKW_info;
           R4 = reserved_ops29_r3y9q_closure+2;
           _c3FKV::P64 = Hp - 14;
           R3 = _c3FKV::P64;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           P64[Sp - 16] = _c3FKV::P64;
           P64[Sp - 8] = _s3yyI::P64;
           Sp = Sp - 24;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3FKW() //  [R1]
         { info_tbl: [(c3FKW,
                       label: block_c3FKW_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FKW: // global
           _c3FKV::P64 = P64[Sp + 8];
           _s3yyI::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c3FKZ; else goto c3FL0;
       c3FKZ: // global
           Hp = Hp + 16;
           _s3yzI::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3FLi; else goto c3FLb;
       c3FLb: // global
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = _c3FKV::P64;
           R2 = Hp - 3;
           R1 = _s3yyI::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3FL0: // global
           Hp = Hp + 16;
           _s3yzI::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3FLi; else goto c3FLh;
       c3FLi: // global
           HpAlloc = 16;
           R1 = _s3yzI::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FLh: // global
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = _c3FKV::P64;
           R2 = Hp - 5;
           R1 = _s3yyI::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FN1_srtd" {
     u3FN1_srtd:
         const S3yFW_srt+128;
         const 154;
         const 1;
         const 0;
         const 33554432;
 },
 sat_s3yzO_entry() //  [R1, R2]
         { info_tbl: [(c3FLn,
                       label: sat_s3yzO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FLn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3FLo; else goto c3FLp;
       c3FLo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FLp: // global
           I64[Sp - 24] = block_c3FKL_info;
           _s3yzE::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s3yzE::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.isSymbolChar_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3FN2_srtd" {
     u3FN2_srtd:
         const S3yFW_srt+128;
         const 154;
         const 1;
         const 0;
         const 33554432;
 },
 _c3FKL() //  [R1]
         { info_tbl: [(c3FKL,
                       label: block_c3FKL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FKL: // global
           if (R1 & 7 == 1) goto c3FLk; else goto c3FLl;
       c3FLk: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FLl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FLx; else goto c3FLw;
       c3FLx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FLw: // global
           I64[Hp - 16] = sat_s3yzL_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3FLs_info;
           R3 = Hp - 15;
           R2 = Text.Read.Lex.isSymbolChar_closure+1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3FLs() //  [R1]
         { info_tbl: [(c3FLs,
                       label: block_c3FLs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FLs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FLA; else goto c3FLz;
       c3FLA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FLz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FN3_srtd" {
     u3FN3_srtd:
         const S3yFW_srt+128;
         const 154;
         const 576460752303423489;
         const 8;
         const 58720768;
 },
 sat_s3yAd_entry() //  [R1]
         { info_tbl: [(c3FLC,
                       label: sat_s3yAd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FLC: // global
           _s3yAd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FLD; else goto c3FLE;
       c3FLE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3FLG; else goto c3FLF;
       c3FLG: // global
           HpAlloc = 56;
           goto c3FLD;
       c3FLD: // global
           R1 = _s3yAd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FLF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAd::P64;
           _s3yyI::P64 = P64[_s3yAd::P64 + 16];
           I64[Hp - 48] = sat_s3yAc_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yzO_info;
           P64[Hp - 16] = _s3yyI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzC_entry() //  [R1, R2]
         { info_tbl: [(c3FLS,
                       label: sat_s3yzC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FLS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3FLT; else goto c3FLU;
       c3FLT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FLU: // global
           I64[Sp - 24] = block_c3FLM_info;
           R4 = Text.Read.Lex.isSymbolChar3_closure;
           R3 = R2;
           _s3yzy::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s3yzy::P64;
           Sp = Sp - 24;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3FLM() //  [R1]
         { info_tbl: [(c3FLM,
                       label: block_c3FLM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FLM: // global
           if (R1 & 7 == 1) goto c3FLP; else goto c3FLQ;
       c3FLP: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FLQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3FM4; else goto c3FM3;
       c3FM4: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FM3: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = Hp - 30;
           R2 = Hp - 5;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FN4_srtd" {
     u3FN4_srtd:
         const S3yFW_srt+128;
         const 155;
         const 576460752303423489;
         const 8;
         const 125829632;
 },
 sat_s3yAe_entry() //  [R1]
         { info_tbl: [(c3FM6,
                       label: sat_s3yAe_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FM6: // global
           _s3yAe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FM7; else goto c3FM8;
       c3FM8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3FMa; else goto c3FM9;
       c3FMa: // global
           HpAlloc = 56;
           goto c3FM7;
       c3FM7: // global
           R1 = _s3yAe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FM9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAe::P64;
           _s3yyI::P64 = P64[_s3yAe::P64 + 16];
           I64[Hp - 48] = sat_s3yAd_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yzC_info;
           P64[Hp - 16] = _s3yyI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzw_entry() //  [R1, R2]
         { info_tbl: [(c3FMj,
                       label: sat_s3yzw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FMj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FMk; else goto c3FMl;
       c3FMk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FMl: // global
           I64[Sp - 16] = block_c3FMg_info;
           _s3yzr::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yzr::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FMt; else goto c3FMh;
       u3FMt: // global
           call _c3FMg(R1) args: 0, res: 0, upd: 0;
       c3FMh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FMg() //  [R1]
         { info_tbl: [(c3FMg,
                       label: block_c3FMg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FMg: // global
           if (I64[R1 + 7] == 34) goto c3FMs; else goto c3FMr;
       c3FMs: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FMr: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FN5_srtd" {
     u3FN5_srtd:
         const S3yFW_srt+128;
         const 155;
         const 576460752303423489;
         const 8;
         const 126091776;
 },
 sat_s3yAf_entry() //  [R1]
         { info_tbl: [(c3FMv,
                       label: sat_s3yAf_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FMv: // global
           _s3yAf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FMw; else goto c3FMx;
       c3FMx: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3FMz; else goto c3FMy;
       c3FMz: // global
           HpAlloc = 80;
           goto c3FMw;
       c3FMw: // global
           R1 = _s3yAf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FMy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAf::P64;
           _s3yyI::P64 = P64[_s3yAf::P64 + 16];
           I64[Hp - 72] = lvl119_s3yzr_info;
           P64[Hp - 56] = _s3yyI::P64;
           I64[Hp - 48] = sat_s3yAe_info;
           P64[Hp - 32] = _s3yyI::P64;
           I64[Hp - 24] = sat_s3yzw_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yzp_entry() //  [R1, R2]
         { info_tbl: [(c3FMI,
                       label: sat_s3yzp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FMI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FMJ; else goto c3FMK;
       c3FMJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FMK: // global
           I64[Sp - 16] = block_c3FMF_info;
           _s3yzk::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yzk::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FMS; else goto c3FMG;
       u3FMS: // global
           call _c3FMF(R1) args: 0, res: 0, upd: 0;
       c3FMG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FMF() //  [R1]
         { info_tbl: [(c3FMF,
                       label: block_c3FMF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FMF: // global
           if (I64[R1 + 7] == 39) goto c3FMR; else goto c3FMQ;
       c3FMR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FMQ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3FN6_srtd" {
     u3FN6_srtd:
         const S3yFW_srt+128;
         const 156;
         const 576460752303423489;
         const 8;
         const 260310528;
 },
 Text.Read.Lex.expect2_entry() //  [R2]
         { info_tbl: [(c3FMU,
                       label: Text.Read.Lex.expect2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FMU: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3FMY; else goto c3FMX;
       c3FMY: // global
           HpAlloc = 152;
           R2 = R2;
           R1 = Text.Read.Lex.expect2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FMX: // global
           I64[Hp - 144] = $wk_s3yyJ_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = k1_s3yz2_info;
           P64[Hp - 120] = Hp - 142;
           I64[Hp - 112] = lvl116_s3yz7_info;
           P64[Hp - 96] = Hp - 127;
           I64[Hp - 88] = lvl117_s3yz8_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = Hp - 112;
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 56] = Hp - 87;
           I64[Hp - 48] = sat_s3yAf_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3yzp_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.344223121 UTC

[section ""data" . Text.Read.Lex.$wlex_closure" {
     Text.Read.Lex.$wlex_closure:
         const Text.Read.Lex.$wlex_info;
         const 0;
 },
 lvl117_s3yAi_entry() //  [R1]
         { info_tbl: [(c3FQU,
                       label: lvl117_s3yAi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FQU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FQV; else goto c3FQW;
       c3FQV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FQW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yAp_entry() //  [R1]
         { info_tbl: [(c3FR1,
                       label: sat_s3yAp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FR1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FR2; else goto c3FR3;
       c3FR2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FR3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yAn_entry() //  [R1, R2]
         { info_tbl: [(c3FRg,
                       label: sat_s3yAn_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FRg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FRh; else goto c3FRi;
       c3FRh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FRi: // global
           I64[Sp - 16] = block_c3FR9_info;
           _s3yAi::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yAi::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FRp; else goto c3FRa;
       u3FRp: // global
           call _c3FR9(R1) args: 0, res: 0, upd: 0;
       c3FRa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FR9() //  [R1]
         { info_tbl: [(c3FR9,
                       label: block_c3FR9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FR9: // global
           if (R1 & 7 == 1) goto c3FRd; else goto c3FRe;
       c3FRd: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FRe: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yAh_entry() //  [R1]
         { info_tbl: [(c3FRr,
                       label: lvl116_s3yAh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FRr: // global
           _s3yAh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FRs; else goto c3FRt;
       c3FRt: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3FRv; else goto c3FRu;
       c3FRv: // global
           HpAlloc = 80;
           goto c3FRs;
       c3FRs: // global
           R1 = _s3yAh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FRu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAh::P64;
           _s3yAg::P64 = P64[_s3yAh::P64 + 16];
           I64[Hp - 72] = lvl117_s3yAi_info;
           P64[Hp - 56] = _s3yAg::P64;
           I64[Hp - 48] = sat_s3yAp_info;
           P64[Hp - 32] = _s3yAg::P64;
           I64[Hp - 24] = sat_s3yAn_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 k_s3yAq_entry() //  [R1]
         { info_tbl: [(c3FRB,
                       label: k_s3yAq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FRB: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yAt_entry() //  [R1, R2]
         { info_tbl: [(c3FRJ,
                       label: sat_s3yAt_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FRJ: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wlex_entry() //  [R2]
         { info_tbl: [(c3FRM,
                       label: Text.Read.Lex.$wlex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FRM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3FRQ; else goto c3FRP;
       c3FRQ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.Read.Lex.$wlex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FRP: // global
           I64[Hp - 48] = lvl116_s3yAh_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3yAq_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3yAt_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.364173707 UTC

[section ""data" . Text.Read.Lex.lex1_closure" {
     Text.Read.Lex.lex1_closure:
         const Text.Read.Lex.lex1_info;
         const 0;
 },
 Text.Read.Lex.lex1_entry() //  [R2]
         { info_tbl: [(c3FSE,
                       label: Text.Read.Lex.lex1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FSE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3FSF; else goto c3FSG;
       c3FSF: // global
           R2 = R2;
           R1 = Text.Read.Lex.lex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FSG: // global
           I64[Sp - 8] = block_c3FSB_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wlex_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3FSB() //  [R1]
         { info_tbl: [(c3FSB,
                       label: block_c3FSB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FSB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FSJ; else goto c3FSI;
       c3FSJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FSI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.370961216 UTC

[section ""data" . Text.Read.Lex.lex_closure" {
     Text.Read.Lex.lex_closure:
         const Text.Read.Lex.lex_info;
         const 0;
 },
 Text.Read.Lex.lex_entry() //  [R2]
         { info_tbl: [(c3FSX,
                       label: Text.Read.Lex.lex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FSX: // global
           R2 = R2;
           call Text.Read.Lex.lex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.376938132 UTC

[section ""data" . Text.Read.Lex.$wexpect_closure" {
     Text.Read.Lex.$wexpect_closure:
         const Text.Read.Lex.$wexpect_info;
         const 0;
 },
 lvl117_s3yAA_entry() //  [R1]
         { info_tbl: [(c3FTg,
                       label: lvl117_s3yAA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FTg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FTh; else goto c3FTi;
       c3FTh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FTi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3yAB_entry() //  [R1]
         { info_tbl: [(c3FTu,
                       label: lvl118_s3yAB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FTu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3FTv; else goto c3FTw;
       c3FTv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FTw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3FTn_info;
           _s3yAA::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3yAA::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3FTD; else goto c3FTo;
       u3FTD: // global
           call _c3FTn(R1) args: 0, res: 0, upd: 0;
       c3FTo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3FTn() //  [R1]
         { info_tbl: [(c3FTn,
                       label: block_c3FTn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FTn: // global
           if (R1 & 7 == 7) goto c3FTs; else goto c3FTr;
       c3FTs: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3FTr: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yAL_entry() //  [R1, R2]
         { info_tbl: [(c3FTT,
                       label: sat_s3yAL_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FTT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FTU; else goto c3FTV;
       c3FTU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FTV: // global
           I64[Sp - 16] = block_c3FTN_info;
           R3 = P64[R1 + 7];
           R2 = R2;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 16;
           call Text.Read.Lex.$fEqLexeme_$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3FTN() //  [R1]
         { info_tbl: [(c3FTN,
                       label: block_c3FTN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FTN: // global
           if (R1 & 7 == 1) goto c3FTQ; else goto c3FTR;
       c3FTQ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FTR: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yAM_entry() //  [R1]
         { info_tbl: [(c3FU2,
                       label: sat_s3yAM_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FU2: // global
           _s3yAM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FU3; else goto c3FU4;
       c3FU4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FU6; else goto c3FU5;
       c3FU6: // global
           HpAlloc = 24;
           goto c3FU3;
       c3FU3: // global
           R1 = _s3yAM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FU5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAM::P64;
           _s3yAx::P64 = P64[_s3yAM::P64 + 16];
           _s3yAA::P64 = P64[_s3yAM::P64 + 24];
           I64[Hp - 16] = sat_s3yAL_info;
           P64[Hp - 8] = _s3yAx::P64;
           P64[Hp] = _s3yAA::P64;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yAH_entry() //  [R1, R2]
         { info_tbl: [(c3FUj,
                       label: sat_s3yAH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FUj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FUk; else goto c3FUl;
       c3FUk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FUl: // global
           I64[Sp - 16] = block_c3FUc_info;
           _s3yAB::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yAB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FUs; else goto c3FUd;
       u3FUs: // global
           call _c3FUc(R1) args: 0, res: 0, upd: 0;
       c3FUd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FUc() //  [R1]
         { info_tbl: [(c3FUc,
                       label: block_c3FUc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FUc: // global
           if (R1 & 7 == 1) goto c3FUg; else goto c3FUh;
       c3FUg: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3FUh: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yAz_entry() //  [R1]
         { info_tbl: [(c3FUu,
                       label: lvl116_s3yAz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FUu: // global
           _s3yAz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FUv; else goto c3FUw;
       c3FUw: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3FUy; else goto c3FUx;
       c3FUy: // global
           HpAlloc = 120;
           goto c3FUv;
       c3FUv: // global
           R1 = _s3yAz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FUx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAz::P64;
           _s3yAx::P64 = P64[_s3yAz::P64 + 16];
           _s3yAy::P64 = P64[_s3yAz::P64 + 24];
           I64[Hp - 112] = lvl117_s3yAA_info;
           P64[Hp - 96] = _s3yAy::P64;
           I64[Hp - 88] = lvl118_s3yAB_info;
           P64[Hp - 72] = _s3yAx::P64;
           _c3FTc::P64 = Hp - 112;
           P64[Hp - 64] = _c3FTc::P64;
           I64[Hp - 56] = sat_s3yAM_info;
           P64[Hp - 40] = _s3yAx::P64;
           P64[Hp - 32] = _c3FTc::P64;
           I64[Hp - 24] = sat_s3yAH_info;
           P64[Hp - 16] = Hp - 88;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 56;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 k_s3yAN_entry() //  [R1]
         { info_tbl: [(c3FUE,
                       label: k_s3yAN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FUE: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yAQ_entry() //  [R1, R2]
         { info_tbl: [(c3FUM,
                       label: sat_s3yAQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FUM: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wexpect_entry() //  [R2, R3]
         { info_tbl: [(c3FUP,
                       label: Text.Read.Lex.$wexpect_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FUP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3FUT; else goto c3FUS;
       c3FUT: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wexpect_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3FUS: // global
           I64[Hp - 56] = lvl116_s3yAz_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = k_s3yAN_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = sat_s3yAQ_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.405084794 UTC

[section ""data" . Text.Read.Lex.expect1_closure" {
     Text.Read.Lex.expect1_closure:
         const Text.Read.Lex.expect1_info;
         const 0;
 },
 Text.Read.Lex.expect1_entry() //  [R2, R3]
         { info_tbl: [(c3FW7,
                       label: Text.Read.Lex.expect1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FW7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3FW8; else goto c3FW9;
       c3FW8: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.expect1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3FW9: // global
           I64[Sp - 8] = block_c3FW4_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3FW4() //  [R1]
         { info_tbl: [(c3FW4,
                       label: block_c3FW4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FW4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FWc; else goto c3FWb;
       c3FWc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FWb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.411570459 UTC

[section ""data" . Text.Read.Lex.expect_closure" {
     Text.Read.Lex.expect_closure:
         const Text.Read.Lex.expect_info;
         const 0;
 },
 Text.Read.Lex.expect_entry() //  [R2, R3]
         { info_tbl: [(c3FWq,
                       label: Text.Read.Lex.expect_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FWq: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.expect1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.416996152 UTC

[section ""data" . Text.Read.Lex.$whsLex_closure" {
     Text.Read.Lex.$whsLex_closure:
         const Text.Read.Lex.$whsLex_info;
         const 0;
 },
 lvl117_s3yAX_entry() //  [R1, R2]
         { info_tbl: [(c3FWK,
                       label: lvl117_s3yAX_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FWK: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yB7_entry() //  [R1]
         { info_tbl: [(c3FWX,
                       label: sat_s3yB7_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FWX: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yB8_entry() //  [R1]
         { info_tbl: [(c3FX0,
                       label: sat_s3yB8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FX0: // global
           _s3yB8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3FX1; else goto c3FX2;
       c3FX2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FX4; else goto c3FX3;
       c3FX4: // global
           HpAlloc = 16;
           goto c3FX1;
       c3FX1: // global
           R1 = _s3yB8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FX3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yB8::P64;
           _s3yAZ::P64 = P64[_s3yB8::P64 + 16];
           I64[Hp - 8] = sat_s3yB7_info;
           P64[Hp] = _s3yAZ::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3yB4_entry() //  [R1, R2]
         { info_tbl: [(c3FXh,
                       label: sat_s3yB4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FXh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3FXi; else goto c3FXj;
       c3FXi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FXj: // global
           I64[Sp - 16] = block_c3FXa_info;
           _s3yAZ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3yAZ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3FXq; else goto c3FXb;
       u3FXq: // global
           call _c3FXa(R1) args: 0, res: 0, upd: 0;
       c3FXb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3FXa() //  [R1]
         { info_tbl: [(c3FXa,
                       label: block_c3FXa_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FXa: // global
           if (R1 & 7 == 1) goto c3FXe; else goto c3FXf;
       c3FXe: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3FXf: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3yAW_entry() //  [R1]
         { info_tbl: [(c3FXu,
                       label: lvl116_s3yAW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FXu: // global
           _s3yAW::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3FXv; else goto c3FXw;
       c3FXw: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3FXy; else goto c3FXx;
       c3FXy: // global
           HpAlloc = 96;
           goto c3FXv;
       c3FXv: // global
           R1 = _s3yAW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3FXx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3yAW::P64;
           _s3yAV::P64 = P64[_s3yAW::P64 + 16];
           I64[Hp - 88] = lvl117_s3yAX_info;
           P64[Hp - 80] = _s3yAV::P64;
           I64[Hp - 72] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 64] = Hp - 87;
           P64[Hp - 56] = Text.ParserCombinators.ReadP.Fail_closure+3;
           I64[Hp - 48] = sat_s3yB8_info;
           _c3FWN::P64 = Hp - 68;
           P64[Hp - 32] = _c3FWN::P64;
           I64[Hp - 24] = sat_s3yB4_info;
           P64[Hp - 16] = _c3FWN::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 24] = block_c3FXs_info;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3FXs() //  [R1]
         { info_tbl: [(c3FXs,
                       label: block_c3FXs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FXs: // global
           R3 = R1;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 k_s3yBa_entry() //  [R1]
         { info_tbl: [(c3FXH,
                       label: k_s3yBa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FXH: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3yBd_entry() //  [R1, R2]
         { info_tbl: [(c3FXP,
                       label: sat_s3yBd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FXP: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$whsLex_entry() //  [R2]
         { info_tbl: [(c3FXS,
                       label: Text.Read.Lex.$whsLex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FXS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3FXW; else goto c3FXV;
       c3FXW: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.Read.Lex.$whsLex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FXV: // global
           I64[Hp - 48] = lvl116_s3yAW_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3yBa_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3yBd_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.439846905 UTC

[section ""data" . Text.Read.Lex.hsLex1_closure" {
     Text.Read.Lex.hsLex1_closure:
         const Text.Read.Lex.hsLex1_info;
         const 0;
 },
 Text.Read.Lex.hsLex1_entry() //  [R2]
         { info_tbl: [(c3FYP,
                       label: Text.Read.Lex.hsLex1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FYP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3FYQ; else goto c3FYR;
       c3FYQ: // global
           R2 = R2;
           R1 = Text.Read.Lex.hsLex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FYR: // global
           I64[Sp - 8] = block_c3FYM_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$whsLex_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3FYM() //  [R1]
         { info_tbl: [(c3FYM,
                       label: block_c3FYM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FYM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FYU; else goto c3FYT;
       c3FYU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3FYT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.446602014 UTC

[section ""data" . Text.Read.Lex.hsLex_closure" {
     Text.Read.Lex.hsLex_closure:
         const Text.Read.Lex.hsLex_info;
         const 0;
 },
 Text.Read.Lex.hsLex_entry() //  [R2]
         { info_tbl: [(c3FZ8,
                       label: Text.Read.Lex.hsLex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FZ8: // global
           R2 = R2;
           call Text.Read.Lex.hsLex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.450709374 UTC

[section ""data" . Text.Read.Lex.MkNumber_closure" {
     Text.Read.Lex.MkNumber_closure:
         const Text.Read.Lex.MkNumber_info;
 },
 Text.Read.Lex.MkNumber_entry() //  [R2, R3]
         { info_tbl: [(c3FZk,
                       label: Text.Read.Lex.MkNumber_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FZk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3FZo; else goto c3FZn;
       c3FZo: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.MkNumber_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3FZn: // global
           I64[Hp - 16] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.455607088 UTC

[section ""data" . Text.Read.Lex.MkDecimal_closure" {
     Text.Read.Lex.MkDecimal_closure:
         const Text.Read.Lex.MkDecimal_info;
 },
 Text.Read.Lex.MkDecimal_entry() //  [R2, R3, R4]
         { info_tbl: [(c3FZz,
                       label: Text.Read.Lex.MkDecimal_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FZz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3FZD; else goto c3FZC;
       c3FZD: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.MkDecimal_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3FZC: // global
           I64[Hp - 24] = Text.Read.Lex.MkDecimal_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.45989027 UTC

[section ""data" . Text.Read.Lex.Char_closure" {
     Text.Read.Lex.Char_closure:
         const Text.Read.Lex.Char_info;
 },
 Text.Read.Lex.Char_entry() //  [R2]
         { info_tbl: [(c3FZO,
                       label: Text.Read.Lex.Char_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3FZO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3FZS; else goto c3FZR;
       c3FZS: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Char_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3FZR: // global
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.464610352 UTC

[section ""data" . Text.Read.Lex.String_closure" {
     Text.Read.Lex.String_closure:
         const Text.Read.Lex.String_info;
 },
 Text.Read.Lex.String_entry() //  [R2]
         { info_tbl: [(c3G03,
                       label: Text.Read.Lex.String_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G03: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3G07; else goto c3G06;
       c3G07: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.String_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3G06: // global
           I64[Hp - 8] = Text.Read.Lex.String_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.468683839 UTC

[section ""data" . Text.Read.Lex.Punc_closure" {
     Text.Read.Lex.Punc_closure:
         const Text.Read.Lex.Punc_info;
 },
 Text.Read.Lex.Punc_entry() //  [R2]
         { info_tbl: [(c3G0i,
                       label: Text.Read.Lex.Punc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G0i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3G0m; else goto c3G0l;
       c3G0m: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Punc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3G0l: // global
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.474004179 UTC

[section ""data" . Text.Read.Lex.Ident_closure" {
     Text.Read.Lex.Ident_closure:
         const Text.Read.Lex.Ident_info;
 },
 Text.Read.Lex.Ident_entry() //  [R2]
         { info_tbl: [(c3G0x,
                       label: Text.Read.Lex.Ident_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G0x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3G0B; else goto c3G0A;
       c3G0B: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Ident_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3G0A: // global
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = R2;
           R1 = Hp - 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.478076982 UTC

[section ""data" . Text.Read.Lex.Symbol_closure" {
     Text.Read.Lex.Symbol_closure:
         const Text.Read.Lex.Symbol_info;
 },
 Text.Read.Lex.Symbol_entry() //  [R2]
         { info_tbl: [(c3G0M,
                       label: Text.Read.Lex.Symbol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G0M: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3G0Q; else goto c3G0P;
       c3G0Q: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Symbol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3G0P: // global
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.482255281 UTC

[section ""data" . Text.Read.Lex.Number_closure" {
     Text.Read.Lex.Number_closure:
         const Text.Read.Lex.Number_info;
 },
 Text.Read.Lex.Number_entry() //  [R2]
         { info_tbl: [(c3G11,
                       label: Text.Read.Lex.Number_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G11: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3G15; else goto c3G14;
       c3G15: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Number_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3G14: // global
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = R2;
           R1 = Hp - 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.487122534 UTC

[section ""data" . Text.Read.Lex.EOF_closure" {
     Text.Read.Lex.EOF_closure:
         const Text.Read.Lex.EOF_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.489043406 UTC

[Text.Read.Lex.MkNumber_con_entry() //  [R1]
         { info_tbl: [(c3G1c,
                       label: Text.Read.Lex.MkNumber_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,77,107,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G1c: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.492850723 UTC

[Text.Read.Lex.MkDecimal_con_entry() //  [R1]
         { info_tbl: [(c3G1i,
                       label: Text.Read.Lex.MkDecimal_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,77,107,68,101,99,105,109,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G1i: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.496195989 UTC

[Text.Read.Lex.Char_con_entry() //  [R1]
         { info_tbl: [(c3G1o,
                       label: Text.Read.Lex.Char_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,67,104,97,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G1o: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.49975604 UTC

[Text.Read.Lex.String_con_entry() //  [R1]
         { info_tbl: [(c3G1u,
                       label: Text.Read.Lex.String_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,83,116,114,105,110,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G1u: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.503474428 UTC

[Text.Read.Lex.Punc_con_entry() //  [R1]
         { info_tbl: [(c3G1A,
                       label: Text.Read.Lex.Punc_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,80,117,110,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G1A: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.506779826 UTC

[Text.Read.Lex.Ident_con_entry() //  [R1]
         { info_tbl: [(c3G1G,
                       label: Text.Read.Lex.Ident_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,73,100,101,110,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G1G: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.510427982 UTC

[Text.Read.Lex.Symbol_con_entry() //  [R1]
         { info_tbl: [(c3G1M,
                       label: Text.Read.Lex.Symbol_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G1M: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.514407849 UTC

[Text.Read.Lex.Number_con_entry() //  [R1]
         { info_tbl: [(c3G1S,
                       label: Text.Read.Lex.Number_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 5
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G1S: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.518020794 UTC

[Text.Read.Lex.EOF_con_entry() //  [R1]
         { info_tbl: [(c3G1Y,
                       label: Text.Read.Lex.EOF_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 6
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,69,79,70]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3G1Y: // global
           R1 = R1 + 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:14.521715733 UTC

[section ""relreadonly" . S3yFW_srt" {
     S3yFW_srt:
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.Show.$fShowInteger_closure;
         const Text.Read.Lex.$fShowLexeme8_closure;
         const Text.Read.Lex.$w$cshowsPrec_closure;
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_closure;
         const Text.Read.Lex.$fShowNumber_$cshow_closure;
         const Text.Read.Lex.$fShowNumber1_closure;
         const Text.Read.Lex.$fShowLexeme4_closure;
         const GHC.Show.$w$cshowsPrec3_closure;
         const GHC.Show.showLitString_closure;
         const Text.Read.Lex.$fShowLexeme6_closure;
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure;
         const Text.Read.Lex.$fShowLexeme3_closure;
         const Text.Read.Lex.$fShowLexeme_$cshow_closure;
         const Text.Read.Lex.$fShowLexeme1_closure;
         const GHC.Unicode.$wgeneralCategory_closure;
         const Text.Read.Lex.isSymbolChar_closure;
         const Text.Read.Lex.isSymbolChar1_closure;
         const Text.Read.Lex.isSymbolChar3_closure;
         const lvl1_r3y8U_closure;
         const $wisIdfChar_r3y8V_closure;
         const isIdfChar_r3y8W_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const combine_r3y9t_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const lvl3_r3y9s_closure;
         const Text.Read.Lex.numberToFixed_go_closure;
         const Text.Read.Lex.numberToFixed2_closure;
         const Text.Read.Lex.valInteger_closure;
         const Text.Read.Lex.$w$sreadIntP_closure;
         const Text.Read.Lex.readIntP1_closure;
         const Text.Read.Lex.$wreadIntP_closure;
         const Text.Read.Lex.readIntP2_closure;
         const sat_s3yjm_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.numberToInteger_closure;
         const sat_s3yjF_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.^_$s^_closure;
         const lvl4_r3y9u_closure;
         const $wfracExp_r3y9v_closure;
         const Text.Read.Lex.numberToFixed_integerTake_closure;
         const Text.Read.Lex.numberToFixed_closure;
         const Text.Read.Lex.$wnumberToRational_closure;
         const Text.Read.Lex.numberToRational_closure;
         const sat_s3yll_closure;
         const sat_s3ylr_closure;
         const Text.Read.Lex.$wnumberToRangedRational_closure;
         const Text.Read.Lex.numberToRangedRational2_closure;
         const Text.Read.Lex.numberToRangedRational4_closure;
         const Text.Read.Lex.numberToRangedRational5_closure;
         const Text.Read.Lex.numberToRangedRational_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const sat_s3ymo_closure;
         const sat_s3ymq_closure;
         const Text.Read.Lex.$w$svalDig_closure;
         const Text.Read.Lex.readDecP2_closure;
         const Text.Read.Lex.readDecP3_closure;
         const Text.Read.Lex.readDecP4_closure;
         const Text.Read.Lex.$wvalDig_closure;
         const Text.Read.Lex.$w$sreadIntP'_closure;
         const Text.Read.Lex.$wreadIntP'_closure;
         const Text.Read.Lex.readDecP6_closure;
         const Text.Read.Lex.readOctP1_closure;
         const Text.Read.Lex.readOctP2_closure;
         const Text.Read.Lex.readDecP1_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.readDecP5_closure;
         const Text.Read.Lex.readHexP1_closure;
         const Text.Read.Lex.readHexP2_closure;
         const $wlexDigits_r3y9x_closure;
         const $wlexHexOct_r3y9A_closure;
         const lexHexOct_r3y9B_closure;
         const $wlexFrac_r3y9D_closure;
         const lexFrac_r3y9E_closure;
         const sat_s3yqt_closure;
         const m4_r3y9J_closure;
         const w1_r3ybW_closure;
         const m2_r3y9G_closure;
         const w_r3ybX_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const lvl46_r3ybY_closure;
         const m6_r3y9M_closure;
         const lvl47_r3ybZ_closure;
         const m8_r3y9P_closure;
         const lvl48_r3yc0_closure;
         const m10_r3y9S_closure;
         const lvl49_r3yc1_closure;
         const m12_r3y9V_closure;
         const lvl50_r3yc2_closure;
         const m14_r3y9Y_closure;
         const lvl51_r3yc3_closure;
         const m16_r3ya1_closure;
         const lvl52_r3yc4_closure;
         const m18_r3ya4_closure;
         const lvl53_r3yc5_closure;
         const m20_r3ya7_closure;
         const lvl54_r3yc6_closure;
         const m22_r3yaa_closure;
         const lvl55_r3yc7_closure;
         const m24_r3yad_closure;
         const lvl56_r3yc8_closure;
         const m26_r3yag_closure;
         const lvl57_r3yc9_closure;
         const m28_r3yaj_closure;
         const lvl58_r3yca_closure;
         const m30_r3yam_closure;
         const lvl59_r3ycb_closure;
         const m32_r3yap_closure;
         const lvl60_r3ycc_closure;
         const m34_r3yas_closure;
         const lvl61_r3ycd_closure;
         const m36_r3yav_closure;
         const lvl62_r3yce_closure;
         const m38_r3yay_closure;
         const lvl63_r3ycf_closure;
         const m40_r3yaB_closure;
         const lvl64_r3ycg_closure;
         const m42_r3yaE_closure;
         const lvl65_r3ych_closure;
         const m44_r3yaH_closure;
         const lvl66_r3yci_closure;
         const m46_r3yaK_closure;
         const lvl67_r3ycj_closure;
         const m48_r3yaN_closure;
         const lvl68_r3yck_closure;
         const m50_r3yaQ_closure;
         const lvl69_r3ycl_closure;
         const m52_r3yaT_closure;
         const lvl70_r3ycm_closure;
         const m54_r3yaW_closure;
         const lvl71_r3ycn_closure;
         const m56_r3yaZ_closure;
         const lvl72_r3yco_closure;
         const m58_r3yb2_closure;
         const lvl73_r3ycp_closure;
         const m60_r3yb5_closure;
         const lvl74_r3ycq_closure;
         const m62_r3yb8_closure;
         const lvl75_r3ycr_closure;
         const m64_r3ybb_closure;
         const lvl76_r3ycs_closure;
         const m66_r3ybe_closure;
         const lvl77_r3yct_closure;
         const m68_r3ybh_closure;
         const lvl78_r3ycu_closure;
         const GHC.Char.$wlvl_closure;
         const lvl7_r3ybj_closure;
         const Text.ParserCombinators.ReadP.choice_closure;
         const lvl111_r3yd1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Text.Read.Lex.lexChar2_closure;
         const Text.Read.Lex.$wconsumeEmpties_closure;
         const Text.Read.Lex.$wlvl_closure;
         const Text.Read.Lex.lexChar3_closure;
         const Text.Read.Lex.lexChar5_closure;
         const Text.Read.Lex.$wlexChar_closure;
         const Text.Read.Lex.lexChar1_closure;
         const lexStrItem_r3yd4_closure;
         const body_r3yd5_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.valInteger_closure;
         const lexExp_r3yd6_closure;
         const $wlexDecNumber_r3yd9_closure;
         const lexDecNumber_r3yda_closure;
         const isIdfChar_r3y8W_closure;
         const reserved_ops29_r3y9q_closure;
         const Text.Read.Lex.isSymbolChar3_closure;
         const Text.Read.Lex.expect2_closure;
         const Text.Read.Lex.$wlex_closure;
         const Text.Read.Lex.lex1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Text.Read.Lex.expect1_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const Text.Read.Lex.$whsLex_closure;
         const Text.Read.Lex.hsLex1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.023754548 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:58:22.024789536 UTC

[section ""cstring" . Text.Read.Lex.$trModule4_bytes" {
     Text.Read.Lex.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.0264894 UTC

[section ""data" . Text.Read.Lex.$trModule3_closure" {
     Text.Read.Lex.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.028237665 UTC

[section ""cstring" . Text.Read.Lex.$trModule2_bytes" {
     Text.Read.Lex.$trModule2_bytes:
         I8[] [84,101,120,116,46,82,101,97,100,46,76,101,120]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.030041755 UTC

[section ""data" . Text.Read.Lex.$trModule1_closure" {
     Text.Read.Lex.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.031767083 UTC

[section ""data" . Text.Read.Lex.$trModule_closure" {
     Text.Read.Lex.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.Read.Lex.$trModule3_closure+1;
         const Text.Read.Lex.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.033507293 UTC

[section ""data" . $krep_r3y8E_closure" {
     $krep_r3y8E_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.035268513 UTC

[section ""data" . $krep1_r3y8F_closure" {
     $krep1_r3y8F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.037053467 UTC

[section ""data" . $krep2_r3y8G_closure" {
     $krep2_r3y8G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.038832775 UTC

[section ""data" . $krep3_r3y8H_closure" {
     $krep3_r3y8H_closure:
         const :_con_info;
         const $krep_r3y8E_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.04050034 UTC

[section ""data" . $krep4_r3y8I_closure" {
     $krep4_r3y8I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_r3y8H_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.042302272 UTC

[section ""data" . $krep5_r3y8J_closure" {
     $krep5_r3y8J_closure:
         const :_con_info;
         const $krep1_r3y8F_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.044001615 UTC

[section ""data" . $krep6_r3y8K_closure" {
     $krep6_r3y8K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep5_r3y8J_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.045781131 UTC

[section ""data" . $krep7_r3y8L_closure" {
     $krep7_r3y8L_closure:
         const :_con_info;
         const $krep6_r3y8K_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.047634677 UTC

[section ""data" . $krep8_r3y8M_closure" {
     $krep8_r3y8M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep7_r3y8L_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.050472023 UTC

[section ""data" . $krep9_r3y8N_closure" {
     $krep9_r3y8N_closure:
         const :_con_info;
         const $krep2_r3y8G_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.052252519 UTC

[section ""data" . $krep10_r3y8O_closure" {
     $krep10_r3y8O_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep9_r3y8N_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.054579351 UTC

[section ""cstring" . Text.Read.Lex.$tcNumber2_bytes" {
     Text.Read.Lex.$tcNumber2_bytes:
         I8[] [78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.056347925 UTC

[section ""data" . Text.Read.Lex.$tcNumber1_closure" {
     Text.Read.Lex.$tcNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tcNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.058088244 UTC

[section ""data" . Text.Read.Lex.$tcNumber_closure" {
     Text.Read.Lex.$tcNumber_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tcNumber1_closure+1;
         const GHC.Types.krep$*_closure;
         const 309030926258572567;
         const 15861928963352354800;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.059881131 UTC

[section ""data" . $krep11_r3y8P_closure" {
     $krep11_r3y8P_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Read.Lex.$tcNumber_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.061680579 UTC

[section ""data" . $krep12_r3y8Q_closure" {
     $krep12_r3y8Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3y8I_closure+1;
         const $krep11_r3y8P_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.063437239 UTC

[section ""data" . $krep13_r3y8R_closure" {
     $krep13_r3y8R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r3y8M_closure+1;
         const $krep12_r3y8Q_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.065200648 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal1_closure" {
     Text.Read.Lex.$tc'MkDecimal1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r3y8K_closure+1;
         const $krep13_r3y8R_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.067000786 UTC

[section ""cstring" . Text.Read.Lex.$tc'MkDecimal3_bytes" {
     Text.Read.Lex.$tc'MkDecimal3_bytes:
         I8[] [39,77,107,68,101,99,105,109,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.068787326 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal2_closure" {
     Text.Read.Lex.$tc'MkDecimal2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'MkDecimal3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.070610098 UTC

[section ""data" . Text.Read.Lex.$tc'MkDecimal_closure" {
     Text.Read.Lex.$tc'MkDecimal_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'MkDecimal2_closure+1;
         const Text.Read.Lex.$tc'MkDecimal1_closure+4;
         const 3768064156751246198;
         const 12661213050981530502;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.072404334 UTC

[section ""data" . $krep14_r3y8S_closure" {
     $krep14_r3y8S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r3y8K_closure+1;
         const $krep11_r3y8P_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.07467113 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber1_closure" {
     Text.Read.Lex.$tc'MkNumber1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3y8F_closure+1;
         const $krep14_r3y8S_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.076883471 UTC

[section ""cstring" . Text.Read.Lex.$tc'MkNumber3_bytes" {
     Text.Read.Lex.$tc'MkNumber3_bytes:
         I8[] [39,77,107,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.078575704 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber2_closure" {
     Text.Read.Lex.$tc'MkNumber2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'MkNumber3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.08028188 UTC

[section ""data" . Text.Read.Lex.$tc'MkNumber_closure" {
     Text.Read.Lex.$tc'MkNumber_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'MkNumber2_closure+1;
         const Text.Read.Lex.$tc'MkNumber1_closure+4;
         const 13396293166029931455;
         const 9655480518931438202;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.082171124 UTC

[section ""cstring" . Text.Read.Lex.$tcLexeme2_bytes" {
     Text.Read.Lex.$tcLexeme2_bytes:
         I8[] [76,101,120,101,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.083785317 UTC

[section ""data" . Text.Read.Lex.$tcLexeme1_closure" {
     Text.Read.Lex.$tcLexeme1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tcLexeme2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.086129768 UTC

[section ""data" . Text.Read.Lex.$tcLexeme_closure" {
     Text.Read.Lex.$tcLexeme_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tcLexeme1_closure+1;
         const GHC.Types.krep$*_closure;
         const 80462090517814070;
         const 11862718491065697853;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.087990201 UTC

[section ""data" . Text.Read.Lex.$tc'EOF1_closure" {
     Text.Read.Lex.$tc'EOF1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.Read.Lex.$tcLexeme_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.089699841 UTC

[section ""cstring" . Text.Read.Lex.$tc'EOF3_bytes" {
     Text.Read.Lex.$tc'EOF3_bytes:
         I8[] [39,69,79,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.091395808 UTC

[section ""data" . Text.Read.Lex.$tc'EOF2_closure" {
     Text.Read.Lex.$tc'EOF2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'EOF3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.093096224 UTC

[section ""data" . Text.Read.Lex.$tc'EOF_closure" {
     Text.Read.Lex.$tc'EOF_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'EOF2_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3510729917506789415;
         const 3927434500167946503;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.094974481 UTC

[section ""data" . Text.Read.Lex.$tc'Ident1_closure" {
     Text.Read.Lex.$tc'Ident1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r3y8O_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.096714071 UTC

[section ""cstring" . Text.Read.Lex.$tc'String2_bytes" {
     Text.Read.Lex.$tc'String2_bytes:
         I8[] [39,83,116,114,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.098460804 UTC

[section ""data" . Text.Read.Lex.$tc'String1_closure" {
     Text.Read.Lex.$tc'String1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'String2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.100155075 UTC

[section ""data" . Text.Read.Lex.$tc'String_closure" {
     Text.Read.Lex.$tc'String_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'String1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 4234975262003182519;
         const 13764813366371540099;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.102480298 UTC

[section ""cstring" . Text.Read.Lex.$tc'Punc2_bytes" {
     Text.Read.Lex.$tc'Punc2_bytes:
         I8[] [39,80,117,110,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.104169365 UTC

[section ""data" . Text.Read.Lex.$tc'Punc1_closure" {
     Text.Read.Lex.$tc'Punc1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Punc2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.105800957 UTC

[section ""data" . Text.Read.Lex.$tc'Punc_closure" {
     Text.Read.Lex.$tc'Punc_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Punc1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 12518860736485891069;
         const 4367633479442506190;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.107567643 UTC

[section ""cstring" . Text.Read.Lex.$tc'Ident3_bytes" {
     Text.Read.Lex.$tc'Ident3_bytes:
         I8[] [39,73,100,101,110,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.109270219 UTC

[section ""data" . Text.Read.Lex.$tc'Ident2_closure" {
     Text.Read.Lex.$tc'Ident2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Ident3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.110943696 UTC

[section ""data" . Text.Read.Lex.$tc'Ident_closure" {
     Text.Read.Lex.$tc'Ident_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Ident2_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 17378133866674838049;
         const 11361322998352874125;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.112785967 UTC

[section ""cstring" . Text.Read.Lex.$tc'Symbol2_bytes" {
     Text.Read.Lex.$tc'Symbol2_bytes:
         I8[] [39,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.114454941 UTC

[section ""data" . Text.Read.Lex.$tc'Symbol1_closure" {
     Text.Read.Lex.$tc'Symbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Symbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.11621241 UTC

[section ""data" . Text.Read.Lex.$tc'Symbol_closure" {
     Text.Read.Lex.$tc'Symbol_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Symbol1_closure+1;
         const Text.Read.Lex.$tc'Ident1_closure+4;
         const 434905475898525586;
         const 17609692850475477756;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.118295546 UTC

[section ""data" . Text.Read.Lex.$tc'Char1_closure" {
     Text.Read.Lex.$tc'Char1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3y8G_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.120054906 UTC

[section ""cstring" . Text.Read.Lex.$tc'Char3_bytes" {
     Text.Read.Lex.$tc'Char3_bytes:
         I8[] [39,67,104,97,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.121712097 UTC

[section ""data" . Text.Read.Lex.$tc'Char2_closure" {
     Text.Read.Lex.$tc'Char2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Char3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.123430934 UTC

[section ""data" . Text.Read.Lex.$tc'Char_closure" {
     Text.Read.Lex.$tc'Char_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Char2_closure+1;
         const Text.Read.Lex.$tc'Char1_closure+4;
         const 4794546904228625478;
         const 396576625805862141;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.125232321 UTC

[section ""data" . Text.Read.Lex.$tc'Number1_closure" {
     Text.Read.Lex.$tc'Number1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r3y8P_closure+1;
         const Text.Read.Lex.$tc'EOF1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.127572482 UTC

[section ""cstring" . Text.Read.Lex.$tc'Number3_bytes" {
     Text.Read.Lex.$tc'Number3_bytes:
         I8[] [39,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.130608464 UTC

[section ""data" . Text.Read.Lex.$tc'Number2_closure" {
     Text.Read.Lex.$tc'Number2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.Read.Lex.$tc'Number3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.132293791 UTC

[section ""data" . Text.Read.Lex.$tc'Number_closure" {
     Text.Read.Lex.$tc'Number_closure:
         const GHC.Types.TyCon_con_info;
         const Text.Read.Lex.$trModule_closure+1;
         const Text.Read.Lex.$tc'Number2_closure+1;
         const Text.Read.Lex.$tc'Number1_closure+4;
         const 3115835552307058655;
         const 14198768466951480548;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.134163775 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme9_bytes" {
     Text.Read.Lex.$fShowLexeme9_bytes:
         I8[] [77,107,68,101,99,105,109,97,108,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.136095906 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme8_closure" {
     Text.Read.Lex.$fShowLexeme8_closure:
         const Text.Read.Lex.$fShowLexeme8_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme8_entry() //  [R1]
         { info_tbl: [(c3Gre,
                       label: Text.Read.Lex.$fShowLexeme8_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gre: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Grf; else goto c3Grg;
       c3Grf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Grg: // global
           (_c3Grb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Grb::I64 == 0) goto c3Grd; else goto c3Grc;
       c3Grd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Grc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Grb::I64;
           R2 = Text.Read.Lex.$fShowLexeme9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.140276418 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme10_closure" {
     Text.Read.Lex.$fShowLexeme10_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.142090474 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme11_bytes" {
     Text.Read.Lex.$fShowLexeme11_bytes:
         I8[] [77,107,78,117,109,98,101,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.150199657 UTC

[section ""data" . Text.Read.Lex.$w$cshowsPrec_closure" {
     Text.Read.Lex.$w$cshowsPrec_closure:
         const Text.Read.Lex.$w$cshowsPrec_info;
         const 0;
 },
 sat_s3G2v_entry() //  [R1]
         { info_tbl: [(c3Gsu,
                       label: sat_s3G2v_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gsu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3GsB; else goto c3GsC;
       c3GsB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GsC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3Gsr_info;
           _s3G2k::P64 = P64[R1 + 16];
           _s3G2o::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3G2k::P64;
           P64[Sp - 24] = _s3G2o::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3GsJ; else goto c3Gss;
       u3GsJ: // global
           call _c3Gsr(R1) args: 0, res: 0, upd: 0;
       c3Gss: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3Gsr() //  [R1]
         { info_tbl: [(c3Gsr,
                       label: block_c3Gsr_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gsr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3GsF; else goto c3GsE;
       c3GsF: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3GsE: // global
           _s3G2q::I64 = I64[R1 + 7];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3Gsy_info;
           R4 = Hp - 24;
           R3 = _s3G2q::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Gsy() //  [R1, R2]
         { info_tbl: [(c3Gsy,
                       label: block_c3Gsy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gsy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GsI; else goto c3GsH;
       c3GsI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3GsH: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 showl_s3G2k_entry() //  [R1, R2]
         { info_tbl: [(c3GsO,
                       label: showl_s3G2k_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GsO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3GsP; else goto c3GsQ;
       c3GsP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GsQ: // global
           I64[Sp - 24] = block_c3Gsh_info;
           _s3G2k::P64 = R1;
           _s3G2j::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3G2j::P64;
           P64[Sp - 8] = _s3G2k::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3GsX; else goto c3Gsi;
       u3GsX: // global
           call _c3Gsh(R1) args: 0, res: 0, upd: 0;
       c3Gsi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Gsh() //  [R1]
         { info_tbl: [(c3Gsh,
                       label: block_c3Gsh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gsh: // global
           if (R1 & 7 == 1) goto c3GsL; else goto c3GsM;
       c3GsL: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GsM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3GsW; else goto c3GsV;
       c3GsW: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GsV: // global
           _s3G2n::P64 = P64[R1 + 6];
           _s3G2o::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s3G2v_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3G2n::P64;
           P64[Hp - 24] = _s3G2o::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G2w_entry() //  [R1]
         { info_tbl: [(c3GsY,
                       label: sat_s3G2w_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GsY: // global
           _s3G2w::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GsZ; else goto c3Gt0;
       c3Gt0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Gt2; else goto c3Gt1;
       c3Gt2: // global
           HpAlloc = 40;
           goto c3GsZ;
       c3GsZ: // global
           R1 = _s3G2w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gt1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G2w::P64;
           _s3G2b::P64 = P64[_s3G2w::P64 + 16];
           _s3G2g::P64 = P64[_s3G2w::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure;
           P64[Hp - 16] = _s3G2b::P64;
           I64[Hp - 8] = showl_s3G2k_info;
           P64[Hp] = Hp - 30;
           R2 = _s3G2g::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_s3G2k_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G2A_entry() //  [R1]
         { info_tbl: [(c3Gt3,
                       label: sat_s3G2A_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gt3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Gt7; else goto c3Gt8;
       c3Gt7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gt8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3Gs2_info;
           _s3G2b::P64 = P64[R1 + 16];
           _s3G2g::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3G2b::P64;
           P64[Sp - 24] = _s3G2g::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3Gtf; else goto c3Gs3;
       u3Gtf: // global
           call _c3Gs2(R1) args: 0, res: 0, upd: 0;
       c3Gs3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3Gs2() //  [R1]
         { info_tbl: [(c3Gs2,
                       label: block_c3Gs2_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gs2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Gtb; else goto c3Gta;
       c3Gtb: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Gta: // global
           _s3G2i::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_s3G2w_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3Gt4_info;
           R4 = Hp - 24;
           R3 = _s3G2i::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Gt4() //  [R1, R2]
         { info_tbl: [(c3Gt4,
                       label: block_c3Gt4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gt4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Gte; else goto c3Gtd;
       c3Gte: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3Gtd: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G2B_entry() //  [R1]
         { info_tbl: [(c3Gtk,
                       label: sat_s3G2B_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gtk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Gtl; else goto c3Gtm;
       c3Gtl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gtm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3GrS_info;
           _s3G2b::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3G2b::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3Gtt; else goto c3GrT;
       u3Gtt: // global
           call _c3GrS(R1) args: 0, res: 0, upd: 0;
       c3GrT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3GrS() //  [R1]
         { info_tbl: [(c3GrS,
                       label: block_c3GrS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GrS: // global
           _s3G2b::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3Gth; else goto c3Gti;
       c3Gth: // global
           R3 = _s3G2b::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       c3Gti: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Gts; else goto c3Gtr;
       c3Gts: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Gtr: // global
           _s3G2f::P64 = P64[R1 + 6];
           _s3G2g::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_s3G2A_info;
           P64[Hp - 40] = _s3G2b::P64;
           P64[Hp - 32] = _s3G2f::P64;
           P64[Hp - 24] = _s3G2g::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G2G_entry() //  [R1]
         { info_tbl: [(c3Gtu,
                       label: sat_s3G2G_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gtu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Gtz; else goto c3GtA;
       c3Gtz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GtA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3GrJ_info;
           _s3G29::P64 = P64[R1 + 24];
           _s3G2b::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s3G29::P64;
           P64[Sp - 24] = _s3G2b::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3GtH; else goto c3GrK;
       u3GtH: // global
           call _c3GrJ(R1) args: 0, res: 0, upd: 0;
       c3GrK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3GrJ() //  [R1]
         { info_tbl: [(c3GrJ,
                       label: block_c3GrJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GrJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GtD; else goto c3GtC;
       c3GtD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3GtC: // global
           _s3G2d::I64 = I64[R1 + 7];
           I64[Hp - 48] = sat_s3G2B_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp + 16] = block_c3Gtw_info;
           R4 = Hp - 14;
           R3 = _s3G2d::I64;
           R2 = 11;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Gtw() //  [R1, R2]
         { info_tbl: [(c3Gtw,
                       label: block_c3Gtw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gtw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GtG; else goto c3GtF;
       c3GtG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3GtF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 p_s3G2a_entry() //  [R1, R2]
         { info_tbl: [(c3GtI,
                       label: p_s3G2a_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GtI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3GtM; else goto c3GtL;
       c3GtM: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GtL: // global
           _s3G28::P64 = P64[R1 + 7];
           _s3G29::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s3G2G_info;
           P64[Hp - 16] = _s3G28::P64;
           P64[Hp - 8] = _s3G29::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = Text.Read.Lex.$fShowLexeme11_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G2K_entry() //  [R1]
         { info_tbl: [(c3Gu1,
                       label: sat_s3G2K_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gu1: // global
           _s3G2K::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Gu2; else goto c3Gu3;
       c3Gu3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Gu5; else goto c3Gu4;
       c3Gu5: // global
           HpAlloc = 24;
           goto c3Gu2;
       c3Gu2: // global
           R1 = _s3G2K::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gu4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G2K::P64;
           _s3G2a::P64 = P64[_s3G2K::P64 + 16];
           _s3G2I::P64 = P64[_s3G2K::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3G2I::P64;
           R2 = Hp - 14;
           R1 = _s3G2a::P64;
           Sp = Sp - 16;
           call p_s3G2a_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G2L_entry() //  [R1, R2]
         { info_tbl: [(c3Gu7,
                       label: sat_s3G2L_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gu7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Gub; else goto c3Gua;
       c3Gub: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Gua: // global
           _s3G2a::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G2K_info;
           P64[Hp - 32] = _s3G2a::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 f_s3G2P_entry() //  [R1]
         { info_tbl: [(c3Gui,
                       label: f_s3G2P_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gui: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Guj; else goto c3Guk;
       c3Guj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Guk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = Text.Read.Lex.$fShowLexeme10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 g_s3G2Q_entry() //  [R1]
         { info_tbl: [(c3Gup,
                       label: g_s3G2Q_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gup: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Guq; else goto c3Gur;
       c3Guq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gur: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = Text.Read.Lex.$fShowLexeme10_closure+1;
           R2 = GHC.Show.$fShowInteger_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G2V_entry() //  [R1]
         { info_tbl: [(c3GuD,
                       label: sat_s3G2V_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GuD: // global
           _s3G2V::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GuE; else goto c3GuF;
       c3GuF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GuH; else goto c3GuG;
       c3GuH: // global
           HpAlloc = 56;
           goto c3GuE;
       c3GuE: // global
           R1 = _s3G2V::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GuG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G2V::P64;
           _s3G2P::P64 = P64[_s3G2V::P64 + 16];
           _s3G2Q::P64 = P64[_s3G2V::P64 + 24];
           _s3G2S::P64 = P64[_s3G2V::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3G2Q::P64;
           P64[Hp - 24] = _s3G2S::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _s3G2P::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 g1_s3G2R_entry() //  [R1, R2]
         { info_tbl: [(c3GuJ,
                       label: g1_s3G2R_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GuJ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3GuN; else goto c3GuM;
       c3GuN: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GuM: // global
           _s3G2M::P64 = P64[R1 + 7];
           _s3G2P::P64 = P64[R1 + 15];
           _s3G2Q::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_s3G2V_info;
           P64[Hp - 40] = _s3G2P::P64;
           P64[Hp - 32] = _s3G2Q::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 56;
           R4 = Hp - 14;
           R3 = _s3G2M::P64;
           R2 = GHC.Show.$fShowInt1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G2Z_entry() //  [R1]
         { info_tbl: [(c3Gv0,
                       label: sat_s3G2Z_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gv0: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_s3G2R_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G30_entry() //  [R1, R2]
         { info_tbl: [(c3Gv3,
                       label: sat_s3G30_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gv3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Gv7; else goto c3Gv6;
       c3Gv7: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Gv6: // global
           _s3G2R::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3G2Z_info;
           P64[Hp - 8] = _s3G2R::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme8_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G33_entry() //  [R1]
         { info_tbl: [(c3Gvn,
                       label: sat_s3G33_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gvn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Gvr; else goto c3Gvq;
       c3Gvr: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gvq: // global
           _s3G2R::P64 = P64[R1 + 16];
           _s3G31::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3G31::P64;
           R2 = Hp - 14;
           R1 = _s3G2R::P64;
           call g1_s3G2R_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G34_entry() //  [R1]
         { info_tbl: [(c3Gvs,
                       label: sat_s3G34_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gvs: // global
           _s3G34::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Gvt; else goto c3Gvu;
       c3Gvu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Gvw; else goto c3Gvv;
       c3Gvw: // global
           HpAlloc = 32;
           goto c3Gvt;
       c3Gvt: // global
           R1 = _s3G34::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Gvv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G34::P64;
           _s3G2R::P64 = P64[_s3G34::P64 + 16];
           _s3G31::P64 = P64[_s3G34::P64 + 24];
           I64[Hp - 24] = sat_s3G33_info;
           P64[Hp - 8] = _s3G2R::P64;
           P64[Hp] = _s3G31::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme8_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G35_entry() //  [R1, R2]
         { info_tbl: [(c3Gvy,
                       label: sat_s3G35_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gvy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GvC; else goto c3GvB;
       c3GvC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GvB: // global
           _s3G2R::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G34_info;
           P64[Hp - 32] = _s3G2R::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c3GvH,
                       label: Text.Read.Lex.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GvH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GvI; else goto c3GvJ;
       c3GvI: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3GvJ: // global
           I64[Sp - 16] = block_c3Grv_info;
           R1 = R3;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3GvW; else goto c3Grw;
       u3GvW: // global
           call _c3Grv(R1) args: 0, res: 0, upd: 0;
       c3Grw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Grv() //  [R1]
         { info_tbl: [(c3Grv,
                       label: block_c3Grv_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Grv: // global
           _s3G25::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c3GvE; else goto c3GvF;
       c3GvE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3GvM; else goto c3GvL;
       c3GvM: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GvL: // global
           _s3G28::P64 = P64[R1 + 7];
           _s3G29::P64 = P64[R1 + 15];
           I64[Hp - 32] = p_s3G2a_info;
           P64[Hp - 24] = _s3G28::P64;
           P64[Hp - 16] = _s3G29::P64;
           _c3GrA::P64 = Hp - 31;
           if (%MO_S_Lt_W64(_s3G25::I64, 11)) goto c3GvO; else goto c3GvP;
       c3GvO: // global
           Hp = Hp - 16;
           R1 = _c3GrA::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GvP: // global
           I64[Hp - 8] = sat_s3G2L_info;
           P64[Hp] = _c3GrA::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GvF: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3GvS; else goto c3GvR;
       c3GvS: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GvR: // global
           _s3G2M::P64 = P64[R1 + 6];
           _s3G2N::P64 = P64[R1 + 14];
           _s3G2O::P64 = P64[R1 + 22];
           I64[Hp - 88] = f_s3G2P_info;
           P64[Hp - 72] = _s3G2N::P64;
           I64[Hp - 64] = g_s3G2Q_info;
           P64[Hp - 48] = _s3G2O::P64;
           I64[Hp - 40] = g1_s3G2R_info;
           P64[Hp - 32] = _s3G2M::P64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 64;
           _c3Gus::P64 = Hp - 39;
           if (%MO_S_Lt_W64(_s3G25::I64, 11)) goto c3GvU; else goto c3GvV;
       c3GvU: // global
           I64[Hp - 8] = sat_s3G30_info;
           P64[Hp] = _c3Gus::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GvV: // global
           I64[Hp - 8] = sat_s3G35_info;
           P64[Hp] = _c3Gus::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.220467116 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshowsPrec_closure" {
     Text.Read.Lex.$fShowNumber_$cshowsPrec_closure:
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c3Gzk,
                       label: Text.Read.Lex.$fShowNumber_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gzk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Gzl; else goto c3Gzm;
       c3Gzl: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fShowNumber_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Gzm: // global
           I64[Sp - 16] = block_c3Gzh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Gzq; else goto c3Gzi;
       u3Gzq: // global
           call _c3Gzh(R1) args: 0, res: 0, upd: 0;
       c3Gzi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Gzh() //  [R1]
         { info_tbl: [(c3Gzh,
                       label: block_c3Gzh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Gzh: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.226473932 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme2_closure" {
     Text.Read.Lex.$fShowLexeme2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.22839339 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshow_closure" {
     Text.Read.Lex.$fShowNumber_$cshow_closure:
         const Text.Read.Lex.$fShowNumber_$cshow_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshow_entry() //  [R2]
         { info_tbl: [(c3GzG,
                       label: Text.Read.Lex.$fShowNumber_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GzG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GzH; else goto c3GzI;
       c3GzH: // global
           R2 = R2;
           R1 = Text.Read.Lex.$fShowNumber_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GzI: // global
           R3 = R2;
           R2 = 0;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.232594546 UTC

[section ""data" . Text.Read.Lex.$fShowNumber1_closure" {
     Text.Read.Lex.$fShowNumber1_closure:
         const Text.Read.Lex.$fShowNumber1_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber1_entry() //  [R2]
         { info_tbl: [(c3GzV,
                       label: Text.Read.Lex.$fShowNumber1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GzV: // global
           R3 = R2;
           R2 = 0;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.236847643 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_$cshowList_closure" {
     Text.Read.Lex.$fShowNumber_$cshowList_closure:
         const Text.Read.Lex.$fShowNumber_$cshowList_info;
         const 0;
 },
 Text.Read.Lex.$fShowNumber_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c3GA6,
                       label: Text.Read.Lex.$fShowNumber_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GA6: // global
           R4 = R3;
           R3 = R2;
           R2 = Text.Read.Lex.$fShowNumber1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.241949408 UTC

[section ""data" . Text.Read.Lex.$fShowNumber_closure" {
     Text.Read.Lex.$fShowNumber_closure:
         const GHC.Show.C:Show_con_info;
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_closure+2;
         const Text.Read.Lex.$fShowNumber_$cshow_closure+1;
         const Text.Read.Lex.$fShowNumber_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.244062083 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme7_bytes" {
     Text.Read.Lex.$fShowLexeme7_bytes:
         I8[] [78,117,109,98,101,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.246779619 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme6_closure" {
     Text.Read.Lex.$fShowLexeme6_closure:
         const Text.Read.Lex.$fShowLexeme6_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme6_entry() //  [R1]
         { info_tbl: [(c3GAl,
                       label: Text.Read.Lex.$fShowLexeme6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GAl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GAm; else goto c3GAn;
       c3GAm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GAn: // global
           (_c3GAi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GAi::I64 == 0) goto c3GAk; else goto c3GAj;
       c3GAk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GAj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GAi::I64;
           R2 = Text.Read.Lex.$fShowLexeme7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.252690127 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme5_bytes" {
     Text.Read.Lex.$fShowLexeme5_bytes:
         I8[] [69,79,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.255395645 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme4_closure" {
     Text.Read.Lex.$fShowLexeme4_closure:
         const Text.Read.Lex.$fShowLexeme4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme4_entry() //  [R1]
         { info_tbl: [(c3GAD,
                       label: Text.Read.Lex.$fShowLexeme4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GAD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GAE; else goto c3GAF;
       c3GAE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GAF: // global
           (_c3GAA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GAA::I64 == 0) goto c3GAC; else goto c3GAB;
       c3GAC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GAB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GAA::I64;
           R2 = Text.Read.Lex.$fShowLexeme5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.261044603 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme3_closure" {
     Text.Read.Lex.$fShowLexeme3_closure:
         const Text.Read.Lex.$fShowLexeme3_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme3_entry() //  [R2]
         { info_tbl: [(c3GAS,
                       label: Text.Read.Lex.$fShowLexeme3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GAS: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.266607975 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme16_bytes" {
     Text.Read.Lex.$fShowLexeme16_bytes:
         I8[] [67,104,97,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.268912171 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme15_bytes" {
     Text.Read.Lex.$fShowLexeme15_bytes:
         I8[] [83,116,114,105,110,103,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.271266746 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme14_bytes" {
     Text.Read.Lex.$fShowLexeme14_bytes:
         I8[] [80,117,110,99,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.273653871 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme13_bytes" {
     Text.Read.Lex.$fShowLexeme13_bytes:
         I8[] [73,100,101,110,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.275414926 UTC

[section ""cstring" . Text.Read.Lex.$fShowLexeme12_bytes" {
     Text.Read.Lex.$fShowLexeme12_bytes:
         I8[] [83,121,109,98,111,108,32]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.284137837 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure" {
     Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure:
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_info;
         const 0;
 },
 sat_s3G3o_entry() //  [R1]
         { info_tbl: [(c3GBx,
                       label: sat_s3G3o_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GBx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3GBy; else goto c3GBz;
       c3GBy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GBz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3GBu_info;
           _s3G3l::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3G3l::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3GBD; else goto c3GBv;
       u3GBD: // global
           call _c3GBu(R1) args: 0, res: 0, upd: 0;
       c3GBv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3GBu() //  [R1]
         { info_tbl: [(c3GBu,
                       label: block_c3GBu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GBu: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G3p_entry() //  [R1, R2]
         { info_tbl: [(c3GBE,
                       label: sat_s3G3p_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GBE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3GBI; else goto c3GBH;
       c3GBI: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GBH: // global
           _s3G3h::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3G3o_info;
           P64[Hp - 8] = _s3G3h::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G3u_entry() //  [R1]
         { info_tbl: [(c3GC0,
                       label: sat_s3G3u_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GC0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3GC4; else goto c3GC5;
       c3GC4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GC5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3GBX_info;
           _s3G3q::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3G3q::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3GC9; else goto c3GBY;
       u3GC9: // global
           call _c3GBX(R1) args: 0, res: 0, upd: 0;
       c3GBY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3GBX() //  [R1]
         { info_tbl: [(c3GBX,
                       label: block_c3GBX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GBX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GC8; else goto c3GC7;
       c3GC8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3GC7: // global
           _s3G3s::I64 = I64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 14;
           R2 = _s3G3s::I64;
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G3v_entry() //  [R1]
         { info_tbl: [(c3GCa,
                       label: sat_s3G3v_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GCa: // global
           _s3G3v::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GCb; else goto c3GCc;
       c3GCc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3GCe; else goto c3GCd;
       c3GCe: // global
           HpAlloc = 32;
           goto c3GCb;
       c3GCb: // global
           R1 = _s3G3v::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GCd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G3v::P64;
           _s3G3h::P64 = P64[_s3G3v::P64 + 16];
           _s3G3q::P64 = P64[_s3G3v::P64 + 24];
           I64[Hp - 24] = sat_s3G3u_info;
           P64[Hp - 8] = _s3G3h::P64;
           P64[Hp] = _s3G3q::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G3w_entry() //  [R1, R2]
         { info_tbl: [(c3GCg,
                       label: sat_s3G3w_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GCg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GCk; else goto c3GCj;
       c3GCk: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GCj: // global
           _s3G3h::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G3v_info;
           P64[Hp - 32] = _s3G3h::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G3D_entry() //  [R1]
         { info_tbl: [(c3GCF,
                       label: sat_s3G3D_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GCF: // global
           _s3G3D::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GCG; else goto c3GCH;
       c3GCH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GCJ; else goto c3GCI;
       c3GCJ: // global
           HpAlloc = 24;
           goto c3GCG;
       c3GCG: // global
           R1 = _s3G3D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GCI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G3D::P64;
           _s3G3x::P64 = P64[_s3G3D::P64 + 16];
           _s3G3B::P64 = P64[_s3G3D::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3G3B::P64;
           R3 = Hp - 14;
           R2 = _s3G3x::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G3F_entry() //  [R1, R2]
         { info_tbl: [(c3GCL,
                       label: sat_s3G3F_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GCL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GCP; else goto c3GCO;
       c3GCP: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GCO: // global
           _s3G3x::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G3D_info;
           P64[Hp - 32] = _s3G3x::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G3J_entry() //  [R1]
         { info_tbl: [(c3GD6,
                       label: sat_s3G3J_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GD6: // global
           _s3G3J::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GD7; else goto c3GD8;
       c3GD8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3GDa; else goto c3GD9;
       c3GDa: // global
           HpAlloc = 48;
           goto c3GD7;
       c3GD7: // global
           R1 = _s3G3J::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GD9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G3J::P64;
           _s3G3x::P64 = P64[_s3G3J::P64 + 16];
           _s3G3G::P64 = P64[_s3G3J::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3G3G::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3G3x::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G3L_entry() //  [R1]
         { info_tbl: [(c3GDc,
                       label: sat_s3G3L_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GDc: // global
           _s3G3L::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GDd; else goto c3GDe;
       c3GDe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GDg; else goto c3GDf;
       c3GDg: // global
           HpAlloc = 56;
           goto c3GDd;
       c3GDd: // global
           R1 = _s3G3L::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GDf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G3L::P64;
           _s3G3x::P64 = P64[_s3G3L::P64 + 16];
           _s3G3G::P64 = P64[_s3G3L::P64 + 24];
           I64[Hp - 48] = sat_s3G3J_info;
           P64[Hp - 32] = _s3G3x::P64;
           P64[Hp - 24] = _s3G3G::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G3M_entry() //  [R1, R2]
         { info_tbl: [(c3GDi,
                       label: sat_s3G3M_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GDi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GDm; else goto c3GDl;
       c3GDm: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GDl: // global
           _s3G3x::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G3L_info;
           P64[Hp - 32] = _s3G3x::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G3T_entry() //  [R1]
         { info_tbl: [(c3GDH,
                       label: sat_s3G3T_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GDH: // global
           _s3G3T::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GDI; else goto c3GDJ;
       c3GDJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GDL; else goto c3GDK;
       c3GDL: // global
           HpAlloc = 24;
           goto c3GDI;
       c3GDI: // global
           R1 = _s3G3T::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GDK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G3T::P64;
           _s3G3N::P64 = P64[_s3G3T::P64 + 16];
           _s3G3R::P64 = P64[_s3G3T::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3G3R::P64;
           R3 = Hp - 14;
           R2 = _s3G3N::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G3V_entry() //  [R1, R2]
         { info_tbl: [(c3GDN,
                       label: sat_s3G3V_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GDN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GDR; else goto c3GDQ;
       c3GDR: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GDQ: // global
           _s3G3N::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G3T_info;
           P64[Hp - 32] = _s3G3N::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G3Z_entry() //  [R1]
         { info_tbl: [(c3GE8,
                       label: sat_s3G3Z_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GE8: // global
           _s3G3Z::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GE9; else goto c3GEa;
       c3GEa: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3GEc; else goto c3GEb;
       c3GEc: // global
           HpAlloc = 48;
           goto c3GE9;
       c3GE9: // global
           R1 = _s3G3Z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GEb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G3Z::P64;
           _s3G3N::P64 = P64[_s3G3Z::P64 + 16];
           _s3G3W::P64 = P64[_s3G3Z::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3G3W::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3G3N::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G41_entry() //  [R1]
         { info_tbl: [(c3GEe,
                       label: sat_s3G41_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GEe: // global
           _s3G41::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GEf; else goto c3GEg;
       c3GEg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GEi; else goto c3GEh;
       c3GEi: // global
           HpAlloc = 56;
           goto c3GEf;
       c3GEf: // global
           R1 = _s3G41::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GEh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G41::P64;
           _s3G3N::P64 = P64[_s3G41::P64 + 16];
           _s3G3W::P64 = P64[_s3G41::P64 + 24];
           I64[Hp - 48] = sat_s3G3Z_info;
           P64[Hp - 32] = _s3G3N::P64;
           P64[Hp - 24] = _s3G3W::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G42_entry() //  [R1, R2]
         { info_tbl: [(c3GEk,
                       label: sat_s3G42_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GEk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GEo; else goto c3GEn;
       c3GEo: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GEn: // global
           _s3G3N::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G41_info;
           P64[Hp - 32] = _s3G3N::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G49_entry() //  [R1]
         { info_tbl: [(c3GEJ,
                       label: sat_s3G49_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GEJ: // global
           _s3G49::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GEK; else goto c3GEL;
       c3GEL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GEN; else goto c3GEM;
       c3GEN: // global
           HpAlloc = 24;
           goto c3GEK;
       c3GEK: // global
           R1 = _s3G49::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GEM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G49::P64;
           _s3G43::P64 = P64[_s3G49::P64 + 16];
           _s3G47::P64 = P64[_s3G49::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3G47::P64;
           R3 = Hp - 14;
           R2 = _s3G43::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G4b_entry() //  [R1, R2]
         { info_tbl: [(c3GEP,
                       label: sat_s3G4b_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GEP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GET; else goto c3GES;
       c3GET: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GES: // global
           _s3G43::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G49_info;
           P64[Hp - 32] = _s3G43::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G4f_entry() //  [R1]
         { info_tbl: [(c3GFa,
                       label: sat_s3G4f_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GFa: // global
           _s3G4f::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GFb; else goto c3GFc;
       c3GFc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3GFe; else goto c3GFd;
       c3GFe: // global
           HpAlloc = 48;
           goto c3GFb;
       c3GFb: // global
           R1 = _s3G4f::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GFd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G4f::P64;
           _s3G43::P64 = P64[_s3G4f::P64 + 16];
           _s3G4c::P64 = P64[_s3G4f::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3G4c::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3G43::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G4h_entry() //  [R1]
         { info_tbl: [(c3GFg,
                       label: sat_s3G4h_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GFg: // global
           _s3G4h::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GFh; else goto c3GFi;
       c3GFi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GFk; else goto c3GFj;
       c3GFk: // global
           HpAlloc = 56;
           goto c3GFh;
       c3GFh: // global
           R1 = _s3G4h::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GFj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G4h::P64;
           _s3G43::P64 = P64[_s3G4h::P64 + 16];
           _s3G4c::P64 = P64[_s3G4h::P64 + 24];
           I64[Hp - 48] = sat_s3G4f_info;
           P64[Hp - 32] = _s3G43::P64;
           P64[Hp - 24] = _s3G4c::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G4i_entry() //  [R1, R2]
         { info_tbl: [(c3GFm,
                       label: sat_s3G4i_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GFm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GFq; else goto c3GFp;
       c3GFq: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GFp: // global
           _s3G43::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G4h_info;
           P64[Hp - 32] = _s3G43::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G4p_entry() //  [R1]
         { info_tbl: [(c3GFL,
                       label: sat_s3G4p_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GFL: // global
           _s3G4p::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GFM; else goto c3GFN;
       c3GFN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GFP; else goto c3GFO;
       c3GFP: // global
           HpAlloc = 24;
           goto c3GFM;
       c3GFM: // global
           R1 = _s3G4p::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GFO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G4p::P64;
           _s3G4j::P64 = P64[_s3G4p::P64 + 16];
           _s3G4n::P64 = P64[_s3G4p::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = _s3G4n::P64;
           R3 = Hp - 14;
           R2 = _s3G4j::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G4r_entry() //  [R1, R2]
         { info_tbl: [(c3GFR,
                       label: sat_s3G4r_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GFR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GFV; else goto c3GFU;
       c3GFV: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GFU: // global
           _s3G4j::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G4p_info;
           P64[Hp - 32] = _s3G4j::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G4v_entry() //  [R1]
         { info_tbl: [(c3GGc,
                       label: sat_s3G4v_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GGc: // global
           _s3G4v::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GGd; else goto c3GGe;
       c3GGe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3GGg; else goto c3GGf;
       c3GGg: // global
           HpAlloc = 48;
           goto c3GGd;
       c3GGd: // global
           R1 = _s3G4v::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GGf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G4v::P64;
           _s3G4j::P64 = P64[_s3G4v::P64 + 16];
           _s3G4s::P64 = P64[_s3G4v::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 24] = _s3G4s::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _s3G4j::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G4x_entry() //  [R1]
         { info_tbl: [(c3GGi,
                       label: sat_s3G4x_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GGi: // global
           _s3G4x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GGj; else goto c3GGk;
       c3GGk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GGm; else goto c3GGl;
       c3GGm: // global
           HpAlloc = 56;
           goto c3GGj;
       c3GGj: // global
           R1 = _s3G4x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GGl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G4x::P64;
           _s3G4j::P64 = P64[_s3G4x::P64 + 16];
           _s3G4s::P64 = P64[_s3G4x::P64 + 24];
           I64[Hp - 48] = sat_s3G4v_info;
           P64[Hp - 32] = _s3G4j::P64;
           P64[Hp - 24] = _s3G4s::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G4y_entry() //  [R1, R2]
         { info_tbl: [(c3GGo,
                       label: sat_s3G4y_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GGo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GGs; else goto c3GGr;
       c3GGs: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GGr: // global
           _s3G4j::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G4x_info;
           P64[Hp - 32] = _s3G4j::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s3G4C_entry() //  [R1]
         { info_tbl: [(c3GGE,
                       label: g_s3G4C_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GGE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GGF; else goto c3GGG;
       c3GGF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GGG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G4F_entry() //  [R1]
         { info_tbl: [(c3GGT,
                       label: sat_s3G4F_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GGT: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G4G_entry() //  [R1, R2]
         { info_tbl: [(c3GGW,
                       label: sat_s3G4G_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GGW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3GH0; else goto c3GGZ;
       c3GH0: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GGZ: // global
           _s3G4C::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s3G4F_info;
           P64[Hp - 8] = _s3G4C::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G4J_entry() //  [R1]
         { info_tbl: [(c3GHg,
                       label: sat_s3G4J_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GHg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3GHk; else goto c3GHj;
       c3GHk: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GHj: // global
           _s3G4C::P64 = P64[R1 + 16];
           _s3G4H::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3G4H::P64;
           R2 = Hp - 14;
           R1 = _s3G4C::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G4K_entry() //  [R1]
         { info_tbl: [(c3GHl,
                       label: sat_s3G4K_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GHl: // global
           _s3G4K::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3GHm; else goto c3GHn;
       c3GHn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3GHp; else goto c3GHo;
       c3GHp: // global
           HpAlloc = 32;
           goto c3GHm;
       c3GHm: // global
           R1 = _s3G4K::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GHo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G4K::P64;
           _s3G4C::P64 = P64[_s3G4K::P64 + 16];
           _s3G4H::P64 = P64[_s3G4K::P64 + 24];
           I64[Hp - 24] = sat_s3G4J_info;
           P64[Hp - 8] = _s3G4C::P64;
           P64[Hp] = _s3G4H::P64;
           R3 = Hp - 24;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G4L_entry() //  [R1, R2]
         { info_tbl: [(c3GHr,
                       label: sat_s3G4L_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GHr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3GHv; else goto c3GHu;
       c3GHv: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GHu: // global
           _s3G4C::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s3G4K_info;
           P64[Hp - 32] = _s3G4C::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c3GHF,
                       label: Text.Read.Lex.$fShowLexeme_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GHF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GHG; else goto c3GHH;
       c3GHG: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3GHH: // global
           I64[Sp - 16] = block_c3GB8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3GIx; else goto c3GB9;
       u3GIx: // global
           call _c3GB8(R1) args: 0, res: 0, upd: 0;
       c3GB9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3GB8() //  [R1]
         { info_tbl: [(c3GB8,
                       label: block_c3GB8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GB8: // global
           _s3G3e::P64 = P64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3GHx;
               case 2 : goto c3GHy;
               case 3 : goto c3GHz;
               case 4 : goto c3GHA;
               case 5 : goto c3GHB;
               case 6 : goto c3GHC;
               case 7 : goto c3GHD;
           }
       c3GHD: // global
           R1 = Text.Read.Lex.$fShowLexeme3_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GHC: // global
           I64[Sp] = block_c3GGv_info;
           _s3G4z::P64 = P64[R1 + 2];
           R1 = _s3G3e::P64;
           P64[Sp + 8] = _s3G4z::P64;
           if (R1 & 7 != 0) goto u3GIw; else goto c3GGw;
       u3GIw: // global
           call _c3GGv(R1) args: 0, res: 0, upd: 0;
       c3GGw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GHB: // global
           I64[Sp] = block_c3GFt_info;
           _s3G4j::P64 = P64[R1 + 3];
           R1 = _s3G3e::P64;
           P64[Sp + 8] = _s3G4j::P64;
           if (R1 & 7 != 0) goto u3GIv; else goto c3GFu;
       u3GIv: // global
           call _c3GFt(R1) args: 0, res: 0, upd: 0;
       c3GFu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GHA: // global
           I64[Sp] = block_c3GEr_info;
           _s3G43::P64 = P64[R1 + 4];
           R1 = _s3G3e::P64;
           P64[Sp + 8] = _s3G43::P64;
           if (R1 & 7 != 0) goto u3GIu; else goto c3GEs;
       u3GIu: // global
           call _c3GEr(R1) args: 0, res: 0, upd: 0;
       c3GEs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GHz: // global
           I64[Sp] = block_c3GDp_info;
           _s3G3N::P64 = P64[R1 + 5];
           R1 = _s3G3e::P64;
           P64[Sp + 8] = _s3G3N::P64;
           if (R1 & 7 != 0) goto u3GIt; else goto c3GDq;
       u3GIt: // global
           call _c3GDp(R1) args: 0, res: 0, upd: 0;
       c3GDq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GHy: // global
           I64[Sp] = block_c3GCn_info;
           _s3G3x::P64 = P64[R1 + 6];
           R1 = _s3G3e::P64;
           P64[Sp + 8] = _s3G3x::P64;
           if (R1 & 7 != 0) goto u3GIs; else goto c3GCo;
       u3GIs: // global
           call _c3GCn(R1) args: 0, res: 0, upd: 0;
       c3GCo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GHx: // global
           I64[Sp] = block_c3GBd_info;
           _s3G3h::P64 = P64[R1 + 7];
           R1 = _s3G3e::P64;
           P64[Sp + 8] = _s3G3h::P64;
           if (R1 & 7 != 0) goto u3GIr; else goto c3GBe;
       u3GIr: // global
           call _c3GBd(R1) args: 0, res: 0, upd: 0;
       c3GBe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3GGv() //  [R1]
         { info_tbl: [(c3GGv,
                       label: block_c3GGv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GGv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3GIk; else goto c3GIj;
       c3GIk: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GIj: // global
           _s3G4B::I64 = I64[R1 + 7];
           I64[Hp - 32] = g_s3G4C_info;
           P64[Hp - 16] = P64[Sp + 8];
           _c3GGA::P64 = Hp - 32;
           if (%MO_S_Lt_W64(_s3G4B::I64, 11)) goto c3GIm; else goto c3GIn;
       c3GIm: // global
           I64[Hp - 8] = sat_s3G4G_info;
           P64[Hp] = _c3GGA::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GIn: // global
           I64[Hp - 8] = sat_s3G4L_info;
           P64[Hp] = _c3GGA::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3GFt() //  [R1]
         { info_tbl: [(c3GFt,
                       label: block_c3GFt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GFt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3GId; else goto c3GIc;
       c3GId: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GIc: // global
           _s3G4j::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3GIf; else goto c3GIg;
       c3GIf: // global
           I64[Hp - 8] = sat_s3G4r_info;
           P64[Hp] = _s3G4j::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GIg: // global
           I64[Hp - 8] = sat_s3G4y_info;
           P64[Hp] = _s3G4j::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3GEr() //  [R1]
         { info_tbl: [(c3GEr,
                       label: block_c3GEr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GEr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3GI6; else goto c3GI5;
       c3GI6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GI5: // global
           _s3G43::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3GI8; else goto c3GI9;
       c3GI8: // global
           I64[Hp - 8] = sat_s3G4b_info;
           P64[Hp] = _s3G43::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GI9: // global
           I64[Hp - 8] = sat_s3G4i_info;
           P64[Hp] = _s3G43::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3GDp() //  [R1]
         { info_tbl: [(c3GDp,
                       label: block_c3GDp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GDp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3GHZ; else goto c3GHY;
       c3GHZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GHY: // global
           _s3G3N::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3GI1; else goto c3GI2;
       c3GI1: // global
           I64[Hp - 8] = sat_s3G3V_info;
           P64[Hp] = _s3G3N::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GI2: // global
           I64[Hp - 8] = sat_s3G42_info;
           P64[Hp] = _s3G3N::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3GCn() //  [R1]
         { info_tbl: [(c3GCn,
                       label: block_c3GCn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GCn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3GHS; else goto c3GHR;
       c3GHS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GHR: // global
           _s3G3x::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3GHU; else goto c3GHV;
       c3GHU: // global
           I64[Hp - 8] = sat_s3G3F_info;
           P64[Hp] = _s3G3x::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GHV: // global
           I64[Hp - 8] = sat_s3G3M_info;
           P64[Hp] = _s3G3x::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3GBd() //  [R1]
         { info_tbl: [(c3GBd,
                       label: block_c3GBd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GBd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3GHL; else goto c3GHK;
       c3GHL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GHK: // global
           _s3G3h::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c3GHN; else goto c3GHO;
       c3GHN: // global
           I64[Hp - 8] = sat_s3G3p_info;
           P64[Hp] = _s3G3h::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3GHO: // global
           I64[Hp - 8] = sat_s3G3w_info;
           P64[Hp] = _s3G3h::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.406873062 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme17_closure" {
     Text.Read.Lex.$fShowLexeme17_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)3_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.411401152 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshow_closure" {
     Text.Read.Lex.$fShowLexeme_$cshow_closure:
         const Text.Read.Lex.$fShowLexeme_$cshow_info;
         const 0;
 },
 sat_s3G4R_entry() //  [R1]
         { info_tbl: [(c3GNN,
                       label: sat_s3G4R_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GNN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3GNO; else goto c3GNP;
       c3GNO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GNP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3GNK_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3GNT; else goto c3GNL;
       u3GNT: // global
           call _c3GNK(R1) args: 0, res: 0, upd: 0;
       c3GNL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3GNK() //  [R1]
         { info_tbl: [(c3GNK,
                       label: block_c3GNK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GNK: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec3_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G4T_entry() //  [R1]
         { info_tbl: [(c3GO0,
                       label: sat_s3G4T_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GO0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GO1; else goto c3GO2;
       c3GO1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GO2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G4W_entry() //  [R1]
         { info_tbl: [(c3GO9,
                       label: sat_s3G4W_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GO9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GOa; else goto c3GOb;
       c3GOa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GOb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G4Z_entry() //  [R1]
         { info_tbl: [(c3GOi,
                       label: sat_s3G4Z_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GOi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GOj; else goto c3GOk;
       c3GOj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GOk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G52_entry() //  [R1]
         { info_tbl: [(c3GOr,
                       label: sat_s3G52_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GOr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GOs; else goto c3GOt;
       c3GOs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GOt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.Read.Lex.$fShowLexeme17_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G55_entry() //  [R1]
         { info_tbl: [(c3GOA,
                       label: sat_s3G55_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GOA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GOB; else goto c3GOC;
       c3GOB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GOC: // global
           R3 = P64[R1 + 16];
           R2 = 11;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.$w$cshowsPrec_entry(R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$fShowLexeme_$cshow_entry() //  [R2]
         { info_tbl: [(c3GOM,
                       label: Text.Read.Lex.$fShowLexeme_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GOM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3GON; else goto c3GOO;
       c3GON: // global
           R2 = R2;
           R1 = Text.Read.Lex.$fShowLexeme_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GOO: // global
           I64[Sp - 8] = block_c3GNB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3GPe; else goto c3GNC;
       u3GPe: // global
           call _c3GNB(R1) args: 0, res: 0, upd: 0;
       c3GNC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3GNB() //  [R1]
         { info_tbl: [(c3GNB,
                       label: block_c3GNB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GNB: // global
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3GOE;
               case 2 : goto c3GOF;
               case 3 : goto c3GOG;
               case 4 : goto c3GOH;
               case 5 : goto c3GOI;
               case 6 : goto c3GOJ;
               case 7 : goto c3GOK;
           }
       c3GOK: // global
           R1 = Text.Read.Lex.$fShowLexeme4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3GOJ: // global
           Hp = Hp + 24;
           _s3G4N::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3GPa; else goto c3GP9;
       c3GP9: // global
           _s3G54::P64 = P64[_s3G4N::P64 + 2];
           I64[Hp - 16] = sat_s3G55_info;
           P64[Hp] = _s3G54::P64;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.$fShowLexeme6_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3GOI: // global
           Hp = Hp + 48;
           _s3G4N::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3GP7; else goto c3GP6;
       c3GP6: // global
           _s3G51::P64 = P64[_s3G4N::P64 + 3];
           I64[Hp - 40] = sat_s3G52_info;
           P64[Hp - 24] = _s3G51::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme12_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3GOH: // global
           Hp = Hp + 48;
           _s3G4N::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3GP7; else goto c3GP2;
       c3GP2: // global
           _s3G4Y::P64 = P64[_s3G4N::P64 + 4];
           I64[Hp - 40] = sat_s3G4Z_info;
           P64[Hp - 24] = _s3G4Y::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme13_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3GOG: // global
           Hp = Hp + 48;
           _s3G4N::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3GP7; else goto c3GOY;
       c3GOY: // global
           _s3G4V::P64 = P64[_s3G4N::P64 + 5];
           I64[Hp - 40] = sat_s3G4W_info;
           P64[Hp - 24] = _s3G4V::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme14_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3GOF: // global
           Hp = Hp + 48;
           _s3G4N::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3GP7; else goto c3GOU;
       c3GP7: // global
           HpAlloc = 48;
           R1 = _s3G4N::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GOU: // global
           _s3G4S::P64 = P64[_s3G4N::P64 + 6];
           I64[Hp - 40] = sat_s3G4T_info;
           P64[Hp - 24] = _s3G4S::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = Text.Read.Lex.$fShowLexeme15_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c3GOE: // global
           Hp = Hp + 24;
           _s3G4N::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3GPa; else goto c3GOQ;
       c3GPa: // global
           HpAlloc = 24;
           R1 = _s3G4N::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3GOQ: // global
           _s3G4O::P64 = P64[_s3G4N::P64 + 7];
           I64[Hp - 16] = sat_s3G4R_info;
           P64[Hp] = _s3G4O::P64;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.$fShowLexeme16_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.438717408 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme1_closure" {
     Text.Read.Lex.$fShowLexeme1_closure:
         const Text.Read.Lex.$fShowLexeme1_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme1_entry() //  [R2]
         { info_tbl: [(c3GQt,
                       label: Text.Read.Lex.$fShowLexeme1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GQt: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme2_closure+1;
           call Text.Read.Lex.$fShowLexeme_$cshowsPrec_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.443971658 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_$cshowList_closure" {
     Text.Read.Lex.$fShowLexeme_$cshowList_closure:
         const Text.Read.Lex.$fShowLexeme_$cshowList_info;
         const 0;
 },
 Text.Read.Lex.$fShowLexeme_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c3GQE,
                       label: Text.Read.Lex.$fShowLexeme_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GQE: // global
           R4 = R3;
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.447568269 UTC

[section ""data" . Text.Read.Lex.$fShowLexeme_closure" {
     Text.Read.Lex.$fShowLexeme_closure:
         const GHC.Show.C:Show_con_info;
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure+2;
         const Text.Read.Lex.$fShowLexeme_$cshow_closure+1;
         const Text.Read.Lex.$fShowLexeme_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.449675905 UTC

[section ""cstring" . Text.Read.Lex.isSymbolChar4_bytes" {
     Text.Read.Lex.isSymbolChar4_bytes:
         I8[] [44,59,40,41,91,93,123,125,96]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.451671475 UTC

[section ""data" . Text.Read.Lex.isSymbolChar3_closure" {
     Text.Read.Lex.isSymbolChar3_closure:
         const Text.Read.Lex.isSymbolChar3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.isSymbolChar3_entry() //  [R1]
         { info_tbl: [(c3GQT,
                       label: Text.Read.Lex.isSymbolChar3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GQT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GQU; else goto c3GQV;
       c3GQU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GQV: // global
           (_c3GQQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GQQ::I64 == 0) goto c3GQS; else goto c3GQR;
       c3GQS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GQR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GQQ::I64;
           R2 = Text.Read.Lex.isSymbolChar4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.455866321 UTC

[section ""cstring" . Text.Read.Lex.isSymbolChar2_bytes" {
     Text.Read.Lex.isSymbolChar2_bytes:
         I8[] [39,34]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.457927129 UTC

[section ""data" . Text.Read.Lex.isSymbolChar1_closure" {
     Text.Read.Lex.isSymbolChar1_closure:
         const Text.Read.Lex.isSymbolChar1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.isSymbolChar1_entry() //  [R1]
         { info_tbl: [(c3GRb,
                       label: Text.Read.Lex.isSymbolChar1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GRb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GRc; else goto c3GRd;
       c3GRc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GRd: // global
           (_c3GR8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GR8::I64 == 0) goto c3GRa; else goto c3GR9;
       c3GRa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GR9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GR8::I64;
           R2 = Text.Read.Lex.isSymbolChar2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.4630849 UTC

[section ""data" . Text.Read.Lex.isSymbolChar_closure" {
     Text.Read.Lex.isSymbolChar_closure:
         const Text.Read.Lex.isSymbolChar_info;
         const 0;
 },
 Text.Read.Lex.isSymbolChar_entry() //  [R2]
         { info_tbl: [(c3GRw,
                       label: Text.Read.Lex.isSymbolChar_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GRw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3GRx; else goto c3GRy;
       c3GRx: // global
           R2 = R2;
           R1 = Text.Read.Lex.isSymbolChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GRy: // global
           I64[Sp - 16] = block_c3GRq_info;
           R4 = Text.Read.Lex.isSymbolChar3_closure;
           R3 = R2;
           _s3G58::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 8] = _s3G58::P64;
           Sp = Sp - 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3GRq() //  [R1]
         { info_tbl: [(c3GRq,
                       label: block_c3GRq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GRq: // global
           if (R1 & 7 == 1) goto c3GRt; else goto u3GSD;
       c3GRt: // global
           _s3G58::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3GRB_info;
           R1 = _s3G58::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3GSQ; else goto c3GRD;
       u3GSQ: // global
           call _c3GRB(R1) args: 0, res: 0, upd: 0;
       c3GRD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3GSD: // global
           Sp = Sp + 16;
           call _c3GRu() args: 0, res: 0, upd: 0;
     }
 },
 _c3GRB() //  [R1]
         { info_tbl: [(c3GRB,
                       label: block_c3GRB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GRB: // global
           I64[Sp - 16] = block_c3GRH_info;
           _s3G5b::I64 = I64[R1 + 7];
           R2 = _s3G5b::I64;
           I64[Sp - 8] = _s3G5b::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3GRH() //  [R1]
         { info_tbl: [(c3GRH,
                       label: block_c3GRH_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GRH: // global
           _c3GSz::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20]);
           if (_c3GSz::I64 < 22) goto u3GSB; else goto u3GSE;
       u3GSB: // global
           if (_c3GSz::I64 < 11) goto u3GSF; else goto u3GSC;
       u3GSF: // global
           Sp = Sp + 24;
           goto u3GSW;
       u3GSC: // global
           switch [11 .. 21] _c3GSz::I64 {
               case 11 : goto c3GRW;
               case 12 : goto u3GSL;
               case 17 : goto c3GS5;
               case 18, 19, 20, 21 : goto u3GSL;
               default: {goto u3GSG;}
           }
       c3GS5: // global
           _s3G5a::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3GS3_info;
           R4 = Text.Read.Lex.isSymbolChar1_closure;
           R3 = _s3G5a::P64;
           R2 = GHC.Classes.$fEqChar_closure;
           Sp = Sp + 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       u3GSL: // global
           Sp = Sp + 24;
           goto u3GSX;
       c3GRW: // global
           if (I64[Sp + 8] == 95) goto u3GSO; else goto u3GSP;
       u3GSO: // global
           Sp = Sp + 24;
           goto u3GSW;
       u3GSP: // global
           Sp = Sp + 24;
           goto u3GSX;
       u3GSX: // global
           call _c3GSv() args: 0, res: 0, upd: 0;
       u3GSG: // global
           Sp = Sp + 24;
           goto u3GSW;
       u3GSE: // global
           Sp = Sp + 24;
           goto u3GSW;
       u3GSW: // global
           call _c3GRu() args: 0, res: 0, upd: 0;
     }
 },
 _c3GS3() //  [R1]
         { info_tbl: [(c3GS3,
                       label: block_c3GS3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GS3: // global
           if (R1 & 7 == 1) goto u3GSM; else goto u3GSN;
       u3GSM: // global
           Sp = Sp + 8;
           call _c3GSv() args: 0, res: 0, upd: 0;
       u3GSN: // global
           Sp = Sp + 8;
           call _c3GRu() args: 0, res: 0, upd: 0;
     }
 },
 _c3GSv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GSv: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3GRu() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GRu: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.476914889 UTC

[section ""cstring" . lvl_r3y8T_bytes" {
     lvl_r3y8T_bytes:
         I8[] [95,39]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.478879244 UTC

[section ""data" . lvl1_r3y8U_closure" {
     lvl1_r3y8U_closure:
         const lvl1_r3y8U_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3y8U_entry() //  [R1]
         { info_tbl: [(c3GTK,
                       label: lvl1_r3y8U_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GTK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GTL; else goto c3GTM;
       c3GTL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GTM: // global
           (_c3GTH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GTH::I64 == 0) goto c3GTJ; else goto c3GTI;
       c3GTJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GTI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GTH::I64;
           R2 = lvl_r3y8T_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.483172662 UTC

[section ""data" . $wisIdfChar_r3y8V_closure" {
     $wisIdfChar_r3y8V_closure:
         const $wisIdfChar_r3y8V_info;
         const 0;
 },
 $wisIdfChar_r3y8V_entry() //  [R2]
         { info_tbl: [(c3GU1,
                       label: $wisIdfChar_r3y8V_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GU1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3GU5; else goto c3GU4;
       c3GU5: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = $wisIdfChar_r3y8V_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GU4: // global
           (_s3G5k::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(R2);
           if (_s3G5k::I64 == 0) goto c3GUf; else goto c3GUb;
       c3GUf: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R2;
           R4 = lvl1_r3y8U_closure;
           R3 = Hp - 7;
           R2 = GHC.Classes.$fEqChar_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3GUb: // global
           Hp = Hp - 16;
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.488056737 UTC

[section ""data" . isIdfChar_r3y8W_closure" {
     isIdfChar_r3y8W_closure:
         const isIdfChar_r3y8W_info;
         const 0;
 },
 isIdfChar_r3y8W_entry() //  [R2]
         { info_tbl: [(c3GUu,
                       label: isIdfChar_r3y8W_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GUu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3GUv; else goto c3GUw;
       c3GUv: // global
           R2 = R2;
           R1 = isIdfChar_r3y8W_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3GUw: // global
           I64[Sp - 8] = block_c3GUr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3GUA; else goto c3GUs;
       u3GUA: // global
           call _c3GUr(R1) args: 0, res: 0, upd: 0;
       c3GUs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3GUr() //  [R1]
         { info_tbl: [(c3GUr,
                       label: block_c3GUr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GUr: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call $wisIdfChar_r3y8V_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.49332656 UTC

[section ""cstring" . reserved_ops_r3y8X_bytes" {
     reserved_ops_r3y8X_bytes:
         I8[] [46,46]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.495161832 UTC

[section ""data" . reserved_ops1_r3y8Y_closure" {
     reserved_ops1_r3y8Y_closure:
         const reserved_ops1_r3y8Y_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops1_r3y8Y_entry() //  [R1]
         { info_tbl: [(c3GUS,
                       label: reserved_ops1_r3y8Y_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GUS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GUT; else goto c3GUU;
       c3GUT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GUU: // global
           (_c3GUP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GUP::I64 == 0) goto c3GUR; else goto c3GUQ;
       c3GUR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GUQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GUP::I64;
           R2 = reserved_ops_r3y8X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.49904619 UTC

[section ""cstring" . reserved_ops2_r3y8Z_bytes" {
     reserved_ops2_r3y8Z_bytes:
         I8[] [58,58]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.500874624 UTC

[section ""data" . reserved_ops3_r3y90_closure" {
     reserved_ops3_r3y90_closure:
         const reserved_ops3_r3y90_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops3_r3y90_entry() //  [R1]
         { info_tbl: [(c3GVa,
                       label: reserved_ops3_r3y90_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GVa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GVb; else goto c3GVc;
       c3GVb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GVc: // global
           (_c3GV7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GV7::I64 == 0) goto c3GV9; else goto c3GV8;
       c3GV9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GV8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GV7::I64;
           R2 = reserved_ops2_r3y8Z_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.504824768 UTC

[section ""cstring" . reserved_ops4_r3y91_bytes" {
     reserved_ops4_r3y91_bytes:
         I8[] [61]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.507095025 UTC

[section ""data" . reserved_ops5_r3y92_closure" {
     reserved_ops5_r3y92_closure:
         const reserved_ops5_r3y92_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops5_r3y92_entry() //  [R1]
         { info_tbl: [(c3GVs,
                       label: reserved_ops5_r3y92_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GVs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GVt; else goto c3GVu;
       c3GVt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GVu: // global
           (_c3GVp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GVp::I64 == 0) goto c3GVr; else goto c3GVq;
       c3GVr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GVq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GVp::I64;
           R2 = reserved_ops4_r3y91_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.511735646 UTC

[section ""cstring" . reserved_ops6_r3y93_bytes" {
     reserved_ops6_r3y93_bytes:
         I8[] [92]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.513756306 UTC

[section ""data" . reserved_ops7_r3y94_closure" {
     reserved_ops7_r3y94_closure:
         const reserved_ops7_r3y94_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops7_r3y94_entry() //  [R1]
         { info_tbl: [(c3GVK,
                       label: reserved_ops7_r3y94_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GVK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GVL; else goto c3GVM;
       c3GVL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GVM: // global
           (_c3GVH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GVH::I64 == 0) goto c3GVJ; else goto c3GVI;
       c3GVJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GVI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GVH::I64;
           R2 = reserved_ops6_r3y93_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.517768032 UTC

[section ""cstring" . reserved_ops8_r3y95_bytes" {
     reserved_ops8_r3y95_bytes:
         I8[] [124]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.519711786 UTC

[section ""data" . reserved_ops9_r3y96_closure" {
     reserved_ops9_r3y96_closure:
         const reserved_ops9_r3y96_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops9_r3y96_entry() //  [R1]
         { info_tbl: [(c3GW2,
                       label: reserved_ops9_r3y96_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GW2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GW3; else goto c3GW4;
       c3GW3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GW4: // global
           (_c3GVZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GVZ::I64 == 0) goto c3GW1; else goto c3GW0;
       c3GW1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GW0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GVZ::I64;
           R2 = reserved_ops8_r3y95_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.523740249 UTC

[section ""cstring" . reserved_ops10_r3y97_bytes" {
     reserved_ops10_r3y97_bytes:
         I8[] [60,45]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.525761398 UTC

[section ""data" . reserved_ops11_r3y98_closure" {
     reserved_ops11_r3y98_closure:
         const reserved_ops11_r3y98_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops11_r3y98_entry() //  [R1]
         { info_tbl: [(c3GWk,
                       label: reserved_ops11_r3y98_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GWk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GWl; else goto c3GWm;
       c3GWl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GWm: // global
           (_c3GWh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GWh::I64 == 0) goto c3GWj; else goto c3GWi;
       c3GWj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GWi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GWh::I64;
           R2 = reserved_ops10_r3y97_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.530835978 UTC

[section ""cstring" . reserved_ops12_r3y99_bytes" {
     reserved_ops12_r3y99_bytes:
         I8[] [45,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.532807989 UTC

[section ""data" . reserved_ops13_r3y9a_closure" {
     reserved_ops13_r3y9a_closure:
         const reserved_ops13_r3y9a_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops13_r3y9a_entry() //  [R1]
         { info_tbl: [(c3GWC,
                       label: reserved_ops13_r3y9a_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GWC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GWD; else goto c3GWE;
       c3GWD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GWE: // global
           (_c3GWz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GWz::I64 == 0) goto c3GWB; else goto c3GWA;
       c3GWB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GWA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GWz::I64;
           R2 = reserved_ops12_r3y99_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.536809159 UTC

[section ""cstring" . reserved_ops14_r3y9b_bytes" {
     reserved_ops14_r3y9b_bytes:
         I8[] [64]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.53897638 UTC

[section ""data" . reserved_ops15_r3y9c_closure" {
     reserved_ops15_r3y9c_closure:
         const reserved_ops15_r3y9c_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops15_r3y9c_entry() //  [R1]
         { info_tbl: [(c3GWU,
                       label: reserved_ops15_r3y9c_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GWU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GWV; else goto c3GWW;
       c3GWV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GWW: // global
           (_c3GWR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GWR::I64 == 0) goto c3GWT; else goto c3GWS;
       c3GWT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GWS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GWR::I64;
           R2 = reserved_ops14_r3y9b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.543006668 UTC

[section ""cstring" . reserved_ops16_r3y9d_bytes" {
     reserved_ops16_r3y9d_bytes:
         I8[] [126]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.545611652 UTC

[section ""data" . reserved_ops17_r3y9e_closure" {
     reserved_ops17_r3y9e_closure:
         const reserved_ops17_r3y9e_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops17_r3y9e_entry() //  [R1]
         { info_tbl: [(c3GXc,
                       label: reserved_ops17_r3y9e_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GXc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GXd; else goto c3GXe;
       c3GXd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GXe: // global
           (_c3GX9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GX9::I64 == 0) goto c3GXb; else goto c3GXa;
       c3GXb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GXa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GX9::I64;
           R2 = reserved_ops16_r3y9d_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.549635867 UTC

[section ""cstring" . reserved_ops18_r3y9f_bytes" {
     reserved_ops18_r3y9f_bytes:
         I8[] [61,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.551654557 UTC

[section ""data" . reserved_ops19_r3y9g_closure" {
     reserved_ops19_r3y9g_closure:
         const reserved_ops19_r3y9g_info;
         const 0;
         const 0;
         const 0;
 },
 reserved_ops19_r3y9g_entry() //  [R1]
         { info_tbl: [(c3GXu,
                       label: reserved_ops19_r3y9g_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GXu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3GXv; else goto c3GXw;
       c3GXv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3GXw: // global
           (_c3GXr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3GXr::I64 == 0) goto c3GXt; else goto c3GXs;
       c3GXt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3GXs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3GXr::I64;
           R2 = reserved_ops18_r3y9f_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.556091202 UTC

[section ""data" . reserved_ops20_r3y9h_closure" {
     reserved_ops20_r3y9h_closure:
         const :_con_info;
         const reserved_ops19_r3y9g_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.557913999 UTC

[section ""data" . reserved_ops21_r3y9i_closure" {
     reserved_ops21_r3y9i_closure:
         const :_con_info;
         const reserved_ops17_r3y9e_closure;
         const reserved_ops20_r3y9h_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.559661504 UTC

[section ""data" . reserved_ops22_r3y9j_closure" {
     reserved_ops22_r3y9j_closure:
         const :_con_info;
         const reserved_ops15_r3y9c_closure;
         const reserved_ops21_r3y9i_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.561473434 UTC

[section ""data" . reserved_ops23_r3y9k_closure" {
     reserved_ops23_r3y9k_closure:
         const :_con_info;
         const reserved_ops13_r3y9a_closure;
         const reserved_ops22_r3y9j_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.563231465 UTC

[section ""data" . reserved_ops24_r3y9l_closure" {
     reserved_ops24_r3y9l_closure:
         const :_con_info;
         const reserved_ops11_r3y98_closure;
         const reserved_ops23_r3y9k_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.564980753 UTC

[section ""data" . reserved_ops25_r3y9m_closure" {
     reserved_ops25_r3y9m_closure:
         const :_con_info;
         const reserved_ops9_r3y96_closure;
         const reserved_ops24_r3y9l_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.566832585 UTC

[section ""data" . reserved_ops26_r3y9n_closure" {
     reserved_ops26_r3y9n_closure:
         const :_con_info;
         const reserved_ops7_r3y94_closure;
         const reserved_ops25_r3y9m_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.568628002 UTC

[section ""data" . reserved_ops27_r3y9o_closure" {
     reserved_ops27_r3y9o_closure:
         const :_con_info;
         const reserved_ops5_r3y92_closure;
         const reserved_ops26_r3y9n_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.570433862 UTC

[section ""data" . reserved_ops28_r3y9p_closure" {
     reserved_ops28_r3y9p_closure:
         const :_con_info;
         const reserved_ops3_r3y90_closure;
         const reserved_ops27_r3y9o_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.572563715 UTC

[section ""data" . reserved_ops29_r3y9q_closure" {
     reserved_ops29_r3y9q_closure:
         const :_con_info;
         const reserved_ops1_r3y8Y_closure;
         const reserved_ops28_r3y9p_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.576615164 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c==1_closure" {
     Text.Read.Lex.$fEqLexeme_$c==1_closure:
         const Text.Read.Lex.$fEqLexeme_$c==1_info;
 },
 Text.Read.Lex.$fEqLexeme_$c==1_entry() //  [R2, R3]
         { info_tbl: [(c3GY0,
                       label: Text.Read.Lex.$fEqLexeme_$c==1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GY0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3GY1; else goto c3GY2;
       c3GY1: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c==1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3GY2: // global
           I64[Sp - 16] = block_c3GXT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3H0N; else goto c3GXU;
       u3H0N: // global
           call _c3GXT(R1) args: 0, res: 0, upd: 0;
       c3GXU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3GXT() //  [R1]
         { info_tbl: [(c3GXT,
                       label: block_c3GXT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GXT: // global
           _s3G5r::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3GXX; else goto c3GXY;
       c3GXX: // global
           I64[Sp - 8] = block_c3GY5_info;
           _s3G5t::P64 = P64[R1 + 7];
           _s3G5u::P64 = P64[R1 + 15];
           R1 = _s3G5r::P64;
           P64[Sp] = _s3G5u::P64;
           P64[Sp + 8] = _s3G5t::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3H0L; else goto c3GY7;
       u3H0L: // global
           call _c3GY5(R1) args: 0, res: 0, upd: 0;
       c3GY7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GXY: // global
           I64[Sp - 16] = block_c3GYB_info;
           _s3G5G::P64 = P64[R1 + 6];
           _s3G5H::P64 = P64[R1 + 14];
           _s3G5I::P64 = P64[R1 + 22];
           R1 = _s3G5r::P64;
           P64[Sp - 8] = _s3G5I::P64;
           P64[Sp] = _s3G5H::P64;
           P64[Sp + 8] = _s3G5G::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3H0M; else goto c3GYD;
       u3H0M: // global
           call _c3GYB(R1) args: 0, res: 0, upd: 0;
       c3GYD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3GY5() //  [R1]
         { info_tbl: [(c3GY5,
                       label: block_c3GY5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GY5: // global
           if (R1 & 7 == 1) goto c3GYj; else goto u3H0J;
       c3GYj: // global
           I64[Sp - 8] = block_c3GYb_info;
           _s3G5w::P64 = P64[R1 + 7];
           _s3G5x::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s3G5x::P64;
           P64[Sp + 16] = _s3G5w::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3H0O; else goto c3GYc;
       u3H0O: // global
           call _c3GYb(R1) args: 0, res: 0, upd: 0;
       c3GYc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3H0J: // global
           Sp = Sp + 24;
           call _c3H0l() args: 0, res: 0, upd: 0;
     }
 },
 _c3GYb() //  [R1]
         { info_tbl: [(c3GYb,
                       label: block_c3GYb_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GYb: // global
           I64[Sp] = block_c3GYg_info;
           _s3G5z::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s3G5z::I64;
           if (R1 & 7 != 0) goto u3H0Q; else goto c3GYl;
       u3H0Q: // global
           call _c3GYg(R1) args: 0, res: 0, upd: 0;
       c3GYl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3GYg() //  [R1]
         { info_tbl: [(c3GYg,
                       label: block_c3GYg_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GYg: // global
           if (I64[Sp + 24] == I64[R1 + 7]) goto c3GYu; else goto u3H0K;
       c3GYu: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
       u3H0K: // global
           Sp = Sp + 32;
           call _c3H0l() args: 0, res: 0, upd: 0;
     }
 },
 _c3GYB() //  [R1]
         { info_tbl: [(c3GYB,
                       label: block_c3GYB_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GYB: // global
           if (R1 & 7 == 1) goto u3H0A; else goto c3GYO;
       u3H0A: // global
           Sp = Sp + 32;
           call _c3H0l() args: 0, res: 0, upd: 0;
       c3GYO: // global
           I64[Sp - 8] = block_c3GYM_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 22];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 8;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3GYM() //  [R1]
         { info_tbl: [(c3GYM,
                       label: block_c3GYM_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GYM: // global
           if (R1 & 7 == 1) goto u3H0B; else goto c3GZF;
       u3H0B: // global
           Sp = Sp + 40;
           call _c3H0l() args: 0, res: 0, upd: 0;
       c3GZF: // global
           I64[Sp] = block_c3GYZ_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3H0T; else goto c3GZG;
       u3H0T: // global
           call _c3GYZ(R1) args: 0, res: 0, upd: 0;
       c3GZG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3GYZ() //  [R1]
         { info_tbl: [(c3GYZ,
                       label: block_c3GYZ_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GYZ: // global
           _s3G5N::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c3GZN; else goto c3H03;
       c3GZN: // global
           I64[Sp] = block_c3GZK_info;
           R1 = _s3G5N::P64;
           if (R1 & 7 != 0) goto u3H0V; else goto c3GZO;
       u3H0V: // global
           call _c3GZK(R1) args: 0, res: 0, upd: 0;
       c3GZO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H03: // global
           I64[Sp] = block_c3H01_info;
           _s3G60::P64 = P64[R1 + 6];
           R1 = _s3G5N::P64;
           P64[Sp + 32] = _s3G60::P64;
           if (R1 & 7 != 0) goto u3H0W; else goto c3H04;
       u3H0W: // global
           call _c3H01(R1) args: 0, res: 0, upd: 0;
       c3H04: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3GZK() //  [R1]
         { info_tbl: [(c3GZK,
                       label: block_c3GZK_info
                       rep:StackRep [False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GZK: // global
           if (R1 & 7 == 1) goto u3H0F; else goto u3H0G;
       u3H0F: // global
           Sp = Sp + 8;
           call _s3G5Q() args: 0, res: 0, upd: 0;
       u3H0G: // global
           Sp = Sp + 40;
           call _c3H0l() args: 0, res: 0, upd: 0;
     }
 },
 _c3H01() //  [R1]
         { info_tbl: [(c3H01,
                       label: block_c3H01_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H01: // global
           if (R1 & 7 == 1) goto u3H0C; else goto c3H0f;
       u3H0C: // global
           Sp = Sp + 40;
           call _c3H0l() args: 0, res: 0, upd: 0;
       c3H0f: // global
           I64[Sp] = block_c3H0d_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 32];
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3H0d() //  [R1]
         { info_tbl: [(c3H0d,
                       label: block_c3H0d_info
                       rep:StackRep [False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H0d: // global
           if (R1 & 7 == 1) goto u3H0D; else goto u3H0E;
       u3H0D: // global
           Sp = Sp + 40;
           call _c3H0l() args: 0, res: 0, upd: 0;
       u3H0E: // global
           Sp = Sp + 8;
           call _s3G5Q() args: 0, res: 0, upd: 0;
     }
 },
 _s3G5Q() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3G5Q: // global
           I64[Sp - 8] = block_c3GZ4_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3H16; else goto c3GZ6;
       u3H16: // global
           call _c3GZ4(R1) args: 0, res: 0, upd: 0;
       c3GZ6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3GZ4() //  [R1]
         { info_tbl: [(c3GZ4,
                       label: block_c3GZ4_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GZ4: // global
           _s3G5O::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3GZd; else goto c3GZt;
       c3GZd: // global
           I64[Sp + 32] = block_c3GZa_info;
           R1 = _s3G5O::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3H0X; else goto c3GZe;
       u3H0X: // global
           call _c3GZa(R1) args: 0, res: 0, upd: 0;
       c3GZe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3GZt: // global
           I64[Sp + 24] = block_c3GZr_info;
           _s3G5U::P64 = P64[R1 + 6];
           R1 = _s3G5O::P64;
           P64[Sp + 32] = _s3G5U::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3H0Y; else goto c3GZu;
       u3H0Y: // global
           call _c3GZr(R1) args: 0, res: 0, upd: 0;
       c3GZu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3GZa() //  [R1]
         { info_tbl: [(c3GZa,
                       label: block_c3GZa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GZa: // global
           if (R1 & 7 == 1) goto c3GZk; else goto u3H0I;
       c3GZk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3H0I: // global
           Sp = Sp + 8;
           call _c3H0l() args: 0, res: 0, upd: 0;
     }
 },
 _c3GZr() //  [R1]
         { info_tbl: [(c3GZr,
                       label: block_c3GZr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3GZr: // global
           if (R1 & 7 == 1) goto u3H0H; else goto c3GZE;
       u3H0H: // global
           Sp = Sp + 16;
           call _c3H0l() args: 0, res: 0, upd: 0;
       c3GZE: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3H0l() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H0l: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.608375719 UTC

[section ""data" . Text.Read.Lex.$fEqNumber_$c/=_closure" {
     Text.Read.Lex.$fEqNumber_$c/=_closure:
         const Text.Read.Lex.$fEqNumber_$c/=_info;
 },
 Text.Read.Lex.$fEqNumber_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c3H2U,
                       label: Text.Read.Lex.$fEqNumber_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H2U: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3H2V; else goto c3H2W;
       c3H2V: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqNumber_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3H2W: // global
           I64[Sp - 8] = block_c3H2O_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$fEqLexeme_$c==1_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3H2O() //  [R1]
         { info_tbl: [(c3H2O,
                       label: block_c3H2O_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H2O: // global
           if (R1 & 7 == 1) goto c3H2R; else goto c3H2S;
       c3H2R: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3H2S: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.614505511 UTC

[section ""data" . Text.Read.Lex.$fEqNumber_closure" {
     Text.Read.Lex.$fEqNumber_closure:
         const GHC.Classes.C:Eq_con_info;
         const Text.Read.Lex.$fEqLexeme_$c==1_closure+2;
         const Text.Read.Lex.$fEqNumber_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.617885035 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c==_closure" {
     Text.Read.Lex.$fEqLexeme_$c==_closure:
         const Text.Read.Lex.$fEqLexeme_$c==_info;
 },
 Text.Read.Lex.$fEqLexeme_$c==_entry() //  [R2, R3]
         { info_tbl: [(c3H3z,
                       label: Text.Read.Lex.$fEqLexeme_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H3z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3H3A; else goto c3H3B;
       c3H3A: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3H3B: // global
           I64[Sp - 16] = block_c3H3n_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3H5E; else goto c3H3o;
       u3H5E: // global
           call _c3H3n(R1) args: 0, res: 0, upd: 0;
       c3H3o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3H3n() //  [R1]
         { info_tbl: [(c3H3n,
                       label: block_c3H3n_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H3n: // global
           _s3G68::P64 = P64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto c3H3r;
               case 2 : goto c3H3s;
               case 3 : goto c3H3t;
               case 4 : goto c3H3u;
               case 5 : goto c3H3v;
               case 6 : goto c3H3w;
               case 7 : goto c3H3x;
           }
       c3H3x: // global
           I64[Sp + 8] = block_c3H56_info;
           R1 = _s3G68::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3H5D; else goto c3H58;
       u3H5D: // global
           call _c3H56(R1) args: 0, res: 0, upd: 0;
       c3H58: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H3w: // global
           I64[Sp] = block_c3H4R_info;
           _s3G6p::P64 = P64[R1 + 2];
           R1 = _s3G68::P64;
           P64[Sp + 8] = _s3G6p::P64;
           if (R1 & 7 != 0) goto u3H5C; else goto c3H4T;
       u3H5C: // global
           call _c3H4R(R1) args: 0, res: 0, upd: 0;
       c3H4T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H3v: // global
           I64[Sp] = block_c3H4C_info;
           _s3G6m::P64 = P64[R1 + 3];
           R1 = _s3G68::P64;
           P64[Sp + 8] = _s3G6m::P64;
           if (R1 & 7 != 0) goto u3H5B; else goto c3H4E;
       u3H5B: // global
           call _c3H4C(R1) args: 0, res: 0, upd: 0;
       c3H4E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H3u: // global
           I64[Sp] = block_c3H4n_info;
           _s3G6j::P64 = P64[R1 + 4];
           R1 = _s3G68::P64;
           P64[Sp + 8] = _s3G6j::P64;
           if (R1 & 7 != 0) goto u3H5A; else goto c3H4p;
       u3H5A: // global
           call _c3H4n(R1) args: 0, res: 0, upd: 0;
       c3H4p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H3t: // global
           I64[Sp] = block_c3H48_info;
           _s3G6g::P64 = P64[R1 + 5];
           R1 = _s3G68::P64;
           P64[Sp + 8] = _s3G6g::P64;
           if (R1 & 7 != 0) goto u3H5z; else goto c3H4a;
       u3H5z: // global
           call _c3H48(R1) args: 0, res: 0, upd: 0;
       c3H4a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H3s: // global
           I64[Sp] = block_c3H3T_info;
           _s3G6d::P64 = P64[R1 + 6];
           R1 = _s3G68::P64;
           P64[Sp + 8] = _s3G6d::P64;
           if (R1 & 7 != 0) goto u3H5y; else goto c3H3V;
       u3H5y: // global
           call _c3H3T(R1) args: 0, res: 0, upd: 0;
       c3H3V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3H3r: // global
           I64[Sp] = block_c3H3E_info;
           _s3G6a::P64 = P64[R1 + 7];
           R1 = _s3G68::P64;
           P64[Sp + 8] = _s3G6a::P64;
           if (R1 & 7 != 0) goto u3H5x; else goto c3H3G;
       u3H5x: // global
           call _c3H3E(R1) args: 0, res: 0, upd: 0;
       c3H3G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3H56() //  [R1]
         { info_tbl: [(c3H56,
                       label: block_c3H56_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H56: // global
           if (R1 & 7 == 7) goto c3H5i; else goto u3H5q;
       c3H5i: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3H5q: // global
           Sp = Sp + 8;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 _c3H4R() //  [R1]
         { info_tbl: [(c3H4R,
                       label: block_c3H4R_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H4R: // global
           if (R1 & 7 == 6) goto c3H53; else goto u3H5r;
       c3H53: // global
           R3 = P64[R1 + 2];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.Read.Lex.$fEqLexeme_$c==1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       u3H5r: // global
           Sp = Sp + 16;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 _c3H4C() //  [R1]
         { info_tbl: [(c3H4C,
                       label: block_c3H4C_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H4C: // global
           if (R1 & 7 == 5) goto c3H4O; else goto u3H5s;
       c3H4O: // global
           R3 = P64[R1 + 3];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3H5s: // global
           Sp = Sp + 16;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 _c3H4n() //  [R1]
         { info_tbl: [(c3H4n,
                       label: block_c3H4n_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H4n: // global
           if (R1 & 7 == 4) goto c3H4z; else goto u3H5t;
       c3H4z: // global
           R3 = P64[R1 + 4];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3H5t: // global
           Sp = Sp + 16;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 _c3H48() //  [R1]
         { info_tbl: [(c3H48,
                       label: block_c3H48_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H48: // global
           if (R1 & 7 == 3) goto c3H4k; else goto u3H5u;
       c3H4k: // global
           R3 = P64[R1 + 5];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3H5u: // global
           Sp = Sp + 16;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 _c3H3T() //  [R1]
         { info_tbl: [(c3H3T,
                       label: block_c3H3T_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H3T: // global
           if (R1 & 7 == 2) goto c3H45; else goto u3H5v;
       c3H45: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3H5v: // global
           Sp = Sp + 16;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 _c3H3E() //  [R1]
         { info_tbl: [(c3H3E,
                       label: block_c3H3E_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H3E: // global
           if (R1 & 7 == 1) goto c3H3Q; else goto u3H5w;
       c3H3Q: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.eqChar_entry(R3, R2) args: 8, res: 0, upd: 8;
       u3H5w: // global
           Sp = Sp + 16;
           call _c3H5e() args: 0, res: 0, upd: 0;
     }
 },
 _c3H5e() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H5e: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.640026203 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_$c/=_closure" {
     Text.Read.Lex.$fEqLexeme_$c/=_closure:
         const Text.Read.Lex.$fEqLexeme_$c/=_info;
 },
 Text.Read.Lex.$fEqLexeme_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c3H74,
                       label: Text.Read.Lex.$fEqLexeme_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H74: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3H75; else goto c3H76;
       c3H75: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$fEqLexeme_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3H76: // global
           I64[Sp - 8] = block_c3H6Y_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$fEqLexeme_$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3H6Y() //  [R1]
         { info_tbl: [(c3H6Y,
                       label: block_c3H6Y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H6Y: // global
           if (R1 & 7 == 1) goto c3H71; else goto c3H72;
       c3H71: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3H72: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.645658768 UTC

[section ""data" . Text.Read.Lex.$fEqLexeme_closure" {
     Text.Read.Lex.$fEqLexeme_closure:
         const GHC.Classes.C:Eq_con_info;
         const Text.Read.Lex.$fEqLexeme_$c==_closure+2;
         const Text.Read.Lex.$fEqLexeme_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.647830039 UTC

[section ""data" . Text.Read.Lex.numberToFixed2_closure" {
     Text.Read.Lex.numberToFixed2_closure:
         const Text.Read.Lex.numberToFixed2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToFixed2_entry() //  [R1]
         { info_tbl: [(c3H7z,
                       label: Text.Read.Lex.numberToFixed2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H7z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3H7A; else goto c3H7B;
       c3H7A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3H7B: // global
           (_c3H7w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3H7w::I64 == 0) goto c3H7y; else goto c3H7x;
       c3H7y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3H7x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3H7w::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.652250401 UTC

[section ""cstring" . lvl2_r3y9r_bytes" {
     lvl2_r3y9r_bytes:
         I8[] [116,104,105,115,32,115,104,111,117,108,100,32,110,111,116,32,104,97,112,112,101,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.654992084 UTC

[section ""data" . lvl3_r3y9s_closure" {
     lvl3_r3y9s_closure:
         const lvl3_r3y9s_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r3y9s_entry() //  [R1]
         { info_tbl: [(c3H7V,
                       label: lvl3_r3y9s_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H7V: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3H7W; else goto c3H7X;
       c3H7W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3H7X: // global
           (_c3H7Q::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3H7Q::I64 == 0) goto c3H7S; else goto c3H7R;
       c3H7S: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3H7R: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3H7Q::I64;
           I64[Sp - 24] = block_c3H7T_info;
           R2 = lvl2_r3y9r_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3H7T() //  [R1]
         { info_tbl: [(c3H7T,
                       label: block_c3H7T_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H7T: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.661995327 UTC

[section ""data" . combine_r3y9t_closure" {
     combine_r3y9t_closure:
         const combine_r3y9t_info;
         const 0;
 },
 sat_s3G6H_entry() //  [R1]
         { info_tbl: [(c3H8F,
                       label: sat_s3G6H_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H8F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3H8G; else goto c3H8H;
       c3H8G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3H8H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call combine_r3y9t_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 combine_r3y9t_entry() //  [R2, R3]
         { info_tbl: [(c3H8M,
                       label: combine_r3y9t_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H8M: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3H8N; else goto c3H8O;
       c3H8N: // global
           R3 = R3;
           R2 = R2;
           R1 = combine_r3y9t_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3H8O: // global
           I64[Sp - 16] = block_c3H8h_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3H95; else goto c3H8i;
       u3H95: // global
           call _c3H8h(R1) args: 0, res: 0, upd: 0;
       c3H8i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3H8h() //  [R1]
         { info_tbl: [(c3H8h,
                       label: block_c3H8h_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H8h: // global
           if (R1 & 7 == 1) goto c3H8J; else goto c3H8K;
       c3H8J: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3H8K: // global
           I64[Sp - 8] = block_c3H8n_info;
           _s3G6A::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3G6A::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3H94; else goto c3H8o;
       u3H94: // global
           call _c3H8n(R1) args: 0, res: 0, upd: 0;
       c3H8o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3H8n() //  [R1]
         { info_tbl: [(c3H8n,
                       label: block_c3H8n_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H8n: // global
           if (R1 & 7 == 1) goto c3H8V; else goto c3H8Y;
       c3H8V: // global
           R1 = lvl3_r3y9s_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3H8Y: // global
           I64[Sp - 8] = block_c3H8t_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 8] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3H8t() //  [R1]
         { info_tbl: [(c3H8t,
                       label: block_c3H8t_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H8t: // global
           I64[Sp] = block_c3H8x_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3H8x() //  [R1]
         { info_tbl: [(c3H8x,
                       label: block_c3H8x_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H8x: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3H92; else goto c3H91;
       c3H92: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3H91: // global
           I64[Hp - 48] = sat_s3G6H_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.677178483 UTC

[section ""data" . Text.Read.Lex.numberToFixed_go_closure" {
     Text.Read.Lex.numberToFixed_go_closure:
         const Text.Read.Lex.numberToFixed_go_info;
         const 0;
 },
 Text.Read.Lex.numberToFixed_go_entry() //  [R2, R3, R4]
         { info_tbl: [(c3HaR,
                       label: Text.Read.Lex.numberToFixed_go_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HaR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3HaS; else goto u3HbP;
       c3HaS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_go_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3HbP: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3H9O() args: 0, res: 0, upd: 0;
     }
 },
 _c3H9O() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H9O: // global
           I64[Sp - 8] = block_c3H9R_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3HbW; else goto c3H9S;
       u3HbW: // global
           call _c3H9R(R1) args: 0, res: 0, upd: 0;
       c3H9S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3H9R() //  [R1]
         { info_tbl: [(c3H9R,
                       label: block_c3H9R_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H9R: // global
           if (R1 & 7 == 1) goto c3HaO; else goto c3HaP;
       c3HaO: // global
           R1 = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3HaP: // global
           I64[Sp - 8] = block_c3H9X_info;
           _s3G6L::P64 = R1;
           _s3G6M::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3G6M::P64;
           P64[Sp + 24] = _s3G6L::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3HbX; else goto c3H9Y;
       u3HbX: // global
           call _c3H9X(R1) args: 0, res: 0, upd: 0;
       c3H9Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3H9X() //  [R1]
         { info_tbl: [(c3H9X,
                       label: block_c3H9X_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3H9X: // global
           if (R1 & 7 == 1) goto c3Hb0; else goto c3Hb2;
       c3Hb0: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Hb2: // global
           I64[Sp + 8] = block_c3Ha3_info;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3HbY; else goto c3Ha4;
       u3HbY: // global
           call _c3Ha3(R1) args: 0, res: 0, upd: 0;
       c3Ha4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ha3() //  [R1]
         { info_tbl: [(c3Ha3,
                       label: block_c3Ha3_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ha3: // global
           _s3G6S::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_s3G6S::I64, 40)) goto c3Hbx; else goto c3Hby;
       c3Hbx: // global
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 8;
           call _c3Hb7() args: 0, res: 0, upd: 0;
       c3Hby: // global
           I64[Sp] = block_c3Hac_info;
           _s3G6I::P64 = P64[Sp + 8];
           R3 = _s3G6I::P64;
           R2 = _s3G6I::P64;
           I64[Sp + 16] = _s3G6S::I64;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hb7() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hb7: // global
           I64[Sp - 8] = block_c3Hb9_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Hc5; else goto c3Hbb;
       u3Hc5: // global
           call _c3Hb9(R1) args: 0, res: 0, upd: 0;
       c3Hbb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hb9() //  [R1]
         { info_tbl: [(c3Hb9,
                       label: block_c3Hb9_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hb9: // global
           _s3G6V::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3Hbh; else goto c3Hbq;
       c3Hbh: // global
           R1 = _s3G6V::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Hbq: // global
           I64[Sp] = block_c3Hbk_info;
           R3 = P64[Sp + 8];
           R2 = _s3G6V::P64;
           P64[Sp + 16] = P64[R1 + 14];
           P64[Sp + 24] = P64[R1 + 6];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hbk() //  [R1]
         { info_tbl: [(c3Hbk,
                       label: block_c3Hbk_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hbk: // global
           I64[Sp] = block_c3Hbo_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hbo() //  [R1]
         { info_tbl: [(c3Hbo,
                       label: block_c3Hbo_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hbo: // global
           P64[Sp + 24] = R1;
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp + 8;
           call _c3Hb7() args: 0, res: 0, upd: 0;
     }
 },
 _c3Hac() //  [R1]
         { info_tbl: [(c3Hac,
                       label: block_c3Hac_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hac: // global
           _s3G6S::I64 = I64[Sp + 16];
           _s3G73::I64 = _s3G6S::I64 - (_s3G6S::I64 + (_s3G6S::I64 >> 63)) & (-2);
           if (_s3G73::I64 == 0) goto c3HbI; else goto u3HbS;
       c3HbI: // global
           _s3G6I::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HaC_info;
           R3 = P64[Sp + 24];
           R2 = _s3G6I::P64;
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call combine_r3y9t_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3HbS: // global
           I64[Sp - 8] = _s3G73::I64;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c3Hak() args: 0, res: 0, upd: 0;
     }
 },
 _c3HaC() //  [R1]
         { info_tbl: [(c3HaC,
                       label: block_c3HaC_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HaC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HbM; else goto c3HbL;
       c3HbM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HbL: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3G79::I64 = I64[Sp + 8] + 1;
           I64[Hp] = %MO_S_Shr_W64(_s3G79::I64 + (_s3G79::I64 >> 63), 1);
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = R1;
           call _c3H9O() args: 0, res: 0, upd: 0;
     }
 },
 _c3Hak() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hak: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HbE; else goto c3HbD;
       c3HbE: // global
           HpAlloc = 24;
           _s3G73::I64 = I64[Sp];
           I64[Sp] = block_c3Haj_info;
           R1 = _s3G73::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HbD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Text.Read.Lex.numberToFixed2_closure;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3Han_info;
           R3 = Hp - 14;
           R2 = P64[Sp + 16];
           call combine_r3y9t_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Haj() //  [R1]
         { info_tbl: [(c3Haj,
                       label: block_c3Haj_info
                       rep:StackRep [False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Haj: // global
           I64[Sp] = R1;
           call _c3Hak() args: 0, res: 0, upd: 0;
     }
 },
 _c3Han() //  [R1]
         { info_tbl: [(c3Han,
                       label: block_c3Han_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Han: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HbH; else goto c3HbG;
       c3HbH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HbG: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3G74::I64 = I64[Sp + 24] + 1;
           I64[Hp] = %MO_S_Shr_W64(_s3G74::I64 + (_s3G74::I64 >> 63), 1);
           P64[Sp + 16] = P64[Sp + 8];
           P64[Sp + 24] = Hp - 7;
           P64[Sp + 32] = R1;
           Sp = Sp + 16;
           call _c3H9O() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.705364351 UTC

[section ""data" . Text.Read.Lex.valInteger_closure" {
     Text.Read.Lex.valInteger_closure:
         const Text.Read.Lex.valInteger_info;
         const 0;
 },
 sat_s3G7g_entry() //  [R1]
         { info_tbl: [(c3HdQ,
                       label: sat_s3G7g_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HdQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HdU; else goto c3HdV;
       c3HdU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HdV: // global
           I64[Sp - 8] = block_c3HdO_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HdO() //  [R1]
         { info_tbl: [(c3HdO,
                       label: block_c3HdO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HdO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HdY; else goto c3HdX;
       c3HdY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HdX: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.valInteger_entry() //  [R2, R3]
         { info_tbl: [(c3HdZ,
                       label: Text.Read.Lex.valInteger_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HdZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3He0; else goto c3He1;
       c3He0: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.valInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3He1: // global
           I64[Sp - 24] = block_c3HdG_info;
           _s3G7e::P64 = R3;
           R3 = R3;
           _s3G7d::P64 = R2;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 16] = _s3G7d::P64;
           P64[Sp - 8] = _s3G7e::P64;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HdG() //  [R1]
         { info_tbl: [(c3HdG,
                       label: block_c3HdG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HdG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3He4; else goto c3He3;
       c3He4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3He3: // global
           I64[Hp - 16] = sat_s3G7g_info;
           P64[Hp] = P64[Sp + 16];
           R4 = R1;
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.716641094 UTC

[section ""data" . Text.Read.Lex.$w$sreadIntP_closure" {
     Text.Read.Lex.$w$sreadIntP_closure:
         const Text.Read.Lex.$w$sreadIntP_info;
         const 0;
 },
 sat_s3G7s_entry() //  [R1]
         { info_tbl: [(c3Hf3,
                       label: sat_s3G7s_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hf3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Hf7; else goto c3Hf8;
       c3Hf7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hf8: // global
           I64[Sp - 8] = block_c3Hf1_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hf1() //  [R1]
         { info_tbl: [(c3Hf1,
                       label: block_c3Hf1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hf1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Hfb; else goto c3Hfa;
       c3Hfb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Hfa: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G7u_entry() //  [R1]
         { info_tbl: [(c3Hfc,
                       label: sat_s3G7u_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hfc: // global
           _s3G7u::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3Hfd; else goto c3Hfe;
       c3Hfe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Hfg; else goto c3Hff;
       c3Hfg: // global
           HpAlloc = 24;
           goto c3Hfd;
       c3Hfd: // global
           R1 = _s3G7u::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hff: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G7u::P64;
           _s3G7i::P64 = P64[_s3G7u::P64 + 16];
           _s3G7k::P64 = P64[_s3G7u::P64 + 24];
           _s3G7m::P64 = P64[_s3G7u::P64 + 32];
           _s3G7o::P64 = P64[_s3G7u::P64 + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3G7m::P64;
           P64[Hp] = _s3G7o::P64;
           I64[Sp - 32] = block_c3HeP_info;
           R3 = Hp - 14;
           R2 = _s3G7k::P64;
           P64[Sp - 24] = _s3G7i::P64;
           Sp = Sp - 32;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3HeP() //  [R1]
         { info_tbl: [(c3HeP,
                       label: block_c3HeP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HeP: // global
           I64[Sp - 8] = block_c3HeT_info;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3HeT() //  [R1]
         { info_tbl: [(c3HeT,
                       label: block_c3HeT_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HeT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Hfk; else goto c3Hfj;
       c3Hfk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Hfj: // global
           I64[Hp - 16] = sat_s3G7s_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 16;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G7v_entry() //  [R1, R2]
         { info_tbl: [(c3Hfl,
                       label: sat_s3G7v_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hfl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Hfp; else goto c3Hfo;
       c3Hfp: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Hfo: // global
           _s3G7i::P64 = P64[R1 + 7];
           _s3G7k::P64 = P64[R1 + 15];
           _s3G7l::P64 = P64[R1 + 23];
           _s3G7m::P64 = P64[R1 + 31];
           I64[Hp - 40] = sat_s3G7u_info;
           P64[Hp - 24] = _s3G7i::P64;
           P64[Hp - 16] = _s3G7k::P64;
           P64[Hp - 8] = _s3G7m::P64;
           P64[Hp] = R2;
           R2 = Hp - 40;
           R1 = _s3G7l::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G7y_entry() //  [R1, R2]
         { info_tbl: [(c3Hfu,
                       label: sat_s3G7y_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hfu: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3Hfv; else goto c3Hfw;
       c3Hfv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Hfw: // global
           I64[Sp - 48] = block_c3HeA_info;
           _s3G7m::P64 = R2;
           R2 = R2;
           _s3G7i::P64 = P64[R1 + 7];
           _s3G7j::P64 = P64[R1 + 15];
           _s3G7k::P64 = P64[R1 + 23];
           _s3G7l::P64 = P64[R1 + 31];
           R1 = _s3G7j::P64;
           P64[Sp - 40] = _s3G7i::P64;
           P64[Sp - 32] = _s3G7j::P64;
           P64[Sp - 24] = _s3G7k::P64;
           P64[Sp - 16] = _s3G7l::P64;
           P64[Sp - 8] = _s3G7m::P64;
           Sp = Sp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HeA() //  [R1]
         { info_tbl: [(c3HeA,
                       label: block_c3HeA_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HeA: // global
           if (R1 & 7 == 1) goto c3Hfr; else goto c3Hfs;
       c3Hfr: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Hfs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3HfE; else goto c3HfD;
       c3HfE: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HfD: // global
           I64[Hp - 32] = sat_s3G7v_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           I64[Sp + 40] = block_c3Hfz_info;
           R3 = Hp - 31;
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hfz() //  [R1]
         { info_tbl: [(c3Hfz,
                       label: block_c3Hfz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hfz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HfH; else goto c3HfG;
       c3HfH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HfG: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$w$sreadIntP_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3HfI,
                       label: Text.Read.Lex.$w$sreadIntP_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HfI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3HfM; else goto c3HfL;
       c3HfM: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$sreadIntP_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HfL: // global
           I64[Hp - 32] = sat_s3G7y_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.740642462 UTC

[section ""data" . Text.Read.Lex.readIntP1_closure" {
     Text.Read.Lex.readIntP1_closure:
         const Text.Read.Lex.readIntP1_info;
         const 0;
 },
 Text.Read.Lex.readIntP1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3HgS,
                       label: Text.Read.Lex.readIntP1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HgS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HgT; else goto c3HgU;
       c3HgT: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readIntP1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HgU: // global
           I64[Sp - 8] = block_c3HgP_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HgP() //  [R1]
         { info_tbl: [(c3HgP,
                       label: block_c3HgP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HgP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HgX; else goto c3HgW;
       c3HgX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HgW: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.747445798 UTC

[section ""data" . Text.Read.Lex.readIntP_$sreadIntP_closure" {
     Text.Read.Lex.readIntP_$sreadIntP_closure:
         const Text.Read.Lex.readIntP_$sreadIntP_info;
         const 0;
 },
 Text.Read.Lex.readIntP_$sreadIntP_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3Hhd,
                       label: Text.Read.Lex.readIntP_$sreadIntP_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hhd: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readIntP1_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.753700918 UTC

[section ""data" . Text.Read.Lex.$wreadIntP_closure" {
     Text.Read.Lex.$wreadIntP_closure:
         const Text.Read.Lex.$wreadIntP_info;
         const 0;
 },
 lvl116_s3G7K_entry() //  [R1]
         { info_tbl: [(c3Hhs,
                       label: lvl116_s3G7K_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hhs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Hht; else goto c3Hhu;
       c3Hht: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hhu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3G7X_entry() //  [R1]
         { info_tbl: [(c3Hif,
                       label: sat_s3G7X_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hif: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Hig; else goto c3Hih;
       c3Hig: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hih: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Hic_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Hil; else goto c3Hid;
       u3Hil: // global
           call _c3Hic(R1) args: 0, res: 0, upd: 0;
       c3Hid: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3Hic() //  [R1]
         { info_tbl: [(c3Hic,
                       label: block_c3Hic_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hic: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G7Y_entry() //  [R1]
         { info_tbl: [(c3Him,
                       label: sat_s3G7Y_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Him: // global
           _s3G7Y::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Hin; else goto c3Hio;
       c3Hio: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Hiq; else goto c3Hip;
       c3Hiq: // global
           HpAlloc = 24;
           goto c3Hin;
       c3Hin: // global
           R1 = _s3G7Y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hip: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G7Y::P64;
           _s3G7F::P64 = P64[_s3G7Y::P64 + 16];
           _s3G7S::P64 = P64[_s3G7Y::P64 + 24];
           I64[Hp - 16] = sat_s3G7X_info;
           P64[Hp] = _s3G7S::P64;
           R2 = _s3G7F::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3G7U_entry() //  [R1]
         { info_tbl: [(c3Hiv,
                       label: sat_s3G7U_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hiv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Hiw; else goto c3Hix;
       c3Hiw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hix: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 sat_s3G82_entry() //  [R1]
         { info_tbl: [(c3Hiy,
                       label: sat_s3G82_info
                       rep:HeapRep 6 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hiy: // global
           _s3G82::P64 = R1;
           if ((Sp + -72) < SpLim) (likely: False) goto c3Hiz; else goto c3HiA;
       c3HiA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HiC; else goto c3HiB;
       c3HiC: // global
           HpAlloc = 24;
           goto c3Hiz;
       c3Hiz: // global
           R1 = _s3G82::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HiB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G82::P64;
           _s3G7F::P64 = P64[_s3G82::P64 + 16];
           _s3G7G::P64 = P64[_s3G82::P64 + 24];
           _s3G7I::P64 = P64[_s3G82::P64 + 32];
           _s3G7K::P64 = P64[_s3G82::P64 + 40];
           _s3G7L::P64 = P64[_s3G82::P64 + 48];
           _s3G7N::P64 = P64[_s3G82::P64 + 56];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3G7L::P64;
           P64[Hp] = _s3G7N::P64;
           I64[Sp - 48] = block_c3HhP_info;
           R3 = Hp - 14;
           R2 = _s3G7I::P64;
           P64[Sp - 40] = _s3G7F::P64;
           P64[Sp - 32] = _s3G7G::P64;
           P64[Sp - 24] = _s3G7K::P64;
           Sp = Sp - 48;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3HhP() //  [R1]
         { info_tbl: [(c3HhP,
                       label: block_c3HhP_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HhP: // global
           P64[Sp] = R1;
           P64[Sp + 24] = P64[Sp + 24];
           call _c3HhW() args: 0, res: 0, upd: 0;
     }
 },
 _c3HhW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HhW: // global
           _s3G7Q::P64 = P64[Sp];
           I64[Sp] = block_c3HhY_info;
           R1 = _s3G7Q::P64;
           if (R1 & 7 != 0) goto u3HiU; else goto c3HhZ;
       u3HiU: // global
           call _c3HhY(R1) args: 0, res: 0, upd: 0;
       c3HhZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3HhY() //  [R1]
         { info_tbl: [(c3HhY,
                       label: block_c3HhY_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HhY: // global
           _s3G7P::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3HiI; else goto c3HiK;
       c3HiI: // global
           R1 = _s3G7P::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c3HiK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3HiN; else goto c3HiM;
       c3HiN: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3HiM: // global
           _s3G7S::P64 = P64[R1 + 6];
           _s3G7T::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_s3G7Y_info;
           _s3G7F::P64 = P64[Sp + 8];
           P64[Hp - 48] = _s3G7F::P64;
           P64[Hp - 40] = _s3G7S::P64;
           I64[Hp - 32] = sat_s3G7U_info;
           P64[Hp - 16] = _s3G7F::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s3G7P::P64;
           I64[Sp] = block_c3HiJ_info;
           R2 = _s3G7F::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 64;
           P64[Sp + 24] = _s3G7T::P64;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 _c3HiJ() //  [R1]
         { info_tbl: [(c3HiJ,
                       label: block_c3HiJ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HiJ: // global
           _s3G7Q::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp] = _s3G7Q::P64;
           call _c3HhW() args: 0, res: 0, upd: 0;
     }
 },
 sat_s3G83_entry() //  [R1, R2]
         { info_tbl: [(c3HiW,
                       label: sat_s3G83_info
                       rep:HeapRep 6 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HiW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Hj0; else goto c3HiZ;
       c3Hj0: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HiZ: // global
           _s3G7F::P64 = P64[R1 + 7];
           _s3G7G::P64 = P64[R1 + 15];
           _s3G7I::P64 = P64[R1 + 23];
           _s3G7J::P64 = P64[R1 + 31];
           _s3G7K::P64 = P64[R1 + 39];
           _s3G7L::P64 = P64[R1 + 47];
           I64[Hp - 56] = sat_s3G82_info;
           P64[Hp - 40] = _s3G7F::P64;
           P64[Hp - 32] = _s3G7G::P64;
           P64[Hp - 24] = _s3G7I::P64;
           P64[Hp - 16] = _s3G7K::P64;
           P64[Hp - 8] = _s3G7L::P64;
           P64[Hp] = R2;
           R2 = Hp - 56;
           R1 = _s3G7J::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G86_entry() //  [R1, R2]
         { info_tbl: [(c3Hj5,
                       label: sat_s3G86_info
                       rep:HeapRep 6 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hj5: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3Hj6; else goto c3Hj7;
       c3Hj6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Hj7: // global
           I64[Sp - 64] = block_c3HhA_info;
           _s3G7L::P64 = R2;
           R2 = R2;
           _s3G7F::P64 = P64[R1 + 7];
           _s3G7G::P64 = P64[R1 + 15];
           _s3G7H::P64 = P64[R1 + 23];
           _s3G7I::P64 = P64[R1 + 31];
           _s3G7J::P64 = P64[R1 + 39];
           _s3G7K::P64 = P64[R1 + 47];
           R1 = _s3G7H::P64;
           P64[Sp - 56] = _s3G7F::P64;
           P64[Sp - 48] = _s3G7G::P64;
           P64[Sp - 40] = _s3G7H::P64;
           P64[Sp - 32] = _s3G7I::P64;
           P64[Sp - 24] = _s3G7J::P64;
           P64[Sp - 16] = _s3G7K::P64;
           P64[Sp - 8] = _s3G7L::P64;
           Sp = Sp - 64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HhA() //  [R1]
         { info_tbl: [(c3HhA,
                       label: block_c3HhA_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HhA: // global
           if (R1 & 7 == 1) goto c3Hj2; else goto c3Hj3;
       c3Hj2: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Hj3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Hjf; else goto c3Hje;
       c3Hjf: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hje: // global
           I64[Hp - 48] = sat_s3G83_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           I64[Sp + 56] = block_c3Hja_info;
           R3 = Hp - 47;
           R2 = P64[Sp + 24];
           Sp = Sp + 56;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hja() //  [R1]
         { info_tbl: [(c3Hja,
                       label: block_c3Hja_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hja: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Hji; else goto c3Hjh;
       c3Hji: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hjh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wreadIntP_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3Hjj,
                       label: Text.Read.Lex.$wreadIntP_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hjj: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Hjn; else goto c3Hjm;
       c3Hjn: // global
           HpAlloc = 80;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wreadIntP_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Hjm: // global
           I64[Hp - 72] = lvl116_s3G7K_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3G86_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = Hp - 72;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.787243426 UTC

[section ""data" . Text.Read.Lex.readIntP2_closure" {
     Text.Read.Lex.readIntP2_closure:
         const Text.Read.Lex.readIntP2_info;
         const 0;
 },
 Text.Read.Lex.readIntP2_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3Hl7,
                       label: Text.Read.Lex.readIntP2_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hl7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Hl8; else goto c3Hl9;
       c3Hl8: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readIntP2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Hl9: // global
           I64[Sp - 8] = block_c3Hl4_info;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hl4() //  [R1]
         { info_tbl: [(c3Hl4,
                       label: block_c3Hl4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hl4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Hlc; else goto c3Hlb;
       c3Hlc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hlb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.793875466 UTC

[section ""data" . Text.Read.Lex.readIntP_closure" {
     Text.Read.Lex.readIntP_closure:
         const Text.Read.Lex.readIntP_info;
         const 0;
 },
 Text.Read.Lex.readIntP_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3Hls,
                       label: Text.Read.Lex.readIntP_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hls: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readIntP2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.797450177 UTC

[section ""data" . sat_s3G8e_closure" {
     sat_s3G8e_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.799197184 UTC

[section ""data" . sat_s3G8f_closure" {
     sat_s3G8f_closure:
         const :_con_info;
         const sat_s3G8e_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.801178971 UTC

[section ""data" . Text.Read.Lex.numberToFixed1_closure" {
     Text.Read.Lex.numberToFixed1_closure:
         const Text.Read.Lex.numberToFixed1_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToFixed1_entry() //  [R1]
         { info_tbl: [(c3HlH,
                       label: Text.Read.Lex.numberToFixed1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HlH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HlI; else goto c3HlJ;
       c3HlI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HlJ: // global
           (_c3HlE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HlE::I64 == 0) goto c3HlG; else goto c3HlF;
       c3HlG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HlF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HlE::I64;
           R3 = sat_s3G8f_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.807048283 UTC

[section ""data" . Text.Read.Lex.numberToInteger_closure" {
     Text.Read.Lex.numberToInteger_closure:
         const Text.Read.Lex.numberToInteger_info;
         const 0;
 },
 sat_s3G8m_entry() //  [R1]
         { info_tbl: [(c3Hmg,
                       label: sat_s3G8m_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hmg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Hmk; else goto c3Hml;
       c3Hmk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hml: // global
           I64[Sp - 8] = block_c3Hme_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hme() //  [R1]
         { info_tbl: [(c3Hme,
                       label: block_c3Hme_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hme: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Hmo; else goto c3Hmn;
       c3Hmo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Hmn: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G8k_entry() //  [R1]
         { info_tbl: [(c3Hmt,
                       label: sat_s3G8k_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hmt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Hmu; else goto c3Hmv;
       c3Hmu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hmv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G8o_entry() //  [R1]
         { info_tbl: [(c3Hmw,
                       label: sat_s3G8o_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hmw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Hmx; else goto c3Hmy;
       c3Hmx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hmy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3Hm6_info;
           _s3G8j::P64 = P64[R1 + 24];
           R3 = _s3G8j::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s3G8j::P64;
           Sp = Sp - 40;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Hm6() //  [R1]
         { info_tbl: [(c3Hm6,
                       label: block_c3Hm6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hm6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3HmB; else goto c3HmA;
       c3HmB: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3HmA: // global
           I64[Hp - 40] = sat_s3G8m_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_s3G8k_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G8u_entry() //  [R1]
         { info_tbl: [(c3HmS,
                       label: sat_s3G8u_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HmS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HmT; else goto c3HmU;
       c3HmT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HmU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.numberToInteger_entry() //  [R2]
         { info_tbl: [(c3HmZ,
                       label: Text.Read.Lex.numberToInteger_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HmZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Hn0; else goto c3Hn1;
       c3Hn0: // global
           R2 = R2;
           R1 = Text.Read.Lex.numberToInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Hn1: // global
           I64[Sp - 8] = block_c3HlX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Hnw; else goto c3HlY;
       u3Hnw: // global
           call _c3HlX(R1) args: 0, res: 0, upd: 0;
       c3HlY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HlX() //  [R1]
         { info_tbl: [(c3HlX,
                       label: block_c3HlX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HlX: // global
           if (R1 & 7 == 1) goto c3HmW; else goto c3HmX;
       c3HmW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Hn5; else goto c3Hn4;
       c3Hn5: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hn4: // global
           _s3G8i::P64 = P64[R1 + 7];
           _s3G8j::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3G8o_info;
           P64[Hp - 24] = _s3G8i::P64;
           P64[Hp - 16] = _s3G8j::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HmX: // global
           I64[Sp - 16] = block_c3HmE_info;
           _s3G8p::P64 = P64[R1 + 6];
           _s3G8r::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3G8r::P64;
           P64[Sp] = _s3G8p::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Hns; else goto c3HmF;
       u3Hns: // global
           call _c3HmE(R1) args: 0, res: 0, upd: 0;
       c3HmF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HmE() //  [R1]
         { info_tbl: [(c3HmE,
                       label: block_c3HmE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HmE: // global
           if (R1 & 7 == 1) goto c3Hn9; else goto u3Hnq;
       c3Hn9: // global
           _s3G8r::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HmJ_info;
           R1 = _s3G8r::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Hnt; else goto c3HmK;
       u3Hnt: // global
           call _c3HmJ(R1) args: 0, res: 0, upd: 0;
       c3HmK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Hnq: // global
           Sp = Sp + 24;
           call _c3Hnn() args: 0, res: 0, upd: 0;
     }
 },
 _c3HmJ() //  [R1]
         { info_tbl: [(c3HmJ,
                       label: block_c3HmJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HmJ: // global
           if (R1 & 7 == 1) goto c3Hnc; else goto u3Hnr;
       c3Hnc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Hnf; else goto c3Hne;
       c3Hnf: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hne: // global
           I64[Hp - 32] = sat_s3G8u_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Hnr: // global
           Sp = Sp + 16;
           call _c3Hnn() args: 0, res: 0, upd: 0;
     }
 },
 _c3Hnn() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hnn: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.831855589 UTC

[section ""data" . sat_s3G8x_closure" {
     sat_s3G8x_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.833598791 UTC

[section ""data" . sat_s3G8y_closure" {
     sat_s3G8y_closure:
         const :_con_info;
         const sat_s3G8x_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.835626978 UTC

[section ""data" . lvl4_r3y9u_closure" {
     lvl4_r3y9u_closure:
         const lvl4_r3y9u_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r3y9u_entry() //  [R1]
         { info_tbl: [(c3HoR,
                       label: lvl4_r3y9u_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HoR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HoS; else goto c3HoT;
       c3HoS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HoT: // global
           (_c3HoO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HoO::I64 == 0) goto c3HoQ; else goto c3HoP;
       c3HoQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HoP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HoO::I64;
           R3 = sat_s3G8y_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.840889183 UTC

[section ""data" . $wfracExp_r3y9v_closure" {
     $wfracExp_r3y9v_closure:
         const $wfracExp_r3y9v_info;
         const 0;
 },
 $wfracExp_r3y9v_entry() //  [R2, R3, R4]
         { info_tbl: [(c3Hpe,
                       label: $wfracExp_r3y9v_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hpe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Hpf; else goto u3Hqx;
       c3Hpf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wfracExp_r3y9v_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3Hqx: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3Hp4() args: 0, res: 0, upd: 0;
     }
 },
 _c3Hp4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hp4: // global
           I64[Sp - 8] = block_c3Hp7_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Hqz; else goto c3Hp8;
       u3Hqz: // global
           call _c3Hp7(R1) args: 0, res: 0, upd: 0;
       c3Hp8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hp7() //  [R1]
         { info_tbl: [(c3Hp7,
                       label: block_c3Hp7_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hp7: // global
           _s3G8z::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3Hpb; else goto c3Hpc;
       c3Hpb: // global
           I64[Sp] = block_c3Hpj_info;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           R2 = _s3G8z::P64;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c3Hpc: // global
           I64[Sp] = block_c3Hq6_info;
           R3 = lvl4_r3y9u_closure;
           R2 = _s3G8z::P64;
           P64[Sp + 8] = P64[R1 + 14];
           P64[Sp + 24] = P64[R1 + 6];
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hpj() //  [R1]
         { info_tbl: [(c3Hpj,
                       label: block_c3Hpj_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hpj: // global
           _s3G8z::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3HpV; else goto c3Hpv;
       c3HpV: // global
           I64[Sp + 8] = block_c3HpD_info;
           R2 = _s3G8z::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c3Hpv: // global
           I64[Sp + 8] = block_c3Hpo_info;
           R3 = _s3G8z::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HpD() //  [R1]
         { info_tbl: [(c3HpD,
                       label: block_c3HpD_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HpD: // global
           I64[Sp] = block_c3HpH_info;
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HpH() //  [R1]
         { info_tbl: [(c3HpH,
                       label: block_c3HpH_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HpH: // global
           I64[Sp] = block_c3HpL_info;
           R2 = R1;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HpL() //  [R1]
         { info_tbl: [(c3HpL,
                       label: block_c3HpL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HpL: // global
           I64[Sp] = block_c3HpP_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HpP() //  [R1]
         { info_tbl: [(c3HpP,
                       label: block_c3HpP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HpP: // global
           _s3G8A::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HpT_info;
           R3 = R1;
           R2 = _s3G8A::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HpT() //  [R1]
         { info_tbl: [(c3HpT,
                       label: block_c3HpT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HpT: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3Hpo() //  [R1]
         { info_tbl: [(c3Hpo,
                       label: block_c3Hpo_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hpo: // global
           I64[Sp + 16] = block_c3Hps_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hps() //  [R1]
         { info_tbl: [(c3Hps,
                       label: block_c3Hps_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hps: // global
           R2 = GHC.Real.$fEnumRatio1_closure;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Hq6() //  [R1]
         { info_tbl: [(c3Hq6,
                       label: block_c3Hq6_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hq6: // global
           I64[Sp] = block_c3Hqa_info;
           _s3G8N::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3G8N::P64;
           if (R1 & 7 != 0) goto u3HqB; else goto c3Hqb;
       u3HqB: // global
           call _c3Hqa(R1) args: 0, res: 0, upd: 0;
       c3Hqb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hqa() //  [R1]
         { info_tbl: [(c3Hqa,
                       label: block_c3Hqa_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hqa: // global
           I64[Sp] = block_c3Hqf_info;
           R2 = I64[R1 + 7];
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hqf() //  [R1]
         { info_tbl: [(c3Hqf,
                       label: block_c3Hqf_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hqf: // global
           I64[Sp] = block_c3Hqj_info;
           R3 = Text.Read.Lex.numberToFixed1_closure;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hqj() //  [R1]
         { info_tbl: [(c3Hqj,
                       label: block_c3Hqj_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hqj: // global
           I64[Sp] = block_c3Hqn_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hqn() //  [R1]
         { info_tbl: [(c3Hqn,
                       label: block_c3Hqn_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hqn: // global
           _s3G8B::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = R1;
           P64[Sp + 24] = _s3G8B::P64;
           Sp = Sp + 8;
           call _c3Hp4() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.871238373 UTC

[section ""data" . Text.Read.Lex.numberToFixed_integerTake_closure" {
     Text.Read.Lex.numberToFixed_integerTake_closure:
         const Text.Read.Lex.numberToFixed_integerTake_info;
         const 0;
 },
 sat_s3G90_entry() //  [R1]
         { info_tbl: [(c3Hs6,
                       label: sat_s3G90_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hs6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Hs7; else goto c3Hs8;
       c3Hs7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hs8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3Hs4_info;
           R3 = lvl4_r3y9u_closure;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Hs4() //  [R1]
         { info_tbl: [(c3Hs4,
                       label: block_c3Hs4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hs4: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_integerTake_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.numberToFixed_integerTake_entry() //  [R2, R3]
         { info_tbl: [(c3Hsf,
                       label: Text.Read.Lex.numberToFixed_integerTake_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hsf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Hsg; else goto c3Hsh;
       c3Hsg: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_integerTake_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Hsh: // global
           I64[Sp - 24] = block_c3HrQ_info;
           _s3G8U::P64 = R3;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           _s3G8T::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3G8T::P64;
           P64[Sp - 8] = _s3G8U::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HrQ() //  [R1]
         { info_tbl: [(c3HrQ,
                       label: block_c3HrQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HrQ: // global
           if (R1 == 1) goto u3Hsw; else goto c3Hsd;
       u3Hsw: // global
           Sp = Sp + 24;
           call _c3Hse() args: 0, res: 0, upd: 0;
       c3Hsd: // global
           I64[Sp] = block_c3HrU_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3Hsy; else goto c3HrV;
       u3Hsy: // global
           call _c3HrU(R1) args: 0, res: 0, upd: 0;
       c3HrV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HrU() //  [R1]
         { info_tbl: [(c3HrU,
                       label: block_c3HrU_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HrU: // global
           if (R1 & 7 == 1) goto u3Hsx; else goto c3Hso;
       u3Hsx: // global
           Sp = Sp + 24;
           call _c3Hse() args: 0, res: 0, upd: 0;
       c3Hso: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Hsr; else goto c3Hsq;
       c3Hsr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hsq: // global
           _s3G8X::P64 = P64[R1 + 6];
           _s3G8Y::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_s3G90_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s3G8Y::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3G8X::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Hse() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hse: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.884676254 UTC

[section ""data" . Text.Read.Lex.numberToFixed_xs_closure" {
     Text.Read.Lex.numberToFixed_xs_closure:
         const :_con_info;
         const Text.Read.Lex.$fShowLexeme2_closure+1;
         const Text.Read.Lex.numberToFixed_xs_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.889107519 UTC

[section ""data" . Text.Read.Lex.numberToFixed_closure" {
     Text.Read.Lex.numberToFixed_closure:
         const Text.Read.Lex.numberToFixed_info;
         const 0;
 },
 sat_s3G98_entry() //  [R1]
         { info_tbl: [(c3Hty,
                       label: sat_s3G98_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hty: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HtC; else goto c3HtD;
       c3HtC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HtD: // global
           I64[Sp - 8] = block_c3Htw_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Htw() //  [R1]
         { info_tbl: [(c3Htw,
                       label: block_c3Htw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Htw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HtG; else goto c3HtF;
       c3HtG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HtF: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G96_entry() //  [R1]
         { info_tbl: [(c3HtL,
                       label: sat_s3G96_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HtL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HtM; else goto c3HtN;
       c3HtM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HtN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fIntegralInt_$ctoInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G9a_entry() //  [R1]
         { info_tbl: [(c3HtO,
                       label: sat_s3G9a_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HtO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3HtP; else goto c3HtQ;
       c3HtP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HtQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3Hto_info;
           _s3G95::P64 = P64[R1 + 24];
           R3 = _s3G95::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s3G95::P64;
           Sp = Sp - 40;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Hto() //  [R1]
         { info_tbl: [(c3Hto,
                       label: block_c3Hto_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hto: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3HtT; else goto c3HtS;
       c3HtT: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3HtS: // global
           I64[Hp - 40] = sat_s3G98_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = sat_s3G96_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G9h_entry() //  [R1]
         { info_tbl: [(c3Hua,
                       label: sat_s3G9h_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hua: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Hub; else goto c3Huc;
       c3Hub: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Huc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G9o_entry() //  [R1]
         { info_tbl: [(c3Hus,
                       label: sat_s3G9o_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hus: // global
           R3 = Text.Read.Lex.numberToFixed_xs_closure+2;
           R2 = P64[R1 + 16];
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G9q_entry() //  [R1]
         { info_tbl: [(c3HuJ,
                       label: sat_s3G9q_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HuJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HuN; else goto c3HuO;
       c3HuN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HuO: // global
           I64[Sp - 8] = block_c3HuH_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HuH() //  [R1]
         { info_tbl: [(c3HuH,
                       label: block_c3HuH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HuH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HuR; else goto c3HuQ;
       c3HuR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HuQ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G9s_entry() //  [R1]
         { info_tbl: [(c3HuS,
                       label: sat_s3G9s_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HuS: // global
           _s3G9s::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3HuT; else goto c3HuU;
       c3HuU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HuW; else goto c3HuV;
       c3HuW: // global
           HpAlloc = 24;
           goto c3HuT;
       c3HuT: // global
           R1 = _s3G9s::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HuV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3G9s::P64;
           _s3G91::P64 = P64[_s3G9s::P64 + 16];
           _s3G9k::P64 = P64[_s3G9s::P64 + 24];
           I64[Hp - 16] = sat_s3G9o_info;
           P64[Hp] = _s3G9k::P64;
           I64[Sp - 24] = block_c3Huv_info;
           R3 = Hp - 16;
           R2 = _s3G91::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.numberToFixed_integerTake_entry(R3,
                                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Huv() //  [R1]
         { info_tbl: [(c3Huv,
                       label: block_c3Huv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Huv: // global
           I64[Sp - 8] = block_c3Huz_info;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Huz() //  [R1]
         { info_tbl: [(c3Huz,
                       label: block_c3Huz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Huz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Hv0; else goto c3HuZ;
       c3Hv0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3HuZ: // global
           I64[Hp - 16] = sat_s3G9q_info;
           P64[Hp] = P64[Sp + 8];
           R4 = R1;
           R3 = Hp - 16;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3G9m_entry() //  [R1]
         { info_tbl: [(c3Hv5,
                       label: sat_s3G9m_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hv5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Hv6; else goto c3Hv7;
       c3Hv6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hv7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.numberToFixed_entry() //  [R2, R3]
         { info_tbl: [(c3Hvc,
                       label: Text.Read.Lex.numberToFixed_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hvc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Hvd; else goto c3Hve;
       c3Hvd: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToFixed_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Hve: // global
           I64[Sp - 16] = block_c3Htf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3HvW; else goto c3Htg;
       u3HvW: // global
           call _c3Htf(R1) args: 0, res: 0, upd: 0;
       c3Htg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Htf() //  [R1]
         { info_tbl: [(c3Htf,
                       label: block_c3Htf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Htf: // global
           if (R1 & 7 == 1) goto c3Hv9; else goto c3Hva;
       c3Hv9: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Hvj; else goto c3Hvi;
       c3Hvj: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hvi: // global
           _s3G94::P64 = P64[R1 + 7];
           _s3G95::P64 = P64[R1 + 15];
           I64[Hp - 64] = sat_s3G9a_info;
           P64[Hp - 48] = _s3G94::P64;
           P64[Hp - 40] = _s3G95::P64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = Text.Read.Lex.numberToFixed2_closure;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Hva: // global
           I64[Sp - 16] = block_c3HtW_info;
           _s3G9c::P64 = P64[R1 + 6];
           _s3G9e::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3G9e::P64;
           P64[Sp] = _s3G9c::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3HvR; else goto c3HtX;
       u3HvR: // global
           call _c3HtW(R1) args: 0, res: 0, upd: 0;
       c3HtX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HtW() //  [R1]
         { info_tbl: [(c3HtW,
                       label: block_c3HtW_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HtW: // global
           _s3G9e::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3Hvn; else goto c3HvA;
       c3Hvn: // global
           I64[Sp + 8] = block_c3Hu1_info;
           R1 = _s3G9e::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3HvS; else goto c3Hu2;
       u3HvS: // global
           call _c3Hu1(R1) args: 0, res: 0, upd: 0;
       c3Hu2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3HvA: // global
           I64[Sp] = block_c3Huf_info;
           _s3G9k::P64 = P64[R1 + 6];
           R1 = _s3G9e::P64;
           P64[Sp + 8] = _s3G9k::P64;
           if (R1 & 7 != 0) goto u3HvT; else goto c3Hug;
       u3HvT: // global
           call _c3Huf(R1) args: 0, res: 0, upd: 0;
       c3Hug: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hu1() //  [R1]
         { info_tbl: [(c3Hu1,
                       label: block_c3Hu1_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hu1: // global
           if (R1 & 7 == 1) goto c3Hvr; else goto u3HvQ;
       c3Hvr: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Hvu; else goto c3Hvt;
       c3Hvu: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hvt: // global
           I64[Hp - 56] = sat_s3G9h_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Text.Read.Lex.numberToFixed2_closure;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3HvQ: // global
           Sp = Sp + 24;
           call _c3HvL() args: 0, res: 0, upd: 0;
     }
 },
 _c3Huf() //  [R1]
         { info_tbl: [(c3Huf,
                       label: block_c3Huf_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Huf: // global
           if (R1 & 7 == 1) goto c3HvE; else goto u3HvP;
       c3HvE: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3HvH; else goto c3HvG;
       c3HvH: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HvG: // global
           I64[Hp - 88] = sat_s3G9s_info;
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sat_s3G9m_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 88;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3HvP: // global
           Sp = Sp + 32;
           call _c3HvL() args: 0, res: 0, upd: 0;
     }
 },
 _c3HvL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HvL: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.932292915 UTC

[section ""data" . Text.Read.Lex.$wnumberToRational_closure" {
     Text.Read.Lex.$wnumberToRational_closure:
         const Text.Read.Lex.$wnumberToRational_info;
         const 0;
 },
 sat_s3G9D_entry() //  [R1]
         { info_tbl: [(c3Hyp,
                       label: sat_s3G9D_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hyp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Hyt; else goto c3Hyu;
       c3Hyt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Hyu: // global
           I64[Sp - 8] = block_c3Hyn_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hyn() //  [R1]
         { info_tbl: [(c3Hyn,
                       label: block_c3Hyn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hyn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Hyx; else goto c3Hyw;
       c3Hyx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3Hyw: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3G9B_entry() //  [R1]
         { info_tbl: [(c3HyF,
                       label: sat_s3G9B_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HyF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HyG; else goto c3HyH;
       c3HyG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HyH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3HyC_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3HyL; else goto c3HyD;
       u3HyL: // global
           call _c3HyC(R1) args: 0, res: 0, upd: 0;
       c3HyD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3HyC() //  [R1]
         { info_tbl: [(c3HyC,
                       label: block_c3HyC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HyC: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.$wnumberToRational_entry() //  [R2]
         { info_tbl: [(c3HyQ,
                       label: Text.Read.Lex.$wnumberToRational_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HyQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HyR; else goto c3HyS;
       c3HyR: // global
           R2 = R2;
           R1 = Text.Read.Lex.$wnumberToRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HyS: // global
           I64[Sp - 8] = block_c3Hya_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3HB7; else goto c3Hyb;
       u3HB7: // global
           call _c3Hya(R1) args: 0, res: 0, upd: 0;
       c3Hyb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hya() //  [R1]
         { info_tbl: [(c3Hya,
                       label: block_c3Hya_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hya: // global
           if (R1 & 7 == 1) goto c3HyN; else goto c3HyO;
       c3HyN: // global
           I64[Sp - 16] = block_c3Hyf_info;
           _s3G9y::P64 = P64[R1 + 15];
           R3 = _s3G9y::P64;
           R2 = GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
           P64[Sp - 8] = _s3G9y::P64;
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3HyO: // global
           I64[Sp - 16] = block_c3Hz9_info;
           _s3G9H::P64 = P64[R1 + 6];
           _s3G9J::P64 = P64[R1 + 22];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _s3G9J::P64;
           P64[Sp] = _s3G9H::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3HB6; else goto c3Hzb;
       u3HB6: // global
           call _c3Hz9(R1) args: 0, res: 0, upd: 0;
       c3Hzb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hyf() //  [R1]
         { info_tbl: [(c3Hyf,
                       label: block_c3Hyf_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hyf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Hz1; else goto c3Hz0;
       c3Hz1: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Hz0: // global
           I64[Hp - 40] = sat_s3G9D_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = sat_s3G9B_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3HyT_info;
           R4 = R1;
           R3 = Hp - 40;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call Text.Read.Lex.numberToFixed_go_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HyT() //  [R1]
         { info_tbl: [(c3HyT,
                       label: block_c3HyT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HyT: // global
           I64[Sp] = block_c3HyX_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HyX() //  [R1]
         { info_tbl: [(c3HyX,
                       label: block_c3HyX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HyX: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3Hz9() //  [R1]
         { info_tbl: [(c3Hz9,
                       label: block_c3Hz9_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hz9: // global
           _s3G9J::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3Hzi; else goto c3HAH;
       c3Hzi: // global
           I64[Sp + 8] = block_c3Hzf_info;
           R1 = _s3G9J::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3HB8; else goto c3Hzj;
       u3HB8: // global
           call _c3Hzf(R1) args: 0, res: 0, upd: 0;
       c3Hzj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3HAH: // global
           I64[Sp] = block_c3HAF_info;
           _s3Ga0::P64 = P64[R1 + 6];
           R1 = _s3G9J::P64;
           P64[Sp + 8] = _s3Ga0::P64;
           if (R1 & 7 != 0) goto u3HB9; else goto c3HAI;
       u3HB9: // global
           call _c3HAF(R1) args: 0, res: 0, upd: 0;
       c3HAI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hzf() //  [R1]
         { info_tbl: [(c3Hzf,
                       label: block_c3Hzf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hzf: // global
           if (R1 & 7 == 1) goto c3Hzu; else goto c3HzE;
       c3Hzu: // global
           _s3G9H::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Hzn_info;
           R3 = _s3G9H::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
       c3HzE: // global
           I64[Sp - 8] = block_c3HzC_info;
           R3 = Text.Read.Lex.numberToFixed2_closure;
           _s3G9O::P64 = P64[R1 + 6];
           R2 = _s3G9O::P64;
           P64[Sp] = _s3G9O::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hzn() //  [R1]
         { info_tbl: [(c3Hzn,
                       label: block_c3Hzn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hzn: // global
           I64[Sp] = block_c3Hzr_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Hzr() //  [R1]
         { info_tbl: [(c3Hzr,
                       label: block_c3Hzr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Hzr: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3HzC() //  [R1]
         { info_tbl: [(c3HzC,
                       label: block_c3HzC_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HzC: // global
           _s3G9O::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3HAv; else goto c3HA5;
       c3HAv: // global
           I64[Sp + 8] = block_c3HAh_info;
           R3 = _s3G9O::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3HA5: // global
           I64[Sp + 8] = block_c3HzI_info;
           R2 = _s3G9O::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HAh() //  [R1]
         { info_tbl: [(c3HAh,
                       label: block_c3HAh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HAh: // global
           I64[Sp] = block_c3HAl_info;
           R3 = P64[Sp + 8];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 8] = R1;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HAl() //  [R1]
         { info_tbl: [(c3HAl,
                       label: block_c3HAl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HAl: // global
           _s3G9X::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HAp_info;
           R3 = _s3G9X::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HAp() //  [R1]
         { info_tbl: [(c3HAp,
                       label: block_c3HAp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HAp: // global
           I64[Sp] = block_c3HAt_info;
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HAt() //  [R1]
         { info_tbl: [(c3HAt,
                       label: block_c3HAt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HAt: // global
           R3 = lvl4_r3y9u_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3HzI() //  [R1]
         { info_tbl: [(c3HzI,
                       label: block_c3HzI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HzI: // global
           I64[Sp] = block_c3HzM_info;
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call GHC.Real.^_$s^_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HzM() //  [R1]
         { info_tbl: [(c3HzM,
                       label: block_c3HzM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HzM: // global
           I64[Sp - 8] = block_c3HzQ_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HzQ() //  [R1]
         { info_tbl: [(c3HzQ,
                       label: block_c3HzQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HzQ: // global
           I64[Sp] = block_c3HzU_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HzU() //  [R1]
         { info_tbl: [(c3HzU,
                       label: block_c3HzU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HzU: // global
           I64[Sp] = block_c3HzY_info;
           R3 = P64[Sp + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 16] = R1;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HzY() //  [R1]
         { info_tbl: [(c3HzY,
                       label: block_c3HzY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HzY: // global
           I64[Sp] = block_c3HA2_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HA2() //  [R1]
         { info_tbl: [(c3HA2,
                       label: block_c3HA2_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HA2: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3HAF() //  [R1]
         { info_tbl: [(c3HAF,
                       label: block_c3HAF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HAF: // global
           _s3G9H::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c3HAP; else goto c3HAY;
       c3HAP: // global
           I64[Sp] = block_c3HAM_info;
           R3 = _s3G9H::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
       c3HAY: // global
           I64[Sp] = block_c3HAW_info;
           R3 = _s3G9H::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           P64[Sp + 16] = P64[R1 + 6];
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HAM() //  [R1]
         { info_tbl: [(c3HAM,
                       label: block_c3HAM_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HAM: // global
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = Text.Read.Lex.numberToFixed2_closure;
           Sp = Sp + 24;
           call $wfracExp_r3y9v_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3HAW() //  [R1]
         { info_tbl: [(c3HAW,
                       label: block_c3HAW_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HAW: // global
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call $wfracExp_r3y9v_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.984083403 UTC

[section ""data" . Text.Read.Lex.numberToRational_closure" {
     Text.Read.Lex.numberToRational_closure:
         const Text.Read.Lex.numberToRational_info;
         const 0;
 },
 Text.Read.Lex.numberToRational_entry() //  [R2]
         { info_tbl: [(c3HDp,
                       label: Text.Read.Lex.numberToRational_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HDp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HDq; else goto c3HDr;
       c3HDq: // global
           R2 = R2;
           R1 = Text.Read.Lex.numberToRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HDr: // global
           I64[Sp - 8] = block_c3HDm_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HDm() //  [R1, R2]
         { info_tbl: [(c3HDm,
                       label: block_c3HDm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HDm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HDu; else goto c3HDt;
       c3HDu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3HDt: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.992333432 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational3_closure" {
     Text.Read.Lex.numberToRangedRational3_closure:
         const GHC.Real.:%_con_info;
         const Text.Read.Lex.numberToFixed2_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.995062293 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational2_closure" {
     Text.Read.Lex.numberToRangedRational2_closure:
         const GHC.Base.Just_con_info;
         const Text.Read.Lex.numberToRangedRational3_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:22.997055799 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational1_closure" {
     Text.Read.Lex.numberToRangedRational1_closure:
         const Text.Read.Lex.numberToRangedRational1_info;
 },
 Text.Read.Lex.numberToRangedRational1_entry() //  [R2]
         { info_tbl: [(c3HDM,
                       label: Text.Read.Lex.numberToRangedRational1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HDM: // global
           R3 = R2;
           R2 = Text.Read.Lex.$fShowLexeme2_closure+1;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.000460789 UTC

[section ""data" . sat_s3Gab_closure" {
     sat_s3Gab_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.002133727 UTC

[section ""data" . sat_s3Gac_closure" {
     sat_s3Gac_closure:
         const :_con_info;
         const sat_s3Gab_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.003910809 UTC

[section ""data" . sat_s3Gaa_closure" {
     sat_s3Gaa_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.005596715 UTC

[section ""data" . sat_s3Gad_closure" {
     sat_s3Gad_closure:
         const :_con_info;
         const sat_s3Gaa_closure+1;
         const sat_s3Gac_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.007334455 UTC

[section ""data" . sat_s3Ga9_closure" {
     sat_s3Ga9_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.008993277 UTC

[section ""data" . sat_s3Gae_closure" {
     sat_s3Gae_closure:
         const :_con_info;
         const sat_s3Ga9_closure+1;
         const sat_s3Gad_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.011445679 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational4_closure" {
     Text.Read.Lex.numberToRangedRational4_closure:
         const Text.Read.Lex.numberToRangedRational4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational4_entry() //  [R1]
         { info_tbl: [(c3HE5,
                       label: Text.Read.Lex.numberToRangedRational4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HE5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HE6; else goto c3HE7;
       c3HE6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HE7: // global
           (_c3HE2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HE2::I64 == 0) goto c3HE4; else goto c3HE3;
       c3HE4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HE3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HE2::I64;
           R3 = sat_s3Gae_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.015638809 UTC

[section ""data" . sat_s3Gah_closure" {
     sat_s3Gah_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.017312125 UTC

[section ""data" . sat_s3Gai_closure" {
     sat_s3Gai_closure:
         const :_con_info;
         const sat_s3Gah_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.018951966 UTC

[section ""data" . sat_s3Gag_closure" {
     sat_s3Gag_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.021045344 UTC

[section ""data" . sat_s3Gaj_closure" {
     sat_s3Gaj_closure:
         const :_con_info;
         const sat_s3Gag_closure+1;
         const sat_s3Gai_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.022833294 UTC

[section ""data" . sat_s3Gaf_closure" {
     sat_s3Gaf_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.024479614 UTC

[section ""data" . sat_s3Gak_closure" {
     sat_s3Gak_closure:
         const :_con_info;
         const sat_s3Gaf_closure+1;
         const sat_s3Gaj_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.026523964 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational5_closure" {
     Text.Read.Lex.numberToRangedRational5_closure:
         const Text.Read.Lex.numberToRangedRational5_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational5_entry() //  [R1]
         { info_tbl: [(c3HEt,
                       label: Text.Read.Lex.numberToRangedRational5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HEt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HEu; else goto c3HEv;
       c3HEu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HEv: // global
           (_c3HEq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HEq::I64 == 0) goto c3HEs; else goto c3HEr;
       c3HEs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HEr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HEq::I64;
           R3 = sat_s3Gak_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.033571092 UTC

[section ""data" . Text.Read.Lex.$wnumberToRangedRational_closure" {
     Text.Read.Lex.$wnumberToRangedRational_closure:
         const Text.Read.Lex.$wnumberToRangedRational_info;
         const 0;
 },
 sat_s3Gau_entry() //  [R1]
         { info_tbl: [(c3HEV,
                       label: sat_s3Gau_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HEV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HEW; else goto c3HEX;
       c3HEW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HEX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3HES_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3HES() //  [R1, R2]
         { info_tbl: [(c3HES,
                       label: block_c3HES_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HES: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HF0; else goto c3HEZ;
       c3HF0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3HEZ: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GaC_entry() //  [R1]
         { info_tbl: [(c3HFf,
                       label: sat_s3GaC_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HFf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HFg; else goto c3HFh;
       c3HFg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HFh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3HFc_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3HFc() //  [R1, R2]
         { info_tbl: [(c3HFc,
                       label: block_c3HFc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HFc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HFk; else goto c3HFj;
       c3HFk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3HFj: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GaV_entry() //  [R1]
         { info_tbl: [(c3HGa,
                       label: sat_s3GaV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HGa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HGb; else goto c3HGc;
       c3HGb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HGc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3HG7_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wnumberToRational_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3HG7() //  [R1, R2]
         { info_tbl: [(c3HG7,
                       label: block_c3HG7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HG7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HGf; else goto c3HGe;
       c3HGf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3HGe: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.$wnumberToRangedRational_entry() //  [R2, R3, R4]
         { info_tbl: [(c3HGk,
                       label: Text.Read.Lex.$wnumberToRangedRational_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HGk: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3HGl; else goto c3HGm;
       c3HGl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wnumberToRangedRational_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HGm: // global
           I64[Sp - 24] = block_c3HEJ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3HI4; else goto c3HEK;
       u3HI4: // global
           call _c3HEJ(R1) args: 0, res: 0, upd: 0;
       c3HEK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HEJ() //  [R1]
         { info_tbl: [(c3HEJ,
                       label: block_c3HEJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HEJ: // global
           if (R1 & 7 == 1) goto c3HGh; else goto c3HGi;
       c3HGh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3HGq; else goto c3HGp;
       c3HGq: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HGp: // global
           I64[Hp - 32] = sat_s3Gau_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HGi: // global
           I64[Sp - 24] = block_c3HF3_info;
           _s3Gao::P64 = R1;
           _s3Gav::P64 = P64[R1 + 6];
           _s3Gaw::P64 = P64[R1 + 14];
           R1 = P64[R1 + 22];
           P64[Sp - 16] = _s3Gav::P64;
           P64[Sp - 8] = _s3Gaw::P64;
           P64[Sp] = _s3Gao::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3HHZ; else goto c3HF4;
       u3HHZ: // global
           call _c3HF3(R1) args: 0, res: 0, upd: 0;
       c3HF4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HF3() //  [R1]
         { info_tbl: [(c3HF3,
                       label: block_c3HF3_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HF3: // global
           if (R1 & 7 == 1) goto c3HGu; else goto c3HGz;
       c3HGu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3HGx; else goto c3HGw;
       c3HGx: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HGw: // global
           I64[Hp - 32] = sat_s3GaC_info;
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HGz: // global
           I64[Sp - 8] = block_c3HFn_info;
           R3 = Text.Read.Lex.numberToRangedRational5_closure;
           _s3GaD::P64 = P64[R1 + 6];
           R2 = _s3GaD::P64;
           P64[Sp] = _s3GaD::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HFn() //  [R1]
         { info_tbl: [(c3HFn,
                       label: block_c3HFn_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HFn: // global
           if (R1 == 1) goto u3HHS; else goto c3HGC;
       u3HHS: // global
           Sp = Sp + 56;
           call _c3HHM() args: 0, res: 0, upd: 0;
       c3HGC: // global
           I64[Sp] = block_c3HFr_info;
           R3 = Text.Read.Lex.numberToRangedRational4_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HFr() //  [R1]
         { info_tbl: [(c3HFr,
                       label: block_c3HFr_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HFr: // global
           if (R1 == 1) goto u3HHT; else goto c3HGT;
       u3HHT: // global
           Sp = Sp + 56;
           call _c3HHM() args: 0, res: 0, upd: 0;
       c3HGT: // global
           I64[Sp] = block_c3HGD_info;
           R3 = P64[Sp + 16];
           R2 = Text.Read.Lex.numberToRangedRational1_closure+1;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HGD() //  [R1]
         { info_tbl: [(c3HGD,
                       label: block_c3HGD_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HGD: // global
           if (R1 & 7 == 1) goto c3HH0; else goto c3HHA;
       c3HH0: // global
           I64[Sp] = block_c3HGX_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3HI5; else goto c3HH1;
       u3HI5: // global
           call _c3HGX(R1) args: 0, res: 0, upd: 0;
       c3HH1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3HHA: // global
           I64[Sp] = block_c3HHy_info;
           R3 = 0;
           R2 = R1;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HGX() //  [R1]
         { info_tbl: [(c3HGX,
                       label: block_c3HGX_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HGX: // global
           if (R1 & 7 == 1) goto u3HHV; else goto c3HHe;
       u3HHV: // global
           Sp = Sp + 56;
           call _c3HHm() args: 0, res: 0, upd: 0;
       c3HHe: // global
           I64[Sp] = block_c3HHa_info;
           R3 = P64[R1 + 6];
           R2 = Text.Read.Lex.numberToRangedRational1_closure+1;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HHa() //  [R1, R2]
         { info_tbl: [(c3HHa,
                       label: block_c3HHa_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HHa: // global
           I64[Sp] = block_c3HHc_info;
           _s3Gb0::P64 = R1;
           R1 = R2;
           P64[Sp + 24] = _s3Gb0::P64;
           if (R1 & 7 != 0) goto u3HI7; else goto c3HHg;
       u3HI7: // global
           call _c3HHc(R1) args: 0, res: 0, upd: 0;
       c3HHg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HHc() //  [R1]
         { info_tbl: [(c3HHc,
                       label: block_c3HHc_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HHc: // global
           if (R1 & 7 == 1) goto u3HHW; else goto c3HHr;
       u3HHW: // global
           Sp = Sp + 56;
           call _c3HHm() args: 0, res: 0, upd: 0;
       c3HHr: // global
           I64[Sp] = block_c3HHp_info;
           R3 = 0;
           R2 = P64[Sp + 24];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HHm() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HHm: // global
           R1 = Text.Read.Lex.numberToRangedRational2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3HHp() //  [R1]
         { info_tbl: [(c3HHp,
                       label: block_c3HHp_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HHp: // global
           I64[Sp + 24] = -R1;
           Sp = Sp + 8;
           call _s3GaG() args: 0, res: 0, upd: 0;
     }
 },
 _c3HHy() //  [R1]
         { info_tbl: [(c3HHy,
                       label: block_c3HHy_info
                       rep:StackRep [False, True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HHy: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _s3GaG() args: 0, res: 0, upd: 0;
     }
 },
 _s3GaG() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3GaG: // global
           I64[Sp - 8] = block_c3HFA_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3HIb; else goto c3HFB;
       u3HIb: // global
           call _c3HFA(R1) args: 0, res: 0, upd: 0;
       c3HFB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HFA() //  [R1]
         { info_tbl: [(c3HFA,
                       label: block_c3HFA_info
                       rep:StackRep [False, True, True, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HFA: // global
           I64[Sp + 16] = block_c3HFF_info;
           R2 = P64[Sp + 8];
           I64[Sp + 48] = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HFF() //  [R1]
         { info_tbl: [(c3HFF,
                       label: block_c3HFF_info
                       rep:StackRep [True, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HFF: // global
           _s3GaL::I64 = I64[Sp + 8] + R1;
           if (%MO_S_Le_W64(_s3GaL::I64,
                            I64[Sp + 32] + 3)) goto c3HGJ; else goto u3HHY;
       c3HGJ: // global
           I64[Sp + 8] = block_c3HFS_info;
           R1 = P64[Sp + 24];
           I64[Sp + 32] = _s3GaL::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3HI2; else goto c3HFT;
       u3HI2: // global
           call _c3HFS(R1) args: 0, res: 0, upd: 0;
       c3HFT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3HHY: // global
           Sp = Sp + 40;
           call _c3HHM() args: 0, res: 0, upd: 0;
     }
 },
 _c3HFS() //  [R1]
         { info_tbl: [(c3HFS,
                       label: block_c3HFS_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HFS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3HGM; else goto c3HGL;
       c3HGM: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HGL: // global
           if (%MO_S_Ge_W64(I64[Sp + 24],
                            I64[R1 + 7] - 3)) goto c3HGP; else goto c3HGQ;
       c3HGP: // global
           I64[Hp - 32] = sat_s3GaV_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HGQ: // global
           Hp = Hp - 40;
           R1 = Text.Read.Lex.numberToRangedRational2_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3HHM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HHM: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.077869589 UTC

[section ""data" . Text.Read.Lex.numberToRangedRational_closure" {
     Text.Read.Lex.numberToRangedRational_closure:
         const Text.Read.Lex.numberToRangedRational_info;
         const 0;
 },
 Text.Read.Lex.numberToRangedRational_entry() //  [R2, R3]
         { info_tbl: [(c3HKw,
                       label: Text.Read.Lex.numberToRangedRational_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HKw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HKx; else goto c3HKy;
       c3HKx: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.numberToRangedRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HKy: // global
           I64[Sp - 16] = block_c3HKt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3HKC; else goto c3HKu;
       u3HKC: // global
           call _c3HKt(R1) args: 0, res: 0, upd: 0;
       c3HKu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HKt() //  [R1]
         { info_tbl: [(c3HKt,
                       label: block_c3HKt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HKt: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call Text.Read.Lex.$wnumberToRangedRational_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.083363717 UTC

[section ""cstring" . lvl5_r3y9w_bytes" {
     lvl5_r3y9w_bytes:
         I8[] [118,97,108,68,105,103,58,32,66,97,100,32,98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.085734701 UTC

[section ""data" . Text.Read.Lex.readDecP2_closure" {
     Text.Read.Lex.readDecP2_closure:
         const Text.Read.Lex.readDecP2_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP2_entry() //  [R1]
         { info_tbl: [(c3HKW,
                       label: Text.Read.Lex.readDecP2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HKW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HKX; else goto c3HKY;
       c3HKX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HKY: // global
           (_c3HKR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HKR::I64 == 0) goto c3HKT; else goto c3HKS;
       c3HKT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HKS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HKR::I64;
           I64[Sp - 24] = block_c3HKU_info;
           R2 = lvl5_r3y9w_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3HKU() //  [R1]
         { info_tbl: [(c3HKU,
                       label: block_c3HKU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HKU: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.091338869 UTC

[section ""data" . sat_s3Gbg_closure" {
     sat_s3Gbg_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.093063918 UTC

[section ""data" . sat_s3Gbh_closure" {
     sat_s3Gbh_closure:
         const :_con_info;
         const sat_s3Gbg_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.095429417 UTC

[section ""data" . Text.Read.Lex.readDecP3_closure" {
     Text.Read.Lex.readDecP3_closure:
         const Text.Read.Lex.readDecP3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP3_entry() //  [R1]
         { info_tbl: [(c3HLm,
                       label: Text.Read.Lex.readDecP3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HLm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HLn; else goto c3HLo;
       c3HLn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HLo: // global
           (_c3HLj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HLj::I64 == 0) goto c3HLl; else goto c3HLk;
       c3HLl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HLk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HLj::I64;
           R3 = sat_s3Gbh_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.10019697 UTC

[section ""data" . sat_s3Gbi_closure" {
     sat_s3Gbi_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.101995379 UTC

[section ""data" . sat_s3Gbj_closure" {
     sat_s3Gbj_closure:
         const :_con_info;
         const sat_s3Gbi_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.104049999 UTC

[section ""data" . Text.Read.Lex.readDecP4_closure" {
     Text.Read.Lex.readDecP4_closure:
         const Text.Read.Lex.readDecP4_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.readDecP4_entry() //  [R1]
         { info_tbl: [(c3HLG,
                       label: Text.Read.Lex.readDecP4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HLG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HLH; else goto c3HLI;
       c3HLH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HLI: // global
           (_c3HLD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3HLD::I64 == 0) goto c3HLF; else goto c3HLE;
       c3HLF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3HLE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3HLD::I64;
           R3 = sat_s3Gbj_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.11078283 UTC

[section ""data" . Text.Read.Lex.$w$svalDig_closure" {
     Text.Read.Lex.$w$svalDig_closure:
         const Text.Read.Lex.$w$svalDig_info;
         const 0;
 },
 Text.Read.Lex.$w$svalDig_entry() //  [R2, R3]
         { info_tbl: [(c3HM1,
                       label: Text.Read.Lex.$w$svalDig_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HM1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3HM2; else goto c3HM3;
       c3HM2: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$svalDig_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HM3: // global
           I64[Sp - 24] = block_c3HLW_info;
           _s3Gbl::I64 = R3;
           R3 = Text.Read.Lex.readDecP4_closure;
           _s3Gbk::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3Gbk::P64;
           I64[Sp - 8] = _s3Gbl::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HLW() //  [R1]
         { info_tbl: [(c3HLW,
                       label: block_c3HLW_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HLW: // global
           if (R1 == 1) goto c3HM0; else goto c3HLZ;
       c3HM0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HOn; else goto c3HOm;
       c3HOn: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HOm: // global
           _s3Gbl::I64 = I64[Sp + 16];
           if (48 > _s3Gbl::I64) goto u3HOO; else goto c3HOJ;
       u3HOO: // global
           Sp = Sp + 24;
           goto u3HOR;
       c3HOJ: // global
           if (_s3Gbl::I64 > 55) goto u3HOP; else goto c3HOI;
       u3HOP: // global
           Sp = Sp + 24;
           goto u3HOR;
       u3HOR: // global
           call _c3HOx() args: 0, res: 0, upd: 0;
       c3HOI: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3Gbl::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HLZ: // global
           I64[Sp] = block_c3HM6_info;
           R3 = Text.Read.Lex.numberToFixed1_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HM6() //  [R1]
         { info_tbl: [(c3HM6,
                       label: block_c3HM6_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HM6: // global
           if (R1 == 1) goto c3HNR; else goto c3HMe;
       c3HNR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HNW; else goto c3HNV;
       c3HNW: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HNV: // global
           _s3Gbl::I64 = I64[Sp + 16];
           if (48 > _s3Gbl::I64) goto u3HOM; else goto c3HOi;
       u3HOM: // global
           Sp = Sp + 24;
           goto u3HOT;
       c3HOi: // global
           if (_s3Gbl::I64 > 57) goto u3HON; else goto c3HOh;
       u3HON: // global
           Sp = Sp + 24;
           goto u3HOT;
       u3HOT: // global
           call _c3HOx() args: 0, res: 0, upd: 0;
       c3HOh: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3Gbl::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HMe: // global
           _s3Gbk::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HMb_info;
           R3 = Text.Read.Lex.readDecP3_closure;
           R2 = _s3Gbk::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HMb() //  [R1]
         { info_tbl: [(c3HMb,
                       label: block_c3HMb_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HMb: // global
           if (R1 == 1) goto c3HMl; else goto c3HMk;
       c3HMl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HMq; else goto c3HMp;
       c3HMq: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3HMp: // global
           _s3Gbl::I64 = I64[Sp + 8];
           if (48 > _s3Gbl::I64) goto c3HNE; else goto c3HNQ;
       c3HNQ: // global
           if (_s3Gbl::I64 > 57) goto c3HNE; else goto c3HNP;
       c3HNE: // global
           Hp = Hp - 32;
           call _c3HMu() args: 0, res: 0, upd: 0;
       c3HNP: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3Gbl::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HMk: // global
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3HMu() //  []
         { info_tbl: [(c3HMu,
                       label: block_c3HMu_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HMu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HMy; else goto c3HMx;
       c3HMy: // global
           HpAlloc = 32;
           I64[Sp] = block_c3HMu_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3HMx: // global
           _s3Gbl::I64 = I64[Sp + 8];
           if (97 > _s3Gbl::I64) goto c3HNf; else goto c3HNu;
       c3HNu: // global
           if (_s3Gbl::I64 > 102) goto c3HNf; else goto c3HNt;
       c3HNf: // global
           Hp = Hp - 32;
           call _c3HMC() args: 0, res: 0, upd: 0;
       c3HNt: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3Gbl::I64 - 87;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3HMC() //  []
         { info_tbl: [(c3HMC,
                       label: block_c3HMC_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HMC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HMG; else goto c3HMF;
       c3HMG: // global
           HpAlloc = 32;
           I64[Sp] = block_c3HMC_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3HMF: // global
           _s3Gbl::I64 = I64[Sp + 8];
           if (65 > _s3Gbl::I64) goto u3HOK; else goto c3HN5;
       u3HOK: // global
           Sp = Sp + 16;
           goto u3HOX;
       c3HN5: // global
           if (_s3Gbl::I64 > 70) goto u3HOL; else goto c3HN4;
       u3HOL: // global
           Sp = Sp + 16;
           goto u3HOX;
       u3HOX: // global
           call _c3HOx() args: 0, res: 0, upd: 0;
       c3HN4: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3Gbl::I64 - 55;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3HOx() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HOx: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.13060793 UTC

[section ""data" . Text.Read.Lex.$wvalDig_closure" {
     Text.Read.Lex.$wvalDig_closure:
         const Text.Read.Lex.$wvalDig_info;
         const 0;
 },
 Text.Read.Lex.$wvalDig_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HPS: // global
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3GbW_entry() //  [R1]
         { info_tbl: [(c3HQ0,
                       label: sat_s3GbW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HQ0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3HQ1; else goto c3HQ2;
       c3HQ1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HQ2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3GbY_entry() //  [R1]
         { info_tbl: [(c3HQb,
                       label: sat_s3GbY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HQb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3HQc; else goto c3HQd;
       c3HQc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HQd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3Gc0_entry() //  [R1]
         { info_tbl: [(c3HQm,
                       label: sat_s3Gc0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HQm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3HQn; else goto c3HQo;
       c3HQn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HQo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Text.Read.Lex.$wvalDig_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3HQt,
                       label: Text.Read.Lex.$wvalDig_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, False, True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HQt: // global
           _s3GbV::I64 = R5;
           _s3GbU::P64 = R4;
           _s3GbT::P64 = R3;
           _s3GbS::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c3HQu; else goto c3HQv;
       c3HQv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HQx; else goto c3HQw;
       c3HQx: // global
           HpAlloc = 24;
           goto c3HQu;
       c3HQu: // global
           R1 = Text.Read.Lex.$wvalDig_closure;
           P64[Sp - 32] = _s3GbS::P64;
           P64[Sp - 24] = _s3GbT::P64;
           P64[Sp - 16] = _s3GbU::P64;
           I64[Sp - 8] = _s3GbV::I64;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3HQw: // global
           I64[Hp - 16] = sat_s3GbW_info;
           P64[Hp] = _s3GbT::P64;
           I64[Sp - 40] = block_c3HQ3_info;
           R2 = _s3GbS::P64;
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = _s3GbU::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 32] = _s3GbS::P64;
           P64[Sp - 24] = _s3GbT::P64;
           P64[Sp - 16] = _s3GbU::P64;
           I64[Sp - 8] = _s3GbV::I64;
           Sp = Sp - 64;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c3HQ3() //  [R1]
         { info_tbl: [(c3HQ3,
                       label: block_c3HQ3_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HQ3: // global
           if (R1 & 7 == 1) goto c3HQq; else goto c3HQr;
       c3HQq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HQA; else goto c3HQz;
       c3HQA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HQz: // global
           I64[Hp - 16] = sat_s3GbY_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c3HQe_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c3HQr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HSP; else goto c3HSO;
       c3HSP: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HSO: // global
           _s3GbV::I64 = I64[Sp + 32];
           if (48 > _s3GbV::I64) goto u3HTe; else goto c3HTb;
       u3HTe: // global
           Sp = Sp + 40;
           goto u3HTl;
       c3HTb: // global
           if (_s3GbV::I64 > 55) goto u3HTf; else goto c3HTa;
       u3HTf: // global
           Sp = Sp + 40;
           goto u3HTl;
       u3HTl: // global
           call _c3HSZ() args: 0, res: 0, upd: 0;
       c3HTa: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3GbV::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3HQe() //  [R1]
         { info_tbl: [(c3HQe,
                       label: block_c3HQe_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HQe: // global
           if (R1 & 7 == 1) goto c3HQD; else goto c3HSj;
       c3HQD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3HQG; else goto c3HQF;
       c3HQG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HQF: // global
           I64[Hp - 16] = sat_s3Gc0_info;
           P64[Hp] = P64[Sp + 16];
           _s3GbU::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3HQB_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = _s3GbU::P64;
           P64[Sp + 16] = Hp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c3HSj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HSo; else goto c3HSn;
       c3HSo: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HSn: // global
           _s3GbV::I64 = I64[Sp + 32];
           if (48 > _s3GbV::I64) goto u3HTg; else goto c3HSK;
       u3HTg: // global
           Sp = Sp + 40;
           goto u3HTn;
       c3HSK: // global
           if (_s3GbV::I64 > 57) goto u3HTh; else goto c3HSJ;
       u3HTh: // global
           Sp = Sp + 40;
           goto u3HTn;
       u3HTn: // global
           call _c3HSZ() args: 0, res: 0, upd: 0;
       c3HSJ: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3GbV::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3HQB() //  [R1]
         { info_tbl: [(c3HQB,
                       label: block_c3HQB_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HQB: // global
           if (R1 & 7 == 1) goto c3HQM; else goto c3HQN;
       c3HQM: // global
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3HQN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HQS; else goto c3HQR;
       c3HQS: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HQR: // global
           _s3GbV::I64 = I64[Sp + 8];
           if (48 > _s3GbV::I64) goto c3HS6; else goto c3HSi;
       c3HSi: // global
           if (_s3GbV::I64 > 57) goto c3HS6; else goto c3HSh;
       c3HS6: // global
           Hp = Hp - 32;
           call _c3HQW() args: 0, res: 0, upd: 0;
       c3HSh: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3GbV::I64 - 48;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3HQW() //  []
         { info_tbl: [(c3HQW,
                       label: block_c3HQW_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HQW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HR0; else goto c3HQZ;
       c3HR0: // global
           HpAlloc = 32;
           I64[Sp] = block_c3HQW_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3HQZ: // global
           _s3GbV::I64 = I64[Sp + 8];
           if (97 > _s3GbV::I64) goto c3HRH; else goto c3HRW;
       c3HRW: // global
           if (_s3GbV::I64 > 102) goto c3HRH; else goto c3HRV;
       c3HRH: // global
           Hp = Hp - 32;
           call _c3HR4() args: 0, res: 0, upd: 0;
       c3HRV: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3GbV::I64 - 87;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3HR4() //  []
         { info_tbl: [(c3HR4,
                       label: block_c3HR4_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HR4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HR8; else goto c3HR7;
       c3HR8: // global
           HpAlloc = 32;
           I64[Sp] = block_c3HR4_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3HR7: // global
           _s3GbV::I64 = I64[Sp + 8];
           if (65 > _s3GbV::I64) goto u3HTi; else goto c3HRx;
       u3HTi: // global
           Sp = Sp + 16;
           goto u3HTr;
       c3HRx: // global
           if (_s3GbV::I64 > 70) goto u3HTj; else goto c3HRw;
       u3HTj: // global
           Sp = Sp + 16;
           goto u3HTr;
       u3HTr: // global
           call _c3HSZ() args: 0, res: 0, upd: 0;
       c3HRw: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s3GbV::I64 - 55;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3HSZ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HSZ: // global
           Hp = Hp - 32;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.15820518 UTC

[section ""data" . Text.Read.Lex.$w$sreadIntP'_closure" {
     Text.Read.Lex.$w$sreadIntP'_closure:
         const Text.Read.Lex.$w$sreadIntP'_info;
         const 0;
 },
 sat_s3GcI_entry() //  [R1, R2]
         { info_tbl: [(c3HVc,
                       label: sat_s3GcI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HVc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HVd; else goto c3HVe;
       c3HVd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HVe: // global
           I64[Sp - 16] = block_c3HV9_info;
           _s3Gcv::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gcv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3HVu; else goto c3HVa;
       u3HVu: // global
           call _c3HV9(R1) args: 0, res: 0, upd: 0;
       c3HVa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HV9() //  [R1]
         { info_tbl: [(c3HV9,
                       label: block_c3HV9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HV9: // global
           _s3Gcv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HVh_info;
           R3 = I64[R1 + 7];
           R2 = _s3Gcv::P64;
           Sp = Sp + 8;
           call Text.Read.Lex.$w$svalDig_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HVh() //  [R1]
         { info_tbl: [(c3HVh,
                       label: block_c3HVh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HVh: // global
           if (R1 & 7 == 1) goto c3HVo; else goto c3HVs;
       c3HVo: // global
           R1 = Text.Read.Lex.$fShowLexeme2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HVs: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3GcC_entry() //  [R1, R2]
         { info_tbl: [(c3HVD,
                       label: sat_s3GcC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HVD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3HVE; else goto c3HVF;
       c3HVE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HVF: // global
           I64[Sp - 16] = block_c3HVA_info;
           _s3Gcv::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gcv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3HVV; else goto c3HVB;
       u3HVV: // global
           call _c3HVA(R1) args: 0, res: 0, upd: 0;
       c3HVB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HVA() //  [R1]
         { info_tbl: [(c3HVA,
                       label: block_c3HVA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HVA: // global
           _s3Gcv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3HVI_info;
           R3 = I64[R1 + 7];
           R2 = _s3Gcv::P64;
           Sp = Sp + 8;
           call Text.Read.Lex.$w$svalDig_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HVI() //  [R1]
         { info_tbl: [(c3HVI,
                       label: block_c3HVI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HVI: // global
           if (R1 & 7 == 1) goto c3HVP; else goto c3HVT;
       c3HVP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HVT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3HW1_srtd" {
     u3HW1_srtd:
         const S3GvX_srt+240;
         const 34;
         const 8858370049;
 },
 Text.Read.Lex.$w$sreadIntP'_entry() //  [R2, R3]
         { info_tbl: [(c3HVW,
                       label: Text.Read.Lex.$w$sreadIntP'_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HVW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3HW0; else goto c3HVZ;
       c3HW0: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$w$sreadIntP'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HVZ: // global
           I64[Hp - 24] = sat_s3GcI_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3GcC_info;
           P64[Hp] = R2;
           R5 = R3;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = R2;
           call Text.Read.Lex.$w$sreadIntP_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.175364669 UTC

[section ""data" . Text.Read.Lex.$wreadIntP'_closure" {
     Text.Read.Lex.$wreadIntP'_closure:
         const Text.Read.Lex.$wreadIntP'_info;
         const 0;
 },
 sat_s3GcY_entry() //  [R1, R2]
         { info_tbl: [(c3HWW,
                       label: sat_s3GcY_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HWW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3HWX; else goto c3HWY;
       c3HWX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HWY: // global
           I64[Sp - 32] = block_c3HWT_info;
           _s3GcJ::P64 = P64[R1 + 7];
           _s3GcK::P64 = P64[R1 + 15];
           _s3GcL::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3GcJ::P64;
           P64[Sp - 16] = _s3GcK::P64;
           P64[Sp - 8] = _s3GcL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3HXe; else goto c3HWU;
       u3HXe: // global
           call _c3HWT(R1) args: 0, res: 0, upd: 0;
       c3HWU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HWT() //  [R1]
         { info_tbl: [(c3HWT,
                       label: block_c3HWT_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HWT: // global
           _s3GcL::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3HX1_info;
           R5 = I64[R1 + 7];
           R4 = _s3GcL::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HX1() //  [R1]
         { info_tbl: [(c3HX1,
                       label: block_c3HX1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HX1: // global
           if (R1 & 7 == 1) goto c3HX8; else goto c3HXc;
       c3HX8: // global
           R1 = Text.Read.Lex.$fShowLexeme2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HXc: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3GcS_entry() //  [R1, R2]
         { info_tbl: [(c3HXn,
                       label: sat_s3GcS_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HXn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3HXo; else goto c3HXp;
       c3HXo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HXp: // global
           I64[Sp - 32] = block_c3HXk_info;
           _s3GcJ::P64 = P64[R1 + 7];
           _s3GcK::P64 = P64[R1 + 15];
           _s3GcL::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3GcJ::P64;
           P64[Sp - 16] = _s3GcK::P64;
           P64[Sp - 8] = _s3GcL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3HXF; else goto c3HXl;
       u3HXF: // global
           call _c3HXk(R1) args: 0, res: 0, upd: 0;
       c3HXl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3HXk() //  [R1]
         { info_tbl: [(c3HXk,
                       label: block_c3HXk_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HXk: // global
           _s3GcL::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3HXs_info;
           R5 = I64[R1 + 7];
           R4 = _s3GcL::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.Read.Lex.$wvalDig_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HXs() //  [R1]
         { info_tbl: [(c3HXs,
                       label: block_c3HXs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HXs: // global
           if (R1 & 7 == 1) goto c3HXz; else goto c3HXD;
       c3HXz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3HXD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3HXL_srtd" {
     u3HXL_srtd:
         const S3GvX_srt+256;
         const 33;
         const 5368709121;
 },
 Text.Read.Lex.$wreadIntP'_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3HXG,
                       label: Text.Read.Lex.$wreadIntP'_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HXG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3HXK; else goto c3HXJ;
       c3HXK: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wreadIntP'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HXJ: // global
           I64[Hp - 56] = sat_s3GcY_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3GcS_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R6 = R5;
           R5 = Hp - 55;
           _s3GcL::P64 = R4;
           R4 = Hp - 23;
           _s3GcK::P64 = R3;
           R3 = _s3GcL::P64;
           R2 = _s3GcK::P64;
           call Text.Read.Lex.$wreadIntP_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.193216475 UTC

[section ""data" . Text.Read.Lex.readDecP6_closure" {
     Text.Read.Lex.readDecP6_closure:
         const Text.Read.Lex.readDecP6_info;
         const 0;
 },
 Text.Read.Lex.readDecP6_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3HYB,
                       label: Text.Read.Lex.readDecP6_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HYB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HYC; else goto c3HYD;
       c3HYC: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readDecP6_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HYD: // global
           I64[Sp - 8] = block_c3HYy_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HYy() //  [R1]
         { info_tbl: [(c3HYy,
                       label: block_c3HYy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HYy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HYG; else goto c3HYF;
       c3HYG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HYF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.199718772 UTC

[section ""data" . Text.Read.Lex.readOctP1_closure" {
     Text.Read.Lex.readOctP1_closure:
         const Text.Read.Lex.readOctP1_info;
         const 0;
 },
 Text.Read.Lex.readOctP1_entry() //  [R2]
         { info_tbl: [(c3HYZ,
                       label: Text.Read.Lex.readOctP1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HYZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HZ0; else goto c3HZ1;
       c3HZ0: // global
           R2 = R2;
           R1 = Text.Read.Lex.readOctP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HZ1: // global
           I64[Sp - 8] = block_c3HYW_info;
           R3 = R2;
           R2 = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HYW() //  [R1]
         { info_tbl: [(c3HYW,
                       label: block_c3HYW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HYW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HZ4; else goto c3HZ3;
       c3HZ4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HZ3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.205564933 UTC

[section ""data" . Text.Read.Lex.readOctP_$sreadOctP_closure" {
     Text.Read.Lex.readOctP_$sreadOctP_closure:
         const Text.Read.Lex.readOctP_$sreadOctP_info;
         const 0;
 },
 Text.Read.Lex.readOctP_$sreadOctP_entry() //  [R2]
         { info_tbl: [(c3HZk,
                       label: Text.Read.Lex.readOctP_$sreadOctP_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HZk: // global
           R2 = R2;
           call Text.Read.Lex.readOctP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.209508544 UTC

[section ""data" . Text.Read.Lex.readOctP2_closure" {
     Text.Read.Lex.readOctP2_closure:
         const Text.Read.Lex.readOctP2_info;
         const 0;
 },
 w2_s3Gda_entry() //  [R1]
         { info_tbl: [(c3HZz,
                       label: w2_s3Gda_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HZz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3HZA; else goto c3HZB;
       c3HZA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3HZB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP4_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3Gde_entry() //  [R1, R2]
         { info_tbl: [(c3HZK,
                       label: sat_s3Gde_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HZK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3HZL; else goto c3HZM;
       c3HZL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3HZM: // global
           I64[Sp - 8] = block_c3HZH_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3HZH() //  [R1]
         { info_tbl: [(c3HZH,
                       label: block_c3HZH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HZH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3HZP; else goto c3HZO;
       c3HZP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3HZO: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.readOctP2_entry() //  [R2, R3]
         { info_tbl: [(c3HZQ,
                       label: Text.Read.Lex.readOctP2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3HZQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3HZU; else goto c3HZT;
       c3HZU: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readOctP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3HZT: // global
           I64[Hp - 48] = w2_s3Gda_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3Gde_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.219661912 UTC

[section ""data" . Text.Read.Lex.readOctP_closure" {
     Text.Read.Lex.readOctP_closure:
         const Text.Read.Lex.readOctP_info;
         const 0;
 },
 Text.Read.Lex.readOctP_entry() //  [R2, R3]
         { info_tbl: [(c3I0o,
                       label: Text.Read.Lex.readOctP_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I0o: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readOctP2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.223313035 UTC

[section ""data" . Text.Read.Lex.readDecP1_closure" {
     Text.Read.Lex.readDecP1_closure:
         const Text.Read.Lex.readDecP1_info;
         const 0;
 },
 section ""relreadonly" . u3I0I_srtd" {
     u3I0I_srtd:
         const S3GvX_srt+280;
         const 34;
         const 8858370049;
 },
 Text.Read.Lex.readDecP1_entry() //  [R2]
         { info_tbl: [(c3I0C,
                       label: Text.Read.Lex.readDecP1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I0C: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3I0D; else goto c3I0E;
       c3I0D: // global
           R2 = R2;
           R1 = Text.Read.Lex.readDecP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3I0E: // global
           I64[Sp - 8] = block_c3I0z_info;
           R3 = R2;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3I0z() //  [R1]
         { info_tbl: [(c3I0z,
                       label: block_c3I0z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I0z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3I0H; else goto c3I0G;
       c3I0H: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I0G: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.230426794 UTC

[section ""data" . Text.Read.Lex.readDecP_$sreadDecP_closure" {
     Text.Read.Lex.readDecP_$sreadDecP_closure:
         const Text.Read.Lex.readDecP_$sreadDecP_info;
         const 0;
 },
 Text.Read.Lex.readDecP_$sreadDecP_entry() //  [R2]
         { info_tbl: [(c3I0Z,
                       label: Text.Read.Lex.readDecP_$sreadDecP_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I0Z: // global
           R2 = R2;
           call Text.Read.Lex.readDecP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.234510687 UTC

[section ""data" . Text.Read.Lex.readDecP5_closure" {
     Text.Read.Lex.readDecP5_closure:
         const Text.Read.Lex.readDecP5_info;
         const 0;
 },
 w2_s3Gdk_entry() //  [R1]
         { info_tbl: [(c3I1e,
                       label: w2_s3Gdk_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I1e: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3I1f; else goto c3I1g;
       c3I1f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I1g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3Gdo_entry() //  [R1, R2]
         { info_tbl: [(c3I1p,
                       label: sat_s3Gdo_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I1p: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3I1q; else goto c3I1r;
       c3I1q: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3I1r: // global
           I64[Sp - 8] = block_c3I1m_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3I1m() //  [R1]
         { info_tbl: [(c3I1m,
                       label: block_c3I1m_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I1m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3I1u; else goto c3I1t;
       c3I1u: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I1t: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.readDecP5_entry() //  [R2, R3]
         { info_tbl: [(c3I1v,
                       label: Text.Read.Lex.readDecP5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I1v: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3I1z; else goto c3I1y;
       c3I1z: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readDecP5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3I1y: // global
           I64[Hp - 48] = w2_s3Gdk_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3Gdo_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.244201008 UTC

[section ""data" . Text.Read.Lex.readDecP_closure" {
     Text.Read.Lex.readDecP_closure:
         const Text.Read.Lex.readDecP_info;
         const 0;
 },
 Text.Read.Lex.readDecP_entry() //  [R2, R3]
         { info_tbl: [(c3I23,
                       label: Text.Read.Lex.readDecP_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I23: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readDecP5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.247869501 UTC

[section ""data" . Text.Read.Lex.readHexP1_closure" {
     Text.Read.Lex.readHexP1_closure:
         const Text.Read.Lex.readHexP1_info;
         const 0;
 },
 Text.Read.Lex.readHexP1_entry() //  [R2]
         { info_tbl: [(c3I2h,
                       label: Text.Read.Lex.readHexP1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I2h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3I2i; else goto c3I2j;
       c3I2i: // global
           R2 = R2;
           R1 = Text.Read.Lex.readHexP1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3I2j: // global
           I64[Sp - 8] = block_c3I2e_info;
           R3 = R2;
           R2 = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 8;
           call Text.Read.Lex.$w$sreadIntP'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3I2e() //  [R1]
         { info_tbl: [(c3I2e,
                       label: block_c3I2e_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I2e: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3I2m; else goto c3I2l;
       c3I2m: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I2l: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.253868652 UTC

[section ""data" . Text.Read.Lex.readHexP_$sreadHexP_closure" {
     Text.Read.Lex.readHexP_$sreadHexP_closure:
         const Text.Read.Lex.readHexP_$sreadHexP_info;
         const 0;
 },
 Text.Read.Lex.readHexP_$sreadHexP_entry() //  [R2]
         { info_tbl: [(c3I2C,
                       label: Text.Read.Lex.readHexP_$sreadHexP_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I2C: // global
           R2 = R2;
           call Text.Read.Lex.readHexP1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.257946243 UTC

[section ""data" . Text.Read.Lex.readHexP2_closure" {
     Text.Read.Lex.readHexP2_closure:
         const Text.Read.Lex.readHexP2_info;
         const 0;
 },
 w2_s3Gdu_entry() //  [R1]
         { info_tbl: [(c3I2R,
                       label: w2_s3Gdu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I2R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3I2S; else goto c3I2T;
       c3I2S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I2T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.Read.Lex.readDecP3_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3Gdy_entry() //  [R1, R2]
         { info_tbl: [(c3I32,
                       label: sat_s3Gdy_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I32: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3I33; else goto c3I34;
       c3I33: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3I34: // global
           I64[Sp - 8] = block_c3I2Z_info;
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.Read.Lex.$wreadIntP'_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3I2Z() //  [R1]
         { info_tbl: [(c3I2Z,
                       label: block_c3I2Z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I2Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3I37; else goto c3I36;
       c3I37: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I36: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.readHexP2_entry() //  [R2, R3]
         { info_tbl: [(c3I38,
                       label: Text.Read.Lex.readHexP2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I38: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3I3c; else goto c3I3b;
       c3I3c: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.readHexP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3I3b: // global
           I64[Hp - 48] = w2_s3Gdu_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3Gdy_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.268409917 UTC

[section ""data" . Text.Read.Lex.readHexP_closure" {
     Text.Read.Lex.readHexP_closure:
         const Text.Read.Lex.readHexP_info;
         const 0;
 },
 Text.Read.Lex.readHexP_entry() //  [R2, R3]
         { info_tbl: [(c3I3G,
                       label: Text.Read.Lex.readHexP_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I3G: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.readHexP2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.276972354 UTC

[section ""data" . $wlexDigits_r3y9x_closure" {
     $wlexDigits_r3y9x_closure:
         const $wlexDigits_r3y9x_info;
         const 0;
 },
 lvl116_s3GdB_entry() //  [R1, R2]
         { info_tbl: [(c3I43,
                       label: lvl116_s3GdB_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I43: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I44; else goto c3I45;
       c3I44: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3I45: // global
           I64[Sp - 16] = block_c3I3W_info;
           _s3GdA::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GdA::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3I4c; else goto c3I3X;
       u3I4c: // global
           call _c3I3W(R1) args: 0, res: 0, upd: 0;
       c3I3X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3I3W() //  [R1]
         { info_tbl: [(c3I3W,
                       label: block_c3I3W_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I3W: // global
           if (R1 & 7 == 1) goto c3I40; else goto c3I41;
       c3I40: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3I41: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3GdL_entry() //  [R1]
         { info_tbl: [(c3I4r,
                       label: sat_s3GdL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I4r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I4s; else goto c3I4t;
       c3I4s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I4t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GdX_entry() //  [R1, R2]
         { info_tbl: [(c3I4V,
                       label: sat_s3GdX_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I4V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3I4Z; else goto c3I4Y;
       c3I4Z: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3I4Y: // global
           _s3GdI::P64 = P64[R1 + 7];
           _s3GdT::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3GdT::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3GdI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3GdU_entry() //  [R1]
         { info_tbl: [(c3I50,
                       label: lvl117_s3GdU_info
                       rep:HeapRep 5 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I50: // global
           _s3GdU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3I51; else goto c3I52;
       c3I52: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3I54; else goto c3I53;
       c3I54: // global
           HpAlloc = 24;
           goto c3I51;
       c3I51: // global
           R1 = _s3GdU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I53: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GdU::P64;
           _s3GdG::P64 = P64[_s3GdU::P64 + 16];
           _s3GdI::P64 = P64[_s3GdU::P64 + 24];
           _s3GdJ::P64 = P64[_s3GdU::P64 + 32];
           _s3GdN::P64 = P64[_s3GdU::P64 + 40];
           _s3GdT::P64 = P64[_s3GdU::P64 + 48];
           I64[Hp - 16] = sat_s3GdX_info;
           P64[Hp - 8] = _s3GdI::P64;
           P64[Hp] = _s3GdT::P64;
           R4 = _s3GdJ::P64;
           R3 = Hp - 15;
           R2 = _s3GdN::P64;
           R1 = _s3GdG::P64;
           Sp = Sp - 16;
           call scan_s3GdG_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GdZ_entry() //  [R1]
         { info_tbl: [(c3I5a,
                       label: sat_s3GdZ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I5a: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Ge3_entry() //  [R1]
         { info_tbl: [(c3I5n,
                       label: sat_s3Ge3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I5n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I5o; else goto c3I5p;
       c3I5o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I5p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Ge5_entry() //  [R1]
         { info_tbl: [(c3I5y,
                       label: sat_s3Ge5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I5y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I5z; else goto c3I5A;
       c3I5z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I5A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gea_entry() //  [R1]
         { info_tbl: [(c3I5J,
                       label: sat_s3Gea_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I5J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I5K; else goto c3I5L;
       c3I5K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I5L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gec_entry() //  [R1]
         { info_tbl: [(c3I5U,
                       label: sat_s3Gec_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I5U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I5V; else goto c3I5W;
       c3I5V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I5W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gej_entry() //  [R1]
         { info_tbl: [(c3I6f,
                       label: sat_s3Gej_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I6f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I6g; else goto c3I6h;
       c3I6g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I6h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gel_entry() //  [R1]
         { info_tbl: [(c3I6q,
                       label: sat_s3Gel_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I6q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3I6r; else goto c3I6s;
       c3I6r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3I6s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 scan_s3GdG_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c3I6x,
                       label: scan_s3GdG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I6x: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3I6y; else goto c3I6z;
       c3I6y: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3I6z: // global
           I64[Sp - 40] = block_c3I4i_info;
           _s3GdG::P64 = R1;
           _s3Gdz::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3Gdz::P64;
           P64[Sp - 24] = _s3GdG::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3I8J; else goto c3I4j;
       u3I8J: // global
           call _c3I4i(R1) args: 0, res: 0, upd: 0;
       c3I4j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3I4i() //  [R1]
         { info_tbl: [(c3I4i,
                       label: block_c3I4i_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I4i: // global
           if (R1 & 7 == 1) goto c3I6u; else goto c3I6v;
       c3I6u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3I6C; else goto c3I6B;
       c3I6C: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I6B: // global
           I64[Hp - 16] = sat_s3GdL_info;
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 16;
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I6v: // global
           I64[Sp - 8] = block_c3I4w_info;
           _s3GdM::P64 = P64[R1 + 6];
           _s3GdN::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s3GdN::P64;
           P64[Sp + 8] = _s3GdM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3I8z; else goto c3I4x;
       u3I8z: // global
           call _c3I4w(R1) args: 0, res: 0, upd: 0;
       c3I4x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3I4w() //  [R1]
         { info_tbl: [(c3I4w,
                       label: block_c3I4w_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I4w: // global
           I64[Sp] = block_c3I4B_info;
           _s3GdP::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3GdP::I64;
           if (R1 & 7 != 0) goto u3I8A; else goto c3I4C;
       u3I8A: // global
           call _c3I4B(R1) args: 0, res: 0, upd: 0;
       c3I4C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3I4B() //  [R1]
         { info_tbl: [(c3I4B,
                       label: block_c3I4B_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I4B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3I6H; else goto c3I6G;
       c3I6H: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I6G: // global
           _s3GdR::I64 = I64[R1 + 7];
           _s3Ge0::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s3Ge0::I64, 11)) goto u3I8p; else goto u3I8r;
       u3I8p: // global
           _s3GdI::P64 = P64[Sp + 32];
           _s3GdJ::P64 = P64[Sp + 40];
           if (%MO_S_Lt_W64(_s3Ge0::I64, 10)) goto u3I8q; else goto c3I71;
       u3I8q: // global
           if (_s3Ge0::I64 != 8) goto c3I6N; else goto c3I6U;
       c3I6U: // global
           if (48 > _s3GdR::I64) goto c3I6P; else goto c3I6T;
       c3I6P: // global
           I64[Hp - 16] = sat_s3Ge3_info;
           P64[Hp] = _s3GdI::P64;
           R2 = Hp - 16;
           R1 = _s3GdJ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I6T: // global
           if (_s3GdR::I64 > 55) goto c3I6R; else goto c3I6S;
       c3I6R: // global
           I64[Hp - 16] = sat_s3Ge5_info;
           P64[Hp] = _s3GdI::P64;
           R2 = Hp - 16;
           R1 = _s3GdJ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I6S: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3GdR::I64 - 48;
           _c3I8o::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3I8o::P64;
           Sp = Sp + 8;
           goto u3I8E;
       c3I71: // global
           if (48 > _s3GdR::I64) goto c3I6W; else goto c3I70;
       c3I6W: // global
           I64[Hp - 16] = sat_s3Gea_info;
           P64[Hp] = _s3GdI::P64;
           R2 = Hp - 16;
           R1 = _s3GdJ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I70: // global
           if (_s3GdR::I64 > 57) goto c3I6Y; else goto c3I6Z;
       c3I6Y: // global
           I64[Hp - 16] = sat_s3Gec_info;
           P64[Hp] = _s3GdI::P64;
           R2 = Hp - 16;
           R1 = _s3GdJ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I6Z: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3GdR::I64 - 48;
           _c3I8i::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3I8i::P64;
           Sp = Sp + 8;
           goto u3I8E;
       u3I8r: // global
           if (_s3Ge0::I64 != 16) goto c3I6N; else goto c3I7C;
       c3I6N: // global
           Hp = Hp - 24;
           R1 = Text.Read.Lex.readDecP2_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3I7C: // global
           if (48 > _s3GdR::I64) goto c3I7z; else goto c3I7B;
       c3I7B: // global
           if (_s3GdR::I64 > 57) goto c3I7z; else goto c3I7A;
       c3I7z: // global
           Hp = Hp - 24;
           I64[Sp + 16] = _s3GdR::I64;
           call _c3I61() args: 0, res: 0, upd: 0;
       c3I7A: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3GdR::I64 - 48;
           _c3I7U::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3I7U::P64;
           Sp = Sp + 8;
           goto u3I8E;
       u3I8E: // global
           call _c3I4J() args: 0, res: 0, upd: 0;
     }
 },
 _c3I61() //  []
         { info_tbl: [(c3I61,
                       label: block_c3I61_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I61: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3I74; else goto c3I73;
       c3I74: // global
           HpAlloc = 16;
           I64[Sp] = block_c3I61_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3I73: // global
           _s3GdR::I64 = I64[Sp + 16];
           if (97 > _s3GdR::I64) goto c3I7n; else goto c3I7p;
       c3I7p: // global
           if (_s3GdR::I64 > 102) goto c3I7n; else goto c3I7o;
       c3I7n: // global
           Hp = Hp - 16;
           call _c3I66() args: 0, res: 0, upd: 0;
       c3I7o: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3GdR::I64 - 87;
           P64[Sp + 16] = Hp - 7;
           Sp = Sp + 8;
           call _c3I4J() args: 0, res: 0, upd: 0;
     }
 },
 _c3I66() //  []
         { info_tbl: [(c3I66,
                       label: block_c3I66_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I66: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3I77; else goto c3I76;
       c3I77: // global
           HpAlloc = 24;
           I64[Sp] = block_c3I66_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3I76: // global
           _s3GdI::P64 = P64[Sp + 32];
           _s3GdJ::P64 = P64[Sp + 40];
           _s3GdR::I64 = I64[Sp + 16];
           if (65 > _s3GdR::I64) goto c3I79; else goto c3I7d;
       c3I79: // global
           I64[Hp - 16] = sat_s3Gej_info;
           P64[Hp] = _s3GdI::P64;
           R2 = Hp - 16;
           R1 = _s3GdJ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I7d: // global
           if (_s3GdR::I64 > 70) goto c3I7b; else goto c3I7c;
       c3I7b: // global
           I64[Hp - 16] = sat_s3Gel_info;
           P64[Hp] = _s3GdI::P64;
           R2 = Hp - 16;
           R1 = _s3GdJ::P64;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3I7c: // global
           I64[Hp - 16] = GHC.Types.I#_con_info;
           I64[Hp - 8] = _s3GdR::I64 - 55;
           _c3I8c::P64 = Hp - 15;
           Hp = Hp - 8;
           P64[Sp + 16] = _c3I8c::P64;
           Sp = Sp + 8;
           call _c3I4J() args: 0, res: 0, upd: 0;
     }
 },
 _c3I4J() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I4J: // global
           Hp = Hp + 88;
           _s3GdT::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c3I6L; else goto c3I6K;
       c3I6L: // global
           HpAlloc = 88;
           I64[Sp - 8] = block_c3I4I_info;
           R1 = _s3GdT::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3I6K: // global
           I64[Hp - 80] = lvl117_s3GdU_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = _s3GdT::P64;
           I64[Hp - 24] = sat_s3GdZ_info;
           P64[Hp - 16] = Hp - 80;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3I4I() //  [R1]
         { info_tbl: [(c3I4I,
                       label: block_c3I4I_info
                       rep:StackRep [False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I4I: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c3I4J() args: 0, res: 0, upd: 0;
     }
 },
 sat_s3GeC_entry() //  [R1, R2]
         { info_tbl: [(c3I8P,
                       label: sat_s3GeC_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I8P: // global
           R4 = P64[R1 + 7];
           R3 = GHC.Base.id_closure+1;
           R2 = R2;
           R1 = P64[R1 + 15];
           call scan_s3GdG_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlexDigits_r3y9x_entry() //  [R2, R3]
         { info_tbl: [(c3I8S,
                       label: $wlexDigits_r3y9x_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3I8S: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3I8W; else goto c3I8V;
       c3I8W: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = $wlexDigits_r3y9x_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3I8V: // global
           I64[Hp - 48] = lvl116_s3GdB_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = scan_s3GdG_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3GeC_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 29;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.325815807 UTC

[section ""data" . a1_r3y9y_closure" {
     a1_r3y9y_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.327492209 UTC

[section ""data" . a2_r3y9z_closure" {
     a2_r3y9z_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.331126445 UTC

[section ""data" . $wlexHexOct_r3y9A_closure" {
     $wlexHexOct_r3y9A_closure:
         const $wlexHexOct_r3y9A_info;
         const 0;
 },
 sat_s3GeI_entry() //  [R1, R2]
         { info_tbl: [(c3IbD,
                       label: sat_s3GeI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IbD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IbH; else goto c3IbG;
       c3IbH: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IbG: // global
           _s3GeD::P64 = P64[R1 + 7];
           I64[Hp - 32] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 24] = a2_r3y9z_closure+1;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 2;
           R1 = _s3GeD::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3GeE_entry() //  [R1]
         { info_tbl: [(c3IbL,
                       label: lvl116_s3GeE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IbL: // global
           _s3GeE::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3IbM; else goto c3IbN;
       c3IbN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IbP; else goto c3IbO;
       c3IbP: // global
           HpAlloc = 16;
           goto c3IbM;
       c3IbM: // global
           R1 = _s3GeE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IbO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GeE::P64;
           _s3GeD::P64 = P64[_s3GeE::P64 + 16];
           I64[Hp - 8] = sat_s3GeI_info;
           P64[Hp] = _s3GeD::P64;
           I64[Sp - 24] = block_c3IbI_info;
           R3 = Hp - 7;
           R2 = a2_r3y9z_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3IbI() //  [R1]
         { info_tbl: [(c3IbI,
                       label: block_c3IbI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IbI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IbS; else goto c3IbR;
       c3IbS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3IbR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GeP_entry() //  [R1, R2]
         { info_tbl: [(c3Ic4,
                       label: sat_s3GeP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ic4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Ic8; else goto c3Ic7;
       c3Ic8: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ic7: // global
           _s3GeD::P64 = P64[R1 + 7];
           I64[Hp - 32] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 24] = a1_r3y9y_closure+1;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 2;
           R1 = _s3GeD::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3GeL_entry() //  [R1]
         { info_tbl: [(c3Icc,
                       label: lvl117_s3GeL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Icc: // global
           _s3GeL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Icd; else goto c3Ice;
       c3Ice: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Icg; else goto c3Icf;
       c3Icg: // global
           HpAlloc = 16;
           goto c3Icd;
       c3Icd: // global
           R1 = _s3GeL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Icf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GeL::P64;
           _s3GeD::P64 = P64[_s3GeL::P64 + 16];
           I64[Hp - 8] = sat_s3GeP_info;
           P64[Hp] = _s3GeD::P64;
           I64[Sp - 24] = block_c3Ic9_info;
           R3 = Hp - 7;
           R2 = a1_r3y9y_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Ic9() //  [R1]
         { info_tbl: [(c3Ic9,
                       label: block_c3Ic9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ic9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Icj; else goto c3Ici;
       c3Icj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Ici: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3GeS_entry() //  [R1, R2]
         { info_tbl: [(c3Ics,
                       label: lvl118_s3GeS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ics: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Ict; else goto c3Icu;
       c3Ict: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Icu: // global
           I64[Sp - 24] = block_c3Icp_info;
           _s3GeE::P64 = P64[R1 + 7];
           _s3GeL::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3GeE::P64;
           P64[Sp - 8] = _s3GeL::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3IcK; else goto c3Icq;
       u3IcK: // global
           call _c3Icp(R1) args: 0, res: 0, upd: 0;
       c3Icq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Icp() //  [R1]
         { info_tbl: [(c3Icp,
                       label: block_c3Icp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Icp: // global
           _s3GeE::P64 = P64[Sp + 8];
           _s3GeW::I64 = I64[R1 + 7];
           if (_s3GeW::I64 < 120) goto u3IcF; else goto u3IcJ;
       u3IcF: // global
           _s3GeL::P64 = P64[Sp + 16];
           if (_s3GeW::I64 < 89) goto u3IcG; else goto u3IcI;
       u3IcG: // global
           if (_s3GeW::I64 >= 88) goto c3IcE; else goto u3IcH;
       u3IcH: // global
           if (_s3GeW::I64 != 79) goto c3IcA; else goto c3IcD;
       u3IcI: // global
           if (_s3GeW::I64 != 111) goto c3IcA; else goto c3IcD;
       c3IcD: // global
           R1 = _s3GeL::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3IcJ: // global
           if (_s3GeW::I64 < 121) goto c3IcE; else goto c3IcA;
       c3IcE: // global
           R1 = _s3GeE::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3IcA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gf2_entry() //  [R1, R2]
         { info_tbl: [(c3IcU,
                       label: sat_s3Gf2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IcU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IcV; else goto c3IcW;
       c3IcV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IcW: // global
           I64[Sp - 16] = block_c3IcR_info;
           _s3GeX::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GeX::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Id4; else goto c3IcS;
       u3Id4: // global
           call _c3IcR(R1) args: 0, res: 0, upd: 0;
       c3IcS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3IcR() //  [R1]
         { info_tbl: [(c3IcR,
                       label: block_c3IcR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IcR: // global
           if (I64[R1 + 7] == 48) goto c3Id3; else goto c3Id2;
       c3Id3: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Id2: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlexHexOct_r3y9A_entry() //  [R2]
         { info_tbl: [(c3Id5,
                       label: $wlexHexOct_r3y9A_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Id5: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3Id9; else goto c3Id8;
       c3Id9: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = $wlexHexOct_r3y9A_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Id8: // global
           I64[Hp - 96] = lvl116_s3GeE_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = lvl117_s3GeL_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = lvl118_s3GeS_info;
           P64[Hp - 40] = Hp - 96;
           P64[Hp - 32] = Hp - 72;
           I64[Hp - 24] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = sat_s3Gf2_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.357295864 UTC

[section ""data" . lexHexOct_r3y9B_closure" {
     lexHexOct_r3y9B_closure:
         const lexHexOct_r3y9B_info;
         const 0;
 },
 lexHexOct_r3y9B_entry() //  [R2]
         { info_tbl: [(c3Iey,
                       label: lexHexOct_r3y9B_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iey: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Iez; else goto c3IeA;
       c3Iez: // global
           R2 = R2;
           R1 = lexHexOct_r3y9B_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IeA: // global
           I64[Sp - 8] = block_c3Iev_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexHexOct_r3y9A_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Iev() //  [R1]
         { info_tbl: [(c3Iev,
                       label: block_c3Iev_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iev: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IeD; else goto c3IeC;
       c3IeD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IeC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.362802523 UTC

[section ""data" . lvl6_r3y9C_closure" {
     lvl6_r3y9C_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.365665374 UTC

[section ""data" . $wlexFrac_r3y9D_closure" {
     $wlexFrac_r3y9D_closure:
         const $wlexFrac_r3y9D_info;
         const 0;
 },
 sat_s3Gfa_entry() //  [R1, R2]
         { info_tbl: [(c3If4,
                       label: sat_s3Gfa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3If4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3If8; else goto c3If7;
       c3If8: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3If7: // global
           _s3Gf6::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s3Gf6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3Gf7_entry() //  [R1]
         { info_tbl: [(c3Ifc,
                       label: lvl116_s3Gf7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ifc: // global
           _s3Gf7::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Ifd; else goto c3Ife;
       c3Ife: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ifg; else goto c3Iff;
       c3Ifg: // global
           HpAlloc = 16;
           goto c3Ifd;
       c3Ifd: // global
           R1 = _s3Gf7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iff: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gf7::P64;
           _s3Gf6::P64 = P64[_s3Gf7::P64 + 16];
           I64[Hp - 8] = sat_s3Gfa_info;
           P64[Hp] = _s3Gf6::P64;
           I64[Sp - 24] = block_c3If9_info;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3If9() //  [R1]
         { info_tbl: [(c3If9,
                       label: block_c3If9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3If9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ifj; else goto c3Ifi;
       c3Ifj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Ifi: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gfh_entry() //  [R1, R2]
         { info_tbl: [(c3Ifs,
                       label: sat_s3Gfh_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ifs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ift; else goto c3Ifu;
       c3Ift: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ifu: // global
           I64[Sp - 16] = block_c3Ifp_info;
           _s3Gf7::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gf7::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3IfC; else goto c3Ifq;
       u3IfC: // global
           call _c3Ifp(R1) args: 0, res: 0, upd: 0;
       c3Ifq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ifp() //  [R1]
         { info_tbl: [(c3Ifp,
                       label: block_c3Ifp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ifp: // global
           if (I64[R1 + 7] == 46) goto c3IfB; else goto c3IfA;
       c3IfB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3IfA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlexFrac_r3y9D_entry() //  [R2]
         { info_tbl: [(c3IfD,
                       label: $wlexFrac_r3y9D_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IfD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IfH; else goto c3IfG;
       c3IfH: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = $wlexFrac_r3y9D_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IfG: // global
           I64[Hp - 32] = lvl116_s3Gf7_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3Gfh_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.385623342 UTC

[section ""data" . lexFrac_r3y9E_closure" {
     lexFrac_r3y9E_closure:
         const lexFrac_r3y9E_info;
         const 0;
 },
 lexFrac_r3y9E_entry() //  [R2]
         { info_tbl: [(c3Igq,
                       label: lexFrac_r3y9E_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Igq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Igr; else goto c3Igs;
       c3Igr: // global
           R2 = R2;
           R1 = lexFrac_r3y9E_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Igs: // global
           I64[Sp - 8] = block_c3Ign_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexFrac_r3y9D_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ign() //  [R1]
         { info_tbl: [(c3Ign,
                       label: block_c3Ign_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ign: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Igv; else goto c3Igu;
       c3Igv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Igu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.391683721 UTC

[section ""cstring" . m1_r3y9F_bytes" {
     m1_r3y9F_bytes:
         I8[] [83,79,72]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.394276361 UTC

[section ""data" . m2_r3y9G_closure" {
     m2_r3y9G_closure:
         const m2_r3y9G_info;
         const 0;
         const 0;
         const 0;
 },
 m2_r3y9G_entry() //  [R1]
         { info_tbl: [(c3IgO,
                       label: m2_r3y9G_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IgO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IgP; else goto c3IgQ;
       c3IgP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IgQ: // global
           (_c3IgL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IgL::I64 == 0) goto c3IgN; else goto c3IgM;
       c3IgN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IgM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IgL::I64;
           R2 = m1_r3y9F_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.398950021 UTC

[section ""data" . x_r3y9H_closure" {
     x_r3y9H_closure:
         const GHC.Types.C#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.401425728 UTC

[section ""cstring" . m3_r3y9I_bytes" {
     m3_r3y9I_bytes:
         I8[] [83,79]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.403747836 UTC

[section ""data" . m4_r3y9J_closure" {
     m4_r3y9J_closure:
         const m4_r3y9J_info;
         const 0;
         const 0;
         const 0;
 },
 m4_r3y9J_entry() //  [R1]
         { info_tbl: [(c3Ih7,
                       label: m4_r3y9J_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ih7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ih8; else goto c3Ih9;
       c3Ih8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ih9: // global
           (_c3Ih4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ih4::I64 == 0) goto c3Ih6; else goto c3Ih5;
       c3Ih6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ih5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ih4::I64;
           R2 = m3_r3y9I_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.408765387 UTC

[section ""data" . x1_r3y9K_closure" {
     x1_r3y9K_closure:
         const GHC.Types.C#_con_info;
         const 14;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.411816786 UTC

[section ""cstring" . m5_r3y9L_bytes" {
     m5_r3y9L_bytes:
         I8[] [78,85,76]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.41419116 UTC

[section ""data" . m6_r3y9M_closure" {
     m6_r3y9M_closure:
         const m6_r3y9M_info;
         const 0;
         const 0;
         const 0;
 },
 m6_r3y9M_entry() //  [R1]
         { info_tbl: [(c3Ihq,
                       label: m6_r3y9M_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ihq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ihr; else goto c3Ihs;
       c3Ihr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ihs: // global
           (_c3Ihn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ihn::I64 == 0) goto c3Ihp; else goto c3Iho;
       c3Ihp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Iho: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ihn::I64;
           R2 = m5_r3y9L_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.418644845 UTC

[section ""data" . x2_r3y9N_closure" {
     x2_r3y9N_closure:
         const GHC.Types.C#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.420321036 UTC

[section ""cstring" . m7_r3y9O_bytes" {
     m7_r3y9O_bytes:
         I8[] [83,84,88]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.42236553 UTC

[section ""data" . m8_r3y9P_closure" {
     m8_r3y9P_closure:
         const m8_r3y9P_info;
         const 0;
         const 0;
         const 0;
 },
 m8_r3y9P_entry() //  [R1]
         { info_tbl: [(c3IhJ,
                       label: m8_r3y9P_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IhJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IhK; else goto c3IhL;
       c3IhK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IhL: // global
           (_c3IhG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IhG::I64 == 0) goto c3IhI; else goto c3IhH;
       c3IhI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IhH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IhG::I64;
           R2 = m7_r3y9O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.426728603 UTC

[section ""data" . x3_r3y9Q_closure" {
     x3_r3y9Q_closure:
         const GHC.Types.C#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.428499824 UTC

[section ""cstring" . m9_r3y9R_bytes" {
     m9_r3y9R_bytes:
         I8[] [69,84,88]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.430514099 UTC

[section ""data" . m10_r3y9S_closure" {
     m10_r3y9S_closure:
         const m10_r3y9S_info;
         const 0;
         const 0;
         const 0;
 },
 m10_r3y9S_entry() //  [R1]
         { info_tbl: [(c3Ii2,
                       label: m10_r3y9S_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ii2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ii3; else goto c3Ii4;
       c3Ii3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ii4: // global
           (_c3IhZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IhZ::I64 == 0) goto c3Ii1; else goto c3Ii0;
       c3Ii1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ii0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IhZ::I64;
           R2 = m9_r3y9R_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.435189663 UTC

[section ""data" . x4_r3y9T_closure" {
     x4_r3y9T_closure:
         const GHC.Types.C#_con_info;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.43694966 UTC

[section ""cstring" . m11_r3y9U_bytes" {
     m11_r3y9U_bytes:
         I8[] [69,79,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.438841434 UTC

[section ""data" . m12_r3y9V_closure" {
     m12_r3y9V_closure:
         const m12_r3y9V_info;
         const 0;
         const 0;
         const 0;
 },
 m12_r3y9V_entry() //  [R1]
         { info_tbl: [(c3Iil,
                       label: m12_r3y9V_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iil: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iim; else goto c3Iin;
       c3Iim: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iin: // global
           (_c3Iii::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Iii::I64 == 0) goto c3Iik; else goto c3Iij;
       c3Iik: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Iij: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Iii::I64;
           R2 = m11_r3y9U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.442911837 UTC

[section ""data" . x5_r3y9W_closure" {
     x5_r3y9W_closure:
         const GHC.Types.C#_con_info;
         const 4;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.444611983 UTC

[section ""cstring" . m13_r3y9X_bytes" {
     m13_r3y9X_bytes:
         I8[] [69,78,81]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.447140269 UTC

[section ""data" . m14_r3y9Y_closure" {
     m14_r3y9Y_closure:
         const m14_r3y9Y_info;
         const 0;
         const 0;
         const 0;
 },
 m14_r3y9Y_entry() //  [R1]
         { info_tbl: [(c3IiE,
                       label: m14_r3y9Y_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IiE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IiF; else goto c3IiG;
       c3IiF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IiG: // global
           (_c3IiB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IiB::I64 == 0) goto c3IiD; else goto c3IiC;
       c3IiD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IiC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IiB::I64;
           R2 = m13_r3y9X_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.451194994 UTC

[section ""data" . x6_r3y9Z_closure" {
     x6_r3y9Z_closure:
         const GHC.Types.C#_con_info;
         const 5;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.452918599 UTC

[section ""cstring" . m15_r3ya0_bytes" {
     m15_r3ya0_bytes:
         I8[] [65,67,75]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.454944909 UTC

[section ""data" . m16_r3ya1_closure" {
     m16_r3ya1_closure:
         const m16_r3ya1_info;
         const 0;
         const 0;
         const 0;
 },
 m16_r3ya1_entry() //  [R1]
         { info_tbl: [(c3IiX,
                       label: m16_r3ya1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IiX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IiY; else goto c3IiZ;
       c3IiY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IiZ: // global
           (_c3IiU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IiU::I64 == 0) goto c3IiW; else goto c3IiV;
       c3IiW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IiV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IiU::I64;
           R2 = m15_r3ya0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.459019156 UTC

[section ""data" . x7_r3ya2_closure" {
     x7_r3ya2_closure:
         const GHC.Types.C#_con_info;
         const 6;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.460720594 UTC

[section ""cstring" . m17_r3ya3_bytes" {
     m17_r3ya3_bytes:
         I8[] [66,69,76]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.462793639 UTC

[section ""data" . m18_r3ya4_closure" {
     m18_r3ya4_closure:
         const m18_r3ya4_info;
         const 0;
         const 0;
         const 0;
 },
 m18_r3ya4_entry() //  [R1]
         { info_tbl: [(c3Ijg,
                       label: m18_r3ya4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ijg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ijh; else goto c3Iji;
       c3Ijh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iji: // global
           (_c3Ijd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ijd::I64 == 0) goto c3Ijf; else goto c3Ije;
       c3Ijf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ije: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ijd::I64;
           R2 = m17_r3ya3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.467602952 UTC

[section ""data" . x8_r3ya5_closure" {
     x8_r3ya5_closure:
         const GHC.Types.C#_con_info;
         const 7;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.469922392 UTC

[section ""cstring" . m19_r3ya6_bytes" {
     m19_r3ya6_bytes:
         I8[] [66,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.471798382 UTC

[section ""data" . m20_r3ya7_closure" {
     m20_r3ya7_closure:
         const m20_r3ya7_info;
         const 0;
         const 0;
         const 0;
 },
 m20_r3ya7_entry() //  [R1]
         { info_tbl: [(c3Ijz,
                       label: m20_r3ya7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ijz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IjA; else goto c3IjB;
       c3IjA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IjB: // global
           (_c3Ijw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ijw::I64 == 0) goto c3Ijy; else goto c3Ijx;
       c3Ijy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ijx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ijw::I64;
           R2 = m19_r3ya6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.475736274 UTC

[section ""data" . x9_r3ya8_closure" {
     x9_r3ya8_closure:
         const GHC.Types.C#_con_info;
         const 8;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.477577737 UTC

[section ""cstring" . m21_r3ya9_bytes" {
     m21_r3ya9_bytes:
         I8[] [72,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.479489272 UTC

[section ""data" . m22_r3yaa_closure" {
     m22_r3yaa_closure:
         const m22_r3yaa_info;
         const 0;
         const 0;
         const 0;
 },
 m22_r3yaa_entry() //  [R1]
         { info_tbl: [(c3IjS,
                       label: m22_r3yaa_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IjS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IjT; else goto c3IjU;
       c3IjT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IjU: // global
           (_c3IjP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IjP::I64 == 0) goto c3IjR; else goto c3IjQ;
       c3IjR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IjQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IjP::I64;
           R2 = m21_r3ya9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.483444159 UTC

[section ""data" . x10_r3yab_closure" {
     x10_r3yab_closure:
         const GHC.Types.C#_con_info;
         const 9;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.485136555 UTC

[section ""cstring" . m23_r3yac_bytes" {
     m23_r3yac_bytes:
         I8[] [76,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.487047765 UTC

[section ""data" . m24_r3yad_closure" {
     m24_r3yad_closure:
         const m24_r3yad_info;
         const 0;
         const 0;
         const 0;
 },
 m24_r3yad_entry() //  [R1]
         { info_tbl: [(c3Ikb,
                       label: m24_r3yad_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ikb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ikc; else goto c3Ikd;
       c3Ikc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ikd: // global
           (_c3Ik8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ik8::I64 == 0) goto c3Ika; else goto c3Ik9;
       c3Ika: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ik9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ik8::I64;
           R2 = m23_r3yac_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.491034358 UTC

[section ""data" . x11_r3yae_closure" {
     x11_r3yae_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.492714474 UTC

[section ""cstring" . m25_r3yaf_bytes" {
     m25_r3yaf_bytes:
         I8[] [86,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.495318201 UTC

[section ""data" . m26_r3yag_closure" {
     m26_r3yag_closure:
         const m26_r3yag_info;
         const 0;
         const 0;
         const 0;
 },
 m26_r3yag_entry() //  [R1]
         { info_tbl: [(c3Iku,
                       label: m26_r3yag_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iku: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ikv; else goto c3Ikw;
       c3Ikv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ikw: // global
           (_c3Ikr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ikr::I64 == 0) goto c3Ikt; else goto c3Iks;
       c3Ikt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Iks: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ikr::I64;
           R2 = m25_r3yaf_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.500018145 UTC

[section ""data" . x12_r3yah_closure" {
     x12_r3yah_closure:
         const GHC.Types.C#_con_info;
         const 11;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.501707485 UTC

[section ""cstring" . m27_r3yai_bytes" {
     m27_r3yai_bytes:
         I8[] [70,70]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.503685013 UTC

[section ""data" . m28_r3yaj_closure" {
     m28_r3yaj_closure:
         const m28_r3yaj_info;
         const 0;
         const 0;
         const 0;
 },
 m28_r3yaj_entry() //  [R1]
         { info_tbl: [(c3IkN,
                       label: m28_r3yaj_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IkN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IkO; else goto c3IkP;
       c3IkO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IkP: // global
           (_c3IkK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IkK::I64 == 0) goto c3IkM; else goto c3IkL;
       c3IkM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IkL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IkK::I64;
           R2 = m27_r3yai_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.507797619 UTC

[section ""data" . x13_r3yak_closure" {
     x13_r3yak_closure:
         const GHC.Types.C#_con_info;
         const 12;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.509801929 UTC

[section ""cstring" . m29_r3yal_bytes" {
     m29_r3yal_bytes:
         I8[] [67,82]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.511862317 UTC

[section ""data" . m30_r3yam_closure" {
     m30_r3yam_closure:
         const m30_r3yam_info;
         const 0;
         const 0;
         const 0;
 },
 m30_r3yam_entry() //  [R1]
         { info_tbl: [(c3Il6,
                       label: m30_r3yam_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Il6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Il7; else goto c3Il8;
       c3Il7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Il8: // global
           (_c3Il3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Il3::I64 == 0) goto c3Il5; else goto c3Il4;
       c3Il5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Il4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Il3::I64;
           R2 = m29_r3yal_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.515929536 UTC

[section ""data" . x14_r3yan_closure" {
     x14_r3yan_closure:
         const GHC.Types.C#_con_info;
         const 13;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.517672623 UTC

[section ""cstring" . m31_r3yao_bytes" {
     m31_r3yao_bytes:
         I8[] [83,73]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.519626583 UTC

[section ""data" . m32_r3yap_closure" {
     m32_r3yap_closure:
         const m32_r3yap_info;
         const 0;
         const 0;
         const 0;
 },
 m32_r3yap_entry() //  [R1]
         { info_tbl: [(c3Ilp,
                       label: m32_r3yap_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ilp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ilq; else goto c3Ilr;
       c3Ilq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ilr: // global
           (_c3Ilm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ilm::I64 == 0) goto c3Ilo; else goto c3Iln;
       c3Ilo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Iln: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ilm::I64;
           R2 = m31_r3yao_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.524209602 UTC

[section ""data" . x15_r3yaq_closure" {
     x15_r3yaq_closure:
         const GHC.Types.C#_con_info;
         const 15;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.525977254 UTC

[section ""cstring" . m33_r3yar_bytes" {
     m33_r3yar_bytes:
         I8[] [68,76,69]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.52852862 UTC

[section ""data" . m34_r3yas_closure" {
     m34_r3yas_closure:
         const m34_r3yas_info;
         const 0;
         const 0;
         const 0;
 },
 m34_r3yas_entry() //  [R1]
         { info_tbl: [(c3IlI,
                       label: m34_r3yas_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IlI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IlJ; else goto c3IlK;
       c3IlJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IlK: // global
           (_c3IlF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IlF::I64 == 0) goto c3IlH; else goto c3IlG;
       c3IlH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IlG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IlF::I64;
           R2 = m33_r3yar_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.532820408 UTC

[section ""data" . x16_r3yat_closure" {
     x16_r3yat_closure:
         const GHC.Types.C#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.534695495 UTC

[section ""cstring" . m35_r3yau_bytes" {
     m35_r3yau_bytes:
         I8[] [68,67,49]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.536712968 UTC

[section ""data" . m36_r3yav_closure" {
     m36_r3yav_closure:
         const m36_r3yav_info;
         const 0;
         const 0;
         const 0;
 },
 m36_r3yav_entry() //  [R1]
         { info_tbl: [(c3Im1,
                       label: m36_r3yav_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Im1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Im2; else goto c3Im3;
       c3Im2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Im3: // global
           (_c3IlY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IlY::I64 == 0) goto c3Im0; else goto c3IlZ;
       c3Im0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IlZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IlY::I64;
           R2 = m35_r3yau_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.540911764 UTC

[section ""data" . x17_r3yaw_closure" {
     x17_r3yaw_closure:
         const GHC.Types.C#_con_info;
         const 17;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.543338144 UTC

[section ""cstring" . m37_r3yax_bytes" {
     m37_r3yax_bytes:
         I8[] [68,67,50]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.545310069 UTC

[section ""data" . m38_r3yay_closure" {
     m38_r3yay_closure:
         const m38_r3yay_info;
         const 0;
         const 0;
         const 0;
 },
 m38_r3yay_entry() //  [R1]
         { info_tbl: [(c3Imk,
                       label: m38_r3yay_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Imk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iml; else goto c3Imm;
       c3Iml: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Imm: // global
           (_c3Imh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Imh::I64 == 0) goto c3Imj; else goto c3Imi;
       c3Imj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Imi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Imh::I64;
           R2 = m37_r3yax_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.549421123 UTC

[section ""data" . x18_r3yaz_closure" {
     x18_r3yaz_closure:
         const GHC.Types.C#_con_info;
         const 18;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.55114576 UTC

[section ""cstring" . m39_r3yaA_bytes" {
     m39_r3yaA_bytes:
         I8[] [68,67,51]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.553057561 UTC

[section ""data" . m40_r3yaB_closure" {
     m40_r3yaB_closure:
         const m40_r3yaB_info;
         const 0;
         const 0;
         const 0;
 },
 m40_r3yaB_entry() //  [R1]
         { info_tbl: [(c3ImD,
                       label: m40_r3yaB_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ImD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ImE; else goto c3ImF;
       c3ImE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ImF: // global
           (_c3ImA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ImA::I64 == 0) goto c3ImC; else goto c3ImB;
       c3ImC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ImB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ImA::I64;
           R2 = m39_r3yaA_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.557364194 UTC

[section ""data" . x19_r3yaC_closure" {
     x19_r3yaC_closure:
         const GHC.Types.C#_con_info;
         const 19;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.559006256 UTC

[section ""cstring" . m41_r3yaD_bytes" {
     m41_r3yaD_bytes:
         I8[] [68,67,52]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.561623243 UTC

[section ""data" . m42_r3yaE_closure" {
     m42_r3yaE_closure:
         const m42_r3yaE_info;
         const 0;
         const 0;
         const 0;
 },
 m42_r3yaE_entry() //  [R1]
         { info_tbl: [(c3ImW,
                       label: m42_r3yaE_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ImW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ImX; else goto c3ImY;
       c3ImX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ImY: // global
           (_c3ImT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ImT::I64 == 0) goto c3ImV; else goto c3ImU;
       c3ImV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ImU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ImT::I64;
           R2 = m41_r3yaD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.565850738 UTC

[section ""data" . x20_r3yaF_closure" {
     x20_r3yaF_closure:
         const GHC.Types.C#_con_info;
         const 20;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.567569063 UTC

[section ""cstring" . m43_r3yaG_bytes" {
     m43_r3yaG_bytes:
         I8[] [78,65,75]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.570166467 UTC

[section ""data" . m44_r3yaH_closure" {
     m44_r3yaH_closure:
         const m44_r3yaH_info;
         const 0;
         const 0;
         const 0;
 },
 m44_r3yaH_entry() //  [R1]
         { info_tbl: [(c3Inf,
                       label: m44_r3yaH_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Inf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ing; else goto c3Inh;
       c3Ing: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Inh: // global
           (_c3Inc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Inc::I64 == 0) goto c3Ine; else goto c3Ind;
       c3Ine: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ind: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Inc::I64;
           R2 = m43_r3yaG_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.574186949 UTC

[section ""data" . x21_r3yaI_closure" {
     x21_r3yaI_closure:
         const GHC.Types.C#_con_info;
         const 21;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.575867977 UTC

[section ""cstring" . m45_r3yaJ_bytes" {
     m45_r3yaJ_bytes:
         I8[] [83,89,78]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.577952004 UTC

[section ""data" . m46_r3yaK_closure" {
     m46_r3yaK_closure:
         const m46_r3yaK_info;
         const 0;
         const 0;
         const 0;
 },
 m46_r3yaK_entry() //  [R1]
         { info_tbl: [(c3Iny,
                       label: m46_r3yaK_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iny: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Inz; else goto c3InA;
       c3Inz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3InA: // global
           (_c3Inv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Inv::I64 == 0) goto c3Inx; else goto c3Inw;
       c3Inx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Inw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Inv::I64;
           R2 = m45_r3yaJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.581973826 UTC

[section ""data" . x22_r3yaL_closure" {
     x22_r3yaL_closure:
         const GHC.Types.C#_con_info;
         const 22;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.583748667 UTC

[section ""cstring" . m47_r3yaM_bytes" {
     m47_r3yaM_bytes:
         I8[] [69,84,66]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.585812873 UTC

[section ""data" . m48_r3yaN_closure" {
     m48_r3yaN_closure:
         const m48_r3yaN_info;
         const 0;
         const 0;
         const 0;
 },
 m48_r3yaN_entry() //  [R1]
         { info_tbl: [(c3InR,
                       label: m48_r3yaN_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3InR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3InS; else goto c3InT;
       c3InS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3InT: // global
           (_c3InO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3InO::I64 == 0) goto c3InQ; else goto c3InP;
       c3InQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3InP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3InO::I64;
           R2 = m47_r3yaM_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.589933781 UTC

[section ""data" . x23_r3yaO_closure" {
     x23_r3yaO_closure:
         const GHC.Types.C#_con_info;
         const 23;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.591715881 UTC

[section ""cstring" . m49_r3yaP_bytes" {
     m49_r3yaP_bytes:
         I8[] [67,65,78]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.594921355 UTC

[section ""data" . m50_r3yaQ_closure" {
     m50_r3yaQ_closure:
         const m50_r3yaQ_info;
         const 0;
         const 0;
         const 0;
 },
 m50_r3yaQ_entry() //  [R1]
         { info_tbl: [(c3Ioa,
                       label: m50_r3yaQ_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ioa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iob; else goto c3Ioc;
       c3Iob: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ioc: // global
           (_c3Io7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Io7::I64 == 0) goto c3Io9; else goto c3Io8;
       c3Io9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Io8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Io7::I64;
           R2 = m49_r3yaP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.598960606 UTC

[section ""data" . x24_r3yaR_closure" {
     x24_r3yaR_closure:
         const GHC.Types.C#_con_info;
         const 24;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.600666264 UTC

[section ""cstring" . m51_r3yaS_bytes" {
     m51_r3yaS_bytes:
         I8[] [69,77]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.602698801 UTC

[section ""data" . m52_r3yaT_closure" {
     m52_r3yaT_closure:
         const m52_r3yaT_info;
         const 0;
         const 0;
         const 0;
 },
 m52_r3yaT_entry() //  [R1]
         { info_tbl: [(c3Iot,
                       label: m52_r3yaT_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iot: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iou; else goto c3Iov;
       c3Iou: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iov: // global
           (_c3Ioq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ioq::I64 == 0) goto c3Ios; else goto c3Ior;
       c3Ios: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ior: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ioq::I64;
           R2 = m51_r3yaS_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.607000756 UTC

[section ""data" . x25_r3yaU_closure" {
     x25_r3yaU_closure:
         const GHC.Types.C#_con_info;
         const 25;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.608741866 UTC

[section ""cstring" . m53_r3yaV_bytes" {
     m53_r3yaV_bytes:
         I8[] [83,85,66]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.610731386 UTC

[section ""data" . m54_r3yaW_closure" {
     m54_r3yaW_closure:
         const m54_r3yaW_info;
         const 0;
         const 0;
         const 0;
 },
 m54_r3yaW_entry() //  [R1]
         { info_tbl: [(c3IoM,
                       label: m54_r3yaW_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IoM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IoN; else goto c3IoO;
       c3IoN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IoO: // global
           (_c3IoJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IoJ::I64 == 0) goto c3IoL; else goto c3IoK;
       c3IoL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IoK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IoJ::I64;
           R2 = m53_r3yaV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.614824781 UTC

[section ""data" . x26_r3yaX_closure" {
     x26_r3yaX_closure:
         const GHC.Types.C#_con_info;
         const 26;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.616517871 UTC

[section ""cstring" . m55_r3yaY_bytes" {
     m55_r3yaY_bytes:
         I8[] [69,83,67]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.618647955 UTC

[section ""data" . m56_r3yaZ_closure" {
     m56_r3yaZ_closure:
         const m56_r3yaZ_info;
         const 0;
         const 0;
         const 0;
 },
 m56_r3yaZ_entry() //  [R1]
         { info_tbl: [(c3Ip5,
                       label: m56_r3yaZ_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ip5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ip6; else goto c3Ip7;
       c3Ip6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ip7: // global
           (_c3Ip2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ip2::I64 == 0) goto c3Ip4; else goto c3Ip3;
       c3Ip4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ip3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ip2::I64;
           R2 = m55_r3yaY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.62276694 UTC

[section ""data" . x27_r3yb0_closure" {
     x27_r3yb0_closure:
         const GHC.Types.C#_con_info;
         const 27;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.6251458 UTC

[section ""cstring" . m57_r3yb1_bytes" {
     m57_r3yb1_bytes:
         I8[] [70,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.627703547 UTC

[section ""data" . m58_r3yb2_closure" {
     m58_r3yb2_closure:
         const m58_r3yb2_info;
         const 0;
         const 0;
         const 0;
 },
 m58_r3yb2_entry() //  [R1]
         { info_tbl: [(c3Ipo,
                       label: m58_r3yb2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ipo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ipp; else goto c3Ipq;
       c3Ipp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ipq: // global
           (_c3Ipl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ipl::I64 == 0) goto c3Ipn; else goto c3Ipm;
       c3Ipn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ipm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ipl::I64;
           R2 = m57_r3yb1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.631828738 UTC

[section ""data" . x28_r3yb3_closure" {
     x28_r3yb3_closure:
         const GHC.Types.C#_con_info;
         const 28;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.6337356 UTC

[section ""cstring" . m59_r3yb4_bytes" {
     m59_r3yb4_bytes:
         I8[] [71,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.635656542 UTC

[section ""data" . m60_r3yb5_closure" {
     m60_r3yb5_closure:
         const m60_r3yb5_info;
         const 0;
         const 0;
         const 0;
 },
 m60_r3yb5_entry() //  [R1]
         { info_tbl: [(c3IpH,
                       label: m60_r3yb5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IpH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IpI; else goto c3IpJ;
       c3IpI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IpJ: // global
           (_c3IpE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IpE::I64 == 0) goto c3IpG; else goto c3IpF;
       c3IpG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IpF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IpE::I64;
           R2 = m59_r3yb4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.639909353 UTC

[section ""data" . x29_r3yb6_closure" {
     x29_r3yb6_closure:
         const GHC.Types.C#_con_info;
         const 29;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.641661067 UTC

[section ""cstring" . m61_r3yb7_bytes" {
     m61_r3yb7_bytes:
         I8[] [82,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.643625853 UTC

[section ""data" . m62_r3yb8_closure" {
     m62_r3yb8_closure:
         const m62_r3yb8_info;
         const 0;
         const 0;
         const 0;
 },
 m62_r3yb8_entry() //  [R1]
         { info_tbl: [(c3Iq0,
                       label: m62_r3yb8_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iq0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iq1; else goto c3Iq2;
       c3Iq1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iq2: // global
           (_c3IpX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IpX::I64 == 0) goto c3IpZ; else goto c3IpY;
       c3IpZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IpY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IpX::I64;
           R2 = m61_r3yb7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.647673154 UTC

[section ""data" . x30_r3yb9_closure" {
     x30_r3yb9_closure:
         const GHC.Types.C#_con_info;
         const 30;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.649851161 UTC

[section ""cstring" . m63_r3yba_bytes" {
     m63_r3yba_bytes:
         I8[] [85,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.65182608 UTC

[section ""data" . m64_r3ybb_closure" {
     m64_r3ybb_closure:
         const m64_r3ybb_info;
         const 0;
         const 0;
         const 0;
 },
 m64_r3ybb_entry() //  [R1]
         { info_tbl: [(c3Iqj,
                       label: m64_r3ybb_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iqj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iqk; else goto c3Iql;
       c3Iqk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iql: // global
           (_c3Iqg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Iqg::I64 == 0) goto c3Iqi; else goto c3Iqh;
       c3Iqi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Iqh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Iqg::I64;
           R2 = m63_r3yba_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.655863405 UTC

[section ""data" . x31_r3ybc_closure" {
     x31_r3ybc_closure:
         const GHC.Types.C#_con_info;
         const 31;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.65836494 UTC

[section ""cstring" . m65_r3ybd_bytes" {
     m65_r3ybd_bytes:
         I8[] [83,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.660348965 UTC

[section ""data" . m66_r3ybe_closure" {
     m66_r3ybe_closure:
         const m66_r3ybe_info;
         const 0;
         const 0;
         const 0;
 },
 m66_r3ybe_entry() //  [R1]
         { info_tbl: [(c3IqC,
                       label: m66_r3ybe_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IqC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IqD; else goto c3IqE;
       c3IqD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IqE: // global
           (_c3Iqz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Iqz::I64 == 0) goto c3IqB; else goto c3IqA;
       c3IqB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IqA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Iqz::I64;
           R2 = m65_r3ybd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.664467375 UTC

[section ""data" . x32_r3ybf_closure" {
     x32_r3ybf_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.66621801 UTC

[section ""cstring" . m67_r3ybg_bytes" {
     m67_r3ybg_bytes:
         I8[] [68,69,76]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.668149542 UTC

[section ""data" . m68_r3ybh_closure" {
     m68_r3ybh_closure:
         const m68_r3ybh_info;
         const 0;
         const 0;
         const 0;
 },
 m68_r3ybh_entry() //  [R1]
         { info_tbl: [(c3IqV,
                       label: m68_r3ybh_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IqV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IqW; else goto c3IqX;
       c3IqW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IqX: // global
           (_c3IqS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3IqS::I64 == 0) goto c3IqU; else goto c3IqT;
       c3IqU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3IqT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3IqS::I64;
           R2 = m67_r3ybg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.672144845 UTC

[section ""data" . x33_r3ybi_closure" {
     x33_r3ybi_closure:
         const GHC.Types.C#_con_info;
         const 127;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.673859649 UTC

[section ""data" . sat_s3Gfl_closure" {
     sat_s3Gfl_closure:
         const GHC.Types.I#_con_info;
         const 1114111;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.675519951 UTC

[section ""data" . sat_s3Gfm_closure" {
     sat_s3Gfm_closure:
         const :_con_info;
         const sat_s3Gfl_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.677937698 UTC

[section ""data" . lvl7_r3ybj_closure" {
     lvl7_r3ybj_closure:
         const lvl7_r3ybj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r3ybj_entry() //  [R1]
         { info_tbl: [(c3Irf,
                       label: lvl7_r3ybj_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Irf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Irg; else goto c3Irh;
       c3Irg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Irh: // global
           (_c3Irc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Irc::I64 == 0) goto c3Ire; else goto c3Ird;
       c3Ire: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ird: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Irc::I64;
           R3 = sat_s3Gfm_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.682257311 UTC

[section ""data" . lvl8_r3ybk_closure" {
     lvl8_r3ybk_closure:
         const GHC.Types.C#_con_info;
         const 34;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.683996401 UTC

[section ""data" . lvl9_r3ybl_closure" {
     lvl9_r3ybl_closure:
         const (,)_con_info;
         const lvl8_r3ybk_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.686141072 UTC

[section ""data" . lvl10_r3ybm_closure" {
     lvl10_r3ybm_closure:
         const GHC.Types.C#_con_info;
         const 39;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.688385647 UTC

[section ""data" . lvl11_r3ybn_closure" {
     lvl11_r3ybn_closure:
         const (,)_con_info;
         const lvl10_r3ybm_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.690233589 UTC

[section ""data" . lvl12_r3ybo_closure" {
     lvl12_r3ybo_closure:
         const GHC.Types.C#_con_info;
         const 92;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.691941447 UTC

[section ""data" . lvl13_r3ybp_closure" {
     lvl13_r3ybp_closure:
         const (,)_con_info;
         const lvl12_r3ybo_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.693771386 UTC

[section ""data" . lvl14_r3ybq_closure" {
     lvl14_r3ybq_closure:
         const (,)_con_info;
         const x8_r3ya5_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.695480278 UTC

[section ""data" . lvl15_r3ybr_closure" {
     lvl15_r3ybr_closure:
         const (,)_con_info;
         const x9_r3ya8_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.697220013 UTC

[section ""data" . lvl16_r3ybs_closure" {
     lvl16_r3ybs_closure:
         const (,)_con_info;
         const x13_r3yak_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.699052497 UTC

[section ""data" . lvl17_r3ybt_closure" {
     lvl17_r3ybt_closure:
         const (,)_con_info;
         const x11_r3yae_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.700775434 UTC

[section ""data" . lvl18_r3ybu_closure" {
     lvl18_r3ybu_closure:
         const (,)_con_info;
         const x14_r3yan_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.703657032 UTC

[section ""data" . lvl19_r3ybv_closure" {
     lvl19_r3ybv_closure:
         const (,)_con_info;
         const x10_r3yab_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.706263073 UTC

[section ""data" . lvl20_r3ybw_closure" {
     lvl20_r3ybw_closure:
         const (,)_con_info;
         const x12_r3yah_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.70885341 UTC

[section ""data" . lvl21_r3ybx_closure" {
     lvl21_r3ybx_closure:
         const (,)_con_info;
         const x2_r3y9N_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.711481237 UTC

[section ""data" . lvl22_r3yby_closure" {
     lvl22_r3yby_closure:
         const (,)_con_info;
         const x_r3y9H_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.714180434 UTC

[section ""data" . lvl23_r3ybz_closure" {
     lvl23_r3ybz_closure:
         const (,)_con_info;
         const x3_r3y9Q_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.716829108 UTC

[section ""data" . lvl24_r3ybA_closure" {
     lvl24_r3ybA_closure:
         const (,)_con_info;
         const x4_r3y9T_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.720331798 UTC

[section ""data" . lvl25_r3ybB_closure" {
     lvl25_r3ybB_closure:
         const (,)_con_info;
         const x5_r3y9W_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.723799425 UTC

[section ""data" . lvl26_r3ybC_closure" {
     lvl26_r3ybC_closure:
         const (,)_con_info;
         const x6_r3y9Z_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.726574511 UTC

[section ""data" . lvl27_r3ybD_closure" {
     lvl27_r3ybD_closure:
         const (,)_con_info;
         const x7_r3ya2_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.729167745 UTC

[section ""data" . lvl28_r3ybE_closure" {
     lvl28_r3ybE_closure:
         const (,)_con_info;
         const x1_r3y9K_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.73180767 UTC

[section ""data" . lvl29_r3ybF_closure" {
     lvl29_r3ybF_closure:
         const (,)_con_info;
         const x15_r3yaq_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.734530461 UTC

[section ""data" . lvl30_r3ybG_closure" {
     lvl30_r3ybG_closure:
         const (,)_con_info;
         const x16_r3yat_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.737212964 UTC

[section ""data" . lvl31_r3ybH_closure" {
     lvl31_r3ybH_closure:
         const (,)_con_info;
         const x17_r3yaw_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.739954628 UTC

[section ""data" . lvl32_r3ybI_closure" {
     lvl32_r3ybI_closure:
         const (,)_con_info;
         const x18_r3yaz_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.742934732 UTC

[section ""data" . lvl33_r3ybJ_closure" {
     lvl33_r3ybJ_closure:
         const (,)_con_info;
         const x19_r3yaC_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.745560491 UTC

[section ""data" . lvl34_r3ybK_closure" {
     lvl34_r3ybK_closure:
         const (,)_con_info;
         const x20_r3yaF_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.748115068 UTC

[section ""data" . lvl35_r3ybL_closure" {
     lvl35_r3ybL_closure:
         const (,)_con_info;
         const x21_r3yaI_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.751181343 UTC

[section ""data" . lvl36_r3ybM_closure" {
     lvl36_r3ybM_closure:
         const (,)_con_info;
         const x22_r3yaL_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.753804384 UTC

[section ""data" . lvl37_r3ybN_closure" {
     lvl37_r3ybN_closure:
         const (,)_con_info;
         const x23_r3yaO_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.756194041 UTC

[section ""data" . lvl38_r3ybO_closure" {
     lvl38_r3ybO_closure:
         const (,)_con_info;
         const x24_r3yaR_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.75889522 UTC

[section ""data" . lvl39_r3ybP_closure" {
     lvl39_r3ybP_closure:
         const (,)_con_info;
         const x25_r3yaU_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.760952708 UTC

[section ""data" . lvl40_r3ybQ_closure" {
     lvl40_r3ybQ_closure:
         const (,)_con_info;
         const x26_r3yaX_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.763242047 UTC

[section ""data" . lvl41_r3ybR_closure" {
     lvl41_r3ybR_closure:
         const (,)_con_info;
         const x27_r3yb0_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.765005363 UTC

[section ""data" . lvl42_r3ybS_closure" {
     lvl42_r3ybS_closure:
         const (,)_con_info;
         const x28_r3yb3_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.766865271 UTC

[section ""data" . lvl43_r3ybT_closure" {
     lvl43_r3ybT_closure:
         const (,)_con_info;
         const x29_r3yb6_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.768579527 UTC

[section ""data" . lvl44_r3ybU_closure" {
     lvl44_r3ybU_closure:
         const (,)_con_info;
         const x30_r3yb9_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.770418347 UTC

[section ""data" . lvl45_r3ybV_closure" {
     lvl45_r3ybV_closure:
         const (,)_con_info;
         const x31_r3ybc_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.772789395 UTC

[section ""data" . w1_r3ybW_closure" {
     w1_r3ybW_closure:
         const w1_r3ybW_info;
         const 0;
 },
 lvl116_s3Gfo_entry() //  [R1]
         { info_tbl: [(c3Isb,
                       label: lvl116_s3Gfo_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Isb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Isc; else goto c3Isd;
       c3Isc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Isd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x1_r3y9K_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gfq_entry() //  [R1]
         { info_tbl: [(c3Isj,
                       label: sat_s3Gfq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Isj: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 w1_r3ybW_entry() //  [R2]
         { info_tbl: [(c3Isp,
                       label: w1_r3ybW_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Isp: // global
           _s3Gfn::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Isq; else goto c3Isr;
       c3Isr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Ist; else goto c3Iss;
       c3Ist: // global
           HpAlloc = 40;
           goto c3Isq;
       c3Isq: // global
           R2 = _s3Gfn::P64;
           R1 = w1_r3ybW_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Iss: // global
           I64[Hp - 32] = lvl116_s3Gfo_info;
           P64[Hp - 16] = _s3Gfn::P64;
           I64[Hp - 8] = sat_s3Gfq_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3Ism_info;
           R3 = Hp - 7;
           R2 = m4_r3y9J_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ism() //  [R1]
         { info_tbl: [(c3Ism,
                       label: block_c3Ism_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ism: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Isw; else goto c3Isv;
       c3Isw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Isv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.78286817 UTC

[section ""data" . w_r3ybX_closure" {
     w_r3ybX_closure:
         const w_r3ybX_info;
         const 0;
 },
 lvl116_s3Gfu_entry() //  [R1]
         { info_tbl: [(c3It3,
                       label: lvl116_s3Gfu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3It3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3It4; else goto c3It5;
       c3It4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3It5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x_r3y9H_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gfw_entry() //  [R1]
         { info_tbl: [(c3Itb,
                       label: sat_s3Gfw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Itb: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 w_r3ybX_entry() //  [R2]
         { info_tbl: [(c3Ith,
                       label: w_r3ybX_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ith: // global
           _s3Gft::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Iti; else goto c3Itj;
       c3Itj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Itl; else goto c3Itk;
       c3Itl: // global
           HpAlloc = 40;
           goto c3Iti;
       c3Iti: // global
           R2 = _s3Gft::P64;
           R1 = w_r3ybX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Itk: // global
           I64[Hp - 32] = lvl116_s3Gfu_info;
           P64[Hp - 16] = _s3Gft::P64;
           I64[Hp - 8] = sat_s3Gfw_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3Ite_info;
           R3 = Hp - 7;
           R2 = m2_r3y9G_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ite() //  [R1]
         { info_tbl: [(c3Ite,
                       label: block_c3Ite_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ite: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ito; else goto c3Itn;
       c3Ito: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Itn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.793371887 UTC

[section ""data" . lvl46_r3ybY_closure" {
     lvl46_r3ybY_closure:
         const lvl46_r3ybY_info;
         const 0;
 },
 lvl46_r3ybY_entry() //  [R2]
         { info_tbl: [(c3ItU,
                       label: lvl46_r3ybY_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ItU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ItV; else goto c3ItW;
       c3ItV: // global
           R2 = R2;
           R1 = lvl46_r3ybY_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ItW: // global
           I64[Sp - 8] = block_c3ItR_info;
           R4 = R2;
           R3 = w1_r3ybW_closure+1;
           R2 = w_r3ybX_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ItR() //  [R1]
         { info_tbl: [(c3ItR,
                       label: block_c3ItR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ItR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ItZ; else goto c3ItY;
       c3ItZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ItY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.799815864 UTC

[section ""data" . lvl47_r3ybZ_closure" {
     lvl47_r3ybZ_closure:
         const lvl47_r3ybZ_info;
         const 0;
 },
 lvl116_s3GfD_entry() //  [R1]
         { info_tbl: [(c3Iuj,
                       label: lvl116_s3GfD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iuj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iuk; else goto c3Iul;
       c3Iuk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iul: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x2_r3y9N_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GfF_entry() //  [R1]
         { info_tbl: [(c3Iur,
                       label: sat_s3GfF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iur: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl47_r3ybZ_entry() //  [R2]
         { info_tbl: [(c3Iux,
                       label: lvl47_r3ybZ_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iux: // global
           _s3GfC::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Iuy; else goto c3Iuz;
       c3Iuz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IuB; else goto c3IuA;
       c3IuB: // global
           HpAlloc = 40;
           goto c3Iuy;
       c3Iuy: // global
           R2 = _s3GfC::P64;
           R1 = lvl47_r3ybZ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IuA: // global
           I64[Hp - 32] = lvl116_s3GfD_info;
           P64[Hp - 16] = _s3GfC::P64;
           I64[Hp - 8] = sat_s3GfF_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3Iuu_info;
           R3 = Hp - 7;
           R2 = m6_r3y9M_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Iuu() //  [R1]
         { info_tbl: [(c3Iuu,
                       label: block_c3Iuu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iuu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IuE; else goto c3IuD;
       c3IuE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IuD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.80989755 UTC

[section ""data" . lvl48_r3yc0_closure" {
     lvl48_r3yc0_closure:
         const lvl48_r3yc0_info;
         const 0;
 },
 lvl116_s3GfJ_entry() //  [R1]
         { info_tbl: [(c3Ivb,
                       label: lvl116_s3GfJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ivb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ivc; else goto c3Ivd;
       c3Ivc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ivd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x3_r3y9Q_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GfL_entry() //  [R1]
         { info_tbl: [(c3Ivj,
                       label: sat_s3GfL_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ivj: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl48_r3yc0_entry() //  [R2]
         { info_tbl: [(c3Ivp,
                       label: lvl48_r3yc0_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ivp: // global
           _s3GfI::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ivq; else goto c3Ivr;
       c3Ivr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Ivt; else goto c3Ivs;
       c3Ivt: // global
           HpAlloc = 40;
           goto c3Ivq;
       c3Ivq: // global
           R2 = _s3GfI::P64;
           R1 = lvl48_r3yc0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ivs: // global
           I64[Hp - 32] = lvl116_s3GfJ_info;
           P64[Hp - 16] = _s3GfI::P64;
           I64[Hp - 8] = sat_s3GfL_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3Ivm_info;
           R3 = Hp - 7;
           R2 = m8_r3y9P_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ivm() //  [R1]
         { info_tbl: [(c3Ivm,
                       label: block_c3Ivm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ivm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ivw; else goto c3Ivv;
       c3Ivw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ivv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.820059406 UTC

[section ""data" . lvl49_r3yc1_closure" {
     lvl49_r3yc1_closure:
         const lvl49_r3yc1_info;
         const 0;
 },
 lvl116_s3GfP_entry() //  [R1]
         { info_tbl: [(c3Iw3,
                       label: lvl116_s3GfP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iw3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Iw4; else goto c3Iw5;
       c3Iw4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Iw5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x4_r3y9T_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GfR_entry() //  [R1]
         { info_tbl: [(c3Iwb,
                       label: sat_s3GfR_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iwb: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl49_r3yc1_entry() //  [R2]
         { info_tbl: [(c3Iwh,
                       label: lvl49_r3yc1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iwh: // global
           _s3GfO::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Iwi; else goto c3Iwj;
       c3Iwj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Iwl; else goto c3Iwk;
       c3Iwl: // global
           HpAlloc = 40;
           goto c3Iwi;
       c3Iwi: // global
           R2 = _s3GfO::P64;
           R1 = lvl49_r3yc1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Iwk: // global
           I64[Hp - 32] = lvl116_s3GfP_info;
           P64[Hp - 16] = _s3GfO::P64;
           I64[Hp - 8] = sat_s3GfR_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3Iwe_info;
           R3 = Hp - 7;
           R2 = m10_r3y9S_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Iwe() //  [R1]
         { info_tbl: [(c3Iwe,
                       label: block_c3Iwe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iwe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Iwo; else goto c3Iwn;
       c3Iwo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Iwn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.830255343 UTC

[section ""data" . lvl50_r3yc2_closure" {
     lvl50_r3yc2_closure:
         const lvl50_r3yc2_info;
         const 0;
 },
 lvl116_s3GfV_entry() //  [R1]
         { info_tbl: [(c3IwV,
                       label: lvl116_s3GfV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IwV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IwW; else goto c3IwX;
       c3IwW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IwX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x5_r3y9W_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GfX_entry() //  [R1]
         { info_tbl: [(c3Ix3,
                       label: sat_s3GfX_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ix3: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl50_r3yc2_entry() //  [R2]
         { info_tbl: [(c3Ix9,
                       label: lvl50_r3yc2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ix9: // global
           _s3GfU::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ixa; else goto c3Ixb;
       c3Ixb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Ixd; else goto c3Ixc;
       c3Ixd: // global
           HpAlloc = 40;
           goto c3Ixa;
       c3Ixa: // global
           R2 = _s3GfU::P64;
           R1 = lvl50_r3yc2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ixc: // global
           I64[Hp - 32] = lvl116_s3GfV_info;
           P64[Hp - 16] = _s3GfU::P64;
           I64[Hp - 8] = sat_s3GfX_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3Ix6_info;
           R3 = Hp - 7;
           R2 = m12_r3y9V_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Ix6() //  [R1]
         { info_tbl: [(c3Ix6,
                       label: block_c3Ix6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ix6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ixg; else goto c3Ixf;
       c3Ixg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ixf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.841397777 UTC

[section ""data" . lvl51_r3yc3_closure" {
     lvl51_r3yc3_closure:
         const lvl51_r3yc3_info;
         const 0;
 },
 lvl116_s3Gg1_entry() //  [R1]
         { info_tbl: [(c3IxN,
                       label: lvl116_s3Gg1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IxN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IxO; else goto c3IxP;
       c3IxO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IxP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x6_r3y9Z_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gg3_entry() //  [R1]
         { info_tbl: [(c3IxV,
                       label: sat_s3Gg3_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IxV: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl51_r3yc3_entry() //  [R2]
         { info_tbl: [(c3Iy1,
                       label: lvl51_r3yc3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Iy1: // global
           _s3Gg0::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Iy2; else goto c3Iy3;
       c3Iy3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Iy5; else goto c3Iy4;
       c3Iy5: // global
           HpAlloc = 40;
           goto c3Iy2;
       c3Iy2: // global
           R2 = _s3Gg0::P64;
           R1 = lvl51_r3yc3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Iy4: // global
           I64[Hp - 32] = lvl116_s3Gg1_info;
           P64[Hp - 16] = _s3Gg0::P64;
           I64[Hp - 8] = sat_s3Gg3_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IxY_info;
           R3 = Hp - 7;
           R2 = m14_r3y9Y_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IxY() //  [R1]
         { info_tbl: [(c3IxY,
                       label: block_c3IxY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IxY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Iy8; else goto c3Iy7;
       c3Iy8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Iy7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.85242521 UTC

[section ""data" . lvl52_r3yc4_closure" {
     lvl52_r3yc4_closure:
         const lvl52_r3yc4_info;
         const 0;
 },
 lvl116_s3Gg7_entry() //  [R1]
         { info_tbl: [(c3IyF,
                       label: lvl116_s3Gg7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IyF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IyG; else goto c3IyH;
       c3IyG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IyH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x7_r3ya2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gg9_entry() //  [R1]
         { info_tbl: [(c3IyN,
                       label: sat_s3Gg9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IyN: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl52_r3yc4_entry() //  [R2]
         { info_tbl: [(c3IyT,
                       label: lvl52_r3yc4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IyT: // global
           _s3Gg6::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IyU; else goto c3IyV;
       c3IyV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IyX; else goto c3IyW;
       c3IyX: // global
           HpAlloc = 40;
           goto c3IyU;
       c3IyU: // global
           R2 = _s3Gg6::P64;
           R1 = lvl52_r3yc4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IyW: // global
           I64[Hp - 32] = lvl116_s3Gg7_info;
           P64[Hp - 16] = _s3Gg6::P64;
           I64[Hp - 8] = sat_s3Gg9_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IyQ_info;
           R3 = Hp - 7;
           R2 = m16_r3ya1_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IyQ() //  [R1]
         { info_tbl: [(c3IyQ,
                       label: block_c3IyQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IyQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Iz0; else goto c3IyZ;
       c3Iz0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IyZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.862961154 UTC

[section ""data" . lvl53_r3yc5_closure" {
     lvl53_r3yc5_closure:
         const lvl53_r3yc5_info;
         const 0;
 },
 lvl116_s3Ggd_entry() //  [R1]
         { info_tbl: [(c3Izx,
                       label: lvl116_s3Ggd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Izx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Izy; else goto c3Izz;
       c3Izy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Izz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x8_r3ya5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Ggf_entry() //  [R1]
         { info_tbl: [(c3IzF,
                       label: sat_s3Ggf_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IzF: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl53_r3yc5_entry() //  [R2]
         { info_tbl: [(c3IzL,
                       label: lvl53_r3yc5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IzL: // global
           _s3Ggc::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IzM; else goto c3IzN;
       c3IzN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IzP; else goto c3IzO;
       c3IzP: // global
           HpAlloc = 40;
           goto c3IzM;
       c3IzM: // global
           R2 = _s3Ggc::P64;
           R1 = lvl53_r3yc5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IzO: // global
           I64[Hp - 32] = lvl116_s3Ggd_info;
           P64[Hp - 16] = _s3Ggc::P64;
           I64[Hp - 8] = sat_s3Ggf_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IzI_info;
           R3 = Hp - 7;
           R2 = m18_r3ya4_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IzI() //  [R1]
         { info_tbl: [(c3IzI,
                       label: block_c3IzI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IzI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IzS; else goto c3IzR;
       c3IzS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IzR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.873144507 UTC

[section ""data" . lvl54_r3yc6_closure" {
     lvl54_r3yc6_closure:
         const lvl54_r3yc6_info;
         const 0;
 },
 lvl116_s3Ggj_entry() //  [R1]
         { info_tbl: [(c3IAp,
                       label: lvl116_s3Ggj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IAp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IAq; else goto c3IAr;
       c3IAq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IAr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x9_r3ya8_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Ggl_entry() //  [R1]
         { info_tbl: [(c3IAx,
                       label: sat_s3Ggl_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IAx: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl54_r3yc6_entry() //  [R2]
         { info_tbl: [(c3IAD,
                       label: lvl54_r3yc6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IAD: // global
           _s3Ggi::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IAE; else goto c3IAF;
       c3IAF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IAH; else goto c3IAG;
       c3IAH: // global
           HpAlloc = 40;
           goto c3IAE;
       c3IAE: // global
           R2 = _s3Ggi::P64;
           R1 = lvl54_r3yc6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IAG: // global
           I64[Hp - 32] = lvl116_s3Ggj_info;
           P64[Hp - 16] = _s3Ggi::P64;
           I64[Hp - 8] = sat_s3Ggl_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IAA_info;
           R3 = Hp - 7;
           R2 = m20_r3ya7_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IAA() //  [R1]
         { info_tbl: [(c3IAA,
                       label: block_c3IAA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IAA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IAK; else goto c3IAJ;
       c3IAK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IAJ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.883812206 UTC

[section ""data" . lvl55_r3yc7_closure" {
     lvl55_r3yc7_closure:
         const lvl55_r3yc7_info;
         const 0;
 },
 lvl116_s3Ggp_entry() //  [R1]
         { info_tbl: [(c3IBh,
                       label: lvl116_s3Ggp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IBh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IBi; else goto c3IBj;
       c3IBi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IBj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x10_r3yab_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Ggr_entry() //  [R1]
         { info_tbl: [(c3IBp,
                       label: sat_s3Ggr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IBp: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl55_r3yc7_entry() //  [R2]
         { info_tbl: [(c3IBv,
                       label: lvl55_r3yc7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IBv: // global
           _s3Ggo::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IBw; else goto c3IBx;
       c3IBx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IBz; else goto c3IBy;
       c3IBz: // global
           HpAlloc = 40;
           goto c3IBw;
       c3IBw: // global
           R2 = _s3Ggo::P64;
           R1 = lvl55_r3yc7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IBy: // global
           I64[Hp - 32] = lvl116_s3Ggp_info;
           P64[Hp - 16] = _s3Ggo::P64;
           I64[Hp - 8] = sat_s3Ggr_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IBs_info;
           R3 = Hp - 7;
           R2 = m22_r3yaa_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IBs() //  [R1]
         { info_tbl: [(c3IBs,
                       label: block_c3IBs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IBs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IBC; else goto c3IBB;
       c3IBC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IBB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.894137212 UTC

[section ""data" . lvl56_r3yc8_closure" {
     lvl56_r3yc8_closure:
         const lvl56_r3yc8_info;
         const 0;
 },
 lvl116_s3Ggv_entry() //  [R1]
         { info_tbl: [(c3IC9,
                       label: lvl116_s3Ggv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IC9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ICa; else goto c3ICb;
       c3ICa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ICb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x11_r3yae_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Ggx_entry() //  [R1]
         { info_tbl: [(c3ICh,
                       label: sat_s3Ggx_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ICh: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl56_r3yc8_entry() //  [R2]
         { info_tbl: [(c3ICn,
                       label: lvl56_r3yc8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ICn: // global
           _s3Ggu::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ICo; else goto c3ICp;
       c3ICp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ICr; else goto c3ICq;
       c3ICr: // global
           HpAlloc = 40;
           goto c3ICo;
       c3ICo: // global
           R2 = _s3Ggu::P64;
           R1 = lvl56_r3yc8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ICq: // global
           I64[Hp - 32] = lvl116_s3Ggv_info;
           P64[Hp - 16] = _s3Ggu::P64;
           I64[Hp - 8] = sat_s3Ggx_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ICk_info;
           R3 = Hp - 7;
           R2 = m24_r3yad_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ICk() //  [R1]
         { info_tbl: [(c3ICk,
                       label: block_c3ICk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ICk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ICu; else goto c3ICt;
       c3ICu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ICt: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.903797752 UTC

[section ""data" . lvl57_r3yc9_closure" {
     lvl57_r3yc9_closure:
         const lvl57_r3yc9_info;
         const 0;
 },
 lvl116_s3GgB_entry() //  [R1]
         { info_tbl: [(c3ID1,
                       label: lvl116_s3GgB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ID1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ID2; else goto c3ID3;
       c3ID2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ID3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x12_r3yah_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GgD_entry() //  [R1]
         { info_tbl: [(c3ID9,
                       label: sat_s3GgD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ID9: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl57_r3yc9_entry() //  [R2]
         { info_tbl: [(c3IDf,
                       label: lvl57_r3yc9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IDf: // global
           _s3GgA::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IDg; else goto c3IDh;
       c3IDh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IDj; else goto c3IDi;
       c3IDj: // global
           HpAlloc = 40;
           goto c3IDg;
       c3IDg: // global
           R2 = _s3GgA::P64;
           R1 = lvl57_r3yc9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IDi: // global
           I64[Hp - 32] = lvl116_s3GgB_info;
           P64[Hp - 16] = _s3GgA::P64;
           I64[Hp - 8] = sat_s3GgD_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IDc_info;
           R3 = Hp - 7;
           R2 = m26_r3yag_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IDc() //  [R1]
         { info_tbl: [(c3IDc,
                       label: block_c3IDc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IDc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IDm; else goto c3IDl;
       c3IDm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IDl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.914551579 UTC

[section ""data" . lvl58_r3yca_closure" {
     lvl58_r3yca_closure:
         const lvl58_r3yca_info;
         const 0;
 },
 lvl116_s3GgH_entry() //  [R1]
         { info_tbl: [(c3IDT,
                       label: lvl116_s3GgH_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IDT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IDU; else goto c3IDV;
       c3IDU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IDV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x13_r3yak_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GgJ_entry() //  [R1]
         { info_tbl: [(c3IE1,
                       label: sat_s3GgJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IE1: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl58_r3yca_entry() //  [R2]
         { info_tbl: [(c3IE7,
                       label: lvl58_r3yca_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IE7: // global
           _s3GgG::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IE8; else goto c3IE9;
       c3IE9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IEb; else goto c3IEa;
       c3IEb: // global
           HpAlloc = 40;
           goto c3IE8;
       c3IE8: // global
           R2 = _s3GgG::P64;
           R1 = lvl58_r3yca_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IEa: // global
           I64[Hp - 32] = lvl116_s3GgH_info;
           P64[Hp - 16] = _s3GgG::P64;
           I64[Hp - 8] = sat_s3GgJ_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IE4_info;
           R3 = Hp - 7;
           R2 = m28_r3yaj_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IE4() //  [R1]
         { info_tbl: [(c3IE4,
                       label: block_c3IE4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IE4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IEe; else goto c3IEd;
       c3IEe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IEd: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.924636786 UTC

[section ""data" . lvl59_r3ycb_closure" {
     lvl59_r3ycb_closure:
         const lvl59_r3ycb_info;
         const 0;
 },
 lvl116_s3GgN_entry() //  [R1]
         { info_tbl: [(c3IEL,
                       label: lvl116_s3GgN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IEL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IEM; else goto c3IEN;
       c3IEM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IEN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x14_r3yan_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GgP_entry() //  [R1]
         { info_tbl: [(c3IET,
                       label: sat_s3GgP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IET: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl59_r3ycb_entry() //  [R2]
         { info_tbl: [(c3IEZ,
                       label: lvl59_r3ycb_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IEZ: // global
           _s3GgM::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IF0; else goto c3IF1;
       c3IF1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IF3; else goto c3IF2;
       c3IF3: // global
           HpAlloc = 40;
           goto c3IF0;
       c3IF0: // global
           R2 = _s3GgM::P64;
           R1 = lvl59_r3ycb_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IF2: // global
           I64[Hp - 32] = lvl116_s3GgN_info;
           P64[Hp - 16] = _s3GgM::P64;
           I64[Hp - 8] = sat_s3GgP_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IEW_info;
           R3 = Hp - 7;
           R2 = m30_r3yam_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IEW() //  [R1]
         { info_tbl: [(c3IEW,
                       label: block_c3IEW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IEW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IF6; else goto c3IF5;
       c3IF6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IF5: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.934344901 UTC

[section ""data" . lvl60_r3ycc_closure" {
     lvl60_r3ycc_closure:
         const lvl60_r3ycc_info;
         const 0;
 },
 lvl116_s3GgT_entry() //  [R1]
         { info_tbl: [(c3IFD,
                       label: lvl116_s3GgT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IFD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IFE; else goto c3IFF;
       c3IFE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IFF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x15_r3yaq_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GgV_entry() //  [R1]
         { info_tbl: [(c3IFL,
                       label: sat_s3GgV_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IFL: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl60_r3ycc_entry() //  [R2]
         { info_tbl: [(c3IFR,
                       label: lvl60_r3ycc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IFR: // global
           _s3GgS::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IFS; else goto c3IFT;
       c3IFT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IFV; else goto c3IFU;
       c3IFV: // global
           HpAlloc = 40;
           goto c3IFS;
       c3IFS: // global
           R2 = _s3GgS::P64;
           R1 = lvl60_r3ycc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IFU: // global
           I64[Hp - 32] = lvl116_s3GgT_info;
           P64[Hp - 16] = _s3GgS::P64;
           I64[Hp - 8] = sat_s3GgV_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IFO_info;
           R3 = Hp - 7;
           R2 = m32_r3yap_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IFO() //  [R1]
         { info_tbl: [(c3IFO,
                       label: block_c3IFO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IFO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IFY; else goto c3IFX;
       c3IFY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IFX: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.944462345 UTC

[section ""data" . lvl61_r3ycd_closure" {
     lvl61_r3ycd_closure:
         const lvl61_r3ycd_info;
         const 0;
 },
 lvl116_s3GgZ_entry() //  [R1]
         { info_tbl: [(c3IGv,
                       label: lvl116_s3GgZ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IGv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IGw; else goto c3IGx;
       c3IGw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IGx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x16_r3yat_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gh1_entry() //  [R1]
         { info_tbl: [(c3IGD,
                       label: sat_s3Gh1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IGD: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl61_r3ycd_entry() //  [R2]
         { info_tbl: [(c3IGJ,
                       label: lvl61_r3ycd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IGJ: // global
           _s3GgY::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IGK; else goto c3IGL;
       c3IGL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IGN; else goto c3IGM;
       c3IGN: // global
           HpAlloc = 40;
           goto c3IGK;
       c3IGK: // global
           R2 = _s3GgY::P64;
           R1 = lvl61_r3ycd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IGM: // global
           I64[Hp - 32] = lvl116_s3GgZ_info;
           P64[Hp - 16] = _s3GgY::P64;
           I64[Hp - 8] = sat_s3Gh1_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IGG_info;
           R3 = Hp - 7;
           R2 = m34_r3yas_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IGG() //  [R1]
         { info_tbl: [(c3IGG,
                       label: block_c3IGG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IGG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IGQ; else goto c3IGP;
       c3IGQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IGP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.955208914 UTC

[section ""data" . lvl62_r3yce_closure" {
     lvl62_r3yce_closure:
         const lvl62_r3yce_info;
         const 0;
 },
 lvl116_s3Gh5_entry() //  [R1]
         { info_tbl: [(c3IHn,
                       label: lvl116_s3Gh5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IHn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IHo; else goto c3IHp;
       c3IHo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IHp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x17_r3yaw_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gh7_entry() //  [R1]
         { info_tbl: [(c3IHv,
                       label: sat_s3Gh7_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IHv: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl62_r3yce_entry() //  [R2]
         { info_tbl: [(c3IHB,
                       label: lvl62_r3yce_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IHB: // global
           _s3Gh4::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IHC; else goto c3IHD;
       c3IHD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IHF; else goto c3IHE;
       c3IHF: // global
           HpAlloc = 40;
           goto c3IHC;
       c3IHC: // global
           R2 = _s3Gh4::P64;
           R1 = lvl62_r3yce_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IHE: // global
           I64[Hp - 32] = lvl116_s3Gh5_info;
           P64[Hp - 16] = _s3Gh4::P64;
           I64[Hp - 8] = sat_s3Gh7_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IHy_info;
           R3 = Hp - 7;
           R2 = m36_r3yav_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IHy() //  [R1]
         { info_tbl: [(c3IHy,
                       label: block_c3IHy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IHy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IHI; else goto c3IHH;
       c3IHI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IHH: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.965364688 UTC

[section ""data" . lvl63_r3ycf_closure" {
     lvl63_r3ycf_closure:
         const lvl63_r3ycf_info;
         const 0;
 },
 lvl116_s3Ghb_entry() //  [R1]
         { info_tbl: [(c3IIf,
                       label: lvl116_s3Ghb_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IIf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IIg; else goto c3IIh;
       c3IIg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IIh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x18_r3yaz_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Ghd_entry() //  [R1]
         { info_tbl: [(c3IIn,
                       label: sat_s3Ghd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IIn: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl63_r3ycf_entry() //  [R2]
         { info_tbl: [(c3IIt,
                       label: lvl63_r3ycf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IIt: // global
           _s3Gha::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IIu; else goto c3IIv;
       c3IIv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IIx; else goto c3IIw;
       c3IIx: // global
           HpAlloc = 40;
           goto c3IIu;
       c3IIu: // global
           R2 = _s3Gha::P64;
           R1 = lvl63_r3ycf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IIw: // global
           I64[Hp - 32] = lvl116_s3Ghb_info;
           P64[Hp - 16] = _s3Gha::P64;
           I64[Hp - 8] = sat_s3Ghd_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IIq_info;
           R3 = Hp - 7;
           R2 = m38_r3yay_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IIq() //  [R1]
         { info_tbl: [(c3IIq,
                       label: block_c3IIq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IIq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IIA; else goto c3IIz;
       c3IIA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IIz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.975089309 UTC

[section ""data" . lvl64_r3ycg_closure" {
     lvl64_r3ycg_closure:
         const lvl64_r3ycg_info;
         const 0;
 },
 lvl116_s3Ghh_entry() //  [R1]
         { info_tbl: [(c3IJ7,
                       label: lvl116_s3Ghh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IJ7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IJ8; else goto c3IJ9;
       c3IJ8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IJ9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x19_r3yaC_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Ghj_entry() //  [R1]
         { info_tbl: [(c3IJf,
                       label: sat_s3Ghj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IJf: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl64_r3ycg_entry() //  [R2]
         { info_tbl: [(c3IJl,
                       label: lvl64_r3ycg_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IJl: // global
           _s3Ghg::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IJm; else goto c3IJn;
       c3IJn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IJp; else goto c3IJo;
       c3IJp: // global
           HpAlloc = 40;
           goto c3IJm;
       c3IJm: // global
           R2 = _s3Ghg::P64;
           R1 = lvl64_r3ycg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IJo: // global
           I64[Hp - 32] = lvl116_s3Ghh_info;
           P64[Hp - 16] = _s3Ghg::P64;
           I64[Hp - 8] = sat_s3Ghj_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IJi_info;
           R3 = Hp - 7;
           R2 = m40_r3yaB_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IJi() //  [R1]
         { info_tbl: [(c3IJi,
                       label: block_c3IJi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IJi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IJs; else goto c3IJr;
       c3IJs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IJr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.984702351 UTC

[section ""data" . lvl65_r3ych_closure" {
     lvl65_r3ych_closure:
         const lvl65_r3ych_info;
         const 0;
 },
 lvl116_s3Ghn_entry() //  [R1]
         { info_tbl: [(c3IJZ,
                       label: lvl116_s3Ghn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IJZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IK0; else goto c3IK1;
       c3IK0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IK1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x20_r3yaF_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Ghp_entry() //  [R1]
         { info_tbl: [(c3IK7,
                       label: sat_s3Ghp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IK7: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl65_r3ych_entry() //  [R2]
         { info_tbl: [(c3IKd,
                       label: lvl65_r3ych_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IKd: // global
           _s3Ghm::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IKe; else goto c3IKf;
       c3IKf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IKh; else goto c3IKg;
       c3IKh: // global
           HpAlloc = 40;
           goto c3IKe;
       c3IKe: // global
           R2 = _s3Ghm::P64;
           R1 = lvl65_r3ych_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IKg: // global
           I64[Hp - 32] = lvl116_s3Ghn_info;
           P64[Hp - 16] = _s3Ghm::P64;
           I64[Hp - 8] = sat_s3Ghp_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IKa_info;
           R3 = Hp - 7;
           R2 = m42_r3yaE_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IKa() //  [R1]
         { info_tbl: [(c3IKa,
                       label: block_c3IKa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IKa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IKk; else goto c3IKj;
       c3IKk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IKj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:23.995058532 UTC

[section ""data" . lvl66_r3yci_closure" {
     lvl66_r3yci_closure:
         const lvl66_r3yci_info;
         const 0;
 },
 lvl116_s3Ght_entry() //  [R1]
         { info_tbl: [(c3IKR,
                       label: lvl116_s3Ght_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IKR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IKS; else goto c3IKT;
       c3IKS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IKT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x21_r3yaI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Ghv_entry() //  [R1]
         { info_tbl: [(c3IKZ,
                       label: sat_s3Ghv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IKZ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl66_r3yci_entry() //  [R2]
         { info_tbl: [(c3IL5,
                       label: lvl66_r3yci_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IL5: // global
           _s3Ghs::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IL6; else goto c3IL7;
       c3IL7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IL9; else goto c3IL8;
       c3IL9: // global
           HpAlloc = 40;
           goto c3IL6;
       c3IL6: // global
           R2 = _s3Ghs::P64;
           R1 = lvl66_r3yci_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IL8: // global
           I64[Hp - 32] = lvl116_s3Ght_info;
           P64[Hp - 16] = _s3Ghs::P64;
           I64[Hp - 8] = sat_s3Ghv_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IL2_info;
           R3 = Hp - 7;
           R2 = m44_r3yaH_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IL2() //  [R1]
         { info_tbl: [(c3IL2,
                       label: block_c3IL2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IL2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ILc; else goto c3ILb;
       c3ILc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ILb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.004900305 UTC

[section ""data" . lvl67_r3ycj_closure" {
     lvl67_r3ycj_closure:
         const lvl67_r3ycj_info;
         const 0;
 },
 lvl116_s3Ghz_entry() //  [R1]
         { info_tbl: [(c3ILJ,
                       label: lvl116_s3Ghz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ILJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ILK; else goto c3ILL;
       c3ILK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ILL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x22_r3yaL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GhB_entry() //  [R1]
         { info_tbl: [(c3ILR,
                       label: sat_s3GhB_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ILR: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl67_r3ycj_entry() //  [R2]
         { info_tbl: [(c3ILX,
                       label: lvl67_r3ycj_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ILX: // global
           _s3Ghy::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ILY; else goto c3ILZ;
       c3ILZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IM1; else goto c3IM0;
       c3IM1: // global
           HpAlloc = 40;
           goto c3ILY;
       c3ILY: // global
           R2 = _s3Ghy::P64;
           R1 = lvl67_r3ycj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IM0: // global
           I64[Hp - 32] = lvl116_s3Ghz_info;
           P64[Hp - 16] = _s3Ghy::P64;
           I64[Hp - 8] = sat_s3GhB_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ILU_info;
           R3 = Hp - 7;
           R2 = m46_r3yaK_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ILU() //  [R1]
         { info_tbl: [(c3ILU,
                       label: block_c3ILU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ILU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IM4; else goto c3IM3;
       c3IM4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IM3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.014540401 UTC

[section ""data" . lvl68_r3yck_closure" {
     lvl68_r3yck_closure:
         const lvl68_r3yck_info;
         const 0;
 },
 lvl116_s3GhF_entry() //  [R1]
         { info_tbl: [(c3IMB,
                       label: lvl116_s3GhF_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IMB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IMC; else goto c3IMD;
       c3IMC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IMD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x23_r3yaO_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GhH_entry() //  [R1]
         { info_tbl: [(c3IMJ,
                       label: sat_s3GhH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IMJ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl68_r3yck_entry() //  [R2]
         { info_tbl: [(c3IMP,
                       label: lvl68_r3yck_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IMP: // global
           _s3GhE::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IMQ; else goto c3IMR;
       c3IMR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IMT; else goto c3IMS;
       c3IMT: // global
           HpAlloc = 40;
           goto c3IMQ;
       c3IMQ: // global
           R2 = _s3GhE::P64;
           R1 = lvl68_r3yck_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IMS: // global
           I64[Hp - 32] = lvl116_s3GhF_info;
           P64[Hp - 16] = _s3GhE::P64;
           I64[Hp - 8] = sat_s3GhH_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IMM_info;
           R3 = Hp - 7;
           R2 = m48_r3yaN_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IMM() //  [R1]
         { info_tbl: [(c3IMM,
                       label: block_c3IMM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IMM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IMW; else goto c3IMV;
       c3IMW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IMV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.024830957 UTC

[section ""data" . lvl69_r3ycl_closure" {
     lvl69_r3ycl_closure:
         const lvl69_r3ycl_info;
         const 0;
 },
 lvl116_s3GhL_entry() //  [R1]
         { info_tbl: [(c3INt,
                       label: lvl116_s3GhL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3INt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3INu; else goto c3INv;
       c3INu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3INv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x24_r3yaR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GhN_entry() //  [R1]
         { info_tbl: [(c3INB,
                       label: sat_s3GhN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3INB: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl69_r3ycl_entry() //  [R2]
         { info_tbl: [(c3INH,
                       label: lvl69_r3ycl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3INH: // global
           _s3GhK::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3INI; else goto c3INJ;
       c3INJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3INL; else goto c3INK;
       c3INL: // global
           HpAlloc = 40;
           goto c3INI;
       c3INI: // global
           R2 = _s3GhK::P64;
           R1 = lvl69_r3ycl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3INK: // global
           I64[Hp - 32] = lvl116_s3GhL_info;
           P64[Hp - 16] = _s3GhK::P64;
           I64[Hp - 8] = sat_s3GhN_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3INE_info;
           R3 = Hp - 7;
           R2 = m50_r3yaQ_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3INE() //  [R1]
         { info_tbl: [(c3INE,
                       label: block_c3INE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3INE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3INO; else goto c3INN;
       c3INO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3INN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.035611546 UTC

[section ""data" . lvl70_r3ycm_closure" {
     lvl70_r3ycm_closure:
         const lvl70_r3ycm_info;
         const 0;
 },
 lvl116_s3GhR_entry() //  [R1]
         { info_tbl: [(c3IOl,
                       label: lvl116_s3GhR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IOl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IOm; else goto c3IOn;
       c3IOm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IOn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x25_r3yaU_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GhT_entry() //  [R1]
         { info_tbl: [(c3IOt,
                       label: sat_s3GhT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IOt: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl70_r3ycm_entry() //  [R2]
         { info_tbl: [(c3IOz,
                       label: lvl70_r3ycm_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IOz: // global
           _s3GhQ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IOA; else goto c3IOB;
       c3IOB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IOD; else goto c3IOC;
       c3IOD: // global
           HpAlloc = 40;
           goto c3IOA;
       c3IOA: // global
           R2 = _s3GhQ::P64;
           R1 = lvl70_r3ycm_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IOC: // global
           I64[Hp - 32] = lvl116_s3GhR_info;
           P64[Hp - 16] = _s3GhQ::P64;
           I64[Hp - 8] = sat_s3GhT_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IOw_info;
           R3 = Hp - 7;
           R2 = m52_r3yaT_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IOw() //  [R1]
         { info_tbl: [(c3IOw,
                       label: block_c3IOw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IOw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IOG; else goto c3IOF;
       c3IOG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IOF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.045768438 UTC

[section ""data" . lvl71_r3ycn_closure" {
     lvl71_r3ycn_closure:
         const lvl71_r3ycn_info;
         const 0;
 },
 lvl116_s3GhX_entry() //  [R1]
         { info_tbl: [(c3IPd,
                       label: lvl116_s3GhX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IPd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IPe; else goto c3IPf;
       c3IPe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IPf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x26_r3yaX_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GhZ_entry() //  [R1]
         { info_tbl: [(c3IPl,
                       label: sat_s3GhZ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IPl: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl71_r3ycn_entry() //  [R2]
         { info_tbl: [(c3IPr,
                       label: lvl71_r3ycn_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IPr: // global
           _s3GhW::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IPs; else goto c3IPt;
       c3IPt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IPv; else goto c3IPu;
       c3IPv: // global
           HpAlloc = 40;
           goto c3IPs;
       c3IPs: // global
           R2 = _s3GhW::P64;
           R1 = lvl71_r3ycn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IPu: // global
           I64[Hp - 32] = lvl116_s3GhX_info;
           P64[Hp - 16] = _s3GhW::P64;
           I64[Hp - 8] = sat_s3GhZ_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IPo_info;
           R3 = Hp - 7;
           R2 = m54_r3yaW_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IPo() //  [R1]
         { info_tbl: [(c3IPo,
                       label: block_c3IPo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IPo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IPy; else goto c3IPx;
       c3IPy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IPx: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.055535868 UTC

[section ""data" . lvl72_r3yco_closure" {
     lvl72_r3yco_closure:
         const lvl72_r3yco_info;
         const 0;
 },
 lvl116_s3Gi3_entry() //  [R1]
         { info_tbl: [(c3IQ5,
                       label: lvl116_s3Gi3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IQ5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IQ6; else goto c3IQ7;
       c3IQ6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IQ7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x27_r3yb0_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gi5_entry() //  [R1]
         { info_tbl: [(c3IQd,
                       label: sat_s3Gi5_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IQd: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl72_r3yco_entry() //  [R2]
         { info_tbl: [(c3IQj,
                       label: lvl72_r3yco_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IQj: // global
           _s3Gi2::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IQk; else goto c3IQl;
       c3IQl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IQn; else goto c3IQm;
       c3IQn: // global
           HpAlloc = 40;
           goto c3IQk;
       c3IQk: // global
           R2 = _s3Gi2::P64;
           R1 = lvl72_r3yco_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IQm: // global
           I64[Hp - 32] = lvl116_s3Gi3_info;
           P64[Hp - 16] = _s3Gi2::P64;
           I64[Hp - 8] = sat_s3Gi5_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IQg_info;
           R3 = Hp - 7;
           R2 = m56_r3yaZ_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IQg() //  [R1]
         { info_tbl: [(c3IQg,
                       label: block_c3IQg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IQg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IQq; else goto c3IQp;
       c3IQq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IQp: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.065601706 UTC

[section ""data" . lvl73_r3ycp_closure" {
     lvl73_r3ycp_closure:
         const lvl73_r3ycp_info;
         const 0;
 },
 lvl116_s3Gi9_entry() //  [R1]
         { info_tbl: [(c3IQX,
                       label: lvl116_s3Gi9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IQX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IQY; else goto c3IQZ;
       c3IQY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IQZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x28_r3yb3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gib_entry() //  [R1]
         { info_tbl: [(c3IR5,
                       label: sat_s3Gib_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IR5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl73_r3ycp_entry() //  [R2]
         { info_tbl: [(c3IRb,
                       label: lvl73_r3ycp_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IRb: // global
           _s3Gi8::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IRc; else goto c3IRd;
       c3IRd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IRf; else goto c3IRe;
       c3IRf: // global
           HpAlloc = 40;
           goto c3IRc;
       c3IRc: // global
           R2 = _s3Gi8::P64;
           R1 = lvl73_r3ycp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IRe: // global
           I64[Hp - 32] = lvl116_s3Gi9_info;
           P64[Hp - 16] = _s3Gi8::P64;
           I64[Hp - 8] = sat_s3Gib_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IR8_info;
           R3 = Hp - 7;
           R2 = m58_r3yb2_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IR8() //  [R1]
         { info_tbl: [(c3IR8,
                       label: block_c3IR8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IR8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IRi; else goto c3IRh;
       c3IRi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IRh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.076215989 UTC

[section ""data" . lvl74_r3ycq_closure" {
     lvl74_r3ycq_closure:
         const lvl74_r3ycq_info;
         const 0;
 },
 lvl116_s3Gif_entry() //  [R1]
         { info_tbl: [(c3IRP,
                       label: lvl116_s3Gif_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IRP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IRQ; else goto c3IRR;
       c3IRQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IRR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x29_r3yb6_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gih_entry() //  [R1]
         { info_tbl: [(c3IRX,
                       label: sat_s3Gih_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IRX: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl74_r3ycq_entry() //  [R2]
         { info_tbl: [(c3IS3,
                       label: lvl74_r3ycq_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IS3: // global
           _s3Gie::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IS4; else goto c3IS5;
       c3IS5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IS7; else goto c3IS6;
       c3IS7: // global
           HpAlloc = 40;
           goto c3IS4;
       c3IS4: // global
           R2 = _s3Gie::P64;
           R1 = lvl74_r3ycq_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IS6: // global
           I64[Hp - 32] = lvl116_s3Gif_info;
           P64[Hp - 16] = _s3Gie::P64;
           I64[Hp - 8] = sat_s3Gih_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IS0_info;
           R3 = Hp - 7;
           R2 = m60_r3yb5_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IS0() //  [R1]
         { info_tbl: [(c3IS0,
                       label: block_c3IS0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IS0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ISa; else goto c3IS9;
       c3ISa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IS9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.086776968 UTC

[section ""data" . lvl75_r3ycr_closure" {
     lvl75_r3ycr_closure:
         const lvl75_r3ycr_info;
         const 0;
 },
 lvl116_s3Gil_entry() //  [R1]
         { info_tbl: [(c3ISH,
                       label: lvl116_s3Gil_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ISH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ISI; else goto c3ISJ;
       c3ISI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ISJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x30_r3yb9_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gin_entry() //  [R1]
         { info_tbl: [(c3ISP,
                       label: sat_s3Gin_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ISP: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl75_r3ycr_entry() //  [R2]
         { info_tbl: [(c3ISV,
                       label: lvl75_r3ycr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ISV: // global
           _s3Gik::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ISW; else goto c3ISX;
       c3ISX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ISZ; else goto c3ISY;
       c3ISZ: // global
           HpAlloc = 40;
           goto c3ISW;
       c3ISW: // global
           R2 = _s3Gik::P64;
           R1 = lvl75_r3ycr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ISY: // global
           I64[Hp - 32] = lvl116_s3Gil_info;
           P64[Hp - 16] = _s3Gik::P64;
           I64[Hp - 8] = sat_s3Gin_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ISS_info;
           R3 = Hp - 7;
           R2 = m62_r3yb8_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ISS() //  [R1]
         { info_tbl: [(c3ISS,
                       label: block_c3ISS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ISS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IT2; else goto c3IT1;
       c3IT2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IT1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.098268674 UTC

[section ""data" . lvl76_r3ycs_closure" {
     lvl76_r3ycs_closure:
         const lvl76_r3ycs_info;
         const 0;
 },
 lvl116_s3Gir_entry() //  [R1]
         { info_tbl: [(c3ITz,
                       label: lvl116_s3Gir_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ITz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ITA; else goto c3ITB;
       c3ITA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ITB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x31_r3ybc_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Git_entry() //  [R1]
         { info_tbl: [(c3ITH,
                       label: sat_s3Git_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ITH: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl76_r3ycs_entry() //  [R2]
         { info_tbl: [(c3ITN,
                       label: lvl76_r3ycs_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ITN: // global
           _s3Giq::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3ITO; else goto c3ITP;
       c3ITP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ITR; else goto c3ITQ;
       c3ITR: // global
           HpAlloc = 40;
           goto c3ITO;
       c3ITO: // global
           R2 = _s3Giq::P64;
           R1 = lvl76_r3ycs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ITQ: // global
           I64[Hp - 32] = lvl116_s3Gir_info;
           P64[Hp - 16] = _s3Giq::P64;
           I64[Hp - 8] = sat_s3Git_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3ITK_info;
           R3 = Hp - 7;
           R2 = m64_r3ybb_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ITK() //  [R1]
         { info_tbl: [(c3ITK,
                       label: block_c3ITK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ITK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ITU; else goto c3ITT;
       c3ITU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ITT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.113875149 UTC

[section ""data" . lvl77_r3yct_closure" {
     lvl77_r3yct_closure:
         const lvl77_r3yct_info;
         const 0;
 },
 lvl116_s3Gix_entry() //  [R1]
         { info_tbl: [(c3IUr,
                       label: lvl116_s3Gix_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IUr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IUs; else goto c3IUt;
       c3IUs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IUt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x32_r3ybf_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Giz_entry() //  [R1]
         { info_tbl: [(c3IUz,
                       label: sat_s3Giz_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IUz: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl77_r3yct_entry() //  [R2]
         { info_tbl: [(c3IUF,
                       label: lvl77_r3yct_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IUF: // global
           _s3Giw::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IUG; else goto c3IUH;
       c3IUH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IUJ; else goto c3IUI;
       c3IUJ: // global
           HpAlloc = 40;
           goto c3IUG;
       c3IUG: // global
           R2 = _s3Giw::P64;
           R1 = lvl77_r3yct_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IUI: // global
           I64[Hp - 32] = lvl116_s3Gix_info;
           P64[Hp - 16] = _s3Giw::P64;
           I64[Hp - 8] = sat_s3Giz_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IUC_info;
           R3 = Hp - 7;
           R2 = m66_r3ybe_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IUC() //  [R1]
         { info_tbl: [(c3IUC,
                       label: block_c3IUC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IUC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IUM; else goto c3IUL;
       c3IUM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IUL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.13055226 UTC

[section ""data" . lvl78_r3ycu_closure" {
     lvl78_r3ycu_closure:
         const lvl78_r3ycu_info;
         const 0;
 },
 lvl116_s3GiD_entry() //  [R1]
         { info_tbl: [(c3IVj,
                       label: lvl116_s3GiD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IVj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IVk; else goto c3IVl;
       c3IVk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IVl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = x33_r3ybi_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GiF_entry() //  [R1]
         { info_tbl: [(c3IVr,
                       label: sat_s3GiF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IVr: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl78_r3ycu_entry() //  [R2]
         { info_tbl: [(c3IVx,
                       label: lvl78_r3ycu_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IVx: // global
           _s3GiC::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3IVy; else goto c3IVz;
       c3IVz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3IVB; else goto c3IVA;
       c3IVB: // global
           HpAlloc = 40;
           goto c3IVy;
       c3IVy: // global
           R2 = _s3GiC::P64;
           R1 = lvl78_r3ycu_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IVA: // global
           I64[Hp - 32] = lvl116_s3GiD_info;
           P64[Hp - 16] = _s3GiC::P64;
           I64[Hp - 8] = sat_s3GiF_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 8] = block_c3IVu_info;
           R3 = Hp - 7;
           R2 = m68_r3ybh_closure;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IVu() //  [R1]
         { info_tbl: [(c3IVu,
                       label: block_c3IVu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IVu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3IVE; else goto c3IVD;
       c3IVE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3IVD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.145475355 UTC

[section ""data" . lvl79_r3ycv_closure" {
     lvl79_r3ycv_closure:
         const :_con_info;
         const lvl78_r3ycu_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.147190295 UTC

[section ""data" . lvl80_r3ycw_closure" {
     lvl80_r3ycw_closure:
         const :_con_info;
         const lvl77_r3yct_closure+1;
         const lvl79_r3ycv_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.148898972 UTC

[section ""data" . lvl81_r3ycx_closure" {
     lvl81_r3ycx_closure:
         const :_con_info;
         const lvl76_r3ycs_closure+1;
         const lvl80_r3ycw_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.150681415 UTC

[section ""data" . lvl82_r3ycy_closure" {
     lvl82_r3ycy_closure:
         const :_con_info;
         const lvl75_r3ycr_closure+1;
         const lvl81_r3ycx_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.152382678 UTC

[section ""data" . lvl83_r3ycz_closure" {
     lvl83_r3ycz_closure:
         const :_con_info;
         const lvl74_r3ycq_closure+1;
         const lvl82_r3ycy_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.154164016 UTC

[section ""data" . lvl84_r3ycA_closure" {
     lvl84_r3ycA_closure:
         const :_con_info;
         const lvl73_r3ycp_closure+1;
         const lvl83_r3ycz_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.155846616 UTC

[section ""data" . lvl85_r3ycB_closure" {
     lvl85_r3ycB_closure:
         const :_con_info;
         const lvl72_r3yco_closure+1;
         const lvl84_r3ycA_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.157792124 UTC

[section ""data" . lvl86_r3ycC_closure" {
     lvl86_r3ycC_closure:
         const :_con_info;
         const lvl71_r3ycn_closure+1;
         const lvl85_r3ycB_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.159430754 UTC

[section ""data" . lvl87_r3ycD_closure" {
     lvl87_r3ycD_closure:
         const :_con_info;
         const lvl70_r3ycm_closure+1;
         const lvl86_r3ycC_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.161979806 UTC

[section ""data" . lvl88_r3ycE_closure" {
     lvl88_r3ycE_closure:
         const :_con_info;
         const lvl69_r3ycl_closure+1;
         const lvl87_r3ycD_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.163710054 UTC

[section ""data" . lvl89_r3ycF_closure" {
     lvl89_r3ycF_closure:
         const :_con_info;
         const lvl68_r3yck_closure+1;
         const lvl88_r3ycE_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.16559585 UTC

[section ""data" . lvl90_r3ycG_closure" {
     lvl90_r3ycG_closure:
         const :_con_info;
         const lvl67_r3ycj_closure+1;
         const lvl89_r3ycF_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.16724738 UTC

[section ""data" . lvl91_r3ycH_closure" {
     lvl91_r3ycH_closure:
         const :_con_info;
         const lvl66_r3yci_closure+1;
         const lvl90_r3ycG_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.168797426 UTC

[section ""data" . lvl92_r3ycI_closure" {
     lvl92_r3ycI_closure:
         const :_con_info;
         const lvl65_r3ych_closure+1;
         const lvl91_r3ycH_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.170620262 UTC

[section ""data" . lvl93_r3ycJ_closure" {
     lvl93_r3ycJ_closure:
         const :_con_info;
         const lvl64_r3ycg_closure+1;
         const lvl92_r3ycI_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.172382686 UTC

[section ""data" . lvl94_r3ycK_closure" {
     lvl94_r3ycK_closure:
         const :_con_info;
         const lvl63_r3ycf_closure+1;
         const lvl93_r3ycJ_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.174643269 UTC

[section ""data" . lvl95_r3ycL_closure" {
     lvl95_r3ycL_closure:
         const :_con_info;
         const lvl62_r3yce_closure+1;
         const lvl94_r3ycK_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.176407386 UTC

[section ""data" . lvl96_r3ycM_closure" {
     lvl96_r3ycM_closure:
         const :_con_info;
         const lvl61_r3ycd_closure+1;
         const lvl95_r3ycL_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.178193202 UTC

[section ""data" . lvl97_r3ycN_closure" {
     lvl97_r3ycN_closure:
         const :_con_info;
         const lvl60_r3ycc_closure+1;
         const lvl96_r3ycM_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.179973714 UTC

[section ""data" . lvl98_r3ycO_closure" {
     lvl98_r3ycO_closure:
         const :_con_info;
         const lvl59_r3ycb_closure+1;
         const lvl97_r3ycN_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.181801716 UTC

[section ""data" . lvl99_r3ycP_closure" {
     lvl99_r3ycP_closure:
         const :_con_info;
         const lvl58_r3yca_closure+1;
         const lvl98_r3ycO_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.183469507 UTC

[section ""data" . lvl100_r3ycQ_closure" {
     lvl100_r3ycQ_closure:
         const :_con_info;
         const lvl57_r3yc9_closure+1;
         const lvl99_r3ycP_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.185163126 UTC

[section ""data" . lvl101_r3ycR_closure" {
     lvl101_r3ycR_closure:
         const :_con_info;
         const lvl56_r3yc8_closure+1;
         const lvl100_r3ycQ_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.187893292 UTC

[section ""data" . lvl102_r3ycS_closure" {
     lvl102_r3ycS_closure:
         const :_con_info;
         const lvl55_r3yc7_closure+1;
         const lvl101_r3ycR_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.189643394 UTC

[section ""data" . lvl103_r3ycT_closure" {
     lvl103_r3ycT_closure:
         const :_con_info;
         const lvl54_r3yc6_closure+1;
         const lvl102_r3ycS_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.191362101 UTC

[section ""data" . lvl104_r3ycU_closure" {
     lvl104_r3ycU_closure:
         const :_con_info;
         const lvl53_r3yc5_closure+1;
         const lvl103_r3ycT_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.193056645 UTC

[section ""data" . lvl105_r3ycV_closure" {
     lvl105_r3ycV_closure:
         const :_con_info;
         const lvl52_r3yc4_closure+1;
         const lvl104_r3ycU_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.19470443 UTC

[section ""data" . lvl106_r3ycW_closure" {
     lvl106_r3ycW_closure:
         const :_con_info;
         const lvl51_r3yc3_closure+1;
         const lvl105_r3ycV_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.1963785 UTC

[section ""data" . lvl107_r3ycX_closure" {
     lvl107_r3ycX_closure:
         const :_con_info;
         const lvl50_r3yc2_closure+1;
         const lvl106_r3ycW_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.198110285 UTC

[section ""data" . lvl108_r3ycY_closure" {
     lvl108_r3ycY_closure:
         const :_con_info;
         const lvl49_r3yc1_closure+1;
         const lvl107_r3ycX_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.199741263 UTC

[section ""data" . lvl109_r3ycZ_closure" {
     lvl109_r3ycZ_closure:
         const :_con_info;
         const lvl48_r3yc0_closure+1;
         const lvl108_r3ycY_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.201467371 UTC

[section ""data" . lvl110_r3yd0_closure" {
     lvl110_r3yd0_closure:
         const :_con_info;
         const lvl47_r3ybZ_closure+1;
         const lvl109_r3ycZ_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.203130298 UTC

[section ""data" . lvl111_r3yd1_closure" {
     lvl111_r3yd1_closure:
         const :_con_info;
         const lvl46_r3ybY_closure+1;
         const lvl110_r3yd0_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.205926948 UTC

[section ""data" . lvl112_r3yd2_closure" {
     lvl112_r3yd2_closure:
         const lvl112_r3yd2_info;
 },
 lvl116_s3GiJ_entry() //  [R1]
         { info_tbl: [(c3IWI,
                       label: lvl116_s3GiJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IWI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IWJ; else goto c3IWK;
       c3IWJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IWK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = a2_r3y9z_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3GiK_entry() //  [R1]
         { info_tbl: [(c3IWP,
                       label: lvl117_s3GiK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IWP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IWQ; else goto c3IWR;
       c3IWQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IWR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = a1_r3y9y_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GiP_entry() //  [R1, R2]
         { info_tbl: [(c3IX0,
                       label: sat_s3GiP_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IX0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3IX1; else goto c3IX2;
       c3IX1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IX2: // global
           I64[Sp - 24] = block_c3IWX_info;
           _s3GiJ::P64 = P64[R1 + 7];
           _s3GiK::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3GiJ::P64;
           P64[Sp - 8] = _s3GiK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3IXi; else goto c3IWY;
       u3IXi: // global
           call _c3IWX(R1) args: 0, res: 0, upd: 0;
       c3IWY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3IWX() //  [R1]
         { info_tbl: [(c3IWX,
                       label: block_c3IWX_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IWX: // global
           _s3GiJ::P64 = P64[Sp + 8];
           _s3GiO::I64 = I64[R1 + 7];
           if (_s3GiO::I64 < 120) goto u3IXd; else goto u3IXh;
       u3IXd: // global
           _s3GiK::P64 = P64[Sp + 16];
           if (_s3GiO::I64 < 89) goto u3IXe; else goto u3IXg;
       u3IXe: // global
           if (_s3GiO::I64 >= 88) goto c3IXc; else goto u3IXf;
       u3IXf: // global
           if (_s3GiO::I64 != 79) goto c3IX8; else goto c3IXb;
       u3IXg: // global
           if (_s3GiO::I64 != 111) goto c3IX8; else goto c3IXb;
       c3IXb: // global
           R1 = _s3GiK::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3IXh: // global
           if (_s3GiO::I64 < 121) goto c3IXc; else goto c3IX8;
       c3IXc: // global
           R1 = _s3GiJ::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3IX8: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl112_r3yd2_entry() //  [R2]
         { info_tbl: [(c3IXk,
                       label: lvl112_r3yd2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IXk: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3IXo; else goto c3IXn;
       c3IXo: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = lvl112_r3yd2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3IXn: // global
           I64[Hp - 80] = lvl116_s3GiJ_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = lvl117_s3GiK_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s3GiP_info;
           P64[Hp - 24] = Hp - 80;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.219240183 UTC

[section ""data" . lvl113_r3yd3_closure" {
     lvl113_r3yd3_closure:
         const lvl113_r3yd3_info;
 },
 lvl113_r3yd3_entry() //  [R2]
         { info_tbl: [(c3IY4,
                       label: lvl113_r3yd3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IY4: // global
           _s3GiQ::P64 = R2;
           R2 = lvl6_r3y9C_closure+1;
           R1 = _s3GiQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.231547282 UTC

[section ""data" . Text.Read.Lex.lexChar2_closure" {
     Text.Read.Lex.lexChar2_closure:
         const Text.Read.Lex.lexChar2_info;
         const 0;
 },
 lvl116_s3GiS_entry() //  [R1]
         { info_tbl: [(c3IYj,
                       label: lvl116_s3GiS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IYj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IYk; else goto c3IYl;
       c3IYk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IYl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl18_r3ybu_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3GiT_entry() //  [R1]
         { info_tbl: [(c3IYq,
                       label: lvl117_s3GiT_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IYq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IYr; else goto c3IYs;
       c3IYr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IYs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl16_r3ybs_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3GiU_entry() //  [R1]
         { info_tbl: [(c3IYx,
                       label: lvl118_s3GiU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IYx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IYy; else goto c3IYz;
       c3IYy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IYz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl20_r3ybw_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl119_s3GiV_entry() //  [R1]
         { info_tbl: [(c3IYE,
                       label: lvl119_s3GiV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IYE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IYF; else goto c3IYG;
       c3IYF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IYG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl17_r3ybt_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl120_s3GiW_entry() //  [R1]
         { info_tbl: [(c3IYL,
                       label: lvl120_s3GiW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IYL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IYM; else goto c3IYN;
       c3IYM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IYN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl19_r3ybv_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl121_s3GiX_entry() //  [R1]
         { info_tbl: [(c3IYS,
                       label: lvl121_s3GiX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IYS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IYT; else goto c3IYU;
       c3IYT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IYU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl15_r3ybr_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl122_s3GiY_entry() //  [R1]
         { info_tbl: [(c3IYZ,
                       label: lvl122_s3GiY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IYZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IZ0; else goto c3IZ1;
       c3IZ0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IZ1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl14_r3ybq_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl123_s3GiZ_entry() //  [R1]
         { info_tbl: [(c3IZ6,
                       label: lvl123_s3GiZ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IZ6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IZ7; else goto c3IZ8;
       c3IZ7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IZ8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl13_r3ybp_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl124_s3Gj0_entry() //  [R1]
         { info_tbl: [(c3IZd,
                       label: lvl124_s3Gj0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IZd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IZe; else goto c3IZf;
       c3IZe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IZf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl11_r3ybn_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl125_s3Gj1_entry() //  [R1]
         { info_tbl: [(c3IZk,
                       label: lvl125_s3Gj1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IZk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3IZl; else goto c3IZm;
       c3IZl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IZm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl9_r3ybl_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl126_s3Gj9_entry() //  [R1]
         { info_tbl: [(c3IZD,
                       label: lvl126_s3Gj9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IZD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3IZE; else goto c3IZF;
       c3IZE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3IZF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3IZA_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3IZJ; else goto c3IZB;
       u3IZJ: // global
           call _c3IZA(R1) args: 0, res: 0, upd: 0;
       c3IZB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3IZA() //  [R1]
         { info_tbl: [(c3IZA,
                       label: block_c3IZA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IZA: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gjj_entry() //  [R1]
         { info_tbl: [(c3J04,
                       label: sat_s3Gjj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J04: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3J05; else goto c3J06;
       c3J05: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J06: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3J02_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3J02() //  [R1]
         { info_tbl: [(c3J02,
                       label: block_c3J02_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J02: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3J0b; else goto c3J0a;
       c3J0b: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3J0a: // global
           if (R1 > 1114111) goto c3J0i; else goto c3J0p;
       c3J0i: // global
           Hp = Hp - 16;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c3J0p: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3J6l_srtd" {
     u3J6l_srtd:
         const S3GvX_srt+232;
         const 122;
         const 1;
         const 216172782113783808;
 },
 sat_s3Gjl_entry() //  [R1, R2]
         { info_tbl: [(c3J0q,
                       label: sat_s3Gjl_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J0q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3J0r; else goto c3J0s;
       c3J0r: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J0s: // global
           I64[Sp - 16] = block_c3IZP_info;
           R3 = R2;
           R2 = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IZP() //  [R1]
         { info_tbl: [(c3IZP,
                       label: block_c3IZP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IZP: // global
           I64[Sp - 8] = block_c3IZT_info;
           R3 = lvl7_r3ybj_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3IZT() //  [R1]
         { info_tbl: [(c3IZT,
                       label: block_c3IZT_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3IZT: // global
           if (R1 == 1) goto c3J0z; else goto c3J0x;
       c3J0z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3J0C; else goto c3J0B;
       c3J0C: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3J0B: // global
           I64[Hp - 40] = sat_s3Gjj_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = Hp - 15;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3J0x: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3J6m_srtd" {
     u3J6m_srtd:
         const S3GvX_srt+232;
         const 122;
         const 17592186044417;
         const 216172782113783808;
 },
 sat_s3Gjo_entry() //  [R1, R2]
         { info_tbl: [(c3J0G,
                       label: sat_s3Gjo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J0G: // global
           _s3Gj8::P64 = R2;
           _s3Gjo::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3J0H; else goto c3J0I;
       c3J0I: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3J0K; else goto c3J0J;
       c3J0K: // global
           HpAlloc = 48;
           goto c3J0H;
       c3J0H: // global
           R2 = _s3Gj8::P64;
           R1 = _s3Gjo::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J0J: // global
           _s3GiR::P64 = P64[_s3Gjo::P64 + 7];
           I64[Hp - 40] = lvl126_s3Gj9_info;
           P64[Hp - 24] = _s3Gj8::P64;
           I64[Hp - 16] = sat_s3Gjl_info;
           P64[Hp - 8] = _s3GiR::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_c3J0D_info;
           R3 = Hp - 15;
           R2 = _s3Gj8::P64;
           Sp = Sp - 8;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3J0D() //  [R1]
         { info_tbl: [(c3J0D,
                       label: block_c3J0D_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J0D: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3J0N; else goto c3J0M;
       c3J0N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3J0M: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl126_s3Gjs_entry() //  [R1]
         { info_tbl: [(c3J0Y,
                       label: lvl126_s3Gjs_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J0Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J0Z; else goto c3J10;
       c3J0Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J10: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl45_r3ybV_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl127_s3Gjt_entry() //  [R1]
         { info_tbl: [(c3J15,
                       label: lvl127_s3Gjt_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J15: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J16; else goto c3J17;
       c3J16: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J17: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl44_r3ybU_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl128_s3Gju_entry() //  [R1]
         { info_tbl: [(c3J1c,
                       label: lvl128_s3Gju_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J1c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1d; else goto c3J1e;
       c3J1d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl43_r3ybT_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl129_s3Gjv_entry() //  [R1]
         { info_tbl: [(c3J1j,
                       label: lvl129_s3Gjv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J1j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1k; else goto c3J1l;
       c3J1k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl42_r3ybS_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl130_s3Gjw_entry() //  [R1]
         { info_tbl: [(c3J1q,
                       label: lvl130_s3Gjw_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J1q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1r; else goto c3J1s;
       c3J1r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl41_r3ybR_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl131_s3Gjx_entry() //  [R1]
         { info_tbl: [(c3J1x,
                       label: lvl131_s3Gjx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J1x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1y; else goto c3J1z;
       c3J1y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl40_r3ybQ_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl132_s3Gjy_entry() //  [R1]
         { info_tbl: [(c3J1E,
                       label: lvl132_s3Gjy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J1E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1F; else goto c3J1G;
       c3J1F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl39_r3ybP_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl133_s3Gjz_entry() //  [R1]
         { info_tbl: [(c3J1L,
                       label: lvl133_s3Gjz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J1L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1M; else goto c3J1N;
       c3J1M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl38_r3ybO_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl134_s3GjA_entry() //  [R1]
         { info_tbl: [(c3J1S,
                       label: lvl134_s3GjA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J1S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J1T; else goto c3J1U;
       c3J1T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J1U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl37_r3ybN_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl135_s3GjB_entry() //  [R1]
         { info_tbl: [(c3J1Z,
                       label: lvl135_s3GjB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J1Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J20; else goto c3J21;
       c3J20: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J21: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl36_r3ybM_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl136_s3GjC_entry() //  [R1]
         { info_tbl: [(c3J26,
                       label: lvl136_s3GjC_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J26: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J27; else goto c3J28;
       c3J27: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J28: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl35_r3ybL_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl137_s3GjD_entry() //  [R1]
         { info_tbl: [(c3J2d,
                       label: lvl137_s3GjD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J2d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2e; else goto c3J2f;
       c3J2e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl34_r3ybK_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl138_s3GjE_entry() //  [R1]
         { info_tbl: [(c3J2k,
                       label: lvl138_s3GjE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J2k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2l; else goto c3J2m;
       c3J2l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl33_r3ybJ_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl139_s3GjF_entry() //  [R1]
         { info_tbl: [(c3J2r,
                       label: lvl139_s3GjF_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J2r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2s; else goto c3J2t;
       c3J2s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl32_r3ybI_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl140_s3GjG_entry() //  [R1]
         { info_tbl: [(c3J2y,
                       label: lvl140_s3GjG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J2y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2z; else goto c3J2A;
       c3J2z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl31_r3ybH_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl141_s3GjH_entry() //  [R1]
         { info_tbl: [(c3J2F,
                       label: lvl141_s3GjH_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J2F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2G; else goto c3J2H;
       c3J2G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl30_r3ybG_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl142_s3GjI_entry() //  [R1]
         { info_tbl: [(c3J2M,
                       label: lvl142_s3GjI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J2M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2N; else goto c3J2O;
       c3J2N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl29_r3ybF_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl143_s3GjJ_entry() //  [R1]
         { info_tbl: [(c3J2T,
                       label: lvl143_s3GjJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J2T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J2U; else goto c3J2V;
       c3J2U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J2V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl28_r3ybE_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl144_s3GjK_entry() //  [R1]
         { info_tbl: [(c3J30,
                       label: lvl144_s3GjK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J30: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J31; else goto c3J32;
       c3J31: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J32: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl27_r3ybD_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl145_s3GjL_entry() //  [R1]
         { info_tbl: [(c3J37,
                       label: lvl145_s3GjL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J37: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J38; else goto c3J39;
       c3J38: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J39: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl26_r3ybC_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl146_s3GjM_entry() //  [R1]
         { info_tbl: [(c3J3e,
                       label: lvl146_s3GjM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J3e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J3f; else goto c3J3g;
       c3J3f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J3g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl25_r3ybB_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl147_s3GjN_entry() //  [R1]
         { info_tbl: [(c3J3l,
                       label: lvl147_s3GjN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J3l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J3m; else goto c3J3n;
       c3J3m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J3n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl24_r3ybA_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl148_s3GjO_entry() //  [R1]
         { info_tbl: [(c3J3s,
                       label: lvl148_s3GjO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J3s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J3t; else goto c3J3u;
       c3J3t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J3u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl23_r3ybz_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl149_s3GjP_entry() //  [R1]
         { info_tbl: [(c3J3z,
                       label: lvl149_s3GjP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J3z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J3A; else goto c3J3B;
       c3J3A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J3B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl22_r3yby_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl150_s3GjQ_entry() //  [R1]
         { info_tbl: [(c3J3G,
                       label: lvl150_s3GjQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J3G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J3H; else goto c3J3I;
       c3J3H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J3I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = lvl21_r3ybx_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 $wlvl1_s3GjR_entry() //  [R1, R2]
         { info_tbl: [(c3J4n,
                       label: $wlvl1_s3GjR_info
                       rep:HeapRep 32 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J4n: // global
           if (R2 >= 96) goto c3J3Q; else goto u3J4q;
       u3J4q: // global
           if (R2 < 64) goto c3J3Q; else goto u3J4r;
       c3J3Q: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3J4r: // global
           switch [64 .. 95] R2 {
               case 64 : goto c3J3R;
               case 65 : goto c3J3S;
               case 66 : goto c3J3T;
               case 67 : goto c3J3U;
               case 68 : goto c3J3V;
               case 69 : goto c3J3W;
               case 70 : goto c3J3X;
               case 71 : goto c3J3Y;
               case 72 : goto c3J3Z;
               case 73 : goto c3J40;
               case 74 : goto c3J41;
               case 75 : goto c3J42;
               case 76 : goto c3J43;
               case 77 : goto c3J44;
               case 78 : goto c3J45;
               case 79 : goto c3J46;
               case 80 : goto c3J47;
               case 81 : goto c3J48;
               case 82 : goto c3J49;
               case 83 : goto c3J4a;
               case 84 : goto c3J4b;
               case 85 : goto c3J4c;
               case 86 : goto c3J4d;
               case 87 : goto c3J4e;
               case 88 : goto c3J4f;
               case 89 : goto c3J4g;
               case 90 : goto c3J4h;
               case 91 : goto c3J4i;
               case 92 : goto c3J4j;
               case 93 : goto c3J4k;
               case 94 : goto c3J4l;
               case 95 : goto c3J4m;
           }
       c3J4m: // global
           R1 = P64[R1 + 63] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4l: // global
           R1 = P64[R1 + 71] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4k: // global
           R1 = P64[R1 + 79] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4j: // global
           R1 = P64[R1 + 87] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4i: // global
           R1 = P64[R1 + 95] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4h: // global
           R1 = P64[R1 + 103] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4g: // global
           R1 = P64[R1 + 111] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4f: // global
           R1 = P64[R1 + 119] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4e: // global
           R1 = P64[R1 + 127] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4d: // global
           R1 = P64[R1 + 135] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4c: // global
           R1 = P64[R1 + 143] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4b: // global
           R1 = P64[R1 + 151] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J4a: // global
           R1 = P64[R1 + 159] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J49: // global
           R1 = P64[R1 + 167] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J48: // global
           R1 = P64[R1 + 175] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J47: // global
           R1 = P64[R1 + 183] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J46: // global
           R1 = P64[R1 + 191] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J45: // global
           R1 = P64[R1 + 199] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J44: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J43: // global
           R1 = P64[R1 + 15] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J42: // global
           R1 = P64[R1 + 23] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J41: // global
           R1 = P64[R1 + 31] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J40: // global
           R1 = P64[R1 + 39] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3Z: // global
           R1 = P64[R1 + 47] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3Y: // global
           R1 = P64[R1 + 55] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3X: // global
           R1 = P64[R1 + 207] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3W: // global
           R1 = P64[R1 + 215] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3V: // global
           R1 = P64[R1 + 223] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3U: // global
           R1 = P64[R1 + 231] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3T: // global
           R1 = P64[R1 + 239] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3S: // global
           R1 = P64[R1 + 247] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J3R: // global
           R1 = P64[R1 + 255] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl151_s3GjU_entry() //  [R1, R2]
         { info_tbl: [(c3J4A,
                       label: lvl151_s3GjU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J4A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J4B; else goto c3J4C;
       c3J4B: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J4C: // global
           I64[Sp - 16] = block_c3J4x_info;
           _s3GjR::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GjR::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3J4G; else goto c3J4y;
       u3J4G: // global
           call _c3J4x(R1) args: 0, res: 0, upd: 0;
       c3J4y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3J4x() //  [R1]
         { info_tbl: [(c3J4x,
                       label: block_c3J4x_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J4x: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wlvl1_s3GjR_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gk7_entry() //  [R1, R2]
         { info_tbl: [(c3J4S,
                       label: sat_s3Gk7_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J4S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3J4W; else goto c3J4V;
       c3J4W: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J4V: // global
           _s3GiR::P64 = P64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = Hp - 15;
           R1 = _s3GiR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gk8_entry() //  [R1]
         { info_tbl: [(c3J4X,
                       label: sat_s3Gk8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J4X: // global
           _s3Gk8::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3J4Y; else goto c3J4Z;
       c3J4Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3J51; else goto c3J50;
       c3J51: // global
           HpAlloc = 16;
           goto c3J4Y;
       c3J4Y: // global
           R1 = _s3Gk8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J50: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gk8::P64;
           _s3GiR::P64 = P64[_s3Gk8::P64 + 16];
           I64[Hp - 8] = sat_s3Gk7_info;
           P64[Hp] = _s3GiR::P64;
           R2 = lvl111_r3yd1_closure+2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.choice_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 sat_s3Gk3_entry() //  [R1, R2]
         { info_tbl: [(c3J5a,
                       label: sat_s3Gk3_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J5a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3J5b; else goto c3J5c;
       c3J5b: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J5c: // global
           I64[Sp - 16] = block_c3J57_info;
           _s3GjY::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GjY::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3J5k; else goto c3J58;
       u3J5k: // global
           call _c3J57(R1) args: 0, res: 0, upd: 0;
       c3J58: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3J57() //  [R1]
         { info_tbl: [(c3J57,
                       label: block_c3J57_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J57: // global
           if (I64[R1 + 7] == 94) goto c3J5j; else goto c3J5i;
       c3J5j: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3J5i: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gk9_entry() //  [R1]
         { info_tbl: [(c3J5m,
                       label: sat_s3Gk9_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J5m: // global
           _s3Gk9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3J5n; else goto c3J5o;
       c3J5o: // global
           Hp = Hp + 952;
           if (Hp > HpLim) (likely: False) goto c3J5q; else goto c3J5p;
       c3J5q: // global
           HpAlloc = 952;
           goto c3J5n;
       c3J5n: // global
           R1 = _s3Gk9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J5p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gk9::P64;
           _s3GiR::P64 = P64[_s3Gk9::P64 + 16];
           _s3GiS::P64 = P64[_s3Gk9::P64 + 24];
           _s3GiT::P64 = P64[_s3Gk9::P64 + 32];
           _s3GiU::P64 = P64[_s3Gk9::P64 + 40];
           _s3GiV::P64 = P64[_s3Gk9::P64 + 48];
           _s3GiW::P64 = P64[_s3Gk9::P64 + 56];
           _s3GiX::P64 = P64[_s3Gk9::P64 + 64];
           _s3GiY::P64 = P64[_s3Gk9::P64 + 72];
           I64[Hp - 944] = lvl126_s3Gjs_info;
           P64[Hp - 928] = _s3GiR::P64;
           I64[Hp - 920] = lvl127_s3Gjt_info;
           P64[Hp - 904] = _s3GiR::P64;
           I64[Hp - 896] = lvl128_s3Gju_info;
           P64[Hp - 880] = _s3GiR::P64;
           I64[Hp - 872] = lvl129_s3Gjv_info;
           P64[Hp - 856] = _s3GiR::P64;
           I64[Hp - 848] = lvl130_s3Gjw_info;
           P64[Hp - 832] = _s3GiR::P64;
           I64[Hp - 824] = lvl131_s3Gjx_info;
           P64[Hp - 808] = _s3GiR::P64;
           I64[Hp - 800] = lvl132_s3Gjy_info;
           P64[Hp - 784] = _s3GiR::P64;
           I64[Hp - 776] = lvl133_s3Gjz_info;
           P64[Hp - 760] = _s3GiR::P64;
           I64[Hp - 752] = lvl134_s3GjA_info;
           P64[Hp - 736] = _s3GiR::P64;
           I64[Hp - 728] = lvl135_s3GjB_info;
           P64[Hp - 712] = _s3GiR::P64;
           I64[Hp - 704] = lvl136_s3GjC_info;
           P64[Hp - 688] = _s3GiR::P64;
           I64[Hp - 680] = lvl137_s3GjD_info;
           P64[Hp - 664] = _s3GiR::P64;
           I64[Hp - 656] = lvl138_s3GjE_info;
           P64[Hp - 640] = _s3GiR::P64;
           I64[Hp - 632] = lvl139_s3GjF_info;
           P64[Hp - 616] = _s3GiR::P64;
           I64[Hp - 608] = lvl140_s3GjG_info;
           P64[Hp - 592] = _s3GiR::P64;
           I64[Hp - 584] = lvl141_s3GjH_info;
           P64[Hp - 568] = _s3GiR::P64;
           I64[Hp - 560] = lvl142_s3GjI_info;
           P64[Hp - 544] = _s3GiR::P64;
           I64[Hp - 536] = lvl143_s3GjJ_info;
           P64[Hp - 520] = _s3GiR::P64;
           I64[Hp - 512] = lvl144_s3GjK_info;
           P64[Hp - 496] = _s3GiR::P64;
           I64[Hp - 488] = lvl145_s3GjL_info;
           P64[Hp - 472] = _s3GiR::P64;
           I64[Hp - 464] = lvl146_s3GjM_info;
           P64[Hp - 448] = _s3GiR::P64;
           I64[Hp - 440] = lvl147_s3GjN_info;
           P64[Hp - 424] = _s3GiR::P64;
           I64[Hp - 416] = lvl148_s3GjO_info;
           P64[Hp - 400] = _s3GiR::P64;
           I64[Hp - 392] = lvl149_s3GjP_info;
           P64[Hp - 376] = _s3GiR::P64;
           I64[Hp - 368] = lvl150_s3GjQ_info;
           P64[Hp - 352] = _s3GiR::P64;
           I64[Hp - 344] = $wlvl1_s3GjR_info;
           P64[Hp - 336] = _s3GiS::P64;
           P64[Hp - 328] = _s3GiT::P64;
           P64[Hp - 320] = _s3GiU::P64;
           P64[Hp - 312] = _s3GiV::P64;
           P64[Hp - 304] = _s3GiW::P64;
           P64[Hp - 296] = _s3GiX::P64;
           P64[Hp - 288] = _s3GiY::P64;
           P64[Hp - 280] = Hp - 944;
           P64[Hp - 272] = Hp - 920;
           P64[Hp - 264] = Hp - 896;
           P64[Hp - 256] = Hp - 872;
           P64[Hp - 248] = Hp - 848;
           P64[Hp - 240] = Hp - 824;
           P64[Hp - 232] = Hp - 800;
           P64[Hp - 224] = Hp - 776;
           P64[Hp - 216] = Hp - 752;
           P64[Hp - 208] = Hp - 728;
           P64[Hp - 200] = Hp - 704;
           P64[Hp - 192] = Hp - 680;
           P64[Hp - 184] = Hp - 656;
           P64[Hp - 176] = Hp - 632;
           P64[Hp - 168] = Hp - 608;
           P64[Hp - 160] = Hp - 584;
           P64[Hp - 152] = Hp - 560;
           P64[Hp - 144] = Hp - 536;
           P64[Hp - 136] = Hp - 512;
           P64[Hp - 128] = Hp - 488;
           P64[Hp - 120] = Hp - 464;
           P64[Hp - 112] = Hp - 440;
           P64[Hp - 104] = Hp - 416;
           P64[Hp - 96] = Hp - 392;
           P64[Hp - 88] = Hp - 368;
           I64[Hp - 80] = lvl151_s3GjU_info;
           P64[Hp - 72] = Hp - 343;
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 56] = Hp - 79;
           I64[Hp - 48] = sat_s3Gk8_info;
           P64[Hp - 32] = _s3GiR::P64;
           I64[Hp - 24] = sat_s3Gk3_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3J6n_srtd" {
     u3J6n_srtd:
         const S3GvX_srt+232;
         const 125;
         const 18031990695526401;
         const 2233785415175766016;
 },
 sat_s3Gka_entry() //  [R1]
         { info_tbl: [(c3J5s,
                       label: sat_s3Gka_info
                       rep:HeapRep 8 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J5s: // global
           _s3Gka::P64 = R1;
           if ((Sp + -88) < SpLim) (likely: False) goto c3J5t; else goto c3J5u;
       c3J5u: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3J5w; else goto c3J5v;
       c3J5w: // global
           HpAlloc = 16;
           goto c3J5t;
       c3J5t: // global
           R1 = _s3Gka::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3J5v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gka::P64;
           _s3GiR::P64 = P64[_s3Gka::P64 + 16];
           _s3GiS::P64 = P64[_s3Gka::P64 + 24];
           _s3GiT::P64 = P64[_s3Gka::P64 + 32];
           _s3GiU::P64 = P64[_s3Gka::P64 + 40];
           _s3GiV::P64 = P64[_s3Gka::P64 + 48];
           _s3GiW::P64 = P64[_s3Gka::P64 + 56];
           _s3GiX::P64 = P64[_s3Gka::P64 + 64];
           _s3GiY::P64 = P64[_s3Gka::P64 + 72];
           I64[Hp - 8] = sat_s3Gjo_info;
           P64[Hp] = _s3GiR::P64;
           I64[Sp - 88] = block_c3J0O_info;
           R4 = Hp - 7;
           R3 = lvl113_r3yd3_closure+1;
           R2 = lvl112_r3yd2_closure+1;
           P64[Sp - 80] = _s3GiR::P64;
           P64[Sp - 72] = _s3GiS::P64;
           P64[Sp - 64] = _s3GiT::P64;
           P64[Sp - 56] = _s3GiU::P64;
           P64[Sp - 48] = _s3GiV::P64;
           P64[Sp - 40] = _s3GiW::P64;
           P64[Sp - 32] = _s3GiX::P64;
           P64[Sp - 24] = _s3GiY::P64;
           Sp = Sp - 88;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3J0O() //  [R1]
         { info_tbl: [(c3J0O,
                       label: block_c3J0O_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J0O: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3J5z; else goto c3J5y;
       c3J5z: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3J5y: // global
           I64[Hp - 88] = sat_s3Gk9_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 88;
           R2 = Hp - 6;
           Sp = Sp + 72;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gj6_entry() //  [R1, R2]
         { info_tbl: [(c3J5I,
                       label: sat_s3Gj6_info
                       rep:HeapRep 10 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J5I: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3J5J; else goto c3J5K;
       c3J5J: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J5K: // global
           I64[Sp - 88] = block_c3J5F_info;
           _s3GiS::P64 = P64[R1 + 7];
           _s3GiT::P64 = P64[R1 + 15];
           _s3GiU::P64 = P64[R1 + 23];
           _s3GiV::P64 = P64[R1 + 31];
           _s3GiW::P64 = P64[R1 + 39];
           _s3GiX::P64 = P64[R1 + 47];
           _s3GiY::P64 = P64[R1 + 55];
           _s3GiZ::P64 = P64[R1 + 63];
           _s3Gj0::P64 = P64[R1 + 71];
           _s3Gj1::P64 = P64[R1 + 79];
           R1 = R2;
           P64[Sp - 80] = _s3GiS::P64;
           P64[Sp - 72] = _s3GiT::P64;
           P64[Sp - 64] = _s3GiU::P64;
           P64[Sp - 56] = _s3GiV::P64;
           P64[Sp - 48] = _s3GiW::P64;
           P64[Sp - 40] = _s3GiX::P64;
           P64[Sp - 32] = _s3GiY::P64;
           P64[Sp - 24] = _s3GiZ::P64;
           P64[Sp - 16] = _s3Gj0::P64;
           P64[Sp - 8] = _s3Gj1::P64;
           Sp = Sp - 88;
           if (R1 & 7 != 0) goto u3J6e; else goto c3J5G;
       u3J6e: // global
           call _c3J5F(R1) args: 0, res: 0, upd: 0;
       c3J5G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3J5F() //  [R1]
         { info_tbl: [(c3J5F,
                       label: block_c3J5F_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J5F: // global
           _s3Gj5::I64 = I64[R1 + 7];
           if (_s3Gj5::I64 < 99) goto u3J61; else goto u3J67;
       u3J61: // global
           if (_s3Gj5::I64 < 97) goto u3J62; else goto u3J66;
       u3J62: // global
           if (_s3Gj5::I64 < 40) goto u3J63; else goto u3J65;
       u3J63: // global
           if (_s3Gj5::I64 < 39) goto u3J64; else goto c3J5S;
       u3J64: // global
           if (_s3Gj5::I64 != 34) goto c3J5Q; else goto c3J5R;
       c3J5R: // global
           R1 = P64[Sp + 80] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J5S: // global
           R1 = P64[Sp + 72] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3J65: // global
           if (_s3Gj5::I64 != 92) goto c3J5Q; else goto c3J5T;
       c3J5T: // global
           R1 = P64[Sp + 64] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3J66: // global
           if (_s3Gj5::I64 < 98) goto c3J5U; else goto c3J5V;
       c3J5U: // global
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J5V: // global
           R1 = P64[Sp + 48] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3J67: // global
           if (_s3Gj5::I64 < 116) goto u3J68; else goto u3J6c;
       u3J68: // global
           if (_s3Gj5::I64 < 111) goto u3J69; else goto u3J6b;
       u3J69: // global
           if (_s3Gj5::I64 < 110) goto u3J6a; else goto c3J5X;
       u3J6a: // global
           if (_s3Gj5::I64 != 102) goto c3J5Q; else goto c3J5W;
       c3J5W: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3J5X: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3J6b: // global
           if (_s3Gj5::I64 != 114) goto c3J5Q; else goto c3J5Y;
       c3J5Y: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3J6c: // global
           if (_s3Gj5::I64 < 117) goto c3J5Z; else goto u3J6d;
       c3J5Z: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3J6d: // global
           if (_s3Gj5::I64 != 118) goto c3J5Q; else goto c3J60;
       c3J5Q: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3J60: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 88;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3J6o_srtd" {
     u3J6o_srtd:
         const S3GvX_srt+232;
         const 126;
         const 18031990695526401;
         const 4539628424389459968;
 },
 Text.Read.Lex.lexChar2_entry() //  [R2]
         { info_tbl: [(c3J6g,
                       label: Text.Read.Lex.lexChar2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3J6g: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto c3J6k; else goto c3J6j;
       c3J6k: // global
           HpAlloc = 424;
           R2 = R2;
           R1 = Text.Read.Lex.lexChar2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3J6j: // global
           I64[Hp - 416] = lvl116_s3GiS_info;
           P64[Hp - 400] = R2;
           I64[Hp - 392] = lvl117_s3GiT_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = lvl118_s3GiU_info;
           P64[Hp - 352] = R2;
           I64[Hp - 344] = lvl119_s3GiV_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = lvl120_s3GiW_info;
           P64[Hp - 304] = R2;
           I64[Hp - 296] = lvl121_s3GiX_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = lvl122_s3GiY_info;
           P64[Hp - 256] = R2;
           I64[Hp - 248] = lvl123_s3GiZ_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = lvl124_s3Gj0_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = lvl125_s3Gj1_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s3Gka_info;
           P64[Hp - 160] = R2;
           _c3IYf::P64 = Hp - 416;
           P64[Hp - 152] = _c3IYf::P64;
           _c3IYm::P64 = Hp - 392;
           P64[Hp - 144] = _c3IYm::P64;
           _c3IYt::P64 = Hp - 368;
           P64[Hp - 136] = _c3IYt::P64;
           _c3IYA::P64 = Hp - 344;
           P64[Hp - 128] = _c3IYA::P64;
           _c3IYH::P64 = Hp - 320;
           P64[Hp - 120] = _c3IYH::P64;
           _c3IYO::P64 = Hp - 296;
           P64[Hp - 112] = _c3IYO::P64;
           _c3IYV::P64 = Hp - 272;
           P64[Hp - 104] = _c3IYV::P64;
           I64[Hp - 96] = sat_s3Gj6_info;
           P64[Hp - 88] = _c3IYf::P64;
           P64[Hp - 80] = _c3IYm::P64;
           P64[Hp - 72] = _c3IYt::P64;
           P64[Hp - 64] = _c3IYA::P64;
           P64[Hp - 56] = _c3IYH::P64;
           P64[Hp - 48] = _c3IYO::P64;
           P64[Hp - 40] = _c3IYV::P64;
           P64[Hp - 32] = Hp - 248;
           P64[Hp - 24] = Hp - 224;
           P64[Hp - 16] = Hp - 200;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 95;
           R3 = Hp - 176;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.363152409 UTC

[section ""cstring" . Text.Read.Lex.lexChar4_bytes" {
     Text.Read.Lex.lexChar4_bytes:
         I8[] [92,38]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.365059948 UTC

[section ""data" . Text.Read.Lex.lexChar3_closure" {
     Text.Read.Lex.lexChar3_closure:
         const Text.Read.Lex.lexChar3_info;
         const 0;
         const 0;
         const 0;
 },
 Text.Read.Lex.lexChar3_entry() //  [R1]
         { info_tbl: [(c3Jef,
                       label: Text.Read.Lex.lexChar3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jef: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jeg; else goto c3Jeh;
       c3Jeg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jeh: // global
           (_c3Jec::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Jec::I64 == 0) goto c3Jee; else goto c3Jed;
       c3Jee: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Jed: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Jec::I64;
           R2 = Text.Read.Lex.lexChar4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.370842811 UTC

[section ""data" . Text.Read.Lex.$wlvl_closure" {
     Text.Read.Lex.$wlvl_closure:
         const Text.Read.Lex.$wlvl_info;
         const 0;
 },
 lvl116_s3Gkc_entry() //  [R1]
         { info_tbl: [(c3JeB,
                       label: lvl116_s3Gkc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JeB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JeC; else goto c3JeD;
       c3JeC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JeD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Jey_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wconsumeEmpties_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Jey() //  [R1]
         { info_tbl: [(c3Jey,
                       label: block_c3Jey_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jey: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JeG; else goto c3JeF;
       c3JeG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3JeF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gkg_entry() //  [R1]
         { info_tbl: [(c3JeM,
                       label: sat_s3Gkg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JeM: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wlvl_entry() //  [R2]
         { info_tbl: [(c3JeP,
                       label: Text.Read.Lex.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JeP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3JeT; else goto c3JeS;
       c3JeT: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Text.Read.Lex.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JeS: // global
           I64[Hp - 32] = lvl116_s3Gkc_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3Gkg_info;
           P64[Hp] = Hp - 32;
           R3 = Hp - 7;
           R2 = Text.Read.Lex.lexChar3_closure;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Text.Read.Lex.$wconsumeEmpties_closure" {
     Text.Read.Lex.$wconsumeEmpties_closure:
         const Text.Read.Lex.$wconsumeEmpties_info;
         const 0;
 },
 lvl116_s3Gki_entry() //  [R1]
         { info_tbl: [(c3Jf5,
                       label: lvl116_s3Gki_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jf5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Jf6; else goto c3Jf7;
       c3Jf6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jf7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Jf2_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Jf2() //  [R1]
         { info_tbl: [(c3Jf2,
                       label: block_c3Jf2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jf2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Jfa; else goto c3Jf9;
       c3Jfa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Jf9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3Gkl_entry() //  [R1]
         { info_tbl: [(c3Jff,
                       label: lvl117_s3Gkl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jff: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jfg; else goto c3Jfh;
       c3Jfg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jfh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gkz_entry() //  [R1, R2]
         { info_tbl: [(c3Jfu,
                       label: sat_s3Gkz_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jfu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Jfv; else goto c3Jfw;
       c3Jfv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jfw: // global
           I64[Sp - 24] = block_c3Jfn_info;
           _s3Gki::P64 = P64[R1 + 7];
           _s3Gkl::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3Gki::P64;
           P64[Sp - 8] = _s3Gkl::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Jgi; else goto c3Jfo;
       u3Jgi: // global
           call _c3Jfn(R1) args: 0, res: 0, upd: 0;
       c3Jfo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Jfn() //  [R1]
         { info_tbl: [(c3Jfn,
                       label: block_c3Jfn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jfn: // global
           if (R1 & 7 == 1) goto u3Jgc; else goto c3Jfs;
       u3Jgc: // global
           Sp = Sp + 16;
           call _c3Jg9() args: 0, res: 0, upd: 0;
       c3Jfs: // global
           I64[Sp - 8] = block_c3JfC_info;
           _s3Gkp::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3Gkp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Jgg; else goto c3JfE;
       u3Jgg: // global
           call _c3JfC(R1) args: 0, res: 0, upd: 0;
       c3JfE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JfC() //  [R1]
         { info_tbl: [(c3JfC,
                       label: block_c3JfC_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JfC: // global
           if (I64[R1 + 7] == 92) goto c3JfP; else goto u3Jgd;
       c3JfP: // global
           _s3Gkp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3JfO_info;
           R1 = _s3Gkp::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Jgj; else goto c3JfQ;
       u3Jgj: // global
           call _c3JfO(R1) args: 0, res: 0, upd: 0;
       c3JfQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Jgd: // global
           Sp = Sp + 24;
           call _c3Jg9() args: 0, res: 0, upd: 0;
     }
 },
 _c3JfO() //  [R1]
         { info_tbl: [(c3JfO,
                       label: block_c3JfO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JfO: // global
           if (R1 & 7 == 1) goto u3Jge; else goto c3Jg1;
       u3Jge: // global
           Sp = Sp + 16;
           call _c3Jg9() args: 0, res: 0, upd: 0;
       c3Jg1: // global
           I64[Sp] = block_c3JfZ_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3Jgl; else goto c3Jg2;
       u3Jgl: // global
           call _c3JfZ(R1) args: 0, res: 0, upd: 0;
       c3Jg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JfZ() //  [R1]
         { info_tbl: [(c3JfZ,
                       label: block_c3JfZ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JfZ: // global
           if (I64[R1 + 7] == 38) goto c3Jga; else goto u3Jgf;
       c3Jga: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Jgf: // global
           Sp = Sp + 16;
           call _c3Jg9() args: 0, res: 0, upd: 0;
     }
 },
 _c3Jg9() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jg9: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wconsumeEmpties_entry() //  [R2]
         { info_tbl: [(c3Jgo,
                       label: Text.Read.Lex.$wconsumeEmpties_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jgo: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Jgs; else goto c3Jgr;
       c3Jgs: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Text.Read.Lex.$wconsumeEmpties_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jgr: // global
           I64[Hp - 64] = lvl116_s3Gki_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl117_s3Gkl_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3Gkz_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.399778602 UTC

[section ""data" . Text.Read.Lex.lexChar5_closure" {
     Text.Read.Lex.lexChar5_closure:
         const Text.Read.Lex.lexChar5_info;
         const 0;
 },
 Text.Read.Lex.lexChar5_entry() //  [R2]
         { info_tbl: [(c3JhW,
                       label: Text.Read.Lex.lexChar5_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JhW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3JhX; else goto c3JhY;
       c3JhX: // global
           R2 = R2;
           R1 = Text.Read.Lex.lexChar5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JhY: // global
           I64[Sp - 8] = block_c3JhT_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wconsumeEmpties_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JhT() //  [R1]
         { info_tbl: [(c3JhT,
                       label: block_c3JhT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JhT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ji1; else goto c3Ji0;
       c3Ji1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ji0: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.408348709 UTC

[section ""data" . Text.Read.Lex.$wlexChar_closure" {
     Text.Read.Lex.$wlexChar_closure:
         const Text.Read.Lex.$wlexChar_info;
         const 0;
 },
 sat_s3GkN_entry() //  [R1]
         { info_tbl: [(c3JiF,
                       label: sat_s3GkN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JiF: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl118_s3GkL_entry() //  [R1]
         { info_tbl: [(c3JiL,
                       label: lvl118_s3GkL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JiL: // global
           _s3GkL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3JiM; else goto c3JiN;
       c3JiN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JiP; else goto c3JiO;
       c3JiP: // global
           HpAlloc = 16;
           goto c3JiM;
       c3JiM: // global
           R1 = _s3GkL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JiO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GkL::P64;
           _s3GkK::P64 = P64[_s3GkL::P64 + 16];
           I64[Hp - 8] = sat_s3GkN_info;
           P64[Hp] = _s3GkK::P64;
           I64[Sp - 24] = block_c3JiI_info;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3JiI() //  [R1]
         { info_tbl: [(c3JiI,
                       label: block_c3JiI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JiI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JiS; else goto c3JiR;
       c3JiS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3JiR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gl3_entry() //  [R1, R2]
         { info_tbl: [(c3Jj5,
                       label: sat_s3Gl3_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jj5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Jj6; else goto c3Jj7;
       c3Jj6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jj7: // global
           I64[Sp - 24] = block_c3JiY_info;
           _s3GkK::P64 = P64[R1 + 7];
           _s3GkL::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3GkK::P64;
           P64[Sp - 8] = _s3GkL::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3JjT; else goto c3JiZ;
       u3JjT: // global
           call _c3JiY(R1) args: 0, res: 0, upd: 0;
       c3JiZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JiY() //  [R1]
         { info_tbl: [(c3JiY,
                       label: block_c3JiY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JiY: // global
           if (R1 & 7 == 1) goto u3JjN; else goto c3Jj3;
       u3JjN: // global
           Sp = Sp + 8;
           call _c3JjK() args: 0, res: 0, upd: 0;
       c3Jj3: // global
           I64[Sp - 8] = block_c3Jjd_info;
           _s3GkT::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3GkT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3JjR; else goto c3Jjf;
       u3JjR: // global
           call _c3Jjd(R1) args: 0, res: 0, upd: 0;
       c3Jjf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Jjd() //  [R1]
         { info_tbl: [(c3Jjd,
                       label: block_c3Jjd_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jjd: // global
           if (I64[R1 + 7] == 92) goto c3Jjq; else goto u3JjO;
       c3Jjq: // global
           _s3GkT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Jjp_info;
           R1 = _s3GkT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3JjU; else goto c3Jjr;
       u3JjU: // global
           call _c3Jjp(R1) args: 0, res: 0, upd: 0;
       c3Jjr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3JjO: // global
           Sp = Sp + 16;
           call _c3JjK() args: 0, res: 0, upd: 0;
     }
 },
 _c3Jjp() //  [R1]
         { info_tbl: [(c3Jjp,
                       label: block_c3Jjp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jjp: // global
           if (R1 & 7 == 1) goto u3JjP; else goto c3JjC;
       u3JjP: // global
           Sp = Sp + 8;
           call _c3JjK() args: 0, res: 0, upd: 0;
       c3JjC: // global
           I64[Sp] = block_c3JjA_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3JjW; else goto c3JjD;
       u3JjW: // global
           call _c3JjA(R1) args: 0, res: 0, upd: 0;
       c3JjD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JjA() //  [R1]
         { info_tbl: [(c3JjA,
                       label: block_c3JjA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JjA: // global
           if (I64[R1 + 7] == 38) goto c3JjL; else goto u3JjQ;
       c3JjL: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3JjQ: // global
           Sp = Sp + 8;
           call _c3JjK() args: 0, res: 0, upd: 0;
     }
 },
 _c3JjK() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JjK: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k_s3GkF_entry() //  [R1, R2]
         { info_tbl: [(c3JjZ,
                       label: k_s3GkF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JjZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jk1; else goto c3Jk2;
       c3Jk1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jk2: // global
           I64[Sp - 16] = block_c3Jiq_info;
           _s3GkD::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GkD::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Jk6; else goto c3Jir;
       u3Jk6: // global
           call _c3Jiq(R1) args: 0, res: 0, upd: 0;
       c3Jir: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Jiq() //  [R1]
         { info_tbl: [(c3Jiq,
                       label: block_c3Jiq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jiq: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Jk5; else goto c3Jk4;
       c3Jk5: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Jk4: // global
           _s3GkI::P64 = P64[R1 + 7];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _s3GkI::P64;
           I64[Hp - 56] = lvl118_s3GkL_info;
           _c3Jiv::P64 = Hp - 88;
           P64[Hp - 40] = _c3Jiv::P64;
           I64[Hp - 32] = sat_s3Gl3_info;
           P64[Hp - 24] = _c3Jiv::P64;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3GkE_entry() //  [R1]
         { info_tbl: [(c3Jk7,
                       label: lvl116_s3GkE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jk7: // global
           _s3GkE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jk8; else goto c3Jk9;
       c3Jk9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Jkb; else goto c3Jka;
       c3Jkb: // global
           HpAlloc = 16;
           goto c3Jk8;
       c3Jk8: // global
           R1 = _s3GkE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jka: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GkE::P64;
           _s3GkD::P64 = P64[_s3GkE::P64 + 16];
           I64[Hp - 8] = k_s3GkF_info;
           P64[Hp] = _s3GkD::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Glb_entry() //  [R1]
         { info_tbl: [(c3Jky,
                       label: sat_s3Glb_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jky: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl118_s3Gl9_entry() //  [R1]
         { info_tbl: [(c3JkE,
                       label: lvl118_s3Gl9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JkE: // global
           _s3Gl9::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3JkF; else goto c3JkG;
       c3JkG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JkI; else goto c3JkH;
       c3JkI: // global
           HpAlloc = 16;
           goto c3JkF;
       c3JkF: // global
           R1 = _s3Gl9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JkH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gl9::P64;
           _s3Gl8::P64 = P64[_s3Gl9::P64 + 16];
           I64[Hp - 8] = sat_s3Glb_info;
           P64[Hp] = _s3Gl8::P64;
           I64[Sp - 24] = block_c3JkB_info;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlvl_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3JkB() //  [R1]
         { info_tbl: [(c3JkB,
                       label: block_c3JkB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JkB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JkL; else goto c3JkK;
       c3JkL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3JkK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Glr_entry() //  [R1, R2]
         { info_tbl: [(c3JkY,
                       label: sat_s3Glr_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JkY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3JkZ; else goto c3Jl0;
       c3JkZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jl0: // global
           I64[Sp - 24] = block_c3JkR_info;
           _s3Gl8::P64 = P64[R1 + 7];
           _s3Gl9::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3Gl8::P64;
           P64[Sp - 8] = _s3Gl9::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3JlM; else goto c3JkS;
       u3JlM: // global
           call _c3JkR(R1) args: 0, res: 0, upd: 0;
       c3JkS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JkR() //  [R1]
         { info_tbl: [(c3JkR,
                       label: block_c3JkR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JkR: // global
           if (R1 & 7 == 1) goto u3JlG; else goto c3JkW;
       u3JlG: // global
           Sp = Sp + 8;
           call _c3JlD() args: 0, res: 0, upd: 0;
       c3JkW: // global
           I64[Sp - 8] = block_c3Jl6_info;
           _s3Glh::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3Glh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3JlK; else goto c3Jl8;
       u3JlK: // global
           call _c3Jl6(R1) args: 0, res: 0, upd: 0;
       c3Jl8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Jl6() //  [R1]
         { info_tbl: [(c3Jl6,
                       label: block_c3Jl6_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jl6: // global
           if (I64[R1 + 7] == 92) goto c3Jlj; else goto u3JlH;
       c3Jlj: // global
           _s3Glh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Jli_info;
           R1 = _s3Glh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3JlN; else goto c3Jlk;
       u3JlN: // global
           call _c3Jli(R1) args: 0, res: 0, upd: 0;
       c3Jlk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3JlH: // global
           Sp = Sp + 16;
           call _c3JlD() args: 0, res: 0, upd: 0;
     }
 },
 _c3Jli() //  [R1]
         { info_tbl: [(c3Jli,
                       label: block_c3Jli_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jli: // global
           if (R1 & 7 == 1) goto u3JlI; else goto c3Jlv;
       u3JlI: // global
           Sp = Sp + 8;
           call _c3JlD() args: 0, res: 0, upd: 0;
       c3Jlv: // global
           I64[Sp] = block_c3Jlt_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3JlP; else goto c3Jlw;
       u3JlP: // global
           call _c3Jlt(R1) args: 0, res: 0, upd: 0;
       c3Jlw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Jlt() //  [R1]
         { info_tbl: [(c3Jlt,
                       label: block_c3Jlt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jlt: // global
           if (I64[R1 + 7] == 38) goto c3JlE; else goto u3JlJ;
       c3JlE: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3JlJ: // global
           Sp = Sp + 8;
           call _c3JlD() args: 0, res: 0, upd: 0;
     }
 },
 _c3JlD() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JlD: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gls_entry() //  [R1, R2]
         { info_tbl: [(c3JlS,
                       label: sat_s3Gls_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JlS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JlT; else goto c3JlU;
       c3JlT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JlU: // global
           I64[Sp - 24] = block_c3Jkh_info;
           _s3GkD::P64 = P64[R1 + 7];
           _s3GkE::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3GkD::P64;
           P64[Sp - 8] = _s3GkE::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Jm2; else goto c3Jki;
       u3Jm2: // global
           call _c3Jkh(R1) args: 0, res: 0, upd: 0;
       c3Jki: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Jkh() //  [R1]
         { info_tbl: [(c3Jkh,
                       label: block_c3Jkh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jkh: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3JlX; else goto c3JlW;
       c3JlX: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JlW: // global
           if (I64[R1 + 7] == 92) goto c3Jm1; else goto c3Jm0;
       c3Jm1: // global
           Hp = Hp - 96;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Jm0: // global
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = lvl118_s3Gl9_info;
           _c3Jko::P64 = Hp - 88;
           P64[Hp - 40] = _c3Jko::P64;
           I64[Hp - 32] = sat_s3Glr_info;
           P64[Hp - 24] = _c3Jko::P64;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wlexChar_entry() //  [R2]
         { info_tbl: [(c3Jm3,
                       label: Text.Read.Lex.$wlexChar_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jm3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Jm7; else goto c3Jm6;
       c3Jm7: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Text.Read.Lex.$wlexChar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jm6: // global
           I64[Hp - 40] = lvl116_s3GkE_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3Gls_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.456016661 UTC

[section ""data" . Text.Read.Lex.lexChar1_closure" {
     Text.Read.Lex.lexChar1_closure:
         const Text.Read.Lex.lexChar1_info;
         const 0;
 },
 Text.Read.Lex.lexChar1_entry() //  [R2]
         { info_tbl: [(c3JoH,
                       label: Text.Read.Lex.lexChar1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JoH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3JoI; else goto c3JoJ;
       c3JoI: // global
           R2 = R2;
           R1 = Text.Read.Lex.lexChar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JoJ: // global
           I64[Sp - 8] = block_c3JoE_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wlexChar_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JoE() //  [R1]
         { info_tbl: [(c3JoE,
                       label: block_c3JoE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JoE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JoM; else goto c3JoL;
       c3JoM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JoL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.461722088 UTC

[section ""data" . Text.Read.Lex.lexChar_closure" {
     Text.Read.Lex.lexChar_closure:
         const Text.Read.Lex.lexChar_info;
         const 0;
 },
 Text.Read.Lex.lexChar_entry() //  [R2]
         { info_tbl: [(c3Jp2,
                       label: Text.Read.Lex.lexChar_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jp2: // global
           R2 = R2;
           call Text.Read.Lex.lexChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.467222567 UTC

[section ""data" . lexStrItem_r3yd4_closure" {
     lexStrItem_r3yd4_closure:
         const lexStrItem_r3yd4_info;
         const 0;
 },
 lvl116_s3Glx_entry() //  [R1]
         { info_tbl: [(c3Jph,
                       label: lvl116_s3Glx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jph: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jpi; else goto c3Jpj;
       c3Jpi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jpj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call lexStrItem_r3yd4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 lvl117_s3Gly_entry() //  [R1, R2]
         { info_tbl: [(c3Jps,
                       label: lvl117_s3Gly_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jps: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jpt; else goto c3Jpu;
       c3Jpt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jpu: // global
           I64[Sp - 16] = block_c3Jpp_info;
           _s3Glx::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Glx::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JpC; else goto c3Jpq;
       u3JpC: // global
           call _c3Jpp(R1) args: 0, res: 0, upd: 0;
       c3Jpq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Jpp() //  [R1]
         { info_tbl: [(c3Jpp,
                       label: block_c3Jpp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jpp: // global
           if (I64[R1 + 7] == 92) goto c3JpB; else goto c3JpA;
       c3JpB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JpA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k1_s3GlE_entry() //  [R1]
         { info_tbl: [(c3JpJ,
                       label: k1_s3GlE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JpJ: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl119_s3GlG_entry() //  [R1, R2]
         { info_tbl: [(c3JpR,
                       label: lvl119_s3GlG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JpR: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl1_s3GlI_entry() //  [R1, R2]
         { info_tbl: [(c3Jq3,
                       label: $wlvl1_s3GlI_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jq3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Jq7; else goto c3Jq6;
       c3Jq7: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jq6: // global
           if (R2 == 38) goto c3Jq2; else goto c3Jq1;
       c3Jq2: // global
           _s3Glx::P64 = P64[R1 + 7];
           Hp = Hp - 16;
           R1 = _s3Glx::P64 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Jq1: // global
           _s3GlG::P64 = P64[R1 + 15];
           if (R2 > 887) goto c3Jqu; else goto c3JqV;
       c3Jqu: // global
           (_s3GlS::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(R2);
           if (_s3GlS::I64 == 0) goto c3JqG; else goto c3Jqr;
       c3Jqr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3GlG::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JqV: // global
           if (R2 == 32) goto c3JqU; else goto c3JqR;
       c3JqU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3GlG::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JqR: // global
           if ((R2 + -9) > 4) goto c3JqM; else goto c3JqP;
       c3JqM: // global
           if (R2 != 160) goto c3JqG; else goto c3JqK;
       c3JqG: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JqK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3GlG::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JqP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = _s3GlG::P64;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl120_s3GlY_entry() //  [R1, R2]
         { info_tbl: [(c3Jr4,
                       label: lvl120_s3GlY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jr4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jr5; else goto c3Jr6;
       c3Jr5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jr6: // global
           I64[Sp - 16] = block_c3Jr1_info;
           _s3GlI::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GlI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Jra; else goto c3Jr2;
       u3Jra: // global
           call _c3Jr1(R1) args: 0, res: 0, upd: 0;
       c3Jr2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Jr1() //  [R1]
         { info_tbl: [(c3Jr1,
                       label: block_c3Jr1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jr1: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wlvl1_s3GlI_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl122_s3Gm3_entry() //  [R1]
         { info_tbl: [(c3Jrg,
                       label: lvl122_s3Gm3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jrg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jrh; else goto c3Jri;
       c3Jrh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jri: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gmf_entry() //  [R1, R2]
         { info_tbl: [(c3Jrr,
                       label: sat_s3Gmf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jrr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Jrs; else goto c3Jrt;
       c3Jrs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jrt: // global
           I64[Sp - 24] = block_c3Jro_info;
           _s3Glw::P64 = P64[R1 + 7];
           _s3Gm3::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3Glw::P64;
           P64[Sp - 8] = _s3Gm3::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3JrF; else goto c3Jrp;
       u3JrF: // global
           call _c3Jro(R1) args: 0, res: 0, upd: 0;
       c3Jrp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Jro() //  [R1]
         { info_tbl: [(c3Jro,
                       label: block_c3Jro_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jro: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Jry; else goto c3Jrx;
       c3Jry: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Jrx: // global
           if (I64[R1 + 7] == 92) goto c3JrE; else goto c3JrD;
       c3JrE: // global
           Hp = Hp - 24;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JrD: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = Hp - 15;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gm8_entry() //  [R1, R2]
         { info_tbl: [(c3JrP,
                       label: sat_s3Gm8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JrP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JrQ; else goto c3JrR;
       c3JrQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JrR: // global
           I64[Sp - 16] = block_c3JrM_info;
           _s3Gm2::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gm2::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JrZ; else goto c3JrN;
       u3JrZ: // global
           call _c3JrM(R1) args: 0, res: 0, upd: 0;
       c3JrN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JrM() //  [R1]
         { info_tbl: [(c3JrM,
                       label: block_c3JrM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JrM: // global
           if (I64[R1 + 7] == 92) goto c3JrY; else goto c3JrX;
       c3JrY: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JrX: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lexStrItem_r3yd4_entry() //  [R2]
         { info_tbl: [(c3Js1,
                       label: lexStrItem_r3yd4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Js1: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto c3Js5; else goto c3Js4;
       c3Js5: // global
           HpAlloc = 240;
           R2 = R2;
           R1 = lexStrItem_r3yd4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Js4: // global
           I64[Hp - 232] = lvl116_s3Glx_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = lvl117_s3Gly_info;
           _c3Jpd::P64 = Hp - 232;
           P64[Hp - 200] = _c3Jpd::P64;
           I64[Hp - 192] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 184] = Hp - 207;
           I64[Hp - 176] = k1_s3GlE_info;
           P64[Hp - 168] = Hp - 191;
           I64[Hp - 160] = lvl119_s3GlG_info;
           P64[Hp - 152] = Hp - 175;
           I64[Hp - 144] = $wlvl1_s3GlI_info;
           P64[Hp - 136] = _c3Jpd::P64;
           P64[Hp - 128] = Hp - 159;
           I64[Hp - 120] = lvl120_s3GlY_info;
           P64[Hp - 112] = Hp - 143;
           I64[Hp - 104] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 96] = Hp - 119;
           I64[Hp - 88] = lvl122_s3Gm3_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s3Gmf_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = sat_s3Gm8_info;
           P64[Hp - 16] = Hp - 103;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 39;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.502394885 UTC

[section ""data" . body_r3yd5_closure" {
     body_r3yd5_closure:
         const body_r3yd5_info;
         const 0;
 },
 sat_s3Gmk_entry() //  [R1]
         { info_tbl: [(c3Ju2,
                       label: sat_s3Gmk_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ju2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ju3; else goto c3Ju4;
       c3Ju3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ju4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl116_s3Gmj_entry() //  [R1]
         { info_tbl: [(c3Ju6,
                       label: lvl116_s3Gmj_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Ju6: // global
           _s3Gmj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ju7; else goto c3Ju8;
       c3Ju8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Jua; else goto c3Ju9;
       c3Jua: // global
           HpAlloc = 40;
           goto c3Ju7;
       c3Ju7: // global
           R1 = _s3Gmj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ju9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gmj::P64;
           _s3Gmh::P64 = P64[_s3Gmj::P64 + 16];
           _s3Gmi::P64 = P64[_s3Gmj::P64 + 24];
           I64[Hp - 32] = sat_s3Gmk_info;
           P64[Hp - 16] = _s3Gmh::P64;
           I64[Hp - 8] = Text.Read.Lex.String_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           R1 = _s3Gmi::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gmv_entry() //  [R1, R2]
         { info_tbl: [(c3JuB,
                       label: sat_s3Gmv_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JuB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JuF; else goto c3JuE;
       c3JuF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JuE: // global
           _s3Gmh::P64 = P64[R1 + 7];
           _s3Gmq::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3Gmq::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3Gmh::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gmy_entry() //  [R1, R2]
         { info_tbl: [(c3JuG,
                       label: sat_s3Gmy_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JuG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3JuH; else goto c3JuI;
       c3JuH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JuI: // global
           I64[Sp - 32] = block_c3Jug_info;
           _s3Gmh::P64 = P64[R1 + 7];
           _s3Gmi::P64 = P64[R1 + 15];
           _s3Gmj::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3Gmh::P64;
           P64[Sp - 16] = _s3Gmi::P64;
           P64[Sp - 8] = _s3Gmj::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3Jvc; else goto c3Juh;
       u3Jvc: // global
           call _c3Jug(R1) args: 0, res: 0, upd: 0;
       c3Juh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Jug() //  [R1]
         { info_tbl: [(c3Jug,
                       label: block_c3Jug_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jug: // global
           I64[Sp - 8] = block_c3Jul_info;
           _s3Gmp::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3Gmp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Jv9; else goto c3Jum;
       u3Jv9: // global
           call _c3Jul(R1) args: 0, res: 0, upd: 0;
       c3Jum: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Jul() //  [R1]
         { info_tbl: [(c3Jul,
                       label: block_c3Jul_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jul: // global
           if (I64[R1 + 7] == 34) goto c3JuU; else goto u3Jv7;
       c3JuU: // global
           I64[Sp] = block_c3JuT_info;
           _s3Gmq::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3Gmq::P64;
           if (R1 & 7 != 0) goto u3Jva; else goto c3JuV;
       u3Jva: // global
           call _c3JuT(R1) args: 0, res: 0, upd: 0;
       c3JuV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Jv7: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3Jut() args: 0, res: 0, upd: 0;
     }
 },
 _c3JuT() //  [R1]
         { info_tbl: [(c3JuT,
                       label: block_c3JuT_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JuT: // global
           if (R1 & 7 == 1) goto c3Jv1; else goto u3Jv8;
       c3Jv1: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Jv8: // global
           P64[Sp + 32] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c3Jut() args: 0, res: 0, upd: 0;
     }
 },
 _c3Jut() //  []
         { info_tbl: [(c3Jut,
                       label: block_c3Jut_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jut: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JuN; else goto c3JuM;
       c3JuN: // global
           HpAlloc = 24;
           I64[Sp] = block_c3Jut_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3JuM: // global
           I64[Hp - 16] = sat_s3Gmv_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = Hp - 15;
           Sp = Sp + 32;
           call body_r3yd5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 body_r3yd5_entry() //  [R2, R3]
         { info_tbl: [(c3Jve,
                       label: body_r3yd5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jve: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Jvi; else goto c3Jvh;
       c3Jvi: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = body_r3yd5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Jvh: // global
           I64[Hp - 56] = lvl116_s3Gmj_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3Gmy_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R2 = Hp - 23;
           call lexStrItem_r3yd4_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.525978998 UTC

[section ""data" . lexExp_r3yd6_closure" {
     lexExp_r3yd6_closure:
         const lexExp_r3yd6_info;
         const 0;
 },
 sat_s3GmI_entry() //  [R1]
         { info_tbl: [(c3JwC,
                       label: sat_s3GmI_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JwC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3JwD; else goto c3JwE;
       c3JwD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JwE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3Jwz_info;
           _s3GmD::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3GmD::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3JwT; else goto c3JwA;
       u3JwT: // global
           call _c3Jwz(R1) args: 0, res: 0, upd: 0;
       c3JwA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3Jwz() //  [R1]
         { info_tbl: [(c3Jwz,
                       label: block_c3Jwz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jwz: // global
           _s3GmD::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 45) goto c3JwO; else goto c3JwK;
       c3JwO: // global
           I64[Sp + 8] = block_c3JwN_info;
           R3 = _s3GmD::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 8;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 24;
       c3JwK: // global
           R3 = _s3GmD::P64;
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp + 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 _c3JwN() //  [R1]
         { info_tbl: [(c3JwN,
                       label: block_c3JwN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JwN: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GmK_entry() //  [R1, R2]
         { info_tbl: [(c3JwV,
                       label: sat_s3GmK_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JwV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3JwZ; else goto c3JwY;
       c3JwZ: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JwY: // global
           _s3Gmz::P64 = P64[R1 + 7];
           _s3GmC::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3GmI_info;
           P64[Hp - 24] = _s3GmC::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 6;
           R1 = _s3Gmz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Jzf_srtd" {
     u3Jzf_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 k1_s3GmB_entry() //  [R1, R2]
         { info_tbl: [(c3Jx3,
                       label: k1_s3GmB_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jx3: // global
           _s3GmC::P64 = R2;
           _s3GmB::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Jx4; else goto c3Jx5;
       c3Jx5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Jx7; else goto c3Jx6;
       c3Jx7: // global
           HpAlloc = 24;
           goto c3Jx4;
       c3Jx4: // global
           R2 = _s3GmC::P64;
           R1 = _s3GmB::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jx6: // global
           _s3Gmz::P64 = P64[_s3GmB::P64 + 7];
           I64[Hp - 16] = sat_s3GmK_info;
           P64[Hp - 8] = _s3Gmz::P64;
           P64[Hp] = _s3GmC::P64;
           I64[Sp - 8] = block_c3Jx0_info;
           R3 = Hp - 15;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 8;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3Jx0() //  [R1]
         { info_tbl: [(c3Jx0,
                       label: block_c3Jx0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jx0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Jxa; else goto c3Jx9;
       c3Jxa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Jx9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gn1_entry() //  [R1]
         { info_tbl: [(c3Jxo,
                       label: sat_s3Gn1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jxo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jxp; else goto c3Jxq;
       c3Jxp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jxq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Text.Read.Lex.numberToFixed1_closure;
           Sp = Sp - 16;
           call Text.Read.Lex.valInteger_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gn3_entry() //  [R1, R2]
         { info_tbl: [(c3Jxs,
                       label: sat_s3Gn3_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jxs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Jxw; else goto c3Jxv;
       c3Jxw: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jxv: // global
           _s3Gmz::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_s3Gn1_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           R1 = _s3Gmz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Jzg_srtd" {
     u3Jzg_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3Gn6_entry() //  [R1]
         { info_tbl: [(c3JxA,
                       label: sat_s3Gn6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JxA: // global
           _s3Gn6::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3JxB; else goto c3JxC;
       c3JxC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JxE; else goto c3JxD;
       c3JxE: // global
           HpAlloc = 16;
           goto c3JxB;
       c3JxB: // global
           R1 = _s3Gn6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JxD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gn6::P64;
           _s3Gmz::P64 = P64[_s3Gn6::P64 + 16];
           I64[Hp - 8] = sat_s3Gn3_info;
           P64[Hp] = _s3Gmz::P64;
           I64[Sp - 24] = block_c3Jxx_info;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           Sp = Sp - 24;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Jxx() //  [R1]
         { info_tbl: [(c3Jxx,
                       label: block_c3Jxx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jxx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JxH; else goto c3JxG;
       c3JxH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3JxG: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3Jzh_srtd" {
     u3Jzh_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3GmX_entry() //  [R1, R2]
         { info_tbl: [(c3JxQ,
                       label: sat_s3GmX_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JxQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JxR; else goto c3JxS;
       c3JxR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JxS: // global
           I64[Sp - 16] = block_c3JxN_info;
           _s3GmB::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GmB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Jy0; else goto c3JxO;
       u3Jy0: // global
           call _c3JxN(R1) args: 0, res: 0, upd: 0;
       c3JxO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3Jzi_srtd" {
     u3Jzi_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 _c3JxN() //  [R1]
         { info_tbl: [(c3JxN,
                       label: block_c3JxN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JxN: // global
           if (I64[R1 + 7] == 43) goto c3JxZ; else goto c3JxY;
       c3JxZ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call k1_s3GmB_entry(R2, R1) args: 8, res: 0, upd: 8;
       c3JxY: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Jzj_srtd" {
     u3Jzj_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 sat_s3GmR_entry() //  [R1, R2]
         { info_tbl: [(c3Jya,
                       label: sat_s3GmR_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jya: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Jyb; else goto c3Jyc;
       c3Jyb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jyc: // global
           I64[Sp - 16] = block_c3Jy7_info;
           _s3GmB::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GmB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Jyk; else goto c3Jy8;
       u3Jyk: // global
           call _c3Jy7(R1) args: 0, res: 0, upd: 0;
       c3Jy8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3Jzk_srtd" {
     u3Jzk_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201326592;
 },
 _c3Jy7() //  [R1]
         { info_tbl: [(c3Jy7,
                       label: block_c3Jy7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jy7: // global
           if (I64[R1 + 7] == 45) goto c3Jyj; else goto c3Jyi;
       c3Jyj: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call k1_s3GmB_entry(R2, R1) args: 8, res: 0, upd: 8;
       c3Jyi: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Jzl_srtd" {
     u3Jzl_srtd:
         const S3GvX_srt+584;
         const 92;
         const 1;
         const 201392128;
 },
 lvl116_s3GmA_entry() //  [R1]
         { info_tbl: [(c3Jyo,
                       label: lvl116_s3GmA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jyo: // global
           _s3GmA::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Jyp; else goto c3Jyq;
       c3Jyq: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3Jys; else goto c3Jyr;
       c3Jys: // global
           HpAlloc = 104;
           goto c3Jyp;
       c3Jyp: // global
           R1 = _s3GmA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Jyr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GmA::P64;
           _s3Gmz::P64 = P64[_s3GmA::P64 + 16];
           I64[Hp - 96] = k1_s3GmB_info;
           P64[Hp - 88] = _s3Gmz::P64;
           I64[Hp - 80] = sat_s3Gn6_info;
           P64[Hp - 64] = _s3Gmz::P64;
           I64[Hp - 56] = sat_s3GmX_info;
           _c3Jwl::P64 = Hp - 95;
           P64[Hp - 48] = _c3Jwl::P64;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = sat_s3GmR_info;
           P64[Hp - 16] = _c3Jwl::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 32] = block_c3Jym_info;
           R3 = Hp - 39;
           R2 = Hp - 7;
           P64[Sp - 24] = Hp - 80;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3Jym() //  [R1]
         { info_tbl: [(c3Jym,
                       label: block_c3Jym_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jym: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gnh_entry() //  [R1, R2]
         { info_tbl: [(c3JyE,
                       label: sat_s3Gnh_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JyE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JyF; else goto c3JyG;
       c3JyF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JyG: // global
           I64[Sp - 16] = block_c3JyB_info;
           _s3GmA::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GmA::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JyO; else goto c3JyC;
       u3JyO: // global
           call _c3JyB(R1) args: 0, res: 0, upd: 0;
       c3JyC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JyB() //  [R1]
         { info_tbl: [(c3JyB,
                       label: block_c3JyB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JyB: // global
           if (I64[R1 + 7] == 69) goto c3JyN; else goto c3JyM;
       c3JyN: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JyM: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gnb_entry() //  [R1, R2]
         { info_tbl: [(c3JyY,
                       label: sat_s3Gnb_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JyY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JyZ; else goto c3Jz0;
       c3JyZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jz0: // global
           I64[Sp - 16] = block_c3JyV_info;
           _s3GmA::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GmA::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Jz8; else goto c3JyW;
       u3Jz8: // global
           call _c3JyV(R1) args: 0, res: 0, upd: 0;
       c3JyW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JyV() //  [R1]
         { info_tbl: [(c3JyV,
                       label: block_c3JyV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JyV: // global
           if (I64[R1 + 7] == 101) goto c3Jz7; else goto c3Jz6;
       c3Jz7: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Jz6: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3Jzm_srtd" {
     u3Jzm_srtd:
         const S3GvX_srt+584;
         const 93;
         const 1;
         const 469827584;
 },
 lexExp_r3yd6_entry() //  [R2]
         { info_tbl: [(c3Jza,
                       label: lexExp_r3yd6_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3Jza: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3Jze; else goto c3Jzd;
       c3Jze: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = lexExp_r3yd6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Jzd: // global
           I64[Hp - 80] = lvl116_s3GmA_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s3Gnh_info;
           _c3Jwh::P64 = Hp - 80;
           P64[Hp - 48] = _c3Jwh::P64;
           I64[Hp - 40] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = sat_s3Gnb_info;
           P64[Hp - 16] = _c3Jwh::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 39;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.577970953 UTC

[section ""data" . lvl114_r3yd7_closure" {
     lvl114_r3yd7_closure:
         const lvl114_r3yd7_info;
 },
 lvl114_r3yd7_entry() //  [R2]
         { info_tbl: [(c3JBG,
                       label: lvl114_r3yd7_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JBG: // global
           _s3Gnj::P64 = R2;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _s3Gnj::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.581777713 UTC

[section ""data" . lvl115_r3yd8_closure" {
     lvl115_r3yd8_closure:
         const lvl115_r3yd8_info;
 },
 lvl115_r3yd8_entry() //  [R2]
         { info_tbl: [(c3JBS,
                       label: lvl115_r3yd8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JBS: // global
           _s3Gnk::P64 = R2;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _s3Gnk::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.586041207 UTC

[section ""data" . $wlexDecNumber_r3yd9_closure" {
     $wlexDecNumber_r3yd9_closure:
         const $wlexDecNumber_r3yd9_info;
         const 0;
 },
 sat_s3Gnr_entry() //  [R1, R2]
         { info_tbl: [(c3JCl,
                       label: sat_s3Gnr_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JCl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3JCp; else goto c3JCo;
       c3JCp: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JCo: // global
           _s3Gnl::P64 = P64[R1 + 7];
           _s3Gnm::P64 = P64[R1 + 15];
           _s3Gnn::P64 = P64[R1 + 23];
           I64[Hp - 40] = Text.Read.Lex.MkDecimal_con_info;
           P64[Hp - 32] = _s3Gnm::P64;
           P64[Hp - 24] = _s3Gnn::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = Hp - 38;
           R2 = Hp - 2;
           R1 = _s3Gnl::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3JCR_srtd" {
     u3JCR_srtd:
         const S3GvX_srt+664;
         const 83;
         const 1;
         const 262144;
 },
 sat_s3Gnu_entry() //  [R1, R2]
         { info_tbl: [(c3JCt,
                       label: sat_s3Gnu_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JCt: // global
           _s3Gnn::P64 = R2;
           _s3Gnu::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3JCu; else goto c3JCv;
       c3JCv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3JCx; else goto c3JCw;
       c3JCx: // global
           HpAlloc = 32;
           goto c3JCu;
       c3JCu: // global
           R2 = _s3Gnn::P64;
           R1 = _s3Gnu::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JCw: // global
           _s3Gnl::P64 = P64[_s3Gnu::P64 + 7];
           _s3Gnm::P64 = P64[_s3Gnu::P64 + 15];
           I64[Hp - 24] = sat_s3Gnr_info;
           P64[Hp - 16] = _s3Gnl::P64;
           P64[Hp - 8] = _s3Gnm::P64;
           P64[Hp] = _s3Gnn::P64;
           I64[Sp - 8] = block_c3JCq_info;
           R4 = Hp - 23;
           R3 = lvl115_r3yd8_closure+1;
           R2 = lexExp_r3yd6_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JCq() //  [R1]
         { info_tbl: [(c3JCq,
                       label: block_c3JCq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JCq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JCA; else goto c3JCz;
       c3JCA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JCz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3JCS_srtd" {
     u3JCS_srtd:
         const S3GvX_srt+616;
         const 89;
         const 65;
         const 16777216;
 },
 sat_s3Gnx_entry() //  [R1, R2]
         { info_tbl: [(c3JCE,
                       label: sat_s3Gnx_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JCE: // global
           _s3Gnm::P64 = R2;
           _s3Gnx::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3JCF; else goto c3JCG;
       c3JCG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JCI; else goto c3JCH;
       c3JCI: // global
           HpAlloc = 24;
           goto c3JCF;
       c3JCF: // global
           R2 = _s3Gnm::P64;
           R1 = _s3Gnx::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JCH: // global
           _s3Gnl::P64 = P64[_s3Gnx::P64 + 7];
           I64[Hp - 16] = sat_s3Gnu_info;
           P64[Hp - 8] = _s3Gnl::P64;
           P64[Hp] = _s3Gnm::P64;
           I64[Sp - 8] = block_c3JCB_info;
           R4 = Hp - 15;
           R3 = lvl114_r3yd7_closure+1;
           R2 = lexFrac_r3y9E_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JCB() //  [R1]
         { info_tbl: [(c3JCB,
                       label: block_c3JCB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JCB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JCL; else goto c3JCK;
       c3JCL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JCK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3JCT_srtd" {
     u3JCT_srtd:
         const S3GvX_srt+584;
         const 94;
         const 1041;
         const 805306368;
 },
 $wlexDecNumber_r3yd9_entry() //  [R2]
         { info_tbl: [(c3JCM,
                       label: $wlexDecNumber_r3yd9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JCM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JCQ; else goto c3JCP;
       c3JCQ: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = $wlexDecNumber_r3yd9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JCP: // global
           I64[Hp - 8] = sat_s3Gnx_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = lvl6_r3y9C_closure+1;
           call $wlexDigits_r3y9x_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.603303095 UTC

[section ""data" . lexDecNumber_r3yda_closure" {
     lexDecNumber_r3yda_closure:
         const lexDecNumber_r3yda_info;
         const 0;
 },
 lexDecNumber_r3yda_entry() //  [R2]
         { info_tbl: [(c3JDB,
                       label: lexDecNumber_r3yda_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JDB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3JDC; else goto c3JDD;
       c3JDC: // global
           R2 = R2;
           R1 = lexDecNumber_r3yda_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JDD: // global
           I64[Sp - 8] = block_c3JDy_info;
           R2 = R2;
           Sp = Sp - 8;
           call $wlexDecNumber_r3yd9_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JDy() //  [R1]
         { info_tbl: [(c3JDy,
                       label: block_c3JDy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JDy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JDG; else goto c3JDF;
       c3JDG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JDF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.61498716 UTC

[section ""data" . Text.Read.Lex.expect2_closure" {
     Text.Read.Lex.expect2_closure:
         const Text.Read.Lex.expect2_info;
         const 0;
 },
 lvl116_s3GnF_entry() //  [R1]
         { info_tbl: [(c3JE6,
                       label: lvl116_s3GnF_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JE6: // global
           _s3GnF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JE7; else goto c3JE8;
       c3JE8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JEa; else goto c3JE9;
       c3JEa: // global
           HpAlloc = 16;
           goto c3JE7;
       c3JE7: // global
           R1 = _s3GnF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JE9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GnF::P64;
           _s3GnB::P64 = P64[_s3GnF::P64 + 16];
           _s3GnD::P64 = P64[_s3GnF::P64 + 24];
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = _s3GnD::P64;
           R2 = Hp - 7;
           R1 = _s3GnB::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GnP_entry() //  [R1, R2]
         { info_tbl: [(c3JEv,
                       label: sat_s3GnP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JEv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JEw; else goto c3JEx;
       c3JEw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JEx: // global
           I64[Sp - 16] = block_c3JEs_info;
           _s3GnF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GnF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JEF; else goto c3JEt;
       u3JEF: // global
           call _c3JEs(R1) args: 0, res: 0, upd: 0;
       c3JEt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JEs() //  [R1]
         { info_tbl: [(c3JEs,
                       label: block_c3JEs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JEs: // global
           if (I64[R1 + 7] == 39) goto c3JEE; else goto c3JED;
       c3JEE: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JED: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3GnU_entry() //  [R1, R2]
         { info_tbl: [(c3JEQ,
                       label: sat_s3GnU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JEQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JER; else goto c3JES;
       c3JER: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JES: // global
           I64[Sp - 16] = block_c3JEN_info;
           _s3GnF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GnF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JF0; else goto c3JEO;
       u3JF0: // global
           call _c3JEN(R1) args: 0, res: 0, upd: 0;
       c3JEO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JEN() //  [R1]
         { info_tbl: [(c3JEN,
                       label: block_c3JEN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JEN: // global
           if (I64[R1 + 7] == 39) goto c3JEZ; else goto c3JEY;
       c3JEZ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JEY: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wk_s3GnC_entry() //  [R1, R2, R3]
         { info_tbl: [(c3JF5,
                       label: $wk_s3GnC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JF5: // global
           _s3GnE::P64 = R3;
           _s3GnD::P64 = R2;
           _s3GnC::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3JF6; else goto c3JF7;
       c3JF7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3JF9; else goto c3JF8;
       c3JF9: // global
           HpAlloc = 32;
           goto c3JF6;
       c3JF6: // global
           R3 = _s3GnE::P64;
           R2 = _s3GnD::P64;
           R1 = _s3GnC::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3JF8: // global
           _s3GnB::P64 = P64[_s3GnC::P64 + 6];
           I64[Hp - 24] = lvl116_s3GnF_info;
           P64[Hp - 8] = _s3GnB::P64;
           P64[Hp] = _s3GnD::P64;
           I64[Sp - 24] = block_c3JEb_info;
           R1 = _s3GnE::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s3GnD::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3JFn; else goto c3JEc;
       u3JFn: // global
           call _c3JEb(R1) args: 0, res: 0, upd: 0;
       c3JEc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JEb() //  [R1]
         { info_tbl: [(c3JEb,
                       label: block_c3JEb_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JEb: // global
           if (R1 & 7 == 1) goto c3JF2; else goto c3JF3;
       c3JF2: // global
           I64[Sp] = block_c3JEg_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3JFm; else goto c3JEh;
       u3JFm: // global
           call _c3JEg(R1) args: 0, res: 0, upd: 0;
       c3JEh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3JF3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3JFl; else goto c3JFk;
       c3JFl: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JFk: // global
           I64[Hp - 24] = sat_s3GnU_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3JEg() //  [R1]
         { info_tbl: [(c3JEg,
                       label: block_c3JEg_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JEg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3JFd; else goto c3JFc;
       c3JFd: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JFc: // global
           if (I64[R1 + 7] == 39) goto c3JFh; else goto c3JFg;
       c3JFh: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JFg: // global
           I64[Hp - 24] = sat_s3GnP_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 k1_s3GnV_entry() //  [R1, R2]
         { info_tbl: [(c3JFw,
                       label: k1_s3GnV_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JFw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JFx; else goto c3JFy;
       c3JFx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JFy: // global
           I64[Sp - 16] = block_c3JFt_info;
           _s3GnC::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GnC::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JFC; else goto c3JFu;
       u3JFC: // global
           call _c3JFt(R1) args: 0, res: 0, upd: 0;
       c3JFu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JFt() //  [R1]
         { info_tbl: [(c3JFt,
                       label: block_c3JFt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JFt: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wk_s3GnC_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3Go0_entry() //  [R1]
         { info_tbl: [(c3JFH,
                       label: lvl116_s3Go0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JFH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JFI; else goto c3JFJ;
       c3JFI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JFJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.lexChar2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3Go6_entry() //  [R1]
         { info_tbl: [(c3JG1,
                       label: lvl118_s3Go6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JG1: // global
           _s3Go6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JG2; else goto c3JG3;
       c3JG3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JG5; else goto c3JG4;
       c3JG5: // global
           HpAlloc = 16;
           goto c3JG2;
       c3JG2: // global
           R1 = _s3Go6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JG4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Go6::P64;
           _s3GnB::P64 = P64[_s3Go6::P64 + 16];
           _s3Go3::P64 = P64[_s3Go6::P64 + 24];
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = _s3Go3::P64;
           R2 = Hp - 7;
           R1 = _s3GnB::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Goc_entry() //  [R1, R2]
         { info_tbl: [(c3JGe,
                       label: sat_s3Goc_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JGe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JGf; else goto c3JGg;
       c3JGf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JGg: // global
           I64[Sp - 16] = block_c3JGb_info;
           _s3Go6::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Go6::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JGo; else goto c3JGc;
       u3JGo: // global
           call _c3JGb(R1) args: 0, res: 0, upd: 0;
       c3JGc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JGb() //  [R1]
         { info_tbl: [(c3JGb,
                       label: block_c3JGb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JGb: // global
           if (I64[R1 + 7] == 39) goto c3JGn; else goto c3JGm;
       c3JGn: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JGm: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3Go1_entry() //  [R1, R2]
         { info_tbl: [(c3JGp,
                       label: lvl117_s3Go1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JGp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JGq; else goto c3JGr;
       c3JGq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JGr: // global
           I64[Sp - 24] = block_c3JFP_info;
           _s3GnB::P64 = P64[R1 + 7];
           _s3Go0::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3GnB::P64;
           P64[Sp - 8] = _s3Go0::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3JGB; else goto c3JFQ;
       u3JGB: // global
           call _c3JFP(R1) args: 0, res: 0, upd: 0;
       c3JFQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JFP() //  [R1]
         { info_tbl: [(c3JFP,
                       label: block_c3JFP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JFP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3JGu; else goto c3JGt;
       c3JGu: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JGt: // global
           _s3Go5::I64 = I64[R1 + 7];
           if (_s3Go5::I64 == 39) goto c3JGy; else goto u3JGA;
       c3JGy: // global
           Hp = Hp - 64;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3JGA: // global
           if (_s3Go5::I64 == 92) goto c3JGz; else goto c3JGx;
       c3JGz: // global
           Hp = Hp - 64;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JGx: // global
           I64[Hp - 56] = lvl118_s3Go6_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_s3Goc_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl119_s3Gok_entry() //  [R1]
         { info_tbl: [(c3JGL,
                       label: lvl119_s3Gok_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JGL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JGM; else goto c3JGN;
       c3JGM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JGN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Base.id_closure+1;
           Sp = Sp - 16;
           call body_r3yd5_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3JKA_srtd" {
     u3JKA_srtd:
         const S3GvX_srt+600;
         const 93;
         const 257;
         const 268435456;
 },
 sat_s3Gp4_entry() //  [R1]
         { info_tbl: [(c3JH7,
                       label: sat_s3Gp4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JH7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JH8; else goto c3JH9;
       c3JH8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JH9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3JH4_info;
           R4 = P64[R1 + 16];
           R3 = lexDecNumber_r3yda_closure+1;
           R2 = lexHexOct_r3y9B_closure+1;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3JH4() //  [R1]
         { info_tbl: [(c3JH4,
                       label: block_c3JH4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JH4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JHc; else goto c3JHb;
       c3JHc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3JHb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GoV_entry() //  [R1, R2]
         { info_tbl: [(c3JHE,
                       label: sat_s3GoV_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JHE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3JHI; else goto c3JHH;
       c3JHI: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JHH: // global
           _s3GnB::P64 = P64[R1 + 7];
           _s3GoK::P64 = P64[R1 + 15];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = _s3GoK::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = Hp - 30;
           R2 = Hp - 4;
           R1 = _s3GnB::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gp0_entry() //  [R1, R2]
         { info_tbl: [(c3JHJ,
                       label: sat_s3Gp0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JHJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JHK; else goto c3JHL;
       c3JHK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JHL: // global
           I64[Sp - 16] = block_c3JHi_info;
           _s3GnB::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GnB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JIa; else goto c3JHj;
       u3JIa: // global
           call _c3JHi(R1) args: 0, res: 0, upd: 0;
       c3JHj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JHi() //  [R1]
         { info_tbl: [(c3JHi,
                       label: block_c3JHi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JHi: // global
           _s3GoL::I64 = I64[R1 + 7];
           (_s3GoQ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalpha(_s3GoL::I64);
           if (_s3GoQ::I64 == 0) goto c3JI5; else goto u3JI6;
       c3JI5: // global
           if (_s3GoL::I64 == 95) goto u3JI7; else goto c3JI3;
       u3JI7: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           goto u3JI9;
       c3JI3: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3JI6: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           goto u3JI9;
       u3JI9: // global
           call _c3JHv() args: 0, res: 0, upd: 0;
     }
 },
 _c3JHv() //  []
         { info_tbl: [(c3JHv,
                       label: block_c3JHv_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JHv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JHS; else goto c3JHR;
       c3JHS: // global
           HpAlloc = 24;
           I64[Sp] = block_c3JHv_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3JHR: // global
           I64[Hp - 16] = sat_s3GoV_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c3JHN_info;
           R3 = Hp - 15;
           R2 = isIdfChar_r3y8W_closure+1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JHN() //  [R1]
         { info_tbl: [(c3JHN,
                       label: block_c3JHN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JHN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JHV; else goto c3JHU;
       c3JHV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JHU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3JKB_srtd" {
     u3JKB_srtd:
         const S3GvX_srt+600;
         const 94;
         const 257;
         const 805322752;
 },
 sat_s3Gp5_entry() //  [R1]
         { info_tbl: [(c3JIc,
                       label: sat_s3Gp5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JIc: // global
           _s3Gp5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JId; else goto c3JIe;
       c3JIe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3JIg; else goto c3JIf;
       c3JIg: // global
           HpAlloc = 56;
           goto c3JId;
       c3JId: // global
           R1 = _s3Gp5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JIf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gp5::P64;
           _s3GnB::P64 = P64[_s3Gp5::P64 + 16];
           I64[Hp - 48] = sat_s3Gp4_info;
           P64[Hp - 32] = _s3GnB::P64;
           I64[Hp - 24] = sat_s3Gp0_info;
           P64[Hp - 16] = _s3GnB::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GoE_entry() //  [R1, R2]
         { info_tbl: [(c3JID,
                       label: sat_s3GoE_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JID: // global
           _s3Goz::P64 = R2;
           _s3GoE::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3JIE; else goto c3JIF;
       c3JIF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JIH; else goto c3JIG;
       c3JIH: // global
           HpAlloc = 24;
           goto c3JIE;
       c3JIE: // global
           R2 = _s3Goz::P64;
           R1 = _s3GoE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JIG: // global
           _s3GnB::P64 = P64[_s3GoE::P64 + 7];
           _s3Gox::P64 = P64[_s3GoE::P64 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3Gox::P64;
           P64[Hp] = _s3Goz::P64;
           I64[Sp - 24] = block_c3JIx_info;
           R4 = reserved_ops29_r3y9q_closure+2;
           _c3JIw::P64 = Hp - 14;
           R3 = _c3JIw::P64;
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           P64[Sp - 16] = _c3JIw::P64;
           P64[Sp - 8] = _s3GnB::P64;
           Sp = Sp - 24;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JIx() //  [R1]
         { info_tbl: [(c3JIx,
                       label: block_c3JIx_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JIx: // global
           _c3JIw::P64 = P64[Sp + 8];
           _s3GnB::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c3JIA; else goto c3JIB;
       c3JIA: // global
           Hp = Hp + 16;
           _s3GoB::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3JIT; else goto c3JIM;
       c3JIM: // global
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = _c3JIw::P64;
           R2 = Hp - 3;
           R1 = _s3GnB::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3JIB: // global
           Hp = Hp + 16;
           _s3GoB::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3JIT; else goto c3JIS;
       c3JIT: // global
           HpAlloc = 16;
           R1 = _s3GoB::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JIS: // global
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = _c3JIw::P64;
           R2 = Hp - 5;
           R1 = _s3GnB::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3JKC_srtd" {
     u3JKC_srtd:
         const S3GvX_srt+128;
         const 154;
         const 1;
         const 0;
         const 33554432;
 },
 sat_s3GoH_entry() //  [R1, R2]
         { info_tbl: [(c3JIY,
                       label: sat_s3GoH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JIY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JIZ; else goto c3JJ0;
       c3JIZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JJ0: // global
           I64[Sp - 24] = block_c3JIm_info;
           _s3Gox::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s3Gox::P64;
           Sp = Sp - 24;
           call Text.Read.Lex.isSymbolChar_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3JKD_srtd" {
     u3JKD_srtd:
         const S3GvX_srt+128;
         const 154;
         const 1;
         const 0;
         const 33554432;
 },
 _c3JIm() //  [R1]
         { info_tbl: [(c3JIm,
                       label: block_c3JIm_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JIm: // global
           if (R1 & 7 == 1) goto c3JIV; else goto c3JIW;
       c3JIV: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JIW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JJ8; else goto c3JJ7;
       c3JJ8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JJ7: // global
           I64[Hp - 16] = sat_s3GoE_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3JJ3_info;
           R3 = Hp - 15;
           R2 = Text.Read.Lex.isSymbolChar_closure+1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JJ3() //  [R1]
         { info_tbl: [(c3JJ3,
                       label: block_c3JJ3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JJ3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JJb; else goto c3JJa;
       c3JJb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JJa: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3JKE_srtd" {
     u3JKE_srtd:
         const S3GvX_srt+128;
         const 154;
         const 576460752303423489;
         const 8;
         const 58720768;
 },
 sat_s3Gp6_entry() //  [R1]
         { info_tbl: [(c3JJd,
                       label: sat_s3Gp6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JJd: // global
           _s3Gp6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JJe; else goto c3JJf;
       c3JJf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3JJh; else goto c3JJg;
       c3JJh: // global
           HpAlloc = 56;
           goto c3JJe;
       c3JJe: // global
           R1 = _s3Gp6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JJg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gp6::P64;
           _s3GnB::P64 = P64[_s3Gp6::P64 + 16];
           I64[Hp - 48] = sat_s3Gp5_info;
           P64[Hp - 32] = _s3GnB::P64;
           I64[Hp - 24] = sat_s3GoH_info;
           P64[Hp - 16] = _s3GnB::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gov_entry() //  [R1, R2]
         { info_tbl: [(c3JJt,
                       label: sat_s3Gov_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JJt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3JJu; else goto c3JJv;
       c3JJu: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JJv: // global
           I64[Sp - 24] = block_c3JJn_info;
           R4 = Text.Read.Lex.isSymbolChar3_closure;
           R3 = R2;
           _s3Gor::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s3Gor::P64;
           Sp = Sp - 24;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JJn() //  [R1]
         { info_tbl: [(c3JJn,
                       label: block_c3JJn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JJn: // global
           if (R1 & 7 == 1) goto c3JJq; else goto c3JJr;
       c3JJq: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JJr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3JJF; else goto c3JJE;
       c3JJF: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JJE: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = Hp - 30;
           R2 = Hp - 5;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3JKF_srtd" {
     u3JKF_srtd:
         const S3GvX_srt+128;
         const 155;
         const 576460752303423489;
         const 8;
         const 125829632;
 },
 sat_s3Gp7_entry() //  [R1]
         { info_tbl: [(c3JJH,
                       label: sat_s3Gp7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JJH: // global
           _s3Gp7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JJI; else goto c3JJJ;
       c3JJJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3JJL; else goto c3JJK;
       c3JJL: // global
           HpAlloc = 56;
           goto c3JJI;
       c3JJI: // global
           R1 = _s3Gp7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JJK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gp7::P64;
           _s3GnB::P64 = P64[_s3Gp7::P64 + 16];
           I64[Hp - 48] = sat_s3Gp6_info;
           P64[Hp - 32] = _s3GnB::P64;
           I64[Hp - 24] = sat_s3Gov_info;
           P64[Hp - 16] = _s3GnB::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gop_entry() //  [R1, R2]
         { info_tbl: [(c3JJU,
                       label: sat_s3Gop_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JJV; else goto c3JJW;
       c3JJV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JJW: // global
           I64[Sp - 16] = block_c3JJR_info;
           _s3Gok::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gok::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JK4; else goto c3JJS;
       u3JK4: // global
           call _c3JJR(R1) args: 0, res: 0, upd: 0;
       c3JJS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JJR() //  [R1]
         { info_tbl: [(c3JJR,
                       label: block_c3JJR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JJR: // global
           if (I64[R1 + 7] == 34) goto c3JK3; else goto c3JK2;
       c3JK3: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JK2: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3JKG_srtd" {
     u3JKG_srtd:
         const S3GvX_srt+128;
         const 155;
         const 576460752303423489;
         const 8;
         const 126091776;
 },
 sat_s3Gp8_entry() //  [R1]
         { info_tbl: [(c3JK6,
                       label: sat_s3Gp8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JK6: // global
           _s3Gp8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JK7; else goto c3JK8;
       c3JK8: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3JKa; else goto c3JK9;
       c3JKa: // global
           HpAlloc = 80;
           goto c3JK7;
       c3JK7: // global
           R1 = _s3Gp8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JK9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gp8::P64;
           _s3GnB::P64 = P64[_s3Gp8::P64 + 16];
           I64[Hp - 72] = lvl119_s3Gok_info;
           P64[Hp - 56] = _s3GnB::P64;
           I64[Hp - 48] = sat_s3Gp7_info;
           P64[Hp - 32] = _s3GnB::P64;
           I64[Hp - 24] = sat_s3Gop_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Goi_entry() //  [R1, R2]
         { info_tbl: [(c3JKj,
                       label: sat_s3Goi_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JKj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JKk; else goto c3JKl;
       c3JKk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JKl: // global
           I64[Sp - 16] = block_c3JKg_info;
           _s3God::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3God::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JKt; else goto c3JKh;
       u3JKt: // global
           call _c3JKg(R1) args: 0, res: 0, upd: 0;
       c3JKh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JKg() //  [R1]
         { info_tbl: [(c3JKg,
                       label: block_c3JKg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JKg: // global
           if (I64[R1 + 7] == 39) goto c3JKs; else goto c3JKr;
       c3JKs: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JKr: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3JKH_srtd" {
     u3JKH_srtd:
         const S3GvX_srt+128;
         const 156;
         const 576460752303423489;
         const 8;
         const 260310528;
 },
 Text.Read.Lex.expect2_entry() //  [R2]
         { info_tbl: [(c3JKv,
                       label: Text.Read.Lex.expect2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JKv: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3JKz; else goto c3JKy;
       c3JKz: // global
           HpAlloc = 152;
           R2 = R2;
           R1 = Text.Read.Lex.expect2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JKy: // global
           I64[Hp - 144] = $wk_s3GnC_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = k1_s3GnV_info;
           P64[Hp - 120] = Hp - 142;
           I64[Hp - 112] = lvl116_s3Go0_info;
           P64[Hp - 96] = Hp - 127;
           I64[Hp - 88] = lvl117_s3Go1_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = Hp - 112;
           I64[Hp - 64] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 56] = Hp - 87;
           I64[Hp - 48] = sat_s3Gp8_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3Goi_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 7;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.709617091 UTC

[section ""data" . Text.Read.Lex.$wlex_closure" {
     Text.Read.Lex.$wlex_closure:
         const Text.Read.Lex.$wlex_info;
         const 0;
 },
 lvl117_s3Gpb_entry() //  [R1]
         { info_tbl: [(c3JPP,
                       label: lvl117_s3Gpb_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JPP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JPQ; else goto c3JPR;
       c3JPQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JPR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gpi_entry() //  [R1]
         { info_tbl: [(c3JPW,
                       label: sat_s3Gpi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JPW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JPX; else goto c3JPY;
       c3JPX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JPY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Gpg_entry() //  [R1, R2]
         { info_tbl: [(c3JQb,
                       label: sat_s3Gpg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JQb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JQc; else goto c3JQd;
       c3JQc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JQd: // global
           I64[Sp - 16] = block_c3JQ4_info;
           _s3Gpb::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gpb::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JQk; else goto c3JQ5;
       u3JQk: // global
           call _c3JQ4(R1) args: 0, res: 0, upd: 0;
       c3JQ5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JQ4() //  [R1]
         { info_tbl: [(c3JQ4,
                       label: block_c3JQ4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JQ4: // global
           if (R1 & 7 == 1) goto c3JQ8; else goto c3JQ9;
       c3JQ8: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JQ9: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3Gpa_entry() //  [R1]
         { info_tbl: [(c3JQm,
                       label: lvl116_s3Gpa_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JQm: // global
           _s3Gpa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JQn; else goto c3JQo;
       c3JQo: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3JQq; else goto c3JQp;
       c3JQq: // global
           HpAlloc = 80;
           goto c3JQn;
       c3JQn: // global
           R1 = _s3Gpa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JQp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gpa::P64;
           _s3Gp9::P64 = P64[_s3Gpa::P64 + 16];
           I64[Hp - 72] = lvl117_s3Gpb_info;
           P64[Hp - 56] = _s3Gp9::P64;
           I64[Hp - 48] = sat_s3Gpi_info;
           P64[Hp - 32] = _s3Gp9::P64;
           I64[Hp - 24] = sat_s3Gpg_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 k_s3Gpj_entry() //  [R1]
         { info_tbl: [(c3JQw,
                       label: k_s3Gpj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JQw: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gpm_entry() //  [R1, R2]
         { info_tbl: [(c3JQE,
                       label: sat_s3Gpm_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JQE: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wlex_entry() //  [R2]
         { info_tbl: [(c3JQH,
                       label: Text.Read.Lex.$wlex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JQH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3JQL; else goto c3JQK;
       c3JQL: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.Read.Lex.$wlex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JQK: // global
           I64[Hp - 48] = lvl116_s3Gpa_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3Gpj_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3Gpm_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.726974246 UTC

[section ""data" . Text.Read.Lex.lex1_closure" {
     Text.Read.Lex.lex1_closure:
         const Text.Read.Lex.lex1_info;
         const 0;
 },
 Text.Read.Lex.lex1_entry() //  [R2]
         { info_tbl: [(c3JRL,
                       label: Text.Read.Lex.lex1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JRL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3JRM; else goto c3JRN;
       c3JRM: // global
           R2 = R2;
           R1 = Text.Read.Lex.lex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JRN: // global
           I64[Sp - 8] = block_c3JRI_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wlex_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JRI() //  [R1]
         { info_tbl: [(c3JRI,
                       label: block_c3JRI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JRI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JRQ; else goto c3JRP;
       c3JRQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JRP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.732971959 UTC

[section ""data" . Text.Read.Lex.lex_closure" {
     Text.Read.Lex.lex_closure:
         const Text.Read.Lex.lex_info;
         const 0;
 },
 Text.Read.Lex.lex_entry() //  [R2]
         { info_tbl: [(c3JS6,
                       label: Text.Read.Lex.lex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JS6: // global
           R2 = R2;
           call Text.Read.Lex.lex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.738266081 UTC

[section ""data" . Text.Read.Lex.$wexpect_closure" {
     Text.Read.Lex.$wexpect_closure:
         const Text.Read.Lex.$wexpect_info;
         const 0;
 },
 lvl117_s3Gpt_entry() //  [R1]
         { info_tbl: [(c3JSp,
                       label: lvl117_s3Gpt_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JSp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JSq; else goto c3JSr;
       c3JSq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JSr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl118_s3Gpu_entry() //  [R1]
         { info_tbl: [(c3JSD,
                       label: lvl118_s3Gpu_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JSD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3JSE; else goto c3JSF;
       c3JSE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JSF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3JSw_info;
           _s3Gpt::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3Gpt::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3JSM; else goto c3JSx;
       u3JSM: // global
           call _c3JSw(R1) args: 0, res: 0, upd: 0;
       c3JSx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3JSw() //  [R1]
         { info_tbl: [(c3JSw,
                       label: block_c3JSw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JSw: // global
           if (R1 & 7 == 7) goto c3JSB; else goto c3JSA;
       c3JSB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3JSA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GpE_entry() //  [R1, R2]
         { info_tbl: [(c3JT2,
                       label: sat_s3GpE_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JT2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JT3; else goto c3JT4;
       c3JT3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JT4: // global
           I64[Sp - 16] = block_c3JSW_info;
           R3 = P64[R1 + 7];
           R2 = R2;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 16;
           call Text.Read.Lex.$fEqLexeme_$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JSW() //  [R1]
         { info_tbl: [(c3JSW,
                       label: block_c3JSW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JSW: // global
           if (R1 & 7 == 1) goto c3JSZ; else goto c3JT0;
       c3JSZ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JT0: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3GpF_entry() //  [R1]
         { info_tbl: [(c3JTb,
                       label: sat_s3GpF_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JTb: // global
           _s3GpF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JTc; else goto c3JTd;
       c3JTd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JTf; else goto c3JTe;
       c3JTf: // global
           HpAlloc = 24;
           goto c3JTc;
       c3JTc: // global
           R1 = _s3GpF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JTe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GpF::P64;
           _s3Gpq::P64 = P64[_s3GpF::P64 + 16];
           _s3Gpt::P64 = P64[_s3GpF::P64 + 24];
           I64[Hp - 16] = sat_s3GpE_info;
           P64[Hp - 8] = _s3Gpq::P64;
           P64[Hp] = _s3Gpt::P64;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GpA_entry() //  [R1, R2]
         { info_tbl: [(c3JTs,
                       label: sat_s3GpA_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JTs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JTt; else goto c3JTu;
       c3JTt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JTu: // global
           I64[Sp - 16] = block_c3JTl_info;
           _s3Gpu::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Gpu::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JTB; else goto c3JTm;
       u3JTB: // global
           call _c3JTl(R1) args: 0, res: 0, upd: 0;
       c3JTm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JTl() //  [R1]
         { info_tbl: [(c3JTl,
                       label: block_c3JTl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JTl: // global
           if (R1 & 7 == 1) goto c3JTp; else goto c3JTq;
       c3JTp: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3JTq: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3Gps_entry() //  [R1]
         { info_tbl: [(c3JTD,
                       label: lvl116_s3Gps_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JTD: // global
           _s3Gps::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JTE; else goto c3JTF;
       c3JTF: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3JTH; else goto c3JTG;
       c3JTH: // global
           HpAlloc = 120;
           goto c3JTE;
       c3JTE: // global
           R1 = _s3Gps::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JTG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gps::P64;
           _s3Gpq::P64 = P64[_s3Gps::P64 + 16];
           _s3Gpr::P64 = P64[_s3Gps::P64 + 24];
           I64[Hp - 112] = lvl117_s3Gpt_info;
           P64[Hp - 96] = _s3Gpr::P64;
           I64[Hp - 88] = lvl118_s3Gpu_info;
           P64[Hp - 72] = _s3Gpq::P64;
           _c3JSl::P64 = Hp - 112;
           P64[Hp - 64] = _c3JSl::P64;
           I64[Hp - 56] = sat_s3GpF_info;
           P64[Hp - 40] = _s3Gpq::P64;
           P64[Hp - 32] = _c3JSl::P64;
           I64[Hp - 24] = sat_s3GpA_info;
           P64[Hp - 16] = Hp - 88;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 56;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 k_s3GpG_entry() //  [R1]
         { info_tbl: [(c3JTN,
                       label: k_s3GpG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JTN: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3GpJ_entry() //  [R1, R2]
         { info_tbl: [(c3JTV,
                       label: sat_s3GpJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JTV: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$wexpect_entry() //  [R2, R3]
         { info_tbl: [(c3JTY,
                       label: Text.Read.Lex.$wexpect_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JTY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3JU2; else goto c3JU1;
       c3JU2: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.$wexpect_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3JU1: // global
           I64[Hp - 56] = lvl116_s3Gps_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = k_s3GpG_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = sat_s3GpJ_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.764830607 UTC

[section ""data" . Text.Read.Lex.expect1_closure" {
     Text.Read.Lex.expect1_closure:
         const Text.Read.Lex.expect1_info;
         const 0;
 },
 Text.Read.Lex.expect1_entry() //  [R2, R3]
         { info_tbl: [(c3JVA,
                       label: Text.Read.Lex.expect1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JVA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3JVB; else goto c3JVC;
       c3JVB: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.expect1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3JVC: // global
           I64[Sp - 8] = block_c3JVx_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JVx() //  [R1]
         { info_tbl: [(c3JVx,
                       label: block_c3JVx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JVx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JVF; else goto c3JVE;
       c3JVF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JVE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.770842957 UTC

[section ""data" . Text.Read.Lex.expect_closure" {
     Text.Read.Lex.expect_closure:
         const Text.Read.Lex.expect_info;
         const 0;
 },
 Text.Read.Lex.expect_entry() //  [R2, R3]
         { info_tbl: [(c3JVV,
                       label: Text.Read.Lex.expect_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JVV: // global
           R3 = R3;
           R2 = R2;
           call Text.Read.Lex.expect1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.775362338 UTC

[section ""data" . Text.Read.Lex.$whsLex_closure" {
     Text.Read.Lex.$whsLex_closure:
         const Text.Read.Lex.$whsLex_info;
         const 0;
 },
 lvl117_s3GpQ_entry() //  [R1, R2]
         { info_tbl: [(c3JWf,
                       label: lvl117_s3GpQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JWf: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gq0_entry() //  [R1]
         { info_tbl: [(c3JWs,
                       label: sat_s3Gq0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JWs: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gq1_entry() //  [R1]
         { info_tbl: [(c3JWv,
                       label: sat_s3Gq1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JWv: // global
           _s3Gq1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3JWw; else goto c3JWx;
       c3JWx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JWz; else goto c3JWy;
       c3JWz: // global
           HpAlloc = 16;
           goto c3JWw;
       c3JWw: // global
           R1 = _s3Gq1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JWy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Gq1::P64;
           _s3GpS::P64 = P64[_s3Gq1::P64 + 16];
           I64[Hp - 8] = sat_s3Gq0_info;
           P64[Hp] = _s3GpS::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3GpX_entry() //  [R1, R2]
         { info_tbl: [(c3JWM,
                       label: sat_s3GpX_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JWM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3JWN; else goto c3JWO;
       c3JWN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JWO: // global
           I64[Sp - 16] = block_c3JWF_info;
           _s3GpS::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3GpS::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3JWV; else goto c3JWG;
       u3JWV: // global
           call _c3JWF(R1) args: 0, res: 0, upd: 0;
       c3JWG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3JWF() //  [R1]
         { info_tbl: [(c3JWF,
                       label: block_c3JWF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JWF: // global
           if (R1 & 7 == 1) goto c3JWJ; else goto c3JWK;
       c3JWJ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3JWK: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl116_s3GpP_entry() //  [R1]
         { info_tbl: [(c3JWZ,
                       label: lvl116_s3GpP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JWZ: // global
           _s3GpP::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3JX0; else goto c3JX1;
       c3JX1: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3JX3; else goto c3JX2;
       c3JX3: // global
           HpAlloc = 96;
           goto c3JX0;
       c3JX0: // global
           R1 = _s3GpP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3JX2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3GpP::P64;
           _s3GpO::P64 = P64[_s3GpP::P64 + 16];
           I64[Hp - 88] = lvl117_s3GpQ_info;
           P64[Hp - 80] = _s3GpO::P64;
           I64[Hp - 72] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 64] = Hp - 87;
           P64[Hp - 56] = Text.ParserCombinators.ReadP.Fail_closure+3;
           I64[Hp - 48] = sat_s3Gq1_info;
           _c3JWi::P64 = Hp - 68;
           P64[Hp - 32] = _c3JWi::P64;
           I64[Hp - 24] = sat_s3GpX_info;
           P64[Hp - 16] = _c3JWi::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 24] = block_c3JWX_info;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3JWX() //  [R1]
         { info_tbl: [(c3JWX,
                       label: block_c3JWX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JWX: // global
           R3 = R1;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 k_s3Gq3_entry() //  [R1]
         { info_tbl: [(c3JXc,
                       label: k_s3Gq3_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JXc: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Gq6_entry() //  [R1, R2]
         { info_tbl: [(c3JXk,
                       label: sat_s3Gq6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JXk: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.Read.Lex.$whsLex_entry() //  [R2]
         { info_tbl: [(c3JXn,
                       label: Text.Read.Lex.$whsLex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JXn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3JXr; else goto c3JXq;
       c3JXr: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.Read.Lex.$whsLex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JXq: // global
           I64[Hp - 48] = lvl116_s3GpP_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3Gq3_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3Gq6_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.797496998 UTC

[section ""data" . Text.Read.Lex.hsLex1_closure" {
     Text.Read.Lex.hsLex1_closure:
         const Text.Read.Lex.hsLex1_info;
         const 0;
 },
 Text.Read.Lex.hsLex1_entry() //  [R2]
         { info_tbl: [(c3JYB,
                       label: Text.Read.Lex.hsLex1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JYB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3JYC; else goto c3JYD;
       c3JYC: // global
           R2 = R2;
           R1 = Text.Read.Lex.hsLex1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JYD: // global
           I64[Sp - 8] = block_c3JYy_info;
           R2 = R2;
           Sp = Sp - 8;
           call Text.Read.Lex.$whsLex_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3JYy() //  [R1]
         { info_tbl: [(c3JYy,
                       label: block_c3JYy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JYy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JYG; else goto c3JYF;
       c3JYG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3JYF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.803402265 UTC

[section ""data" . Text.Read.Lex.hsLex_closure" {
     Text.Read.Lex.hsLex_closure:
         const Text.Read.Lex.hsLex_info;
         const 0;
 },
 Text.Read.Lex.hsLex_entry() //  [R2]
         { info_tbl: [(c3JYW,
                       label: Text.Read.Lex.hsLex_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JYW: // global
           R2 = R2;
           call Text.Read.Lex.hsLex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.807346268 UTC

[section ""data" . Text.Read.Lex.MkNumber_closure" {
     Text.Read.Lex.MkNumber_closure:
         const Text.Read.Lex.MkNumber_info;
 },
 Text.Read.Lex.MkNumber_entry() //  [R2, R3]
         { info_tbl: [(c3JZ8,
                       label: Text.Read.Lex.MkNumber_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JZ8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3JZc; else goto c3JZb;
       c3JZc: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.MkNumber_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3JZb: // global
           I64[Hp - 16] = Text.Read.Lex.MkNumber_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.811495291 UTC

[section ""data" . Text.Read.Lex.MkDecimal_closure" {
     Text.Read.Lex.MkDecimal_closure:
         const Text.Read.Lex.MkDecimal_info;
 },
 Text.Read.Lex.MkDecimal_entry() //  [R2, R3, R4]
         { info_tbl: [(c3JZo,
                       label: Text.Read.Lex.MkDecimal_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JZo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3JZs; else goto c3JZr;
       c3JZs: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.Read.Lex.MkDecimal_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3JZr: // global
           I64[Hp - 24] = Text.Read.Lex.MkDecimal_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.815594573 UTC

[section ""data" . Text.Read.Lex.Char_closure" {
     Text.Read.Lex.Char_closure:
         const Text.Read.Lex.Char_info;
 },
 Text.Read.Lex.Char_entry() //  [R2]
         { info_tbl: [(c3JZE,
                       label: Text.Read.Lex.Char_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JZE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JZI; else goto c3JZH;
       c3JZI: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Char_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JZH: // global
           I64[Hp - 8] = Text.Read.Lex.Char_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.819947259 UTC

[section ""data" . Text.Read.Lex.String_closure" {
     Text.Read.Lex.String_closure:
         const Text.Read.Lex.String_info;
 },
 Text.Read.Lex.String_entry() //  [R2]
         { info_tbl: [(c3JZU,
                       label: Text.Read.Lex.String_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3JZU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3JZY; else goto c3JZX;
       c3JZY: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.String_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3JZX: // global
           I64[Hp - 8] = Text.Read.Lex.String_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.824489486 UTC

[section ""data" . Text.Read.Lex.Punc_closure" {
     Text.Read.Lex.Punc_closure:
         const Text.Read.Lex.Punc_info;
 },
 Text.Read.Lex.Punc_entry() //  [R2]
         { info_tbl: [(c3K0a,
                       label: Text.Read.Lex.Punc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K0a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3K0e; else goto c3K0d;
       c3K0e: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Punc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3K0d: // global
           I64[Hp - 8] = Text.Read.Lex.Punc_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.828642848 UTC

[section ""data" . Text.Read.Lex.Ident_closure" {
     Text.Read.Lex.Ident_closure:
         const Text.Read.Lex.Ident_info;
 },
 Text.Read.Lex.Ident_entry() //  [R2]
         { info_tbl: [(c3K0q,
                       label: Text.Read.Lex.Ident_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K0q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3K0u; else goto c3K0t;
       c3K0u: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Ident_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3K0t: // global
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = R2;
           R1 = Hp - 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.832900999 UTC

[section ""data" . Text.Read.Lex.Symbol_closure" {
     Text.Read.Lex.Symbol_closure:
         const Text.Read.Lex.Symbol_info;
 },
 Text.Read.Lex.Symbol_entry() //  [R2]
         { info_tbl: [(c3K0G,
                       label: Text.Read.Lex.Symbol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K0G: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3K0K; else goto c3K0J;
       c3K0K: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Symbol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3K0J: // global
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.836733608 UTC

[section ""data" . Text.Read.Lex.Number_closure" {
     Text.Read.Lex.Number_closure:
         const Text.Read.Lex.Number_info;
 },
 Text.Read.Lex.Number_entry() //  [R2]
         { info_tbl: [(c3K0W,
                       label: Text.Read.Lex.Number_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K0W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3K10; else goto c3K0Z;
       c3K10: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.Read.Lex.Number_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3K0Z: // global
           I64[Hp - 8] = Text.Read.Lex.Number_con_info;
           P64[Hp] = R2;
           R1 = Hp - 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.84031831 UTC

[section ""data" . Text.Read.Lex.EOF_closure" {
     Text.Read.Lex.EOF_closure:
         const Text.Read.Lex.EOF_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.842414631 UTC

[Text.Read.Lex.MkNumber_con_entry() //  [R1]
         { info_tbl: [(c3K18,
                       label: Text.Read.Lex.MkNumber_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,77,107,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K18: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.845928467 UTC

[Text.Read.Lex.MkDecimal_con_entry() //  [R1]
         { info_tbl: [(c3K1f,
                       label: Text.Read.Lex.MkDecimal_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,77,107,68,101,99,105,109,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K1f: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.849148924 UTC

[Text.Read.Lex.Char_con_entry() //  [R1]
         { info_tbl: [(c3K1m,
                       label: Text.Read.Lex.Char_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,67,104,97,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K1m: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.852439507 UTC

[Text.Read.Lex.String_con_entry() //  [R1]
         { info_tbl: [(c3K1t,
                       label: Text.Read.Lex.String_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,83,116,114,105,110,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K1t: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.8562198 UTC

[Text.Read.Lex.Punc_con_entry() //  [R1]
         { info_tbl: [(c3K1A,
                       label: Text.Read.Lex.Punc_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,80,117,110,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K1A: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.859986024 UTC

[Text.Read.Lex.Ident_con_entry() //  [R1]
         { info_tbl: [(c3K1H,
                       label: Text.Read.Lex.Ident_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,73,100,101,110,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K1H: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.863288149 UTC

[Text.Read.Lex.Symbol_con_entry() //  [R1]
         { info_tbl: [(c3K1O,
                       label: Text.Read.Lex.Symbol_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K1O: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.866541797 UTC

[Text.Read.Lex.Number_con_entry() //  [R1]
         { info_tbl: [(c3K1V,
                       label: Text.Read.Lex.Number_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 5
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K1V: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.869882344 UTC

[Text.Read.Lex.EOF_con_entry() //  [R1]
         { info_tbl: [(c3K22,
                       label: Text.Read.Lex.EOF_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 6
                                  descr:[98,97,115,101,58,84,101,120,116,46,82,101,97,100,46,76,101,120,46,69,79,70]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3K22: // global
           R1 = R1 + 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:24.873069938 UTC

[section ""relreadonly" . S3GvX_srt" {
     S3GvX_srt:
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.Show.$fShowInteger_closure;
         const Text.Read.Lex.$fShowLexeme8_closure;
         const Text.Read.Lex.$w$cshowsPrec_closure;
         const Text.Read.Lex.$fShowNumber_$cshowsPrec_closure;
         const Text.Read.Lex.$fShowNumber_$cshow_closure;
         const Text.Read.Lex.$fShowNumber1_closure;
         const Text.Read.Lex.$fShowLexeme4_closure;
         const GHC.Show.$w$cshowsPrec3_closure;
         const GHC.Show.showLitString_closure;
         const Text.Read.Lex.$fShowLexeme6_closure;
         const Text.Read.Lex.$fShowLexeme_$cshowsPrec_closure;
         const Text.Read.Lex.$fShowLexeme3_closure;
         const Text.Read.Lex.$fShowLexeme_$cshow_closure;
         const Text.Read.Lex.$fShowLexeme1_closure;
         const GHC.Unicode.$wgeneralCategory_closure;
         const Text.Read.Lex.isSymbolChar_closure;
         const Text.Read.Lex.isSymbolChar1_closure;
         const Text.Read.Lex.isSymbolChar3_closure;
         const lvl1_r3y8U_closure;
         const $wisIdfChar_r3y8V_closure;
         const isIdfChar_r3y8W_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const combine_r3y9t_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const lvl3_r3y9s_closure;
         const Text.Read.Lex.numberToFixed_go_closure;
         const Text.Read.Lex.numberToFixed2_closure;
         const Text.Read.Lex.valInteger_closure;
         const Text.Read.Lex.$w$sreadIntP_closure;
         const Text.Read.Lex.readIntP1_closure;
         const Text.Read.Lex.$wreadIntP_closure;
         const Text.Read.Lex.readIntP2_closure;
         const sat_s3G8f_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.numberToInteger_closure;
         const sat_s3G8y_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.^_$s^_closure;
         const lvl4_r3y9u_closure;
         const $wfracExp_r3y9v_closure;
         const Text.Read.Lex.numberToFixed_integerTake_closure;
         const Text.Read.Lex.numberToFixed_closure;
         const Text.Read.Lex.$wnumberToRational_closure;
         const Text.Read.Lex.numberToRational_closure;
         const sat_s3Gae_closure;
         const sat_s3Gak_closure;
         const Text.Read.Lex.$wnumberToRangedRational_closure;
         const Text.Read.Lex.numberToRangedRational2_closure;
         const Text.Read.Lex.numberToRangedRational4_closure;
         const Text.Read.Lex.numberToRangedRational5_closure;
         const Text.Read.Lex.numberToRangedRational_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const sat_s3Gbh_closure;
         const sat_s3Gbj_closure;
         const Text.Read.Lex.$w$svalDig_closure;
         const Text.Read.Lex.readDecP2_closure;
         const Text.Read.Lex.readDecP3_closure;
         const Text.Read.Lex.readDecP4_closure;
         const Text.Read.Lex.$wvalDig_closure;
         const Text.Read.Lex.$w$sreadIntP'_closure;
         const Text.Read.Lex.$wreadIntP'_closure;
         const Text.Read.Lex.readDecP6_closure;
         const Text.Read.Lex.readOctP1_closure;
         const Text.Read.Lex.readOctP2_closure;
         const Text.Read.Lex.readDecP1_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.readDecP5_closure;
         const Text.Read.Lex.readHexP1_closure;
         const Text.Read.Lex.readHexP2_closure;
         const $wlexDigits_r3y9x_closure;
         const $wlexHexOct_r3y9A_closure;
         const lexHexOct_r3y9B_closure;
         const $wlexFrac_r3y9D_closure;
         const lexFrac_r3y9E_closure;
         const sat_s3Gfm_closure;
         const m4_r3y9J_closure;
         const w1_r3ybW_closure;
         const m2_r3y9G_closure;
         const w_r3ybX_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const lvl46_r3ybY_closure;
         const m6_r3y9M_closure;
         const lvl47_r3ybZ_closure;
         const m8_r3y9P_closure;
         const lvl48_r3yc0_closure;
         const m10_r3y9S_closure;
         const lvl49_r3yc1_closure;
         const m12_r3y9V_closure;
         const lvl50_r3yc2_closure;
         const m14_r3y9Y_closure;
         const lvl51_r3yc3_closure;
         const m16_r3ya1_closure;
         const lvl52_r3yc4_closure;
         const m18_r3ya4_closure;
         const lvl53_r3yc5_closure;
         const m20_r3ya7_closure;
         const lvl54_r3yc6_closure;
         const m22_r3yaa_closure;
         const lvl55_r3yc7_closure;
         const m24_r3yad_closure;
         const lvl56_r3yc8_closure;
         const m26_r3yag_closure;
         const lvl57_r3yc9_closure;
         const m28_r3yaj_closure;
         const lvl58_r3yca_closure;
         const m30_r3yam_closure;
         const lvl59_r3ycb_closure;
         const m32_r3yap_closure;
         const lvl60_r3ycc_closure;
         const m34_r3yas_closure;
         const lvl61_r3ycd_closure;
         const m36_r3yav_closure;
         const lvl62_r3yce_closure;
         const m38_r3yay_closure;
         const lvl63_r3ycf_closure;
         const m40_r3yaB_closure;
         const lvl64_r3ycg_closure;
         const m42_r3yaE_closure;
         const lvl65_r3ych_closure;
         const m44_r3yaH_closure;
         const lvl66_r3yci_closure;
         const m46_r3yaK_closure;
         const lvl67_r3ycj_closure;
         const m48_r3yaN_closure;
         const lvl68_r3yck_closure;
         const m50_r3yaQ_closure;
         const lvl69_r3ycl_closure;
         const m52_r3yaT_closure;
         const lvl70_r3ycm_closure;
         const m54_r3yaW_closure;
         const lvl71_r3ycn_closure;
         const m56_r3yaZ_closure;
         const lvl72_r3yco_closure;
         const m58_r3yb2_closure;
         const lvl73_r3ycp_closure;
         const m60_r3yb5_closure;
         const lvl74_r3ycq_closure;
         const m62_r3yb8_closure;
         const lvl75_r3ycr_closure;
         const m64_r3ybb_closure;
         const lvl76_r3ycs_closure;
         const m66_r3ybe_closure;
         const lvl77_r3yct_closure;
         const m68_r3ybh_closure;
         const lvl78_r3ycu_closure;
         const GHC.Char.$wlvl_closure;
         const lvl7_r3ybj_closure;
         const Text.ParserCombinators.ReadP.choice_closure;
         const lvl111_r3yd1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Text.Read.Lex.lexChar2_closure;
         const Text.Read.Lex.$wconsumeEmpties_closure;
         const Text.Read.Lex.$wlvl_closure;
         const Text.Read.Lex.lexChar3_closure;
         const Text.Read.Lex.lexChar5_closure;
         const Text.Read.Lex.$wlexChar_closure;
         const Text.Read.Lex.lexChar1_closure;
         const lexStrItem_r3yd4_closure;
         const body_r3yd5_closure;
         const Text.Read.Lex.numberToFixed1_closure;
         const Text.Read.Lex.valInteger_closure;
         const lexExp_r3yd6_closure;
         const $wlexDecNumber_r3yd9_closure;
         const lexDecNumber_r3yda_closure;
         const isIdfChar_r3y8W_closure;
         const reserved_ops29_r3y9q_closure;
         const Text.Read.Lex.isSymbolChar3_closure;
         const Text.Read.Lex.expect2_closure;
         const Text.Read.Lex.$wlex_closure;
         const Text.Read.Lex.lex1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Text.Read.Lex.expect1_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const Text.Read.Lex.$whsLex_closure;
         const Text.Read.Lex.hsLex1_closure;
 }]

