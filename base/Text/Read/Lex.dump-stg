
==================== Pre unarise: ====================
2018-03-16 15:58:09.90867778 UTC

Text.Read.Lex.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Text.Read.Lex.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$trModule4];

Text.Read.Lex.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text.Read.Lex"#;

Text.Read.Lex.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$trModule2];

Text.Read.Lex.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Text.Read.Lex.$trModule3
                                     Text.Read.Lex.$trModule1];

$krep_r3y8E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep1_r3y8F :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_r3y8G :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep3_r3y8H :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r3y8E GHC.Types.[]];

$krep4_r3y8I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep3_r3y8H];

$krep5_r3y8J :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r3y8F GHC.Types.[]];

$krep6_r3y8K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep5_r3y8J];

$krep7_r3y8L :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_r3y8K GHC.Types.[]];

$krep8_r3y8M :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep7_r3y8L];

$krep9_r3y8N :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r3y8G GHC.Types.[]];

$krep10_r3y8O :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep9_r3y8N];

Text.Read.Lex.$tcNumber2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Number"#;

Text.Read.Lex.$tcNumber1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tcNumber2];

Text.Read.Lex.$tcNumber :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [309030926258572567##
                                    15861928963352354800##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tcNumber1
                                    0#
                                    GHC.Types.krep$*];

$krep11_r3y8P :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Read.Lex.$tcNumber
                                              GHC.Types.[]];

$krep12_r3y8Q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r3y8I $krep11_r3y8P];

$krep13_r3y8R :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r3y8M $krep12_r3y8Q];

Text.Read.Lex.$tc'MkDecimal1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r3y8K $krep13_r3y8R];

Text.Read.Lex.$tc'MkDecimal3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MkDecimal"#;

Text.Read.Lex.$tc'MkDecimal2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'MkDecimal3];

Text.Read.Lex.$tc'MkDecimal :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3768064156751246198##
                                    12661213050981530502##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'MkDecimal2
                                    0#
                                    Text.Read.Lex.$tc'MkDecimal1];

$krep14_r3y8S :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r3y8K $krep11_r3y8P];

Text.Read.Lex.$tc'MkNumber1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r3y8F $krep14_r3y8S];

Text.Read.Lex.$tc'MkNumber3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MkNumber"#;

Text.Read.Lex.$tc'MkNumber2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'MkNumber3];

Text.Read.Lex.$tc'MkNumber :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13396293166029931455##
                                    9655480518931438202##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'MkNumber2
                                    0#
                                    Text.Read.Lex.$tc'MkNumber1];

Text.Read.Lex.$tcLexeme2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Lexeme"#;

Text.Read.Lex.$tcLexeme1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tcLexeme2];

Text.Read.Lex.$tcLexeme :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [80462090517814070##
                                    11862718491065697853##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tcLexeme1
                                    0#
                                    GHC.Types.krep$*];

Text.Read.Lex.$tc'EOF1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Read.Lex.$tcLexeme
                                              GHC.Types.[]];

Text.Read.Lex.$tc'EOF3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'EOF"#;

Text.Read.Lex.$tc'EOF2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'EOF3];

Text.Read.Lex.$tc'EOF :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3510729917506789415##
                                    3927434500167946503##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'EOF2
                                    0#
                                    Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'Ident1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_r3y8O
                                         Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'String2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'String"#;

Text.Read.Lex.$tc'String1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'String2];

Text.Read.Lex.$tc'String :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4234975262003182519##
                                    13764813366371540099##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'String1
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Punc2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Punc"#;

Text.Read.Lex.$tc'Punc1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Punc2];

Text.Read.Lex.$tc'Punc :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12518860736485891069##
                                    4367633479442506190##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Punc1
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Ident3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Ident"#;

Text.Read.Lex.$tc'Ident2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Ident3];

Text.Read.Lex.$tc'Ident :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17378133866674838049##
                                    11361322998352874125##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Ident2
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Symbol2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Symbol"#;

Text.Read.Lex.$tc'Symbol1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Symbol2];

Text.Read.Lex.$tc'Symbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [434905475898525586##
                                    17609692850475477756##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Symbol1
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Char1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_r3y8G
                                         Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'Char3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Char"#;

Text.Read.Lex.$tc'Char2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Char3];

Text.Read.Lex.$tc'Char :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4794546904228625478##
                                    396576625805862141##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Char2
                                    0#
                                    Text.Read.Lex.$tc'Char1];

Text.Read.Lex.$tc'Number1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r3y8P
                                         Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'Number3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Number"#;

Text.Read.Lex.$tc'Number2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Number3];

Text.Read.Lex.$tc'Number :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3115835552307058655##
                                    14198768466951480548##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Number2
                                    0#
                                    Text.Read.Lex.$tc'Number1];

Text.Read.Lex.$fShowLexeme9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MkDecimal "#;

Text.Read.Lex.$fShowLexeme8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.$fShowLexeme9;

Text.Read.Lex.$fShowLexeme10 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

Text.Read.Lex.$fShowLexeme11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MkNumber "#;

Text.Read.Lex.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> Text.Read.Lex.Number -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s3ydc w2_s3ydd]
        case w2_s3ydd of {
          Text.Read.Lex.MkNumber b1_s3ydf [Occ=OnceL!]
                                 b2_s3ydg [Occ=OnceL!] ->
              let {
                p_s3ydh [Occ=OnceL*] :: GHC.Show.ShowS
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    [b1_s3ydf b2_s3ydg] \r [x34_s3ydi]
                        let {
                          sat_s3ydN [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [b1_s3ydf b2_s3ydg x34_s3ydi] \u []
                                  case b1_s3ydf of {
                                    GHC.Types.I# ww3_s3ydk [Occ=Once] ->
                                        let {
                                          sat_s3ydI [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [b2_s3ydg x34_s3ydi] \u []
                                                  case b2_s3ydg of {
                                                    [] ->
                                                        GHC.CString.unpackAppendCString#
                                                            GHC.Show.showList__4 x34_s3ydi;
                                                    : x35_s3ydm [Occ=Once!] xs_s3ydn [Occ=Once] ->
                                                        let {
                                                          sat_s3ydH [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [x34_s3ydi x35_s3ydm xs_s3ydn] \u []
                                                                  case x35_s3ydm of {
                                                                    GHC.Types.I# ww5_s3ydp [Occ=Once] ->
                                                                        let {
                                                                          sat_s3ydD [Occ=Once]
                                                                            :: GHC.Base.String
                                                                          [LclId] =
                                                                              [x34_s3ydi
                                                                               xs_s3ydn] \u []
                                                                                  let {
                                                                                    lvl116_s3ydq [Occ=OnceL]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId,
                                                                                     Unf=OtherCon []] =
                                                                                        CCCS :! [GHC.Show.showList__2
                                                                                                 x34_s3ydi]; } in
                                                                                  let {
                                                                                    showl_s3ydr [Occ=LoopBreaker]
                                                                                      :: [GHC.Types.Int]
                                                                                         -> GHC.Base.String
                                                                                    [LclId,
                                                                                     Arity=1,
                                                                                     Str=<S,1*U>,
                                                                                     Unf=OtherCon []] =
                                                                                        sat-only [lvl116_s3ydq
                                                                                                  showl_s3ydr] \r [ds2_s3yds]
                                                                                            case
                                                                                                ds2_s3yds
                                                                                            of
                                                                                            { [] ->
                                                                                                  lvl116_s3ydq;
                                                                                              : y_s3ydu [Occ=Once!]
                                                                                                ys_s3ydv [Occ=Once] ->
                                                                                                  let {
                                                                                                    sat_s3ydC [Occ=Once]
                                                                                                      :: [GHC.Types.Char]
                                                                                                    [LclId] =
                                                                                                        [showl_s3ydr
                                                                                                         y_s3ydu
                                                                                                         ys_s3ydv] \u []
                                                                                                            case
                                                                                                                y_s3ydu
                                                                                                            of
                                                                                                            { GHC.Types.I# ww7_s3ydx [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_s3ydy [Occ=Once]
                                                                                                                      :: GHC.Base.String
                                                                                                                    [LclId] =
                                                                                                                        [showl_s3ydr
                                                                                                                         ys_s3ydv] \u []
                                                                                                                            showl_s3ydr
                                                                                                                                ys_s3ydv;
                                                                                                                  } in 
                                                                                                                    case
                                                                                                                        GHC.Show.$wshowSignedInt
                                                                                                                            0#
                                                                                                                            ww7_s3ydx
                                                                                                                            sat_s3ydy
                                                                                                                    of
                                                                                                                    { (#,#) ww9_s3ydA [Occ=Once]
                                                                                                                            ww4_s3ydB [Occ=Once] ->
                                                                                                                          : [ww9_s3ydA
                                                                                                                             ww4_s3ydB];
                                                                                                                    };
                                                                                                            };
                                                                                                  } in 
                                                                                                    : [GHC.Show.showList__1
                                                                                                       sat_s3ydC];
                                                                                            };
                                                                                  } in 
                                                                                    showl_s3ydr
                                                                                        xs_s3ydn;
                                                                        } in 
                                                                          case
                                                                              GHC.Show.$wshowSignedInt
                                                                                  0#
                                                                                  ww5_s3ydp
                                                                                  sat_s3ydD
                                                                          of
                                                                          { (#,#) ww7_s3ydF [Occ=Once]
                                                                                  ww4_s3ydG [Occ=Once] ->
                                                                                : [ww7_s3ydF
                                                                                   ww4_s3ydG];
                                                                          };
                                                                  };
                                                        } in  : [GHC.Show.showList__3 sat_s3ydH];
                                                  }; } in
                                        let {
                                          sat_s3ydJ [Occ=Once] :: GHC.Base.String
                                          [LclId] =
                                              CCCS :! [GHC.Show.showSpace1 sat_s3ydI];
                                        } in 
                                          case GHC.Show.$wshowSignedInt 11# ww3_s3ydk sat_s3ydJ of {
                                            (#,#) ww5_s3ydL [Occ=Once] ww6_s3ydM [Occ=Once] ->
                                                : [ww5_s3ydL ww6_s3ydM];
                                          };
                                  };
                        } in 
                          GHC.CString.unpackAppendCString#
                              Text.Read.Lex.$fShowLexeme11 sat_s3ydN;
              } in 
                case >=# [ww_s3ydc 11#] of {
                  __DEFAULT -> p_s3ydh;
                  1# ->
                      let {
                        sat_s3ydS [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p_s3ydh] \r [x34_s3ydP]
                                let {
                                  sat_s3ydR [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p_s3ydh x34_s3ydP] \u []
                                          let {
                                            sat_s3ydQ [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                CCCS :! [GHC.Show.$fShow(,)2 x34_s3ydP];
                                          } in  p_s3ydh sat_s3ydQ;
                                } in  : [GHC.Show.$fShow(,)4 sat_s3ydR];
                      } in  sat_s3ydS;
                };
          Text.Read.Lex.MkDecimal b1_s3ydT [Occ=OnceL]
                                  b2_s3ydU [Occ=Once]
                                  b3_s3ydV [Occ=Once] ->
              let {
                f_s3ydW [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [b2_s3ydU] \u []
                        GHC.Show.$fShowMaybe_$cshowsPrec
                            GHC.Show.$fShow[]_$s$fShow[]
                            Text.Read.Lex.$fShowLexeme10
                            b2_s3ydU; } in
              let {
                g_s3ydX [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [b3_s3ydV] \u []
                        GHC.Show.$fShowMaybe_$cshowsPrec
                            GHC.Show.$fShowInteger Text.Read.Lex.$fShowLexeme10 b3_s3ydV; } in
              let {
                g1_s3ydY [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [b1_s3ydT f_s3ydW g_s3ydX] \r [x34_s3ydZ]
                        let {
                          sat_s3ye2 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [f_s3ydW g_s3ydX x34_s3ydZ] \u []
                                  let {
                                    sat_s3ye0 [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [g_s3ydX x34_s3ydZ] \u [] g_s3ydX x34_s3ydZ; } in
                                  let {
                                    sat_s3ye1 [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        CCCS :! [GHC.Show.showSpace1 sat_s3ye0];
                                  } in  f_s3ydW sat_s3ye1; } in
                        let {
                          sat_s3ye3 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.showSpace1 sat_s3ye2];
                        } in  GHC.Show.showList__ GHC.Show.$fShowInt1 b1_s3ydT sat_s3ye3;
              } in 
                case >=# [ww_s3ydc 11#] of {
                  __DEFAULT ->
                      let {
                        sat_s3ye7 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [g1_s3ydY] \r [x34_s3ye5]
                                let {
                                  sat_s3ye6 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [g1_s3ydY x34_s3ye5] \s [] g1_s3ydY x34_s3ye5;
                                } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme8 sat_s3ye6;
                      } in  sat_s3ye7;
                  1# ->
                      let {
                        sat_s3yec [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [g1_s3ydY] \r [x34_s3ye8]
                                let {
                                  sat_s3yeb [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [g1_s3ydY x34_s3ye8] \u []
                                          let {
                                            sat_s3yea [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [g1_s3ydY x34_s3ye8] \s []
                                                    let {
                                                      sat_s3ye9 [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          CCCS :! [GHC.Show.$fShow(,)2 x34_s3ye8];
                                                    } in  g1_s3ydY sat_s3ye9;
                                          } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme8 sat_s3yea;
                                } in  : [GHC.Show.$fShow(,)4 sat_s3yeb];
                      } in  sat_s3yec;
                };
        };

Text.Read.Lex.$fShowNumber_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> Text.Read.Lex.Number -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [w2_s3yed w3_s3yee]
        case w2_s3yed of {
          GHC.Types.I# ww1_s3yeg [Occ=Once] ->
              Text.Read.Lex.$w$cshowsPrec ww1_s3yeg w3_s3yee;
        };

Text.Read.Lex.$fShowLexeme2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Text.Read.Lex.$fShowNumber_$cshow
  :: Text.Read.Lex.Number -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x34_s3yeh]
        Text.Read.Lex.$w$cshowsPrec 0# x34_s3yeh GHC.Types.[];

Text.Read.Lex.$fShowNumber1
  :: Text.Read.Lex.Number -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w2_s3yei] Text.Read.Lex.$w$cshowsPrec 0# w2_s3yei;

Text.Read.Lex.$fShowNumber_$cshowList
  :: [Text.Read.Lex.Number] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s3yej s_s3yek]
        GHC.Show.showList__ Text.Read.Lex.$fShowNumber1 ls_s3yej s_s3yek;

Text.Read.Lex.$fShowNumber [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Text.Read.Lex.Number
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Text.Read.Lex.$fShowNumber_$cshowsPrec
                                    Text.Read.Lex.$fShowNumber_$cshow
                                    Text.Read.Lex.$fShowNumber_$cshowList];

Text.Read.Lex.$fShowLexeme7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Number "#;

Text.Read.Lex.$fShowLexeme6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.$fShowLexeme7;

Text.Read.Lex.$fShowLexeme5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EOF"#;

Text.Read.Lex.$fShowLexeme4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.$fShowLexeme5;

Text.Read.Lex.$fShowLexeme3 :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ Text.Read.Lex.$fShowLexeme4 eta_B1;

Text.Read.Lex.$fShowLexeme16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Char "#;

Text.Read.Lex.$fShowLexeme15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "String "#;

Text.Read.Lex.$fShowLexeme14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Punc "#;

Text.Read.Lex.$fShowLexeme13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Ident "#;

Text.Read.Lex.$fShowLexeme12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Symbol "#;

Text.Read.Lex.$fShowLexeme_$cshowsPrec
  :: GHC.Types.Int -> Text.Read.Lex.Lexeme -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [a_s3yel ds_s3yem]
        case ds_s3yem of {
          Text.Read.Lex.Char b1_s3yeo [Occ=OnceL*!] ->
              case a_s3yel of {
                GHC.Types.I# x34_s3yeq [Occ=Once] ->
                    case >=# [x34_s3yeq 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3yew [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yeo] \r [x35_s3yes]
                                    let {
                                      sat_s3yev [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yeo x35_s3yes] \u []
                                              case b1_s3yeo of {
                                                GHC.Types.C# ww1_s3yeu [Occ=Once] ->
                                                    GHC.Show.$w$cshowsPrec3 ww1_s3yeu x35_s3yes;
                                              };
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme16 sat_s3yev;
                          } in  sat_s3yew;
                      1# ->
                          let {
                            sat_s3yeD [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yeo] \r [x35_s3yex]
                                    let {
                                      sat_s3yeC [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yeo x35_s3yex] \u []
                                              let {
                                                sat_s3yeB [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3yeo x35_s3yex] \u []
                                                        case b1_s3yeo of {
                                                          GHC.Types.C# ww1_s3yez [Occ=Once] ->
                                                              let {
                                                                sat_s3yeA [Occ=Once]
                                                                  :: GHC.Base.String
                                                                [LclId] =
                                                                    CCCS :! [GHC.Show.$fShow(,)2
                                                                             x35_s3yex];
                                                              } in 
                                                                GHC.Show.$w$cshowsPrec3
                                                                    ww1_s3yez sat_s3yeA;
                                                        };
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme16 sat_s3yeB;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3yeC];
                          } in  sat_s3yeD;
                    };
              };
          Text.Read.Lex.String b1_s3yeE [Occ=OnceL*] ->
              case a_s3yel of {
                GHC.Types.I# x34_s3yeG [Occ=Once] ->
                    case >=# [x34_s3yeG 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3yeM [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yeE] \r [x35_s3yeI]
                                    let {
                                      sat_s3yeK [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yeE x35_s3yeI] \u []
                                              let {
                                                sat_s3yeJ [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3yeI];
                                              } in  GHC.Show.showLitString b1_s3yeE sat_s3yeJ; } in
                                    let {
                                      sat_s3yeL [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3yeK];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme15 sat_s3yeL;
                          } in  sat_s3yeM;
                      1# ->
                          let {
                            sat_s3yeT [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yeE] \r [x35_s3yeN]
                                    let {
                                      sat_s3yeS [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yeE x35_s3yeN] \u []
                                              let {
                                                sat_s3yeQ [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3yeE x35_s3yeN] \u []
                                                        let {
                                                          sat_s3yeO [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3yeN]; } in
                                                        let {
                                                          sat_s3yeP [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3yeO];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3yeE sat_s3yeP; } in
                                              let {
                                                sat_s3yeR [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yeQ];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme15 sat_s3yeR;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3yeS];
                          } in  sat_s3yeT;
                    };
              };
          Text.Read.Lex.Punc b1_s3yeU [Occ=OnceL*] ->
              case a_s3yel of {
                GHC.Types.I# x34_s3yeW [Occ=Once] ->
                    case >=# [x34_s3yeW 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3yf2 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yeU] \r [x35_s3yeY]
                                    let {
                                      sat_s3yf0 [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yeU x35_s3yeY] \u []
                                              let {
                                                sat_s3yeZ [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3yeY];
                                              } in  GHC.Show.showLitString b1_s3yeU sat_s3yeZ; } in
                                    let {
                                      sat_s3yf1 [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3yf0];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme14 sat_s3yf1;
                          } in  sat_s3yf2;
                      1# ->
                          let {
                            sat_s3yf9 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yeU] \r [x35_s3yf3]
                                    let {
                                      sat_s3yf8 [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yeU x35_s3yf3] \u []
                                              let {
                                                sat_s3yf6 [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3yeU x35_s3yf3] \u []
                                                        let {
                                                          sat_s3yf4 [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3yf3]; } in
                                                        let {
                                                          sat_s3yf5 [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3yf4];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3yeU sat_s3yf5; } in
                                              let {
                                                sat_s3yf7 [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yf6];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme14 sat_s3yf7;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3yf8];
                          } in  sat_s3yf9;
                    };
              };
          Text.Read.Lex.Ident b1_s3yfa [Occ=OnceL*] ->
              case a_s3yel of {
                GHC.Types.I# x34_s3yfc [Occ=Once] ->
                    case >=# [x34_s3yfc 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3yfi [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yfa] \r [x35_s3yfe]
                                    let {
                                      sat_s3yfg [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yfa x35_s3yfe] \u []
                                              let {
                                                sat_s3yff [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3yfe];
                                              } in  GHC.Show.showLitString b1_s3yfa sat_s3yff; } in
                                    let {
                                      sat_s3yfh [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3yfg];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme13 sat_s3yfh;
                          } in  sat_s3yfi;
                      1# ->
                          let {
                            sat_s3yfp [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yfa] \r [x35_s3yfj]
                                    let {
                                      sat_s3yfo [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yfa x35_s3yfj] \u []
                                              let {
                                                sat_s3yfm [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3yfa x35_s3yfj] \u []
                                                        let {
                                                          sat_s3yfk [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3yfj]; } in
                                                        let {
                                                          sat_s3yfl [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3yfk];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3yfa sat_s3yfl; } in
                                              let {
                                                sat_s3yfn [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yfm];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme13 sat_s3yfn;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3yfo];
                          } in  sat_s3yfp;
                    };
              };
          Text.Read.Lex.Symbol b1_s3yfq [Occ=OnceL*] ->
              case a_s3yel of {
                GHC.Types.I# x34_s3yfs [Occ=Once] ->
                    case >=# [x34_s3yfs 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3yfy [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yfq] \r [x35_s3yfu]
                                    let {
                                      sat_s3yfw [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yfq x35_s3yfu] \u []
                                              let {
                                                sat_s3yfv [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3yfu];
                                              } in  GHC.Show.showLitString b1_s3yfq sat_s3yfv; } in
                                    let {
                                      sat_s3yfx [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3yfw];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme12 sat_s3yfx;
                          } in  sat_s3yfy;
                      1# ->
                          let {
                            sat_s3yfF [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yfq] \r [x35_s3yfz]
                                    let {
                                      sat_s3yfE [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yfq x35_s3yfz] \u []
                                              let {
                                                sat_s3yfC [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3yfq x35_s3yfz] \u []
                                                        let {
                                                          sat_s3yfA [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3yfz]; } in
                                                        let {
                                                          sat_s3yfB [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3yfA];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3yfq sat_s3yfB; } in
                                              let {
                                                sat_s3yfD [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yfC];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme12 sat_s3yfD;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3yfE];
                          } in  sat_s3yfF;
                    };
              };
          Text.Read.Lex.Number b1_s3yfG [Occ=Once] ->
              case a_s3yel of {
                GHC.Types.I# x34_s3yfI [Occ=Once] ->
                    let {
                      g_s3yfJ [Occ=OnceL*!, Dmd=<L,C(U)>]
                        :: GHC.Base.String -> GHC.Base.String
                      [LclId] =
                          [b1_s3yfG] \u [] Text.Read.Lex.$w$cshowsPrec 11# b1_s3yfG;
                    } in 
                      case >=# [x34_s3yfI 11#] of {
                        __DEFAULT ->
                            let {
                              sat_s3yfN [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s3yfJ] \r [x35_s3yfL]
                                      let {
                                        sat_s3yfM [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s3yfJ x35_s3yfL] \s [] g_s3yfJ x35_s3yfL;
                                      } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme6 sat_s3yfM;
                            } in  sat_s3yfN;
                        1# ->
                            let {
                              sat_s3yfS [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s3yfJ] \r [x35_s3yfO]
                                      let {
                                        sat_s3yfR [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s3yfJ x35_s3yfO] \u []
                                                let {
                                                  sat_s3yfQ [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [g_s3yfJ x35_s3yfO] \s []
                                                          let {
                                                            sat_s3yfP [Occ=Once] :: GHC.Base.String
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)2
                                                                         x35_s3yfO];
                                                          } in  g_s3yfJ sat_s3yfP;
                                                } in 
                                                  GHC.Base.++ Text.Read.Lex.$fShowLexeme6 sat_s3yfQ;
                                      } in  : [GHC.Show.$fShow(,)4 sat_s3yfR];
                            } in  sat_s3yfS;
                      };
              };
          Text.Read.Lex.EOF -> Text.Read.Lex.$fShowLexeme3;
        };

Text.Read.Lex.$fShowLexeme17 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)3 GHC.Types.[]];

Text.Read.Lex.$fShowLexeme_$cshow
  :: Text.Read.Lex.Lexeme -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x34_s3yfT]
        case x34_s3yfT of {
          Text.Read.Lex.Char b1_s3yfV [Occ=Once!] ->
              let {
                sat_s3yfY [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3yfV] \u []
                        case b1_s3yfV of {
                          GHC.Types.C# ww1_s3yfX [Occ=Once] ->
                              GHC.Show.$w$cshowsPrec3 ww1_s3yfX GHC.Types.[];
                        };
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme16 sat_s3yfY;
          Text.Read.Lex.String b1_s3yfZ [Occ=Once] ->
              let {
                sat_s3yg0 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3yfZ] \u []
                        GHC.Show.showLitString b1_s3yfZ Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3yg1 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yg0];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme15 sat_s3yg1;
          Text.Read.Lex.Punc b1_s3yg2 [Occ=Once] ->
              let {
                sat_s3yg3 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3yg2] \u []
                        GHC.Show.showLitString b1_s3yg2 Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3yg4 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yg3];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme14 sat_s3yg4;
          Text.Read.Lex.Ident b1_s3yg5 [Occ=Once] ->
              let {
                sat_s3yg6 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3yg5] \u []
                        GHC.Show.showLitString b1_s3yg5 Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3yg7 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yg6];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme13 sat_s3yg7;
          Text.Read.Lex.Symbol b1_s3yg8 [Occ=Once] ->
              let {
                sat_s3yg9 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3yg8] \u []
                        GHC.Show.showLitString b1_s3yg8 Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3yga [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yg9];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme12 sat_s3yga;
          Text.Read.Lex.Number b1_s3ygb [Occ=Once] ->
              let {
                sat_s3ygc [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3ygb] \s []
                        Text.Read.Lex.$w$cshowsPrec 11# b1_s3ygb GHC.Types.[];
              } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme6 sat_s3ygc;
          Text.Read.Lex.EOF -> Text.Read.Lex.$fShowLexeme4;
        };

Text.Read.Lex.$fShowLexeme1
  :: Text.Read.Lex.Lexeme -> GHC.Show.ShowS
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.Read.Lex.$fShowLexeme_$cshowsPrec
            Text.Read.Lex.$fShowLexeme2 eta_B1;

Text.Read.Lex.$fShowLexeme_$cshowList
  :: [Text.Read.Lex.Lexeme] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s3ygd s_s3yge]
        GHC.Show.showList__ Text.Read.Lex.$fShowLexeme1 ls_s3ygd s_s3yge;

Text.Read.Lex.$fShowLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Text.Read.Lex.Lexeme
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Text.Read.Lex.$fShowLexeme_$cshowsPrec
                                    Text.Read.Lex.$fShowLexeme_$cshow
                                    Text.Read.Lex.$fShowLexeme_$cshowList];

Text.Read.Lex.isSymbolChar4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ",;()[]{}`"#;

Text.Read.Lex.isSymbolChar3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.isSymbolChar4;

Text.Read.Lex.isSymbolChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'\""#;

Text.Read.Lex.isSymbolChar1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.isSymbolChar2;

Text.Read.Lex.isSymbolChar :: GHC.Types.Char -> GHC.Types.Bool
[GblId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [c_s3ygf]
        case
            GHC.List.elem
                GHC.Classes.$fEqChar c_s3ygf Text.Read.Lex.isSymbolChar3
        of
        { GHC.Types.False ->
              case c_s3ygf of ww_s3ygh {
                GHC.Types.C# ww1_s3ygi ->
                    case GHC.Unicode.$wgeneralCategory ww1_s3ygi of {
                      __DEFAULT -> GHC.Types.False [];
                      GHC.Unicode.ConnectorPunctuation ->
                          case ww1_s3ygi of {
                            __DEFAULT -> GHC.Types.True [];
                            '_'# -> GHC.Types.False [];
                          };
                      GHC.Unicode.DashPunctuation -> GHC.Types.True [];
                      GHC.Unicode.OtherPunctuation ->
                          case
                              GHC.List.elem
                                  GHC.Classes.$fEqChar ww_s3ygh Text.Read.Lex.isSymbolChar1
                          of
                          { GHC.Types.False -> GHC.Types.True [];
                            GHC.Types.True -> GHC.Types.False [];
                          };
                      GHC.Unicode.MathSymbol -> GHC.Types.True [];
                      GHC.Unicode.CurrencySymbol -> GHC.Types.True [];
                      GHC.Unicode.ModifierSymbol -> GHC.Types.True [];
                      GHC.Unicode.OtherSymbol -> GHC.Types.True [];
                    };
              };
          GHC.Types.True -> GHC.Types.False [];
        };

lvl_r3y8T :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "_'"#;

lvl1_r3y8U :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_r3y8T;

$wisIdfChar_r3y8V :: GHC.Prim.Char# -> GHC.Types.Bool
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [ww_s3ygm]
        case ord# [ww_s3ygm] of sat_s3ygo {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_s3ygo GHC.Prim.realWorld#] of {
                (#,#) _ [Occ=Dead] ds1_s3ygr [Occ=Once!] ->
                    case ds1_s3ygr of {
                      __DEFAULT -> GHC.Types.True [];
                      0# ->
                          let {
                            sat_s3ygt [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [ww_s3ygm];
                          } in  GHC.List.elem GHC.Classes.$fEqChar sat_s3ygt lvl1_r3y8U;
                    };
              };
        };

isIdfChar_r3y8W :: GHC.Types.Char -> GHC.Types.Bool
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w2_s3ygu]
        case w2_s3ygu of {
          GHC.Types.C# ww1_s3ygw [Occ=Once] -> $wisIdfChar_r3y8V ww1_s3ygw;
        };

reserved_ops_r3y8X :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ".."#;

reserved_ops1_r3y8Y :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops_r3y8X;

reserved_ops2_r3y8Z :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "::"#;

reserved_ops3_r3y90 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops2_r3y8Z;

reserved_ops4_r3y91 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "="#;

reserved_ops5_r3y92 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops4_r3y91;

reserved_ops6_r3y93 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\"#;

reserved_ops7_r3y94 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops6_r3y93;

reserved_ops8_r3y95 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "|"#;

reserved_ops9_r3y96 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops8_r3y95;

reserved_ops10_r3y97 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<-"#;

reserved_ops11_r3y98 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops10_r3y97;

reserved_ops12_r3y99 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "->"#;

reserved_ops13_r3y9a :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops12_r3y99;

reserved_ops14_r3y9b :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "@"#;

reserved_ops15_r3y9c :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops14_r3y9b;

reserved_ops16_r3y9d :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "~"#;

reserved_ops17_r3y9e :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops16_r3y9d;

reserved_ops18_r3y9f :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "=>"#;

reserved_ops19_r3y9g :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops18_r3y9f;

reserved_ops20_r3y9h :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops19_r3y9g GHC.Types.[]];

reserved_ops21_r3y9i :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops17_r3y9e reserved_ops20_r3y9h];

reserved_ops22_r3y9j :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops15_r3y9c reserved_ops21_r3y9i];

reserved_ops23_r3y9k :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops13_r3y9a reserved_ops22_r3y9j];

reserved_ops24_r3y9l :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops11_r3y98 reserved_ops23_r3y9k];

reserved_ops25_r3y9m :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops9_r3y96 reserved_ops24_r3y9l];

reserved_ops26_r3y9n :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops7_r3y94 reserved_ops25_r3y9m];

reserved_ops27_r3y9o :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops5_r3y92 reserved_ops26_r3y9n];

reserved_ops28_r3y9p :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops3_r3y90 reserved_ops27_r3y9o];

reserved_ops29_r3y9q :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops1_r3y8Y reserved_ops28_r3y9p];

Text.Read.Lex.$fEqLexeme_$c==1
  :: Text.Read.Lex.Number -> Text.Read.Lex.Number -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3ygx ds1_s3ygy]
        case ds_s3ygx of {
          Text.Read.Lex.MkNumber a3_s3ygA [Occ=Once!] a4_s3ygB [Occ=Once] ->
              case ds1_s3ygy of {
                Text.Read.Lex.MkNumber b1_s3ygD [Occ=Once!] b2_s3ygE [Occ=Once] ->
                    case a3_s3ygA of {
                      GHC.Types.I# x34_s3ygG [Occ=Once] ->
                          case b1_s3ygD of {
                            GHC.Types.I# y_s3ygI [Occ=Once] ->
                                case ==# [x34_s3ygG y_s3ygI] of {
                                  __DEFAULT -> GHC.Types.False [];
                                  1# -> GHC.Classes.$fEq[]_$s$c== a4_s3ygB b2_s3ygE;
                                };
                          };
                    };
                Text.Read.Lex.MkDecimal _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          Text.Read.Lex.MkDecimal a3_s3ygN [Occ=Once]
                                  a4_s3ygO [Occ=Once!]
                                  a5_s3ygP [Occ=Once!] ->
              case ds1_s3ygy of {
                Text.Read.Lex.MkNumber _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.False [];
                Text.Read.Lex.MkDecimal b1_s3ygT [Occ=Once]
                                        b2_s3ygU [Occ=Once*!]
                                        b3_s3ygV [Occ=Once*!] ->
                    case GHC.Classes.$fEq[]_$s$c== a3_s3ygN b1_s3ygT of {
                      GHC.Types.False -> GHC.Types.False [];
                      GHC.Types.True ->
                          let-no-escape {
                            $j_s3ygX [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Types.Bool
                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                [a5_s3ygP b3_s3ygV] \r []
                                    case a5_s3ygP of {
                                      GHC.Base.Nothing ->
                                          case b3_s3ygV of {
                                            GHC.Base.Nothing -> GHC.Types.True [];
                                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                                          };
                                      GHC.Base.Just a6_s3yh1 [Occ=Once] ->
                                          case b3_s3ygV of {
                                            GHC.Base.Nothing -> GHC.Types.False [];
                                            GHC.Base.Just b4_s3yh3 [Occ=Once] ->
                                                GHC.Integer.Type.eqInteger a6_s3yh1 b4_s3yh3;
                                          };
                                    };
                          } in 
                            case a4_s3ygO of {
                              GHC.Base.Nothing ->
                                  case b2_s3ygU of {
                                    GHC.Base.Nothing -> $j_s3ygX;
                                    GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                                  };
                              GHC.Base.Just a6_s3yh7 [Occ=Once] ->
                                  case b2_s3ygU of {
                                    GHC.Base.Nothing -> GHC.Types.False [];
                                    GHC.Base.Just b4_s3yh9 [Occ=Once] ->
                                        case GHC.Classes.$fEq[]_$s$c== a6_s3yh7 b4_s3yh9 of {
                                          GHC.Types.False -> GHC.Types.False [];
                                          GHC.Types.True -> $j_s3ygX;
                                        };
                                  };
                            };
                    };
              };
        };

Text.Read.Lex.$fEqNumber_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Text.Read.Lex.Number -> Text.Read.Lex.Number -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s3yhb eta1_s3yhc]
        case Text.Read.Lex.$fEqLexeme_$c==1 eta_s3yhb eta1_s3yhc of {
          GHC.Types.False -> GHC.Types.True [];
          GHC.Types.True -> GHC.Types.False [];
        };

Text.Read.Lex.$fEqNumber [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Text.Read.Lex.Number
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Text.Read.Lex.$fEqLexeme_$c==1
                                     Text.Read.Lex.$fEqNumber_$c/=];

Text.Read.Lex.$fEqLexeme_$c==
  :: Text.Read.Lex.Lexeme -> Text.Read.Lex.Lexeme -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3yhe ds1_s3yhf]
        case ds_s3yhe of {
          Text.Read.Lex.Char a3_s3yhh [Occ=Once] ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Char b1_s3yhj [Occ=Once] ->
                    GHC.Classes.eqChar a3_s3yhh b1_s3yhj;
              };
          Text.Read.Lex.String a3_s3yhk [Occ=Once] ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.String b1_s3yhm [Occ=Once] ->
                    GHC.Base.eqString a3_s3yhk b1_s3yhm;
              };
          Text.Read.Lex.Punc a3_s3yhn [Occ=Once] ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Punc b1_s3yhp [Occ=Once] ->
                    GHC.Base.eqString a3_s3yhn b1_s3yhp;
              };
          Text.Read.Lex.Ident a3_s3yhq [Occ=Once] ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Ident b1_s3yhs [Occ=Once] ->
                    GHC.Base.eqString a3_s3yhq b1_s3yhs;
              };
          Text.Read.Lex.Symbol a3_s3yht [Occ=Once] ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Symbol b1_s3yhv [Occ=Once] ->
                    GHC.Base.eqString a3_s3yht b1_s3yhv;
              };
          Text.Read.Lex.Number a3_s3yhw [Occ=Once] ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Number b1_s3yhy [Occ=Once] ->
                    Text.Read.Lex.$fEqLexeme_$c==1 a3_s3yhw b1_s3yhy;
              };
          Text.Read.Lex.EOF ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.EOF -> GHC.Types.True [];
              };
        };

Text.Read.Lex.$fEqLexeme_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Text.Read.Lex.Lexeme -> Text.Read.Lex.Lexeme -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s3yhA eta1_s3yhB]
        case Text.Read.Lex.$fEqLexeme_$c== eta_s3yhA eta1_s3yhB of {
          GHC.Types.False -> GHC.Types.True [];
          GHC.Types.True -> GHC.Types.False [];
        };

Text.Read.Lex.$fEqLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Text.Read.Lex.Lexeme
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Text.Read.Lex.$fEqLexeme_$c==
                                     Text.Read.Lex.$fEqLexeme_$c/=];

Text.Read.Lex.numberToFixed2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

lvl2_r3y9r :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "this should not happen"#;

lvl3_r3y9s :: [GHC.Integer.Type.Integer]
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl2_r3y9r of sat_s3yhD {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s3yhD;
        };

combine_r3y9t
  :: GHC.Integer.Type.Integer
     -> [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [b_s3yhE ds_s3yhF]
        case ds_s3yhF of {
          [] -> [] [];
          : d1_s3yhH [Occ=Once] ds1_s3yhI [Occ=Once!] ->
              case ds1_s3yhI of {
                [] -> lvl3_r3y9s;
                : d2_s3yhK [Occ=Once] ds2_s3yhL [Occ=Once] ->
                    case GHC.Integer.Type.timesInteger d1_s3yhH b_s3yhE of sat_s3yhM {
                      __DEFAULT ->
                          case GHC.Integer.Type.plusInteger sat_s3yhM d2_s3yhK of d_s3yhN {
                            __DEFAULT ->
                                let {
                                  sat_s3yhO [Occ=Once] :: [GHC.Integer.Type.Integer]
                                  [LclId] =
                                      [b_s3yhE ds2_s3yhL] \u [] combine_r3y9t b_s3yhE ds2_s3yhL;
                                } in  : [d_s3yhN sat_s3yhO];
                          };
                    };
              };
        };

Text.Read.Lex.numberToFixed_go [Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Types.Int
     -> [GHC.Integer.Type.Integer]
     -> GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3yhP ds1_s3yhQ ds2_s3yhR]
        case ds2_s3yhR of wild_s3yhS {
          [] -> Text.Read.Lex.numberToFixed2;
          : d_s3yhT [Occ=Once] ds3_s3yhU [Occ=Once!] ->
              case ds3_s3yhU of {
                [] -> d_s3yhT;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    case ds1_s3yhQ of {
                      GHC.Types.I# x34_s3yhZ ->
                          case ># [x34_s3yhZ 40#] of {
                            __DEFAULT ->
                                let-no-escape {
                                  go_s3yi1 [Occ=LoopBreakerT[2]]
                                    :: GHC.Integer.Type.Integer
                                       -> [GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer
                                  [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
                                      sat-only [ds_s3yhP go_s3yi1] \r [r_s3yi2 ds4_s3yi3]
                                          case ds4_s3yi3 of {
                                            [] -> r_s3yi2;
                                            : d1_s3yi5 [Occ=Once] ds5_s3yi6 [Occ=Once] ->
                                                case
                                                    GHC.Integer.Type.timesInteger r_s3yi2 ds_s3yhP
                                                of
                                                sat_s3yi7
                                                { __DEFAULT ->
                                                      case
                                                          GHC.Integer.Type.plusInteger
                                                              sat_s3yi7 d1_s3yi5
                                                      of
                                                      r'_s3yi8
                                                      { __DEFAULT -> go_s3yi1 r'_s3yi8 ds5_s3yi6;
                                                      };
                                                };
                                          };
                                } in  go_s3yi1 Text.Read.Lex.numberToFixed2 wild_s3yhS;
                            1# ->
                                case GHC.Integer.Type.timesInteger ds_s3yhP ds_s3yhP of b'_s3yi9 {
                                  __DEFAULT ->
                                      case remInt# [x34_s3yhZ 2#] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s3yie [Occ=Once] :: [GHC.Integer.Type.Integer]
                                              [LclId] =
                                                  CCCS :! [Text.Read.Lex.numberToFixed2 wild_s3yhS];
                                            } in 
                                              case combine_r3y9t ds_s3yhP sat_s3yie of sat_s3yif {
                                                __DEFAULT ->
                                                    case +# [x34_s3yhZ 1#] of sat_s3yib {
                                                      __DEFAULT ->
                                                          case
                                                              quotInt# [sat_s3yib 2#]
                                                          of
                                                          sat_s3yic
                                                          { __DEFAULT ->
                                                                let {
                                                                  sat_s3yid [Occ=Once]
                                                                    :: GHC.Types.Int
                                                                  [LclId] =
                                                                      CCCS GHC.Types.I#! [sat_s3yic];
                                                                } in 
                                                                  Text.Read.Lex.numberToFixed_go
                                                                      b'_s3yi9 sat_s3yid sat_s3yif;
                                                          };
                                                    };
                                              };
                                        0# ->
                                            case combine_r3y9t ds_s3yhP wild_s3yhS of sat_s3yij {
                                              __DEFAULT ->
                                                  case +# [x34_s3yhZ 1#] of sat_s3yig {
                                                    __DEFAULT ->
                                                        case quotInt# [sat_s3yig 2#] of sat_s3yih {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s3yii [Occ=Once]
                                                                  :: GHC.Types.Int
                                                                [LclId] =
                                                                    CCCS GHC.Types.I#! [sat_s3yih];
                                                              } in 
                                                                Text.Read.Lex.numberToFixed_go
                                                                    b'_s3yi9 sat_s3yii sat_s3yij;
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Text.Read.Lex.valInteger
  :: GHC.Integer.Type.Integer
     -> Text.Read.Lex.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [b0_s3yik ds0_s3yil]
        case
            GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger ds0_s3yil
        of
        sat_s3yio
        { __DEFAULT ->
              let {
                sat_s3yin [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                [LclId] =
                    [ds0_s3yil] \s []
                        case GHC.List.$wlenAcc ds0_s3yil 0# of ww2_s3yim {
                          __DEFAULT -> GHC.Types.I# [ww2_s3yim];
                        };
              } in  Text.Read.Lex.numberToFixed_go b0_s3yik sat_s3yin sat_s3yio;
        };

Text.Read.Lex.$w$sreadIntP [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>,
 Unf=OtherCon []] =
    [] \r [w2_s3yip w3_s3yiq w4_s3yir w5_s3yis]
        let {
          sat_s3yiF [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_s3xhH
          [LclId] =
              [w2_s3yip w3_s3yiq w4_s3yir w5_s3yis] \r [a_s3yit]
                  case w3_s3yiq a_s3yit of {
                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                    GHC.Types.True ->
                        let {
                          sat_s3yiC [Occ=Once]
                            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xhH
                          [LclId] =
                              [w2_s3yip w4_s3yir w5_s3yis a_s3yit] \r [a3_s3yiv]
                                  let {
                                    sat_s3yiB [Occ=Once] :: GHC.Integer.Type.Integer
                                    [LclId] =
                                        [w2_s3yip w4_s3yir a_s3yit a3_s3yiv] \u []
                                            let {
                                              sat_s3yix [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  CCCS :! [a_s3yit a3_s3yiv];
                                            } in 
                                              case
                                                  GHC.Base.map w4_s3yir sat_s3yix
                                              of
                                              ds0_s3yiw [Dmd=<S,U>]
                                              { __DEFAULT ->
                                                    case
                                                        GHC.Base.map
                                                            GHC.Real.$fIntegralInt_$ctoInteger
                                                            ds0_s3yiw
                                                    of
                                                    sat_s3yiA
                                                    { __DEFAULT ->
                                                          let {
                                                            sat_s3yiz [Occ=Once, Dmd=<L,1*U(U)>]
                                                              :: GHC.Types.Int
                                                            [LclId] =
                                                                [ds0_s3yiw] \s []
                                                                    case
                                                                        GHC.List.$wlenAcc
                                                                            ds0_s3yiw 0#
                                                                    of
                                                                    ww2_s3yiy
                                                                    { __DEFAULT ->
                                                                          GHC.Types.I# [ww2_s3yiy];
                                                                    };
                                                          } in 
                                                            Text.Read.Lex.numberToFixed_go
                                                                w2_s3yip sat_s3yiz sat_s3yiA;
                                                    };
                                              };
                                  } in  w5_s3yis sat_s3yiB;
                        } in 
                          case Text.ParserCombinators.ReadP.$wmunch w3_s3yiq sat_s3yiC of {
                            Unit# ww1_s3yiE [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww1_s3yiE];
                          };
                  };
        } in  Unit# [sat_s3yiF];

Text.Read.Lex.readIntP1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [w2_s3yiG w3_s3yiH w4_s3yiI w5_s3yiJ]
        case
            Text.Read.Lex.$w$sreadIntP w2_s3yiG w3_s3yiH w4_s3yiI w5_s3yiJ
        of
        { Unit# ww1_s3yiL [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yiL];
        };

Text.Read.Lex.readIntP_$sreadIntP
  :: GHC.Integer.Type.Integer
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Read.Lex.readIntP1 eta_B4 eta_B3 eta_B2 eta_B1;

Text.Read.Lex.$wreadIntP [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Num.Num a =>
     a
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>,
 Unf=OtherCon []] =
    [] \r [w2_s3yiM w3_s3yiN w4_s3yiO w5_s3yiP w6_s3yiQ]
        let {
          lvl116_s3yiR [Occ=OnceL] :: a_s3xhP
          [LclId] =
              [w2_s3yiM] \u []
                  GHC.Num.fromInteger w2_s3yiM Text.Read.Lex.numberToFixed2; } in
        let {
          sat_s3yjd [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_s3xhU
          [LclId] =
              [w2_s3yiM
               w3_s3yiN
               w4_s3yiO
               w5_s3yiP
               w6_s3yiQ
               lvl116_s3yiR] \r [a3_s3yiS]
                  case w4_s3yiO a3_s3yiS of {
                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                    GHC.Types.True ->
                        let {
                          sat_s3yja [Occ=Once]
                            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xhU
                          [LclId] =
                              [w2_s3yiM
                               w3_s3yiN
                               w5_s3yiP
                               w6_s3yiQ
                               lvl116_s3yiR
                               a3_s3yiS] \r [a4_s3yiU]
                                  let {
                                    sat_s3yj9 [Occ=Once] :: a_s3xhP
                                    [LclId] =
                                        [w2_s3yiM
                                         w3_s3yiN
                                         w5_s3yiP
                                         lvl116_s3yiR
                                         a3_s3yiS
                                         a4_s3yiU] \u []
                                            let {
                                              sat_s3yj7 [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  CCCS :! [a3_s3yiS a4_s3yiU];
                                            } in 
                                              case GHC.Base.map w5_s3yiP sat_s3yj7 of sat_s3yj8 {
                                                __DEFAULT ->
                                                    let-no-escape {
                                                      go_s3yiV [Occ=LoopBreakerT[2]]
                                                        :: a_s3xhP -> [GHC.Types.Int] -> a_s3xhP
                                                      [LclId[JoinId(2)],
                                                       Arity=2,
                                                       Str=<L,U><S,1*U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [w2_s3yiM
                                                                    w3_s3yiN
                                                                    go_s3yiV] \r [r_s3yiW ds_s3yiX]
                                                              case ds_s3yiX of {
                                                                [] -> r_s3yiW;
                                                                : d_s3yiZ [Occ=Once!]
                                                                  ds1_s3yj0 [Occ=Once] ->
                                                                    let {
                                                                      sat_s3yj5 [Occ=Once]
                                                                        :: a_s3xhP
                                                                      [LclId] =
                                                                          [w2_s3yiM d_s3yiZ] \u []
                                                                              let {
                                                                                sat_s3yj4 [Occ=Once]
                                                                                  :: GHC.Integer.Type.Integer
                                                                                [LclId] =
                                                                                    [d_s3yiZ] \u []
                                                                                        case
                                                                                            d_s3yiZ
                                                                                        of
                                                                                        { GHC.Types.I# i_s3yj3 [Occ=Once] ->
                                                                                              GHC.Integer.Type.smallInteger
                                                                                                  i_s3yj3;
                                                                                        };
                                                                              } in 
                                                                                GHC.Num.fromInteger
                                                                                    w2_s3yiM
                                                                                    sat_s3yj4; } in
                                                                    let {
                                                                      sat_s3yj1 [Occ=Once]
                                                                        :: a_s3xhP
                                                                      [LclId] =
                                                                          [w2_s3yiM
                                                                           w3_s3yiN
                                                                           r_s3yiW] \u []
                                                                              GHC.Num.*
                                                                                  w2_s3yiM
                                                                                  r_s3yiW
                                                                                  w3_s3yiN;
                                                                    } in 
                                                                      case
                                                                          GHC.Num.+
                                                                              w2_s3yiM
                                                                              sat_s3yj1
                                                                              sat_s3yj5
                                                                      of
                                                                      r'_s3yj6
                                                                      { __DEFAULT ->
                                                                            go_s3yiV
                                                                                r'_s3yj6 ds1_s3yj0;
                                                                      };
                                                              };
                                                    } in  go_s3yiV lvl116_s3yiR sat_s3yj8;
                                              };
                                  } in  w6_s3yiQ sat_s3yj9;
                        } in 
                          case Text.ParserCombinators.ReadP.$wmunch w4_s3yiO sat_s3yja of {
                            Unit# ww1_s3yjc [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww1_s3yjc];
                          };
                  };
        } in  Unit# [sat_s3yjd];

Text.Read.Lex.readIntP2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Num.Num a =>
     a
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [w2_s3yje w3_s3yjf w4_s3yjg w5_s3yjh w6_s3yji]
        case
            Text.Read.Lex.$wreadIntP
                w2_s3yje w3_s3yjf w4_s3yjg w5_s3yjh w6_s3yji
        of
        { Unit# ww1_s3yjk [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yjk];
        };

Text.Read.Lex.readIntP
  :: forall a.
     GHC.Num.Num a =>
     a
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Read.Lex.readIntP2 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

sat_s3yjl :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

sat_s3yjm :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3yjl GHC.Types.[]];

Text.Read.Lex.numberToFixed1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3yjm;

Text.Read.Lex.numberToInteger
  :: Text.Read.Lex.Number -> GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3yjn]
        case ds_s3yjn of {
          Text.Read.Lex.MkNumber base_s3yjp [Occ=Once] iPart_s3yjq ->
              let {
                sat_s3yjv [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [base_s3yjp iPart_s3yjq] \u []
                        case
                            GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger iPart_s3yjq
                        of
                        sat_s3yju
                        { __DEFAULT ->
                              let {
                                sat_s3yjt [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                                [LclId] =
                                    [iPart_s3yjq] \s []
                                        case GHC.List.$wlenAcc iPart_s3yjq 0# of ww2_s3yjs {
                                          __DEFAULT -> GHC.Types.I# [ww2_s3yjs];
                                        }; } in
                              let {
                                sat_s3yjr [Occ=Once] :: GHC.Integer.Type.Integer
                                [LclId] =
                                    [base_s3yjp] \u []
                                        GHC.Real.$fIntegralInt_$ctoInteger base_s3yjp;
                              } in  Text.Read.Lex.numberToFixed_go sat_s3yjr sat_s3yjt sat_s3yju;
                        };
              } in  GHC.Base.Just [sat_s3yjv];
          Text.Read.Lex.MkDecimal iPart_s3yjw [Occ=Once]
                                  ds1_s3yjx [Occ=Once!]
                                  ds2_s3yjy [Occ=Once!] ->
              case ds1_s3yjx of {
                GHC.Base.Nothing ->
                    case ds2_s3yjy of {
                      GHC.Base.Nothing ->
                          let {
                            sat_s3yjB [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [iPart_s3yjw] \u []
                                    Text.Read.Lex.valInteger
                                        Text.Read.Lex.numberToFixed1 iPart_s3yjw;
                          } in  GHC.Base.Just [sat_s3yjB];
                      GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
                    };
                GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
              };
        };

sat_s3yjE :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s3yjF :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3yjE GHC.Types.[]];

lvl4_r3y9u :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3yjF;

$wfracExp_r3y9v
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Text.Read.Lex.Digits
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=3, Str=<S,U><S,1*U><S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3yjG w3_s3yjH w4_s3yjI]
        case w4_s3yjI of {
          [] ->
              case
                  GHC.Integer.Type.ltInteger# w2_s3yjG Text.Read.Lex.numberToFixed2
              of
              { __DEFAULT ->
                    case
                        GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 w2_s3yjG
                    of
                    sat_s3yjL
                    { __DEFAULT ->
                          case GHC.Integer.Type.timesInteger w3_s3yjH sat_s3yjL of dt_s3yjM {
                            __DEFAULT -> (#,#) [dt_s3yjM GHC.Real.$fEnumRatio1];
                          };
                    };
                1# ->
                    case GHC.Integer.Type.negateInteger w2_s3yjG of sat_s3yjO {
                      __DEFAULT ->
                          case
                              GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 sat_s3yjO
                          of
                          ww1_s3yjN [Dmd=<S,U>]
                          { __DEFAULT ->
                                case GHC.Integer.Type.absInteger ww1_s3yjN of sat_s3yjR {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.signumInteger ww1_s3yjN of sat_s3yjP {
                                        __DEFAULT ->
                                            case
                                                GHC.Integer.Type.timesInteger w3_s3yjH sat_s3yjP
                                            of
                                            sat_s3yjQ
                                            { __DEFAULT -> GHC.Real.$w$sreduce sat_s3yjQ sat_s3yjR;
                                            };
                                      };
                                };
                          };
                    };
              };
          : d_s3yjS [Occ=Once!] ds_s3yjT [Occ=Once] ->
              case
                  GHC.Integer.Type.minusInteger w2_s3yjG lvl4_r3y9u
              of
              exp'_s3yjU
              { __DEFAULT ->
                    case d_s3yjS of {
                      GHC.Types.I# i_s3yjW [Occ=Once] ->
                          case GHC.Integer.Type.smallInteger i_s3yjW of sat_s3yjY {
                            __DEFAULT ->
                                case
                                    GHC.Integer.Type.timesInteger
                                        w3_s3yjH Text.Read.Lex.numberToFixed1
                                of
                                sat_s3yjX
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.plusInteger sat_s3yjX sat_s3yjY
                                      of
                                      mant'_s3yjZ
                                      { __DEFAULT ->
                                            $wfracExp_r3y9v exp'_s3yjU mant'_s3yjZ ds_s3yjT;
                                      };
                                };
                          };
                    };
              };
        };

Text.Read.Lex.numberToFixed_integerTake [Occ=LoopBreaker]
  :: forall a. GHC.Integer.Type.Integer -> [a] -> [a]
[GblId, Arity=2, Str=<S,U><L,1*U>, Unf=OtherCon []] =
    [] \r [n_s3yk0 ds_s3yk1]
        case
            GHC.Integer.Type.leInteger# n_s3yk0 Text.Read.Lex.numberToFixed2
        of
        { __DEFAULT ->
              case ds_s3yk1 of {
                [] -> [] [];
                : x34_s3yk4 [Occ=Once] xs_s3yk5 [Occ=Once] ->
                    let {
                      sat_s3yk7 [Occ=Once] :: [a_a3va7]
                      [LclId] =
                          [n_s3yk0 xs_s3yk5] \u []
                              case
                                  GHC.Integer.Type.minusInteger n_s3yk0 lvl4_r3y9u
                              of
                              sat_s3yk6
                              { __DEFAULT ->
                                    Text.Read.Lex.numberToFixed_integerTake sat_s3yk6 xs_s3yk5;
                              };
                    } in  : [x34_s3yk4 sat_s3yk7];
              };
          1# -> [] [];
        };

Text.Read.Lex.numberToFixed_xs [Occ=LoopBreaker] :: [GHC.Types.Int]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Read.Lex.$fShowLexeme2
                      Text.Read.Lex.numberToFixed_xs];

Text.Read.Lex.numberToFixed
  :: GHC.Integer.Type.Integer
     -> Text.Read.Lex.Number
     -> GHC.Base.Maybe
          (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3yk8 ds1_s3yk9]
        case ds1_s3yk9 of {
          Text.Read.Lex.MkNumber base_s3ykb [Occ=Once] iPart_s3ykc ->
              let {
                sat_s3ykh [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [base_s3ykb iPart_s3ykc] \u []
                        case
                            GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger iPart_s3ykc
                        of
                        sat_s3ykg
                        { __DEFAULT ->
                              let {
                                sat_s3ykf [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                                [LclId] =
                                    [iPart_s3ykc] \s []
                                        case GHC.List.$wlenAcc iPart_s3ykc 0# of ww2_s3yke {
                                          __DEFAULT -> GHC.Types.I# [ww2_s3yke];
                                        }; } in
                              let {
                                sat_s3ykd [Occ=Once] :: GHC.Integer.Type.Integer
                                [LclId] =
                                    [base_s3ykb] \u []
                                        GHC.Real.$fIntegralInt_$ctoInteger base_s3ykb;
                              } in  Text.Read.Lex.numberToFixed_go sat_s3ykd sat_s3ykf sat_s3ykg;
                        }; } in
              let {
                sat_s3yki [Occ=Once]
                  :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                [LclId] =
                    CCCS (,)! [sat_s3ykh Text.Read.Lex.numberToFixed2];
              } in  GHC.Base.Just [sat_s3yki];
          Text.Read.Lex.MkDecimal iPart_s3ykj [Occ=Once*]
                                  ds2_s3ykk [Occ=Once!]
                                  ds3_s3ykl [Occ=Once*!] ->
              case ds2_s3ykk of {
                GHC.Base.Nothing ->
                    case ds3_s3ykl of {
                      GHC.Base.Nothing ->
                          let {
                            sat_s3yko [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [iPart_s3ykj] \u []
                                    Text.Read.Lex.valInteger
                                        Text.Read.Lex.numberToFixed1 iPart_s3ykj; } in
                          let {
                            sat_s3ykp [Occ=Once]
                              :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                            [LclId] =
                                CCCS (,)! [sat_s3yko Text.Read.Lex.numberToFixed2];
                          } in  GHC.Base.Just [sat_s3ykp];
                      GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
                    };
                GHC.Base.Just fPart_s3ykr [Occ=Once] ->
                    case ds3_s3ykl of {
                      GHC.Base.Nothing ->
                          let {
                            sat_s3ykz [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [ds_s3yk8 fPart_s3ykr] \u []
                                    let {
                                      sat_s3ykv [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Int]
                                      [LclId] =
                                          [fPart_s3ykr] \s []
                                              GHC.Base.++
                                                  fPart_s3ykr Text.Read.Lex.numberToFixed_xs;
                                    } in 
                                      case
                                          Text.Read.Lex.numberToFixed_integerTake ds_s3yk8 sat_s3ykv
                                      of
                                      ds0_s3yku [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                GHC.Base.map
                                                    GHC.Real.$fIntegralInt_$ctoInteger ds0_s3yku
                                            of
                                            sat_s3yky
                                            { __DEFAULT ->
                                                  let {
                                                    sat_s3ykx [Occ=Once, Dmd=<L,1*U(U)>]
                                                      :: GHC.Types.Int
                                                    [LclId] =
                                                        [ds0_s3yku] \s []
                                                            case
                                                                GHC.List.$wlenAcc ds0_s3yku 0#
                                                            of
                                                            ww2_s3ykw
                                                            { __DEFAULT -> GHC.Types.I# [ww2_s3ykw];
                                                            };
                                                  } in 
                                                    Text.Read.Lex.numberToFixed_go
                                                        Text.Read.Lex.numberToFixed1
                                                        sat_s3ykx
                                                        sat_s3yky;
                                            };
                                      }; } in
                          let {
                            sat_s3ykt [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [iPart_s3ykj] \u []
                                    Text.Read.Lex.valInteger
                                        Text.Read.Lex.numberToFixed1 iPart_s3ykj; } in
                          let {
                            sat_s3ykA [Occ=Once]
                              :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                            [LclId] =
                                CCCS (,)! [sat_s3ykt sat_s3ykz];
                          } in  GHC.Base.Just [sat_s3ykA];
                      GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
                    };
              };
        };

Text.Read.Lex.$wnumberToRational [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Number
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w2_s3ykC]
        case w2_s3ykC of {
          Text.Read.Lex.MkNumber base_s3ykE [Occ=Once!] iPart_s3ykF ->
              case
                  GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger iPart_s3ykF
              of
              sat_s3ykL
              { __DEFAULT ->
                    let {
                      sat_s3ykK [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                      [LclId] =
                          [iPart_s3ykF] \s []
                              case GHC.List.$wlenAcc iPart_s3ykF 0# of ww2_s3ykJ {
                                __DEFAULT -> GHC.Types.I# [ww2_s3ykJ];
                              }; } in
                    let {
                      sat_s3ykI [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [base_s3ykE] \u []
                              case base_s3ykE of {
                                GHC.Types.I# i_s3ykH [Occ=Once] ->
                                    GHC.Integer.Type.smallInteger i_s3ykH;
                              };
                    } in 
                      case
                          Text.Read.Lex.numberToFixed_go sat_s3ykI sat_s3ykK sat_s3ykL
                      of
                      sat_s3ykM
                      { __DEFAULT ->
                            case
                                GHC.Integer.Type.timesInteger sat_s3ykM lvl4_r3y9u
                            of
                            sat_s3ykN
                            { __DEFAULT -> GHC.Real.$w$sreduce sat_s3ykN lvl4_r3y9u;
                            };
                      };
              };
          Text.Read.Lex.MkDecimal iPart_s3ykO [Occ=Once*]
                                  mFPart_s3ykP [Occ=Once!]
                                  mExp_s3ykQ [Occ=Once*!] ->
              case mFPart_s3ykP of {
                GHC.Base.Nothing ->
                    case mExp_s3ykQ of {
                      GHC.Base.Nothing ->
                          case
                              Text.Read.Lex.valInteger Text.Read.Lex.numberToFixed1 iPart_s3ykO
                          of
                          sat_s3ykT
                          { __DEFAULT ->
                                case
                                    GHC.Integer.Type.timesInteger sat_s3ykT lvl4_r3y9u
                                of
                                sat_s3ykU
                                { __DEFAULT -> GHC.Real.$w$sreduce sat_s3ykU lvl4_r3y9u;
                                };
                          };
                      GHC.Base.Just exp_s3ykV ->
                          case
                              GHC.Integer.Type.geInteger# exp_s3ykV Text.Read.Lex.numberToFixed2
                          of
                          { __DEFAULT ->
                                case GHC.Integer.Type.negateInteger exp_s3ykV of sat_s3ykY {
                                  __DEFAULT ->
                                      case
                                          GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 sat_s3ykY
                                      of
                                      ww1_s3ykX [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.absInteger ww1_s3ykX
                                            of
                                            sat_s3yl2
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.signumInteger ww1_s3ykX
                                                  of
                                                  sat_s3yl0
                                                  { __DEFAULT ->
                                                        case
                                                            Text.Read.Lex.valInteger
                                                                Text.Read.Lex.numberToFixed1
                                                                iPart_s3ykO
                                                        of
                                                        sat_s3ykZ
                                                        { __DEFAULT ->
                                                              case
                                                                  GHC.Integer.Type.timesInteger
                                                                      sat_s3ykZ sat_s3yl0
                                                              of
                                                              sat_s3yl1
                                                              { __DEFAULT ->
                                                                    GHC.Real.$w$sreduce
                                                                        sat_s3yl1 sat_s3yl2;
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                            1# ->
                                case
                                    GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 exp_s3ykV
                                of
                                sat_s3yl4
                                { __DEFAULT ->
                                      case
                                          Text.Read.Lex.valInteger
                                              Text.Read.Lex.numberToFixed1 iPart_s3ykO
                                      of
                                      sat_s3yl3
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.timesInteger sat_s3yl3 sat_s3yl4
                                            of
                                            sat_s3yl5
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.timesInteger
                                                          sat_s3yl5 lvl4_r3y9u
                                                  of
                                                  sat_s3yl6
                                                  { __DEFAULT ->
                                                        GHC.Real.$w$sreduce sat_s3yl6 lvl4_r3y9u;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Base.Just fPart_s3yl7 [Occ=Once*] ->
                    case mExp_s3ykQ of {
                      GHC.Base.Nothing ->
                          case
                              Text.Read.Lex.valInteger Text.Read.Lex.numberToFixed1 iPart_s3ykO
                          of
                          sat_s3yl9
                          { __DEFAULT ->
                                $wfracExp_r3y9v Text.Read.Lex.numberToFixed2 sat_s3yl9 fPart_s3yl7;
                          };
                      GHC.Base.Just exp_s3yla [Occ=Once] ->
                          case
                              Text.Read.Lex.valInteger Text.Read.Lex.numberToFixed1 iPart_s3ykO
                          of
                          sat_s3ylb
                          { __DEFAULT -> $wfracExp_r3y9v exp_s3yla sat_s3ylb fPart_s3yl7;
                          };
                    };
              };
        };

Text.Read.Lex.numberToRational [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Number -> GHC.Real.Rational
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w2_s3ylc]
        case Text.Read.Lex.$wnumberToRational w2_s3ylc of {
          (#,#) ww1_s3yle [Occ=Once] ww2_s3ylf [Occ=Once] ->
              GHC.Real.:% [ww1_s3yle ww2_s3ylf];
        };

Text.Read.Lex.numberToRangedRational3
  :: GHC.Real.Ratio GHC.Integer.Type.Integer
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Real.:%! [Text.Read.Lex.numberToFixed2
                                GHC.Real.$fEnumRatio1];

Text.Read.Lex.numberToRangedRational2
  :: GHC.Base.Maybe GHC.Real.Rational
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Read.Lex.numberToRangedRational3];

Text.Read.Lex.numberToRangedRational1
  :: GHC.Types.Int -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Classes.eqInt Text.Read.Lex.$fShowLexeme2 eta_B1;

sat_s3yli :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

sat_s3ylj :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3yli GHC.Types.[]];

sat_s3ylh :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_s3ylk :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3ylh sat_s3ylj];

sat_s3ylg :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_s3yll :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3ylg sat_s3ylk];

Text.Read.Lex.numberToRangedRational4 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_s3yll;

sat_s3ylo :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s3ylp :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3ylo GHC.Types.[]];

sat_s3yln :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2147483647#];

sat_s3ylq :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3yln sat_s3ylp];

sat_s3ylm :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2147483647#];

sat_s3ylr :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3ylm sat_s3ylq];

Text.Read.Lex.numberToRangedRational5 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3ylr;

Text.Read.Lex.$wnumberToRangedRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.Types.Int
     -> Text.Read.Lex.Number
     -> GHC.Base.Maybe GHC.Real.Rational
[GblId,
 Arity=3,
 Str=<L,1*U(U)><L,1*U(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s3yls ww1_s3ylt w2_s3ylu]
        case w2_s3ylu of wild_s3ylv {
          Text.Read.Lex.MkNumber _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                sat_s3ylB [Occ=Once] :: GHC.Real.Rational
                [LclId] =
                    [wild_s3ylv] \u []
                        case Text.Read.Lex.$wnumberToRational wild_s3ylv of {
                          (#,#) ww3_s3ylz [Occ=Once] ww4_s3ylA [Occ=Once] ->
                              GHC.Real.:% [ww3_s3ylz ww4_s3ylA];
                        };
              } in  GHC.Base.Just [sat_s3ylB];
          Text.Read.Lex.MkDecimal iPart_s3ylC [Occ=Once]
                                  mFPart_s3ylD [Occ=Once!]
                                  ds_s3ylE [Occ=Once!] ->
              case ds_s3ylE of {
                GHC.Base.Nothing ->
                    let {
                      sat_s3ylJ [Occ=Once] :: GHC.Real.Rational
                      [LclId] =
                          [wild_s3ylv] \u []
                              case Text.Read.Lex.$wnumberToRational wild_s3ylv of {
                                (#,#) ww3_s3ylH [Occ=Once] ww4_s3ylI [Occ=Once] ->
                                    GHC.Real.:% [ww3_s3ylH ww4_s3ylI];
                              };
                    } in  GHC.Base.Just [sat_s3ylJ];
                GHC.Base.Just exp_s3ylK ->
                    case
                        GHC.Integer.Type.gtInteger#
                            exp_s3ylK Text.Read.Lex.numberToRangedRational5
                    of
                    { __DEFAULT ->
                          case
                              GHC.Integer.Type.ltInteger#
                                  exp_s3ylK Text.Read.Lex.numberToRangedRational4
                          of
                          { __DEFAULT ->
                                let-no-escape {
                                  $w$j_s3ylN [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U)>]
                                    :: GHC.Prim.Int# -> GHC.Base.Maybe GHC.Real.Rational
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      sat-only [ww_s3yls
                                                ww1_s3ylt
                                                wild_s3ylv
                                                exp_s3ylK] \r [ww2_s3ylO]
                                          case ww1_s3ylt of {
                                            GHC.Types.I# x34_s3ylQ [Occ=Once] ->
                                                case
                                                    GHC.Integer.Type.integerToInt exp_s3ylK
                                                of
                                                wild5_s3ylR
                                                { __DEFAULT ->
                                                      case
                                                          +# [ww2_s3ylO wild5_s3ylR]
                                                      of
                                                      x35_s3ylS [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            case +# [x34_s3ylQ 3#] of sat_s3ylT {
                                                              __DEFAULT ->
                                                                  case ># [x35_s3ylS sat_s3ylT] of {
                                                                    __DEFAULT ->
                                                                        case ww_s3yls of {
                                                                          GHC.Types.I# x36_s3ylW [Occ=Once] ->
                                                                              case
                                                                                  -# [x36_s3ylW 3#]
                                                                              of
                                                                              sat_s3ylX
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        <# [x35_s3ylS
                                                                                            sat_s3ylX]
                                                                                    of
                                                                                    { __DEFAULT ->
                                                                                          let {
                                                                                            sat_s3ym2 [Occ=Once]
                                                                                              :: GHC.Real.Rational
                                                                                            [LclId] =
                                                                                                [wild_s3ylv] \u []
                                                                                                    case
                                                                                                        Text.Read.Lex.$wnumberToRational
                                                                                                            wild_s3ylv
                                                                                                    of
                                                                                                    { (#,#) ww4_s3ym0 [Occ=Once]
                                                                                                            ww5_s3ym1 [Occ=Once] ->
                                                                                                          GHC.Real.:% [ww4_s3ym0
                                                                                                                       ww5_s3ym1];
                                                                                                    };
                                                                                          } in 
                                                                                            GHC.Base.Just [sat_s3ym2];
                                                                                      1# ->
                                                                                          Text.Read.Lex.numberToRangedRational2;
                                                                                    };
                                                                              };
                                                                        };
                                                                    1# -> GHC.Base.Nothing [];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                } in 
                                  case
                                      GHC.List.dropWhile
                                          Text.Read.Lex.numberToRangedRational1 iPart_s3ylC
                                  of
                                  wild4_s3ym3
                                  { [] ->
                                        case mFPart_s3ylD of {
                                          GHC.Base.Nothing -> Text.Read.Lex.numberToRangedRational2;
                                          GHC.Base.Just fPart_s3ym5 [Occ=Once] ->
                                              case
                                                  GHC.List.$wspan
                                                      Text.Read.Lex.numberToRangedRational1
                                                      fPart_s3ym5
                                              of
                                              { (#,#) ww3_s3ym7 [Occ=Once] ww4_s3ym8 [Occ=Once!] ->
                                                    case ww4_s3ym8 of {
                                                      [] -> Text.Read.Lex.numberToRangedRational2;
                                                      : _ [Occ=Dead] _ [Occ=Dead] ->
                                                          case
                                                              GHC.List.$wlenAcc ww3_s3ym7 0#
                                                          of
                                                          ww5_s3ymc
                                                          { __DEFAULT ->
                                                                case
                                                                    negateInt# [ww5_s3ymc]
                                                                of
                                                                sat_s3ymd
                                                                { __DEFAULT -> $w$j_s3ylN sat_s3ymd;
                                                                };
                                                          };
                                                    };
                                              };
                                        };
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case GHC.List.$wlenAcc wild4_s3ym3 0# of ww2_s3ymg {
                                          __DEFAULT -> $w$j_s3ylN ww2_s3ymg;
                                        };
                                  };
                            1# -> GHC.Base.Nothing [];
                          };
                      1# -> GHC.Base.Nothing [];
                    };
              };
        };

Text.Read.Lex.numberToRangedRational [InlPrag=NOUSERINLINE[0]]
  :: (GHC.Types.Int, GHC.Types.Int)
     -> Text.Read.Lex.Number -> GHC.Base.Maybe GHC.Real.Rational
[GblId,
 Arity=2,
 Str=<S,1*U(1*U(U),1*U(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w2_s3ymh w3_s3ymi]
        case w2_s3ymh of {
          (,) ww1_s3ymk [Occ=Once] ww2_s3yml [Occ=Once] ->
              Text.Read.Lex.$wnumberToRangedRational
                  ww1_s3ymk ww2_s3yml w3_s3ymi;
        };

lvl5_r3y9w :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "valDig: Bad base"#;

Text.Read.Lex.readDecP2 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl5_r3y9w of sat_s3ymm {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s3ymm;
        };

sat_s3ymn :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

sat_s3ymo :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3ymn GHC.Types.[]];

Text.Read.Lex.readDecP3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3ymo;

sat_s3ymp :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

sat_s3ymq :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3ymp GHC.Types.[]];

Text.Read.Lex.readDecP4 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3ymq;

Text.Read.Lex.$w$svalDig [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Char# -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [w2_s3ymr ww_s3yms]
        case
            GHC.Integer.Type.eqInteger# w2_s3ymr Text.Read.Lex.readDecP4
        of
        { __DEFAULT ->
              case
                  GHC.Integer.Type.eqInteger# w2_s3ymr Text.Read.Lex.numberToFixed1
              of
              { __DEFAULT ->
                    case
                        GHC.Integer.Type.eqInteger# w2_s3ymr Text.Read.Lex.readDecP3
                    of
                    { __DEFAULT -> Text.Read.Lex.readDecP2;
                      1# ->
                          let-no-escape {
                            $j_s3ymw [Occ=Once*T[0], Dmd=<L,1*U>]
                              :: GHC.Base.Maybe GHC.Types.Int
                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                [ww_s3yms] \r []
                                    let-no-escape {
                                      $j1_s3ymx [Occ=Once*T[0], Dmd=<L,1*U>]
                                        :: GHC.Base.Maybe GHC.Types.Int
                                      [LclId[JoinId(0)], Unf=OtherCon []] =
                                          [ww_s3yms] \r []
                                              case leChar# ['A'# ww_s3yms] of {
                                                __DEFAULT -> GHC.Base.Nothing [];
                                                1# ->
                                                    case leChar# [ww_s3yms 'F'#] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case ord# [ww_s3yms] of sat_s3ymA {
                                                            __DEFAULT ->
                                                                case
                                                                    -# [sat_s3ymA 65#]
                                                                of
                                                                sat_s3ymB
                                                                { __DEFAULT ->
                                                                      case
                                                                          +# [sat_s3ymB 10#]
                                                                      of
                                                                      sat_s3ymC
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s3ymD [Occ=Once]
                                                                                :: GHC.Types.Int
                                                                              [LclId] =
                                                                                  CCCS GHC.Types.I#! [sat_s3ymC];
                                                                            } in 
                                                                              GHC.Base.Just [sat_s3ymD];
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                    } in 
                                      case leChar# ['a'# ww_s3yms] of {
                                        __DEFAULT -> $j1_s3ymx;
                                        1# ->
                                            case leChar# [ww_s3yms 'f'#] of {
                                              __DEFAULT -> $j1_s3ymx;
                                              1# ->
                                                  case ord# [ww_s3yms] of sat_s3ymG {
                                                    __DEFAULT ->
                                                        case -# [sat_s3ymG 97#] of sat_s3ymH {
                                                          __DEFAULT ->
                                                              case +# [sat_s3ymH 10#] of sat_s3ymI {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s3ymJ [Occ=Once]
                                                                        :: GHC.Types.Int
                                                                      [LclId] =
                                                                          CCCS GHC.Types.I#! [sat_s3ymI];
                                                                    } in  GHC.Base.Just [sat_s3ymJ];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                          } in 
                            case leChar# ['0'# ww_s3yms] of {
                              __DEFAULT -> $j_s3ymw;
                              1# ->
                                  case leChar# [ww_s3yms '9'#] of {
                                    __DEFAULT -> $j_s3ymw;
                                    1# ->
                                        case ord# [ww_s3yms] of sat_s3ymM {
                                          __DEFAULT ->
                                              case -# [sat_s3ymM 48#] of sat_s3ymN {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s3ymO [Occ=Once] :: GHC.Types.Int
                                                      [LclId] =
                                                          CCCS GHC.Types.I#! [sat_s3ymN];
                                                    } in  GHC.Base.Just [sat_s3ymO];
                                              };
                                        };
                                  };
                            };
                    };
                1# ->
                    case leChar# ['0'# ww_s3yms] of {
                      __DEFAULT -> GHC.Base.Nothing [];
                      1# ->
                          case leChar# [ww_s3yms '9'#] of {
                            __DEFAULT -> GHC.Base.Nothing [];
                            1# ->
                                case ord# [ww_s3yms] of sat_s3ymR {
                                  __DEFAULT ->
                                      case -# [sat_s3ymR 48#] of sat_s3ymS {
                                        __DEFAULT ->
                                            let {
                                              sat_s3ymT [Occ=Once] :: GHC.Types.Int
                                              [LclId] =
                                                  CCCS GHC.Types.I#! [sat_s3ymS];
                                            } in  GHC.Base.Just [sat_s3ymT];
                                      };
                                };
                          };
                    };
              };
          1# ->
              case leChar# ['0'# ww_s3yms] of {
                __DEFAULT -> GHC.Base.Nothing [];
                1# ->
                    case leChar# [ww_s3yms '7'#] of {
                      __DEFAULT -> GHC.Base.Nothing [];
                      1# ->
                          case ord# [ww_s3yms] of sat_s3ymW {
                            __DEFAULT ->
                                case -# [sat_s3ymW 48#] of sat_s3ymX {
                                  __DEFAULT ->
                                      let {
                                        sat_s3ymY [Occ=Once] :: GHC.Types.Int
                                        [LclId] =
                                            CCCS GHC.Types.I#! [sat_s3ymX];
                                      } in  GHC.Base.Just [sat_s3ymY];
                                };
                          };
                    };
              };
        };

Text.Read.Lex.$wvalDig [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     a -> GHC.Prim.Char# -> GHC.Base.Maybe GHC.Types.Int
[GblId,
 Arity=4,
 Str=<S(C(C(S))L),U(C(C1(U)),A)><L,U(A,A,A,A,A,A,C(U))><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w2_s3ymZ w3_s3yn0 w4_s3yn1 ww_s3yn2]
        let {
          sat_s3yn3 [Occ=Once] :: a_s3xiO
          [LclId] =
              [w3_s3yn0] \u []
                  GHC.Num.fromInteger w3_s3yn0 Text.Read.Lex.readDecP4;
        } in 
          case GHC.Classes.== w2_s3ymZ w4_s3yn1 sat_s3yn3 of {
            GHC.Types.False ->
                let {
                  sat_s3yn5 [Occ=Once] :: a_s3xiO
                  [LclId] =
                      [w3_s3yn0] \u []
                          GHC.Num.fromInteger w3_s3yn0 Text.Read.Lex.numberToFixed1;
                } in 
                  case GHC.Classes.== w2_s3ymZ w4_s3yn1 sat_s3yn5 of {
                    GHC.Types.False ->
                        let {
                          sat_s3yn7 [Occ=Once] :: a_s3xiO
                          [LclId] =
                              [w3_s3yn0] \u []
                                  GHC.Num.fromInteger w3_s3yn0 Text.Read.Lex.readDecP3;
                        } in 
                          case GHC.Classes.== w2_s3ymZ w4_s3yn1 sat_s3yn7 of {
                            GHC.Types.False -> Text.Read.Lex.readDecP2;
                            GHC.Types.True ->
                                let-no-escape {
                                  $j_s3yn9 [Occ=Once*T[0], Dmd=<L,1*U>]
                                    :: GHC.Base.Maybe GHC.Types.Int
                                  [LclId[JoinId(0)], Unf=OtherCon []] =
                                      [ww_s3yn2] \r []
                                          let-no-escape {
                                            $j1_s3yna [Occ=Once*T[0], Dmd=<L,1*U>]
                                              :: GHC.Base.Maybe GHC.Types.Int
                                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                                [ww_s3yn2] \r []
                                                    case leChar# ['A'# ww_s3yn2] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case leChar# [ww_s3yn2 'F'#] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                case ord# [ww_s3yn2] of sat_s3ynd {
                                                                  __DEFAULT ->
                                                                      case
                                                                          -# [sat_s3ynd 65#]
                                                                      of
                                                                      sat_s3yne
                                                                      { __DEFAULT ->
                                                                            case
                                                                                +# [sat_s3yne 10#]
                                                                            of
                                                                            sat_s3ynf
                                                                            { __DEFAULT ->
                                                                                  let {
                                                                                    sat_s3yng [Occ=Once]
                                                                                      :: GHC.Types.Int
                                                                                    [LclId] =
                                                                                        CCCS GHC.Types.I#! [sat_s3ynf];
                                                                                  } in 
                                                                                    GHC.Base.Just [sat_s3yng];
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                          } in 
                                            case leChar# ['a'# ww_s3yn2] of {
                                              __DEFAULT -> $j1_s3yna;
                                              1# ->
                                                  case leChar# [ww_s3yn2 'f'#] of {
                                                    __DEFAULT -> $j1_s3yna;
                                                    1# ->
                                                        case ord# [ww_s3yn2] of sat_s3ynj {
                                                          __DEFAULT ->
                                                              case -# [sat_s3ynj 97#] of sat_s3ynk {
                                                                __DEFAULT ->
                                                                    case
                                                                        +# [sat_s3ynk 10#]
                                                                    of
                                                                    sat_s3ynl
                                                                    { __DEFAULT ->
                                                                          let {
                                                                            sat_s3ynm [Occ=Once]
                                                                              :: GHC.Types.Int
                                                                            [LclId] =
                                                                                CCCS GHC.Types.I#! [sat_s3ynl];
                                                                          } in 
                                                                            GHC.Base.Just [sat_s3ynm];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                } in 
                                  case leChar# ['0'# ww_s3yn2] of {
                                    __DEFAULT -> $j_s3yn9;
                                    1# ->
                                        case leChar# [ww_s3yn2 '9'#] of {
                                          __DEFAULT -> $j_s3yn9;
                                          1# ->
                                              case ord# [ww_s3yn2] of sat_s3ynp {
                                                __DEFAULT ->
                                                    case -# [sat_s3ynp 48#] of sat_s3ynq {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s3ynr [Occ=Once] :: GHC.Types.Int
                                                            [LclId] =
                                                                CCCS GHC.Types.I#! [sat_s3ynq];
                                                          } in  GHC.Base.Just [sat_s3ynr];
                                                    };
                                              };
                                        };
                                  };
                          };
                    GHC.Types.True ->
                        case leChar# ['0'# ww_s3yn2] of {
                          __DEFAULT -> GHC.Base.Nothing [];
                          1# ->
                              case leChar# [ww_s3yn2 '9'#] of {
                                __DEFAULT -> GHC.Base.Nothing [];
                                1# ->
                                    case ord# [ww_s3yn2] of sat_s3ynu {
                                      __DEFAULT ->
                                          case -# [sat_s3ynu 48#] of sat_s3ynv {
                                            __DEFAULT ->
                                                let {
                                                  sat_s3ynw [Occ=Once] :: GHC.Types.Int
                                                  [LclId] =
                                                      CCCS GHC.Types.I#! [sat_s3ynv];
                                                } in  GHC.Base.Just [sat_s3ynw];
                                          };
                                    };
                              };
                        };
                  };
            GHC.Types.True ->
                case leChar# ['0'# ww_s3yn2] of {
                  __DEFAULT -> GHC.Base.Nothing [];
                  1# ->
                      case leChar# [ww_s3yn2 '7'#] of {
                        __DEFAULT -> GHC.Base.Nothing [];
                        1# ->
                            case ord# [ww_s3yn2] of sat_s3ynz {
                              __DEFAULT ->
                                  case -# [sat_s3ynz 48#] of sat_s3ynA {
                                    __DEFAULT ->
                                        let {
                                          sat_s3ynB [Occ=Once] :: GHC.Types.Int
                                          [LclId] =
                                              CCCS GHC.Types.I#! [sat_s3ynA];
                                        } in  GHC.Base.Just [sat_s3ynB];
                                  };
                            };
                      };
                };
          };

Text.Read.Lex.$w$sreadIntP' [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U><L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3ynC w3_s3ynD]
        let {
          sat_s3ynP [Occ=Once] :: GHC.Types.Char -> GHC.Types.Int
          [LclId] =
              [w2_s3ynC] \r [c_s3ynK]
                  case c_s3ynK of {
                    GHC.Types.C# ww1_s3ynM [Occ=Once] ->
                        case Text.Read.Lex.$w$svalDig w2_s3ynC ww1_s3ynM of {
                          GHC.Base.Nothing -> Text.Read.Lex.$fShowLexeme2;
                          GHC.Base.Just x34_s3ynO [Occ=Once] -> x34_s3ynO;
                        };
                  }; } in
        let {
          sat_s3ynJ [Occ=Once] :: GHC.Types.Char -> GHC.Types.Bool
          [LclId] =
              [w2_s3ynC] \r [c_s3ynE]
                  case c_s3ynE of {
                    GHC.Types.C# ww1_s3ynG [Occ=Once] ->
                        case Text.Read.Lex.$w$svalDig w2_s3ynC ww1_s3ynG of {
                          GHC.Base.Nothing -> GHC.Types.False [];
                          GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                        };
                  };
        } in 
          Text.Read.Lex.$w$sreadIntP w2_s3ynC sat_s3ynJ sat_s3ynP w3_s3ynD;

Text.Read.Lex.$wreadIntP' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     a
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)>,
 Unf=OtherCon []] =
    [] \r [w2_s3ynQ w3_s3ynR w4_s3ynS w5_s3ynT]
        let {
          sat_s3yo5 [Occ=Once] :: GHC.Types.Char -> GHC.Types.Int
          [LclId] =
              [w2_s3ynQ w3_s3ynR w4_s3ynS] \r [c_s3yo0]
                  case c_s3yo0 of {
                    GHC.Types.C# ww1_s3yo2 [Occ=Once] ->
                        case
                            Text.Read.Lex.$wvalDig w2_s3ynQ w3_s3ynR w4_s3ynS ww1_s3yo2
                        of
                        { GHC.Base.Nothing -> Text.Read.Lex.$fShowLexeme2;
                          GHC.Base.Just x34_s3yo4 [Occ=Once] -> x34_s3yo4;
                        };
                  }; } in
        let {
          sat_s3ynZ [Occ=Once] :: GHC.Types.Char -> GHC.Types.Bool
          [LclId] =
              [w2_s3ynQ w3_s3ynR w4_s3ynS] \r [c_s3ynU]
                  case c_s3ynU of {
                    GHC.Types.C# ww1_s3ynW [Occ=Once] ->
                        case
                            Text.Read.Lex.$wvalDig w2_s3ynQ w3_s3ynR w4_s3ynS ww1_s3ynW
                        of
                        { GHC.Base.Nothing -> GHC.Types.False [];
                          GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                        };
                  };
        } in 
          Text.Read.Lex.$wreadIntP
              w3_s3ynR w4_s3ynS sat_s3ynZ sat_s3yo5 w5_s3ynT;

Text.Read.Lex.readDecP6 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     a
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [w2_s3yo6 w3_s3yo7 w4_s3yo8 w5_s3yo9]
        case
            Text.Read.Lex.$wreadIntP' w2_s3yo6 w3_s3yo7 w4_s3yo8 w5_s3yo9
        of
        { Unit# ww1_s3yob [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yob];
        };

Text.Read.Lex.readOctP1
  :: forall b.
     (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3yoc]
        case
            Text.Read.Lex.$w$sreadIntP' Text.Read.Lex.readDecP4 w2_s3yoc
        of
        { Unit# ww1_s3yoe [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yoe];
        };

Text.Read.Lex.readOctP_$sreadOctP
  :: Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.readOctP1 eta_B1;

Text.Read.Lex.readOctP2
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [$dEq_s3yof $dNum_s3yog]
        let {
          w2_s3yoh [Occ=OnceL] :: a_a3v4p
          [LclId] =
              [$dNum_s3yog] \u []
                  GHC.Num.fromInteger $dNum_s3yog Text.Read.Lex.readDecP4; } in
        let {
          sat_s3yol [Occ=OnceT[0]]
            :: forall b.
               (a_a3v4p -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [$dEq_s3yof $dNum_s3yog w2_s3yoh] \r [w3_s3yoi]
                  case
                      Text.Read.Lex.$wreadIntP' $dEq_s3yof $dNum_s3yog w2_s3yoh w3_s3yoi
                  of
                  { Unit# ww1_s3yok [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3yok];
                  };
        } in  sat_s3yol;

Text.Read.Lex.readOctP
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.readOctP2 eta_B2 eta_B1;

Text.Read.Lex.readDecP1
  :: forall b.
     (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3yom]
        case
            Text.Read.Lex.$w$sreadIntP' Text.Read.Lex.numberToFixed1 w2_s3yom
        of
        { Unit# ww1_s3yoo [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yoo];
        };

Text.Read.Lex.readDecP_$sreadDecP
  :: Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.readDecP1 eta_B1;

Text.Read.Lex.readDecP5
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [$dEq_s3yop $dNum_s3yoq]
        let {
          w2_s3yor [Occ=OnceL] :: a_a3v4H
          [LclId] =
              [$dNum_s3yoq] \u []
                  GHC.Num.fromInteger $dNum_s3yoq Text.Read.Lex.numberToFixed1; } in
        let {
          sat_s3yov [Occ=OnceT[0]]
            :: forall b.
               (a_a3v4H -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [$dEq_s3yop $dNum_s3yoq w2_s3yor] \r [w3_s3yos]
                  case
                      Text.Read.Lex.$wreadIntP' $dEq_s3yop $dNum_s3yoq w2_s3yor w3_s3yos
                  of
                  { Unit# ww1_s3you [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3you];
                  };
        } in  sat_s3yov;

Text.Read.Lex.readDecP
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.readDecP5 eta_B2 eta_B1;

Text.Read.Lex.readHexP1
  :: forall b.
     (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3yow]
        case
            Text.Read.Lex.$w$sreadIntP' Text.Read.Lex.readDecP3 w2_s3yow
        of
        { Unit# ww1_s3yoy [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yoy];
        };

Text.Read.Lex.readHexP_$sreadHexP
  :: Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.readHexP1 eta_B1;

Text.Read.Lex.readHexP2
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [$dEq_s3yoz $dNum_s3yoA]
        let {
          w2_s3yoB [Occ=OnceL] :: a_a3v4Z
          [LclId] =
              [$dNum_s3yoA] \u []
                  GHC.Num.fromInteger $dNum_s3yoA Text.Read.Lex.readDecP3; } in
        let {
          sat_s3yoF [Occ=OnceT[0]]
            :: forall b.
               (a_a3v4Z -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [$dEq_s3yoz $dNum_s3yoA w2_s3yoB] \r [w3_s3yoC]
                  case
                      Text.Read.Lex.$wreadIntP' $dEq_s3yoz $dNum_s3yoA w2_s3yoB w3_s3yoC
                  of
                  { Unit# ww1_s3yoE [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3yoE];
                  };
        } in  sat_s3yoF;

Text.Read.Lex.readHexP
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.readHexP2 eta_B2 eta_B1;

$wlexDigits_r3y9x
  :: GHC.Types.Int
     -> forall b.
        (Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U(U)><L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3yoG w3_s3yoH]
        let {
          lvl116_s3yoI [Occ=OnceL, Dmd=<L,C(U)>]
            :: [GHC.Types.Int] -> Text.ParserCombinators.ReadP.P b_s3xjl
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              [w3_s3yoH] \r [a3_s3yoJ]
                  case a3_s3yoJ of wild_s3yoK {
                    [] -> Text.ParserCombinators.ReadP.Fail [];
                    : _ [Occ=Dead] _ [Occ=Dead] -> w3_s3yoH wild_s3yoK;
                  }; } in
        let {
          scan_s3yoN [Occ=LoopBreaker]
            :: forall a.
               [GHC.Types.Char]
               -> ([GHC.Types.Int] -> a)
               -> forall b1.
                  (a -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId,
           Arity=3,
           Str=<S,1*U><L,1*C1(U)><L,1*C1(U)>,
           Unf=OtherCon []] =
              sat-only [w2_s3yoG scan_s3yoN] \r [ds_s3yoO f_s3yoP eta_s3yoQ]
                  case ds_s3yoO of {
                    [] ->
                        let {
                          sat_s3yoS [Occ=Once] :: a_a3vca
                          [LclId] =
                              [f_s3yoP] \u [] f_s3yoP GHC.Types.[];
                        } in  eta_s3yoQ sat_s3yoS;
                    : c_s3yoT [Occ=Once!] cs_s3yoU [Occ=Once] ->
                        case w2_s3yoG of {
                          GHC.Types.I# ww1_s3yoW [Occ=Once!] ->
                              case c_s3yoT of {
                                GHC.Types.C# ww3_s3yoY ->
                                    let-no-escape {
                                      $j_s3yoZ [Dmd=<L,1*C1(U)>]
                                        :: GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1_X3npr
                                      [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                          sat-only [scan_s3yoN
                                                    f_s3yoP
                                                    eta_s3yoQ
                                                    cs_s3yoU] \r [n_s3yp0]
                                              let {
                                                lvl117_s3yp1 [Occ=OnceL]
                                                  :: Text.ParserCombinators.ReadP.P b1_X3npr
                                                [LclId] =
                                                    [scan_s3yoN
                                                     f_s3yoP
                                                     eta_s3yoQ
                                                     cs_s3yoU
                                                     n_s3yp0] \u []
                                                        let {
                                                          sat_s3yp4 [Occ=Once]
                                                            :: [GHC.Types.Int] -> a_a3vca
                                                          [LclId] =
                                                              [f_s3yoP n_s3yp0] \r [x34_s3yp2]
                                                                  let {
                                                                    sat_s3yp3 [Occ=Once]
                                                                      :: [GHC.Types.Int]
                                                                    [LclId] =
                                                                        CCCS :! [n_s3yp0 x34_s3yp2];
                                                                  } in  f_s3yoP sat_s3yp3;
                                                        } in 
                                                          scan_s3yoN
                                                              cs_s3yoU sat_s3yp4 eta_s3yoQ; } in
                                              let {
                                                sat_s3yp6 [Occ=Once]
                                                  :: GHC.Types.Char
                                                     -> Text.ParserCombinators.ReadP.P b1_X3npr
                                                [LclId] =
                                                    [lvl117_s3yp1] \r [a3_s3yp5] lvl117_s3yp1;
                                              } in  Text.ParserCombinators.ReadP.Get [sat_s3yp6];
                                    } in 
                                      case ww1_s3yoW of {
                                        __DEFAULT -> Text.Read.Lex.readDecP2;
                                        8# ->
                                            case leChar# ['0'# ww3_s3yoY] of {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s3ypa [Occ=Once] :: a_a3vca
                                                    [LclId] =
                                                        [f_s3yoP] \u [] f_s3yoP GHC.Types.[];
                                                  } in  eta_s3yoQ sat_s3ypa;
                                              1# ->
                                                  case leChar# [ww3_s3yoY '7'#] of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s3ypc [Occ=Once] :: a_a3vca
                                                          [LclId] =
                                                              [f_s3yoP] \u [] f_s3yoP GHC.Types.[];
                                                        } in  eta_s3yoQ sat_s3ypc;
                                                    1# ->
                                                        case ord# [ww3_s3yoY] of sat_s3ypd {
                                                          __DEFAULT ->
                                                              case -# [sat_s3ypd 48#] of sat_s3ype {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s3ypf [Occ=Once]
                                                                        :: GHC.Types.Int
                                                                      [LclId] =
                                                                          CCCS GHC.Types.I#! [sat_s3ype];
                                                                    } in  $j_s3yoZ sat_s3ypf;
                                                              };
                                                        };
                                                  };
                                            };
                                        10# ->
                                            case leChar# ['0'# ww3_s3yoY] of {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s3yph [Occ=Once] :: a_a3vca
                                                    [LclId] =
                                                        [f_s3yoP] \u [] f_s3yoP GHC.Types.[];
                                                  } in  eta_s3yoQ sat_s3yph;
                                              1# ->
                                                  case leChar# [ww3_s3yoY '9'#] of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s3ypj [Occ=Once] :: a_a3vca
                                                          [LclId] =
                                                              [f_s3yoP] \u [] f_s3yoP GHC.Types.[];
                                                        } in  eta_s3yoQ sat_s3ypj;
                                                    1# ->
                                                        case ord# [ww3_s3yoY] of sat_s3ypk {
                                                          __DEFAULT ->
                                                              case -# [sat_s3ypk 48#] of sat_s3ypl {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s3ypm [Occ=Once]
                                                                        :: GHC.Types.Int
                                                                      [LclId] =
                                                                          CCCS GHC.Types.I#! [sat_s3ypl];
                                                                    } in  $j_s3yoZ sat_s3ypm;
                                                              };
                                                        };
                                                  };
                                            };
                                        16# ->
                                            let-no-escape {
                                              $j1_s3ypn [Occ=Once*T[0], Dmd=<L,1*U>]
                                                :: Text.ParserCombinators.ReadP.P b1_X3npr
                                              [LclId[JoinId(0)], Unf=OtherCon []] =
                                                  [f_s3yoP eta_s3yoQ ww3_s3yoY $j_s3yoZ] \r []
                                                      let-no-escape {
                                                        $j2_s3ypo [Occ=Once*T[0], Dmd=<L,1*U>]
                                                          :: Text.ParserCombinators.ReadP.P b1_X3npr
                                                        [LclId[JoinId(0)], Unf=OtherCon []] =
                                                            [f_s3yoP
                                                             eta_s3yoQ
                                                             ww3_s3yoY
                                                             $j_s3yoZ] \r []
                                                                case leChar# ['A'# ww3_s3yoY] of {
                                                                  __DEFAULT ->
                                                                      let {
                                                                        sat_s3ypq [Occ=Once]
                                                                          :: a_a3vca
                                                                        [LclId] =
                                                                            [f_s3yoP] \u []
                                                                                f_s3yoP
                                                                                    GHC.Types.[];
                                                                      } in  eta_s3yoQ sat_s3ypq;
                                                                  1# ->
                                                                      case
                                                                          leChar# [ww3_s3yoY 'F'#]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s3yps [Occ=Once]
                                                                                :: a_a3vca
                                                                              [LclId] =
                                                                                  [f_s3yoP] \u []
                                                                                      f_s3yoP
                                                                                          GHC.Types.[];
                                                                            } in 
                                                                              eta_s3yoQ sat_s3yps;
                                                                        1# ->
                                                                            case
                                                                                ord# [ww3_s3yoY]
                                                                            of
                                                                            sat_s3ypt
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      -# [sat_s3ypt
                                                                                          65#]
                                                                                  of
                                                                                  sat_s3ypu
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            +# [sat_s3ypu
                                                                                                10#]
                                                                                        of
                                                                                        sat_s3ypv
                                                                                        { __DEFAULT ->
                                                                                              let {
                                                                                                sat_s3ypw [Occ=Once]
                                                                                                  :: GHC.Types.Int
                                                                                                [LclId] =
                                                                                                    CCCS GHC.Types.I#! [sat_s3ypv];
                                                                                              } in 
                                                                                                $j_s3yoZ
                                                                                                    sat_s3ypw;
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                      } in 
                                                        case leChar# ['a'# ww3_s3yoY] of {
                                                          __DEFAULT -> $j2_s3ypo;
                                                          1# ->
                                                              case leChar# [ww3_s3yoY 'f'#] of {
                                                                __DEFAULT -> $j2_s3ypo;
                                                                1# ->
                                                                    case
                                                                        ord# [ww3_s3yoY]
                                                                    of
                                                                    sat_s3ypz
                                                                    { __DEFAULT ->
                                                                          case
                                                                              -# [sat_s3ypz 97#]
                                                                          of
                                                                          sat_s3ypA
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    +# [sat_s3ypA
                                                                                        10#]
                                                                                of
                                                                                sat_s3ypB
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s3ypC [Occ=Once]
                                                                                          :: GHC.Types.Int
                                                                                        [LclId] =
                                                                                            CCCS GHC.Types.I#! [sat_s3ypB];
                                                                                      } in 
                                                                                        $j_s3yoZ
                                                                                            sat_s3ypC;
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                            } in 
                                              case leChar# ['0'# ww3_s3yoY] of {
                                                __DEFAULT -> $j1_s3ypn;
                                                1# ->
                                                    case leChar# [ww3_s3yoY '9'#] of {
                                                      __DEFAULT -> $j1_s3ypn;
                                                      1# ->
                                                          case ord# [ww3_s3yoY] of sat_s3ypF {
                                                            __DEFAULT ->
                                                                case
                                                                    -# [sat_s3ypF 48#]
                                                                of
                                                                sat_s3ypG
                                                                { __DEFAULT ->
                                                                      let {
                                                                        sat_s3ypH [Occ=Once]
                                                                          :: GHC.Types.Int
                                                                        [LclId] =
                                                                            CCCS GHC.Types.I#! [sat_s3ypG];
                                                                      } in  $j_s3yoZ sat_s3ypH;
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                              };
                        };
                  }; } in
        let {
          sat_s3ypJ [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xjl
          [LclId] =
              [lvl116_s3yoI scan_s3yoN] \r [a3_s3ypI]
                  scan_s3yoN a3_s3ypI GHC.Base.id lvl116_s3yoI;
        } in  Unit# [sat_s3ypJ];

a1_r3y9y :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

a2_r3y9z :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

$wlexHexOct_r3y9A
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3ypK]
        let {
          lvl116_s3ypL [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId] =
              [w2_s3ypK] \u []
                  let {
                    sat_s3ypP [Occ=Once]
                      :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xjx
                    [LclId] =
                        [w2_s3ypK] \r [a3_s3ypM]
                            let {
                              sat_s3ypN [Occ=Once] :: Text.Read.Lex.Number
                              [LclId] =
                                  CCCS Text.Read.Lex.MkNumber! [a2_r3y9z a3_s3ypM]; } in
                            let {
                              sat_s3ypO [Occ=Once] :: Text.Read.Lex.Lexeme
                              [LclId] =
                                  CCCS Text.Read.Lex.Number! [sat_s3ypN];
                            } in  w2_s3ypK sat_s3ypO;
                  } in 
                    case $wlexDigits_r3y9x a2_r3y9z sat_s3ypP of {
                      Unit# ww1_s3ypR [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3ypR];
                    }; } in
        let {
          lvl117_s3ypS [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId] =
              [w2_s3ypK] \u []
                  let {
                    sat_s3ypW [Occ=Once]
                      :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xjx
                    [LclId] =
                        [w2_s3ypK] \r [a3_s3ypT]
                            let {
                              sat_s3ypU [Occ=Once] :: Text.Read.Lex.Number
                              [LclId] =
                                  CCCS Text.Read.Lex.MkNumber! [a1_r3y9y a3_s3ypT]; } in
                            let {
                              sat_s3ypV [Occ=Once] :: Text.Read.Lex.Lexeme
                              [LclId] =
                                  CCCS Text.Read.Lex.Number! [sat_s3ypU];
                            } in  w2_s3ypK sat_s3ypV;
                  } in 
                    case $wlexDigits_r3y9x a1_r3y9y sat_s3ypW of {
                      Unit# ww1_s3ypY [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3ypY];
                    }; } in
        let {
          lvl118_s3ypZ [InlPrag=NOUSERINLINE[0], Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
              [lvl116_s3ypL lvl117_s3ypS] \r [w3_s3yq0]
                  case w3_s3yq0 of {
                    GHC.Types.C# ww1_s3yq2 [Occ=Once!] ->
                        case ww1_s3yq2 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'O'# -> lvl117_s3ypS;
                          'X'# -> lvl116_s3ypL;
                          'o'# -> lvl117_s3ypS;
                          'x'# -> lvl116_s3ypL;
                        };
                  }; } in
        let {
          lvl119_s3yq4 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl118_s3ypZ]; } in
        let {
          sat_s3yq9 [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId] =
              [lvl119_s3yq4] \r [a_s3yq5]
                  case a_s3yq5 of {
                    GHC.Types.C# y_s3yq7 [Occ=Once!] ->
                        case y_s3yq7 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '0'# -> lvl119_s3yq4;
                        };
                  };
        } in  Unit# [sat_s3yq9];

lexHexOct_r3y9B
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3yqa]
        case $wlexHexOct_r3y9A w2_s3yqa of {
          Unit# ww1_s3yqc [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yqc];
        };

lvl6_r3y9C :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

$wlexFrac_r3y9D
  :: forall b1.
     (GHC.Base.Maybe Text.Read.Lex.Digits
      -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3yqd]
        let {
          lvl116_s3yqe [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xjD
          [LclId] =
              [w2_s3yqd] \u []
                  let {
                    sat_s3yqh [Occ=Once]
                      :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xjD
                    [LclId] =
                        [w2_s3yqd] \r [a3_s3yqf]
                            let {
                              sat_s3yqg [Occ=Once] :: GHC.Base.Maybe Text.Read.Lex.Digits
                              [LclId] =
                                  CCCS GHC.Base.Just! [a3_s3yqf];
                            } in  w2_s3yqd sat_s3yqg;
                  } in 
                    case $wlexDigits_r3y9x lvl6_r3y9C sat_s3yqh of {
                      Unit# ww1_s3yqj [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3yqj];
                    }; } in
        let {
          sat_s3yqo [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xjD
          [LclId] =
              [lvl116_s3yqe] \r [a_s3yqk]
                  case a_s3yqk of {
                    GHC.Types.C# y_s3yqm [Occ=Once!] ->
                        case y_s3yqm of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '.'# -> lvl116_s3yqe;
                        };
                  };
        } in  Unit# [sat_s3yqo];

lexFrac_r3y9E
  :: forall b1.
     (GHC.Base.Maybe Text.Read.Lex.Digits
      -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3yqp]
        case $wlexFrac_r3y9D w2_s3yqp of {
          Unit# ww1_s3yqr [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yqr];
        };

m1_r3y9F :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SOH"#;

m2_r3y9G :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m1_r3y9F;

x_r3y9H :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SOH'#];

m3_r3y9I :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SO"#;

m4_r3y9J :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m3_r3y9I;

x1_r3y9K :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SO'#];

m5_r3y9L :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NUL"#;

m6_r3y9M :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m5_r3y9L;

x2_r3y9N :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\NUL'#];

m7_r3y9O :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "STX"#;

m8_r3y9P :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m7_r3y9O;

x3_r3y9Q :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\STX'#];

m9_r3y9R :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETX"#;

m10_r3y9S :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m9_r3y9R;

x4_r3y9T :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ETX'#];

m11_r3y9U :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EOT"#;

m12_r3y9V :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m11_r3y9U;

x5_r3y9W :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\EOT'#];

m13_r3y9X :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ENQ"#;

m14_r3y9Y :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m13_r3y9X;

x6_r3y9Z :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ENQ'#];

m15_r3ya0 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ACK"#;

m16_r3ya1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m15_r3ya0;

x7_r3ya2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ACK'#];

m17_r3ya3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BEL"#;

m18_r3ya4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m17_r3ya3;

x8_r3ya5 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\a'#];

m19_r3ya6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BS"#;

m20_r3ya7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m19_r3ya6;

x9_r3ya8 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\b'#];

m21_r3ya9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HT"#;

m22_r3yaa :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m21_r3ya9;

x10_r3yab :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\t'#];

m23_r3yac :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LF"#;

m24_r3yad :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m23_r3yac;

x11_r3yae :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\n'#];

m25_r3yaf :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "VT"#;

m26_r3yag :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m25_r3yaf;

x12_r3yah :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\v'#];

m27_r3yai :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FF"#;

m28_r3yaj :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m27_r3yai;

x13_r3yak :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\f'#];

m29_r3yal :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CR"#;

m30_r3yam :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m29_r3yal;

x14_r3yan :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\r'#];

m31_r3yao :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SI"#;

m32_r3yap :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m31_r3yao;

x15_r3yaq :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SI'#];

m33_r3yar :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DLE"#;

m34_r3yas :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m33_r3yar;

x16_r3yat :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DLE'#];

m35_r3yau :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC1"#;

m36_r3yav :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m35_r3yau;

x17_r3yaw :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC1'#];

m37_r3yax :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC2"#;

m38_r3yay :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m37_r3yax;

x18_r3yaz :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC2'#];

m39_r3yaA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC3"#;

m40_r3yaB :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m39_r3yaA;

x19_r3yaC :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC3'#];

m41_r3yaD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC4"#;

m42_r3yaE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m41_r3yaD;

x20_r3yaF :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC4'#];

m43_r3yaG :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NAK"#;

m44_r3yaH :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m43_r3yaG;

x21_r3yaI :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\NAK'#];

m45_r3yaJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SYN"#;

m46_r3yaK :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m45_r3yaJ;

x22_r3yaL :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SYN'#];

m47_r3yaM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETB"#;

m48_r3yaN :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m47_r3yaM;

x23_r3yaO :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ETB'#];

m49_r3yaP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CAN"#;

m50_r3yaQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m49_r3yaP;

x24_r3yaR :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\CAN'#];

m51_r3yaS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EM"#;

m52_r3yaT :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m51_r3yaS;

x25_r3yaU :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\EM'#];

m53_r3yaV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SUB"#;

m54_r3yaW :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m53_r3yaV;

x26_r3yaX :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SUB'#];

m55_r3yaY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ESC"#;

m56_r3yaZ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m55_r3yaY;

x27_r3yb0 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ESC'#];

m57_r3yb1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FS"#;

m58_r3yb2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m57_r3yb1;

x28_r3yb3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\FS'#];

m59_r3yb4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GS"#;

m60_r3yb5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m59_r3yb4;

x29_r3yb6 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\GS'#];

m61_r3yb7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RS"#;

m62_r3yb8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m61_r3yb7;

x30_r3yb9 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\RS'#];

m63_r3yba :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "US"#;

m64_r3ybb :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m63_r3yba;

x31_r3ybc :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\US'#];

m65_r3ybd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SP"#;

m66_r3ybe :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m65_r3ybd;

x32_r3ybf :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

m67_r3ybg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DEL"#;

m68_r3ybh :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m67_r3ybg;

x33_r3ybi :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DEL'#];

sat_s3yqs :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1114111#];

sat_s3yqt :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3yqs GHC.Types.[]];

lvl7_r3ybj :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3yqt;

lvl8_r3ybk :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['"'#];

lvl9_r3ybl :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [lvl8_r3ybk GHC.Types.True];

lvl10_r3ybm :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\''#];

lvl11_r3ybn :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [lvl10_r3ybm GHC.Types.True];

lvl12_r3ybo :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\\'#];

lvl13_r3ybp :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [lvl12_r3ybo GHC.Types.True];

lvl14_r3ybq :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x8_r3ya5 GHC.Types.True];

lvl15_r3ybr :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x9_r3ya8 GHC.Types.True];

lvl16_r3ybs :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x13_r3yak GHC.Types.True];

lvl17_r3ybt :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x11_r3yae GHC.Types.True];

lvl18_r3ybu :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x14_r3yan GHC.Types.True];

lvl19_r3ybv :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x10_r3yab GHC.Types.True];

lvl20_r3ybw :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x12_r3yah GHC.Types.True];

lvl21_r3ybx :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x2_r3y9N GHC.Types.True];

lvl22_r3yby :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x_r3y9H GHC.Types.True];

lvl23_r3ybz :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x3_r3y9Q GHC.Types.True];

lvl24_r3ybA :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x4_r3y9T GHC.Types.True];

lvl25_r3ybB :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x5_r3y9W GHC.Types.True];

lvl26_r3ybC :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x6_r3y9Z GHC.Types.True];

lvl27_r3ybD :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x7_r3ya2 GHC.Types.True];

lvl28_r3ybE :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x1_r3y9K GHC.Types.True];

lvl29_r3ybF :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x15_r3yaq GHC.Types.True];

lvl30_r3ybG :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x16_r3yat GHC.Types.True];

lvl31_r3ybH :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x17_r3yaw GHC.Types.True];

lvl32_r3ybI :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x18_r3yaz GHC.Types.True];

lvl33_r3ybJ :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x19_r3yaC GHC.Types.True];

lvl34_r3ybK :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x20_r3yaF GHC.Types.True];

lvl35_r3ybL :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x21_r3yaI GHC.Types.True];

lvl36_r3ybM :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x22_r3yaL GHC.Types.True];

lvl37_r3ybN :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x23_r3yaO GHC.Types.True];

lvl38_r3ybO :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x24_r3yaR GHC.Types.True];

lvl39_r3ybP :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x25_r3yaU GHC.Types.True];

lvl40_r3ybQ :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x26_r3yaX GHC.Types.True];

lvl41_r3ybR :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x27_r3yb0 GHC.Types.True];

lvl42_r3ybS :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x28_r3yb3 GHC.Types.True];

lvl43_r3ybT :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x29_r3yb6 GHC.Types.True];

lvl44_r3ybU :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x30_r3yb9 GHC.Types.True];

lvl45_r3ybV :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x31_r3ybc GHC.Types.True];

w1_r3ybW
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yqu]
        let {
          lvl116_s3yqv [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nYA
          [LclId] =
              [k1_s3yqu] \u [] k1_s3yqu x1_r3y9K; } in
        let {
          sat_s3yqx [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nYA
          [LclId] =
              [lvl116_s3yqv] \r [a3_s3yqw] lvl116_s3yqv;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m4_r3y9J sat_s3yqx of {
            Unit# ww1_s3yqz [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yqz];
          };

w_r3ybX
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yqA]
        let {
          lvl116_s3yqB [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yqA] \u [] k1_s3yqA x_r3y9H; } in
        let {
          sat_s3yqD [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yqB] \r [a3_s3yqC] lvl116_s3yqB;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m2_r3y9G sat_s3yqD of {
            Unit# ww1_s3yqF [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yqF];
          };

lvl46_r3ybY
  :: forall b.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [w2_s3yqG]
        case
            Text.ParserCombinators.ReadP.$w<++ w_r3ybX w1_r3ybW w2_s3yqG
        of
        { Unit# ww1_s3yqI [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3yqI];
        };

lvl47_r3ybZ
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yqJ]
        let {
          lvl116_s3yqK [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yqJ] \u [] k1_s3yqJ x2_r3y9N; } in
        let {
          sat_s3yqM [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yqK] \r [a3_s3yqL] lvl116_s3yqK;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m6_r3y9M sat_s3yqM of {
            Unit# ww1_s3yqO [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yqO];
          };

lvl48_r3yc0
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yqP]
        let {
          lvl116_s3yqQ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yqP] \u [] k1_s3yqP x3_r3y9Q; } in
        let {
          sat_s3yqS [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yqQ] \r [a3_s3yqR] lvl116_s3yqQ;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m8_r3y9P sat_s3yqS of {
            Unit# ww1_s3yqU [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yqU];
          };

lvl49_r3yc1
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yqV]
        let {
          lvl116_s3yqW [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yqV] \u [] k1_s3yqV x4_r3y9T; } in
        let {
          sat_s3yqY [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yqW] \r [a3_s3yqX] lvl116_s3yqW;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m10_r3y9S sat_s3yqY of {
            Unit# ww1_s3yr0 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yr0];
          };

lvl50_r3yc2
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yr1]
        let {
          lvl116_s3yr2 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yr1] \u [] k1_s3yr1 x5_r3y9W; } in
        let {
          sat_s3yr4 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yr2] \r [a3_s3yr3] lvl116_s3yr2;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m12_r3y9V sat_s3yr4 of {
            Unit# ww1_s3yr6 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yr6];
          };

lvl51_r3yc3
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yr7]
        let {
          lvl116_s3yr8 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yr7] \u [] k1_s3yr7 x6_r3y9Z; } in
        let {
          sat_s3yra [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yr8] \r [a3_s3yr9] lvl116_s3yr8;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m14_r3y9Y sat_s3yra of {
            Unit# ww1_s3yrc [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yrc];
          };

lvl52_r3yc4
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrd]
        let {
          lvl116_s3yre [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrd] \u [] k1_s3yrd x7_r3ya2; } in
        let {
          sat_s3yrg [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yre] \r [a3_s3yrf] lvl116_s3yre;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m16_r3ya1 sat_s3yrg of {
            Unit# ww1_s3yri [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yri];
          };

lvl53_r3yc5
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrj]
        let {
          lvl116_s3yrk [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrj] \u [] k1_s3yrj x8_r3ya5; } in
        let {
          sat_s3yrm [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrk] \r [a3_s3yrl] lvl116_s3yrk;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m18_r3ya4 sat_s3yrm of {
            Unit# ww1_s3yro [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yro];
          };

lvl54_r3yc6
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrp]
        let {
          lvl116_s3yrq [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrp] \u [] k1_s3yrp x9_r3ya8; } in
        let {
          sat_s3yrs [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrq] \r [a3_s3yrr] lvl116_s3yrq;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m20_r3ya7 sat_s3yrs of {
            Unit# ww1_s3yru [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yru];
          };

lvl55_r3yc7
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrv]
        let {
          lvl116_s3yrw [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrv] \u [] k1_s3yrv x10_r3yab; } in
        let {
          sat_s3yry [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrw] \r [a3_s3yrx] lvl116_s3yrw;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m22_r3yaa sat_s3yry of {
            Unit# ww1_s3yrA [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yrA];
          };

lvl56_r3yc8
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrB]
        let {
          lvl116_s3yrC [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrB] \u [] k1_s3yrB x11_r3yae; } in
        let {
          sat_s3yrE [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrC] \r [a3_s3yrD] lvl116_s3yrC;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m24_r3yad sat_s3yrE of {
            Unit# ww1_s3yrG [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yrG];
          };

lvl57_r3yc9
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrH]
        let {
          lvl116_s3yrI [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrH] \u [] k1_s3yrH x12_r3yah; } in
        let {
          sat_s3yrK [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrI] \r [a3_s3yrJ] lvl116_s3yrI;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m26_r3yag sat_s3yrK of {
            Unit# ww1_s3yrM [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yrM];
          };

lvl58_r3yca
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrN]
        let {
          lvl116_s3yrO [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrN] \u [] k1_s3yrN x13_r3yak; } in
        let {
          sat_s3yrQ [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrO] \r [a3_s3yrP] lvl116_s3yrO;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m28_r3yaj sat_s3yrQ of {
            Unit# ww1_s3yrS [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yrS];
          };

lvl59_r3ycb
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrT]
        let {
          lvl116_s3yrU [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrT] \u [] k1_s3yrT x14_r3yan; } in
        let {
          sat_s3yrW [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrU] \r [a3_s3yrV] lvl116_s3yrU;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m30_r3yam sat_s3yrW of {
            Unit# ww1_s3yrY [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yrY];
          };

lvl60_r3ycc
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrZ]
        let {
          lvl116_s3ys0 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrZ] \u [] k1_s3yrZ x15_r3yaq; } in
        let {
          sat_s3ys2 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ys0] \r [a3_s3ys1] lvl116_s3ys0;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m32_r3yap sat_s3ys2 of {
            Unit# ww1_s3ys4 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ys4];
          };

lvl61_r3ycd
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ys5]
        let {
          lvl116_s3ys6 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ys5] \u [] k1_s3ys5 x16_r3yat; } in
        let {
          sat_s3ys8 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ys6] \r [a3_s3ys7] lvl116_s3ys6;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m34_r3yas sat_s3ys8 of {
            Unit# ww1_s3ysa [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysa];
          };

lvl62_r3yce
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysb]
        let {
          lvl116_s3ysc [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysb] \u [] k1_s3ysb x17_r3yaw; } in
        let {
          sat_s3yse [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysc] \r [a3_s3ysd] lvl116_s3ysc;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m36_r3yav sat_s3yse of {
            Unit# ww1_s3ysg [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysg];
          };

lvl63_r3ycf
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysh]
        let {
          lvl116_s3ysi [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysh] \u [] k1_s3ysh x18_r3yaz; } in
        let {
          sat_s3ysk [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysi] \r [a3_s3ysj] lvl116_s3ysi;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m38_r3yay sat_s3ysk of {
            Unit# ww1_s3ysm [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysm];
          };

lvl64_r3ycg
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysn]
        let {
          lvl116_s3yso [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysn] \u [] k1_s3ysn x19_r3yaC; } in
        let {
          sat_s3ysq [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yso] \r [a3_s3ysp] lvl116_s3yso;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m40_r3yaB sat_s3ysq of {
            Unit# ww1_s3yss [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yss];
          };

lvl65_r3ych
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yst]
        let {
          lvl116_s3ysu [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yst] \u [] k1_s3yst x20_r3yaF; } in
        let {
          sat_s3ysw [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysu] \r [a3_s3ysv] lvl116_s3ysu;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m42_r3yaE sat_s3ysw of {
            Unit# ww1_s3ysy [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysy];
          };

lvl66_r3yci
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysz]
        let {
          lvl116_s3ysA [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysz] \u [] k1_s3ysz x21_r3yaI; } in
        let {
          sat_s3ysC [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysA] \r [a3_s3ysB] lvl116_s3ysA;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m44_r3yaH sat_s3ysC of {
            Unit# ww1_s3ysE [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysE];
          };

lvl67_r3ycj
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysF]
        let {
          lvl116_s3ysG [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysF] \u [] k1_s3ysF x22_r3yaL; } in
        let {
          sat_s3ysI [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysG] \r [a3_s3ysH] lvl116_s3ysG;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m46_r3yaK sat_s3ysI of {
            Unit# ww1_s3ysK [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysK];
          };

lvl68_r3yck
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysL]
        let {
          lvl116_s3ysM [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysL] \u [] k1_s3ysL x23_r3yaO; } in
        let {
          sat_s3ysO [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysM] \r [a3_s3ysN] lvl116_s3ysM;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m48_r3yaN sat_s3ysO of {
            Unit# ww1_s3ysQ [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysQ];
          };

lvl69_r3ycl
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysR]
        let {
          lvl116_s3ysS [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysR] \u [] k1_s3ysR x24_r3yaR; } in
        let {
          sat_s3ysU [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysS] \r [a3_s3ysT] lvl116_s3ysS;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m50_r3yaQ sat_s3ysU of {
            Unit# ww1_s3ysW [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysW];
          };

lvl70_r3ycm
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysX]
        let {
          lvl116_s3ysY [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysX] \u [] k1_s3ysX x25_r3yaU; } in
        let {
          sat_s3yt0 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysY] \r [a3_s3ysZ] lvl116_s3ysY;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m52_r3yaT sat_s3yt0 of {
            Unit# ww1_s3yt2 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yt2];
          };

lvl71_r3ycn
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yt3]
        let {
          lvl116_s3yt4 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yt3] \u [] k1_s3yt3 x26_r3yaX; } in
        let {
          sat_s3yt6 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yt4] \r [a3_s3yt5] lvl116_s3yt4;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m54_r3yaW sat_s3yt6 of {
            Unit# ww1_s3yt8 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yt8];
          };

lvl72_r3yco
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yt9]
        let {
          lvl116_s3yta [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yt9] \u [] k1_s3yt9 x27_r3yb0; } in
        let {
          sat_s3ytc [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yta] \r [a3_s3ytb] lvl116_s3yta;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m56_r3yaZ sat_s3ytc of {
            Unit# ww1_s3yte [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yte];
          };

lvl73_r3ycp
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ytf]
        let {
          lvl116_s3ytg [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ytf] \u [] k1_s3ytf x28_r3yb3; } in
        let {
          sat_s3yti [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ytg] \r [a3_s3yth] lvl116_s3ytg;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m58_r3yb2 sat_s3yti of {
            Unit# ww1_s3ytk [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ytk];
          };

lvl74_r3ycq
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ytl]
        let {
          lvl116_s3ytm [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ytl] \u [] k1_s3ytl x29_r3yb6; } in
        let {
          sat_s3yto [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ytm] \r [a3_s3ytn] lvl116_s3ytm;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m60_r3yb5 sat_s3yto of {
            Unit# ww1_s3ytq [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ytq];
          };

lvl75_r3ycr
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ytr]
        let {
          lvl116_s3yts [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ytr] \u [] k1_s3ytr x30_r3yb9; } in
        let {
          sat_s3ytu [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yts] \r [a3_s3ytt] lvl116_s3yts;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m62_r3yb8 sat_s3ytu of {
            Unit# ww1_s3ytw [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ytw];
          };

lvl76_r3ycs
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ytx]
        let {
          lvl116_s3yty [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ytx] \u [] k1_s3ytx x31_r3ybc; } in
        let {
          sat_s3ytA [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yty] \r [a3_s3ytz] lvl116_s3yty;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m64_r3ybb sat_s3ytA of {
            Unit# ww1_s3ytC [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ytC];
          };

lvl77_r3yct
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ytD]
        let {
          lvl116_s3ytE [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ytD] \u [] k1_s3ytD x32_r3ybf; } in
        let {
          sat_s3ytG [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ytE] \r [a3_s3ytF] lvl116_s3ytE;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m66_r3ybe sat_s3ytG of {
            Unit# ww1_s3ytI [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ytI];
          };

lvl78_r3ycu
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ytJ]
        let {
          lvl116_s3ytK [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ytJ] \u [] k1_s3ytJ x33_r3ybi; } in
        let {
          sat_s3ytM [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ytK] \r [a3_s3ytL] lvl116_s3ytK;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m68_r3ybh sat_s3ytM of {
            Unit# ww1_s3ytO [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ytO];
          };

lvl79_r3ycv :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl78_r3ycu GHC.Types.[]];

lvl80_r3ycw :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl77_r3yct lvl79_r3ycv];

lvl81_r3ycx :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl76_r3ycs lvl80_r3ycw];

lvl82_r3ycy :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl75_r3ycr lvl81_r3ycx];

lvl83_r3ycz :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl74_r3ycq lvl82_r3ycy];

lvl84_r3ycA :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl73_r3ycp lvl83_r3ycz];

lvl85_r3ycB :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl72_r3yco lvl84_r3ycA];

lvl86_r3ycC :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl71_r3ycn lvl85_r3ycB];

lvl87_r3ycD :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl70_r3ycm lvl86_r3ycC];

lvl88_r3ycE :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl69_r3ycl lvl87_r3ycD];

lvl89_r3ycF :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl68_r3yck lvl88_r3ycE];

lvl90_r3ycG :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl67_r3ycj lvl89_r3ycF];

lvl91_r3ycH :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl66_r3yci lvl90_r3ycG];

lvl92_r3ycI :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl65_r3ych lvl91_r3ycH];

lvl93_r3ycJ :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl64_r3ycg lvl92_r3ycI];

lvl94_r3ycK :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl63_r3ycf lvl93_r3ycJ];

lvl95_r3ycL :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl62_r3yce lvl94_r3ycK];

lvl96_r3ycM :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl61_r3ycd lvl95_r3ycL];

lvl97_r3ycN :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl60_r3ycc lvl96_r3ycM];

lvl98_r3ycO :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl59_r3ycb lvl97_r3ycN];

lvl99_r3ycP :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl58_r3yca lvl98_r3ycO];

lvl100_r3ycQ :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl57_r3yc9 lvl99_r3ycP];

lvl101_r3ycR :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl56_r3yc8 lvl100_r3ycQ];

lvl102_r3ycS :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl55_r3yc7 lvl101_r3ycR];

lvl103_r3ycT :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl54_r3yc6 lvl102_r3ycS];

lvl104_r3ycU :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl53_r3yc5 lvl103_r3ycT];

lvl105_r3ycV :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl52_r3yc4 lvl104_r3ycU];

lvl106_r3ycW :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl51_r3yc3 lvl105_r3ycV];

lvl107_r3ycX :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl50_r3yc2 lvl106_r3ycW];

lvl108_r3ycY :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl49_r3yc1 lvl107_r3ycX];

lvl109_r3ycZ :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl48_r3yc0 lvl108_r3ycY];

lvl110_r3yd0 :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl47_r3ybZ lvl109_r3ycZ];

lvl111_r3yd1 :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl46_r3ybY lvl110_r3yd0];

lvl112_r3yd2
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [k_s3ytP]
        let {
          lvl116_s3ytQ [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_a3nIU
          [LclId] =
              [k_s3ytP] \u [] k_s3ytP a2_r3y9z; } in
        let {
          lvl117_s3ytR [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_a3nIU
          [LclId] =
              [k_s3ytP] \u [] k_s3ytP a1_r3y9y; } in
        let {
          sat_s3ytW [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_a3nIU
          [LclId] =
              [lvl116_s3ytQ lvl117_s3ytR] \r [a3_s3ytS]
                  case a3_s3ytS of {
                    GHC.Types.C# ds_s3ytU [Occ=Once!] ->
                        case ds_s3ytU of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'O'# -> lvl117_s3ytR;
                          'X'# -> lvl116_s3ytQ;
                          'o'# -> lvl117_s3ytR;
                          'x'# -> lvl116_s3ytQ;
                        };
                  };
        } in  Text.ParserCombinators.ReadP.Get [sat_s3ytW];

lvl113_r3yd3
  :: forall b.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [k_s3ytX] k_s3ytX lvl6_r3y9C;

Text.Read.Lex.lexChar2
  :: forall b1.
     ((GHC.Types.Char, GHC.Types.Bool)
      -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [k_s3ytY]
        let {
          lvl116_s3ytZ :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl18_r3ybu; } in
        let {
          lvl117_s3yu0 :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl16_r3ybs; } in
        let {
          lvl118_s3yu1 :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl20_r3ybw; } in
        let {
          lvl119_s3yu2 :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl17_r3ybt; } in
        let {
          lvl120_s3yu3 :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl19_r3ybv; } in
        let {
          lvl121_s3yu4 :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl15_r3ybr; } in
        let {
          lvl122_s3yu5 :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl14_r3ybq; } in
        let {
          lvl123_s3yu6 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl13_r3ybp; } in
        let {
          lvl124_s3yu7 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl11_r3ybn; } in
        let {
          lvl125_s3yu8 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl9_r3ybl; } in
        let {
          sat_s3yvh [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY
               lvl116_s3ytZ
               lvl117_s3yu0
               lvl118_s3yu1
               lvl119_s3yu2
               lvl120_s3yu3
               lvl121_s3yu4
               lvl122_s3yu5] \u []
                  let {
                    sat_s3yuv [Occ=Once]
                      :: GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1_X3nNY
                    [LclId] =
                        [k_s3ytY] \r [a3_s3yuf]
                            let {
                              lvl126_s3yug [Occ=OnceL] :: GHC.Integer.Type.Integer
                              [LclId] =
                                  [a3_s3yuf] \u []
                                      case a3_s3yuf of {
                                        GHC.Types.I# i_s3yui [Occ=Once] ->
                                            GHC.Integer.Type.smallInteger i_s3yui;
                                      }; } in
                            let {
                              sat_s3yus [Occ=Once]
                                :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_X3nNY
                              [LclId] =
                                  [k_s3ytY lvl126_s3yug] \r [a4_s3yuj]
                                      case
                                          Text.Read.Lex.valInteger lvl126_s3yug a4_s3yuj
                                      of
                                      a5_s3yuk [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.leInteger# a5_s3yuk lvl7_r3ybj
                                            of
                                            { __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                              1# ->
                                                  let {
                                                    sat_s3yuq [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        [a5_s3yuk] \u []
                                                            case
                                                                GHC.Integer.Type.integerToInt
                                                                    a5_s3yuk
                                                            of
                                                            wild1_s3yum
                                                            { __DEFAULT ->
                                                                  case
                                                                      int2Word# [wild1_s3yum]
                                                                  of
                                                                  sat_s3yun
                                                                  { __DEFAULT ->
                                                                        case
                                                                            leWord# [sat_s3yun
                                                                                     1114111##]
                                                                        of
                                                                        { __DEFAULT ->
                                                                              GHC.Char.$wlvl
                                                                                  wild1_s3yum;
                                                                          1# ->
                                                                              case
                                                                                  chr# [wild1_s3yum]
                                                                              of
                                                                              sat_s3yup
                                                                              { __DEFAULT ->
                                                                                    GHC.Types.C# [sat_s3yup];
                                                                              };
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_s3yur [Occ=Once]
                                                      :: (GHC.Types.Char, GHC.Types.Bool)
                                                    [LclId] =
                                                        CCCS (,)! [sat_s3yuq GHC.Types.True];
                                                  } in  k_s3ytY sat_s3yur;
                                            };
                                      };
                            } in 
                              case $wlexDigits_r3y9x a3_s3yuf sat_s3yus of {
                                Unit# ww1_s3yuu [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3yuu];
                              };
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$w<++
                            lvl112_r3yd2 lvl113_r3yd3 sat_s3yuv
                    of
                    { Unit# ww1_s3yux [Occ=Once] ->
                          let {
                            sat_s3yvg [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
                            [LclId] =
                                [k_s3ytY
                                 lvl116_s3ytZ
                                 lvl117_s3yu0
                                 lvl118_s3yu1
                                 lvl119_s3yu2
                                 lvl120_s3yu3
                                 lvl121_s3yu4
                                 lvl122_s3yu5] \u []
                                    let {
                                      lvl126_s3yuz [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl45_r3ybV; } in
                                    let {
                                      lvl127_s3yuA [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl44_r3ybU; } in
                                    let {
                                      lvl128_s3yuB [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl43_r3ybT; } in
                                    let {
                                      lvl129_s3yuC [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl42_r3ybS; } in
                                    let {
                                      lvl130_s3yuD [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl41_r3ybR; } in
                                    let {
                                      lvl131_s3yuE [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl40_r3ybQ; } in
                                    let {
                                      lvl132_s3yuF [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl39_r3ybP; } in
                                    let {
                                      lvl133_s3yuG [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl38_r3ybO; } in
                                    let {
                                      lvl134_s3yuH [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl37_r3ybN; } in
                                    let {
                                      lvl135_s3yuI [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl36_r3ybM; } in
                                    let {
                                      lvl136_s3yuJ [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl35_r3ybL; } in
                                    let {
                                      lvl137_s3yuK [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl34_r3ybK; } in
                                    let {
                                      lvl138_s3yuL [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl33_r3ybJ; } in
                                    let {
                                      lvl139_s3yuM [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl32_r3ybI; } in
                                    let {
                                      lvl140_s3yuN [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl31_r3ybH; } in
                                    let {
                                      lvl141_s3yuO [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl30_r3ybG; } in
                                    let {
                                      lvl142_s3yuP [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl29_r3ybF; } in
                                    let {
                                      lvl143_s3yuQ [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl28_r3ybE; } in
                                    let {
                                      lvl144_s3yuR [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl27_r3ybD; } in
                                    let {
                                      lvl145_s3yuS [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl26_r3ybC; } in
                                    let {
                                      lvl146_s3yuT [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl25_r3ybB; } in
                                    let {
                                      lvl147_s3yuU [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl24_r3ybA; } in
                                    let {
                                      lvl148_s3yuV [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl23_r3ybz; } in
                                    let {
                                      lvl149_s3yuW [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl22_r3yby; } in
                                    let {
                                      lvl150_s3yuX [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl21_r3ybx; } in
                                    let {
                                      $wlvl1_s3yuY [InlPrag=NOUSERINLINE[0],
                                                    Occ=OnceL!,
                                                    Dmd=<L,C(U)>]
                                        :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                          sat-only [lvl116_s3ytZ
                                                    lvl117_s3yu0
                                                    lvl118_s3yu1
                                                    lvl119_s3yu2
                                                    lvl120_s3yu3
                                                    lvl121_s3yu4
                                                    lvl122_s3yu5
                                                    lvl126_s3yuz
                                                    lvl127_s3yuA
                                                    lvl128_s3yuB
                                                    lvl129_s3yuC
                                                    lvl130_s3yuD
                                                    lvl131_s3yuE
                                                    lvl132_s3yuF
                                                    lvl133_s3yuG
                                                    lvl134_s3yuH
                                                    lvl135_s3yuI
                                                    lvl136_s3yuJ
                                                    lvl137_s3yuK
                                                    lvl138_s3yuL
                                                    lvl139_s3yuM
                                                    lvl140_s3yuN
                                                    lvl141_s3yuO
                                                    lvl142_s3yuP
                                                    lvl143_s3yuQ
                                                    lvl144_s3yuR
                                                    lvl145_s3yuS
                                                    lvl146_s3yuT
                                                    lvl147_s3yuU
                                                    lvl148_s3yuV
                                                    lvl149_s3yuW
                                                    lvl150_s3yuX] \r [ww2_s3yuZ]
                                              case ww2_s3yuZ of {
                                                __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                '@'# -> lvl150_s3yuX;
                                                'A'# -> lvl149_s3yuW;
                                                'B'# -> lvl148_s3yuV;
                                                'C'# -> lvl147_s3yuU;
                                                'D'# -> lvl146_s3yuT;
                                                'E'# -> lvl145_s3yuS;
                                                'F'# -> lvl144_s3yuR;
                                                'G'# -> lvl122_s3yu5;
                                                'H'# -> lvl121_s3yu4;
                                                'I'# -> lvl120_s3yu3;
                                                'J'# -> lvl119_s3yu2;
                                                'K'# -> lvl118_s3yu1;
                                                'L'# -> lvl117_s3yu0;
                                                'M'# -> lvl116_s3ytZ;
                                                'N'# -> lvl143_s3yuQ;
                                                'O'# -> lvl142_s3yuP;
                                                'P'# -> lvl141_s3yuO;
                                                'Q'# -> lvl140_s3yuN;
                                                'R'# -> lvl139_s3yuM;
                                                'S'# -> lvl138_s3yuL;
                                                'T'# -> lvl137_s3yuK;
                                                'U'# -> lvl136_s3yuJ;
                                                'V'# -> lvl135_s3yuI;
                                                'W'# -> lvl134_s3yuH;
                                                'X'# -> lvl133_s3yuG;
                                                'Y'# -> lvl132_s3yuF;
                                                'Z'# -> lvl131_s3yuE;
                                                '['# -> lvl130_s3yuD;
                                                '\\'# -> lvl129_s3yuC;
                                                ']'# -> lvl128_s3yuB;
                                                '^'# -> lvl127_s3yuA;
                                                '_'# -> lvl126_s3yuz;
                                              }; } in
                                    let {
                                      lvl151_s3yv1 [InlPrag=NOUSERINLINE[0], Occ=OnceL]
                                        :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
                                          [$wlvl1_s3yuY] \r [w2_s3yv2]
                                              case w2_s3yv2 of {
                                                GHC.Types.C# ww3_s3yv4 [Occ=Once] ->
                                                    $wlvl1_s3yuY ww3_s3yv4;
                                              }; } in
                                    let {
                                      lvl152_s3yv5 [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId, Unf=OtherCon []] =
                                          CCCS Text.ParserCombinators.ReadP.Get! [lvl151_s3yv1]; } in
                                    let {
                                      sat_s3yvf [Occ=Once]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u []
                                              let {
                                                sat_s3yve [Occ=Once]
                                                  :: GHC.Types.Char
                                                     -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                                [LclId] =
                                                    [k_s3ytY] \r [a3_s3yvc]
                                                        let {
                                                          sat_s3yvd [Occ=Once]
                                                            :: (GHC.Types.Char, GHC.Types.Bool)
                                                          [LclId] =
                                                              CCCS (,)! [a3_s3yvc GHC.Types.True];
                                                        } in  k_s3ytY sat_s3yvd;
                                              } in 
                                                Text.ParserCombinators.ReadP.choice
                                                    lvl111_r3yd1 sat_s3yve; } in
                                    let {
                                      sat_s3yva [Occ=Once]
                                        :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [lvl152_s3yv5] \r [a_s3yv6]
                                              case a_s3yv6 of {
                                                GHC.Types.C# y_s3yv8 [Occ=Once!] ->
                                                    case y_s3yv8 of {
                                                      __DEFAULT ->
                                                          Text.ParserCombinators.ReadP.Fail [];
                                                      '^'# -> lvl152_s3yv5;
                                                    };
                                              }; } in
                                    let {
                                      sat_s3yvb [Occ=Once]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yva];
                                    } in 
                                      Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                          sat_s3yvb sat_s3yvf; } in
                          let {
                            sat_s3yuy [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
                            [LclId] =
                                CCCS Text.ParserCombinators.ReadP.Look! [ww1_s3yux];
                          } in 
                            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                sat_s3yuy sat_s3yvg;
                    }; } in
        let {
          sat_s3yud [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [lvl116_s3ytZ
               lvl117_s3yu0
               lvl118_s3yu1
               lvl119_s3yu2
               lvl120_s3yu3
               lvl121_s3yu4
               lvl122_s3yu5
               lvl123_s3yu6
               lvl124_s3yu7
               lvl125_s3yu8] \r [a3_s3yu9]
                  case a3_s3yu9 of {
                    GHC.Types.C# ds_s3yub [Occ=Once!] ->
                        case ds_s3yub of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '"'# -> lvl125_s3yu8;
                          '\''# -> lvl124_s3yu7;
                          '\\'# -> lvl123_s3yu6;
                          'a'# -> lvl122_s3yu5;
                          'b'# -> lvl121_s3yu4;
                          'f'# -> lvl117_s3yu0;
                          'n'# -> lvl119_s3yu2;
                          'r'# -> lvl116_s3ytZ;
                          't'# -> lvl120_s3yu3;
                          'v'# -> lvl118_s3yu1;
                        };
                  }; } in
        let {
          sat_s3yue [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yud];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3yue sat_s3yvh;

Text.Read.Lex.lexChar4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\&"#;

Text.Read.Lex.lexChar3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.lexChar4;

Text.Read.Lex.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3yvi]
        let {
          lvl116_s3yvj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk1
          [LclId] =
              [w2_s3yvi] \u []
                  case Text.Read.Lex.$wconsumeEmpties w2_s3yvi of {
                    Unit# ww1_s3yvl [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3yvl];
                  }; } in
        let {
          sat_s3yvn [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xk1
          [LclId] =
              [lvl116_s3yvj] \r [a3_s3yvm] lvl116_s3yvj;
        } in 
          Text.ParserCombinators.ReadP.$wstring
              Text.Read.Lex.lexChar3 sat_s3yvn;
Text.Read.Lex.$wconsumeEmpties [InlPrag=NOUSERINLINE[0],
                                Occ=LoopBreaker]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3yvo]
        let {
          lvl116_s3yvp [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xjV
          [LclId] =
              [w2_s3yvo] \u []
                  case Text.Read.Lex.$wlvl w2_s3yvo of {
                    Unit# ww1_s3yvr [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3yvr];
                  }; } in
        let {
          lvl117_s3yvs [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_s3xjV
          [LclId] =
              [w2_s3yvo] \u [] w2_s3yvo GHC.Tuple.(); } in
        let {
          sat_s3yvG [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xjV
          [LclId] =
              [lvl116_s3yvp lvl117_s3yvs] \r [a3_s3yvt]
                  case a3_s3yvt of {
                    [] -> lvl117_s3yvs;
                    : ds_s3yvv [Occ=Once!] ds1_s3yvw [Occ=Once!] ->
                        case ds_s3yvv of {
                          GHC.Types.C# ds2_s3yvy [Occ=Once!] ->
                              case ds2_s3yvy of {
                                __DEFAULT -> lvl117_s3yvs;
                                '\\'# ->
                                    case ds1_s3yvw of {
                                      [] -> lvl117_s3yvs;
                                      : ds4_s3yvB [Occ=Once!] _ [Occ=Dead] ->
                                          case ds4_s3yvB of {
                                            GHC.Types.C# ds6_s3yvE [Occ=Once!] ->
                                                case ds6_s3yvE of {
                                                  __DEFAULT -> lvl117_s3yvs;
                                                  '&'# -> lvl116_s3yvp;
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in  Unit# [sat_s3yvG];

Text.Read.Lex.lexChar5 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3yvH]
        case Text.Read.Lex.$wconsumeEmpties w2_s3yvH of {
          Unit# ww1_s3yvJ [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3yvJ];
        };

Text.Read.Lex.$wlexChar [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3yvK]
        let {
          lvl116_s3yvL [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk7
          [LclId] =
              [w2_s3yvK] \u []
                  let {
                    k_s3yvM [Occ=Once, Dmd=<L,C(U)>]
                      :: (GHC.Types.Char, GHC.Types.Bool)
                         -> Text.ParserCombinators.ReadP.P b1_s3xk7
                    [LclId, Arity=1, Str=<S,1*U(U,A)>, Unf=OtherCon []] =
                        [w2_s3yvK] \r [a3_s3yvN]
                            case a3_s3yvN of {
                              (,) c_s3yvP [Occ=Once] _ [Occ=Dead] ->
                                  let {
                                    lvl117_s3yvR :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                    [LclId] =
                                        [w2_s3yvK c_s3yvP] \u [] w2_s3yvK c_s3yvP; } in
                                  let {
                                    lvl118_s3yvS [Occ=OnceL]
                                      :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                    [LclId] =
                                        [lvl117_s3yvR] \u []
                                            let {
                                              sat_s3yvU [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                              [LclId] =
                                                  [lvl117_s3yvR] \r [a4_s3yvT] lvl117_s3yvR;
                                            } in 
                                              case Text.Read.Lex.$wlvl sat_s3yvU of {
                                                Unit# ww1_s3yvW [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3yvW];
                                              }; } in
                                  let {
                                    sat_s3ywa [Occ=Once]
                                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                    [LclId] =
                                        [lvl117_s3yvR lvl118_s3yvS] \r [a4_s3yvX]
                                            case a4_s3yvX of {
                                              [] -> lvl117_s3yvR;
                                              : ds1_s3yvZ [Occ=Once!] ds2_s3yw0 [Occ=Once!] ->
                                                  case ds1_s3yvZ of {
                                                    GHC.Types.C# ds3_s3yw2 [Occ=Once!] ->
                                                        case ds3_s3yw2 of {
                                                          __DEFAULT -> lvl117_s3yvR;
                                                          '\\'# ->
                                                              case ds2_s3yw0 of {
                                                                [] -> lvl117_s3yvR;
                                                                : ds5_s3yw5 [Occ=Once!]
                                                                  _ [Occ=Dead] ->
                                                                    case ds5_s3yw5 of {
                                                                      GHC.Types.C# ds7_s3yw8 [Occ=Once!] ->
                                                                          case ds7_s3yw8 of {
                                                                            __DEFAULT ->
                                                                                lvl117_s3yvR;
                                                                            '&'# -> lvl118_s3yvS;
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                  } in  Text.ParserCombinators.ReadP.Look [sat_s3ywa];
                            };
                  } in  Text.Read.Lex.lexChar2 k_s3yvM; } in
        let {
          sat_s3ywz [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xk7
          [LclId] =
              [w2_s3yvK lvl116_s3yvL] \r [a3_s3ywb]
                  case a3_s3ywb of wild_s3ywc {
                    GHC.Types.C# x34_s3ywd [Occ=Once!] ->
                        case x34_s3ywd of {
                          __DEFAULT ->
                              let {
                                lvl117_s3ywf :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                [LclId] =
                                    [w2_s3yvK wild_s3ywc] \u [] w2_s3yvK wild_s3ywc; } in
                              let {
                                lvl118_s3ywg [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                [LclId] =
                                    [lvl117_s3ywf] \u []
                                        let {
                                          sat_s3ywi [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                          [LclId] =
                                              [lvl117_s3ywf] \r [a4_s3ywh] lvl117_s3ywf;
                                        } in 
                                          case Text.Read.Lex.$wlvl sat_s3ywi of {
                                            Unit# ww1_s3ywk [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s3ywk];
                                          }; } in
                              let {
                                sat_s3ywy [Occ=Once]
                                  :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                [LclId] =
                                    [lvl117_s3ywf lvl118_s3ywg] \r [a4_s3ywl]
                                        case a4_s3ywl of {
                                          [] -> lvl117_s3ywf;
                                          : ds_s3ywn [Occ=Once!] ds1_s3ywo [Occ=Once!] ->
                                              case ds_s3ywn of {
                                                GHC.Types.C# ds2_s3ywq [Occ=Once!] ->
                                                    case ds2_s3ywq of {
                                                      __DEFAULT -> lvl117_s3ywf;
                                                      '\\'# ->
                                                          case ds1_s3ywo of {
                                                            [] -> lvl117_s3ywf;
                                                            : ds4_s3ywt [Occ=Once!] _ [Occ=Dead] ->
                                                                case ds4_s3ywt of {
                                                                  GHC.Types.C# ds6_s3yww [Occ=Once!] ->
                                                                      case ds6_s3yww of {
                                                                        __DEFAULT -> lvl117_s3ywf;
                                                                        '&'# -> lvl118_s3ywg;
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                        };
                              } in  Text.ParserCombinators.ReadP.Look [sat_s3ywy];
                          '\\'# -> lvl116_s3yvL;
                        };
                  };
        } in  Unit# [sat_s3ywz];

Text.Read.Lex.lexChar1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3ywA]
        case Text.Read.Lex.$wlexChar w2_s3ywA of {
          Unit# ww1_s3ywC [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3ywC];
        };

Text.Read.Lex.lexChar
  :: Text.ParserCombinators.ReadP.ReadP GHC.Types.Char
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.lexChar1 eta_B1;

lexStrItem_r3yd4
  :: forall b.
     ((GHC.Types.Char, GHC.Types.Bool)
      -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [k_s3ywD]
        let {
          lvl116_s3ywE :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [k_s3ywD] \u [] lexStrItem_r3yd4 k_s3ywD; } in
        let {
          lvl117_s3ywF [Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
              [lvl116_s3ywE] \r [a_s3ywG]
                  case a_s3ywG of {
                    GHC.Types.C# y_s3ywI [Occ=Once!] ->
                        case y_s3ywI of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '\\'# -> lvl116_s3ywE;
                        };
                  }; } in
        let {
          lvl118_s3ywK [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl117_s3ywF]; } in
        let {
          k1_s3ywL [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl118_s3ywK] \r [a3_s3ywM] lvl118_s3ywK; } in
        let {
          lvl119_s3ywN [Occ=OnceL*]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              [k1_s3ywL] \r [a_s3ywO]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3ywO k1_s3ywL; } in
        let {
          $wlvl1_s3ywP [InlPrag=NOUSERINLINE[0], Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [lvl116_s3ywE lvl119_s3ywN] \r [ww_s3ywQ]
                  case ww_s3ywQ of ds_s3ywR {
                    __DEFAULT ->
                        case ord# [ds_s3ywR] of sat_s3ywT {
                          __DEFAULT ->
                              case int2Word# [sat_s3ywT] of x34_s3ywS [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case leWord# [x34_s3ywS 887##] of {
                                      __DEFAULT ->
                                          case ord# [ds_s3ywR] of sat_s3ywW {
                                            __DEFAULT ->
                                                case
                                                    __pkg_ccall base-4.11.0.0 [sat_s3ywW
                                                                               GHC.Prim.realWorld#]
                                                of
                                                { (#,#) _ [Occ=Dead] ds2_s3ywZ [Occ=Once!] ->
                                                      case ds2_s3ywZ of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Look [lvl119_s3ywN];
                                                        0# -> Text.ParserCombinators.ReadP.Fail [];
                                                      };
                                                };
                                          };
                                      1# ->
                                          case x34_s3ywS of wild_s3yx1 {
                                            __DEFAULT ->
                                                case minusWord# [wild_s3yx1 9##] of sat_s3yx2 {
                                                  __DEFAULT ->
                                                      case leWord# [sat_s3yx2 4##] of {
                                                        __DEFAULT ->
                                                            case wild_s3yx1 of {
                                                              __DEFAULT ->
                                                                  Text.ParserCombinators.ReadP.Fail [];
                                                              160## ->
                                                                  Text.ParserCombinators.ReadP.Look [lvl119_s3ywN];
                                                            };
                                                        1# ->
                                                            Text.ParserCombinators.ReadP.Look [lvl119_s3ywN];
                                                      };
                                                };
                                            32## ->
                                                Text.ParserCombinators.ReadP.Look [lvl119_s3ywN];
                                          };
                                    };
                              };
                        };
                    '&'# -> lvl116_s3ywE;
                  }; } in
        let {
          lvl120_s3yx5 [InlPrag=NOUSERINLINE[0], Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
              [$wlvl1_s3ywP] \r [w2_s3yx6]
                  case w2_s3yx6 of {
                    GHC.Types.C# ww1_s3yx8 [Occ=Once] -> $wlvl1_s3ywP ww1_s3yx8;
                  }; } in
        let {
          lvl121_s3yx9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl120_s3yx5]; } in
        let {
          lvl122_s3yxa [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [k_s3ywD] \u [] Text.Read.Lex.lexChar2 k_s3ywD; } in
        let {
          sat_s3yxm [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [k_s3ywD lvl122_s3yxa] \r [a3_s3yxh]
                  case a3_s3yxh of wild_s3yxi {
                    GHC.Types.C# x34_s3yxj [Occ=Once!] ->
                        case x34_s3yxj of {
                          __DEFAULT ->
                              let {
                                sat_s3yxl [Occ=Once] :: (GHC.Types.Char, GHC.Types.Bool)
                                [LclId] =
                                    CCCS (,)! [wild_s3yxi GHC.Types.False];
                              } in  k_s3ywD sat_s3yxl;
                          '\\'# -> lvl122_s3yxa;
                        };
                  }; } in
        let {
          sat_s3yxn [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yxm]; } in
        let {
          sat_s3yxf [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [lvl121_s3yx9] \r [a_s3yxb]
                  case a_s3yxb of {
                    GHC.Types.C# y_s3yxd [Occ=Once!] ->
                        case y_s3yxd of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '\\'# -> lvl121_s3yx9;
                        };
                  }; } in
        let {
          sat_s3yxg [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yxf];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3yxg sat_s3yxn;

body_r3yd5
  :: ([GHC.Types.Char] -> GHC.Base.String)
     -> forall b1.
        (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,C(U)><L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [f_s3yxo k_s3yxp]
        let {
          lvl116_s3yxq [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nOE
          [LclId] =
              [f_s3yxo k_s3yxp] \u []
                  let {
                    sat_s3yxr [Occ=OnceL] :: GHC.Base.String
                    [LclId] =
                        [f_s3yxo] \u [] f_s3yxo GHC.Types.[]; } in
                  let {
                    sat_s3yxs [Occ=Once] :: Text.Read.Lex.Lexeme
                    [LclId] =
                        CCCS Text.Read.Lex.String! [sat_s3yxr];
                  } in  k_s3yxp sat_s3yxs; } in
        let {
          sat_s3yxF [Occ=Once]
            :: (GHC.Types.Char, GHC.Types.Bool)
               -> Text.ParserCombinators.ReadP.P b1_X3nOE
          [LclId] =
              [f_s3yxo k_s3yxp lvl116_s3yxq] \r [a3_s3yxt]
                  case a3_s3yxt of {
                    (,) c_s3yxv [Occ=Once!] esc_s3yxw [Occ=Once!] ->
                        case c_s3yxv of wild1_s3yxx {
                          GHC.Types.C# x34_s3yxy [Occ=Once!] ->
                              let-no-escape {
                                $j_s3yxz [Occ=Once*T[0], Dmd=<L,1*U>]
                                  :: Text.ParserCombinators.ReadP.P b1_X3nOE
                                [LclId[JoinId(0)], Unf=OtherCon []] =
                                    [f_s3yxo k_s3yxp wild1_s3yxx] \r []
                                        let {
                                          sat_s3yxC [Occ=Once]
                                            :: [GHC.Types.Char] -> GHC.Base.String
                                          [LclId] =
                                              [f_s3yxo wild1_s3yxx] \r [x35_s3yxA]
                                                  let {
                                                    sat_s3yxB [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        CCCS :! [wild1_s3yxx x35_s3yxA];
                                                  } in  f_s3yxo sat_s3yxB;
                                        } in  body_r3yd5 sat_s3yxC k_s3yxp;
                              } in 
                                case x34_s3yxy of {
                                  __DEFAULT -> $j_s3yxz;
                                  '"'# ->
                                      case esc_s3yxw of {
                                        GHC.Types.False -> lvl116_s3yxq;
                                        GHC.Types.True -> $j_s3yxz;
                                      };
                                };
                        };
                  };
        } in  lexStrItem_r3yd4 sat_s3yxF;

lexExp_r3yd6
  :: forall b1.
     (GHC.Base.Maybe GHC.Integer.Type.Integer
      -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [k_s3yxG]
        let {
          lvl116_s3yxH :: Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              [k_s3yxG] \u []
                  let {
                    k1_s3yxI [Dmd=<L,C(U)>]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []] =
                        sat-only [k_s3yxG] \r [a3_s3yxJ]
                            let {
                              sat_s3yxR [Occ=Once]
                                :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_X3nPk
                              [LclId] =
                                  [k_s3yxG a3_s3yxJ] \r [a4_s3yxK]
                                      let {
                                        sat_s3yxP [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [a3_s3yxJ a4_s3yxK] \u []
                                                case a3_s3yxJ of {
                                                  GHC.Types.C# x34_s3yxM [Occ=Once!] ->
                                                      case x34_s3yxM of {
                                                        __DEFAULT ->
                                                            Text.Read.Lex.valInteger
                                                                Text.Read.Lex.numberToFixed1
                                                                a4_s3yxK;
                                                        '-'# ->
                                                            case
                                                                Text.Read.Lex.valInteger
                                                                    Text.Read.Lex.numberToFixed1
                                                                    a4_s3yxK
                                                            of
                                                            sat_s3yxO
                                                            { __DEFAULT ->
                                                                  GHC.Integer.Type.negateInteger
                                                                      sat_s3yxO;
                                                            };
                                                      };
                                                }; } in
                                      let {
                                        sat_s3yxQ [Occ=Once]
                                          :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                        [LclId] =
                                            CCCS GHC.Base.Just! [sat_s3yxP];
                                      } in  k_s3yxG sat_s3yxQ;
                            } in 
                              case $wlexDigits_r3y9x lvl6_r3y9C sat_s3yxR of {
                                Unit# ww1_s3yxT [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3yxT];
                              }; } in
                  let {
                    sat_s3yyd [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        [k_s3yxG] \u []
                            let {
                              sat_s3yya [Occ=Once]
                                :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_X3nPk
                              [LclId] =
                                  [k_s3yxG] \r [a3_s3yy7]
                                      let {
                                        sat_s3yy8 [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [a3_s3yy7] \u []
                                                Text.Read.Lex.valInteger
                                                    Text.Read.Lex.numberToFixed1 a3_s3yy7; } in
                                      let {
                                        sat_s3yy9 [Occ=Once]
                                          :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                        [LclId] =
                                            CCCS GHC.Base.Just! [sat_s3yy8];
                                      } in  k_s3yxG sat_s3yy9;
                            } in 
                              case $wlexDigits_r3y9x lvl6_r3y9C sat_s3yya of {
                                Unit# ww1_s3yyc [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3yyc];
                              }; } in
                  let {
                    sat_s3yy4 [Occ=OnceL]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        [k1_s3yxI] \r [a_s3yy0]
                            case a_s3yy0 of wild1_s3yy1 {
                              GHC.Types.C# y_s3yy2 [Occ=Once!] ->
                                  case y_s3yy2 of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    '+'# -> k1_s3yxI wild1_s3yy1;
                                  };
                            }; } in
                  let {
                    sat_s3yy5 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yy4]; } in
                  let {
                    sat_s3yxY [Occ=OnceL]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        [k1_s3yxI] \r [a_s3yxU]
                            case a_s3yxU of wild1_s3yxV {
                              GHC.Types.C# y_s3yxW [Occ=Once!] ->
                                  case y_s3yxW of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    '-'# -> k1_s3yxI wild1_s3yxV;
                                  };
                            }; } in
                  let {
                    sat_s3yxZ [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yxY];
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                            sat_s3yxZ sat_s3yy5
                    of
                    sat_s3yy6
                    { __DEFAULT ->
                          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                              sat_s3yy6 sat_s3yyd;
                    }; } in
        let {
          sat_s3yyo [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              [lvl116_s3yxH] \r [a_s3yyk]
                  case a_s3yyk of {
                    GHC.Types.C# y_s3yym [Occ=Once!] ->
                        case y_s3yym of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'E'# -> lvl116_s3yxH;
                        };
                  }; } in
        let {
          sat_s3yyp [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yyo]; } in
        let {
          sat_s3yyi [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              [lvl116_s3yxH] \r [a_s3yye]
                  case a_s3yye of {
                    GHC.Types.C# y_s3yyg [Occ=Once!] ->
                        case y_s3yyg of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'e'# -> lvl116_s3yxH;
                        };
                  }; } in
        let {
          sat_s3yyj [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yyi];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3yyj sat_s3yyp;

lvl114_r3yd7
  :: forall b.
     (GHC.Base.Maybe Text.Read.Lex.Digits
      -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [k_s3yyq] k_s3yyq GHC.Base.Nothing;

lvl115_r3yd8
  :: forall b.
     (GHC.Base.Maybe GHC.Integer.Type.Integer
      -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [k_s3yyr] k_s3yyr GHC.Base.Nothing;

$wlexDecNumber_r3yd9
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3yys]
        let {
          sat_s3yyE [Occ=Once]
            :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xkr
          [LclId] =
              [w2_s3yys] \r [a3_s3yyt]
                  let {
                    sat_s3yyB [Occ=Once]
                      :: GHC.Base.Maybe Text.Read.Lex.Digits
                         -> Text.ParserCombinators.ReadP.P b1_s3xkr
                    [LclId] =
                        [w2_s3yys a3_s3yyt] \r [a4_s3yyu]
                            let {
                              sat_s3yyy [Occ=Once]
                                :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                   -> Text.ParserCombinators.ReadP.P b1_s3xkr
                              [LclId] =
                                  [w2_s3yys a3_s3yyt a4_s3yyu] \r [a5_s3yyv]
                                      let {
                                        sat_s3yyw [Occ=Once] :: Text.Read.Lex.Number
                                        [LclId] =
                                            CCCS Text.Read.Lex.MkDecimal! [a3_s3yyt
                                                                           a4_s3yyu
                                                                           a5_s3yyv]; } in
                                      let {
                                        sat_s3yyx [Occ=Once] :: Text.Read.Lex.Lexeme
                                        [LclId] =
                                            CCCS Text.Read.Lex.Number! [sat_s3yyw];
                                      } in  w2_s3yys sat_s3yyx;
                            } in 
                              case
                                  Text.ParserCombinators.ReadP.$w<++
                                      lexExp_r3yd6 lvl115_r3yd8 sat_s3yyy
                              of
                              { Unit# ww1_s3yyA [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3yyA];
                              };
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$w<++
                            lexFrac_r3y9E lvl114_r3yd7 sat_s3yyB
                    of
                    { Unit# ww1_s3yyD [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3yyD];
                    };
        } in  $wlexDigits_r3y9x lvl6_r3y9C sat_s3yyE;

lexDecNumber_r3yda
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3yyF]
        case $wlexDecNumber_r3yd9 w2_s3yyF of {
          Unit# ww1_s3yyH [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3yyH];
        };

Text.Read.Lex.expect2
  :: forall b.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [k_s3yyI]
        let {
          $wk_s3yyJ [InlPrag=NOUSERINLINE[0], Occ=OnceL!, Dmd=<L,C(C1(U))>]
            :: GHC.Types.Char
               -> GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Arity=2, Str=<L,U(U)><S,1*U>, Unf=OtherCon []] =
              sat-only [k_s3yyI] \r [ww_s3yyK ww1_s3yyL]
                  let {
                    lvl116_s3yyM [Occ=OnceL*] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [k_s3yyI ww_s3yyK] \u []
                            let {
                              sat_s3yyN [Occ=Once] :: Text.Read.Lex.Lexeme
                              [LclId] =
                                  CCCS Text.Read.Lex.Char! [ww_s3yyK];
                            } in  k_s3yyI sat_s3yyN;
                  } in 
                    case ww1_s3yyL of {
                      GHC.Types.False ->
                          case ww_s3yyK of {
                            GHC.Types.C# x34_s3yyQ [Occ=Once!] ->
                                case x34_s3yyQ of {
                                  __DEFAULT ->
                                      let {
                                        sat_s3yyW [Occ=Once]
                                          :: GHC.Types.Char
                                             -> Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            [lvl116_s3yyM] \r [a_s3yyS]
                                                case a_s3yyS of {
                                                  GHC.Types.C# y_s3yyU [Occ=Once!] ->
                                                      case y_s3yyU of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Fail [];
                                                        '\''# -> lvl116_s3yyM;
                                                      };
                                                };
                                      } in  Text.ParserCombinators.ReadP.Get [sat_s3yyW];
                                  '\''# -> Text.ParserCombinators.ReadP.Fail [];
                                };
                          };
                      GHC.Types.True ->
                          let {
                            sat_s3yz1 [Occ=Once]
                              :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                            [LclId] =
                                [lvl116_s3yyM] \r [a_s3yyX]
                                    case a_s3yyX of {
                                      GHC.Types.C# y_s3yyZ [Occ=Once!] ->
                                          case y_s3yyZ of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            '\''# -> lvl116_s3yyM;
                                          };
                                    };
                          } in  Text.ParserCombinators.ReadP.Get [sat_s3yz1];
                    }; } in
        let {
          k1_s3yz2 [InlPrag=NOUSERINLINE[0], Occ=Once, Dmd=<L,C(U)>]
            :: (GHC.Types.Char, GHC.Types.Bool)
               -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Arity=1, Str=<S(LS),1*U(U(U),1*U)>, Unf=OtherCon []] =
              [$wk_s3yyJ] \r [w2_s3yz3]
                  case w2_s3yz3 of {
                    (,) ww1_s3yz5 [Occ=Once] ww2_s3yz6 [Occ=Once] ->
                        $wk_s3yyJ ww1_s3yz5 ww2_s3yz6;
                  }; } in
        let {
          lvl116_s3yz7 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              [k1_s3yz2] \u [] Text.Read.Lex.lexChar2 k1_s3yz2; } in
        let {
          lvl117_s3yz8 [Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
              [k_s3yyI lvl116_s3yz7] \r [a3_s3yz9]
                  case a3_s3yz9 of wild_s3yza {
                    GHC.Types.C# x34_s3yzb [Occ=Once!] ->
                        case x34_s3yzb of {
                          __DEFAULT ->
                              let {
                                lvl118_s3yzd [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
                                [LclId] =
                                    [k_s3yyI wild_s3yza] \u []
                                        let {
                                          sat_s3yze [Occ=Once] :: Text.Read.Lex.Lexeme
                                          [LclId] =
                                              CCCS Text.Read.Lex.Char! [wild_s3yza];
                                        } in  k_s3yyI sat_s3yze; } in
                              let {
                                sat_s3yzj [Occ=Once]
                                  :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                                [LclId] =
                                    [lvl118_s3yzd] \r [a_s3yzf]
                                        case a_s3yzf of {
                                          GHC.Types.C# y_s3yzh [Occ=Once!] ->
                                              case y_s3yzh of {
                                                __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                '\''# -> lvl118_s3yzd;
                                              };
                                        };
                              } in  Text.ParserCombinators.ReadP.Get [sat_s3yzj];
                          '\''# -> Text.ParserCombinators.ReadP.Fail [];
                          '\\'# -> lvl116_s3yz7;
                        };
                  }; } in
        let {
          lvl118_s3yzk [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl117_s3yz8]; } in
        let {
          sat_s3yAf [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              [k_s3yyI] \u []
                  let {
                    lvl119_s3yzr [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [k_s3yyI] \u [] body_r3yd5 GHC.Base.id k_s3yyI; } in
                  let {
                    sat_s3yAe [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [k_s3yyI] \u []
                            let {
                              sat_s3yAd [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                              [LclId] =
                                  [k_s3yyI] \u []
                                      let {
                                        sat_s3yAc [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            [k_s3yyI] \u []
                                                let {
                                                  sat_s3yAb [Occ=Once]
                                                    :: Text.ParserCombinators.ReadP.P b_X3nCK
                                                  [LclId] =
                                                      [k_s3yyI] \u []
                                                          case
                                                              Text.ParserCombinators.ReadP.$w<++
                                                                  lexHexOct_r3y9B
                                                                  lexDecNumber_r3yda
                                                                  k_s3yyI
                                                          of
                                                          { Unit# ww1_s3yAa [Occ=Once] ->
                                                                Text.ParserCombinators.ReadP.Look [ww1_s3yAa];
                                                          }; } in
                                                let {
                                                  sat_s3yA7 [Occ=Once]
                                                    :: GHC.Types.Char
                                                       -> Text.ParserCombinators.ReadP.P b_X3nCK
                                                  [LclId] =
                                                      [k_s3yyI] \r [a_s3yzQ]
                                                          case a_s3yzQ of wild_s3yzR {
                                                            GHC.Types.C# c#_s3yzS ->
                                                                case ord# [c#_s3yzS] of sat_s3yzU {
                                                                  __DEFAULT ->
                                                                      case
                                                                          __pkg_ccall base-4.11.0.0 [sat_s3yzU
                                                                                                     GHC.Prim.realWorld#]
                                                                      of
                                                                      { (#,#) _ [Occ=Dead]
                                                                              ds1_s3yzX [Occ=Once!] ->
                                                                            let-no-escape {
                                                                              $j_s3yzY [Occ=Once*T[0],
                                                                                        Dmd=<L,1*U>]
                                                                                :: Text.ParserCombinators.ReadP.P
                                                                                     b_X3nCK
                                                                              [LclId[JoinId(0)],
                                                                               Unf=OtherCon []] =
                                                                                  [k_s3yyI
                                                                                   wild_s3yzR] \r []
                                                                                      let {
                                                                                        sat_s3yA2 [Occ=Once]
                                                                                          :: GHC.Base.String
                                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                                  b_X3nCK
                                                                                        [LclId] =
                                                                                            [k_s3yyI
                                                                                             wild_s3yzR] \r [a3_s3yzZ]
                                                                                                let {
                                                                                                  sat_s3yA0 [Occ=Once]
                                                                                                    :: GHC.Base.String
                                                                                                  [LclId] =
                                                                                                      CCCS :! [wild_s3yzR
                                                                                                               a3_s3yzZ]; } in
                                                                                                let {
                                                                                                  sat_s3yA1 [Occ=Once]
                                                                                                    :: Text.Read.Lex.Lexeme
                                                                                                  [LclId] =
                                                                                                      CCCS Text.Read.Lex.Ident! [sat_s3yA0];
                                                                                                } in 
                                                                                                  k_s3yyI
                                                                                                      sat_s3yA1;
                                                                                      } in 
                                                                                        case
                                                                                            Text.ParserCombinators.ReadP.$wmunch
                                                                                                isIdfChar_r3y8W
                                                                                                sat_s3yA2
                                                                                        of
                                                                                        { Unit# ww1_s3yA4 [Occ=Once] ->
                                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3yA4];
                                                                                        };
                                                                            } in 
                                                                              case ds1_s3yzX of {
                                                                                __DEFAULT ->
                                                                                    $j_s3yzY;
                                                                                0# ->
                                                                                    case
                                                                                        c#_s3yzS
                                                                                    of
                                                                                    { __DEFAULT ->
                                                                                          Text.ParserCombinators.ReadP.Fail [];
                                                                                      '_'# ->
                                                                                          $j_s3yzY;
                                                                                    };
                                                                              };
                                                                      };
                                                                };
                                                          }; } in
                                                let {
                                                  sat_s3yA8 [Occ=Once]
                                                    :: Text.ParserCombinators.ReadP.P b_X3nCK
                                                  [LclId] =
                                                      CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yA7];
                                                } in 
                                                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                                      sat_s3yA8 sat_s3yAb; } in
                                      let {
                                        sat_s3yzO [Occ=Once]
                                          :: GHC.Types.Char
                                             -> Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            [k_s3yyI] \r [a_s3yzE]
                                                case Text.Read.Lex.isSymbolChar a_s3yzE of {
                                                  GHC.Types.False ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                  GHC.Types.True ->
                                                      let {
                                                        sat_s3yzL [Occ=Once]
                                                          :: GHC.Base.String
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b_X3nCK
                                                        [LclId] =
                                                            [k_s3yyI a_s3yzE] \r [a3_s3yzG]
                                                                let {
                                                                  a4_s3yzH :: GHC.Base.String
                                                                  [LclId, Unf=OtherCon []] =
                                                                      CCCS :! [a_s3yzE a3_s3yzG];
                                                                } in 
                                                                  case
                                                                      GHC.List.elem
                                                                          GHC.Classes.$fEq[]_$s$fEq[]1
                                                                          a4_s3yzH
                                                                          reserved_ops29_r3y9q
                                                                  of
                                                                  { GHC.Types.False ->
                                                                        let {
                                                                          sat_s3yzJ [Occ=Once]
                                                                            :: Text.Read.Lex.Lexeme
                                                                          [LclId] =
                                                                              CCCS Text.Read.Lex.Symbol! [a4_s3yzH];
                                                                        } in  k_s3yyI sat_s3yzJ;
                                                                    GHC.Types.True ->
                                                                        let {
                                                                          sat_s3yzK [Occ=Once]
                                                                            :: Text.Read.Lex.Lexeme
                                                                          [LclId] =
                                                                              CCCS Text.Read.Lex.Punc! [a4_s3yzH];
                                                                        } in  k_s3yyI sat_s3yzK;
                                                                  };
                                                      } in 
                                                        case
                                                            Text.ParserCombinators.ReadP.$wmunch
                                                                Text.Read.Lex.isSymbolChar sat_s3yzL
                                                        of
                                                        { Unit# ww1_s3yzN [Occ=Once] ->
                                                              Text.ParserCombinators.ReadP.Look [ww1_s3yzN];
                                                        };
                                                }; } in
                                      let {
                                        sat_s3yzP [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yzO];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3yzP sat_s3yAc; } in
                            let {
                              sat_s3yzC [Occ=Once]
                                :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                              [LclId] =
                                  [k_s3yyI] \r [a_s3yzy]
                                      case
                                          GHC.List.elem
                                              GHC.Classes.$fEqChar
                                              a_s3yzy
                                              Text.Read.Lex.isSymbolChar3
                                      of
                                      { GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                                        GHC.Types.True ->
                                            let {
                                              sat_s3yzA [Occ=Once] :: GHC.Base.String
                                              [LclId] =
                                                  CCCS :! [a_s3yzy GHC.Types.[]]; } in
                                            let {
                                              sat_s3yzB [Occ=Once] :: Text.Read.Lex.Lexeme
                                              [LclId] =
                                                  CCCS Text.Read.Lex.Punc! [sat_s3yzA];
                                            } in  k_s3yyI sat_s3yzB;
                                      }; } in
                            let {
                              sat_s3yzD [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yzC];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3yzD sat_s3yAd; } in
                  let {
                    sat_s3yzw [Occ=Once]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [lvl119_s3yzr] \r [a_s3yzs]
                            case a_s3yzs of {
                              GHC.Types.C# y_s3yzu [Occ=Once!] ->
                                  case y_s3yzu of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    '"'# -> lvl119_s3yzr;
                                  };
                            }; } in
                  let {
                    sat_s3yzx [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yzw];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3yzx sat_s3yAe; } in
        let {
          sat_s3yzp [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              [lvl118_s3yzk] \r [a_s3yzl]
                  case a_s3yzl of {
                    GHC.Types.C# y_s3yzn [Occ=Once!] ->
                        case y_s3yzn of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '\''# -> lvl118_s3yzk;
                        };
                  }; } in
        let {
          sat_s3yzq [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yzp];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3yzq sat_s3yAf;

Text.Read.Lex.$wlex [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w2_s3yAg]
        let {
          lvl116_s3yAh [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xkG
          [LclId] =
              [w2_s3yAg] \u []
                  let {
                    lvl117_s3yAi [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        [w2_s3yAg] \u [] w2_s3yAg Text.Read.Lex.EOF; } in
                  let {
                    sat_s3yAp [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        [w2_s3yAg] \u [] Text.Read.Lex.expect2 w2_s3yAg; } in
                  let {
                    sat_s3yAn [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        [lvl117_s3yAi] \r [a3_s3yAj]
                            case a3_s3yAj of {
                              [] -> lvl117_s3yAi;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3yAo [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3yAn];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3yAo sat_s3yAp; } in
        let {
          k_s3yAq [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3xkG
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3yAh] \r [a3_s3yAr] lvl116_s3yAh; } in
        let {
          sat_s3yAt [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkG
          [LclId] =
              [k_s3yAq] \r [a_s3yAs]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3yAs k_s3yAq;
        } in  Unit# [sat_s3yAt];

Text.Read.Lex.lex1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [w2_s3yAu]
        case Text.Read.Lex.$wlex w2_s3yAu of {
          Unit# ww1_s3yAw [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3yAw];
        };

Text.Read.Lex.lex
  :: Text.ParserCombinators.ReadP.ReadP Text.Read.Lex.Lexeme
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.lex1 eta_B1;

Text.Read.Lex.$wexpect [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Lexeme
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U><L,1*C1(U)>, Unf=OtherCon []] =
    [] \r [w2_s3yAx w3_s3yAy]
        let {
          lvl116_s3yAz [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_s3xkN
          [LclId] =
              [w2_s3yAx w3_s3yAy] \u []
                  let {
                    lvl117_s3yAA :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [w3_s3yAy] \u [] w3_s3yAy GHC.Tuple.(); } in
                  let {
                    lvl118_s3yAB [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [w2_s3yAx lvl117_s3yAA] \u []
                            case w2_s3yAx of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                              Text.Read.Lex.EOF -> lvl117_s3yAA;
                            }; } in
                  let {
                    sat_s3yAM [Occ=Once] :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [w2_s3yAx lvl117_s3yAA] \u []
                            let {
                              sat_s3yAL [Occ=Once]
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b_s3xkN
                              [LclId] =
                                  [w2_s3yAx lvl117_s3yAA] \r [a3_s3yAJ]
                                      case Text.Read.Lex.$fEqLexeme_$c== a3_s3yAJ w2_s3yAx of {
                                        GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                                        GHC.Types.True -> lvl117_s3yAA;
                                      };
                            } in  Text.Read.Lex.expect2 sat_s3yAL; } in
                  let {
                    sat_s3yAH [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [lvl118_s3yAB] \r [a3_s3yAD]
                            case a3_s3yAD of {
                              [] -> lvl118_s3yAB;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3yAI [Occ=Once] :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3yAH];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3yAI sat_s3yAM; } in
        let {
          k_s3yAN [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b_s3xkN
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3yAz] \r [a3_s3yAO] lvl116_s3yAz; } in
        let {
          sat_s3yAQ [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xkN
          [LclId] =
              [k_s3yAN] \r [a_s3yAP]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3yAP k_s3yAN;
        } in  Unit# [sat_s3yAQ];

Text.Read.Lex.expect1 [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Lexeme
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3yAR w3_s3yAS]
        case Text.Read.Lex.$wexpect w2_s3yAR w3_s3yAS of {
          Unit# ww1_s3yAU [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3yAU];
        };

Text.Read.Lex.expect
  :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.ReadP ()
[GblId, Arity=2, Str=<L,U><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.expect1 eta_B2 eta_B1;

Text.Read.Lex.$whsLex [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3yAV]
        let {
          lvl116_s3yAW [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xkT
          [LclId] =
              [w2_s3yAV] \u []
                  let {
                    lvl117_s3yAX [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT
                    [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                        [w2_s3yAV] \r [s_s3yAY] w2_s3yAV s_s3yAY; } in
                  let {
                    lvl118_s3yAZ
                      :: Text.ParserCombinators.ReadP.P
                           (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId, Unf=OtherCon []] =
                        CCCS Text.ParserCombinators.ReadP.Result! [lvl117_s3yAX
                                                                   Text.ParserCombinators.ReadP.Fail]; } in
                  let {
                    sat_s3yB8 [Occ=Once]
                      :: Text.ParserCombinators.ReadP.P
                           (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId] =
                        [lvl118_s3yAZ] \u []
                            let {
                              sat_s3yB7 [Occ=Once]
                                :: Text.Read.Lex.Lexeme
                                   -> Text.ParserCombinators.ReadP.P
                                        (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                              [LclId] =
                                  [lvl118_s3yAZ] \r [a3_s3yB6] lvl118_s3yAZ;
                            } in  Text.Read.Lex.expect2 sat_s3yB7; } in
                  let {
                    sat_s3yB4 [Occ=OnceL]
                      :: GHC.Base.String
                         -> Text.ParserCombinators.ReadP.P
                              (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId] =
                        [lvl118_s3yAZ] \r [a3_s3yB0]
                            case a3_s3yB0 of {
                              [] -> lvl118_s3yAZ;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3yB5 [Occ=Once]
                      :: Text.ParserCombinators.ReadP.P
                           (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3yB4];
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                            sat_s3yB5 sat_s3yB8
                    of
                    sat_s3yB9
                    { __DEFAULT ->
                          Text.ParserCombinators.ReadP.gather_gath GHC.Base.id sat_s3yB9;
                    }; } in
        let {
          k_s3yBa [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3xkT
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3yAW] \r [a3_s3yBb] lvl116_s3yAW; } in
        let {
          sat_s3yBd [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT
          [LclId] =
              [k_s3yBa] \r [a_s3yBc]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3yBc k_s3yBa;
        } in  Unit# [sat_s3yBd];

Text.Read.Lex.hsLex1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3yBe]
        case Text.Read.Lex.$whsLex w2_s3yBe of {
          Unit# ww1_s3yBg [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3yBg];
        };

Text.Read.Lex.hsLex
  :: Text.ParserCombinators.ReadP.ReadP GHC.Base.String
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.hsLex1 eta_B1;

Text.Read.Lex.MkNumber
  :: GHC.Types.Int -> Text.Read.Lex.Digits -> Text.Read.Lex.Number
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.MkNumber [eta_B2 eta_B1];

Text.Read.Lex.MkDecimal
  :: Text.Read.Lex.Digits
     -> GHC.Base.Maybe Text.Read.Lex.Digits
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> Text.Read.Lex.Number
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Read.Lex.MkDecimal [eta_B3 eta_B2 eta_B1];

Text.Read.Lex.Char :: GHC.Types.Char -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Char [eta_B1];

Text.Read.Lex.String :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.String [eta_B1];

Text.Read.Lex.Punc :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Punc [eta_B1];

Text.Read.Lex.Ident :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m4,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Ident [eta_B1];

Text.Read.Lex.Symbol :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m5,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Symbol [eta_B1];

Text.Read.Lex.Number
  :: Text.Read.Lex.Number -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m6,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Number [eta_B1];

Text.Read.Lex.EOF :: Text.Read.Lex.Lexeme
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.EOF! [];


==================== STG syntax: ====================
2018-03-16 15:58:10.040857916 UTC

Text.Read.Lex.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Text.Read.Lex.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$trModule4];

Text.Read.Lex.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text.Read.Lex"#;

Text.Read.Lex.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$trModule2];

Text.Read.Lex.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Text.Read.Lex.$trModule3
                                     Text.Read.Lex.$trModule1];

$krep_r3y8E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep1_r3y8F :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_r3y8G :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep3_r3y8H :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r3y8E GHC.Types.[]];

$krep4_r3y8I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep3_r3y8H];

$krep5_r3y8J :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r3y8F GHC.Types.[]];

$krep6_r3y8K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep5_r3y8J];

$krep7_r3y8L :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_r3y8K GHC.Types.[]];

$krep8_r3y8M :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep7_r3y8L];

$krep9_r3y8N :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r3y8G GHC.Types.[]];

$krep10_r3y8O :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep9_r3y8N];

Text.Read.Lex.$tcNumber2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Number"#;

Text.Read.Lex.$tcNumber1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tcNumber2];

Text.Read.Lex.$tcNumber :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [309030926258572567##
                                    15861928963352354800##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tcNumber1
                                    0#
                                    GHC.Types.krep$*];

$krep11_r3y8P :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Read.Lex.$tcNumber
                                              GHC.Types.[]];

$krep12_r3y8Q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r3y8I $krep11_r3y8P];

$krep13_r3y8R :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r3y8M $krep12_r3y8Q];

Text.Read.Lex.$tc'MkDecimal1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r3y8K $krep13_r3y8R];

Text.Read.Lex.$tc'MkDecimal3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MkDecimal"#;

Text.Read.Lex.$tc'MkDecimal2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'MkDecimal3];

Text.Read.Lex.$tc'MkDecimal :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3768064156751246198##
                                    12661213050981530502##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'MkDecimal2
                                    0#
                                    Text.Read.Lex.$tc'MkDecimal1];

$krep14_r3y8S :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r3y8K $krep11_r3y8P];

Text.Read.Lex.$tc'MkNumber1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r3y8F $krep14_r3y8S];

Text.Read.Lex.$tc'MkNumber3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MkNumber"#;

Text.Read.Lex.$tc'MkNumber2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'MkNumber3];

Text.Read.Lex.$tc'MkNumber :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13396293166029931455##
                                    9655480518931438202##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'MkNumber2
                                    0#
                                    Text.Read.Lex.$tc'MkNumber1];

Text.Read.Lex.$tcLexeme2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Lexeme"#;

Text.Read.Lex.$tcLexeme1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tcLexeme2];

Text.Read.Lex.$tcLexeme :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [80462090517814070##
                                    11862718491065697853##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tcLexeme1
                                    0#
                                    GHC.Types.krep$*];

Text.Read.Lex.$tc'EOF1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Read.Lex.$tcLexeme
                                              GHC.Types.[]];

Text.Read.Lex.$tc'EOF3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'EOF"#;

Text.Read.Lex.$tc'EOF2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'EOF3];

Text.Read.Lex.$tc'EOF :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3510729917506789415##
                                    3927434500167946503##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'EOF2
                                    0#
                                    Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'Ident1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_r3y8O
                                         Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'String2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'String"#;

Text.Read.Lex.$tc'String1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'String2];

Text.Read.Lex.$tc'String :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4234975262003182519##
                                    13764813366371540099##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'String1
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Punc2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Punc"#;

Text.Read.Lex.$tc'Punc1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Punc2];

Text.Read.Lex.$tc'Punc :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12518860736485891069##
                                    4367633479442506190##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Punc1
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Ident3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Ident"#;

Text.Read.Lex.$tc'Ident2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Ident3];

Text.Read.Lex.$tc'Ident :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17378133866674838049##
                                    11361322998352874125##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Ident2
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Symbol2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Symbol"#;

Text.Read.Lex.$tc'Symbol1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Symbol2];

Text.Read.Lex.$tc'Symbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [434905475898525586##
                                    17609692850475477756##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Symbol1
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Char1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_r3y8G
                                         Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'Char3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Char"#;

Text.Read.Lex.$tc'Char2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Char3];

Text.Read.Lex.$tc'Char :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4794546904228625478##
                                    396576625805862141##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Char2
                                    0#
                                    Text.Read.Lex.$tc'Char1];

Text.Read.Lex.$tc'Number1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r3y8P
                                         Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'Number3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Number"#;

Text.Read.Lex.$tc'Number2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Number3];

Text.Read.Lex.$tc'Number :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3115835552307058655##
                                    14198768466951480548##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Number2
                                    0#
                                    Text.Read.Lex.$tc'Number1];

Text.Read.Lex.$fShowLexeme9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MkDecimal "#;

Text.Read.Lex.$fShowLexeme8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.$fShowLexeme9;

Text.Read.Lex.$fShowLexeme10 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

Text.Read.Lex.$fShowLexeme11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MkNumber "#;

Text.Read.Lex.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> Text.Read.Lex.Number -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s3ydc w2_s3ydd]
        case w2_s3ydd of {
          Text.Read.Lex.MkNumber b1_s3ydf [Occ=OnceL!]
                                 b2_s3ydg [Occ=OnceL!] ->
              let {
                p_s3ydh [Occ=OnceL*] :: GHC.Show.ShowS
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    [b1_s3ydf b2_s3ydg] \r [x34_s3ydi]
                        let {
                          sat_s3ydN [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [b1_s3ydf b2_s3ydg x34_s3ydi] \u []
                                  case b1_s3ydf of {
                                    GHC.Types.I# ww3_s3ydk [Occ=Once] ->
                                        let {
                                          sat_s3ydI [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [b2_s3ydg x34_s3ydi] \u []
                                                  case b2_s3ydg of {
                                                    [] ->
                                                        GHC.CString.unpackAppendCString#
                                                            GHC.Show.showList__4 x34_s3ydi;
                                                    : x35_s3ydm [Occ=Once!] xs_s3ydn [Occ=Once] ->
                                                        let {
                                                          sat_s3ydH [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [x34_s3ydi x35_s3ydm xs_s3ydn] \u []
                                                                  case x35_s3ydm of {
                                                                    GHC.Types.I# ww5_s3ydp [Occ=Once] ->
                                                                        let {
                                                                          sat_s3ydD [Occ=Once]
                                                                            :: GHC.Base.String
                                                                          [LclId] =
                                                                              [x34_s3ydi
                                                                               xs_s3ydn] \u []
                                                                                  let {
                                                                                    lvl116_s3ydq [Occ=OnceL]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId,
                                                                                     Unf=OtherCon []] =
                                                                                        CCCS :! [GHC.Show.showList__2
                                                                                                 x34_s3ydi]; } in
                                                                                  let {
                                                                                    showl_s3ydr [Occ=LoopBreaker]
                                                                                      :: [GHC.Types.Int]
                                                                                         -> GHC.Base.String
                                                                                    [LclId,
                                                                                     Arity=1,
                                                                                     Str=<S,1*U>,
                                                                                     Unf=OtherCon []] =
                                                                                        sat-only [lvl116_s3ydq
                                                                                                  showl_s3ydr] \r [ds2_s3yds]
                                                                                            case
                                                                                                ds2_s3yds
                                                                                            of
                                                                                            { [] ->
                                                                                                  lvl116_s3ydq;
                                                                                              : y_s3ydu [Occ=Once!]
                                                                                                ys_s3ydv [Occ=Once] ->
                                                                                                  let {
                                                                                                    sat_s3ydC [Occ=Once]
                                                                                                      :: [GHC.Types.Char]
                                                                                                    [LclId] =
                                                                                                        [showl_s3ydr
                                                                                                         y_s3ydu
                                                                                                         ys_s3ydv] \u []
                                                                                                            case
                                                                                                                y_s3ydu
                                                                                                            of
                                                                                                            { GHC.Types.I# ww7_s3ydx [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_s3ydy [Occ=Once]
                                                                                                                      :: GHC.Base.String
                                                                                                                    [LclId] =
                                                                                                                        [showl_s3ydr
                                                                                                                         ys_s3ydv] \u []
                                                                                                                            showl_s3ydr
                                                                                                                                ys_s3ydv;
                                                                                                                  } in 
                                                                                                                    case
                                                                                                                        GHC.Show.$wshowSignedInt
                                                                                                                            0#
                                                                                                                            ww7_s3ydx
                                                                                                                            sat_s3ydy
                                                                                                                    of
                                                                                                                    { (#,#) ww9_s3ydA [Occ=Once]
                                                                                                                            ww4_s3ydB [Occ=Once] ->
                                                                                                                          : [ww9_s3ydA
                                                                                                                             ww4_s3ydB];
                                                                                                                    };
                                                                                                            };
                                                                                                  } in 
                                                                                                    : [GHC.Show.showList__1
                                                                                                       sat_s3ydC];
                                                                                            };
                                                                                  } in 
                                                                                    showl_s3ydr
                                                                                        xs_s3ydn;
                                                                        } in 
                                                                          case
                                                                              GHC.Show.$wshowSignedInt
                                                                                  0#
                                                                                  ww5_s3ydp
                                                                                  sat_s3ydD
                                                                          of
                                                                          { (#,#) ww7_s3ydF [Occ=Once]
                                                                                  ww4_s3ydG [Occ=Once] ->
                                                                                : [ww7_s3ydF
                                                                                   ww4_s3ydG];
                                                                          };
                                                                  };
                                                        } in  : [GHC.Show.showList__3 sat_s3ydH];
                                                  }; } in
                                        let {
                                          sat_s3ydJ [Occ=Once] :: GHC.Base.String
                                          [LclId] =
                                              CCCS :! [GHC.Show.showSpace1 sat_s3ydI];
                                        } in 
                                          case GHC.Show.$wshowSignedInt 11# ww3_s3ydk sat_s3ydJ of {
                                            (#,#) ww5_s3ydL [Occ=Once] ww6_s3ydM [Occ=Once] ->
                                                : [ww5_s3ydL ww6_s3ydM];
                                          };
                                  };
                        } in 
                          GHC.CString.unpackAppendCString#
                              Text.Read.Lex.$fShowLexeme11 sat_s3ydN;
              } in 
                case >=# [ww_s3ydc 11#] of {
                  __DEFAULT -> p_s3ydh;
                  1# ->
                      let {
                        sat_s3ydS [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p_s3ydh] \r [x34_s3ydP]
                                let {
                                  sat_s3ydR [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p_s3ydh x34_s3ydP] \u []
                                          let {
                                            sat_s3ydQ [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                CCCS :! [GHC.Show.$fShow(,)2 x34_s3ydP];
                                          } in  p_s3ydh sat_s3ydQ;
                                } in  : [GHC.Show.$fShow(,)4 sat_s3ydR];
                      } in  sat_s3ydS;
                };
          Text.Read.Lex.MkDecimal b1_s3ydT [Occ=OnceL]
                                  b2_s3ydU [Occ=Once]
                                  b3_s3ydV [Occ=Once] ->
              let {
                f_s3ydW [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [b2_s3ydU] \u []
                        GHC.Show.$fShowMaybe_$cshowsPrec
                            GHC.Show.$fShow[]_$s$fShow[]
                            Text.Read.Lex.$fShowLexeme10
                            b2_s3ydU; } in
              let {
                g_s3ydX [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [b3_s3ydV] \u []
                        GHC.Show.$fShowMaybe_$cshowsPrec
                            GHC.Show.$fShowInteger Text.Read.Lex.$fShowLexeme10 b3_s3ydV; } in
              let {
                g1_s3ydY [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [b1_s3ydT f_s3ydW g_s3ydX] \r [x34_s3ydZ]
                        let {
                          sat_s3ye2 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [f_s3ydW g_s3ydX x34_s3ydZ] \u []
                                  let {
                                    sat_s3ye0 [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [g_s3ydX x34_s3ydZ] \u [] g_s3ydX x34_s3ydZ; } in
                                  let {
                                    sat_s3ye1 [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        CCCS :! [GHC.Show.showSpace1 sat_s3ye0];
                                  } in  f_s3ydW sat_s3ye1; } in
                        let {
                          sat_s3ye3 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.showSpace1 sat_s3ye2];
                        } in  GHC.Show.showList__ GHC.Show.$fShowInt1 b1_s3ydT sat_s3ye3;
              } in 
                case >=# [ww_s3ydc 11#] of {
                  __DEFAULT ->
                      let {
                        sat_s3ye7 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [g1_s3ydY] \r [x34_s3ye5]
                                let {
                                  sat_s3ye6 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [g1_s3ydY x34_s3ye5] \s [] g1_s3ydY x34_s3ye5;
                                } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme8 sat_s3ye6;
                      } in  sat_s3ye7;
                  1# ->
                      let {
                        sat_s3yec [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [g1_s3ydY] \r [x34_s3ye8]
                                let {
                                  sat_s3yeb [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [g1_s3ydY x34_s3ye8] \u []
                                          let {
                                            sat_s3yea [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [g1_s3ydY x34_s3ye8] \s []
                                                    let {
                                                      sat_s3ye9 [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          CCCS :! [GHC.Show.$fShow(,)2 x34_s3ye8];
                                                    } in  g1_s3ydY sat_s3ye9;
                                          } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme8 sat_s3yea;
                                } in  : [GHC.Show.$fShow(,)4 sat_s3yeb];
                      } in  sat_s3yec;
                };
        };

Text.Read.Lex.$fShowNumber_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> Text.Read.Lex.Number -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [w2_s3yed w3_s3yee]
        case w2_s3yed of {
          GHC.Types.I# ww1_s3yeg [Occ=Once] ->
              Text.Read.Lex.$w$cshowsPrec ww1_s3yeg w3_s3yee;
        };

Text.Read.Lex.$fShowLexeme2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Text.Read.Lex.$fShowNumber_$cshow
  :: Text.Read.Lex.Number -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x34_s3yeh]
        Text.Read.Lex.$w$cshowsPrec 0# x34_s3yeh GHC.Types.[];

Text.Read.Lex.$fShowNumber1
  :: Text.Read.Lex.Number -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w2_s3yei] Text.Read.Lex.$w$cshowsPrec 0# w2_s3yei;

Text.Read.Lex.$fShowNumber_$cshowList
  :: [Text.Read.Lex.Number] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s3yej s_s3yek]
        GHC.Show.showList__ Text.Read.Lex.$fShowNumber1 ls_s3yej s_s3yek;

Text.Read.Lex.$fShowNumber [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Text.Read.Lex.Number
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Text.Read.Lex.$fShowNumber_$cshowsPrec
                                    Text.Read.Lex.$fShowNumber_$cshow
                                    Text.Read.Lex.$fShowNumber_$cshowList];

Text.Read.Lex.$fShowLexeme7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Number "#;

Text.Read.Lex.$fShowLexeme6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.$fShowLexeme7;

Text.Read.Lex.$fShowLexeme5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EOF"#;

Text.Read.Lex.$fShowLexeme4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.$fShowLexeme5;

Text.Read.Lex.$fShowLexeme3 :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ Text.Read.Lex.$fShowLexeme4 eta_B1;

Text.Read.Lex.$fShowLexeme16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Char "#;

Text.Read.Lex.$fShowLexeme15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "String "#;

Text.Read.Lex.$fShowLexeme14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Punc "#;

Text.Read.Lex.$fShowLexeme13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Ident "#;

Text.Read.Lex.$fShowLexeme12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Symbol "#;

Text.Read.Lex.$fShowLexeme_$cshowsPrec
  :: GHC.Types.Int -> Text.Read.Lex.Lexeme -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [a_s3yel ds_s3yem]
        case ds_s3yem of {
          Text.Read.Lex.Char b1_s3yeo [Occ=OnceL*!] ->
              case a_s3yel of {
                GHC.Types.I# x34_s3yeq [Occ=Once] ->
                    case >=# [x34_s3yeq 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3yew [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yeo] \r [x35_s3yes]
                                    let {
                                      sat_s3yev [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yeo x35_s3yes] \u []
                                              case b1_s3yeo of {
                                                GHC.Types.C# ww1_s3yeu [Occ=Once] ->
                                                    GHC.Show.$w$cshowsPrec3 ww1_s3yeu x35_s3yes;
                                              };
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme16 sat_s3yev;
                          } in  sat_s3yew;
                      1# ->
                          let {
                            sat_s3yeD [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yeo] \r [x35_s3yex]
                                    let {
                                      sat_s3yeC [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yeo x35_s3yex] \u []
                                              let {
                                                sat_s3yeB [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3yeo x35_s3yex] \u []
                                                        case b1_s3yeo of {
                                                          GHC.Types.C# ww1_s3yez [Occ=Once] ->
                                                              let {
                                                                sat_s3yeA [Occ=Once]
                                                                  :: GHC.Base.String
                                                                [LclId] =
                                                                    CCCS :! [GHC.Show.$fShow(,)2
                                                                             x35_s3yex];
                                                              } in 
                                                                GHC.Show.$w$cshowsPrec3
                                                                    ww1_s3yez sat_s3yeA;
                                                        };
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme16 sat_s3yeB;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3yeC];
                          } in  sat_s3yeD;
                    };
              };
          Text.Read.Lex.String b1_s3yeE [Occ=OnceL*] ->
              case a_s3yel of {
                GHC.Types.I# x34_s3yeG [Occ=Once] ->
                    case >=# [x34_s3yeG 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3yeM [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yeE] \r [x35_s3yeI]
                                    let {
                                      sat_s3yeK [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yeE x35_s3yeI] \u []
                                              let {
                                                sat_s3yeJ [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3yeI];
                                              } in  GHC.Show.showLitString b1_s3yeE sat_s3yeJ; } in
                                    let {
                                      sat_s3yeL [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3yeK];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme15 sat_s3yeL;
                          } in  sat_s3yeM;
                      1# ->
                          let {
                            sat_s3yeT [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yeE] \r [x35_s3yeN]
                                    let {
                                      sat_s3yeS [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yeE x35_s3yeN] \u []
                                              let {
                                                sat_s3yeQ [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3yeE x35_s3yeN] \u []
                                                        let {
                                                          sat_s3yeO [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3yeN]; } in
                                                        let {
                                                          sat_s3yeP [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3yeO];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3yeE sat_s3yeP; } in
                                              let {
                                                sat_s3yeR [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yeQ];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme15 sat_s3yeR;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3yeS];
                          } in  sat_s3yeT;
                    };
              };
          Text.Read.Lex.Punc b1_s3yeU [Occ=OnceL*] ->
              case a_s3yel of {
                GHC.Types.I# x34_s3yeW [Occ=Once] ->
                    case >=# [x34_s3yeW 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3yf2 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yeU] \r [x35_s3yeY]
                                    let {
                                      sat_s3yf0 [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yeU x35_s3yeY] \u []
                                              let {
                                                sat_s3yeZ [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3yeY];
                                              } in  GHC.Show.showLitString b1_s3yeU sat_s3yeZ; } in
                                    let {
                                      sat_s3yf1 [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3yf0];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme14 sat_s3yf1;
                          } in  sat_s3yf2;
                      1# ->
                          let {
                            sat_s3yf9 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yeU] \r [x35_s3yf3]
                                    let {
                                      sat_s3yf8 [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yeU x35_s3yf3] \u []
                                              let {
                                                sat_s3yf6 [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3yeU x35_s3yf3] \u []
                                                        let {
                                                          sat_s3yf4 [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3yf3]; } in
                                                        let {
                                                          sat_s3yf5 [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3yf4];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3yeU sat_s3yf5; } in
                                              let {
                                                sat_s3yf7 [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yf6];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme14 sat_s3yf7;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3yf8];
                          } in  sat_s3yf9;
                    };
              };
          Text.Read.Lex.Ident b1_s3yfa [Occ=OnceL*] ->
              case a_s3yel of {
                GHC.Types.I# x34_s3yfc [Occ=Once] ->
                    case >=# [x34_s3yfc 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3yfi [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yfa] \r [x35_s3yfe]
                                    let {
                                      sat_s3yfg [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yfa x35_s3yfe] \u []
                                              let {
                                                sat_s3yff [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3yfe];
                                              } in  GHC.Show.showLitString b1_s3yfa sat_s3yff; } in
                                    let {
                                      sat_s3yfh [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3yfg];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme13 sat_s3yfh;
                          } in  sat_s3yfi;
                      1# ->
                          let {
                            sat_s3yfp [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yfa] \r [x35_s3yfj]
                                    let {
                                      sat_s3yfo [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yfa x35_s3yfj] \u []
                                              let {
                                                sat_s3yfm [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3yfa x35_s3yfj] \u []
                                                        let {
                                                          sat_s3yfk [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3yfj]; } in
                                                        let {
                                                          sat_s3yfl [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3yfk];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3yfa sat_s3yfl; } in
                                              let {
                                                sat_s3yfn [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yfm];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme13 sat_s3yfn;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3yfo];
                          } in  sat_s3yfp;
                    };
              };
          Text.Read.Lex.Symbol b1_s3yfq [Occ=OnceL*] ->
              case a_s3yel of {
                GHC.Types.I# x34_s3yfs [Occ=Once] ->
                    case >=# [x34_s3yfs 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3yfy [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yfq] \r [x35_s3yfu]
                                    let {
                                      sat_s3yfw [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yfq x35_s3yfu] \u []
                                              let {
                                                sat_s3yfv [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3yfu];
                                              } in  GHC.Show.showLitString b1_s3yfq sat_s3yfv; } in
                                    let {
                                      sat_s3yfx [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3yfw];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme12 sat_s3yfx;
                          } in  sat_s3yfy;
                      1# ->
                          let {
                            sat_s3yfF [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3yfq] \r [x35_s3yfz]
                                    let {
                                      sat_s3yfE [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3yfq x35_s3yfz] \u []
                                              let {
                                                sat_s3yfC [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3yfq x35_s3yfz] \u []
                                                        let {
                                                          sat_s3yfA [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3yfz]; } in
                                                        let {
                                                          sat_s3yfB [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3yfA];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3yfq sat_s3yfB; } in
                                              let {
                                                sat_s3yfD [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yfC];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme12 sat_s3yfD;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3yfE];
                          } in  sat_s3yfF;
                    };
              };
          Text.Read.Lex.Number b1_s3yfG [Occ=Once] ->
              case a_s3yel of {
                GHC.Types.I# x34_s3yfI [Occ=Once] ->
                    let {
                      g_s3yfJ [Occ=OnceL*!, Dmd=<L,C(U)>]
                        :: GHC.Base.String -> GHC.Base.String
                      [LclId] =
                          [b1_s3yfG] \u [] Text.Read.Lex.$w$cshowsPrec 11# b1_s3yfG;
                    } in 
                      case >=# [x34_s3yfI 11#] of {
                        __DEFAULT ->
                            let {
                              sat_s3yfN [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s3yfJ] \r [x35_s3yfL]
                                      let {
                                        sat_s3yfM [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s3yfJ x35_s3yfL] \s [] g_s3yfJ x35_s3yfL;
                                      } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme6 sat_s3yfM;
                            } in  sat_s3yfN;
                        1# ->
                            let {
                              sat_s3yfS [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s3yfJ] \r [x35_s3yfO]
                                      let {
                                        sat_s3yfR [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s3yfJ x35_s3yfO] \u []
                                                let {
                                                  sat_s3yfQ [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [g_s3yfJ x35_s3yfO] \s []
                                                          let {
                                                            sat_s3yfP [Occ=Once] :: GHC.Base.String
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)2
                                                                         x35_s3yfO];
                                                          } in  g_s3yfJ sat_s3yfP;
                                                } in 
                                                  GHC.Base.++ Text.Read.Lex.$fShowLexeme6 sat_s3yfQ;
                                      } in  : [GHC.Show.$fShow(,)4 sat_s3yfR];
                            } in  sat_s3yfS;
                      };
              };
          Text.Read.Lex.EOF -> Text.Read.Lex.$fShowLexeme3;
        };

Text.Read.Lex.$fShowLexeme17 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)3 GHC.Types.[]];

Text.Read.Lex.$fShowLexeme_$cshow
  :: Text.Read.Lex.Lexeme -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x34_s3yfT]
        case x34_s3yfT of {
          Text.Read.Lex.Char b1_s3yfV [Occ=Once!] ->
              let {
                sat_s3yfY [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3yfV] \u []
                        case b1_s3yfV of {
                          GHC.Types.C# ww1_s3yfX [Occ=Once] ->
                              GHC.Show.$w$cshowsPrec3 ww1_s3yfX GHC.Types.[];
                        };
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme16 sat_s3yfY;
          Text.Read.Lex.String b1_s3yfZ [Occ=Once] ->
              let {
                sat_s3yg0 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3yfZ] \u []
                        GHC.Show.showLitString b1_s3yfZ Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3yg1 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yg0];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme15 sat_s3yg1;
          Text.Read.Lex.Punc b1_s3yg2 [Occ=Once] ->
              let {
                sat_s3yg3 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3yg2] \u []
                        GHC.Show.showLitString b1_s3yg2 Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3yg4 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yg3];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme14 sat_s3yg4;
          Text.Read.Lex.Ident b1_s3yg5 [Occ=Once] ->
              let {
                sat_s3yg6 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3yg5] \u []
                        GHC.Show.showLitString b1_s3yg5 Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3yg7 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yg6];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme13 sat_s3yg7;
          Text.Read.Lex.Symbol b1_s3yg8 [Occ=Once] ->
              let {
                sat_s3yg9 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3yg8] \u []
                        GHC.Show.showLitString b1_s3yg8 Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3yga [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3yg9];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme12 sat_s3yga;
          Text.Read.Lex.Number b1_s3ygb [Occ=Once] ->
              let {
                sat_s3ygc [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3ygb] \s []
                        Text.Read.Lex.$w$cshowsPrec 11# b1_s3ygb GHC.Types.[];
              } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme6 sat_s3ygc;
          Text.Read.Lex.EOF -> Text.Read.Lex.$fShowLexeme4;
        };

Text.Read.Lex.$fShowLexeme1
  :: Text.Read.Lex.Lexeme -> GHC.Show.ShowS
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.Read.Lex.$fShowLexeme_$cshowsPrec
            Text.Read.Lex.$fShowLexeme2 eta_B1;

Text.Read.Lex.$fShowLexeme_$cshowList
  :: [Text.Read.Lex.Lexeme] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s3ygd s_s3yge]
        GHC.Show.showList__ Text.Read.Lex.$fShowLexeme1 ls_s3ygd s_s3yge;

Text.Read.Lex.$fShowLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Text.Read.Lex.Lexeme
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Text.Read.Lex.$fShowLexeme_$cshowsPrec
                                    Text.Read.Lex.$fShowLexeme_$cshow
                                    Text.Read.Lex.$fShowLexeme_$cshowList];

Text.Read.Lex.isSymbolChar4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ",;()[]{}`"#;

Text.Read.Lex.isSymbolChar3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.isSymbolChar4;

Text.Read.Lex.isSymbolChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'\""#;

Text.Read.Lex.isSymbolChar1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.isSymbolChar2;

Text.Read.Lex.isSymbolChar :: GHC.Types.Char -> GHC.Types.Bool
[GblId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [c_s3ygf]
        case
            GHC.List.elem
                GHC.Classes.$fEqChar c_s3ygf Text.Read.Lex.isSymbolChar3
        of
        { GHC.Types.False ->
              case c_s3ygf of ww_s3ygh {
                GHC.Types.C# ww1_s3ygi ->
                    case GHC.Unicode.$wgeneralCategory ww1_s3ygi of {
                      __DEFAULT -> GHC.Types.False [];
                      GHC.Unicode.ConnectorPunctuation ->
                          case ww1_s3ygi of {
                            __DEFAULT -> GHC.Types.True [];
                            '_'# -> GHC.Types.False [];
                          };
                      GHC.Unicode.DashPunctuation -> GHC.Types.True [];
                      GHC.Unicode.OtherPunctuation ->
                          case
                              GHC.List.elem
                                  GHC.Classes.$fEqChar ww_s3ygh Text.Read.Lex.isSymbolChar1
                          of
                          { GHC.Types.False -> GHC.Types.True [];
                            GHC.Types.True -> GHC.Types.False [];
                          };
                      GHC.Unicode.MathSymbol -> GHC.Types.True [];
                      GHC.Unicode.CurrencySymbol -> GHC.Types.True [];
                      GHC.Unicode.ModifierSymbol -> GHC.Types.True [];
                      GHC.Unicode.OtherSymbol -> GHC.Types.True [];
                    };
              };
          GHC.Types.True -> GHC.Types.False [];
        };

lvl_r3y8T :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "_'"#;

lvl1_r3y8U :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_r3y8T;

$wisIdfChar_r3y8V :: GHC.Prim.Char# -> GHC.Types.Bool
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [ww_s3ygm]
        case ord# [ww_s3ygm] of sat_s3ygo {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_s3ygo GHC.Prim.realWorld#] of {
                Unit# ds1_s3ygr [Occ=Once!] ->
                    case ds1_s3ygr of {
                      __DEFAULT -> GHC.Types.True [];
                      0# ->
                          let {
                            sat_s3ygt [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [ww_s3ygm];
                          } in  GHC.List.elem GHC.Classes.$fEqChar sat_s3ygt lvl1_r3y8U;
                    };
              };
        };

isIdfChar_r3y8W :: GHC.Types.Char -> GHC.Types.Bool
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w2_s3ygu]
        case w2_s3ygu of {
          GHC.Types.C# ww1_s3ygw [Occ=Once] -> $wisIdfChar_r3y8V ww1_s3ygw;
        };

reserved_ops_r3y8X :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ".."#;

reserved_ops1_r3y8Y :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops_r3y8X;

reserved_ops2_r3y8Z :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "::"#;

reserved_ops3_r3y90 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops2_r3y8Z;

reserved_ops4_r3y91 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "="#;

reserved_ops5_r3y92 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops4_r3y91;

reserved_ops6_r3y93 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\"#;

reserved_ops7_r3y94 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops6_r3y93;

reserved_ops8_r3y95 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "|"#;

reserved_ops9_r3y96 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops8_r3y95;

reserved_ops10_r3y97 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<-"#;

reserved_ops11_r3y98 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops10_r3y97;

reserved_ops12_r3y99 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "->"#;

reserved_ops13_r3y9a :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops12_r3y99;

reserved_ops14_r3y9b :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "@"#;

reserved_ops15_r3y9c :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops14_r3y9b;

reserved_ops16_r3y9d :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "~"#;

reserved_ops17_r3y9e :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops16_r3y9d;

reserved_ops18_r3y9f :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "=>"#;

reserved_ops19_r3y9g :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops18_r3y9f;

reserved_ops20_r3y9h :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops19_r3y9g GHC.Types.[]];

reserved_ops21_r3y9i :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops17_r3y9e reserved_ops20_r3y9h];

reserved_ops22_r3y9j :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops15_r3y9c reserved_ops21_r3y9i];

reserved_ops23_r3y9k :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops13_r3y9a reserved_ops22_r3y9j];

reserved_ops24_r3y9l :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops11_r3y98 reserved_ops23_r3y9k];

reserved_ops25_r3y9m :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops9_r3y96 reserved_ops24_r3y9l];

reserved_ops26_r3y9n :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops7_r3y94 reserved_ops25_r3y9m];

reserved_ops27_r3y9o :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops5_r3y92 reserved_ops26_r3y9n];

reserved_ops28_r3y9p :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops3_r3y90 reserved_ops27_r3y9o];

reserved_ops29_r3y9q :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops1_r3y8Y reserved_ops28_r3y9p];

Text.Read.Lex.$fEqLexeme_$c==1
  :: Text.Read.Lex.Number -> Text.Read.Lex.Number -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3ygx ds1_s3ygy]
        case ds_s3ygx of {
          Text.Read.Lex.MkNumber a3_s3ygA [Occ=Once!] a4_s3ygB [Occ=Once] ->
              case ds1_s3ygy of {
                Text.Read.Lex.MkNumber b1_s3ygD [Occ=Once!] b2_s3ygE [Occ=Once] ->
                    case a3_s3ygA of {
                      GHC.Types.I# x34_s3ygG [Occ=Once] ->
                          case b1_s3ygD of {
                            GHC.Types.I# y_s3ygI [Occ=Once] ->
                                case ==# [x34_s3ygG y_s3ygI] of {
                                  __DEFAULT -> GHC.Types.False [];
                                  1# -> GHC.Classes.$fEq[]_$s$c== a4_s3ygB b2_s3ygE;
                                };
                          };
                    };
                Text.Read.Lex.MkDecimal _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          Text.Read.Lex.MkDecimal a3_s3ygN [Occ=Once]
                                  a4_s3ygO [Occ=Once!]
                                  a5_s3ygP [Occ=Once!] ->
              case ds1_s3ygy of {
                Text.Read.Lex.MkNumber _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.False [];
                Text.Read.Lex.MkDecimal b1_s3ygT [Occ=Once]
                                        b2_s3ygU [Occ=Once*!]
                                        b3_s3ygV [Occ=Once*!] ->
                    case GHC.Classes.$fEq[]_$s$c== a3_s3ygN b1_s3ygT of {
                      GHC.Types.False -> GHC.Types.False [];
                      GHC.Types.True ->
                          let-no-escape {
                            $j_s3ygX [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Types.Bool
                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                [a5_s3ygP b3_s3ygV] \r []
                                    case a5_s3ygP of {
                                      GHC.Base.Nothing ->
                                          case b3_s3ygV of {
                                            GHC.Base.Nothing -> GHC.Types.True [];
                                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                                          };
                                      GHC.Base.Just a6_s3yh1 [Occ=Once] ->
                                          case b3_s3ygV of {
                                            GHC.Base.Nothing -> GHC.Types.False [];
                                            GHC.Base.Just b4_s3yh3 [Occ=Once] ->
                                                GHC.Integer.Type.eqInteger a6_s3yh1 b4_s3yh3;
                                          };
                                    };
                          } in 
                            case a4_s3ygO of {
                              GHC.Base.Nothing ->
                                  case b2_s3ygU of {
                                    GHC.Base.Nothing -> $j_s3ygX;
                                    GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                                  };
                              GHC.Base.Just a6_s3yh7 [Occ=Once] ->
                                  case b2_s3ygU of {
                                    GHC.Base.Nothing -> GHC.Types.False [];
                                    GHC.Base.Just b4_s3yh9 [Occ=Once] ->
                                        case GHC.Classes.$fEq[]_$s$c== a6_s3yh7 b4_s3yh9 of {
                                          GHC.Types.False -> GHC.Types.False [];
                                          GHC.Types.True -> $j_s3ygX;
                                        };
                                  };
                            };
                    };
              };
        };

Text.Read.Lex.$fEqNumber_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Text.Read.Lex.Number -> Text.Read.Lex.Number -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s3yhb eta1_s3yhc]
        case Text.Read.Lex.$fEqLexeme_$c==1 eta_s3yhb eta1_s3yhc of {
          GHC.Types.False -> GHC.Types.True [];
          GHC.Types.True -> GHC.Types.False [];
        };

Text.Read.Lex.$fEqNumber [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Text.Read.Lex.Number
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Text.Read.Lex.$fEqLexeme_$c==1
                                     Text.Read.Lex.$fEqNumber_$c/=];

Text.Read.Lex.$fEqLexeme_$c==
  :: Text.Read.Lex.Lexeme -> Text.Read.Lex.Lexeme -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3yhe ds1_s3yhf]
        case ds_s3yhe of {
          Text.Read.Lex.Char a3_s3yhh [Occ=Once] ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Char b1_s3yhj [Occ=Once] ->
                    GHC.Classes.eqChar a3_s3yhh b1_s3yhj;
              };
          Text.Read.Lex.String a3_s3yhk [Occ=Once] ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.String b1_s3yhm [Occ=Once] ->
                    GHC.Base.eqString a3_s3yhk b1_s3yhm;
              };
          Text.Read.Lex.Punc a3_s3yhn [Occ=Once] ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Punc b1_s3yhp [Occ=Once] ->
                    GHC.Base.eqString a3_s3yhn b1_s3yhp;
              };
          Text.Read.Lex.Ident a3_s3yhq [Occ=Once] ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Ident b1_s3yhs [Occ=Once] ->
                    GHC.Base.eqString a3_s3yhq b1_s3yhs;
              };
          Text.Read.Lex.Symbol a3_s3yht [Occ=Once] ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Symbol b1_s3yhv [Occ=Once] ->
                    GHC.Base.eqString a3_s3yht b1_s3yhv;
              };
          Text.Read.Lex.Number a3_s3yhw [Occ=Once] ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Number b1_s3yhy [Occ=Once] ->
                    Text.Read.Lex.$fEqLexeme_$c==1 a3_s3yhw b1_s3yhy;
              };
          Text.Read.Lex.EOF ->
              case ds1_s3yhf of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.EOF -> GHC.Types.True [];
              };
        };

Text.Read.Lex.$fEqLexeme_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Text.Read.Lex.Lexeme -> Text.Read.Lex.Lexeme -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s3yhA eta1_s3yhB]
        case Text.Read.Lex.$fEqLexeme_$c== eta_s3yhA eta1_s3yhB of {
          GHC.Types.False -> GHC.Types.True [];
          GHC.Types.True -> GHC.Types.False [];
        };

Text.Read.Lex.$fEqLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Text.Read.Lex.Lexeme
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Text.Read.Lex.$fEqLexeme_$c==
                                     Text.Read.Lex.$fEqLexeme_$c/=];

Text.Read.Lex.numberToFixed2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

lvl2_r3y9r :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "this should not happen"#;

lvl3_r3y9s :: [GHC.Integer.Type.Integer]
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl2_r3y9r of sat_s3yhD {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s3yhD;
        };

combine_r3y9t
  :: GHC.Integer.Type.Integer
     -> [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [b_s3yhE ds_s3yhF]
        case ds_s3yhF of {
          [] -> [] [];
          : d1_s3yhH [Occ=Once] ds1_s3yhI [Occ=Once!] ->
              case ds1_s3yhI of {
                [] -> lvl3_r3y9s;
                : d2_s3yhK [Occ=Once] ds2_s3yhL [Occ=Once] ->
                    case GHC.Integer.Type.timesInteger d1_s3yhH b_s3yhE of sat_s3yhM {
                      __DEFAULT ->
                          case GHC.Integer.Type.plusInteger sat_s3yhM d2_s3yhK of d_s3yhN {
                            __DEFAULT ->
                                let {
                                  sat_s3yhO [Occ=Once] :: [GHC.Integer.Type.Integer]
                                  [LclId] =
                                      [b_s3yhE ds2_s3yhL] \u [] combine_r3y9t b_s3yhE ds2_s3yhL;
                                } in  : [d_s3yhN sat_s3yhO];
                          };
                    };
              };
        };

Text.Read.Lex.numberToFixed_go [Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Types.Int
     -> [GHC.Integer.Type.Integer]
     -> GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3yhP ds1_s3yhQ ds2_s3yhR]
        case ds2_s3yhR of wild_s3yhS {
          [] -> Text.Read.Lex.numberToFixed2;
          : d_s3yhT [Occ=Once] ds3_s3yhU [Occ=Once!] ->
              case ds3_s3yhU of {
                [] -> d_s3yhT;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    case ds1_s3yhQ of {
                      GHC.Types.I# x34_s3yhZ ->
                          case ># [x34_s3yhZ 40#] of {
                            __DEFAULT ->
                                let-no-escape {
                                  go_s3yi1 [Occ=LoopBreakerT[2]]
                                    :: GHC.Integer.Type.Integer
                                       -> [GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer
                                  [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
                                      sat-only [ds_s3yhP go_s3yi1] \r [r_s3yi2 ds4_s3yi3]
                                          case ds4_s3yi3 of {
                                            [] -> r_s3yi2;
                                            : d1_s3yi5 [Occ=Once] ds5_s3yi6 [Occ=Once] ->
                                                case
                                                    GHC.Integer.Type.timesInteger r_s3yi2 ds_s3yhP
                                                of
                                                sat_s3yi7
                                                { __DEFAULT ->
                                                      case
                                                          GHC.Integer.Type.plusInteger
                                                              sat_s3yi7 d1_s3yi5
                                                      of
                                                      r'_s3yi8
                                                      { __DEFAULT -> go_s3yi1 r'_s3yi8 ds5_s3yi6;
                                                      };
                                                };
                                          };
                                } in  go_s3yi1 Text.Read.Lex.numberToFixed2 wild_s3yhS;
                            1# ->
                                case GHC.Integer.Type.timesInteger ds_s3yhP ds_s3yhP of b'_s3yi9 {
                                  __DEFAULT ->
                                      case remInt# [x34_s3yhZ 2#] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s3yie [Occ=Once] :: [GHC.Integer.Type.Integer]
                                              [LclId] =
                                                  CCCS :! [Text.Read.Lex.numberToFixed2 wild_s3yhS];
                                            } in 
                                              case combine_r3y9t ds_s3yhP sat_s3yie of sat_s3yif {
                                                __DEFAULT ->
                                                    case +# [x34_s3yhZ 1#] of sat_s3yib {
                                                      __DEFAULT ->
                                                          case
                                                              quotInt# [sat_s3yib 2#]
                                                          of
                                                          sat_s3yic
                                                          { __DEFAULT ->
                                                                let {
                                                                  sat_s3yid [Occ=Once]
                                                                    :: GHC.Types.Int
                                                                  [LclId] =
                                                                      CCCS GHC.Types.I#! [sat_s3yic];
                                                                } in 
                                                                  Text.Read.Lex.numberToFixed_go
                                                                      b'_s3yi9 sat_s3yid sat_s3yif;
                                                          };
                                                    };
                                              };
                                        0# ->
                                            case combine_r3y9t ds_s3yhP wild_s3yhS of sat_s3yij {
                                              __DEFAULT ->
                                                  case +# [x34_s3yhZ 1#] of sat_s3yig {
                                                    __DEFAULT ->
                                                        case quotInt# [sat_s3yig 2#] of sat_s3yih {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s3yii [Occ=Once]
                                                                  :: GHC.Types.Int
                                                                [LclId] =
                                                                    CCCS GHC.Types.I#! [sat_s3yih];
                                                              } in 
                                                                Text.Read.Lex.numberToFixed_go
                                                                    b'_s3yi9 sat_s3yii sat_s3yij;
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Text.Read.Lex.valInteger
  :: GHC.Integer.Type.Integer
     -> Text.Read.Lex.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [b0_s3yik ds0_s3yil]
        case
            GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger ds0_s3yil
        of
        sat_s3yio
        { __DEFAULT ->
              let {
                sat_s3yin [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                [LclId] =
                    [ds0_s3yil] \s []
                        case GHC.List.$wlenAcc ds0_s3yil 0# of ww2_s3yim {
                          __DEFAULT -> GHC.Types.I# [ww2_s3yim];
                        };
              } in  Text.Read.Lex.numberToFixed_go b0_s3yik sat_s3yin sat_s3yio;
        };

Text.Read.Lex.$w$sreadIntP [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>,
 Unf=OtherCon []] =
    [] \r [w2_s3yip w3_s3yiq w4_s3yir w5_s3yis]
        let {
          sat_s3yiF [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_s3xhH
          [LclId] =
              [w2_s3yip w3_s3yiq w4_s3yir w5_s3yis] \r [a_s3yit]
                  case w3_s3yiq a_s3yit of {
                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                    GHC.Types.True ->
                        let {
                          sat_s3yiC [Occ=Once]
                            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xhH
                          [LclId] =
                              [w2_s3yip w4_s3yir w5_s3yis a_s3yit] \r [a3_s3yiv]
                                  let {
                                    sat_s3yiB [Occ=Once] :: GHC.Integer.Type.Integer
                                    [LclId] =
                                        [w2_s3yip w4_s3yir a_s3yit a3_s3yiv] \u []
                                            let {
                                              sat_s3yix [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  CCCS :! [a_s3yit a3_s3yiv];
                                            } in 
                                              case
                                                  GHC.Base.map w4_s3yir sat_s3yix
                                              of
                                              ds0_s3yiw [Dmd=<S,U>]
                                              { __DEFAULT ->
                                                    case
                                                        GHC.Base.map
                                                            GHC.Real.$fIntegralInt_$ctoInteger
                                                            ds0_s3yiw
                                                    of
                                                    sat_s3yiA
                                                    { __DEFAULT ->
                                                          let {
                                                            sat_s3yiz [Occ=Once, Dmd=<L,1*U(U)>]
                                                              :: GHC.Types.Int
                                                            [LclId] =
                                                                [ds0_s3yiw] \s []
                                                                    case
                                                                        GHC.List.$wlenAcc
                                                                            ds0_s3yiw 0#
                                                                    of
                                                                    ww2_s3yiy
                                                                    { __DEFAULT ->
                                                                          GHC.Types.I# [ww2_s3yiy];
                                                                    };
                                                          } in 
                                                            Text.Read.Lex.numberToFixed_go
                                                                w2_s3yip sat_s3yiz sat_s3yiA;
                                                    };
                                              };
                                  } in  w5_s3yis sat_s3yiB;
                        } in 
                          case Text.ParserCombinators.ReadP.$wmunch w3_s3yiq sat_s3yiC of {
                            Unit# ww1_s3yiE [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww1_s3yiE];
                          };
                  };
        } in  Unit# [sat_s3yiF];

Text.Read.Lex.readIntP1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [w2_s3yiG w3_s3yiH w4_s3yiI w5_s3yiJ]
        case
            Text.Read.Lex.$w$sreadIntP w2_s3yiG w3_s3yiH w4_s3yiI w5_s3yiJ
        of
        { Unit# ww1_s3yiL [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yiL];
        };

Text.Read.Lex.readIntP_$sreadIntP
  :: GHC.Integer.Type.Integer
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Read.Lex.readIntP1 eta_B4 eta_B3 eta_B2 eta_B1;

Text.Read.Lex.$wreadIntP [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Num.Num a =>
     a
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>,
 Unf=OtherCon []] =
    [] \r [w2_s3yiM w3_s3yiN w4_s3yiO w5_s3yiP w6_s3yiQ]
        let {
          lvl116_s3yiR [Occ=OnceL] :: a_s3xhP
          [LclId] =
              [w2_s3yiM] \u []
                  GHC.Num.fromInteger w2_s3yiM Text.Read.Lex.numberToFixed2; } in
        let {
          sat_s3yjd [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_s3xhU
          [LclId] =
              [w2_s3yiM
               w3_s3yiN
               w4_s3yiO
               w5_s3yiP
               w6_s3yiQ
               lvl116_s3yiR] \r [a3_s3yiS]
                  case w4_s3yiO a3_s3yiS of {
                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                    GHC.Types.True ->
                        let {
                          sat_s3yja [Occ=Once]
                            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xhU
                          [LclId] =
                              [w2_s3yiM
                               w3_s3yiN
                               w5_s3yiP
                               w6_s3yiQ
                               lvl116_s3yiR
                               a3_s3yiS] \r [a4_s3yiU]
                                  let {
                                    sat_s3yj9 [Occ=Once] :: a_s3xhP
                                    [LclId] =
                                        [w2_s3yiM
                                         w3_s3yiN
                                         w5_s3yiP
                                         lvl116_s3yiR
                                         a3_s3yiS
                                         a4_s3yiU] \u []
                                            let {
                                              sat_s3yj7 [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  CCCS :! [a3_s3yiS a4_s3yiU];
                                            } in 
                                              case GHC.Base.map w5_s3yiP sat_s3yj7 of sat_s3yj8 {
                                                __DEFAULT ->
                                                    let-no-escape {
                                                      go_s3yiV [Occ=LoopBreakerT[2]]
                                                        :: a_s3xhP -> [GHC.Types.Int] -> a_s3xhP
                                                      [LclId[JoinId(2)],
                                                       Arity=2,
                                                       Str=<L,U><S,1*U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [w2_s3yiM
                                                                    w3_s3yiN
                                                                    go_s3yiV] \r [r_s3yiW ds_s3yiX]
                                                              case ds_s3yiX of {
                                                                [] -> r_s3yiW;
                                                                : d_s3yiZ [Occ=Once!]
                                                                  ds1_s3yj0 [Occ=Once] ->
                                                                    let {
                                                                      sat_s3yj5 [Occ=Once]
                                                                        :: a_s3xhP
                                                                      [LclId] =
                                                                          [w2_s3yiM d_s3yiZ] \u []
                                                                              let {
                                                                                sat_s3yj4 [Occ=Once]
                                                                                  :: GHC.Integer.Type.Integer
                                                                                [LclId] =
                                                                                    [d_s3yiZ] \u []
                                                                                        case
                                                                                            d_s3yiZ
                                                                                        of
                                                                                        { GHC.Types.I# i_s3yj3 [Occ=Once] ->
                                                                                              GHC.Integer.Type.smallInteger
                                                                                                  i_s3yj3;
                                                                                        };
                                                                              } in 
                                                                                GHC.Num.fromInteger
                                                                                    w2_s3yiM
                                                                                    sat_s3yj4; } in
                                                                    let {
                                                                      sat_s3yj1 [Occ=Once]
                                                                        :: a_s3xhP
                                                                      [LclId] =
                                                                          [w2_s3yiM
                                                                           w3_s3yiN
                                                                           r_s3yiW] \u []
                                                                              GHC.Num.*
                                                                                  w2_s3yiM
                                                                                  r_s3yiW
                                                                                  w3_s3yiN;
                                                                    } in 
                                                                      case
                                                                          GHC.Num.+
                                                                              w2_s3yiM
                                                                              sat_s3yj1
                                                                              sat_s3yj5
                                                                      of
                                                                      r'_s3yj6
                                                                      { __DEFAULT ->
                                                                            go_s3yiV
                                                                                r'_s3yj6 ds1_s3yj0;
                                                                      };
                                                              };
                                                    } in  go_s3yiV lvl116_s3yiR sat_s3yj8;
                                              };
                                  } in  w6_s3yiQ sat_s3yj9;
                        } in 
                          case Text.ParserCombinators.ReadP.$wmunch w4_s3yiO sat_s3yja of {
                            Unit# ww1_s3yjc [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww1_s3yjc];
                          };
                  };
        } in  Unit# [sat_s3yjd];

Text.Read.Lex.readIntP2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Num.Num a =>
     a
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [w2_s3yje w3_s3yjf w4_s3yjg w5_s3yjh w6_s3yji]
        case
            Text.Read.Lex.$wreadIntP
                w2_s3yje w3_s3yjf w4_s3yjg w5_s3yjh w6_s3yji
        of
        { Unit# ww1_s3yjk [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yjk];
        };

Text.Read.Lex.readIntP
  :: forall a.
     GHC.Num.Num a =>
     a
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Read.Lex.readIntP2 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

sat_s3yjl :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

sat_s3yjm :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3yjl GHC.Types.[]];

Text.Read.Lex.numberToFixed1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3yjm;

Text.Read.Lex.numberToInteger
  :: Text.Read.Lex.Number -> GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3yjn]
        case ds_s3yjn of {
          Text.Read.Lex.MkNumber base_s3yjp [Occ=Once] iPart_s3yjq ->
              let {
                sat_s3yjv [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [base_s3yjp iPart_s3yjq] \u []
                        case
                            GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger iPart_s3yjq
                        of
                        sat_s3yju
                        { __DEFAULT ->
                              let {
                                sat_s3yjt [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                                [LclId] =
                                    [iPart_s3yjq] \s []
                                        case GHC.List.$wlenAcc iPart_s3yjq 0# of ww2_s3yjs {
                                          __DEFAULT -> GHC.Types.I# [ww2_s3yjs];
                                        }; } in
                              let {
                                sat_s3yjr [Occ=Once] :: GHC.Integer.Type.Integer
                                [LclId] =
                                    [base_s3yjp] \u []
                                        GHC.Real.$fIntegralInt_$ctoInteger base_s3yjp;
                              } in  Text.Read.Lex.numberToFixed_go sat_s3yjr sat_s3yjt sat_s3yju;
                        };
              } in  GHC.Base.Just [sat_s3yjv];
          Text.Read.Lex.MkDecimal iPart_s3yjw [Occ=Once]
                                  ds1_s3yjx [Occ=Once!]
                                  ds2_s3yjy [Occ=Once!] ->
              case ds1_s3yjx of {
                GHC.Base.Nothing ->
                    case ds2_s3yjy of {
                      GHC.Base.Nothing ->
                          let {
                            sat_s3yjB [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [iPart_s3yjw] \u []
                                    Text.Read.Lex.valInteger
                                        Text.Read.Lex.numberToFixed1 iPart_s3yjw;
                          } in  GHC.Base.Just [sat_s3yjB];
                      GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
                    };
                GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
              };
        };

sat_s3yjE :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s3yjF :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3yjE GHC.Types.[]];

lvl4_r3y9u :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3yjF;

$wfracExp_r3y9v
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Text.Read.Lex.Digits
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=3, Str=<S,U><S,1*U><S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3yjG w3_s3yjH w4_s3yjI]
        case w4_s3yjI of {
          [] ->
              case
                  GHC.Integer.Type.ltInteger# w2_s3yjG Text.Read.Lex.numberToFixed2
              of
              { __DEFAULT ->
                    case
                        GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 w2_s3yjG
                    of
                    sat_s3yjL
                    { __DEFAULT ->
                          case GHC.Integer.Type.timesInteger w3_s3yjH sat_s3yjL of dt_s3yjM {
                            __DEFAULT -> (#,#) [dt_s3yjM GHC.Real.$fEnumRatio1];
                          };
                    };
                1# ->
                    case GHC.Integer.Type.negateInteger w2_s3yjG of sat_s3yjO {
                      __DEFAULT ->
                          case
                              GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 sat_s3yjO
                          of
                          ww1_s3yjN [Dmd=<S,U>]
                          { __DEFAULT ->
                                case GHC.Integer.Type.absInteger ww1_s3yjN of sat_s3yjR {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.signumInteger ww1_s3yjN of sat_s3yjP {
                                        __DEFAULT ->
                                            case
                                                GHC.Integer.Type.timesInteger w3_s3yjH sat_s3yjP
                                            of
                                            sat_s3yjQ
                                            { __DEFAULT -> GHC.Real.$w$sreduce sat_s3yjQ sat_s3yjR;
                                            };
                                      };
                                };
                          };
                    };
              };
          : d_s3yjS [Occ=Once!] ds_s3yjT [Occ=Once] ->
              case
                  GHC.Integer.Type.minusInteger w2_s3yjG lvl4_r3y9u
              of
              exp'_s3yjU
              { __DEFAULT ->
                    case d_s3yjS of {
                      GHC.Types.I# i_s3yjW [Occ=Once] ->
                          case GHC.Integer.Type.smallInteger i_s3yjW of sat_s3yjY {
                            __DEFAULT ->
                                case
                                    GHC.Integer.Type.timesInteger
                                        w3_s3yjH Text.Read.Lex.numberToFixed1
                                of
                                sat_s3yjX
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.plusInteger sat_s3yjX sat_s3yjY
                                      of
                                      mant'_s3yjZ
                                      { __DEFAULT ->
                                            $wfracExp_r3y9v exp'_s3yjU mant'_s3yjZ ds_s3yjT;
                                      };
                                };
                          };
                    };
              };
        };

Text.Read.Lex.numberToFixed_integerTake [Occ=LoopBreaker]
  :: forall a. GHC.Integer.Type.Integer -> [a] -> [a]
[GblId, Arity=2, Str=<S,U><L,1*U>, Unf=OtherCon []] =
    [] \r [n_s3yk0 ds_s3yk1]
        case
            GHC.Integer.Type.leInteger# n_s3yk0 Text.Read.Lex.numberToFixed2
        of
        { __DEFAULT ->
              case ds_s3yk1 of {
                [] -> [] [];
                : x34_s3yk4 [Occ=Once] xs_s3yk5 [Occ=Once] ->
                    let {
                      sat_s3yk7 [Occ=Once] :: [a_a3va7]
                      [LclId] =
                          [n_s3yk0 xs_s3yk5] \u []
                              case
                                  GHC.Integer.Type.minusInteger n_s3yk0 lvl4_r3y9u
                              of
                              sat_s3yk6
                              { __DEFAULT ->
                                    Text.Read.Lex.numberToFixed_integerTake sat_s3yk6 xs_s3yk5;
                              };
                    } in  : [x34_s3yk4 sat_s3yk7];
              };
          1# -> [] [];
        };

Text.Read.Lex.numberToFixed_xs [Occ=LoopBreaker] :: [GHC.Types.Int]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Read.Lex.$fShowLexeme2
                      Text.Read.Lex.numberToFixed_xs];

Text.Read.Lex.numberToFixed
  :: GHC.Integer.Type.Integer
     -> Text.Read.Lex.Number
     -> GHC.Base.Maybe
          (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3yk8 ds1_s3yk9]
        case ds1_s3yk9 of {
          Text.Read.Lex.MkNumber base_s3ykb [Occ=Once] iPart_s3ykc ->
              let {
                sat_s3ykh [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [base_s3ykb iPart_s3ykc] \u []
                        case
                            GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger iPart_s3ykc
                        of
                        sat_s3ykg
                        { __DEFAULT ->
                              let {
                                sat_s3ykf [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                                [LclId] =
                                    [iPart_s3ykc] \s []
                                        case GHC.List.$wlenAcc iPart_s3ykc 0# of ww2_s3yke {
                                          __DEFAULT -> GHC.Types.I# [ww2_s3yke];
                                        }; } in
                              let {
                                sat_s3ykd [Occ=Once] :: GHC.Integer.Type.Integer
                                [LclId] =
                                    [base_s3ykb] \u []
                                        GHC.Real.$fIntegralInt_$ctoInteger base_s3ykb;
                              } in  Text.Read.Lex.numberToFixed_go sat_s3ykd sat_s3ykf sat_s3ykg;
                        }; } in
              let {
                sat_s3yki [Occ=Once]
                  :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                [LclId] =
                    CCCS (,)! [sat_s3ykh Text.Read.Lex.numberToFixed2];
              } in  GHC.Base.Just [sat_s3yki];
          Text.Read.Lex.MkDecimal iPart_s3ykj [Occ=Once*]
                                  ds2_s3ykk [Occ=Once!]
                                  ds3_s3ykl [Occ=Once*!] ->
              case ds2_s3ykk of {
                GHC.Base.Nothing ->
                    case ds3_s3ykl of {
                      GHC.Base.Nothing ->
                          let {
                            sat_s3yko [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [iPart_s3ykj] \u []
                                    Text.Read.Lex.valInteger
                                        Text.Read.Lex.numberToFixed1 iPart_s3ykj; } in
                          let {
                            sat_s3ykp [Occ=Once]
                              :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                            [LclId] =
                                CCCS (,)! [sat_s3yko Text.Read.Lex.numberToFixed2];
                          } in  GHC.Base.Just [sat_s3ykp];
                      GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
                    };
                GHC.Base.Just fPart_s3ykr [Occ=Once] ->
                    case ds3_s3ykl of {
                      GHC.Base.Nothing ->
                          let {
                            sat_s3ykz [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [ds_s3yk8 fPart_s3ykr] \u []
                                    let {
                                      sat_s3ykv [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Int]
                                      [LclId] =
                                          [fPart_s3ykr] \s []
                                              GHC.Base.++
                                                  fPart_s3ykr Text.Read.Lex.numberToFixed_xs;
                                    } in 
                                      case
                                          Text.Read.Lex.numberToFixed_integerTake ds_s3yk8 sat_s3ykv
                                      of
                                      ds0_s3yku [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                GHC.Base.map
                                                    GHC.Real.$fIntegralInt_$ctoInteger ds0_s3yku
                                            of
                                            sat_s3yky
                                            { __DEFAULT ->
                                                  let {
                                                    sat_s3ykx [Occ=Once, Dmd=<L,1*U(U)>]
                                                      :: GHC.Types.Int
                                                    [LclId] =
                                                        [ds0_s3yku] \s []
                                                            case
                                                                GHC.List.$wlenAcc ds0_s3yku 0#
                                                            of
                                                            ww2_s3ykw
                                                            { __DEFAULT -> GHC.Types.I# [ww2_s3ykw];
                                                            };
                                                  } in 
                                                    Text.Read.Lex.numberToFixed_go
                                                        Text.Read.Lex.numberToFixed1
                                                        sat_s3ykx
                                                        sat_s3yky;
                                            };
                                      }; } in
                          let {
                            sat_s3ykt [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [iPart_s3ykj] \u []
                                    Text.Read.Lex.valInteger
                                        Text.Read.Lex.numberToFixed1 iPart_s3ykj; } in
                          let {
                            sat_s3ykA [Occ=Once]
                              :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                            [LclId] =
                                CCCS (,)! [sat_s3ykt sat_s3ykz];
                          } in  GHC.Base.Just [sat_s3ykA];
                      GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
                    };
              };
        };

Text.Read.Lex.$wnumberToRational [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Number
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w2_s3ykC]
        case w2_s3ykC of {
          Text.Read.Lex.MkNumber base_s3ykE [Occ=Once!] iPart_s3ykF ->
              case
                  GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger iPart_s3ykF
              of
              sat_s3ykL
              { __DEFAULT ->
                    let {
                      sat_s3ykK [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                      [LclId] =
                          [iPart_s3ykF] \s []
                              case GHC.List.$wlenAcc iPart_s3ykF 0# of ww2_s3ykJ {
                                __DEFAULT -> GHC.Types.I# [ww2_s3ykJ];
                              }; } in
                    let {
                      sat_s3ykI [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [base_s3ykE] \u []
                              case base_s3ykE of {
                                GHC.Types.I# i_s3ykH [Occ=Once] ->
                                    GHC.Integer.Type.smallInteger i_s3ykH;
                              };
                    } in 
                      case
                          Text.Read.Lex.numberToFixed_go sat_s3ykI sat_s3ykK sat_s3ykL
                      of
                      sat_s3ykM
                      { __DEFAULT ->
                            case
                                GHC.Integer.Type.timesInteger sat_s3ykM lvl4_r3y9u
                            of
                            sat_s3ykN
                            { __DEFAULT -> GHC.Real.$w$sreduce sat_s3ykN lvl4_r3y9u;
                            };
                      };
              };
          Text.Read.Lex.MkDecimal iPart_s3ykO [Occ=Once*]
                                  mFPart_s3ykP [Occ=Once!]
                                  mExp_s3ykQ [Occ=Once*!] ->
              case mFPart_s3ykP of {
                GHC.Base.Nothing ->
                    case mExp_s3ykQ of {
                      GHC.Base.Nothing ->
                          case
                              Text.Read.Lex.valInteger Text.Read.Lex.numberToFixed1 iPart_s3ykO
                          of
                          sat_s3ykT
                          { __DEFAULT ->
                                case
                                    GHC.Integer.Type.timesInteger sat_s3ykT lvl4_r3y9u
                                of
                                sat_s3ykU
                                { __DEFAULT -> GHC.Real.$w$sreduce sat_s3ykU lvl4_r3y9u;
                                };
                          };
                      GHC.Base.Just exp_s3ykV ->
                          case
                              GHC.Integer.Type.geInteger# exp_s3ykV Text.Read.Lex.numberToFixed2
                          of
                          { __DEFAULT ->
                                case GHC.Integer.Type.negateInteger exp_s3ykV of sat_s3ykY {
                                  __DEFAULT ->
                                      case
                                          GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 sat_s3ykY
                                      of
                                      ww1_s3ykX [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.absInteger ww1_s3ykX
                                            of
                                            sat_s3yl2
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.signumInteger ww1_s3ykX
                                                  of
                                                  sat_s3yl0
                                                  { __DEFAULT ->
                                                        case
                                                            Text.Read.Lex.valInteger
                                                                Text.Read.Lex.numberToFixed1
                                                                iPart_s3ykO
                                                        of
                                                        sat_s3ykZ
                                                        { __DEFAULT ->
                                                              case
                                                                  GHC.Integer.Type.timesInteger
                                                                      sat_s3ykZ sat_s3yl0
                                                              of
                                                              sat_s3yl1
                                                              { __DEFAULT ->
                                                                    GHC.Real.$w$sreduce
                                                                        sat_s3yl1 sat_s3yl2;
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                            1# ->
                                case
                                    GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 exp_s3ykV
                                of
                                sat_s3yl4
                                { __DEFAULT ->
                                      case
                                          Text.Read.Lex.valInteger
                                              Text.Read.Lex.numberToFixed1 iPart_s3ykO
                                      of
                                      sat_s3yl3
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.timesInteger sat_s3yl3 sat_s3yl4
                                            of
                                            sat_s3yl5
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.timesInteger
                                                          sat_s3yl5 lvl4_r3y9u
                                                  of
                                                  sat_s3yl6
                                                  { __DEFAULT ->
                                                        GHC.Real.$w$sreduce sat_s3yl6 lvl4_r3y9u;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Base.Just fPart_s3yl7 [Occ=Once*] ->
                    case mExp_s3ykQ of {
                      GHC.Base.Nothing ->
                          case
                              Text.Read.Lex.valInteger Text.Read.Lex.numberToFixed1 iPart_s3ykO
                          of
                          sat_s3yl9
                          { __DEFAULT ->
                                $wfracExp_r3y9v Text.Read.Lex.numberToFixed2 sat_s3yl9 fPart_s3yl7;
                          };
                      GHC.Base.Just exp_s3yla [Occ=Once] ->
                          case
                              Text.Read.Lex.valInteger Text.Read.Lex.numberToFixed1 iPart_s3ykO
                          of
                          sat_s3ylb
                          { __DEFAULT -> $wfracExp_r3y9v exp_s3yla sat_s3ylb fPart_s3yl7;
                          };
                    };
              };
        };

Text.Read.Lex.numberToRational [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Number -> GHC.Real.Rational
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w2_s3ylc]
        case Text.Read.Lex.$wnumberToRational w2_s3ylc of {
          (#,#) ww1_s3yle [Occ=Once] ww2_s3ylf [Occ=Once] ->
              GHC.Real.:% [ww1_s3yle ww2_s3ylf];
        };

Text.Read.Lex.numberToRangedRational3
  :: GHC.Real.Ratio GHC.Integer.Type.Integer
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Real.:%! [Text.Read.Lex.numberToFixed2
                                GHC.Real.$fEnumRatio1];

Text.Read.Lex.numberToRangedRational2
  :: GHC.Base.Maybe GHC.Real.Rational
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Read.Lex.numberToRangedRational3];

Text.Read.Lex.numberToRangedRational1
  :: GHC.Types.Int -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Classes.eqInt Text.Read.Lex.$fShowLexeme2 eta_B1;

sat_s3yli :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

sat_s3ylj :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3yli GHC.Types.[]];

sat_s3ylh :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_s3ylk :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3ylh sat_s3ylj];

sat_s3ylg :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_s3yll :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3ylg sat_s3ylk];

Text.Read.Lex.numberToRangedRational4 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_s3yll;

sat_s3ylo :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s3ylp :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3ylo GHC.Types.[]];

sat_s3yln :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2147483647#];

sat_s3ylq :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3yln sat_s3ylp];

sat_s3ylm :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2147483647#];

sat_s3ylr :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3ylm sat_s3ylq];

Text.Read.Lex.numberToRangedRational5 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3ylr;

Text.Read.Lex.$wnumberToRangedRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.Types.Int
     -> Text.Read.Lex.Number
     -> GHC.Base.Maybe GHC.Real.Rational
[GblId,
 Arity=3,
 Str=<L,1*U(U)><L,1*U(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s3yls ww1_s3ylt w2_s3ylu]
        case w2_s3ylu of wild_s3ylv {
          Text.Read.Lex.MkNumber _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                sat_s3ylB [Occ=Once] :: GHC.Real.Rational
                [LclId] =
                    [wild_s3ylv] \u []
                        case Text.Read.Lex.$wnumberToRational wild_s3ylv of {
                          (#,#) ww3_s3ylz [Occ=Once] ww4_s3ylA [Occ=Once] ->
                              GHC.Real.:% [ww3_s3ylz ww4_s3ylA];
                        };
              } in  GHC.Base.Just [sat_s3ylB];
          Text.Read.Lex.MkDecimal iPart_s3ylC [Occ=Once]
                                  mFPart_s3ylD [Occ=Once!]
                                  ds_s3ylE [Occ=Once!] ->
              case ds_s3ylE of {
                GHC.Base.Nothing ->
                    let {
                      sat_s3ylJ [Occ=Once] :: GHC.Real.Rational
                      [LclId] =
                          [wild_s3ylv] \u []
                              case Text.Read.Lex.$wnumberToRational wild_s3ylv of {
                                (#,#) ww3_s3ylH [Occ=Once] ww4_s3ylI [Occ=Once] ->
                                    GHC.Real.:% [ww3_s3ylH ww4_s3ylI];
                              };
                    } in  GHC.Base.Just [sat_s3ylJ];
                GHC.Base.Just exp_s3ylK ->
                    case
                        GHC.Integer.Type.gtInteger#
                            exp_s3ylK Text.Read.Lex.numberToRangedRational5
                    of
                    { __DEFAULT ->
                          case
                              GHC.Integer.Type.ltInteger#
                                  exp_s3ylK Text.Read.Lex.numberToRangedRational4
                          of
                          { __DEFAULT ->
                                let-no-escape {
                                  $w$j_s3ylN [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U)>]
                                    :: GHC.Prim.Int# -> GHC.Base.Maybe GHC.Real.Rational
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      sat-only [ww_s3yls
                                                ww1_s3ylt
                                                wild_s3ylv
                                                exp_s3ylK] \r [ww2_s3ylO]
                                          case ww1_s3ylt of {
                                            GHC.Types.I# x34_s3ylQ [Occ=Once] ->
                                                case
                                                    GHC.Integer.Type.integerToInt exp_s3ylK
                                                of
                                                wild5_s3ylR
                                                { __DEFAULT ->
                                                      case
                                                          +# [ww2_s3ylO wild5_s3ylR]
                                                      of
                                                      x35_s3ylS [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            case +# [x34_s3ylQ 3#] of sat_s3ylT {
                                                              __DEFAULT ->
                                                                  case ># [x35_s3ylS sat_s3ylT] of {
                                                                    __DEFAULT ->
                                                                        case ww_s3yls of {
                                                                          GHC.Types.I# x36_s3ylW [Occ=Once] ->
                                                                              case
                                                                                  -# [x36_s3ylW 3#]
                                                                              of
                                                                              sat_s3ylX
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        <# [x35_s3ylS
                                                                                            sat_s3ylX]
                                                                                    of
                                                                                    { __DEFAULT ->
                                                                                          let {
                                                                                            sat_s3ym2 [Occ=Once]
                                                                                              :: GHC.Real.Rational
                                                                                            [LclId] =
                                                                                                [wild_s3ylv] \u []
                                                                                                    case
                                                                                                        Text.Read.Lex.$wnumberToRational
                                                                                                            wild_s3ylv
                                                                                                    of
                                                                                                    { (#,#) ww4_s3ym0 [Occ=Once]
                                                                                                            ww5_s3ym1 [Occ=Once] ->
                                                                                                          GHC.Real.:% [ww4_s3ym0
                                                                                                                       ww5_s3ym1];
                                                                                                    };
                                                                                          } in 
                                                                                            GHC.Base.Just [sat_s3ym2];
                                                                                      1# ->
                                                                                          Text.Read.Lex.numberToRangedRational2;
                                                                                    };
                                                                              };
                                                                        };
                                                                    1# -> GHC.Base.Nothing [];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                } in 
                                  case
                                      GHC.List.dropWhile
                                          Text.Read.Lex.numberToRangedRational1 iPart_s3ylC
                                  of
                                  wild4_s3ym3
                                  { [] ->
                                        case mFPart_s3ylD of {
                                          GHC.Base.Nothing -> Text.Read.Lex.numberToRangedRational2;
                                          GHC.Base.Just fPart_s3ym5 [Occ=Once] ->
                                              case
                                                  GHC.List.$wspan
                                                      Text.Read.Lex.numberToRangedRational1
                                                      fPart_s3ym5
                                              of
                                              { (#,#) ww3_s3ym7 [Occ=Once] ww4_s3ym8 [Occ=Once!] ->
                                                    case ww4_s3ym8 of {
                                                      [] -> Text.Read.Lex.numberToRangedRational2;
                                                      : _ [Occ=Dead] _ [Occ=Dead] ->
                                                          case
                                                              GHC.List.$wlenAcc ww3_s3ym7 0#
                                                          of
                                                          ww5_s3ymc
                                                          { __DEFAULT ->
                                                                case
                                                                    negateInt# [ww5_s3ymc]
                                                                of
                                                                sat_s3ymd
                                                                { __DEFAULT -> $w$j_s3ylN sat_s3ymd;
                                                                };
                                                          };
                                                    };
                                              };
                                        };
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case GHC.List.$wlenAcc wild4_s3ym3 0# of ww2_s3ymg {
                                          __DEFAULT -> $w$j_s3ylN ww2_s3ymg;
                                        };
                                  };
                            1# -> GHC.Base.Nothing [];
                          };
                      1# -> GHC.Base.Nothing [];
                    };
              };
        };

Text.Read.Lex.numberToRangedRational [InlPrag=NOUSERINLINE[0]]
  :: (GHC.Types.Int, GHC.Types.Int)
     -> Text.Read.Lex.Number -> GHC.Base.Maybe GHC.Real.Rational
[GblId,
 Arity=2,
 Str=<S,1*U(1*U(U),1*U(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w2_s3ymh w3_s3ymi]
        case w2_s3ymh of {
          (,) ww1_s3ymk [Occ=Once] ww2_s3yml [Occ=Once] ->
              Text.Read.Lex.$wnumberToRangedRational
                  ww1_s3ymk ww2_s3yml w3_s3ymi;
        };

lvl5_r3y9w :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "valDig: Bad base"#;

Text.Read.Lex.readDecP2 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl5_r3y9w of sat_s3ymm {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s3ymm;
        };

sat_s3ymn :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

sat_s3ymo :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3ymn GHC.Types.[]];

Text.Read.Lex.readDecP3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3ymo;

sat_s3ymp :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

sat_s3ymq :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3ymp GHC.Types.[]];

Text.Read.Lex.readDecP4 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3ymq;

Text.Read.Lex.$w$svalDig [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Char# -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [w2_s3ymr ww_s3yms]
        case
            GHC.Integer.Type.eqInteger# w2_s3ymr Text.Read.Lex.readDecP4
        of
        { __DEFAULT ->
              case
                  GHC.Integer.Type.eqInteger# w2_s3ymr Text.Read.Lex.numberToFixed1
              of
              { __DEFAULT ->
                    case
                        GHC.Integer.Type.eqInteger# w2_s3ymr Text.Read.Lex.readDecP3
                    of
                    { __DEFAULT -> Text.Read.Lex.readDecP2;
                      1# ->
                          let-no-escape {
                            $j_s3ymw [Occ=Once*T[0], Dmd=<L,1*U>]
                              :: GHC.Base.Maybe GHC.Types.Int
                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                [ww_s3yms] \r []
                                    let-no-escape {
                                      $j1_s3ymx [Occ=Once*T[0], Dmd=<L,1*U>]
                                        :: GHC.Base.Maybe GHC.Types.Int
                                      [LclId[JoinId(0)], Unf=OtherCon []] =
                                          [ww_s3yms] \r []
                                              case leChar# ['A'# ww_s3yms] of {
                                                __DEFAULT -> GHC.Base.Nothing [];
                                                1# ->
                                                    case leChar# [ww_s3yms 'F'#] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case ord# [ww_s3yms] of sat_s3ymA {
                                                            __DEFAULT ->
                                                                case
                                                                    -# [sat_s3ymA 65#]
                                                                of
                                                                sat_s3ymB
                                                                { __DEFAULT ->
                                                                      case
                                                                          +# [sat_s3ymB 10#]
                                                                      of
                                                                      sat_s3ymC
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s3ymD [Occ=Once]
                                                                                :: GHC.Types.Int
                                                                              [LclId] =
                                                                                  CCCS GHC.Types.I#! [sat_s3ymC];
                                                                            } in 
                                                                              GHC.Base.Just [sat_s3ymD];
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                    } in 
                                      case leChar# ['a'# ww_s3yms] of {
                                        __DEFAULT -> $j1_s3ymx;
                                        1# ->
                                            case leChar# [ww_s3yms 'f'#] of {
                                              __DEFAULT -> $j1_s3ymx;
                                              1# ->
                                                  case ord# [ww_s3yms] of sat_s3ymG {
                                                    __DEFAULT ->
                                                        case -# [sat_s3ymG 97#] of sat_s3ymH {
                                                          __DEFAULT ->
                                                              case +# [sat_s3ymH 10#] of sat_s3ymI {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s3ymJ [Occ=Once]
                                                                        :: GHC.Types.Int
                                                                      [LclId] =
                                                                          CCCS GHC.Types.I#! [sat_s3ymI];
                                                                    } in  GHC.Base.Just [sat_s3ymJ];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                          } in 
                            case leChar# ['0'# ww_s3yms] of {
                              __DEFAULT -> $j_s3ymw;
                              1# ->
                                  case leChar# [ww_s3yms '9'#] of {
                                    __DEFAULT -> $j_s3ymw;
                                    1# ->
                                        case ord# [ww_s3yms] of sat_s3ymM {
                                          __DEFAULT ->
                                              case -# [sat_s3ymM 48#] of sat_s3ymN {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s3ymO [Occ=Once] :: GHC.Types.Int
                                                      [LclId] =
                                                          CCCS GHC.Types.I#! [sat_s3ymN];
                                                    } in  GHC.Base.Just [sat_s3ymO];
                                              };
                                        };
                                  };
                            };
                    };
                1# ->
                    case leChar# ['0'# ww_s3yms] of {
                      __DEFAULT -> GHC.Base.Nothing [];
                      1# ->
                          case leChar# [ww_s3yms '9'#] of {
                            __DEFAULT -> GHC.Base.Nothing [];
                            1# ->
                                case ord# [ww_s3yms] of sat_s3ymR {
                                  __DEFAULT ->
                                      case -# [sat_s3ymR 48#] of sat_s3ymS {
                                        __DEFAULT ->
                                            let {
                                              sat_s3ymT [Occ=Once] :: GHC.Types.Int
                                              [LclId] =
                                                  CCCS GHC.Types.I#! [sat_s3ymS];
                                            } in  GHC.Base.Just [sat_s3ymT];
                                      };
                                };
                          };
                    };
              };
          1# ->
              case leChar# ['0'# ww_s3yms] of {
                __DEFAULT -> GHC.Base.Nothing [];
                1# ->
                    case leChar# [ww_s3yms '7'#] of {
                      __DEFAULT -> GHC.Base.Nothing [];
                      1# ->
                          case ord# [ww_s3yms] of sat_s3ymW {
                            __DEFAULT ->
                                case -# [sat_s3ymW 48#] of sat_s3ymX {
                                  __DEFAULT ->
                                      let {
                                        sat_s3ymY [Occ=Once] :: GHC.Types.Int
                                        [LclId] =
                                            CCCS GHC.Types.I#! [sat_s3ymX];
                                      } in  GHC.Base.Just [sat_s3ymY];
                                };
                          };
                    };
              };
        };

Text.Read.Lex.$wvalDig [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     a -> GHC.Prim.Char# -> GHC.Base.Maybe GHC.Types.Int
[GblId,
 Arity=4,
 Str=<S(C(C(S))L),U(C(C1(U)),A)><L,U(A,A,A,A,A,A,C(U))><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w2_s3ymZ w3_s3yn0 w4_s3yn1 ww_s3yn2]
        let {
          sat_s3yn3 [Occ=Once] :: a_s3xiO
          [LclId] =
              [w3_s3yn0] \u []
                  GHC.Num.fromInteger w3_s3yn0 Text.Read.Lex.readDecP4;
        } in 
          case GHC.Classes.== w2_s3ymZ w4_s3yn1 sat_s3yn3 of {
            GHC.Types.False ->
                let {
                  sat_s3yn5 [Occ=Once] :: a_s3xiO
                  [LclId] =
                      [w3_s3yn0] \u []
                          GHC.Num.fromInteger w3_s3yn0 Text.Read.Lex.numberToFixed1;
                } in 
                  case GHC.Classes.== w2_s3ymZ w4_s3yn1 sat_s3yn5 of {
                    GHC.Types.False ->
                        let {
                          sat_s3yn7 [Occ=Once] :: a_s3xiO
                          [LclId] =
                              [w3_s3yn0] \u []
                                  GHC.Num.fromInteger w3_s3yn0 Text.Read.Lex.readDecP3;
                        } in 
                          case GHC.Classes.== w2_s3ymZ w4_s3yn1 sat_s3yn7 of {
                            GHC.Types.False -> Text.Read.Lex.readDecP2;
                            GHC.Types.True ->
                                let-no-escape {
                                  $j_s3yn9 [Occ=Once*T[0], Dmd=<L,1*U>]
                                    :: GHC.Base.Maybe GHC.Types.Int
                                  [LclId[JoinId(0)], Unf=OtherCon []] =
                                      [ww_s3yn2] \r []
                                          let-no-escape {
                                            $j1_s3yna [Occ=Once*T[0], Dmd=<L,1*U>]
                                              :: GHC.Base.Maybe GHC.Types.Int
                                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                                [ww_s3yn2] \r []
                                                    case leChar# ['A'# ww_s3yn2] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case leChar# [ww_s3yn2 'F'#] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                case ord# [ww_s3yn2] of sat_s3ynd {
                                                                  __DEFAULT ->
                                                                      case
                                                                          -# [sat_s3ynd 65#]
                                                                      of
                                                                      sat_s3yne
                                                                      { __DEFAULT ->
                                                                            case
                                                                                +# [sat_s3yne 10#]
                                                                            of
                                                                            sat_s3ynf
                                                                            { __DEFAULT ->
                                                                                  let {
                                                                                    sat_s3yng [Occ=Once]
                                                                                      :: GHC.Types.Int
                                                                                    [LclId] =
                                                                                        CCCS GHC.Types.I#! [sat_s3ynf];
                                                                                  } in 
                                                                                    GHC.Base.Just [sat_s3yng];
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                          } in 
                                            case leChar# ['a'# ww_s3yn2] of {
                                              __DEFAULT -> $j1_s3yna;
                                              1# ->
                                                  case leChar# [ww_s3yn2 'f'#] of {
                                                    __DEFAULT -> $j1_s3yna;
                                                    1# ->
                                                        case ord# [ww_s3yn2] of sat_s3ynj {
                                                          __DEFAULT ->
                                                              case -# [sat_s3ynj 97#] of sat_s3ynk {
                                                                __DEFAULT ->
                                                                    case
                                                                        +# [sat_s3ynk 10#]
                                                                    of
                                                                    sat_s3ynl
                                                                    { __DEFAULT ->
                                                                          let {
                                                                            sat_s3ynm [Occ=Once]
                                                                              :: GHC.Types.Int
                                                                            [LclId] =
                                                                                CCCS GHC.Types.I#! [sat_s3ynl];
                                                                          } in 
                                                                            GHC.Base.Just [sat_s3ynm];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                } in 
                                  case leChar# ['0'# ww_s3yn2] of {
                                    __DEFAULT -> $j_s3yn9;
                                    1# ->
                                        case leChar# [ww_s3yn2 '9'#] of {
                                          __DEFAULT -> $j_s3yn9;
                                          1# ->
                                              case ord# [ww_s3yn2] of sat_s3ynp {
                                                __DEFAULT ->
                                                    case -# [sat_s3ynp 48#] of sat_s3ynq {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s3ynr [Occ=Once] :: GHC.Types.Int
                                                            [LclId] =
                                                                CCCS GHC.Types.I#! [sat_s3ynq];
                                                          } in  GHC.Base.Just [sat_s3ynr];
                                                    };
                                              };
                                        };
                                  };
                          };
                    GHC.Types.True ->
                        case leChar# ['0'# ww_s3yn2] of {
                          __DEFAULT -> GHC.Base.Nothing [];
                          1# ->
                              case leChar# [ww_s3yn2 '9'#] of {
                                __DEFAULT -> GHC.Base.Nothing [];
                                1# ->
                                    case ord# [ww_s3yn2] of sat_s3ynu {
                                      __DEFAULT ->
                                          case -# [sat_s3ynu 48#] of sat_s3ynv {
                                            __DEFAULT ->
                                                let {
                                                  sat_s3ynw [Occ=Once] :: GHC.Types.Int
                                                  [LclId] =
                                                      CCCS GHC.Types.I#! [sat_s3ynv];
                                                } in  GHC.Base.Just [sat_s3ynw];
                                          };
                                    };
                              };
                        };
                  };
            GHC.Types.True ->
                case leChar# ['0'# ww_s3yn2] of {
                  __DEFAULT -> GHC.Base.Nothing [];
                  1# ->
                      case leChar# [ww_s3yn2 '7'#] of {
                        __DEFAULT -> GHC.Base.Nothing [];
                        1# ->
                            case ord# [ww_s3yn2] of sat_s3ynz {
                              __DEFAULT ->
                                  case -# [sat_s3ynz 48#] of sat_s3ynA {
                                    __DEFAULT ->
                                        let {
                                          sat_s3ynB [Occ=Once] :: GHC.Types.Int
                                          [LclId] =
                                              CCCS GHC.Types.I#! [sat_s3ynA];
                                        } in  GHC.Base.Just [sat_s3ynB];
                                  };
                            };
                      };
                };
          };

Text.Read.Lex.$w$sreadIntP' [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U><L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3ynC w3_s3ynD]
        let {
          sat_s3ynP [Occ=Once] :: GHC.Types.Char -> GHC.Types.Int
          [LclId] =
              [w2_s3ynC] \r [c_s3ynK]
                  case c_s3ynK of {
                    GHC.Types.C# ww1_s3ynM [Occ=Once] ->
                        case Text.Read.Lex.$w$svalDig w2_s3ynC ww1_s3ynM of {
                          GHC.Base.Nothing -> Text.Read.Lex.$fShowLexeme2;
                          GHC.Base.Just x34_s3ynO [Occ=Once] -> x34_s3ynO;
                        };
                  }; } in
        let {
          sat_s3ynJ [Occ=Once] :: GHC.Types.Char -> GHC.Types.Bool
          [LclId] =
              [w2_s3ynC] \r [c_s3ynE]
                  case c_s3ynE of {
                    GHC.Types.C# ww1_s3ynG [Occ=Once] ->
                        case Text.Read.Lex.$w$svalDig w2_s3ynC ww1_s3ynG of {
                          GHC.Base.Nothing -> GHC.Types.False [];
                          GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                        };
                  };
        } in 
          Text.Read.Lex.$w$sreadIntP w2_s3ynC sat_s3ynJ sat_s3ynP w3_s3ynD;

Text.Read.Lex.$wreadIntP' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     a
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)>,
 Unf=OtherCon []] =
    [] \r [w2_s3ynQ w3_s3ynR w4_s3ynS w5_s3ynT]
        let {
          sat_s3yo5 [Occ=Once] :: GHC.Types.Char -> GHC.Types.Int
          [LclId] =
              [w2_s3ynQ w3_s3ynR w4_s3ynS] \r [c_s3yo0]
                  case c_s3yo0 of {
                    GHC.Types.C# ww1_s3yo2 [Occ=Once] ->
                        case
                            Text.Read.Lex.$wvalDig w2_s3ynQ w3_s3ynR w4_s3ynS ww1_s3yo2
                        of
                        { GHC.Base.Nothing -> Text.Read.Lex.$fShowLexeme2;
                          GHC.Base.Just x34_s3yo4 [Occ=Once] -> x34_s3yo4;
                        };
                  }; } in
        let {
          sat_s3ynZ [Occ=Once] :: GHC.Types.Char -> GHC.Types.Bool
          [LclId] =
              [w2_s3ynQ w3_s3ynR w4_s3ynS] \r [c_s3ynU]
                  case c_s3ynU of {
                    GHC.Types.C# ww1_s3ynW [Occ=Once] ->
                        case
                            Text.Read.Lex.$wvalDig w2_s3ynQ w3_s3ynR w4_s3ynS ww1_s3ynW
                        of
                        { GHC.Base.Nothing -> GHC.Types.False [];
                          GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                        };
                  };
        } in 
          Text.Read.Lex.$wreadIntP
              w3_s3ynR w4_s3ynS sat_s3ynZ sat_s3yo5 w5_s3ynT;

Text.Read.Lex.readDecP6 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     a
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [w2_s3yo6 w3_s3yo7 w4_s3yo8 w5_s3yo9]
        case
            Text.Read.Lex.$wreadIntP' w2_s3yo6 w3_s3yo7 w4_s3yo8 w5_s3yo9
        of
        { Unit# ww1_s3yob [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yob];
        };

Text.Read.Lex.readOctP1
  :: forall b.
     (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3yoc]
        case
            Text.Read.Lex.$w$sreadIntP' Text.Read.Lex.readDecP4 w2_s3yoc
        of
        { Unit# ww1_s3yoe [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yoe];
        };

Text.Read.Lex.readOctP_$sreadOctP
  :: Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.readOctP1 eta_B1;

Text.Read.Lex.readOctP2
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [$dEq_s3yof $dNum_s3yog]
        let {
          w2_s3yoh [Occ=OnceL] :: a_a3v4p
          [LclId] =
              [$dNum_s3yog] \u []
                  GHC.Num.fromInteger $dNum_s3yog Text.Read.Lex.readDecP4; } in
        let {
          sat_s3yol [Occ=OnceT[0]]
            :: forall b.
               (a_a3v4p -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [$dEq_s3yof $dNum_s3yog w2_s3yoh] \r [w3_s3yoi]
                  case
                      Text.Read.Lex.$wreadIntP' $dEq_s3yof $dNum_s3yog w2_s3yoh w3_s3yoi
                  of
                  { Unit# ww1_s3yok [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3yok];
                  };
        } in  sat_s3yol;

Text.Read.Lex.readOctP
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.readOctP2 eta_B2 eta_B1;

Text.Read.Lex.readDecP1
  :: forall b.
     (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3yom]
        case
            Text.Read.Lex.$w$sreadIntP' Text.Read.Lex.numberToFixed1 w2_s3yom
        of
        { Unit# ww1_s3yoo [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yoo];
        };

Text.Read.Lex.readDecP_$sreadDecP
  :: Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.readDecP1 eta_B1;

Text.Read.Lex.readDecP5
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [$dEq_s3yop $dNum_s3yoq]
        let {
          w2_s3yor [Occ=OnceL] :: a_a3v4H
          [LclId] =
              [$dNum_s3yoq] \u []
                  GHC.Num.fromInteger $dNum_s3yoq Text.Read.Lex.numberToFixed1; } in
        let {
          sat_s3yov [Occ=OnceT[0]]
            :: forall b.
               (a_a3v4H -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [$dEq_s3yop $dNum_s3yoq w2_s3yor] \r [w3_s3yos]
                  case
                      Text.Read.Lex.$wreadIntP' $dEq_s3yop $dNum_s3yoq w2_s3yor w3_s3yos
                  of
                  { Unit# ww1_s3you [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3you];
                  };
        } in  sat_s3yov;

Text.Read.Lex.readDecP
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.readDecP5 eta_B2 eta_B1;

Text.Read.Lex.readHexP1
  :: forall b.
     (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3yow]
        case
            Text.Read.Lex.$w$sreadIntP' Text.Read.Lex.readDecP3 w2_s3yow
        of
        { Unit# ww1_s3yoy [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yoy];
        };

Text.Read.Lex.readHexP_$sreadHexP
  :: Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.readHexP1 eta_B1;

Text.Read.Lex.readHexP2
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [$dEq_s3yoz $dNum_s3yoA]
        let {
          w2_s3yoB [Occ=OnceL] :: a_a3v4Z
          [LclId] =
              [$dNum_s3yoA] \u []
                  GHC.Num.fromInteger $dNum_s3yoA Text.Read.Lex.readDecP3; } in
        let {
          sat_s3yoF [Occ=OnceT[0]]
            :: forall b.
               (a_a3v4Z -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [$dEq_s3yoz $dNum_s3yoA w2_s3yoB] \r [w3_s3yoC]
                  case
                      Text.Read.Lex.$wreadIntP' $dEq_s3yoz $dNum_s3yoA w2_s3yoB w3_s3yoC
                  of
                  { Unit# ww1_s3yoE [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3yoE];
                  };
        } in  sat_s3yoF;

Text.Read.Lex.readHexP
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.readHexP2 eta_B2 eta_B1;

$wlexDigits_r3y9x
  :: GHC.Types.Int
     -> forall b.
        (Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U(U)><L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3yoG w3_s3yoH]
        let {
          lvl116_s3yoI [Occ=OnceL, Dmd=<L,C(U)>]
            :: [GHC.Types.Int] -> Text.ParserCombinators.ReadP.P b_s3xjl
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              [w3_s3yoH] \r [a3_s3yoJ]
                  case a3_s3yoJ of wild_s3yoK {
                    [] -> Text.ParserCombinators.ReadP.Fail [];
                    : _ [Occ=Dead] _ [Occ=Dead] -> w3_s3yoH wild_s3yoK;
                  }; } in
        let {
          scan_s3yoN [Occ=LoopBreaker]
            :: forall a.
               [GHC.Types.Char]
               -> ([GHC.Types.Int] -> a)
               -> forall b1.
                  (a -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId,
           Arity=3,
           Str=<S,1*U><L,1*C1(U)><L,1*C1(U)>,
           Unf=OtherCon []] =
              sat-only [w2_s3yoG scan_s3yoN] \r [ds_s3yoO f_s3yoP eta_s3yoQ]
                  case ds_s3yoO of {
                    [] ->
                        let {
                          sat_s3yoS [Occ=Once] :: a_a3vca
                          [LclId] =
                              [f_s3yoP] \u [] f_s3yoP GHC.Types.[];
                        } in  eta_s3yoQ sat_s3yoS;
                    : c_s3yoT [Occ=Once!] cs_s3yoU [Occ=Once] ->
                        case w2_s3yoG of {
                          GHC.Types.I# ww1_s3yoW [Occ=Once!] ->
                              case c_s3yoT of {
                                GHC.Types.C# ww3_s3yoY ->
                                    let-no-escape {
                                      $j_s3yoZ [Dmd=<L,1*C1(U)>]
                                        :: GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1_X3npr
                                      [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                          sat-only [scan_s3yoN
                                                    f_s3yoP
                                                    eta_s3yoQ
                                                    cs_s3yoU] \r [n_s3yp0]
                                              let {
                                                lvl117_s3yp1 [Occ=OnceL]
                                                  :: Text.ParserCombinators.ReadP.P b1_X3npr
                                                [LclId] =
                                                    [scan_s3yoN
                                                     f_s3yoP
                                                     eta_s3yoQ
                                                     cs_s3yoU
                                                     n_s3yp0] \u []
                                                        let {
                                                          sat_s3yp4 [Occ=Once]
                                                            :: [GHC.Types.Int] -> a_a3vca
                                                          [LclId] =
                                                              [f_s3yoP n_s3yp0] \r [x34_s3yp2]
                                                                  let {
                                                                    sat_s3yp3 [Occ=Once]
                                                                      :: [GHC.Types.Int]
                                                                    [LclId] =
                                                                        CCCS :! [n_s3yp0 x34_s3yp2];
                                                                  } in  f_s3yoP sat_s3yp3;
                                                        } in 
                                                          scan_s3yoN
                                                              cs_s3yoU sat_s3yp4 eta_s3yoQ; } in
                                              let {
                                                sat_s3yp6 [Occ=Once]
                                                  :: GHC.Types.Char
                                                     -> Text.ParserCombinators.ReadP.P b1_X3npr
                                                [LclId] =
                                                    [lvl117_s3yp1] \r [a3_s3yp5] lvl117_s3yp1;
                                              } in  Text.ParserCombinators.ReadP.Get [sat_s3yp6];
                                    } in 
                                      case ww1_s3yoW of {
                                        __DEFAULT -> Text.Read.Lex.readDecP2;
                                        8# ->
                                            case leChar# ['0'# ww3_s3yoY] of {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s3ypa [Occ=Once] :: a_a3vca
                                                    [LclId] =
                                                        [f_s3yoP] \u [] f_s3yoP GHC.Types.[];
                                                  } in  eta_s3yoQ sat_s3ypa;
                                              1# ->
                                                  case leChar# [ww3_s3yoY '7'#] of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s3ypc [Occ=Once] :: a_a3vca
                                                          [LclId] =
                                                              [f_s3yoP] \u [] f_s3yoP GHC.Types.[];
                                                        } in  eta_s3yoQ sat_s3ypc;
                                                    1# ->
                                                        case ord# [ww3_s3yoY] of sat_s3ypd {
                                                          __DEFAULT ->
                                                              case -# [sat_s3ypd 48#] of sat_s3ype {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s3ypf [Occ=Once]
                                                                        :: GHC.Types.Int
                                                                      [LclId] =
                                                                          CCCS GHC.Types.I#! [sat_s3ype];
                                                                    } in  $j_s3yoZ sat_s3ypf;
                                                              };
                                                        };
                                                  };
                                            };
                                        10# ->
                                            case leChar# ['0'# ww3_s3yoY] of {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s3yph [Occ=Once] :: a_a3vca
                                                    [LclId] =
                                                        [f_s3yoP] \u [] f_s3yoP GHC.Types.[];
                                                  } in  eta_s3yoQ sat_s3yph;
                                              1# ->
                                                  case leChar# [ww3_s3yoY '9'#] of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s3ypj [Occ=Once] :: a_a3vca
                                                          [LclId] =
                                                              [f_s3yoP] \u [] f_s3yoP GHC.Types.[];
                                                        } in  eta_s3yoQ sat_s3ypj;
                                                    1# ->
                                                        case ord# [ww3_s3yoY] of sat_s3ypk {
                                                          __DEFAULT ->
                                                              case -# [sat_s3ypk 48#] of sat_s3ypl {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s3ypm [Occ=Once]
                                                                        :: GHC.Types.Int
                                                                      [LclId] =
                                                                          CCCS GHC.Types.I#! [sat_s3ypl];
                                                                    } in  $j_s3yoZ sat_s3ypm;
                                                              };
                                                        };
                                                  };
                                            };
                                        16# ->
                                            let-no-escape {
                                              $j1_s3ypn [Occ=Once*T[0], Dmd=<L,1*U>]
                                                :: Text.ParserCombinators.ReadP.P b1_X3npr
                                              [LclId[JoinId(0)], Unf=OtherCon []] =
                                                  [f_s3yoP eta_s3yoQ ww3_s3yoY $j_s3yoZ] \r []
                                                      let-no-escape {
                                                        $j2_s3ypo [Occ=Once*T[0], Dmd=<L,1*U>]
                                                          :: Text.ParserCombinators.ReadP.P b1_X3npr
                                                        [LclId[JoinId(0)], Unf=OtherCon []] =
                                                            [f_s3yoP
                                                             eta_s3yoQ
                                                             ww3_s3yoY
                                                             $j_s3yoZ] \r []
                                                                case leChar# ['A'# ww3_s3yoY] of {
                                                                  __DEFAULT ->
                                                                      let {
                                                                        sat_s3ypq [Occ=Once]
                                                                          :: a_a3vca
                                                                        [LclId] =
                                                                            [f_s3yoP] \u []
                                                                                f_s3yoP
                                                                                    GHC.Types.[];
                                                                      } in  eta_s3yoQ sat_s3ypq;
                                                                  1# ->
                                                                      case
                                                                          leChar# [ww3_s3yoY 'F'#]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s3yps [Occ=Once]
                                                                                :: a_a3vca
                                                                              [LclId] =
                                                                                  [f_s3yoP] \u []
                                                                                      f_s3yoP
                                                                                          GHC.Types.[];
                                                                            } in 
                                                                              eta_s3yoQ sat_s3yps;
                                                                        1# ->
                                                                            case
                                                                                ord# [ww3_s3yoY]
                                                                            of
                                                                            sat_s3ypt
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      -# [sat_s3ypt
                                                                                          65#]
                                                                                  of
                                                                                  sat_s3ypu
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            +# [sat_s3ypu
                                                                                                10#]
                                                                                        of
                                                                                        sat_s3ypv
                                                                                        { __DEFAULT ->
                                                                                              let {
                                                                                                sat_s3ypw [Occ=Once]
                                                                                                  :: GHC.Types.Int
                                                                                                [LclId] =
                                                                                                    CCCS GHC.Types.I#! [sat_s3ypv];
                                                                                              } in 
                                                                                                $j_s3yoZ
                                                                                                    sat_s3ypw;
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                      } in 
                                                        case leChar# ['a'# ww3_s3yoY] of {
                                                          __DEFAULT -> $j2_s3ypo;
                                                          1# ->
                                                              case leChar# [ww3_s3yoY 'f'#] of {
                                                                __DEFAULT -> $j2_s3ypo;
                                                                1# ->
                                                                    case
                                                                        ord# [ww3_s3yoY]
                                                                    of
                                                                    sat_s3ypz
                                                                    { __DEFAULT ->
                                                                          case
                                                                              -# [sat_s3ypz 97#]
                                                                          of
                                                                          sat_s3ypA
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    +# [sat_s3ypA
                                                                                        10#]
                                                                                of
                                                                                sat_s3ypB
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s3ypC [Occ=Once]
                                                                                          :: GHC.Types.Int
                                                                                        [LclId] =
                                                                                            CCCS GHC.Types.I#! [sat_s3ypB];
                                                                                      } in 
                                                                                        $j_s3yoZ
                                                                                            sat_s3ypC;
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                            } in 
                                              case leChar# ['0'# ww3_s3yoY] of {
                                                __DEFAULT -> $j1_s3ypn;
                                                1# ->
                                                    case leChar# [ww3_s3yoY '9'#] of {
                                                      __DEFAULT -> $j1_s3ypn;
                                                      1# ->
                                                          case ord# [ww3_s3yoY] of sat_s3ypF {
                                                            __DEFAULT ->
                                                                case
                                                                    -# [sat_s3ypF 48#]
                                                                of
                                                                sat_s3ypG
                                                                { __DEFAULT ->
                                                                      let {
                                                                        sat_s3ypH [Occ=Once]
                                                                          :: GHC.Types.Int
                                                                        [LclId] =
                                                                            CCCS GHC.Types.I#! [sat_s3ypG];
                                                                      } in  $j_s3yoZ sat_s3ypH;
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                              };
                        };
                  }; } in
        let {
          sat_s3ypJ [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xjl
          [LclId] =
              [lvl116_s3yoI scan_s3yoN] \r [a3_s3ypI]
                  scan_s3yoN a3_s3ypI GHC.Base.id lvl116_s3yoI;
        } in  Unit# [sat_s3ypJ];

a1_r3y9y :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

a2_r3y9z :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

$wlexHexOct_r3y9A
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3ypK]
        let {
          lvl116_s3ypL [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId] =
              [w2_s3ypK] \u []
                  let {
                    sat_s3ypP [Occ=Once]
                      :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xjx
                    [LclId] =
                        [w2_s3ypK] \r [a3_s3ypM]
                            let {
                              sat_s3ypN [Occ=Once] :: Text.Read.Lex.Number
                              [LclId] =
                                  CCCS Text.Read.Lex.MkNumber! [a2_r3y9z a3_s3ypM]; } in
                            let {
                              sat_s3ypO [Occ=Once] :: Text.Read.Lex.Lexeme
                              [LclId] =
                                  CCCS Text.Read.Lex.Number! [sat_s3ypN];
                            } in  w2_s3ypK sat_s3ypO;
                  } in 
                    case $wlexDigits_r3y9x a2_r3y9z sat_s3ypP of {
                      Unit# ww1_s3ypR [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3ypR];
                    }; } in
        let {
          lvl117_s3ypS [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId] =
              [w2_s3ypK] \u []
                  let {
                    sat_s3ypW [Occ=Once]
                      :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xjx
                    [LclId] =
                        [w2_s3ypK] \r [a3_s3ypT]
                            let {
                              sat_s3ypU [Occ=Once] :: Text.Read.Lex.Number
                              [LclId] =
                                  CCCS Text.Read.Lex.MkNumber! [a1_r3y9y a3_s3ypT]; } in
                            let {
                              sat_s3ypV [Occ=Once] :: Text.Read.Lex.Lexeme
                              [LclId] =
                                  CCCS Text.Read.Lex.Number! [sat_s3ypU];
                            } in  w2_s3ypK sat_s3ypV;
                  } in 
                    case $wlexDigits_r3y9x a1_r3y9y sat_s3ypW of {
                      Unit# ww1_s3ypY [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3ypY];
                    }; } in
        let {
          lvl118_s3ypZ [InlPrag=NOUSERINLINE[0], Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
              [lvl116_s3ypL lvl117_s3ypS] \r [w3_s3yq0]
                  case w3_s3yq0 of {
                    GHC.Types.C# ww1_s3yq2 [Occ=Once!] ->
                        case ww1_s3yq2 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'O'# -> lvl117_s3ypS;
                          'X'# -> lvl116_s3ypL;
                          'o'# -> lvl117_s3ypS;
                          'x'# -> lvl116_s3ypL;
                        };
                  }; } in
        let {
          lvl119_s3yq4 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl118_s3ypZ]; } in
        let {
          sat_s3yq9 [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId] =
              [lvl119_s3yq4] \r [a_s3yq5]
                  case a_s3yq5 of {
                    GHC.Types.C# y_s3yq7 [Occ=Once!] ->
                        case y_s3yq7 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '0'# -> lvl119_s3yq4;
                        };
                  };
        } in  Unit# [sat_s3yq9];

lexHexOct_r3y9B
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3yqa]
        case $wlexHexOct_r3y9A w2_s3yqa of {
          Unit# ww1_s3yqc [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yqc];
        };

lvl6_r3y9C :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

$wlexFrac_r3y9D
  :: forall b1.
     (GHC.Base.Maybe Text.Read.Lex.Digits
      -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3yqd]
        let {
          lvl116_s3yqe [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xjD
          [LclId] =
              [w2_s3yqd] \u []
                  let {
                    sat_s3yqh [Occ=Once]
                      :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xjD
                    [LclId] =
                        [w2_s3yqd] \r [a3_s3yqf]
                            let {
                              sat_s3yqg [Occ=Once] :: GHC.Base.Maybe Text.Read.Lex.Digits
                              [LclId] =
                                  CCCS GHC.Base.Just! [a3_s3yqf];
                            } in  w2_s3yqd sat_s3yqg;
                  } in 
                    case $wlexDigits_r3y9x lvl6_r3y9C sat_s3yqh of {
                      Unit# ww1_s3yqj [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3yqj];
                    }; } in
        let {
          sat_s3yqo [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xjD
          [LclId] =
              [lvl116_s3yqe] \r [a_s3yqk]
                  case a_s3yqk of {
                    GHC.Types.C# y_s3yqm [Occ=Once!] ->
                        case y_s3yqm of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '.'# -> lvl116_s3yqe;
                        };
                  };
        } in  Unit# [sat_s3yqo];

lexFrac_r3y9E
  :: forall b1.
     (GHC.Base.Maybe Text.Read.Lex.Digits
      -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3yqp]
        case $wlexFrac_r3y9D w2_s3yqp of {
          Unit# ww1_s3yqr [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3yqr];
        };

m1_r3y9F :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SOH"#;

m2_r3y9G :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m1_r3y9F;

x_r3y9H :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SOH'#];

m3_r3y9I :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SO"#;

m4_r3y9J :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m3_r3y9I;

x1_r3y9K :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SO'#];

m5_r3y9L :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NUL"#;

m6_r3y9M :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m5_r3y9L;

x2_r3y9N :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\NUL'#];

m7_r3y9O :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "STX"#;

m8_r3y9P :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m7_r3y9O;

x3_r3y9Q :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\STX'#];

m9_r3y9R :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETX"#;

m10_r3y9S :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m9_r3y9R;

x4_r3y9T :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ETX'#];

m11_r3y9U :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EOT"#;

m12_r3y9V :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m11_r3y9U;

x5_r3y9W :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\EOT'#];

m13_r3y9X :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ENQ"#;

m14_r3y9Y :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m13_r3y9X;

x6_r3y9Z :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ENQ'#];

m15_r3ya0 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ACK"#;

m16_r3ya1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m15_r3ya0;

x7_r3ya2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ACK'#];

m17_r3ya3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BEL"#;

m18_r3ya4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m17_r3ya3;

x8_r3ya5 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\a'#];

m19_r3ya6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BS"#;

m20_r3ya7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m19_r3ya6;

x9_r3ya8 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\b'#];

m21_r3ya9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HT"#;

m22_r3yaa :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m21_r3ya9;

x10_r3yab :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\t'#];

m23_r3yac :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LF"#;

m24_r3yad :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m23_r3yac;

x11_r3yae :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\n'#];

m25_r3yaf :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "VT"#;

m26_r3yag :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m25_r3yaf;

x12_r3yah :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\v'#];

m27_r3yai :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FF"#;

m28_r3yaj :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m27_r3yai;

x13_r3yak :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\f'#];

m29_r3yal :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CR"#;

m30_r3yam :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m29_r3yal;

x14_r3yan :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\r'#];

m31_r3yao :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SI"#;

m32_r3yap :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m31_r3yao;

x15_r3yaq :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SI'#];

m33_r3yar :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DLE"#;

m34_r3yas :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m33_r3yar;

x16_r3yat :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DLE'#];

m35_r3yau :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC1"#;

m36_r3yav :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m35_r3yau;

x17_r3yaw :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC1'#];

m37_r3yax :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC2"#;

m38_r3yay :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m37_r3yax;

x18_r3yaz :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC2'#];

m39_r3yaA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC3"#;

m40_r3yaB :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m39_r3yaA;

x19_r3yaC :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC3'#];

m41_r3yaD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC4"#;

m42_r3yaE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m41_r3yaD;

x20_r3yaF :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC4'#];

m43_r3yaG :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NAK"#;

m44_r3yaH :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m43_r3yaG;

x21_r3yaI :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\NAK'#];

m45_r3yaJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SYN"#;

m46_r3yaK :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m45_r3yaJ;

x22_r3yaL :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SYN'#];

m47_r3yaM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETB"#;

m48_r3yaN :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m47_r3yaM;

x23_r3yaO :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ETB'#];

m49_r3yaP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CAN"#;

m50_r3yaQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m49_r3yaP;

x24_r3yaR :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\CAN'#];

m51_r3yaS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EM"#;

m52_r3yaT :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m51_r3yaS;

x25_r3yaU :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\EM'#];

m53_r3yaV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SUB"#;

m54_r3yaW :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m53_r3yaV;

x26_r3yaX :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SUB'#];

m55_r3yaY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ESC"#;

m56_r3yaZ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m55_r3yaY;

x27_r3yb0 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ESC'#];

m57_r3yb1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FS"#;

m58_r3yb2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m57_r3yb1;

x28_r3yb3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\FS'#];

m59_r3yb4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GS"#;

m60_r3yb5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m59_r3yb4;

x29_r3yb6 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\GS'#];

m61_r3yb7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RS"#;

m62_r3yb8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m61_r3yb7;

x30_r3yb9 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\RS'#];

m63_r3yba :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "US"#;

m64_r3ybb :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m63_r3yba;

x31_r3ybc :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\US'#];

m65_r3ybd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SP"#;

m66_r3ybe :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m65_r3ybd;

x32_r3ybf :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

m67_r3ybg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DEL"#;

m68_r3ybh :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m67_r3ybg;

x33_r3ybi :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DEL'#];

sat_s3yqs :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1114111#];

sat_s3yqt :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3yqs GHC.Types.[]];

lvl7_r3ybj :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3yqt;

lvl8_r3ybk :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['"'#];

lvl9_r3ybl :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [lvl8_r3ybk GHC.Types.True];

lvl10_r3ybm :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\''#];

lvl11_r3ybn :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [lvl10_r3ybm GHC.Types.True];

lvl12_r3ybo :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\\'#];

lvl13_r3ybp :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [lvl12_r3ybo GHC.Types.True];

lvl14_r3ybq :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x8_r3ya5 GHC.Types.True];

lvl15_r3ybr :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x9_r3ya8 GHC.Types.True];

lvl16_r3ybs :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x13_r3yak GHC.Types.True];

lvl17_r3ybt :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x11_r3yae GHC.Types.True];

lvl18_r3ybu :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x14_r3yan GHC.Types.True];

lvl19_r3ybv :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x10_r3yab GHC.Types.True];

lvl20_r3ybw :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x12_r3yah GHC.Types.True];

lvl21_r3ybx :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x2_r3y9N GHC.Types.True];

lvl22_r3yby :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x_r3y9H GHC.Types.True];

lvl23_r3ybz :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x3_r3y9Q GHC.Types.True];

lvl24_r3ybA :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x4_r3y9T GHC.Types.True];

lvl25_r3ybB :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x5_r3y9W GHC.Types.True];

lvl26_r3ybC :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x6_r3y9Z GHC.Types.True];

lvl27_r3ybD :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x7_r3ya2 GHC.Types.True];

lvl28_r3ybE :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x1_r3y9K GHC.Types.True];

lvl29_r3ybF :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x15_r3yaq GHC.Types.True];

lvl30_r3ybG :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x16_r3yat GHC.Types.True];

lvl31_r3ybH :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x17_r3yaw GHC.Types.True];

lvl32_r3ybI :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x18_r3yaz GHC.Types.True];

lvl33_r3ybJ :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x19_r3yaC GHC.Types.True];

lvl34_r3ybK :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x20_r3yaF GHC.Types.True];

lvl35_r3ybL :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x21_r3yaI GHC.Types.True];

lvl36_r3ybM :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x22_r3yaL GHC.Types.True];

lvl37_r3ybN :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x23_r3yaO GHC.Types.True];

lvl38_r3ybO :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x24_r3yaR GHC.Types.True];

lvl39_r3ybP :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x25_r3yaU GHC.Types.True];

lvl40_r3ybQ :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x26_r3yaX GHC.Types.True];

lvl41_r3ybR :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x27_r3yb0 GHC.Types.True];

lvl42_r3ybS :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x28_r3yb3 GHC.Types.True];

lvl43_r3ybT :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x29_r3yb6 GHC.Types.True];

lvl44_r3ybU :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x30_r3yb9 GHC.Types.True];

lvl45_r3ybV :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x31_r3ybc GHC.Types.True];

w1_r3ybW
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yqu]
        let {
          lvl116_s3yqv [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nYA
          [LclId] =
              [k1_s3yqu] \u [] k1_s3yqu x1_r3y9K; } in
        let {
          sat_s3yqx [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nYA
          [LclId] =
              [lvl116_s3yqv] \r [a3_s3yqw] lvl116_s3yqv;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m4_r3y9J sat_s3yqx of {
            Unit# ww1_s3yqz [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yqz];
          };

w_r3ybX
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yqA]
        let {
          lvl116_s3yqB [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yqA] \u [] k1_s3yqA x_r3y9H; } in
        let {
          sat_s3yqD [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yqB] \r [a3_s3yqC] lvl116_s3yqB;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m2_r3y9G sat_s3yqD of {
            Unit# ww1_s3yqF [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yqF];
          };

lvl46_r3ybY
  :: forall b.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [w2_s3yqG]
        case
            Text.ParserCombinators.ReadP.$w<++ w_r3ybX w1_r3ybW w2_s3yqG
        of
        { Unit# ww1_s3yqI [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3yqI];
        };

lvl47_r3ybZ
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yqJ]
        let {
          lvl116_s3yqK [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yqJ] \u [] k1_s3yqJ x2_r3y9N; } in
        let {
          sat_s3yqM [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yqK] \r [a3_s3yqL] lvl116_s3yqK;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m6_r3y9M sat_s3yqM of {
            Unit# ww1_s3yqO [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yqO];
          };

lvl48_r3yc0
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yqP]
        let {
          lvl116_s3yqQ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yqP] \u [] k1_s3yqP x3_r3y9Q; } in
        let {
          sat_s3yqS [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yqQ] \r [a3_s3yqR] lvl116_s3yqQ;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m8_r3y9P sat_s3yqS of {
            Unit# ww1_s3yqU [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yqU];
          };

lvl49_r3yc1
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yqV]
        let {
          lvl116_s3yqW [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yqV] \u [] k1_s3yqV x4_r3y9T; } in
        let {
          sat_s3yqY [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yqW] \r [a3_s3yqX] lvl116_s3yqW;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m10_r3y9S sat_s3yqY of {
            Unit# ww1_s3yr0 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yr0];
          };

lvl50_r3yc2
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yr1]
        let {
          lvl116_s3yr2 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yr1] \u [] k1_s3yr1 x5_r3y9W; } in
        let {
          sat_s3yr4 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yr2] \r [a3_s3yr3] lvl116_s3yr2;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m12_r3y9V sat_s3yr4 of {
            Unit# ww1_s3yr6 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yr6];
          };

lvl51_r3yc3
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yr7]
        let {
          lvl116_s3yr8 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yr7] \u [] k1_s3yr7 x6_r3y9Z; } in
        let {
          sat_s3yra [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yr8] \r [a3_s3yr9] lvl116_s3yr8;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m14_r3y9Y sat_s3yra of {
            Unit# ww1_s3yrc [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yrc];
          };

lvl52_r3yc4
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrd]
        let {
          lvl116_s3yre [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrd] \u [] k1_s3yrd x7_r3ya2; } in
        let {
          sat_s3yrg [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yre] \r [a3_s3yrf] lvl116_s3yre;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m16_r3ya1 sat_s3yrg of {
            Unit# ww1_s3yri [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yri];
          };

lvl53_r3yc5
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrj]
        let {
          lvl116_s3yrk [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrj] \u [] k1_s3yrj x8_r3ya5; } in
        let {
          sat_s3yrm [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrk] \r [a3_s3yrl] lvl116_s3yrk;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m18_r3ya4 sat_s3yrm of {
            Unit# ww1_s3yro [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yro];
          };

lvl54_r3yc6
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrp]
        let {
          lvl116_s3yrq [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrp] \u [] k1_s3yrp x9_r3ya8; } in
        let {
          sat_s3yrs [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrq] \r [a3_s3yrr] lvl116_s3yrq;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m20_r3ya7 sat_s3yrs of {
            Unit# ww1_s3yru [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yru];
          };

lvl55_r3yc7
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrv]
        let {
          lvl116_s3yrw [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrv] \u [] k1_s3yrv x10_r3yab; } in
        let {
          sat_s3yry [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrw] \r [a3_s3yrx] lvl116_s3yrw;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m22_r3yaa sat_s3yry of {
            Unit# ww1_s3yrA [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yrA];
          };

lvl56_r3yc8
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrB]
        let {
          lvl116_s3yrC [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrB] \u [] k1_s3yrB x11_r3yae; } in
        let {
          sat_s3yrE [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrC] \r [a3_s3yrD] lvl116_s3yrC;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m24_r3yad sat_s3yrE of {
            Unit# ww1_s3yrG [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yrG];
          };

lvl57_r3yc9
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrH]
        let {
          lvl116_s3yrI [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrH] \u [] k1_s3yrH x12_r3yah; } in
        let {
          sat_s3yrK [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrI] \r [a3_s3yrJ] lvl116_s3yrI;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m26_r3yag sat_s3yrK of {
            Unit# ww1_s3yrM [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yrM];
          };

lvl58_r3yca
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrN]
        let {
          lvl116_s3yrO [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrN] \u [] k1_s3yrN x13_r3yak; } in
        let {
          sat_s3yrQ [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrO] \r [a3_s3yrP] lvl116_s3yrO;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m28_r3yaj sat_s3yrQ of {
            Unit# ww1_s3yrS [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yrS];
          };

lvl59_r3ycb
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrT]
        let {
          lvl116_s3yrU [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrT] \u [] k1_s3yrT x14_r3yan; } in
        let {
          sat_s3yrW [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yrU] \r [a3_s3yrV] lvl116_s3yrU;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m30_r3yam sat_s3yrW of {
            Unit# ww1_s3yrY [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yrY];
          };

lvl60_r3ycc
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yrZ]
        let {
          lvl116_s3ys0 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yrZ] \u [] k1_s3yrZ x15_r3yaq; } in
        let {
          sat_s3ys2 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ys0] \r [a3_s3ys1] lvl116_s3ys0;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m32_r3yap sat_s3ys2 of {
            Unit# ww1_s3ys4 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ys4];
          };

lvl61_r3ycd
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ys5]
        let {
          lvl116_s3ys6 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ys5] \u [] k1_s3ys5 x16_r3yat; } in
        let {
          sat_s3ys8 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ys6] \r [a3_s3ys7] lvl116_s3ys6;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m34_r3yas sat_s3ys8 of {
            Unit# ww1_s3ysa [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysa];
          };

lvl62_r3yce
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysb]
        let {
          lvl116_s3ysc [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysb] \u [] k1_s3ysb x17_r3yaw; } in
        let {
          sat_s3yse [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysc] \r [a3_s3ysd] lvl116_s3ysc;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m36_r3yav sat_s3yse of {
            Unit# ww1_s3ysg [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysg];
          };

lvl63_r3ycf
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysh]
        let {
          lvl116_s3ysi [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysh] \u [] k1_s3ysh x18_r3yaz; } in
        let {
          sat_s3ysk [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysi] \r [a3_s3ysj] lvl116_s3ysi;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m38_r3yay sat_s3ysk of {
            Unit# ww1_s3ysm [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysm];
          };

lvl64_r3ycg
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysn]
        let {
          lvl116_s3yso [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysn] \u [] k1_s3ysn x19_r3yaC; } in
        let {
          sat_s3ysq [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yso] \r [a3_s3ysp] lvl116_s3yso;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m40_r3yaB sat_s3ysq of {
            Unit# ww1_s3yss [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yss];
          };

lvl65_r3ych
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yst]
        let {
          lvl116_s3ysu [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yst] \u [] k1_s3yst x20_r3yaF; } in
        let {
          sat_s3ysw [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysu] \r [a3_s3ysv] lvl116_s3ysu;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m42_r3yaE sat_s3ysw of {
            Unit# ww1_s3ysy [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysy];
          };

lvl66_r3yci
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysz]
        let {
          lvl116_s3ysA [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysz] \u [] k1_s3ysz x21_r3yaI; } in
        let {
          sat_s3ysC [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysA] \r [a3_s3ysB] lvl116_s3ysA;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m44_r3yaH sat_s3ysC of {
            Unit# ww1_s3ysE [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysE];
          };

lvl67_r3ycj
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysF]
        let {
          lvl116_s3ysG [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysF] \u [] k1_s3ysF x22_r3yaL; } in
        let {
          sat_s3ysI [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysG] \r [a3_s3ysH] lvl116_s3ysG;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m46_r3yaK sat_s3ysI of {
            Unit# ww1_s3ysK [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysK];
          };

lvl68_r3yck
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysL]
        let {
          lvl116_s3ysM [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysL] \u [] k1_s3ysL x23_r3yaO; } in
        let {
          sat_s3ysO [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysM] \r [a3_s3ysN] lvl116_s3ysM;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m48_r3yaN sat_s3ysO of {
            Unit# ww1_s3ysQ [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysQ];
          };

lvl69_r3ycl
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysR]
        let {
          lvl116_s3ysS [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysR] \u [] k1_s3ysR x24_r3yaR; } in
        let {
          sat_s3ysU [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysS] \r [a3_s3ysT] lvl116_s3ysS;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m50_r3yaQ sat_s3ysU of {
            Unit# ww1_s3ysW [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ysW];
          };

lvl70_r3ycm
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ysX]
        let {
          lvl116_s3ysY [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ysX] \u [] k1_s3ysX x25_r3yaU; } in
        let {
          sat_s3yt0 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ysY] \r [a3_s3ysZ] lvl116_s3ysY;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m52_r3yaT sat_s3yt0 of {
            Unit# ww1_s3yt2 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yt2];
          };

lvl71_r3ycn
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yt3]
        let {
          lvl116_s3yt4 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yt3] \u [] k1_s3yt3 x26_r3yaX; } in
        let {
          sat_s3yt6 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yt4] \r [a3_s3yt5] lvl116_s3yt4;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m54_r3yaW sat_s3yt6 of {
            Unit# ww1_s3yt8 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yt8];
          };

lvl72_r3yco
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3yt9]
        let {
          lvl116_s3yta [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3yt9] \u [] k1_s3yt9 x27_r3yb0; } in
        let {
          sat_s3ytc [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yta] \r [a3_s3ytb] lvl116_s3yta;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m56_r3yaZ sat_s3ytc of {
            Unit# ww1_s3yte [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3yte];
          };

lvl73_r3ycp
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ytf]
        let {
          lvl116_s3ytg [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ytf] \u [] k1_s3ytf x28_r3yb3; } in
        let {
          sat_s3yti [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ytg] \r [a3_s3yth] lvl116_s3ytg;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m58_r3yb2 sat_s3yti of {
            Unit# ww1_s3ytk [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ytk];
          };

lvl74_r3ycq
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ytl]
        let {
          lvl116_s3ytm [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ytl] \u [] k1_s3ytl x29_r3yb6; } in
        let {
          sat_s3yto [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ytm] \r [a3_s3ytn] lvl116_s3ytm;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m60_r3yb5 sat_s3yto of {
            Unit# ww1_s3ytq [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ytq];
          };

lvl75_r3ycr
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ytr]
        let {
          lvl116_s3yts [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ytr] \u [] k1_s3ytr x30_r3yb9; } in
        let {
          sat_s3ytu [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yts] \r [a3_s3ytt] lvl116_s3yts;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m62_r3yb8 sat_s3ytu of {
            Unit# ww1_s3ytw [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ytw];
          };

lvl76_r3ycs
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ytx]
        let {
          lvl116_s3yty [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ytx] \u [] k1_s3ytx x31_r3ybc; } in
        let {
          sat_s3ytA [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3yty] \r [a3_s3ytz] lvl116_s3yty;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m64_r3ybb sat_s3ytA of {
            Unit# ww1_s3ytC [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ytC];
          };

lvl77_r3yct
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ytD]
        let {
          lvl116_s3ytE [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ytD] \u [] k1_s3ytD x32_r3ybf; } in
        let {
          sat_s3ytG [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ytE] \r [a3_s3ytF] lvl116_s3ytE;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m66_r3ybe sat_s3ytG of {
            Unit# ww1_s3ytI [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ytI];
          };

lvl78_r3ycu
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3ytJ]
        let {
          lvl116_s3ytK [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3ytJ] \u [] k1_s3ytJ x33_r3ybi; } in
        let {
          sat_s3ytM [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3ytK] \r [a3_s3ytL] lvl116_s3ytK;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m68_r3ybh sat_s3ytM of {
            Unit# ww1_s3ytO [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3ytO];
          };

lvl79_r3ycv :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl78_r3ycu GHC.Types.[]];

lvl80_r3ycw :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl77_r3yct lvl79_r3ycv];

lvl81_r3ycx :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl76_r3ycs lvl80_r3ycw];

lvl82_r3ycy :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl75_r3ycr lvl81_r3ycx];

lvl83_r3ycz :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl74_r3ycq lvl82_r3ycy];

lvl84_r3ycA :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl73_r3ycp lvl83_r3ycz];

lvl85_r3ycB :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl72_r3yco lvl84_r3ycA];

lvl86_r3ycC :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl71_r3ycn lvl85_r3ycB];

lvl87_r3ycD :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl70_r3ycm lvl86_r3ycC];

lvl88_r3ycE :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl69_r3ycl lvl87_r3ycD];

lvl89_r3ycF :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl68_r3yck lvl88_r3ycE];

lvl90_r3ycG :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl67_r3ycj lvl89_r3ycF];

lvl91_r3ycH :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl66_r3yci lvl90_r3ycG];

lvl92_r3ycI :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl65_r3ych lvl91_r3ycH];

lvl93_r3ycJ :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl64_r3ycg lvl92_r3ycI];

lvl94_r3ycK :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl63_r3ycf lvl93_r3ycJ];

lvl95_r3ycL :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl62_r3yce lvl94_r3ycK];

lvl96_r3ycM :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl61_r3ycd lvl95_r3ycL];

lvl97_r3ycN :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl60_r3ycc lvl96_r3ycM];

lvl98_r3ycO :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl59_r3ycb lvl97_r3ycN];

lvl99_r3ycP :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl58_r3yca lvl98_r3ycO];

lvl100_r3ycQ :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl57_r3yc9 lvl99_r3ycP];

lvl101_r3ycR :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl56_r3yc8 lvl100_r3ycQ];

lvl102_r3ycS :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl55_r3yc7 lvl101_r3ycR];

lvl103_r3ycT :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl54_r3yc6 lvl102_r3ycS];

lvl104_r3ycU :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl53_r3yc5 lvl103_r3ycT];

lvl105_r3ycV :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl52_r3yc4 lvl104_r3ycU];

lvl106_r3ycW :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl51_r3yc3 lvl105_r3ycV];

lvl107_r3ycX :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl50_r3yc2 lvl106_r3ycW];

lvl108_r3ycY :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl49_r3yc1 lvl107_r3ycX];

lvl109_r3ycZ :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl48_r3yc0 lvl108_r3ycY];

lvl110_r3yd0 :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl47_r3ybZ lvl109_r3ycZ];

lvl111_r3yd1 :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl46_r3ybY lvl110_r3yd0];

lvl112_r3yd2
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [k_s3ytP]
        let {
          lvl116_s3ytQ [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_a3nIU
          [LclId] =
              [k_s3ytP] \u [] k_s3ytP a2_r3y9z; } in
        let {
          lvl117_s3ytR [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_a3nIU
          [LclId] =
              [k_s3ytP] \u [] k_s3ytP a1_r3y9y; } in
        let {
          sat_s3ytW [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_a3nIU
          [LclId] =
              [lvl116_s3ytQ lvl117_s3ytR] \r [a3_s3ytS]
                  case a3_s3ytS of {
                    GHC.Types.C# ds_s3ytU [Occ=Once!] ->
                        case ds_s3ytU of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'O'# -> lvl117_s3ytR;
                          'X'# -> lvl116_s3ytQ;
                          'o'# -> lvl117_s3ytR;
                          'x'# -> lvl116_s3ytQ;
                        };
                  };
        } in  Text.ParserCombinators.ReadP.Get [sat_s3ytW];

lvl113_r3yd3
  :: forall b.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [k_s3ytX] k_s3ytX lvl6_r3y9C;

Text.Read.Lex.lexChar2
  :: forall b1.
     ((GHC.Types.Char, GHC.Types.Bool)
      -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [k_s3ytY]
        let {
          lvl116_s3ytZ :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl18_r3ybu; } in
        let {
          lvl117_s3yu0 :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl16_r3ybs; } in
        let {
          lvl118_s3yu1 :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl20_r3ybw; } in
        let {
          lvl119_s3yu2 :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl17_r3ybt; } in
        let {
          lvl120_s3yu3 :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl19_r3ybv; } in
        let {
          lvl121_s3yu4 :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl15_r3ybr; } in
        let {
          lvl122_s3yu5 :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl14_r3ybq; } in
        let {
          lvl123_s3yu6 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl13_r3ybp; } in
        let {
          lvl124_s3yu7 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl11_r3ybn; } in
        let {
          lvl125_s3yu8 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY] \u [] k_s3ytY lvl9_r3ybl; } in
        let {
          sat_s3yvh [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3ytY
               lvl116_s3ytZ
               lvl117_s3yu0
               lvl118_s3yu1
               lvl119_s3yu2
               lvl120_s3yu3
               lvl121_s3yu4
               lvl122_s3yu5] \u []
                  let {
                    sat_s3yuv [Occ=Once]
                      :: GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1_X3nNY
                    [LclId] =
                        [k_s3ytY] \r [a3_s3yuf]
                            let {
                              lvl126_s3yug [Occ=OnceL] :: GHC.Integer.Type.Integer
                              [LclId] =
                                  [a3_s3yuf] \u []
                                      case a3_s3yuf of {
                                        GHC.Types.I# i_s3yui [Occ=Once] ->
                                            GHC.Integer.Type.smallInteger i_s3yui;
                                      }; } in
                            let {
                              sat_s3yus [Occ=Once]
                                :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_X3nNY
                              [LclId] =
                                  [k_s3ytY lvl126_s3yug] \r [a4_s3yuj]
                                      case
                                          Text.Read.Lex.valInteger lvl126_s3yug a4_s3yuj
                                      of
                                      a5_s3yuk [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.leInteger# a5_s3yuk lvl7_r3ybj
                                            of
                                            { __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                              1# ->
                                                  let {
                                                    sat_s3yuq [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        [a5_s3yuk] \u []
                                                            case
                                                                GHC.Integer.Type.integerToInt
                                                                    a5_s3yuk
                                                            of
                                                            wild1_s3yum
                                                            { __DEFAULT ->
                                                                  case
                                                                      int2Word# [wild1_s3yum]
                                                                  of
                                                                  sat_s3yun
                                                                  { __DEFAULT ->
                                                                        case
                                                                            leWord# [sat_s3yun
                                                                                     1114111##]
                                                                        of
                                                                        { __DEFAULT ->
                                                                              GHC.Char.$wlvl
                                                                                  wild1_s3yum;
                                                                          1# ->
                                                                              case
                                                                                  chr# [wild1_s3yum]
                                                                              of
                                                                              sat_s3yup
                                                                              { __DEFAULT ->
                                                                                    GHC.Types.C# [sat_s3yup];
                                                                              };
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_s3yur [Occ=Once]
                                                      :: (GHC.Types.Char, GHC.Types.Bool)
                                                    [LclId] =
                                                        CCCS (,)! [sat_s3yuq GHC.Types.True];
                                                  } in  k_s3ytY sat_s3yur;
                                            };
                                      };
                            } in 
                              case $wlexDigits_r3y9x a3_s3yuf sat_s3yus of {
                                Unit# ww1_s3yuu [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3yuu];
                              };
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$w<++
                            lvl112_r3yd2 lvl113_r3yd3 sat_s3yuv
                    of
                    { Unit# ww1_s3yux [Occ=Once] ->
                          let {
                            sat_s3yvg [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
                            [LclId] =
                                [k_s3ytY
                                 lvl116_s3ytZ
                                 lvl117_s3yu0
                                 lvl118_s3yu1
                                 lvl119_s3yu2
                                 lvl120_s3yu3
                                 lvl121_s3yu4
                                 lvl122_s3yu5] \u []
                                    let {
                                      lvl126_s3yuz [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl45_r3ybV; } in
                                    let {
                                      lvl127_s3yuA [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl44_r3ybU; } in
                                    let {
                                      lvl128_s3yuB [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl43_r3ybT; } in
                                    let {
                                      lvl129_s3yuC [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl42_r3ybS; } in
                                    let {
                                      lvl130_s3yuD [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl41_r3ybR; } in
                                    let {
                                      lvl131_s3yuE [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl40_r3ybQ; } in
                                    let {
                                      lvl132_s3yuF [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl39_r3ybP; } in
                                    let {
                                      lvl133_s3yuG [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl38_r3ybO; } in
                                    let {
                                      lvl134_s3yuH [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl37_r3ybN; } in
                                    let {
                                      lvl135_s3yuI [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl36_r3ybM; } in
                                    let {
                                      lvl136_s3yuJ [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl35_r3ybL; } in
                                    let {
                                      lvl137_s3yuK [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl34_r3ybK; } in
                                    let {
                                      lvl138_s3yuL [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl33_r3ybJ; } in
                                    let {
                                      lvl139_s3yuM [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl32_r3ybI; } in
                                    let {
                                      lvl140_s3yuN [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl31_r3ybH; } in
                                    let {
                                      lvl141_s3yuO [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl30_r3ybG; } in
                                    let {
                                      lvl142_s3yuP [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl29_r3ybF; } in
                                    let {
                                      lvl143_s3yuQ [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl28_r3ybE; } in
                                    let {
                                      lvl144_s3yuR [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl27_r3ybD; } in
                                    let {
                                      lvl145_s3yuS [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl26_r3ybC; } in
                                    let {
                                      lvl146_s3yuT [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl25_r3ybB; } in
                                    let {
                                      lvl147_s3yuU [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl24_r3ybA; } in
                                    let {
                                      lvl148_s3yuV [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl23_r3ybz; } in
                                    let {
                                      lvl149_s3yuW [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl22_r3yby; } in
                                    let {
                                      lvl150_s3yuX [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u [] k_s3ytY lvl21_r3ybx; } in
                                    let {
                                      $wlvl1_s3yuY [InlPrag=NOUSERINLINE[0],
                                                    Occ=OnceL!,
                                                    Dmd=<L,C(U)>]
                                        :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                          sat-only [lvl116_s3ytZ
                                                    lvl117_s3yu0
                                                    lvl118_s3yu1
                                                    lvl119_s3yu2
                                                    lvl120_s3yu3
                                                    lvl121_s3yu4
                                                    lvl122_s3yu5
                                                    lvl126_s3yuz
                                                    lvl127_s3yuA
                                                    lvl128_s3yuB
                                                    lvl129_s3yuC
                                                    lvl130_s3yuD
                                                    lvl131_s3yuE
                                                    lvl132_s3yuF
                                                    lvl133_s3yuG
                                                    lvl134_s3yuH
                                                    lvl135_s3yuI
                                                    lvl136_s3yuJ
                                                    lvl137_s3yuK
                                                    lvl138_s3yuL
                                                    lvl139_s3yuM
                                                    lvl140_s3yuN
                                                    lvl141_s3yuO
                                                    lvl142_s3yuP
                                                    lvl143_s3yuQ
                                                    lvl144_s3yuR
                                                    lvl145_s3yuS
                                                    lvl146_s3yuT
                                                    lvl147_s3yuU
                                                    lvl148_s3yuV
                                                    lvl149_s3yuW
                                                    lvl150_s3yuX] \r [ww2_s3yuZ]
                                              case ww2_s3yuZ of {
                                                __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                '@'# -> lvl150_s3yuX;
                                                'A'# -> lvl149_s3yuW;
                                                'B'# -> lvl148_s3yuV;
                                                'C'# -> lvl147_s3yuU;
                                                'D'# -> lvl146_s3yuT;
                                                'E'# -> lvl145_s3yuS;
                                                'F'# -> lvl144_s3yuR;
                                                'G'# -> lvl122_s3yu5;
                                                'H'# -> lvl121_s3yu4;
                                                'I'# -> lvl120_s3yu3;
                                                'J'# -> lvl119_s3yu2;
                                                'K'# -> lvl118_s3yu1;
                                                'L'# -> lvl117_s3yu0;
                                                'M'# -> lvl116_s3ytZ;
                                                'N'# -> lvl143_s3yuQ;
                                                'O'# -> lvl142_s3yuP;
                                                'P'# -> lvl141_s3yuO;
                                                'Q'# -> lvl140_s3yuN;
                                                'R'# -> lvl139_s3yuM;
                                                'S'# -> lvl138_s3yuL;
                                                'T'# -> lvl137_s3yuK;
                                                'U'# -> lvl136_s3yuJ;
                                                'V'# -> lvl135_s3yuI;
                                                'W'# -> lvl134_s3yuH;
                                                'X'# -> lvl133_s3yuG;
                                                'Y'# -> lvl132_s3yuF;
                                                'Z'# -> lvl131_s3yuE;
                                                '['# -> lvl130_s3yuD;
                                                '\\'# -> lvl129_s3yuC;
                                                ']'# -> lvl128_s3yuB;
                                                '^'# -> lvl127_s3yuA;
                                                '_'# -> lvl126_s3yuz;
                                              }; } in
                                    let {
                                      lvl151_s3yv1 [InlPrag=NOUSERINLINE[0], Occ=OnceL]
                                        :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
                                          [$wlvl1_s3yuY] \r [w2_s3yv2]
                                              case w2_s3yv2 of {
                                                GHC.Types.C# ww3_s3yv4 [Occ=Once] ->
                                                    $wlvl1_s3yuY ww3_s3yv4;
                                              }; } in
                                    let {
                                      lvl152_s3yv5 [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId, Unf=OtherCon []] =
                                          CCCS Text.ParserCombinators.ReadP.Get! [lvl151_s3yv1]; } in
                                    let {
                                      sat_s3yvf [Occ=Once]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3ytY] \u []
                                              let {
                                                sat_s3yve [Occ=Once]
                                                  :: GHC.Types.Char
                                                     -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                                [LclId] =
                                                    [k_s3ytY] \r [a3_s3yvc]
                                                        let {
                                                          sat_s3yvd [Occ=Once]
                                                            :: (GHC.Types.Char, GHC.Types.Bool)
                                                          [LclId] =
                                                              CCCS (,)! [a3_s3yvc GHC.Types.True];
                                                        } in  k_s3ytY sat_s3yvd;
                                              } in 
                                                Text.ParserCombinators.ReadP.choice
                                                    lvl111_r3yd1 sat_s3yve; } in
                                    let {
                                      sat_s3yva [Occ=Once]
                                        :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [lvl152_s3yv5] \r [a_s3yv6]
                                              case a_s3yv6 of {
                                                GHC.Types.C# y_s3yv8 [Occ=Once!] ->
                                                    case y_s3yv8 of {
                                                      __DEFAULT ->
                                                          Text.ParserCombinators.ReadP.Fail [];
                                                      '^'# -> lvl152_s3yv5;
                                                    };
                                              }; } in
                                    let {
                                      sat_s3yvb [Occ=Once]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yva];
                                    } in 
                                      Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                          sat_s3yvb sat_s3yvf; } in
                          let {
                            sat_s3yuy [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
                            [LclId] =
                                CCCS Text.ParserCombinators.ReadP.Look! [ww1_s3yux];
                          } in 
                            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                sat_s3yuy sat_s3yvg;
                    }; } in
        let {
          sat_s3yud [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [lvl116_s3ytZ
               lvl117_s3yu0
               lvl118_s3yu1
               lvl119_s3yu2
               lvl120_s3yu3
               lvl121_s3yu4
               lvl122_s3yu5
               lvl123_s3yu6
               lvl124_s3yu7
               lvl125_s3yu8] \r [a3_s3yu9]
                  case a3_s3yu9 of {
                    GHC.Types.C# ds_s3yub [Occ=Once!] ->
                        case ds_s3yub of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '"'# -> lvl125_s3yu8;
                          '\''# -> lvl124_s3yu7;
                          '\\'# -> lvl123_s3yu6;
                          'a'# -> lvl122_s3yu5;
                          'b'# -> lvl121_s3yu4;
                          'f'# -> lvl117_s3yu0;
                          'n'# -> lvl119_s3yu2;
                          'r'# -> lvl116_s3ytZ;
                          't'# -> lvl120_s3yu3;
                          'v'# -> lvl118_s3yu1;
                        };
                  }; } in
        let {
          sat_s3yue [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yud];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3yue sat_s3yvh;

Text.Read.Lex.lexChar4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\&"#;

Text.Read.Lex.lexChar3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.lexChar4;

Text.Read.Lex.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3yvi]
        let {
          lvl116_s3yvj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk1
          [LclId] =
              [w2_s3yvi] \u []
                  case Text.Read.Lex.$wconsumeEmpties w2_s3yvi of {
                    Unit# ww1_s3yvl [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3yvl];
                  }; } in
        let {
          sat_s3yvn [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xk1
          [LclId] =
              [lvl116_s3yvj] \r [a3_s3yvm] lvl116_s3yvj;
        } in 
          Text.ParserCombinators.ReadP.$wstring
              Text.Read.Lex.lexChar3 sat_s3yvn;
Text.Read.Lex.$wconsumeEmpties [InlPrag=NOUSERINLINE[0],
                                Occ=LoopBreaker]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3yvo]
        let {
          lvl116_s3yvp [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xjV
          [LclId] =
              [w2_s3yvo] \u []
                  case Text.Read.Lex.$wlvl w2_s3yvo of {
                    Unit# ww1_s3yvr [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3yvr];
                  }; } in
        let {
          lvl117_s3yvs [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_s3xjV
          [LclId] =
              [w2_s3yvo] \u [] w2_s3yvo GHC.Tuple.(); } in
        let {
          sat_s3yvG [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xjV
          [LclId] =
              [lvl116_s3yvp lvl117_s3yvs] \r [a3_s3yvt]
                  case a3_s3yvt of {
                    [] -> lvl117_s3yvs;
                    : ds_s3yvv [Occ=Once!] ds1_s3yvw [Occ=Once!] ->
                        case ds_s3yvv of {
                          GHC.Types.C# ds2_s3yvy [Occ=Once!] ->
                              case ds2_s3yvy of {
                                __DEFAULT -> lvl117_s3yvs;
                                '\\'# ->
                                    case ds1_s3yvw of {
                                      [] -> lvl117_s3yvs;
                                      : ds4_s3yvB [Occ=Once!] _ [Occ=Dead] ->
                                          case ds4_s3yvB of {
                                            GHC.Types.C# ds6_s3yvE [Occ=Once!] ->
                                                case ds6_s3yvE of {
                                                  __DEFAULT -> lvl117_s3yvs;
                                                  '&'# -> lvl116_s3yvp;
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in  Unit# [sat_s3yvG];

Text.Read.Lex.lexChar5 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3yvH]
        case Text.Read.Lex.$wconsumeEmpties w2_s3yvH of {
          Unit# ww1_s3yvJ [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3yvJ];
        };

Text.Read.Lex.$wlexChar [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3yvK]
        let {
          lvl116_s3yvL [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk7
          [LclId] =
              [w2_s3yvK] \u []
                  let {
                    k_s3yvM [Occ=Once, Dmd=<L,C(U)>]
                      :: (GHC.Types.Char, GHC.Types.Bool)
                         -> Text.ParserCombinators.ReadP.P b1_s3xk7
                    [LclId, Arity=1, Str=<S,1*U(U,A)>, Unf=OtherCon []] =
                        [w2_s3yvK] \r [a3_s3yvN]
                            case a3_s3yvN of {
                              (,) c_s3yvP [Occ=Once] _ [Occ=Dead] ->
                                  let {
                                    lvl117_s3yvR :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                    [LclId] =
                                        [w2_s3yvK c_s3yvP] \u [] w2_s3yvK c_s3yvP; } in
                                  let {
                                    lvl118_s3yvS [Occ=OnceL]
                                      :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                    [LclId] =
                                        [lvl117_s3yvR] \u []
                                            let {
                                              sat_s3yvU [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                              [LclId] =
                                                  [lvl117_s3yvR] \r [a4_s3yvT] lvl117_s3yvR;
                                            } in 
                                              case Text.Read.Lex.$wlvl sat_s3yvU of {
                                                Unit# ww1_s3yvW [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3yvW];
                                              }; } in
                                  let {
                                    sat_s3ywa [Occ=Once]
                                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                    [LclId] =
                                        [lvl117_s3yvR lvl118_s3yvS] \r [a4_s3yvX]
                                            case a4_s3yvX of {
                                              [] -> lvl117_s3yvR;
                                              : ds1_s3yvZ [Occ=Once!] ds2_s3yw0 [Occ=Once!] ->
                                                  case ds1_s3yvZ of {
                                                    GHC.Types.C# ds3_s3yw2 [Occ=Once!] ->
                                                        case ds3_s3yw2 of {
                                                          __DEFAULT -> lvl117_s3yvR;
                                                          '\\'# ->
                                                              case ds2_s3yw0 of {
                                                                [] -> lvl117_s3yvR;
                                                                : ds5_s3yw5 [Occ=Once!]
                                                                  _ [Occ=Dead] ->
                                                                    case ds5_s3yw5 of {
                                                                      GHC.Types.C# ds7_s3yw8 [Occ=Once!] ->
                                                                          case ds7_s3yw8 of {
                                                                            __DEFAULT ->
                                                                                lvl117_s3yvR;
                                                                            '&'# -> lvl118_s3yvS;
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                  } in  Text.ParserCombinators.ReadP.Look [sat_s3ywa];
                            };
                  } in  Text.Read.Lex.lexChar2 k_s3yvM; } in
        let {
          sat_s3ywz [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xk7
          [LclId] =
              [w2_s3yvK lvl116_s3yvL] \r [a3_s3ywb]
                  case a3_s3ywb of wild_s3ywc {
                    GHC.Types.C# x34_s3ywd [Occ=Once!] ->
                        case x34_s3ywd of {
                          __DEFAULT ->
                              let {
                                lvl117_s3ywf :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                [LclId] =
                                    [w2_s3yvK wild_s3ywc] \u [] w2_s3yvK wild_s3ywc; } in
                              let {
                                lvl118_s3ywg [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                [LclId] =
                                    [lvl117_s3ywf] \u []
                                        let {
                                          sat_s3ywi [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                          [LclId] =
                                              [lvl117_s3ywf] \r [a4_s3ywh] lvl117_s3ywf;
                                        } in 
                                          case Text.Read.Lex.$wlvl sat_s3ywi of {
                                            Unit# ww1_s3ywk [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s3ywk];
                                          }; } in
                              let {
                                sat_s3ywy [Occ=Once]
                                  :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                [LclId] =
                                    [lvl117_s3ywf lvl118_s3ywg] \r [a4_s3ywl]
                                        case a4_s3ywl of {
                                          [] -> lvl117_s3ywf;
                                          : ds_s3ywn [Occ=Once!] ds1_s3ywo [Occ=Once!] ->
                                              case ds_s3ywn of {
                                                GHC.Types.C# ds2_s3ywq [Occ=Once!] ->
                                                    case ds2_s3ywq of {
                                                      __DEFAULT -> lvl117_s3ywf;
                                                      '\\'# ->
                                                          case ds1_s3ywo of {
                                                            [] -> lvl117_s3ywf;
                                                            : ds4_s3ywt [Occ=Once!] _ [Occ=Dead] ->
                                                                case ds4_s3ywt of {
                                                                  GHC.Types.C# ds6_s3yww [Occ=Once!] ->
                                                                      case ds6_s3yww of {
                                                                        __DEFAULT -> lvl117_s3ywf;
                                                                        '&'# -> lvl118_s3ywg;
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                        };
                              } in  Text.ParserCombinators.ReadP.Look [sat_s3ywy];
                          '\\'# -> lvl116_s3yvL;
                        };
                  };
        } in  Unit# [sat_s3ywz];

Text.Read.Lex.lexChar1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3ywA]
        case Text.Read.Lex.$wlexChar w2_s3ywA of {
          Unit# ww1_s3ywC [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3ywC];
        };

Text.Read.Lex.lexChar
  :: Text.ParserCombinators.ReadP.ReadP GHC.Types.Char
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.lexChar1 eta_B1;

lexStrItem_r3yd4
  :: forall b.
     ((GHC.Types.Char, GHC.Types.Bool)
      -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [k_s3ywD]
        let {
          lvl116_s3ywE :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [k_s3ywD] \u [] lexStrItem_r3yd4 k_s3ywD; } in
        let {
          lvl117_s3ywF [Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
              [lvl116_s3ywE] \r [a_s3ywG]
                  case a_s3ywG of {
                    GHC.Types.C# y_s3ywI [Occ=Once!] ->
                        case y_s3ywI of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '\\'# -> lvl116_s3ywE;
                        };
                  }; } in
        let {
          lvl118_s3ywK [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl117_s3ywF]; } in
        let {
          k1_s3ywL [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl118_s3ywK] \r [a3_s3ywM] lvl118_s3ywK; } in
        let {
          lvl119_s3ywN [Occ=OnceL*]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              [k1_s3ywL] \r [a_s3ywO]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3ywO k1_s3ywL; } in
        let {
          $wlvl1_s3ywP [InlPrag=NOUSERINLINE[0], Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [lvl116_s3ywE lvl119_s3ywN] \r [ww_s3ywQ]
                  case ww_s3ywQ of ds_s3ywR {
                    __DEFAULT ->
                        case ord# [ds_s3ywR] of sat_s3ywT {
                          __DEFAULT ->
                              case int2Word# [sat_s3ywT] of x34_s3ywS [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case leWord# [x34_s3ywS 887##] of {
                                      __DEFAULT ->
                                          case ord# [ds_s3ywR] of sat_s3ywW {
                                            __DEFAULT ->
                                                case
                                                    __pkg_ccall base-4.11.0.0 [sat_s3ywW
                                                                               GHC.Prim.realWorld#]
                                                of
                                                { Unit# ds2_s3ywZ [Occ=Once!] ->
                                                      case ds2_s3ywZ of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Look [lvl119_s3ywN];
                                                        0# -> Text.ParserCombinators.ReadP.Fail [];
                                                      };
                                                };
                                          };
                                      1# ->
                                          case x34_s3ywS of wild_s3yx1 {
                                            __DEFAULT ->
                                                case minusWord# [wild_s3yx1 9##] of sat_s3yx2 {
                                                  __DEFAULT ->
                                                      case leWord# [sat_s3yx2 4##] of {
                                                        __DEFAULT ->
                                                            case wild_s3yx1 of {
                                                              __DEFAULT ->
                                                                  Text.ParserCombinators.ReadP.Fail [];
                                                              160## ->
                                                                  Text.ParserCombinators.ReadP.Look [lvl119_s3ywN];
                                                            };
                                                        1# ->
                                                            Text.ParserCombinators.ReadP.Look [lvl119_s3ywN];
                                                      };
                                                };
                                            32## ->
                                                Text.ParserCombinators.ReadP.Look [lvl119_s3ywN];
                                          };
                                    };
                              };
                        };
                    '&'# -> lvl116_s3ywE;
                  }; } in
        let {
          lvl120_s3yx5 [InlPrag=NOUSERINLINE[0], Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
              [$wlvl1_s3ywP] \r [w2_s3yx6]
                  case w2_s3yx6 of {
                    GHC.Types.C# ww1_s3yx8 [Occ=Once] -> $wlvl1_s3ywP ww1_s3yx8;
                  }; } in
        let {
          lvl121_s3yx9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl120_s3yx5]; } in
        let {
          lvl122_s3yxa [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [k_s3ywD] \u [] Text.Read.Lex.lexChar2 k_s3ywD; } in
        let {
          sat_s3yxm [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [k_s3ywD lvl122_s3yxa] \r [a3_s3yxh]
                  case a3_s3yxh of wild_s3yxi {
                    GHC.Types.C# x34_s3yxj [Occ=Once!] ->
                        case x34_s3yxj of {
                          __DEFAULT ->
                              let {
                                sat_s3yxl [Occ=Once] :: (GHC.Types.Char, GHC.Types.Bool)
                                [LclId] =
                                    CCCS (,)! [wild_s3yxi GHC.Types.False];
                              } in  k_s3ywD sat_s3yxl;
                          '\\'# -> lvl122_s3yxa;
                        };
                  }; } in
        let {
          sat_s3yxn [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yxm]; } in
        let {
          sat_s3yxf [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [lvl121_s3yx9] \r [a_s3yxb]
                  case a_s3yxb of {
                    GHC.Types.C# y_s3yxd [Occ=Once!] ->
                        case y_s3yxd of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '\\'# -> lvl121_s3yx9;
                        };
                  }; } in
        let {
          sat_s3yxg [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yxf];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3yxg sat_s3yxn;

body_r3yd5
  :: ([GHC.Types.Char] -> GHC.Base.String)
     -> forall b1.
        (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,C(U)><L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [f_s3yxo k_s3yxp]
        let {
          lvl116_s3yxq [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nOE
          [LclId] =
              [f_s3yxo k_s3yxp] \u []
                  let {
                    sat_s3yxr [Occ=OnceL] :: GHC.Base.String
                    [LclId] =
                        [f_s3yxo] \u [] f_s3yxo GHC.Types.[]; } in
                  let {
                    sat_s3yxs [Occ=Once] :: Text.Read.Lex.Lexeme
                    [LclId] =
                        CCCS Text.Read.Lex.String! [sat_s3yxr];
                  } in  k_s3yxp sat_s3yxs; } in
        let {
          sat_s3yxF [Occ=Once]
            :: (GHC.Types.Char, GHC.Types.Bool)
               -> Text.ParserCombinators.ReadP.P b1_X3nOE
          [LclId] =
              [f_s3yxo k_s3yxp lvl116_s3yxq] \r [a3_s3yxt]
                  case a3_s3yxt of {
                    (,) c_s3yxv [Occ=Once!] esc_s3yxw [Occ=Once!] ->
                        case c_s3yxv of wild1_s3yxx {
                          GHC.Types.C# x34_s3yxy [Occ=Once!] ->
                              let-no-escape {
                                $j_s3yxz [Occ=Once*T[0], Dmd=<L,1*U>]
                                  :: Text.ParserCombinators.ReadP.P b1_X3nOE
                                [LclId[JoinId(0)], Unf=OtherCon []] =
                                    [f_s3yxo k_s3yxp wild1_s3yxx] \r []
                                        let {
                                          sat_s3yxC [Occ=Once]
                                            :: [GHC.Types.Char] -> GHC.Base.String
                                          [LclId] =
                                              [f_s3yxo wild1_s3yxx] \r [x35_s3yxA]
                                                  let {
                                                    sat_s3yxB [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        CCCS :! [wild1_s3yxx x35_s3yxA];
                                                  } in  f_s3yxo sat_s3yxB;
                                        } in  body_r3yd5 sat_s3yxC k_s3yxp;
                              } in 
                                case x34_s3yxy of {
                                  __DEFAULT -> $j_s3yxz;
                                  '"'# ->
                                      case esc_s3yxw of {
                                        GHC.Types.False -> lvl116_s3yxq;
                                        GHC.Types.True -> $j_s3yxz;
                                      };
                                };
                        };
                  };
        } in  lexStrItem_r3yd4 sat_s3yxF;

lexExp_r3yd6
  :: forall b1.
     (GHC.Base.Maybe GHC.Integer.Type.Integer
      -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [k_s3yxG]
        let {
          lvl116_s3yxH :: Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              [k_s3yxG] \u []
                  let {
                    k1_s3yxI [Dmd=<L,C(U)>]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []] =
                        sat-only [k_s3yxG] \r [a3_s3yxJ]
                            let {
                              sat_s3yxR [Occ=Once]
                                :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_X3nPk
                              [LclId] =
                                  [k_s3yxG a3_s3yxJ] \r [a4_s3yxK]
                                      let {
                                        sat_s3yxP [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [a3_s3yxJ a4_s3yxK] \u []
                                                case a3_s3yxJ of {
                                                  GHC.Types.C# x34_s3yxM [Occ=Once!] ->
                                                      case x34_s3yxM of {
                                                        __DEFAULT ->
                                                            Text.Read.Lex.valInteger
                                                                Text.Read.Lex.numberToFixed1
                                                                a4_s3yxK;
                                                        '-'# ->
                                                            case
                                                                Text.Read.Lex.valInteger
                                                                    Text.Read.Lex.numberToFixed1
                                                                    a4_s3yxK
                                                            of
                                                            sat_s3yxO
                                                            { __DEFAULT ->
                                                                  GHC.Integer.Type.negateInteger
                                                                      sat_s3yxO;
                                                            };
                                                      };
                                                }; } in
                                      let {
                                        sat_s3yxQ [Occ=Once]
                                          :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                        [LclId] =
                                            CCCS GHC.Base.Just! [sat_s3yxP];
                                      } in  k_s3yxG sat_s3yxQ;
                            } in 
                              case $wlexDigits_r3y9x lvl6_r3y9C sat_s3yxR of {
                                Unit# ww1_s3yxT [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3yxT];
                              }; } in
                  let {
                    sat_s3yyd [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        [k_s3yxG] \u []
                            let {
                              sat_s3yya [Occ=Once]
                                :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_X3nPk
                              [LclId] =
                                  [k_s3yxG] \r [a3_s3yy7]
                                      let {
                                        sat_s3yy8 [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [a3_s3yy7] \u []
                                                Text.Read.Lex.valInteger
                                                    Text.Read.Lex.numberToFixed1 a3_s3yy7; } in
                                      let {
                                        sat_s3yy9 [Occ=Once]
                                          :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                        [LclId] =
                                            CCCS GHC.Base.Just! [sat_s3yy8];
                                      } in  k_s3yxG sat_s3yy9;
                            } in 
                              case $wlexDigits_r3y9x lvl6_r3y9C sat_s3yya of {
                                Unit# ww1_s3yyc [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3yyc];
                              }; } in
                  let {
                    sat_s3yy4 [Occ=OnceL]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        [k1_s3yxI] \r [a_s3yy0]
                            case a_s3yy0 of wild1_s3yy1 {
                              GHC.Types.C# y_s3yy2 [Occ=Once!] ->
                                  case y_s3yy2 of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    '+'# -> k1_s3yxI wild1_s3yy1;
                                  };
                            }; } in
                  let {
                    sat_s3yy5 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yy4]; } in
                  let {
                    sat_s3yxY [Occ=OnceL]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        [k1_s3yxI] \r [a_s3yxU]
                            case a_s3yxU of wild1_s3yxV {
                              GHC.Types.C# y_s3yxW [Occ=Once!] ->
                                  case y_s3yxW of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    '-'# -> k1_s3yxI wild1_s3yxV;
                                  };
                            }; } in
                  let {
                    sat_s3yxZ [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yxY];
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                            sat_s3yxZ sat_s3yy5
                    of
                    sat_s3yy6
                    { __DEFAULT ->
                          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                              sat_s3yy6 sat_s3yyd;
                    }; } in
        let {
          sat_s3yyo [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              [lvl116_s3yxH] \r [a_s3yyk]
                  case a_s3yyk of {
                    GHC.Types.C# y_s3yym [Occ=Once!] ->
                        case y_s3yym of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'E'# -> lvl116_s3yxH;
                        };
                  }; } in
        let {
          sat_s3yyp [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yyo]; } in
        let {
          sat_s3yyi [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              [lvl116_s3yxH] \r [a_s3yye]
                  case a_s3yye of {
                    GHC.Types.C# y_s3yyg [Occ=Once!] ->
                        case y_s3yyg of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'e'# -> lvl116_s3yxH;
                        };
                  }; } in
        let {
          sat_s3yyj [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yyi];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3yyj sat_s3yyp;

lvl114_r3yd7
  :: forall b.
     (GHC.Base.Maybe Text.Read.Lex.Digits
      -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [k_s3yyq] k_s3yyq GHC.Base.Nothing;

lvl115_r3yd8
  :: forall b.
     (GHC.Base.Maybe GHC.Integer.Type.Integer
      -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [k_s3yyr] k_s3yyr GHC.Base.Nothing;

$wlexDecNumber_r3yd9
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3yys]
        let {
          sat_s3yyE [Occ=Once]
            :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xkr
          [LclId] =
              [w2_s3yys] \r [a3_s3yyt]
                  let {
                    sat_s3yyB [Occ=Once]
                      :: GHC.Base.Maybe Text.Read.Lex.Digits
                         -> Text.ParserCombinators.ReadP.P b1_s3xkr
                    [LclId] =
                        [w2_s3yys a3_s3yyt] \r [a4_s3yyu]
                            let {
                              sat_s3yyy [Occ=Once]
                                :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                   -> Text.ParserCombinators.ReadP.P b1_s3xkr
                              [LclId] =
                                  [w2_s3yys a3_s3yyt a4_s3yyu] \r [a5_s3yyv]
                                      let {
                                        sat_s3yyw [Occ=Once] :: Text.Read.Lex.Number
                                        [LclId] =
                                            CCCS Text.Read.Lex.MkDecimal! [a3_s3yyt
                                                                           a4_s3yyu
                                                                           a5_s3yyv]; } in
                                      let {
                                        sat_s3yyx [Occ=Once] :: Text.Read.Lex.Lexeme
                                        [LclId] =
                                            CCCS Text.Read.Lex.Number! [sat_s3yyw];
                                      } in  w2_s3yys sat_s3yyx;
                            } in 
                              case
                                  Text.ParserCombinators.ReadP.$w<++
                                      lexExp_r3yd6 lvl115_r3yd8 sat_s3yyy
                              of
                              { Unit# ww1_s3yyA [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3yyA];
                              };
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$w<++
                            lexFrac_r3y9E lvl114_r3yd7 sat_s3yyB
                    of
                    { Unit# ww1_s3yyD [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3yyD];
                    };
        } in  $wlexDigits_r3y9x lvl6_r3y9C sat_s3yyE;

lexDecNumber_r3yda
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3yyF]
        case $wlexDecNumber_r3yd9 w2_s3yyF of {
          Unit# ww1_s3yyH [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3yyH];
        };

Text.Read.Lex.expect2
  :: forall b.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [k_s3yyI]
        let {
          $wk_s3yyJ [InlPrag=NOUSERINLINE[0], Occ=OnceL!, Dmd=<L,C(C1(U))>]
            :: GHC.Types.Char
               -> GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Arity=2, Str=<L,U(U)><S,1*U>, Unf=OtherCon []] =
              sat-only [k_s3yyI] \r [ww_s3yyK ww1_s3yyL]
                  let {
                    lvl116_s3yyM [Occ=OnceL*] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [k_s3yyI ww_s3yyK] \u []
                            let {
                              sat_s3yyN [Occ=Once] :: Text.Read.Lex.Lexeme
                              [LclId] =
                                  CCCS Text.Read.Lex.Char! [ww_s3yyK];
                            } in  k_s3yyI sat_s3yyN;
                  } in 
                    case ww1_s3yyL of {
                      GHC.Types.False ->
                          case ww_s3yyK of {
                            GHC.Types.C# x34_s3yyQ [Occ=Once!] ->
                                case x34_s3yyQ of {
                                  __DEFAULT ->
                                      let {
                                        sat_s3yyW [Occ=Once]
                                          :: GHC.Types.Char
                                             -> Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            [lvl116_s3yyM] \r [a_s3yyS]
                                                case a_s3yyS of {
                                                  GHC.Types.C# y_s3yyU [Occ=Once!] ->
                                                      case y_s3yyU of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Fail [];
                                                        '\''# -> lvl116_s3yyM;
                                                      };
                                                };
                                      } in  Text.ParserCombinators.ReadP.Get [sat_s3yyW];
                                  '\''# -> Text.ParserCombinators.ReadP.Fail [];
                                };
                          };
                      GHC.Types.True ->
                          let {
                            sat_s3yz1 [Occ=Once]
                              :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                            [LclId] =
                                [lvl116_s3yyM] \r [a_s3yyX]
                                    case a_s3yyX of {
                                      GHC.Types.C# y_s3yyZ [Occ=Once!] ->
                                          case y_s3yyZ of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            '\''# -> lvl116_s3yyM;
                                          };
                                    };
                          } in  Text.ParserCombinators.ReadP.Get [sat_s3yz1];
                    }; } in
        let {
          k1_s3yz2 [InlPrag=NOUSERINLINE[0], Occ=Once, Dmd=<L,C(U)>]
            :: (GHC.Types.Char, GHC.Types.Bool)
               -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Arity=1, Str=<S(LS),1*U(U(U),1*U)>, Unf=OtherCon []] =
              [$wk_s3yyJ] \r [w2_s3yz3]
                  case w2_s3yz3 of {
                    (,) ww1_s3yz5 [Occ=Once] ww2_s3yz6 [Occ=Once] ->
                        $wk_s3yyJ ww1_s3yz5 ww2_s3yz6;
                  }; } in
        let {
          lvl116_s3yz7 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              [k1_s3yz2] \u [] Text.Read.Lex.lexChar2 k1_s3yz2; } in
        let {
          lvl117_s3yz8 [Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
              [k_s3yyI lvl116_s3yz7] \r [a3_s3yz9]
                  case a3_s3yz9 of wild_s3yza {
                    GHC.Types.C# x34_s3yzb [Occ=Once!] ->
                        case x34_s3yzb of {
                          __DEFAULT ->
                              let {
                                lvl118_s3yzd [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
                                [LclId] =
                                    [k_s3yyI wild_s3yza] \u []
                                        let {
                                          sat_s3yze [Occ=Once] :: Text.Read.Lex.Lexeme
                                          [LclId] =
                                              CCCS Text.Read.Lex.Char! [wild_s3yza];
                                        } in  k_s3yyI sat_s3yze; } in
                              let {
                                sat_s3yzj [Occ=Once]
                                  :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                                [LclId] =
                                    [lvl118_s3yzd] \r [a_s3yzf]
                                        case a_s3yzf of {
                                          GHC.Types.C# y_s3yzh [Occ=Once!] ->
                                              case y_s3yzh of {
                                                __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                '\''# -> lvl118_s3yzd;
                                              };
                                        };
                              } in  Text.ParserCombinators.ReadP.Get [sat_s3yzj];
                          '\''# -> Text.ParserCombinators.ReadP.Fail [];
                          '\\'# -> lvl116_s3yz7;
                        };
                  }; } in
        let {
          lvl118_s3yzk [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl117_s3yz8]; } in
        let {
          sat_s3yAf [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              [k_s3yyI] \u []
                  let {
                    lvl119_s3yzr [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [k_s3yyI] \u [] body_r3yd5 GHC.Base.id k_s3yyI; } in
                  let {
                    sat_s3yAe [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [k_s3yyI] \u []
                            let {
                              sat_s3yAd [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                              [LclId] =
                                  [k_s3yyI] \u []
                                      let {
                                        sat_s3yAc [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            [k_s3yyI] \u []
                                                let {
                                                  sat_s3yAb [Occ=Once]
                                                    :: Text.ParserCombinators.ReadP.P b_X3nCK
                                                  [LclId] =
                                                      [k_s3yyI] \u []
                                                          case
                                                              Text.ParserCombinators.ReadP.$w<++
                                                                  lexHexOct_r3y9B
                                                                  lexDecNumber_r3yda
                                                                  k_s3yyI
                                                          of
                                                          { Unit# ww1_s3yAa [Occ=Once] ->
                                                                Text.ParserCombinators.ReadP.Look [ww1_s3yAa];
                                                          }; } in
                                                let {
                                                  sat_s3yA7 [Occ=Once]
                                                    :: GHC.Types.Char
                                                       -> Text.ParserCombinators.ReadP.P b_X3nCK
                                                  [LclId] =
                                                      [k_s3yyI] \r [a_s3yzQ]
                                                          case a_s3yzQ of wild_s3yzR {
                                                            GHC.Types.C# c#_s3yzS ->
                                                                case ord# [c#_s3yzS] of sat_s3yzU {
                                                                  __DEFAULT ->
                                                                      case
                                                                          __pkg_ccall base-4.11.0.0 [sat_s3yzU
                                                                                                     GHC.Prim.realWorld#]
                                                                      of
                                                                      { Unit# ds1_s3yzX [Occ=Once!] ->
                                                                            let-no-escape {
                                                                              $j_s3yzY [Occ=Once*T[0],
                                                                                        Dmd=<L,1*U>]
                                                                                :: Text.ParserCombinators.ReadP.P
                                                                                     b_X3nCK
                                                                              [LclId[JoinId(0)],
                                                                               Unf=OtherCon []] =
                                                                                  [k_s3yyI
                                                                                   wild_s3yzR] \r []
                                                                                      let {
                                                                                        sat_s3yA2 [Occ=Once]
                                                                                          :: GHC.Base.String
                                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                                  b_X3nCK
                                                                                        [LclId] =
                                                                                            [k_s3yyI
                                                                                             wild_s3yzR] \r [a3_s3yzZ]
                                                                                                let {
                                                                                                  sat_s3yA0 [Occ=Once]
                                                                                                    :: GHC.Base.String
                                                                                                  [LclId] =
                                                                                                      CCCS :! [wild_s3yzR
                                                                                                               a3_s3yzZ]; } in
                                                                                                let {
                                                                                                  sat_s3yA1 [Occ=Once]
                                                                                                    :: Text.Read.Lex.Lexeme
                                                                                                  [LclId] =
                                                                                                      CCCS Text.Read.Lex.Ident! [sat_s3yA0];
                                                                                                } in 
                                                                                                  k_s3yyI
                                                                                                      sat_s3yA1;
                                                                                      } in 
                                                                                        case
                                                                                            Text.ParserCombinators.ReadP.$wmunch
                                                                                                isIdfChar_r3y8W
                                                                                                sat_s3yA2
                                                                                        of
                                                                                        { Unit# ww1_s3yA4 [Occ=Once] ->
                                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3yA4];
                                                                                        };
                                                                            } in 
                                                                              case ds1_s3yzX of {
                                                                                __DEFAULT ->
                                                                                    $j_s3yzY;
                                                                                0# ->
                                                                                    case
                                                                                        c#_s3yzS
                                                                                    of
                                                                                    { __DEFAULT ->
                                                                                          Text.ParserCombinators.ReadP.Fail [];
                                                                                      '_'# ->
                                                                                          $j_s3yzY;
                                                                                    };
                                                                              };
                                                                      };
                                                                };
                                                          }; } in
                                                let {
                                                  sat_s3yA8 [Occ=Once]
                                                    :: Text.ParserCombinators.ReadP.P b_X3nCK
                                                  [LclId] =
                                                      CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yA7];
                                                } in 
                                                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                                      sat_s3yA8 sat_s3yAb; } in
                                      let {
                                        sat_s3yzO [Occ=Once]
                                          :: GHC.Types.Char
                                             -> Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            [k_s3yyI] \r [a_s3yzE]
                                                case Text.Read.Lex.isSymbolChar a_s3yzE of {
                                                  GHC.Types.False ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                  GHC.Types.True ->
                                                      let {
                                                        sat_s3yzL [Occ=Once]
                                                          :: GHC.Base.String
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b_X3nCK
                                                        [LclId] =
                                                            [k_s3yyI a_s3yzE] \r [a3_s3yzG]
                                                                let {
                                                                  a4_s3yzH :: GHC.Base.String
                                                                  [LclId, Unf=OtherCon []] =
                                                                      CCCS :! [a_s3yzE a3_s3yzG];
                                                                } in 
                                                                  case
                                                                      GHC.List.elem
                                                                          GHC.Classes.$fEq[]_$s$fEq[]1
                                                                          a4_s3yzH
                                                                          reserved_ops29_r3y9q
                                                                  of
                                                                  { GHC.Types.False ->
                                                                        let {
                                                                          sat_s3yzJ [Occ=Once]
                                                                            :: Text.Read.Lex.Lexeme
                                                                          [LclId] =
                                                                              CCCS Text.Read.Lex.Symbol! [a4_s3yzH];
                                                                        } in  k_s3yyI sat_s3yzJ;
                                                                    GHC.Types.True ->
                                                                        let {
                                                                          sat_s3yzK [Occ=Once]
                                                                            :: Text.Read.Lex.Lexeme
                                                                          [LclId] =
                                                                              CCCS Text.Read.Lex.Punc! [a4_s3yzH];
                                                                        } in  k_s3yyI sat_s3yzK;
                                                                  };
                                                      } in 
                                                        case
                                                            Text.ParserCombinators.ReadP.$wmunch
                                                                Text.Read.Lex.isSymbolChar sat_s3yzL
                                                        of
                                                        { Unit# ww1_s3yzN [Occ=Once] ->
                                                              Text.ParserCombinators.ReadP.Look [ww1_s3yzN];
                                                        };
                                                }; } in
                                      let {
                                        sat_s3yzP [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yzO];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3yzP sat_s3yAc; } in
                            let {
                              sat_s3yzC [Occ=Once]
                                :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                              [LclId] =
                                  [k_s3yyI] \r [a_s3yzy]
                                      case
                                          GHC.List.elem
                                              GHC.Classes.$fEqChar
                                              a_s3yzy
                                              Text.Read.Lex.isSymbolChar3
                                      of
                                      { GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                                        GHC.Types.True ->
                                            let {
                                              sat_s3yzA [Occ=Once] :: GHC.Base.String
                                              [LclId] =
                                                  CCCS :! [a_s3yzy GHC.Types.[]]; } in
                                            let {
                                              sat_s3yzB [Occ=Once] :: Text.Read.Lex.Lexeme
                                              [LclId] =
                                                  CCCS Text.Read.Lex.Punc! [sat_s3yzA];
                                            } in  k_s3yyI sat_s3yzB;
                                      }; } in
                            let {
                              sat_s3yzD [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yzC];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3yzD sat_s3yAd; } in
                  let {
                    sat_s3yzw [Occ=Once]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [lvl119_s3yzr] \r [a_s3yzs]
                            case a_s3yzs of {
                              GHC.Types.C# y_s3yzu [Occ=Once!] ->
                                  case y_s3yzu of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    '"'# -> lvl119_s3yzr;
                                  };
                            }; } in
                  let {
                    sat_s3yzx [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yzw];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3yzx sat_s3yAe; } in
        let {
          sat_s3yzp [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              [lvl118_s3yzk] \r [a_s3yzl]
                  case a_s3yzl of {
                    GHC.Types.C# y_s3yzn [Occ=Once!] ->
                        case y_s3yzn of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '\''# -> lvl118_s3yzk;
                        };
                  }; } in
        let {
          sat_s3yzq [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3yzp];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3yzq sat_s3yAf;

Text.Read.Lex.$wlex [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w2_s3yAg]
        let {
          lvl116_s3yAh [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xkG
          [LclId] =
              [w2_s3yAg] \u []
                  let {
                    lvl117_s3yAi [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        [w2_s3yAg] \u [] w2_s3yAg Text.Read.Lex.EOF; } in
                  let {
                    sat_s3yAp [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        [w2_s3yAg] \u [] Text.Read.Lex.expect2 w2_s3yAg; } in
                  let {
                    sat_s3yAn [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        [lvl117_s3yAi] \r [a3_s3yAj]
                            case a3_s3yAj of {
                              [] -> lvl117_s3yAi;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3yAo [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3yAn];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3yAo sat_s3yAp; } in
        let {
          k_s3yAq [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3xkG
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3yAh] \r [a3_s3yAr] lvl116_s3yAh; } in
        let {
          sat_s3yAt [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkG
          [LclId] =
              [k_s3yAq] \r [a_s3yAs]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3yAs k_s3yAq;
        } in  Unit# [sat_s3yAt];

Text.Read.Lex.lex1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [w2_s3yAu]
        case Text.Read.Lex.$wlex w2_s3yAu of {
          Unit# ww1_s3yAw [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3yAw];
        };

Text.Read.Lex.lex
  :: Text.ParserCombinators.ReadP.ReadP Text.Read.Lex.Lexeme
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.lex1 eta_B1;

Text.Read.Lex.$wexpect [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Lexeme
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U><L,1*C1(U)>, Unf=OtherCon []] =
    [] \r [w2_s3yAx w3_s3yAy]
        let {
          lvl116_s3yAz [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_s3xkN
          [LclId] =
              [w2_s3yAx w3_s3yAy] \u []
                  let {
                    lvl117_s3yAA :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [w3_s3yAy] \u [] w3_s3yAy GHC.Tuple.(); } in
                  let {
                    lvl118_s3yAB [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [w2_s3yAx lvl117_s3yAA] \u []
                            case w2_s3yAx of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                              Text.Read.Lex.EOF -> lvl117_s3yAA;
                            }; } in
                  let {
                    sat_s3yAM [Occ=Once] :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [w2_s3yAx lvl117_s3yAA] \u []
                            let {
                              sat_s3yAL [Occ=Once]
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b_s3xkN
                              [LclId] =
                                  [w2_s3yAx lvl117_s3yAA] \r [a3_s3yAJ]
                                      case Text.Read.Lex.$fEqLexeme_$c== a3_s3yAJ w2_s3yAx of {
                                        GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                                        GHC.Types.True -> lvl117_s3yAA;
                                      };
                            } in  Text.Read.Lex.expect2 sat_s3yAL; } in
                  let {
                    sat_s3yAH [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [lvl118_s3yAB] \r [a3_s3yAD]
                            case a3_s3yAD of {
                              [] -> lvl118_s3yAB;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3yAI [Occ=Once] :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3yAH];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3yAI sat_s3yAM; } in
        let {
          k_s3yAN [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b_s3xkN
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3yAz] \r [a3_s3yAO] lvl116_s3yAz; } in
        let {
          sat_s3yAQ [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xkN
          [LclId] =
              [k_s3yAN] \r [a_s3yAP]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3yAP k_s3yAN;
        } in  Unit# [sat_s3yAQ];

Text.Read.Lex.expect1 [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Lexeme
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3yAR w3_s3yAS]
        case Text.Read.Lex.$wexpect w2_s3yAR w3_s3yAS of {
          Unit# ww1_s3yAU [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3yAU];
        };

Text.Read.Lex.expect
  :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.ReadP ()
[GblId, Arity=2, Str=<L,U><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.expect1 eta_B2 eta_B1;

Text.Read.Lex.$whsLex [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3yAV]
        let {
          lvl116_s3yAW [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xkT
          [LclId] =
              [w2_s3yAV] \u []
                  let {
                    lvl117_s3yAX [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT
                    [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                        [w2_s3yAV] \r [s_s3yAY] w2_s3yAV s_s3yAY; } in
                  let {
                    lvl118_s3yAZ
                      :: Text.ParserCombinators.ReadP.P
                           (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId, Unf=OtherCon []] =
                        CCCS Text.ParserCombinators.ReadP.Result! [lvl117_s3yAX
                                                                   Text.ParserCombinators.ReadP.Fail]; } in
                  let {
                    sat_s3yB8 [Occ=Once]
                      :: Text.ParserCombinators.ReadP.P
                           (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId] =
                        [lvl118_s3yAZ] \u []
                            let {
                              sat_s3yB7 [Occ=Once]
                                :: Text.Read.Lex.Lexeme
                                   -> Text.ParserCombinators.ReadP.P
                                        (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                              [LclId] =
                                  [lvl118_s3yAZ] \r [a3_s3yB6] lvl118_s3yAZ;
                            } in  Text.Read.Lex.expect2 sat_s3yB7; } in
                  let {
                    sat_s3yB4 [Occ=OnceL]
                      :: GHC.Base.String
                         -> Text.ParserCombinators.ReadP.P
                              (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId] =
                        [lvl118_s3yAZ] \r [a3_s3yB0]
                            case a3_s3yB0 of {
                              [] -> lvl118_s3yAZ;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3yB5 [Occ=Once]
                      :: Text.ParserCombinators.ReadP.P
                           (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3yB4];
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                            sat_s3yB5 sat_s3yB8
                    of
                    sat_s3yB9
                    { __DEFAULT ->
                          Text.ParserCombinators.ReadP.gather_gath GHC.Base.id sat_s3yB9;
                    }; } in
        let {
          k_s3yBa [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3xkT
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3yAW] \r [a3_s3yBb] lvl116_s3yAW; } in
        let {
          sat_s3yBd [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT
          [LclId] =
              [k_s3yBa] \r [a_s3yBc]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3yBc k_s3yBa;
        } in  Unit# [sat_s3yBd];

Text.Read.Lex.hsLex1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3yBe]
        case Text.Read.Lex.$whsLex w2_s3yBe of {
          Unit# ww1_s3yBg [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3yBg];
        };

Text.Read.Lex.hsLex
  :: Text.ParserCombinators.ReadP.ReadP GHC.Base.String
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.hsLex1 eta_B1;

Text.Read.Lex.MkNumber
  :: GHC.Types.Int -> Text.Read.Lex.Digits -> Text.Read.Lex.Number
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.MkNumber [eta_B2 eta_B1];

Text.Read.Lex.MkDecimal
  :: Text.Read.Lex.Digits
     -> GHC.Base.Maybe Text.Read.Lex.Digits
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> Text.Read.Lex.Number
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Read.Lex.MkDecimal [eta_B3 eta_B2 eta_B1];

Text.Read.Lex.Char :: GHC.Types.Char -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Char [eta_B1];

Text.Read.Lex.String :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.String [eta_B1];

Text.Read.Lex.Punc :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Punc [eta_B1];

Text.Read.Lex.Ident :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m4,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Ident [eta_B1];

Text.Read.Lex.Symbol :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m5,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Symbol [eta_B1];

Text.Read.Lex.Number
  :: Text.Read.Lex.Number -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m6,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Number [eta_B1];

Text.Read.Lex.EOF :: Text.Read.Lex.Lexeme
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.EOF! [];


==================== Pre unarise: ====================
2018-03-16 15:58:21.793706314 UTC

Text.Read.Lex.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Text.Read.Lex.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$trModule4];

Text.Read.Lex.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text.Read.Lex"#;

Text.Read.Lex.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$trModule2];

Text.Read.Lex.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Text.Read.Lex.$trModule3
                                     Text.Read.Lex.$trModule1];

$krep_r3y8E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep1_r3y8F :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_r3y8G :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep3_r3y8H :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r3y8E GHC.Types.[]];

$krep4_r3y8I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep3_r3y8H];

$krep5_r3y8J :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r3y8F GHC.Types.[]];

$krep6_r3y8K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep5_r3y8J];

$krep7_r3y8L :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_r3y8K GHC.Types.[]];

$krep8_r3y8M :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep7_r3y8L];

$krep9_r3y8N :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r3y8G GHC.Types.[]];

$krep10_r3y8O :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep9_r3y8N];

Text.Read.Lex.$tcNumber2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Number"#;

Text.Read.Lex.$tcNumber1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tcNumber2];

Text.Read.Lex.$tcNumber :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [309030926258572567##
                                    15861928963352354800##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tcNumber1
                                    0#
                                    GHC.Types.krep$*];

$krep11_r3y8P :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Read.Lex.$tcNumber
                                              GHC.Types.[]];

$krep12_r3y8Q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r3y8I $krep11_r3y8P];

$krep13_r3y8R :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r3y8M $krep12_r3y8Q];

Text.Read.Lex.$tc'MkDecimal1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r3y8K $krep13_r3y8R];

Text.Read.Lex.$tc'MkDecimal3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MkDecimal"#;

Text.Read.Lex.$tc'MkDecimal2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'MkDecimal3];

Text.Read.Lex.$tc'MkDecimal :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3768064156751246198##
                                    12661213050981530502##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'MkDecimal2
                                    0#
                                    Text.Read.Lex.$tc'MkDecimal1];

$krep14_r3y8S :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r3y8K $krep11_r3y8P];

Text.Read.Lex.$tc'MkNumber1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r3y8F $krep14_r3y8S];

Text.Read.Lex.$tc'MkNumber3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MkNumber"#;

Text.Read.Lex.$tc'MkNumber2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'MkNumber3];

Text.Read.Lex.$tc'MkNumber :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13396293166029931455##
                                    9655480518931438202##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'MkNumber2
                                    0#
                                    Text.Read.Lex.$tc'MkNumber1];

Text.Read.Lex.$tcLexeme2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Lexeme"#;

Text.Read.Lex.$tcLexeme1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tcLexeme2];

Text.Read.Lex.$tcLexeme :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [80462090517814070##
                                    11862718491065697853##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tcLexeme1
                                    0#
                                    GHC.Types.krep$*];

Text.Read.Lex.$tc'EOF1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Read.Lex.$tcLexeme
                                              GHC.Types.[]];

Text.Read.Lex.$tc'EOF3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'EOF"#;

Text.Read.Lex.$tc'EOF2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'EOF3];

Text.Read.Lex.$tc'EOF :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3510729917506789415##
                                    3927434500167946503##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'EOF2
                                    0#
                                    Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'Ident1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_r3y8O
                                         Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'String2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'String"#;

Text.Read.Lex.$tc'String1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'String2];

Text.Read.Lex.$tc'String :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4234975262003182519##
                                    13764813366371540099##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'String1
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Punc2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Punc"#;

Text.Read.Lex.$tc'Punc1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Punc2];

Text.Read.Lex.$tc'Punc :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12518860736485891069##
                                    4367633479442506190##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Punc1
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Ident3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Ident"#;

Text.Read.Lex.$tc'Ident2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Ident3];

Text.Read.Lex.$tc'Ident :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17378133866674838049##
                                    11361322998352874125##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Ident2
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Symbol2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Symbol"#;

Text.Read.Lex.$tc'Symbol1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Symbol2];

Text.Read.Lex.$tc'Symbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [434905475898525586##
                                    17609692850475477756##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Symbol1
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Char1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_r3y8G
                                         Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'Char3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Char"#;

Text.Read.Lex.$tc'Char2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Char3];

Text.Read.Lex.$tc'Char :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4794546904228625478##
                                    396576625805862141##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Char2
                                    0#
                                    Text.Read.Lex.$tc'Char1];

Text.Read.Lex.$tc'Number1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r3y8P
                                         Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'Number3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Number"#;

Text.Read.Lex.$tc'Number2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Number3];

Text.Read.Lex.$tc'Number :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3115835552307058655##
                                    14198768466951480548##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Number2
                                    0#
                                    Text.Read.Lex.$tc'Number1];

Text.Read.Lex.$fShowLexeme9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MkDecimal "#;

Text.Read.Lex.$fShowLexeme8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.$fShowLexeme9;

Text.Read.Lex.$fShowLexeme10 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

Text.Read.Lex.$fShowLexeme11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MkNumber "#;

Text.Read.Lex.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> Text.Read.Lex.Number -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s3G25 w2_s3G26]
        case w2_s3G26 of {
          Text.Read.Lex.MkNumber b1_s3G28 [Occ=OnceL!]
                                 b2_s3G29 [Occ=OnceL!] ->
              let {
                p_s3G2a [Occ=OnceL*] :: GHC.Show.ShowS
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    [b1_s3G28 b2_s3G29] \r [x34_s3G2b]
                        let {
                          sat_s3G2G [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [b1_s3G28 b2_s3G29 x34_s3G2b] \u []
                                  case b1_s3G28 of {
                                    GHC.Types.I# ww3_s3G2d [Occ=Once] ->
                                        let {
                                          sat_s3G2B [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [b2_s3G29 x34_s3G2b] \u []
                                                  case b2_s3G29 of {
                                                    [] ->
                                                        GHC.CString.unpackAppendCString#
                                                            GHC.Show.showList__4 x34_s3G2b;
                                                    : x35_s3G2f [Occ=Once!] xs_s3G2g [Occ=Once] ->
                                                        let {
                                                          sat_s3G2A [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [x34_s3G2b x35_s3G2f xs_s3G2g] \u []
                                                                  case x35_s3G2f of {
                                                                    GHC.Types.I# ww5_s3G2i [Occ=Once] ->
                                                                        let {
                                                                          sat_s3G2w [Occ=Once]
                                                                            :: GHC.Base.String
                                                                          [LclId] =
                                                                              [x34_s3G2b
                                                                               xs_s3G2g] \u []
                                                                                  let {
                                                                                    lvl116_s3G2j [Occ=OnceL]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId,
                                                                                     Unf=OtherCon []] =
                                                                                        CCCS :! [GHC.Show.showList__2
                                                                                                 x34_s3G2b]; } in
                                                                                  let {
                                                                                    showl_s3G2k [Occ=LoopBreaker]
                                                                                      :: [GHC.Types.Int]
                                                                                         -> GHC.Base.String
                                                                                    [LclId,
                                                                                     Arity=1,
                                                                                     Str=<S,1*U>,
                                                                                     Unf=OtherCon []] =
                                                                                        sat-only [lvl116_s3G2j
                                                                                                  showl_s3G2k] \r [ds2_s3G2l]
                                                                                            case
                                                                                                ds2_s3G2l
                                                                                            of
                                                                                            { [] ->
                                                                                                  lvl116_s3G2j;
                                                                                              : y_s3G2n [Occ=Once!]
                                                                                                ys_s3G2o [Occ=Once] ->
                                                                                                  let {
                                                                                                    sat_s3G2v [Occ=Once]
                                                                                                      :: [GHC.Types.Char]
                                                                                                    [LclId] =
                                                                                                        [showl_s3G2k
                                                                                                         y_s3G2n
                                                                                                         ys_s3G2o] \u []
                                                                                                            case
                                                                                                                y_s3G2n
                                                                                                            of
                                                                                                            { GHC.Types.I# ww7_s3G2q [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_s3G2r [Occ=Once]
                                                                                                                      :: GHC.Base.String
                                                                                                                    [LclId] =
                                                                                                                        [showl_s3G2k
                                                                                                                         ys_s3G2o] \u []
                                                                                                                            showl_s3G2k
                                                                                                                                ys_s3G2o;
                                                                                                                  } in 
                                                                                                                    case
                                                                                                                        GHC.Show.$wshowSignedInt
                                                                                                                            0#
                                                                                                                            ww7_s3G2q
                                                                                                                            sat_s3G2r
                                                                                                                    of
                                                                                                                    { (#,#) ww9_s3G2t [Occ=Once]
                                                                                                                            ww4_s3G2u [Occ=Once] ->
                                                                                                                          : [ww9_s3G2t
                                                                                                                             ww4_s3G2u];
                                                                                                                    };
                                                                                                            };
                                                                                                  } in 
                                                                                                    : [GHC.Show.showList__1
                                                                                                       sat_s3G2v];
                                                                                            };
                                                                                  } in 
                                                                                    showl_s3G2k
                                                                                        xs_s3G2g;
                                                                        } in 
                                                                          case
                                                                              GHC.Show.$wshowSignedInt
                                                                                  0#
                                                                                  ww5_s3G2i
                                                                                  sat_s3G2w
                                                                          of
                                                                          { (#,#) ww7_s3G2y [Occ=Once]
                                                                                  ww4_s3G2z [Occ=Once] ->
                                                                                : [ww7_s3G2y
                                                                                   ww4_s3G2z];
                                                                          };
                                                                  };
                                                        } in  : [GHC.Show.showList__3 sat_s3G2A];
                                                  }; } in
                                        let {
                                          sat_s3G2C [Occ=Once] :: GHC.Base.String
                                          [LclId] =
                                              CCCS :! [GHC.Show.showSpace1 sat_s3G2B];
                                        } in 
                                          case GHC.Show.$wshowSignedInt 11# ww3_s3G2d sat_s3G2C of {
                                            (#,#) ww5_s3G2E [Occ=Once] ww6_s3G2F [Occ=Once] ->
                                                : [ww5_s3G2E ww6_s3G2F];
                                          };
                                  };
                        } in 
                          GHC.CString.unpackAppendCString#
                              Text.Read.Lex.$fShowLexeme11 sat_s3G2G;
              } in 
                case >=# [ww_s3G25 11#] of {
                  __DEFAULT -> p_s3G2a;
                  1# ->
                      let {
                        sat_s3G2L [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p_s3G2a] \r [x34_s3G2I]
                                let {
                                  sat_s3G2K [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p_s3G2a x34_s3G2I] \u []
                                          let {
                                            sat_s3G2J [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                CCCS :! [GHC.Show.$fShow(,)2 x34_s3G2I];
                                          } in  p_s3G2a sat_s3G2J;
                                } in  : [GHC.Show.$fShow(,)4 sat_s3G2K];
                      } in  sat_s3G2L;
                };
          Text.Read.Lex.MkDecimal b1_s3G2M [Occ=OnceL]
                                  b2_s3G2N [Occ=Once]
                                  b3_s3G2O [Occ=Once] ->
              let {
                f_s3G2P [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [b2_s3G2N] \u []
                        GHC.Show.$fShowMaybe_$cshowsPrec
                            GHC.Show.$fShow[]_$s$fShow[]
                            Text.Read.Lex.$fShowLexeme10
                            b2_s3G2N; } in
              let {
                g_s3G2Q [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [b3_s3G2O] \u []
                        GHC.Show.$fShowMaybe_$cshowsPrec
                            GHC.Show.$fShowInteger Text.Read.Lex.$fShowLexeme10 b3_s3G2O; } in
              let {
                g1_s3G2R [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [b1_s3G2M f_s3G2P g_s3G2Q] \r [x34_s3G2S]
                        let {
                          sat_s3G2V [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [f_s3G2P g_s3G2Q x34_s3G2S] \u []
                                  let {
                                    sat_s3G2T [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [g_s3G2Q x34_s3G2S] \u [] g_s3G2Q x34_s3G2S; } in
                                  let {
                                    sat_s3G2U [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        CCCS :! [GHC.Show.showSpace1 sat_s3G2T];
                                  } in  f_s3G2P sat_s3G2U; } in
                        let {
                          sat_s3G2W [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.showSpace1 sat_s3G2V];
                        } in  GHC.Show.showList__ GHC.Show.$fShowInt1 b1_s3G2M sat_s3G2W;
              } in 
                case >=# [ww_s3G25 11#] of {
                  __DEFAULT ->
                      let {
                        sat_s3G30 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [g1_s3G2R] \r [x34_s3G2Y]
                                let {
                                  sat_s3G2Z [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [g1_s3G2R x34_s3G2Y] \s [] g1_s3G2R x34_s3G2Y;
                                } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme8 sat_s3G2Z;
                      } in  sat_s3G30;
                  1# ->
                      let {
                        sat_s3G35 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [g1_s3G2R] \r [x34_s3G31]
                                let {
                                  sat_s3G34 [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [g1_s3G2R x34_s3G31] \u []
                                          let {
                                            sat_s3G33 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [g1_s3G2R x34_s3G31] \s []
                                                    let {
                                                      sat_s3G32 [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          CCCS :! [GHC.Show.$fShow(,)2 x34_s3G31];
                                                    } in  g1_s3G2R sat_s3G32;
                                          } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme8 sat_s3G33;
                                } in  : [GHC.Show.$fShow(,)4 sat_s3G34];
                      } in  sat_s3G35;
                };
        };

Text.Read.Lex.$fShowNumber_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> Text.Read.Lex.Number -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [w2_s3G36 w3_s3G37]
        case w2_s3G36 of {
          GHC.Types.I# ww1_s3G39 [Occ=Once] ->
              Text.Read.Lex.$w$cshowsPrec ww1_s3G39 w3_s3G37;
        };

Text.Read.Lex.$fShowLexeme2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Text.Read.Lex.$fShowNumber_$cshow
  :: Text.Read.Lex.Number -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x34_s3G3a]
        Text.Read.Lex.$w$cshowsPrec 0# x34_s3G3a GHC.Types.[];

Text.Read.Lex.$fShowNumber1
  :: Text.Read.Lex.Number -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w2_s3G3b] Text.Read.Lex.$w$cshowsPrec 0# w2_s3G3b;

Text.Read.Lex.$fShowNumber_$cshowList
  :: [Text.Read.Lex.Number] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s3G3c s_s3G3d]
        GHC.Show.showList__ Text.Read.Lex.$fShowNumber1 ls_s3G3c s_s3G3d;

Text.Read.Lex.$fShowNumber [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Text.Read.Lex.Number
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Text.Read.Lex.$fShowNumber_$cshowsPrec
                                    Text.Read.Lex.$fShowNumber_$cshow
                                    Text.Read.Lex.$fShowNumber_$cshowList];

Text.Read.Lex.$fShowLexeme7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Number "#;

Text.Read.Lex.$fShowLexeme6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.$fShowLexeme7;

Text.Read.Lex.$fShowLexeme5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EOF"#;

Text.Read.Lex.$fShowLexeme4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.$fShowLexeme5;

Text.Read.Lex.$fShowLexeme3 :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ Text.Read.Lex.$fShowLexeme4 eta_B1;

Text.Read.Lex.$fShowLexeme16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Char "#;

Text.Read.Lex.$fShowLexeme15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "String "#;

Text.Read.Lex.$fShowLexeme14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Punc "#;

Text.Read.Lex.$fShowLexeme13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Ident "#;

Text.Read.Lex.$fShowLexeme12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Symbol "#;

Text.Read.Lex.$fShowLexeme_$cshowsPrec
  :: GHC.Types.Int -> Text.Read.Lex.Lexeme -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [a_s3G3e ds_s3G3f]
        case ds_s3G3f of {
          Text.Read.Lex.Char b1_s3G3h [Occ=OnceL*!] ->
              case a_s3G3e of {
                GHC.Types.I# x34_s3G3j [Occ=Once] ->
                    case >=# [x34_s3G3j 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3G3p [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G3h] \r [x35_s3G3l]
                                    let {
                                      sat_s3G3o [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G3h x35_s3G3l] \u []
                                              case b1_s3G3h of {
                                                GHC.Types.C# ww1_s3G3n [Occ=Once] ->
                                                    GHC.Show.$w$cshowsPrec3 ww1_s3G3n x35_s3G3l;
                                              };
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme16 sat_s3G3o;
                          } in  sat_s3G3p;
                      1# ->
                          let {
                            sat_s3G3w [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G3h] \r [x35_s3G3q]
                                    let {
                                      sat_s3G3v [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G3h x35_s3G3q] \u []
                                              let {
                                                sat_s3G3u [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3G3h x35_s3G3q] \u []
                                                        case b1_s3G3h of {
                                                          GHC.Types.C# ww1_s3G3s [Occ=Once] ->
                                                              let {
                                                                sat_s3G3t [Occ=Once]
                                                                  :: GHC.Base.String
                                                                [LclId] =
                                                                    CCCS :! [GHC.Show.$fShow(,)2
                                                                             x35_s3G3q];
                                                              } in 
                                                                GHC.Show.$w$cshowsPrec3
                                                                    ww1_s3G3s sat_s3G3t;
                                                        };
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme16 sat_s3G3u;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3G3v];
                          } in  sat_s3G3w;
                    };
              };
          Text.Read.Lex.String b1_s3G3x [Occ=OnceL*] ->
              case a_s3G3e of {
                GHC.Types.I# x34_s3G3z [Occ=Once] ->
                    case >=# [x34_s3G3z 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3G3F [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G3x] \r [x35_s3G3B]
                                    let {
                                      sat_s3G3D [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G3x x35_s3G3B] \u []
                                              let {
                                                sat_s3G3C [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3G3B];
                                              } in  GHC.Show.showLitString b1_s3G3x sat_s3G3C; } in
                                    let {
                                      sat_s3G3E [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3G3D];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme15 sat_s3G3E;
                          } in  sat_s3G3F;
                      1# ->
                          let {
                            sat_s3G3M [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G3x] \r [x35_s3G3G]
                                    let {
                                      sat_s3G3L [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G3x x35_s3G3G] \u []
                                              let {
                                                sat_s3G3J [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3G3x x35_s3G3G] \u []
                                                        let {
                                                          sat_s3G3H [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3G3G]; } in
                                                        let {
                                                          sat_s3G3I [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3G3H];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3G3x sat_s3G3I; } in
                                              let {
                                                sat_s3G3K [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G3J];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme15 sat_s3G3K;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3G3L];
                          } in  sat_s3G3M;
                    };
              };
          Text.Read.Lex.Punc b1_s3G3N [Occ=OnceL*] ->
              case a_s3G3e of {
                GHC.Types.I# x34_s3G3P [Occ=Once] ->
                    case >=# [x34_s3G3P 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3G3V [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G3N] \r [x35_s3G3R]
                                    let {
                                      sat_s3G3T [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G3N x35_s3G3R] \u []
                                              let {
                                                sat_s3G3S [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3G3R];
                                              } in  GHC.Show.showLitString b1_s3G3N sat_s3G3S; } in
                                    let {
                                      sat_s3G3U [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3G3T];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme14 sat_s3G3U;
                          } in  sat_s3G3V;
                      1# ->
                          let {
                            sat_s3G42 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G3N] \r [x35_s3G3W]
                                    let {
                                      sat_s3G41 [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G3N x35_s3G3W] \u []
                                              let {
                                                sat_s3G3Z [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3G3N x35_s3G3W] \u []
                                                        let {
                                                          sat_s3G3X [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3G3W]; } in
                                                        let {
                                                          sat_s3G3Y [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3G3X];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3G3N sat_s3G3Y; } in
                                              let {
                                                sat_s3G40 [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G3Z];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme14 sat_s3G40;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3G41];
                          } in  sat_s3G42;
                    };
              };
          Text.Read.Lex.Ident b1_s3G43 [Occ=OnceL*] ->
              case a_s3G3e of {
                GHC.Types.I# x34_s3G45 [Occ=Once] ->
                    case >=# [x34_s3G45 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3G4b [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G43] \r [x35_s3G47]
                                    let {
                                      sat_s3G49 [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G43 x35_s3G47] \u []
                                              let {
                                                sat_s3G48 [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3G47];
                                              } in  GHC.Show.showLitString b1_s3G43 sat_s3G48; } in
                                    let {
                                      sat_s3G4a [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3G49];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme13 sat_s3G4a;
                          } in  sat_s3G4b;
                      1# ->
                          let {
                            sat_s3G4i [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G43] \r [x35_s3G4c]
                                    let {
                                      sat_s3G4h [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G43 x35_s3G4c] \u []
                                              let {
                                                sat_s3G4f [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3G43 x35_s3G4c] \u []
                                                        let {
                                                          sat_s3G4d [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3G4c]; } in
                                                        let {
                                                          sat_s3G4e [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3G4d];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3G43 sat_s3G4e; } in
                                              let {
                                                sat_s3G4g [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G4f];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme13 sat_s3G4g;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3G4h];
                          } in  sat_s3G4i;
                    };
              };
          Text.Read.Lex.Symbol b1_s3G4j [Occ=OnceL*] ->
              case a_s3G3e of {
                GHC.Types.I# x34_s3G4l [Occ=Once] ->
                    case >=# [x34_s3G4l 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3G4r [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G4j] \r [x35_s3G4n]
                                    let {
                                      sat_s3G4p [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G4j x35_s3G4n] \u []
                                              let {
                                                sat_s3G4o [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3G4n];
                                              } in  GHC.Show.showLitString b1_s3G4j sat_s3G4o; } in
                                    let {
                                      sat_s3G4q [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3G4p];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme12 sat_s3G4q;
                          } in  sat_s3G4r;
                      1# ->
                          let {
                            sat_s3G4y [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G4j] \r [x35_s3G4s]
                                    let {
                                      sat_s3G4x [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G4j x35_s3G4s] \u []
                                              let {
                                                sat_s3G4v [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3G4j x35_s3G4s] \u []
                                                        let {
                                                          sat_s3G4t [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3G4s]; } in
                                                        let {
                                                          sat_s3G4u [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3G4t];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3G4j sat_s3G4u; } in
                                              let {
                                                sat_s3G4w [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G4v];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme12 sat_s3G4w;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3G4x];
                          } in  sat_s3G4y;
                    };
              };
          Text.Read.Lex.Number b1_s3G4z [Occ=Once] ->
              case a_s3G3e of {
                GHC.Types.I# x34_s3G4B [Occ=Once] ->
                    let {
                      g_s3G4C [Occ=OnceL*!, Dmd=<L,C(U)>]
                        :: GHC.Base.String -> GHC.Base.String
                      [LclId] =
                          [b1_s3G4z] \u [] Text.Read.Lex.$w$cshowsPrec 11# b1_s3G4z;
                    } in 
                      case >=# [x34_s3G4B 11#] of {
                        __DEFAULT ->
                            let {
                              sat_s3G4G [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s3G4C] \r [x35_s3G4E]
                                      let {
                                        sat_s3G4F [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s3G4C x35_s3G4E] \s [] g_s3G4C x35_s3G4E;
                                      } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme6 sat_s3G4F;
                            } in  sat_s3G4G;
                        1# ->
                            let {
                              sat_s3G4L [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s3G4C] \r [x35_s3G4H]
                                      let {
                                        sat_s3G4K [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s3G4C x35_s3G4H] \u []
                                                let {
                                                  sat_s3G4J [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [g_s3G4C x35_s3G4H] \s []
                                                          let {
                                                            sat_s3G4I [Occ=Once] :: GHC.Base.String
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)2
                                                                         x35_s3G4H];
                                                          } in  g_s3G4C sat_s3G4I;
                                                } in 
                                                  GHC.Base.++ Text.Read.Lex.$fShowLexeme6 sat_s3G4J;
                                      } in  : [GHC.Show.$fShow(,)4 sat_s3G4K];
                            } in  sat_s3G4L;
                      };
              };
          Text.Read.Lex.EOF -> Text.Read.Lex.$fShowLexeme3;
        };

Text.Read.Lex.$fShowLexeme17 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)3 GHC.Types.[]];

Text.Read.Lex.$fShowLexeme_$cshow
  :: Text.Read.Lex.Lexeme -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x34_s3G4M]
        case x34_s3G4M of {
          Text.Read.Lex.Char b1_s3G4O [Occ=Once!] ->
              let {
                sat_s3G4R [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3G4O] \u []
                        case b1_s3G4O of {
                          GHC.Types.C# ww1_s3G4Q [Occ=Once] ->
                              GHC.Show.$w$cshowsPrec3 ww1_s3G4Q GHC.Types.[];
                        };
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme16 sat_s3G4R;
          Text.Read.Lex.String b1_s3G4S [Occ=Once] ->
              let {
                sat_s3G4T [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3G4S] \u []
                        GHC.Show.showLitString b1_s3G4S Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3G4U [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G4T];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme15 sat_s3G4U;
          Text.Read.Lex.Punc b1_s3G4V [Occ=Once] ->
              let {
                sat_s3G4W [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3G4V] \u []
                        GHC.Show.showLitString b1_s3G4V Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3G4X [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G4W];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme14 sat_s3G4X;
          Text.Read.Lex.Ident b1_s3G4Y [Occ=Once] ->
              let {
                sat_s3G4Z [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3G4Y] \u []
                        GHC.Show.showLitString b1_s3G4Y Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3G50 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G4Z];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme13 sat_s3G50;
          Text.Read.Lex.Symbol b1_s3G51 [Occ=Once] ->
              let {
                sat_s3G52 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3G51] \u []
                        GHC.Show.showLitString b1_s3G51 Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3G53 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G52];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme12 sat_s3G53;
          Text.Read.Lex.Number b1_s3G54 [Occ=Once] ->
              let {
                sat_s3G55 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3G54] \s []
                        Text.Read.Lex.$w$cshowsPrec 11# b1_s3G54 GHC.Types.[];
              } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme6 sat_s3G55;
          Text.Read.Lex.EOF -> Text.Read.Lex.$fShowLexeme4;
        };

Text.Read.Lex.$fShowLexeme1
  :: Text.Read.Lex.Lexeme -> GHC.Show.ShowS
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.Read.Lex.$fShowLexeme_$cshowsPrec
            Text.Read.Lex.$fShowLexeme2 eta_B1;

Text.Read.Lex.$fShowLexeme_$cshowList
  :: [Text.Read.Lex.Lexeme] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s3G56 s_s3G57]
        GHC.Show.showList__ Text.Read.Lex.$fShowLexeme1 ls_s3G56 s_s3G57;

Text.Read.Lex.$fShowLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Text.Read.Lex.Lexeme
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Text.Read.Lex.$fShowLexeme_$cshowsPrec
                                    Text.Read.Lex.$fShowLexeme_$cshow
                                    Text.Read.Lex.$fShowLexeme_$cshowList];

Text.Read.Lex.isSymbolChar4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ",;()[]{}`"#;

Text.Read.Lex.isSymbolChar3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.isSymbolChar4;

Text.Read.Lex.isSymbolChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'\""#;

Text.Read.Lex.isSymbolChar1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.isSymbolChar2;

Text.Read.Lex.isSymbolChar :: GHC.Types.Char -> GHC.Types.Bool
[GblId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [c_s3G58]
        case
            GHC.List.elem
                GHC.Classes.$fEqChar c_s3G58 Text.Read.Lex.isSymbolChar3
        of
        { GHC.Types.False ->
              case c_s3G58 of ww_s3G5a {
                GHC.Types.C# ww1_s3G5b ->
                    case GHC.Unicode.$wgeneralCategory ww1_s3G5b of {
                      __DEFAULT -> GHC.Types.False [];
                      GHC.Unicode.ConnectorPunctuation ->
                          case ww1_s3G5b of {
                            __DEFAULT -> GHC.Types.True [];
                            '_'# -> GHC.Types.False [];
                          };
                      GHC.Unicode.DashPunctuation -> GHC.Types.True [];
                      GHC.Unicode.OtherPunctuation ->
                          case
                              GHC.List.elem
                                  GHC.Classes.$fEqChar ww_s3G5a Text.Read.Lex.isSymbolChar1
                          of
                          { GHC.Types.False -> GHC.Types.True [];
                            GHC.Types.True -> GHC.Types.False [];
                          };
                      GHC.Unicode.MathSymbol -> GHC.Types.True [];
                      GHC.Unicode.CurrencySymbol -> GHC.Types.True [];
                      GHC.Unicode.ModifierSymbol -> GHC.Types.True [];
                      GHC.Unicode.OtherSymbol -> GHC.Types.True [];
                    };
              };
          GHC.Types.True -> GHC.Types.False [];
        };

lvl_r3y8T :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "_'"#;

lvl1_r3y8U :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_r3y8T;

$wisIdfChar_r3y8V :: GHC.Prim.Char# -> GHC.Types.Bool
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [ww_s3G5f]
        case ord# [ww_s3G5f] of sat_s3G5h {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_s3G5h GHC.Prim.realWorld#] of {
                (#,#) _ [Occ=Dead] ds1_s3G5k [Occ=Once!] ->
                    case ds1_s3G5k of {
                      __DEFAULT -> GHC.Types.True [];
                      0# ->
                          let {
                            sat_s3G5m [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [ww_s3G5f];
                          } in  GHC.List.elem GHC.Classes.$fEqChar sat_s3G5m lvl1_r3y8U;
                    };
              };
        };

isIdfChar_r3y8W :: GHC.Types.Char -> GHC.Types.Bool
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w2_s3G5n]
        case w2_s3G5n of {
          GHC.Types.C# ww1_s3G5p [Occ=Once] -> $wisIdfChar_r3y8V ww1_s3G5p;
        };

reserved_ops_r3y8X :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ".."#;

reserved_ops1_r3y8Y :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops_r3y8X;

reserved_ops2_r3y8Z :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "::"#;

reserved_ops3_r3y90 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops2_r3y8Z;

reserved_ops4_r3y91 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "="#;

reserved_ops5_r3y92 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops4_r3y91;

reserved_ops6_r3y93 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\"#;

reserved_ops7_r3y94 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops6_r3y93;

reserved_ops8_r3y95 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "|"#;

reserved_ops9_r3y96 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops8_r3y95;

reserved_ops10_r3y97 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<-"#;

reserved_ops11_r3y98 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops10_r3y97;

reserved_ops12_r3y99 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "->"#;

reserved_ops13_r3y9a :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops12_r3y99;

reserved_ops14_r3y9b :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "@"#;

reserved_ops15_r3y9c :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops14_r3y9b;

reserved_ops16_r3y9d :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "~"#;

reserved_ops17_r3y9e :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops16_r3y9d;

reserved_ops18_r3y9f :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "=>"#;

reserved_ops19_r3y9g :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops18_r3y9f;

reserved_ops20_r3y9h :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops19_r3y9g GHC.Types.[]];

reserved_ops21_r3y9i :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops17_r3y9e reserved_ops20_r3y9h];

reserved_ops22_r3y9j :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops15_r3y9c reserved_ops21_r3y9i];

reserved_ops23_r3y9k :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops13_r3y9a reserved_ops22_r3y9j];

reserved_ops24_r3y9l :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops11_r3y98 reserved_ops23_r3y9k];

reserved_ops25_r3y9m :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops9_r3y96 reserved_ops24_r3y9l];

reserved_ops26_r3y9n :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops7_r3y94 reserved_ops25_r3y9m];

reserved_ops27_r3y9o :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops5_r3y92 reserved_ops26_r3y9n];

reserved_ops28_r3y9p :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops3_r3y90 reserved_ops27_r3y9o];

reserved_ops29_r3y9q :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops1_r3y8Y reserved_ops28_r3y9p];

Text.Read.Lex.$fEqLexeme_$c==1
  :: Text.Read.Lex.Number -> Text.Read.Lex.Number -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3G5q ds1_s3G5r]
        case ds_s3G5q of {
          Text.Read.Lex.MkNumber a3_s3G5t [Occ=Once!] a4_s3G5u [Occ=Once] ->
              case ds1_s3G5r of {
                Text.Read.Lex.MkNumber b1_s3G5w [Occ=Once!] b2_s3G5x [Occ=Once] ->
                    case a3_s3G5t of {
                      GHC.Types.I# x34_s3G5z [Occ=Once] ->
                          case b1_s3G5w of {
                            GHC.Types.I# y_s3G5B [Occ=Once] ->
                                case ==# [x34_s3G5z y_s3G5B] of {
                                  __DEFAULT -> GHC.Types.False [];
                                  1# -> GHC.Classes.$fEq[]_$s$c== a4_s3G5u b2_s3G5x;
                                };
                          };
                    };
                Text.Read.Lex.MkDecimal _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          Text.Read.Lex.MkDecimal a3_s3G5G [Occ=Once]
                                  a4_s3G5H [Occ=Once!]
                                  a5_s3G5I [Occ=Once!] ->
              case ds1_s3G5r of {
                Text.Read.Lex.MkNumber _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.False [];
                Text.Read.Lex.MkDecimal b1_s3G5M [Occ=Once]
                                        b2_s3G5N [Occ=Once*!]
                                        b3_s3G5O [Occ=Once*!] ->
                    case GHC.Classes.$fEq[]_$s$c== a3_s3G5G b1_s3G5M of {
                      GHC.Types.False -> GHC.Types.False [];
                      GHC.Types.True ->
                          let-no-escape {
                            $j_s3G5Q [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Types.Bool
                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                [a5_s3G5I b3_s3G5O] \r []
                                    case a5_s3G5I of {
                                      GHC.Base.Nothing ->
                                          case b3_s3G5O of {
                                            GHC.Base.Nothing -> GHC.Types.True [];
                                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                                          };
                                      GHC.Base.Just a6_s3G5U [Occ=Once] ->
                                          case b3_s3G5O of {
                                            GHC.Base.Nothing -> GHC.Types.False [];
                                            GHC.Base.Just b4_s3G5W [Occ=Once] ->
                                                GHC.Integer.Type.eqInteger a6_s3G5U b4_s3G5W;
                                          };
                                    };
                          } in 
                            case a4_s3G5H of {
                              GHC.Base.Nothing ->
                                  case b2_s3G5N of {
                                    GHC.Base.Nothing -> $j_s3G5Q;
                                    GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                                  };
                              GHC.Base.Just a6_s3G60 [Occ=Once] ->
                                  case b2_s3G5N of {
                                    GHC.Base.Nothing -> GHC.Types.False [];
                                    GHC.Base.Just b4_s3G62 [Occ=Once] ->
                                        case GHC.Classes.$fEq[]_$s$c== a6_s3G60 b4_s3G62 of {
                                          GHC.Types.False -> GHC.Types.False [];
                                          GHC.Types.True -> $j_s3G5Q;
                                        };
                                  };
                            };
                    };
              };
        };

Text.Read.Lex.$fEqNumber_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Text.Read.Lex.Number -> Text.Read.Lex.Number -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s3G64 eta1_s3G65]
        case Text.Read.Lex.$fEqLexeme_$c==1 eta_s3G64 eta1_s3G65 of {
          GHC.Types.False -> GHC.Types.True [];
          GHC.Types.True -> GHC.Types.False [];
        };

Text.Read.Lex.$fEqNumber [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Text.Read.Lex.Number
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Text.Read.Lex.$fEqLexeme_$c==1
                                     Text.Read.Lex.$fEqNumber_$c/=];

Text.Read.Lex.$fEqLexeme_$c==
  :: Text.Read.Lex.Lexeme -> Text.Read.Lex.Lexeme -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3G67 ds1_s3G68]
        case ds_s3G67 of {
          Text.Read.Lex.Char a3_s3G6a [Occ=Once] ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Char b1_s3G6c [Occ=Once] ->
                    GHC.Classes.eqChar a3_s3G6a b1_s3G6c;
              };
          Text.Read.Lex.String a3_s3G6d [Occ=Once] ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.String b1_s3G6f [Occ=Once] ->
                    GHC.Base.eqString a3_s3G6d b1_s3G6f;
              };
          Text.Read.Lex.Punc a3_s3G6g [Occ=Once] ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Punc b1_s3G6i [Occ=Once] ->
                    GHC.Base.eqString a3_s3G6g b1_s3G6i;
              };
          Text.Read.Lex.Ident a3_s3G6j [Occ=Once] ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Ident b1_s3G6l [Occ=Once] ->
                    GHC.Base.eqString a3_s3G6j b1_s3G6l;
              };
          Text.Read.Lex.Symbol a3_s3G6m [Occ=Once] ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Symbol b1_s3G6o [Occ=Once] ->
                    GHC.Base.eqString a3_s3G6m b1_s3G6o;
              };
          Text.Read.Lex.Number a3_s3G6p [Occ=Once] ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Number b1_s3G6r [Occ=Once] ->
                    Text.Read.Lex.$fEqLexeme_$c==1 a3_s3G6p b1_s3G6r;
              };
          Text.Read.Lex.EOF ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.EOF -> GHC.Types.True [];
              };
        };

Text.Read.Lex.$fEqLexeme_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Text.Read.Lex.Lexeme -> Text.Read.Lex.Lexeme -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s3G6t eta1_s3G6u]
        case Text.Read.Lex.$fEqLexeme_$c== eta_s3G6t eta1_s3G6u of {
          GHC.Types.False -> GHC.Types.True [];
          GHC.Types.True -> GHC.Types.False [];
        };

Text.Read.Lex.$fEqLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Text.Read.Lex.Lexeme
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Text.Read.Lex.$fEqLexeme_$c==
                                     Text.Read.Lex.$fEqLexeme_$c/=];

Text.Read.Lex.numberToFixed2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

lvl2_r3y9r :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "this should not happen"#;

lvl3_r3y9s :: [GHC.Integer.Type.Integer]
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl2_r3y9r of sat_s3G6w {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s3G6w;
        };

combine_r3y9t
  :: GHC.Integer.Type.Integer
     -> [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [b_s3G6x ds_s3G6y]
        case ds_s3G6y of {
          [] -> [] [];
          : d1_s3G6A [Occ=Once] ds1_s3G6B [Occ=Once!] ->
              case ds1_s3G6B of {
                [] -> lvl3_r3y9s;
                : d2_s3G6D [Occ=Once] ds2_s3G6E [Occ=Once] ->
                    case GHC.Integer.Type.timesInteger d1_s3G6A b_s3G6x of sat_s3G6F {
                      __DEFAULT ->
                          case GHC.Integer.Type.plusInteger sat_s3G6F d2_s3G6D of d_s3G6G {
                            __DEFAULT ->
                                let {
                                  sat_s3G6H [Occ=Once] :: [GHC.Integer.Type.Integer]
                                  [LclId] =
                                      [b_s3G6x ds2_s3G6E] \u [] combine_r3y9t b_s3G6x ds2_s3G6E;
                                } in  : [d_s3G6G sat_s3G6H];
                          };
                    };
              };
        };

Text.Read.Lex.numberToFixed_go [Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Types.Int
     -> [GHC.Integer.Type.Integer]
     -> GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3G6I ds1_s3G6J ds2_s3G6K]
        case ds2_s3G6K of wild_s3G6L {
          [] -> Text.Read.Lex.numberToFixed2;
          : d_s3G6M [Occ=Once] ds3_s3G6N [Occ=Once!] ->
              case ds3_s3G6N of {
                [] -> d_s3G6M;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    case ds1_s3G6J of {
                      GHC.Types.I# x34_s3G6S ->
                          case ># [x34_s3G6S 40#] of {
                            __DEFAULT ->
                                let-no-escape {
                                  go_s3G6U [Occ=LoopBreakerT[2]]
                                    :: GHC.Integer.Type.Integer
                                       -> [GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer
                                  [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
                                      sat-only [ds_s3G6I go_s3G6U] \r [r_s3G6V ds4_s3G6W]
                                          case ds4_s3G6W of {
                                            [] -> r_s3G6V;
                                            : d1_s3G6Y [Occ=Once] ds5_s3G6Z [Occ=Once] ->
                                                case
                                                    GHC.Integer.Type.timesInteger r_s3G6V ds_s3G6I
                                                of
                                                sat_s3G70
                                                { __DEFAULT ->
                                                      case
                                                          GHC.Integer.Type.plusInteger
                                                              sat_s3G70 d1_s3G6Y
                                                      of
                                                      r'_s3G71
                                                      { __DEFAULT -> go_s3G6U r'_s3G71 ds5_s3G6Z;
                                                      };
                                                };
                                          };
                                } in  go_s3G6U Text.Read.Lex.numberToFixed2 wild_s3G6L;
                            1# ->
                                case GHC.Integer.Type.timesInteger ds_s3G6I ds_s3G6I of b'_s3G72 {
                                  __DEFAULT ->
                                      case remInt# [x34_s3G6S 2#] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s3G77 [Occ=Once] :: [GHC.Integer.Type.Integer]
                                              [LclId] =
                                                  CCCS :! [Text.Read.Lex.numberToFixed2 wild_s3G6L];
                                            } in 
                                              case combine_r3y9t ds_s3G6I sat_s3G77 of sat_s3G78 {
                                                __DEFAULT ->
                                                    case +# [x34_s3G6S 1#] of sat_s3G74 {
                                                      __DEFAULT ->
                                                          case
                                                              quotInt# [sat_s3G74 2#]
                                                          of
                                                          sat_s3G75
                                                          { __DEFAULT ->
                                                                let {
                                                                  sat_s3G76 [Occ=Once]
                                                                    :: GHC.Types.Int
                                                                  [LclId] =
                                                                      CCCS GHC.Types.I#! [sat_s3G75];
                                                                } in 
                                                                  Text.Read.Lex.numberToFixed_go
                                                                      b'_s3G72 sat_s3G76 sat_s3G78;
                                                          };
                                                    };
                                              };
                                        0# ->
                                            case combine_r3y9t ds_s3G6I wild_s3G6L of sat_s3G7c {
                                              __DEFAULT ->
                                                  case +# [x34_s3G6S 1#] of sat_s3G79 {
                                                    __DEFAULT ->
                                                        case quotInt# [sat_s3G79 2#] of sat_s3G7a {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s3G7b [Occ=Once]
                                                                  :: GHC.Types.Int
                                                                [LclId] =
                                                                    CCCS GHC.Types.I#! [sat_s3G7a];
                                                              } in 
                                                                Text.Read.Lex.numberToFixed_go
                                                                    b'_s3G72 sat_s3G7b sat_s3G7c;
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Text.Read.Lex.valInteger
  :: GHC.Integer.Type.Integer
     -> Text.Read.Lex.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [b0_s3G7d ds0_s3G7e]
        case
            GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger ds0_s3G7e
        of
        sat_s3G7h
        { __DEFAULT ->
              let {
                sat_s3G7g [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                [LclId] =
                    [ds0_s3G7e] \s []
                        case GHC.List.$wlenAcc ds0_s3G7e 0# of ww2_s3G7f {
                          __DEFAULT -> GHC.Types.I# [ww2_s3G7f];
                        };
              } in  Text.Read.Lex.numberToFixed_go b0_s3G7d sat_s3G7g sat_s3G7h;
        };

Text.Read.Lex.$w$sreadIntP [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>,
 Unf=OtherCon []] =
    [] \r [w2_s3G7i w3_s3G7j w4_s3G7k w5_s3G7l]
        let {
          sat_s3G7y [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_s3xhH
          [LclId] =
              [w2_s3G7i w3_s3G7j w4_s3G7k w5_s3G7l] \r [a_s3G7m]
                  case w3_s3G7j a_s3G7m of {
                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                    GHC.Types.True ->
                        let {
                          sat_s3G7v [Occ=Once]
                            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xhH
                          [LclId] =
                              [w2_s3G7i w4_s3G7k w5_s3G7l a_s3G7m] \r [a3_s3G7o]
                                  let {
                                    sat_s3G7u [Occ=Once] :: GHC.Integer.Type.Integer
                                    [LclId] =
                                        [w2_s3G7i w4_s3G7k a_s3G7m a3_s3G7o] \u []
                                            let {
                                              sat_s3G7q [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  CCCS :! [a_s3G7m a3_s3G7o];
                                            } in 
                                              case
                                                  GHC.Base.map w4_s3G7k sat_s3G7q
                                              of
                                              ds0_s3G7p [Dmd=<S,U>]
                                              { __DEFAULT ->
                                                    case
                                                        GHC.Base.map
                                                            GHC.Real.$fIntegralInt_$ctoInteger
                                                            ds0_s3G7p
                                                    of
                                                    sat_s3G7t
                                                    { __DEFAULT ->
                                                          let {
                                                            sat_s3G7s [Occ=Once, Dmd=<L,1*U(U)>]
                                                              :: GHC.Types.Int
                                                            [LclId] =
                                                                [ds0_s3G7p] \s []
                                                                    case
                                                                        GHC.List.$wlenAcc
                                                                            ds0_s3G7p 0#
                                                                    of
                                                                    ww2_s3G7r
                                                                    { __DEFAULT ->
                                                                          GHC.Types.I# [ww2_s3G7r];
                                                                    };
                                                          } in 
                                                            Text.Read.Lex.numberToFixed_go
                                                                w2_s3G7i sat_s3G7s sat_s3G7t;
                                                    };
                                              };
                                  } in  w5_s3G7l sat_s3G7u;
                        } in 
                          case Text.ParserCombinators.ReadP.$wmunch w3_s3G7j sat_s3G7v of {
                            Unit# ww1_s3G7x [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww1_s3G7x];
                          };
                  };
        } in  Unit# [sat_s3G7y];

Text.Read.Lex.readIntP1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [w2_s3G7z w3_s3G7A w4_s3G7B w5_s3G7C]
        case
            Text.Read.Lex.$w$sreadIntP w2_s3G7z w3_s3G7A w4_s3G7B w5_s3G7C
        of
        { Unit# ww1_s3G7E [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3G7E];
        };

Text.Read.Lex.readIntP_$sreadIntP
  :: GHC.Integer.Type.Integer
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Read.Lex.readIntP1 eta_B4 eta_B3 eta_B2 eta_B1;

Text.Read.Lex.$wreadIntP [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Num.Num a =>
     a
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>,
 Unf=OtherCon []] =
    [] \r [w2_s3G7F w3_s3G7G w4_s3G7H w5_s3G7I w6_s3G7J]
        let {
          lvl116_s3G7K [Occ=OnceL] :: a_s3xhP
          [LclId] =
              [w2_s3G7F] \u []
                  GHC.Num.fromInteger w2_s3G7F Text.Read.Lex.numberToFixed2; } in
        let {
          sat_s3G86 [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_s3xhU
          [LclId] =
              [w2_s3G7F
               w3_s3G7G
               w4_s3G7H
               w5_s3G7I
               w6_s3G7J
               lvl116_s3G7K] \r [a3_s3G7L]
                  case w4_s3G7H a3_s3G7L of {
                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                    GHC.Types.True ->
                        let {
                          sat_s3G83 [Occ=Once]
                            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xhU
                          [LclId] =
                              [w2_s3G7F
                               w3_s3G7G
                               w5_s3G7I
                               w6_s3G7J
                               lvl116_s3G7K
                               a3_s3G7L] \r [a4_s3G7N]
                                  let {
                                    sat_s3G82 [Occ=Once] :: a_s3xhP
                                    [LclId] =
                                        [w2_s3G7F
                                         w3_s3G7G
                                         w5_s3G7I
                                         lvl116_s3G7K
                                         a3_s3G7L
                                         a4_s3G7N] \u []
                                            let {
                                              sat_s3G80 [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  CCCS :! [a3_s3G7L a4_s3G7N];
                                            } in 
                                              case GHC.Base.map w5_s3G7I sat_s3G80 of sat_s3G81 {
                                                __DEFAULT ->
                                                    let-no-escape {
                                                      go_s3G7O [Occ=LoopBreakerT[2]]
                                                        :: a_s3xhP -> [GHC.Types.Int] -> a_s3xhP
                                                      [LclId[JoinId(2)],
                                                       Arity=2,
                                                       Str=<L,U><S,1*U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [w2_s3G7F
                                                                    w3_s3G7G
                                                                    go_s3G7O] \r [r_s3G7P ds_s3G7Q]
                                                              case ds_s3G7Q of {
                                                                [] -> r_s3G7P;
                                                                : d_s3G7S [Occ=Once!]
                                                                  ds1_s3G7T [Occ=Once] ->
                                                                    let {
                                                                      sat_s3G7Y [Occ=Once]
                                                                        :: a_s3xhP
                                                                      [LclId] =
                                                                          [w2_s3G7F d_s3G7S] \u []
                                                                              let {
                                                                                sat_s3G7X [Occ=Once]
                                                                                  :: GHC.Integer.Type.Integer
                                                                                [LclId] =
                                                                                    [d_s3G7S] \u []
                                                                                        case
                                                                                            d_s3G7S
                                                                                        of
                                                                                        { GHC.Types.I# i_s3G7W [Occ=Once] ->
                                                                                              GHC.Integer.Type.smallInteger
                                                                                                  i_s3G7W;
                                                                                        };
                                                                              } in 
                                                                                GHC.Num.fromInteger
                                                                                    w2_s3G7F
                                                                                    sat_s3G7X; } in
                                                                    let {
                                                                      sat_s3G7U [Occ=Once]
                                                                        :: a_s3xhP
                                                                      [LclId] =
                                                                          [w2_s3G7F
                                                                           w3_s3G7G
                                                                           r_s3G7P] \u []
                                                                              GHC.Num.*
                                                                                  w2_s3G7F
                                                                                  r_s3G7P
                                                                                  w3_s3G7G;
                                                                    } in 
                                                                      case
                                                                          GHC.Num.+
                                                                              w2_s3G7F
                                                                              sat_s3G7U
                                                                              sat_s3G7Y
                                                                      of
                                                                      r'_s3G7Z
                                                                      { __DEFAULT ->
                                                                            go_s3G7O
                                                                                r'_s3G7Z ds1_s3G7T;
                                                                      };
                                                              };
                                                    } in  go_s3G7O lvl116_s3G7K sat_s3G81;
                                              };
                                  } in  w6_s3G7J sat_s3G82;
                        } in 
                          case Text.ParserCombinators.ReadP.$wmunch w4_s3G7H sat_s3G83 of {
                            Unit# ww1_s3G85 [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww1_s3G85];
                          };
                  };
        } in  Unit# [sat_s3G86];

Text.Read.Lex.readIntP2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Num.Num a =>
     a
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [w2_s3G87 w3_s3G88 w4_s3G89 w5_s3G8a w6_s3G8b]
        case
            Text.Read.Lex.$wreadIntP
                w2_s3G87 w3_s3G88 w4_s3G89 w5_s3G8a w6_s3G8b
        of
        { Unit# ww1_s3G8d [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3G8d];
        };

Text.Read.Lex.readIntP
  :: forall a.
     GHC.Num.Num a =>
     a
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Read.Lex.readIntP2 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

sat_s3G8e :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

sat_s3G8f :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3G8e GHC.Types.[]];

Text.Read.Lex.numberToFixed1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3G8f;

Text.Read.Lex.numberToInteger
  :: Text.Read.Lex.Number -> GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3G8g]
        case ds_s3G8g of {
          Text.Read.Lex.MkNumber base_s3G8i [Occ=Once] iPart_s3G8j ->
              let {
                sat_s3G8o [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [base_s3G8i iPart_s3G8j] \u []
                        case
                            GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger iPart_s3G8j
                        of
                        sat_s3G8n
                        { __DEFAULT ->
                              let {
                                sat_s3G8m [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                                [LclId] =
                                    [iPart_s3G8j] \s []
                                        case GHC.List.$wlenAcc iPart_s3G8j 0# of ww2_s3G8l {
                                          __DEFAULT -> GHC.Types.I# [ww2_s3G8l];
                                        }; } in
                              let {
                                sat_s3G8k [Occ=Once] :: GHC.Integer.Type.Integer
                                [LclId] =
                                    [base_s3G8i] \u []
                                        GHC.Real.$fIntegralInt_$ctoInteger base_s3G8i;
                              } in  Text.Read.Lex.numberToFixed_go sat_s3G8k sat_s3G8m sat_s3G8n;
                        };
              } in  GHC.Base.Just [sat_s3G8o];
          Text.Read.Lex.MkDecimal iPart_s3G8p [Occ=Once]
                                  ds1_s3G8q [Occ=Once!]
                                  ds2_s3G8r [Occ=Once!] ->
              case ds1_s3G8q of {
                GHC.Base.Nothing ->
                    case ds2_s3G8r of {
                      GHC.Base.Nothing ->
                          let {
                            sat_s3G8u [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [iPart_s3G8p] \u []
                                    Text.Read.Lex.valInteger
                                        Text.Read.Lex.numberToFixed1 iPart_s3G8p;
                          } in  GHC.Base.Just [sat_s3G8u];
                      GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
                    };
                GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
              };
        };

sat_s3G8x :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s3G8y :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3G8x GHC.Types.[]];

lvl4_r3y9u :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3G8y;

$wfracExp_r3y9v
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Text.Read.Lex.Digits
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=3, Str=<S,U><S,1*U><S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3G8z w3_s3G8A w4_s3G8B]
        case w4_s3G8B of {
          [] ->
              case
                  GHC.Integer.Type.ltInteger# w2_s3G8z Text.Read.Lex.numberToFixed2
              of
              { __DEFAULT ->
                    case
                        GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 w2_s3G8z
                    of
                    sat_s3G8E
                    { __DEFAULT ->
                          case GHC.Integer.Type.timesInteger w3_s3G8A sat_s3G8E of dt_s3G8F {
                            __DEFAULT -> (#,#) [dt_s3G8F GHC.Real.$fEnumRatio1];
                          };
                    };
                1# ->
                    case GHC.Integer.Type.negateInteger w2_s3G8z of sat_s3G8H {
                      __DEFAULT ->
                          case
                              GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 sat_s3G8H
                          of
                          ww1_s3G8G [Dmd=<S,U>]
                          { __DEFAULT ->
                                case GHC.Integer.Type.absInteger ww1_s3G8G of sat_s3G8K {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.signumInteger ww1_s3G8G of sat_s3G8I {
                                        __DEFAULT ->
                                            case
                                                GHC.Integer.Type.timesInteger w3_s3G8A sat_s3G8I
                                            of
                                            sat_s3G8J
                                            { __DEFAULT -> GHC.Real.$w$sreduce sat_s3G8J sat_s3G8K;
                                            };
                                      };
                                };
                          };
                    };
              };
          : d_s3G8L [Occ=Once!] ds_s3G8M [Occ=Once] ->
              case
                  GHC.Integer.Type.minusInteger w2_s3G8z lvl4_r3y9u
              of
              exp'_s3G8N
              { __DEFAULT ->
                    case d_s3G8L of {
                      GHC.Types.I# i_s3G8P [Occ=Once] ->
                          case GHC.Integer.Type.smallInteger i_s3G8P of sat_s3G8R {
                            __DEFAULT ->
                                case
                                    GHC.Integer.Type.timesInteger
                                        w3_s3G8A Text.Read.Lex.numberToFixed1
                                of
                                sat_s3G8Q
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.plusInteger sat_s3G8Q sat_s3G8R
                                      of
                                      mant'_s3G8S
                                      { __DEFAULT ->
                                            $wfracExp_r3y9v exp'_s3G8N mant'_s3G8S ds_s3G8M;
                                      };
                                };
                          };
                    };
              };
        };

Text.Read.Lex.numberToFixed_integerTake [Occ=LoopBreaker]
  :: forall a. GHC.Integer.Type.Integer -> [a] -> [a]
[GblId, Arity=2, Str=<S,U><L,1*U>, Unf=OtherCon []] =
    [] \r [n_s3G8T ds_s3G8U]
        case
            GHC.Integer.Type.leInteger# n_s3G8T Text.Read.Lex.numberToFixed2
        of
        { __DEFAULT ->
              case ds_s3G8U of {
                [] -> [] [];
                : x34_s3G8X [Occ=Once] xs_s3G8Y [Occ=Once] ->
                    let {
                      sat_s3G90 [Occ=Once] :: [a_a3va7]
                      [LclId] =
                          [n_s3G8T xs_s3G8Y] \u []
                              case
                                  GHC.Integer.Type.minusInteger n_s3G8T lvl4_r3y9u
                              of
                              sat_s3G8Z
                              { __DEFAULT ->
                                    Text.Read.Lex.numberToFixed_integerTake sat_s3G8Z xs_s3G8Y;
                              };
                    } in  : [x34_s3G8X sat_s3G90];
              };
          1# -> [] [];
        };

Text.Read.Lex.numberToFixed_xs [Occ=LoopBreaker] :: [GHC.Types.Int]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Read.Lex.$fShowLexeme2
                      Text.Read.Lex.numberToFixed_xs];

Text.Read.Lex.numberToFixed
  :: GHC.Integer.Type.Integer
     -> Text.Read.Lex.Number
     -> GHC.Base.Maybe
          (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3G91 ds1_s3G92]
        case ds1_s3G92 of {
          Text.Read.Lex.MkNumber base_s3G94 [Occ=Once] iPart_s3G95 ->
              let {
                sat_s3G9a [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [base_s3G94 iPart_s3G95] \u []
                        case
                            GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger iPart_s3G95
                        of
                        sat_s3G99
                        { __DEFAULT ->
                              let {
                                sat_s3G98 [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                                [LclId] =
                                    [iPart_s3G95] \s []
                                        case GHC.List.$wlenAcc iPart_s3G95 0# of ww2_s3G97 {
                                          __DEFAULT -> GHC.Types.I# [ww2_s3G97];
                                        }; } in
                              let {
                                sat_s3G96 [Occ=Once] :: GHC.Integer.Type.Integer
                                [LclId] =
                                    [base_s3G94] \u []
                                        GHC.Real.$fIntegralInt_$ctoInteger base_s3G94;
                              } in  Text.Read.Lex.numberToFixed_go sat_s3G96 sat_s3G98 sat_s3G99;
                        }; } in
              let {
                sat_s3G9b [Occ=Once]
                  :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                [LclId] =
                    CCCS (,)! [sat_s3G9a Text.Read.Lex.numberToFixed2];
              } in  GHC.Base.Just [sat_s3G9b];
          Text.Read.Lex.MkDecimal iPart_s3G9c [Occ=Once*]
                                  ds2_s3G9d [Occ=Once!]
                                  ds3_s3G9e [Occ=Once*!] ->
              case ds2_s3G9d of {
                GHC.Base.Nothing ->
                    case ds3_s3G9e of {
                      GHC.Base.Nothing ->
                          let {
                            sat_s3G9h [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [iPart_s3G9c] \u []
                                    Text.Read.Lex.valInteger
                                        Text.Read.Lex.numberToFixed1 iPart_s3G9c; } in
                          let {
                            sat_s3G9i [Occ=Once]
                              :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                            [LclId] =
                                CCCS (,)! [sat_s3G9h Text.Read.Lex.numberToFixed2];
                          } in  GHC.Base.Just [sat_s3G9i];
                      GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
                    };
                GHC.Base.Just fPart_s3G9k [Occ=Once] ->
                    case ds3_s3G9e of {
                      GHC.Base.Nothing ->
                          let {
                            sat_s3G9s [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [ds_s3G91 fPart_s3G9k] \u []
                                    let {
                                      sat_s3G9o [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Int]
                                      [LclId] =
                                          [fPart_s3G9k] \s []
                                              GHC.Base.++
                                                  fPart_s3G9k Text.Read.Lex.numberToFixed_xs;
                                    } in 
                                      case
                                          Text.Read.Lex.numberToFixed_integerTake ds_s3G91 sat_s3G9o
                                      of
                                      ds0_s3G9n [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                GHC.Base.map
                                                    GHC.Real.$fIntegralInt_$ctoInteger ds0_s3G9n
                                            of
                                            sat_s3G9r
                                            { __DEFAULT ->
                                                  let {
                                                    sat_s3G9q [Occ=Once, Dmd=<L,1*U(U)>]
                                                      :: GHC.Types.Int
                                                    [LclId] =
                                                        [ds0_s3G9n] \s []
                                                            case
                                                                GHC.List.$wlenAcc ds0_s3G9n 0#
                                                            of
                                                            ww2_s3G9p
                                                            { __DEFAULT -> GHC.Types.I# [ww2_s3G9p];
                                                            };
                                                  } in 
                                                    Text.Read.Lex.numberToFixed_go
                                                        Text.Read.Lex.numberToFixed1
                                                        sat_s3G9q
                                                        sat_s3G9r;
                                            };
                                      }; } in
                          let {
                            sat_s3G9m [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [iPart_s3G9c] \u []
                                    Text.Read.Lex.valInteger
                                        Text.Read.Lex.numberToFixed1 iPart_s3G9c; } in
                          let {
                            sat_s3G9t [Occ=Once]
                              :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                            [LclId] =
                                CCCS (,)! [sat_s3G9m sat_s3G9s];
                          } in  GHC.Base.Just [sat_s3G9t];
                      GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
                    };
              };
        };

Text.Read.Lex.$wnumberToRational [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Number
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w2_s3G9v]
        case w2_s3G9v of {
          Text.Read.Lex.MkNumber base_s3G9x [Occ=Once!] iPart_s3G9y ->
              case
                  GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger iPart_s3G9y
              of
              sat_s3G9E
              { __DEFAULT ->
                    let {
                      sat_s3G9D [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                      [LclId] =
                          [iPart_s3G9y] \s []
                              case GHC.List.$wlenAcc iPart_s3G9y 0# of ww2_s3G9C {
                                __DEFAULT -> GHC.Types.I# [ww2_s3G9C];
                              }; } in
                    let {
                      sat_s3G9B [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [base_s3G9x] \u []
                              case base_s3G9x of {
                                GHC.Types.I# i_s3G9A [Occ=Once] ->
                                    GHC.Integer.Type.smallInteger i_s3G9A;
                              };
                    } in 
                      case
                          Text.Read.Lex.numberToFixed_go sat_s3G9B sat_s3G9D sat_s3G9E
                      of
                      sat_s3G9F
                      { __DEFAULT ->
                            case
                                GHC.Integer.Type.timesInteger sat_s3G9F lvl4_r3y9u
                            of
                            sat_s3G9G
                            { __DEFAULT -> GHC.Real.$w$sreduce sat_s3G9G lvl4_r3y9u;
                            };
                      };
              };
          Text.Read.Lex.MkDecimal iPart_s3G9H [Occ=Once*]
                                  mFPart_s3G9I [Occ=Once!]
                                  mExp_s3G9J [Occ=Once*!] ->
              case mFPart_s3G9I of {
                GHC.Base.Nothing ->
                    case mExp_s3G9J of {
                      GHC.Base.Nothing ->
                          case
                              Text.Read.Lex.valInteger Text.Read.Lex.numberToFixed1 iPart_s3G9H
                          of
                          sat_s3G9M
                          { __DEFAULT ->
                                case
                                    GHC.Integer.Type.timesInteger sat_s3G9M lvl4_r3y9u
                                of
                                sat_s3G9N
                                { __DEFAULT -> GHC.Real.$w$sreduce sat_s3G9N lvl4_r3y9u;
                                };
                          };
                      GHC.Base.Just exp_s3G9O ->
                          case
                              GHC.Integer.Type.geInteger# exp_s3G9O Text.Read.Lex.numberToFixed2
                          of
                          { __DEFAULT ->
                                case GHC.Integer.Type.negateInteger exp_s3G9O of sat_s3G9R {
                                  __DEFAULT ->
                                      case
                                          GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 sat_s3G9R
                                      of
                                      ww1_s3G9Q [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.absInteger ww1_s3G9Q
                                            of
                                            sat_s3G9V
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.signumInteger ww1_s3G9Q
                                                  of
                                                  sat_s3G9T
                                                  { __DEFAULT ->
                                                        case
                                                            Text.Read.Lex.valInteger
                                                                Text.Read.Lex.numberToFixed1
                                                                iPart_s3G9H
                                                        of
                                                        sat_s3G9S
                                                        { __DEFAULT ->
                                                              case
                                                                  GHC.Integer.Type.timesInteger
                                                                      sat_s3G9S sat_s3G9T
                                                              of
                                                              sat_s3G9U
                                                              { __DEFAULT ->
                                                                    GHC.Real.$w$sreduce
                                                                        sat_s3G9U sat_s3G9V;
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                            1# ->
                                case
                                    GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 exp_s3G9O
                                of
                                sat_s3G9X
                                { __DEFAULT ->
                                      case
                                          Text.Read.Lex.valInteger
                                              Text.Read.Lex.numberToFixed1 iPart_s3G9H
                                      of
                                      sat_s3G9W
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.timesInteger sat_s3G9W sat_s3G9X
                                            of
                                            sat_s3G9Y
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.timesInteger
                                                          sat_s3G9Y lvl4_r3y9u
                                                  of
                                                  sat_s3G9Z
                                                  { __DEFAULT ->
                                                        GHC.Real.$w$sreduce sat_s3G9Z lvl4_r3y9u;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Base.Just fPart_s3Ga0 [Occ=Once*] ->
                    case mExp_s3G9J of {
                      GHC.Base.Nothing ->
                          case
                              Text.Read.Lex.valInteger Text.Read.Lex.numberToFixed1 iPart_s3G9H
                          of
                          sat_s3Ga2
                          { __DEFAULT ->
                                $wfracExp_r3y9v Text.Read.Lex.numberToFixed2 sat_s3Ga2 fPart_s3Ga0;
                          };
                      GHC.Base.Just exp_s3Ga3 [Occ=Once] ->
                          case
                              Text.Read.Lex.valInteger Text.Read.Lex.numberToFixed1 iPart_s3G9H
                          of
                          sat_s3Ga4
                          { __DEFAULT -> $wfracExp_r3y9v exp_s3Ga3 sat_s3Ga4 fPart_s3Ga0;
                          };
                    };
              };
        };

Text.Read.Lex.numberToRational [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Number -> GHC.Real.Rational
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w2_s3Ga5]
        case Text.Read.Lex.$wnumberToRational w2_s3Ga5 of {
          (#,#) ww1_s3Ga7 [Occ=Once] ww2_s3Ga8 [Occ=Once] ->
              GHC.Real.:% [ww1_s3Ga7 ww2_s3Ga8];
        };

Text.Read.Lex.numberToRangedRational3
  :: GHC.Real.Ratio GHC.Integer.Type.Integer
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Real.:%! [Text.Read.Lex.numberToFixed2
                                GHC.Real.$fEnumRatio1];

Text.Read.Lex.numberToRangedRational2
  :: GHC.Base.Maybe GHC.Real.Rational
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Read.Lex.numberToRangedRational3];

Text.Read.Lex.numberToRangedRational1
  :: GHC.Types.Int -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Classes.eqInt Text.Read.Lex.$fShowLexeme2 eta_B1;

sat_s3Gab :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

sat_s3Gac :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gab GHC.Types.[]];

sat_s3Gaa :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_s3Gad :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gaa sat_s3Gac];

sat_s3Ga9 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_s3Gae :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Ga9 sat_s3Gad];

Text.Read.Lex.numberToRangedRational4 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_s3Gae;

sat_s3Gah :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s3Gai :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gah GHC.Types.[]];

sat_s3Gag :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2147483647#];

sat_s3Gaj :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gag sat_s3Gai];

sat_s3Gaf :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2147483647#];

sat_s3Gak :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gaf sat_s3Gaj];

Text.Read.Lex.numberToRangedRational5 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3Gak;

Text.Read.Lex.$wnumberToRangedRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.Types.Int
     -> Text.Read.Lex.Number
     -> GHC.Base.Maybe GHC.Real.Rational
[GblId,
 Arity=3,
 Str=<L,1*U(U)><L,1*U(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s3Gal ww1_s3Gam w2_s3Gan]
        case w2_s3Gan of wild_s3Gao {
          Text.Read.Lex.MkNumber _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                sat_s3Gau [Occ=Once] :: GHC.Real.Rational
                [LclId] =
                    [wild_s3Gao] \u []
                        case Text.Read.Lex.$wnumberToRational wild_s3Gao of {
                          (#,#) ww3_s3Gas [Occ=Once] ww4_s3Gat [Occ=Once] ->
                              GHC.Real.:% [ww3_s3Gas ww4_s3Gat];
                        };
              } in  GHC.Base.Just [sat_s3Gau];
          Text.Read.Lex.MkDecimal iPart_s3Gav [Occ=Once]
                                  mFPart_s3Gaw [Occ=Once!]
                                  ds_s3Gax [Occ=Once!] ->
              case ds_s3Gax of {
                GHC.Base.Nothing ->
                    let {
                      sat_s3GaC [Occ=Once] :: GHC.Real.Rational
                      [LclId] =
                          [wild_s3Gao] \u []
                              case Text.Read.Lex.$wnumberToRational wild_s3Gao of {
                                (#,#) ww3_s3GaA [Occ=Once] ww4_s3GaB [Occ=Once] ->
                                    GHC.Real.:% [ww3_s3GaA ww4_s3GaB];
                              };
                    } in  GHC.Base.Just [sat_s3GaC];
                GHC.Base.Just exp_s3GaD ->
                    case
                        GHC.Integer.Type.gtInteger#
                            exp_s3GaD Text.Read.Lex.numberToRangedRational5
                    of
                    { __DEFAULT ->
                          case
                              GHC.Integer.Type.ltInteger#
                                  exp_s3GaD Text.Read.Lex.numberToRangedRational4
                          of
                          { __DEFAULT ->
                                let-no-escape {
                                  $w$j_s3GaG [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U)>]
                                    :: GHC.Prim.Int# -> GHC.Base.Maybe GHC.Real.Rational
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      sat-only [ww_s3Gal
                                                ww1_s3Gam
                                                wild_s3Gao
                                                exp_s3GaD] \r [ww2_s3GaH]
                                          case ww1_s3Gam of {
                                            GHC.Types.I# x34_s3GaJ [Occ=Once] ->
                                                case
                                                    GHC.Integer.Type.integerToInt exp_s3GaD
                                                of
                                                wild5_s3GaK
                                                { __DEFAULT ->
                                                      case
                                                          +# [ww2_s3GaH wild5_s3GaK]
                                                      of
                                                      x35_s3GaL [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            case +# [x34_s3GaJ 3#] of sat_s3GaM {
                                                              __DEFAULT ->
                                                                  case ># [x35_s3GaL sat_s3GaM] of {
                                                                    __DEFAULT ->
                                                                        case ww_s3Gal of {
                                                                          GHC.Types.I# x36_s3GaP [Occ=Once] ->
                                                                              case
                                                                                  -# [x36_s3GaP 3#]
                                                                              of
                                                                              sat_s3GaQ
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        <# [x35_s3GaL
                                                                                            sat_s3GaQ]
                                                                                    of
                                                                                    { __DEFAULT ->
                                                                                          let {
                                                                                            sat_s3GaV [Occ=Once]
                                                                                              :: GHC.Real.Rational
                                                                                            [LclId] =
                                                                                                [wild_s3Gao] \u []
                                                                                                    case
                                                                                                        Text.Read.Lex.$wnumberToRational
                                                                                                            wild_s3Gao
                                                                                                    of
                                                                                                    { (#,#) ww4_s3GaT [Occ=Once]
                                                                                                            ww5_s3GaU [Occ=Once] ->
                                                                                                          GHC.Real.:% [ww4_s3GaT
                                                                                                                       ww5_s3GaU];
                                                                                                    };
                                                                                          } in 
                                                                                            GHC.Base.Just [sat_s3GaV];
                                                                                      1# ->
                                                                                          Text.Read.Lex.numberToRangedRational2;
                                                                                    };
                                                                              };
                                                                        };
                                                                    1# -> GHC.Base.Nothing [];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                } in 
                                  case
                                      GHC.List.dropWhile
                                          Text.Read.Lex.numberToRangedRational1 iPart_s3Gav
                                  of
                                  wild4_s3GaW
                                  { [] ->
                                        case mFPart_s3Gaw of {
                                          GHC.Base.Nothing -> Text.Read.Lex.numberToRangedRational2;
                                          GHC.Base.Just fPart_s3GaY [Occ=Once] ->
                                              case
                                                  GHC.List.$wspan
                                                      Text.Read.Lex.numberToRangedRational1
                                                      fPart_s3GaY
                                              of
                                              { (#,#) ww3_s3Gb0 [Occ=Once] ww4_s3Gb1 [Occ=Once!] ->
                                                    case ww4_s3Gb1 of {
                                                      [] -> Text.Read.Lex.numberToRangedRational2;
                                                      : _ [Occ=Dead] _ [Occ=Dead] ->
                                                          case
                                                              GHC.List.$wlenAcc ww3_s3Gb0 0#
                                                          of
                                                          ww5_s3Gb5
                                                          { __DEFAULT ->
                                                                case
                                                                    negateInt# [ww5_s3Gb5]
                                                                of
                                                                sat_s3Gb6
                                                                { __DEFAULT -> $w$j_s3GaG sat_s3Gb6;
                                                                };
                                                          };
                                                    };
                                              };
                                        };
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case GHC.List.$wlenAcc wild4_s3GaW 0# of ww2_s3Gb9 {
                                          __DEFAULT -> $w$j_s3GaG ww2_s3Gb9;
                                        };
                                  };
                            1# -> GHC.Base.Nothing [];
                          };
                      1# -> GHC.Base.Nothing [];
                    };
              };
        };

Text.Read.Lex.numberToRangedRational [InlPrag=NOUSERINLINE[0]]
  :: (GHC.Types.Int, GHC.Types.Int)
     -> Text.Read.Lex.Number -> GHC.Base.Maybe GHC.Real.Rational
[GblId,
 Arity=2,
 Str=<S,1*U(1*U(U),1*U(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w2_s3Gba w3_s3Gbb]
        case w2_s3Gba of {
          (,) ww1_s3Gbd [Occ=Once] ww2_s3Gbe [Occ=Once] ->
              Text.Read.Lex.$wnumberToRangedRational
                  ww1_s3Gbd ww2_s3Gbe w3_s3Gbb;
        };

lvl5_r3y9w :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "valDig: Bad base"#;

Text.Read.Lex.readDecP2 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl5_r3y9w of sat_s3Gbf {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s3Gbf;
        };

sat_s3Gbg :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

sat_s3Gbh :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gbg GHC.Types.[]];

Text.Read.Lex.readDecP3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3Gbh;

sat_s3Gbi :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

sat_s3Gbj :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gbi GHC.Types.[]];

Text.Read.Lex.readDecP4 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3Gbj;

Text.Read.Lex.$w$svalDig [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Char# -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [w2_s3Gbk ww_s3Gbl]
        case
            GHC.Integer.Type.eqInteger# w2_s3Gbk Text.Read.Lex.readDecP4
        of
        { __DEFAULT ->
              case
                  GHC.Integer.Type.eqInteger# w2_s3Gbk Text.Read.Lex.numberToFixed1
              of
              { __DEFAULT ->
                    case
                        GHC.Integer.Type.eqInteger# w2_s3Gbk Text.Read.Lex.readDecP3
                    of
                    { __DEFAULT -> Text.Read.Lex.readDecP2;
                      1# ->
                          let-no-escape {
                            $j_s3Gbp [Occ=Once*T[0], Dmd=<L,1*U>]
                              :: GHC.Base.Maybe GHC.Types.Int
                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                [ww_s3Gbl] \r []
                                    let-no-escape {
                                      $j1_s3Gbq [Occ=Once*T[0], Dmd=<L,1*U>]
                                        :: GHC.Base.Maybe GHC.Types.Int
                                      [LclId[JoinId(0)], Unf=OtherCon []] =
                                          [ww_s3Gbl] \r []
                                              case leChar# ['A'# ww_s3Gbl] of {
                                                __DEFAULT -> GHC.Base.Nothing [];
                                                1# ->
                                                    case leChar# [ww_s3Gbl 'F'#] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case ord# [ww_s3Gbl] of sat_s3Gbt {
                                                            __DEFAULT ->
                                                                case
                                                                    -# [sat_s3Gbt 65#]
                                                                of
                                                                sat_s3Gbu
                                                                { __DEFAULT ->
                                                                      case
                                                                          +# [sat_s3Gbu 10#]
                                                                      of
                                                                      sat_s3Gbv
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s3Gbw [Occ=Once]
                                                                                :: GHC.Types.Int
                                                                              [LclId] =
                                                                                  CCCS GHC.Types.I#! [sat_s3Gbv];
                                                                            } in 
                                                                              GHC.Base.Just [sat_s3Gbw];
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                    } in 
                                      case leChar# ['a'# ww_s3Gbl] of {
                                        __DEFAULT -> $j1_s3Gbq;
                                        1# ->
                                            case leChar# [ww_s3Gbl 'f'#] of {
                                              __DEFAULT -> $j1_s3Gbq;
                                              1# ->
                                                  case ord# [ww_s3Gbl] of sat_s3Gbz {
                                                    __DEFAULT ->
                                                        case -# [sat_s3Gbz 97#] of sat_s3GbA {
                                                          __DEFAULT ->
                                                              case +# [sat_s3GbA 10#] of sat_s3GbB {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s3GbC [Occ=Once]
                                                                        :: GHC.Types.Int
                                                                      [LclId] =
                                                                          CCCS GHC.Types.I#! [sat_s3GbB];
                                                                    } in  GHC.Base.Just [sat_s3GbC];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                          } in 
                            case leChar# ['0'# ww_s3Gbl] of {
                              __DEFAULT -> $j_s3Gbp;
                              1# ->
                                  case leChar# [ww_s3Gbl '9'#] of {
                                    __DEFAULT -> $j_s3Gbp;
                                    1# ->
                                        case ord# [ww_s3Gbl] of sat_s3GbF {
                                          __DEFAULT ->
                                              case -# [sat_s3GbF 48#] of sat_s3GbG {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s3GbH [Occ=Once] :: GHC.Types.Int
                                                      [LclId] =
                                                          CCCS GHC.Types.I#! [sat_s3GbG];
                                                    } in  GHC.Base.Just [sat_s3GbH];
                                              };
                                        };
                                  };
                            };
                    };
                1# ->
                    case leChar# ['0'# ww_s3Gbl] of {
                      __DEFAULT -> GHC.Base.Nothing [];
                      1# ->
                          case leChar# [ww_s3Gbl '9'#] of {
                            __DEFAULT -> GHC.Base.Nothing [];
                            1# ->
                                case ord# [ww_s3Gbl] of sat_s3GbK {
                                  __DEFAULT ->
                                      case -# [sat_s3GbK 48#] of sat_s3GbL {
                                        __DEFAULT ->
                                            let {
                                              sat_s3GbM [Occ=Once] :: GHC.Types.Int
                                              [LclId] =
                                                  CCCS GHC.Types.I#! [sat_s3GbL];
                                            } in  GHC.Base.Just [sat_s3GbM];
                                      };
                                };
                          };
                    };
              };
          1# ->
              case leChar# ['0'# ww_s3Gbl] of {
                __DEFAULT -> GHC.Base.Nothing [];
                1# ->
                    case leChar# [ww_s3Gbl '7'#] of {
                      __DEFAULT -> GHC.Base.Nothing [];
                      1# ->
                          case ord# [ww_s3Gbl] of sat_s3GbP {
                            __DEFAULT ->
                                case -# [sat_s3GbP 48#] of sat_s3GbQ {
                                  __DEFAULT ->
                                      let {
                                        sat_s3GbR [Occ=Once] :: GHC.Types.Int
                                        [LclId] =
                                            CCCS GHC.Types.I#! [sat_s3GbQ];
                                      } in  GHC.Base.Just [sat_s3GbR];
                                };
                          };
                    };
              };
        };

Text.Read.Lex.$wvalDig [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     a -> GHC.Prim.Char# -> GHC.Base.Maybe GHC.Types.Int
[GblId,
 Arity=4,
 Str=<S(C(C(S))L),U(C(C1(U)),A)><L,U(A,A,A,A,A,A,C(U))><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w2_s3GbS w3_s3GbT w4_s3GbU ww_s3GbV]
        let {
          sat_s3GbW [Occ=Once] :: a_s3xiO
          [LclId] =
              [w3_s3GbT] \u []
                  GHC.Num.fromInteger w3_s3GbT Text.Read.Lex.readDecP4;
        } in 
          case GHC.Classes.== w2_s3GbS w4_s3GbU sat_s3GbW of {
            GHC.Types.False ->
                let {
                  sat_s3GbY [Occ=Once] :: a_s3xiO
                  [LclId] =
                      [w3_s3GbT] \u []
                          GHC.Num.fromInteger w3_s3GbT Text.Read.Lex.numberToFixed1;
                } in 
                  case GHC.Classes.== w2_s3GbS w4_s3GbU sat_s3GbY of {
                    GHC.Types.False ->
                        let {
                          sat_s3Gc0 [Occ=Once] :: a_s3xiO
                          [LclId] =
                              [w3_s3GbT] \u []
                                  GHC.Num.fromInteger w3_s3GbT Text.Read.Lex.readDecP3;
                        } in 
                          case GHC.Classes.== w2_s3GbS w4_s3GbU sat_s3Gc0 of {
                            GHC.Types.False -> Text.Read.Lex.readDecP2;
                            GHC.Types.True ->
                                let-no-escape {
                                  $j_s3Gc2 [Occ=Once*T[0], Dmd=<L,1*U>]
                                    :: GHC.Base.Maybe GHC.Types.Int
                                  [LclId[JoinId(0)], Unf=OtherCon []] =
                                      [ww_s3GbV] \r []
                                          let-no-escape {
                                            $j1_s3Gc3 [Occ=Once*T[0], Dmd=<L,1*U>]
                                              :: GHC.Base.Maybe GHC.Types.Int
                                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                                [ww_s3GbV] \r []
                                                    case leChar# ['A'# ww_s3GbV] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case leChar# [ww_s3GbV 'F'#] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                case ord# [ww_s3GbV] of sat_s3Gc6 {
                                                                  __DEFAULT ->
                                                                      case
                                                                          -# [sat_s3Gc6 65#]
                                                                      of
                                                                      sat_s3Gc7
                                                                      { __DEFAULT ->
                                                                            case
                                                                                +# [sat_s3Gc7 10#]
                                                                            of
                                                                            sat_s3Gc8
                                                                            { __DEFAULT ->
                                                                                  let {
                                                                                    sat_s3Gc9 [Occ=Once]
                                                                                      :: GHC.Types.Int
                                                                                    [LclId] =
                                                                                        CCCS GHC.Types.I#! [sat_s3Gc8];
                                                                                  } in 
                                                                                    GHC.Base.Just [sat_s3Gc9];
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                          } in 
                                            case leChar# ['a'# ww_s3GbV] of {
                                              __DEFAULT -> $j1_s3Gc3;
                                              1# ->
                                                  case leChar# [ww_s3GbV 'f'#] of {
                                                    __DEFAULT -> $j1_s3Gc3;
                                                    1# ->
                                                        case ord# [ww_s3GbV] of sat_s3Gcc {
                                                          __DEFAULT ->
                                                              case -# [sat_s3Gcc 97#] of sat_s3Gcd {
                                                                __DEFAULT ->
                                                                    case
                                                                        +# [sat_s3Gcd 10#]
                                                                    of
                                                                    sat_s3Gce
                                                                    { __DEFAULT ->
                                                                          let {
                                                                            sat_s3Gcf [Occ=Once]
                                                                              :: GHC.Types.Int
                                                                            [LclId] =
                                                                                CCCS GHC.Types.I#! [sat_s3Gce];
                                                                          } in 
                                                                            GHC.Base.Just [sat_s3Gcf];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                } in 
                                  case leChar# ['0'# ww_s3GbV] of {
                                    __DEFAULT -> $j_s3Gc2;
                                    1# ->
                                        case leChar# [ww_s3GbV '9'#] of {
                                          __DEFAULT -> $j_s3Gc2;
                                          1# ->
                                              case ord# [ww_s3GbV] of sat_s3Gci {
                                                __DEFAULT ->
                                                    case -# [sat_s3Gci 48#] of sat_s3Gcj {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s3Gck [Occ=Once] :: GHC.Types.Int
                                                            [LclId] =
                                                                CCCS GHC.Types.I#! [sat_s3Gcj];
                                                          } in  GHC.Base.Just [sat_s3Gck];
                                                    };
                                              };
                                        };
                                  };
                          };
                    GHC.Types.True ->
                        case leChar# ['0'# ww_s3GbV] of {
                          __DEFAULT -> GHC.Base.Nothing [];
                          1# ->
                              case leChar# [ww_s3GbV '9'#] of {
                                __DEFAULT -> GHC.Base.Nothing [];
                                1# ->
                                    case ord# [ww_s3GbV] of sat_s3Gcn {
                                      __DEFAULT ->
                                          case -# [sat_s3Gcn 48#] of sat_s3Gco {
                                            __DEFAULT ->
                                                let {
                                                  sat_s3Gcp [Occ=Once] :: GHC.Types.Int
                                                  [LclId] =
                                                      CCCS GHC.Types.I#! [sat_s3Gco];
                                                } in  GHC.Base.Just [sat_s3Gcp];
                                          };
                                    };
                              };
                        };
                  };
            GHC.Types.True ->
                case leChar# ['0'# ww_s3GbV] of {
                  __DEFAULT -> GHC.Base.Nothing [];
                  1# ->
                      case leChar# [ww_s3GbV '7'#] of {
                        __DEFAULT -> GHC.Base.Nothing [];
                        1# ->
                            case ord# [ww_s3GbV] of sat_s3Gcs {
                              __DEFAULT ->
                                  case -# [sat_s3Gcs 48#] of sat_s3Gct {
                                    __DEFAULT ->
                                        let {
                                          sat_s3Gcu [Occ=Once] :: GHC.Types.Int
                                          [LclId] =
                                              CCCS GHC.Types.I#! [sat_s3Gct];
                                        } in  GHC.Base.Just [sat_s3Gcu];
                                  };
                            };
                      };
                };
          };

Text.Read.Lex.$w$sreadIntP' [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U><L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3Gcv w3_s3Gcw]
        let {
          sat_s3GcI [Occ=Once] :: GHC.Types.Char -> GHC.Types.Int
          [LclId] =
              [w2_s3Gcv] \r [c_s3GcD]
                  case c_s3GcD of {
                    GHC.Types.C# ww1_s3GcF [Occ=Once] ->
                        case Text.Read.Lex.$w$svalDig w2_s3Gcv ww1_s3GcF of {
                          GHC.Base.Nothing -> Text.Read.Lex.$fShowLexeme2;
                          GHC.Base.Just x34_s3GcH [Occ=Once] -> x34_s3GcH;
                        };
                  }; } in
        let {
          sat_s3GcC [Occ=Once] :: GHC.Types.Char -> GHC.Types.Bool
          [LclId] =
              [w2_s3Gcv] \r [c_s3Gcx]
                  case c_s3Gcx of {
                    GHC.Types.C# ww1_s3Gcz [Occ=Once] ->
                        case Text.Read.Lex.$w$svalDig w2_s3Gcv ww1_s3Gcz of {
                          GHC.Base.Nothing -> GHC.Types.False [];
                          GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                        };
                  };
        } in 
          Text.Read.Lex.$w$sreadIntP w2_s3Gcv sat_s3GcC sat_s3GcI w3_s3Gcw;

Text.Read.Lex.$wreadIntP' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     a
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)>,
 Unf=OtherCon []] =
    [] \r [w2_s3GcJ w3_s3GcK w4_s3GcL w5_s3GcM]
        let {
          sat_s3GcY [Occ=Once] :: GHC.Types.Char -> GHC.Types.Int
          [LclId] =
              [w2_s3GcJ w3_s3GcK w4_s3GcL] \r [c_s3GcT]
                  case c_s3GcT of {
                    GHC.Types.C# ww1_s3GcV [Occ=Once] ->
                        case
                            Text.Read.Lex.$wvalDig w2_s3GcJ w3_s3GcK w4_s3GcL ww1_s3GcV
                        of
                        { GHC.Base.Nothing -> Text.Read.Lex.$fShowLexeme2;
                          GHC.Base.Just x34_s3GcX [Occ=Once] -> x34_s3GcX;
                        };
                  }; } in
        let {
          sat_s3GcS [Occ=Once] :: GHC.Types.Char -> GHC.Types.Bool
          [LclId] =
              [w2_s3GcJ w3_s3GcK w4_s3GcL] \r [c_s3GcN]
                  case c_s3GcN of {
                    GHC.Types.C# ww1_s3GcP [Occ=Once] ->
                        case
                            Text.Read.Lex.$wvalDig w2_s3GcJ w3_s3GcK w4_s3GcL ww1_s3GcP
                        of
                        { GHC.Base.Nothing -> GHC.Types.False [];
                          GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                        };
                  };
        } in 
          Text.Read.Lex.$wreadIntP
              w3_s3GcK w4_s3GcL sat_s3GcS sat_s3GcY w5_s3GcM;

Text.Read.Lex.readDecP6 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     a
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [w2_s3GcZ w3_s3Gd0 w4_s3Gd1 w5_s3Gd2]
        case
            Text.Read.Lex.$wreadIntP' w2_s3GcZ w3_s3Gd0 w4_s3Gd1 w5_s3Gd2
        of
        { Unit# ww1_s3Gd4 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Gd4];
        };

Text.Read.Lex.readOctP1
  :: forall b.
     (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3Gd5]
        case
            Text.Read.Lex.$w$sreadIntP' Text.Read.Lex.readDecP4 w2_s3Gd5
        of
        { Unit# ww1_s3Gd7 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Gd7];
        };

Text.Read.Lex.readOctP_$sreadOctP
  :: Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.readOctP1 eta_B1;

Text.Read.Lex.readOctP2
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [$dEq_s3Gd8 $dNum_s3Gd9]
        let {
          w2_s3Gda [Occ=OnceL] :: a_a3v4p
          [LclId] =
              [$dNum_s3Gd9] \u []
                  GHC.Num.fromInteger $dNum_s3Gd9 Text.Read.Lex.readDecP4; } in
        let {
          sat_s3Gde [Occ=OnceT[0]]
            :: forall b.
               (a_a3v4p -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [$dEq_s3Gd8 $dNum_s3Gd9 w2_s3Gda] \r [w3_s3Gdb]
                  case
                      Text.Read.Lex.$wreadIntP' $dEq_s3Gd8 $dNum_s3Gd9 w2_s3Gda w3_s3Gdb
                  of
                  { Unit# ww1_s3Gdd [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Gdd];
                  };
        } in  sat_s3Gde;

Text.Read.Lex.readOctP
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.readOctP2 eta_B2 eta_B1;

Text.Read.Lex.readDecP1
  :: forall b.
     (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3Gdf]
        case
            Text.Read.Lex.$w$sreadIntP' Text.Read.Lex.numberToFixed1 w2_s3Gdf
        of
        { Unit# ww1_s3Gdh [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Gdh];
        };

Text.Read.Lex.readDecP_$sreadDecP
  :: Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.readDecP1 eta_B1;

Text.Read.Lex.readDecP5
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [$dEq_s3Gdi $dNum_s3Gdj]
        let {
          w2_s3Gdk [Occ=OnceL] :: a_a3v4H
          [LclId] =
              [$dNum_s3Gdj] \u []
                  GHC.Num.fromInteger $dNum_s3Gdj Text.Read.Lex.numberToFixed1; } in
        let {
          sat_s3Gdo [Occ=OnceT[0]]
            :: forall b.
               (a_a3v4H -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [$dEq_s3Gdi $dNum_s3Gdj w2_s3Gdk] \r [w3_s3Gdl]
                  case
                      Text.Read.Lex.$wreadIntP' $dEq_s3Gdi $dNum_s3Gdj w2_s3Gdk w3_s3Gdl
                  of
                  { Unit# ww1_s3Gdn [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Gdn];
                  };
        } in  sat_s3Gdo;

Text.Read.Lex.readDecP
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.readDecP5 eta_B2 eta_B1;

Text.Read.Lex.readHexP1
  :: forall b.
     (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3Gdp]
        case
            Text.Read.Lex.$w$sreadIntP' Text.Read.Lex.readDecP3 w2_s3Gdp
        of
        { Unit# ww1_s3Gdr [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Gdr];
        };

Text.Read.Lex.readHexP_$sreadHexP
  :: Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.readHexP1 eta_B1;

Text.Read.Lex.readHexP2
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [$dEq_s3Gds $dNum_s3Gdt]
        let {
          w2_s3Gdu [Occ=OnceL] :: a_a3v4Z
          [LclId] =
              [$dNum_s3Gdt] \u []
                  GHC.Num.fromInteger $dNum_s3Gdt Text.Read.Lex.readDecP3; } in
        let {
          sat_s3Gdy [Occ=OnceT[0]]
            :: forall b.
               (a_a3v4Z -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [$dEq_s3Gds $dNum_s3Gdt w2_s3Gdu] \r [w3_s3Gdv]
                  case
                      Text.Read.Lex.$wreadIntP' $dEq_s3Gds $dNum_s3Gdt w2_s3Gdu w3_s3Gdv
                  of
                  { Unit# ww1_s3Gdx [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Gdx];
                  };
        } in  sat_s3Gdy;

Text.Read.Lex.readHexP
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.readHexP2 eta_B2 eta_B1;

$wlexDigits_r3y9x
  :: GHC.Types.Int
     -> forall b.
        (Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U(U)><L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3Gdz w3_s3GdA]
        let {
          lvl116_s3GdB [Occ=OnceL, Dmd=<L,C(U)>]
            :: [GHC.Types.Int] -> Text.ParserCombinators.ReadP.P b_s3xjl
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              [w3_s3GdA] \r [a3_s3GdC]
                  case a3_s3GdC of wild_s3GdD {
                    [] -> Text.ParserCombinators.ReadP.Fail [];
                    : _ [Occ=Dead] _ [Occ=Dead] -> w3_s3GdA wild_s3GdD;
                  }; } in
        let {
          scan_s3GdG [Occ=LoopBreaker]
            :: forall a.
               [GHC.Types.Char]
               -> ([GHC.Types.Int] -> a)
               -> forall b1.
                  (a -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId,
           Arity=3,
           Str=<S,1*U><L,1*C1(U)><L,1*C1(U)>,
           Unf=OtherCon []] =
              sat-only [w2_s3Gdz scan_s3GdG] \r [ds_s3GdH f_s3GdI eta_s3GdJ]
                  case ds_s3GdH of {
                    [] ->
                        let {
                          sat_s3GdL [Occ=Once] :: a_a3vca
                          [LclId] =
                              [f_s3GdI] \u [] f_s3GdI GHC.Types.[];
                        } in  eta_s3GdJ sat_s3GdL;
                    : c_s3GdM [Occ=Once!] cs_s3GdN [Occ=Once] ->
                        case w2_s3Gdz of {
                          GHC.Types.I# ww1_s3GdP [Occ=Once!] ->
                              case c_s3GdM of {
                                GHC.Types.C# ww3_s3GdR ->
                                    let-no-escape {
                                      $j_s3GdS [Dmd=<L,1*C1(U)>]
                                        :: GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1_X3npr
                                      [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                          sat-only [scan_s3GdG
                                                    f_s3GdI
                                                    eta_s3GdJ
                                                    cs_s3GdN] \r [n_s3GdT]
                                              let {
                                                lvl117_s3GdU [Occ=OnceL]
                                                  :: Text.ParserCombinators.ReadP.P b1_X3npr
                                                [LclId] =
                                                    [scan_s3GdG
                                                     f_s3GdI
                                                     eta_s3GdJ
                                                     cs_s3GdN
                                                     n_s3GdT] \u []
                                                        let {
                                                          sat_s3GdX [Occ=Once]
                                                            :: [GHC.Types.Int] -> a_a3vca
                                                          [LclId] =
                                                              [f_s3GdI n_s3GdT] \r [x34_s3GdV]
                                                                  let {
                                                                    sat_s3GdW [Occ=Once]
                                                                      :: [GHC.Types.Int]
                                                                    [LclId] =
                                                                        CCCS :! [n_s3GdT x34_s3GdV];
                                                                  } in  f_s3GdI sat_s3GdW;
                                                        } in 
                                                          scan_s3GdG
                                                              cs_s3GdN sat_s3GdX eta_s3GdJ; } in
                                              let {
                                                sat_s3GdZ [Occ=Once]
                                                  :: GHC.Types.Char
                                                     -> Text.ParserCombinators.ReadP.P b1_X3npr
                                                [LclId] =
                                                    [lvl117_s3GdU] \r [a3_s3GdY] lvl117_s3GdU;
                                              } in  Text.ParserCombinators.ReadP.Get [sat_s3GdZ];
                                    } in 
                                      case ww1_s3GdP of {
                                        __DEFAULT -> Text.Read.Lex.readDecP2;
                                        8# ->
                                            case leChar# ['0'# ww3_s3GdR] of {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s3Ge3 [Occ=Once] :: a_a3vca
                                                    [LclId] =
                                                        [f_s3GdI] \u [] f_s3GdI GHC.Types.[];
                                                  } in  eta_s3GdJ sat_s3Ge3;
                                              1# ->
                                                  case leChar# [ww3_s3GdR '7'#] of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s3Ge5 [Occ=Once] :: a_a3vca
                                                          [LclId] =
                                                              [f_s3GdI] \u [] f_s3GdI GHC.Types.[];
                                                        } in  eta_s3GdJ sat_s3Ge5;
                                                    1# ->
                                                        case ord# [ww3_s3GdR] of sat_s3Ge6 {
                                                          __DEFAULT ->
                                                              case -# [sat_s3Ge6 48#] of sat_s3Ge7 {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s3Ge8 [Occ=Once]
                                                                        :: GHC.Types.Int
                                                                      [LclId] =
                                                                          CCCS GHC.Types.I#! [sat_s3Ge7];
                                                                    } in  $j_s3GdS sat_s3Ge8;
                                                              };
                                                        };
                                                  };
                                            };
                                        10# ->
                                            case leChar# ['0'# ww3_s3GdR] of {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s3Gea [Occ=Once] :: a_a3vca
                                                    [LclId] =
                                                        [f_s3GdI] \u [] f_s3GdI GHC.Types.[];
                                                  } in  eta_s3GdJ sat_s3Gea;
                                              1# ->
                                                  case leChar# [ww3_s3GdR '9'#] of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s3Gec [Occ=Once] :: a_a3vca
                                                          [LclId] =
                                                              [f_s3GdI] \u [] f_s3GdI GHC.Types.[];
                                                        } in  eta_s3GdJ sat_s3Gec;
                                                    1# ->
                                                        case ord# [ww3_s3GdR] of sat_s3Ged {
                                                          __DEFAULT ->
                                                              case -# [sat_s3Ged 48#] of sat_s3Gee {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s3Gef [Occ=Once]
                                                                        :: GHC.Types.Int
                                                                      [LclId] =
                                                                          CCCS GHC.Types.I#! [sat_s3Gee];
                                                                    } in  $j_s3GdS sat_s3Gef;
                                                              };
                                                        };
                                                  };
                                            };
                                        16# ->
                                            let-no-escape {
                                              $j1_s3Geg [Occ=Once*T[0], Dmd=<L,1*U>]
                                                :: Text.ParserCombinators.ReadP.P b1_X3npr
                                              [LclId[JoinId(0)], Unf=OtherCon []] =
                                                  [f_s3GdI eta_s3GdJ ww3_s3GdR $j_s3GdS] \r []
                                                      let-no-escape {
                                                        $j2_s3Geh [Occ=Once*T[0], Dmd=<L,1*U>]
                                                          :: Text.ParserCombinators.ReadP.P b1_X3npr
                                                        [LclId[JoinId(0)], Unf=OtherCon []] =
                                                            [f_s3GdI
                                                             eta_s3GdJ
                                                             ww3_s3GdR
                                                             $j_s3GdS] \r []
                                                                case leChar# ['A'# ww3_s3GdR] of {
                                                                  __DEFAULT ->
                                                                      let {
                                                                        sat_s3Gej [Occ=Once]
                                                                          :: a_a3vca
                                                                        [LclId] =
                                                                            [f_s3GdI] \u []
                                                                                f_s3GdI
                                                                                    GHC.Types.[];
                                                                      } in  eta_s3GdJ sat_s3Gej;
                                                                  1# ->
                                                                      case
                                                                          leChar# [ww3_s3GdR 'F'#]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s3Gel [Occ=Once]
                                                                                :: a_a3vca
                                                                              [LclId] =
                                                                                  [f_s3GdI] \u []
                                                                                      f_s3GdI
                                                                                          GHC.Types.[];
                                                                            } in 
                                                                              eta_s3GdJ sat_s3Gel;
                                                                        1# ->
                                                                            case
                                                                                ord# [ww3_s3GdR]
                                                                            of
                                                                            sat_s3Gem
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      -# [sat_s3Gem
                                                                                          65#]
                                                                                  of
                                                                                  sat_s3Gen
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            +# [sat_s3Gen
                                                                                                10#]
                                                                                        of
                                                                                        sat_s3Geo
                                                                                        { __DEFAULT ->
                                                                                              let {
                                                                                                sat_s3Gep [Occ=Once]
                                                                                                  :: GHC.Types.Int
                                                                                                [LclId] =
                                                                                                    CCCS GHC.Types.I#! [sat_s3Geo];
                                                                                              } in 
                                                                                                $j_s3GdS
                                                                                                    sat_s3Gep;
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                      } in 
                                                        case leChar# ['a'# ww3_s3GdR] of {
                                                          __DEFAULT -> $j2_s3Geh;
                                                          1# ->
                                                              case leChar# [ww3_s3GdR 'f'#] of {
                                                                __DEFAULT -> $j2_s3Geh;
                                                                1# ->
                                                                    case
                                                                        ord# [ww3_s3GdR]
                                                                    of
                                                                    sat_s3Ges
                                                                    { __DEFAULT ->
                                                                          case
                                                                              -# [sat_s3Ges 97#]
                                                                          of
                                                                          sat_s3Get
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    +# [sat_s3Get
                                                                                        10#]
                                                                                of
                                                                                sat_s3Geu
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s3Gev [Occ=Once]
                                                                                          :: GHC.Types.Int
                                                                                        [LclId] =
                                                                                            CCCS GHC.Types.I#! [sat_s3Geu];
                                                                                      } in 
                                                                                        $j_s3GdS
                                                                                            sat_s3Gev;
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                            } in 
                                              case leChar# ['0'# ww3_s3GdR] of {
                                                __DEFAULT -> $j1_s3Geg;
                                                1# ->
                                                    case leChar# [ww3_s3GdR '9'#] of {
                                                      __DEFAULT -> $j1_s3Geg;
                                                      1# ->
                                                          case ord# [ww3_s3GdR] of sat_s3Gey {
                                                            __DEFAULT ->
                                                                case
                                                                    -# [sat_s3Gey 48#]
                                                                of
                                                                sat_s3Gez
                                                                { __DEFAULT ->
                                                                      let {
                                                                        sat_s3GeA [Occ=Once]
                                                                          :: GHC.Types.Int
                                                                        [LclId] =
                                                                            CCCS GHC.Types.I#! [sat_s3Gez];
                                                                      } in  $j_s3GdS sat_s3GeA;
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                              };
                        };
                  }; } in
        let {
          sat_s3GeC [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xjl
          [LclId] =
              [lvl116_s3GdB scan_s3GdG] \r [a3_s3GeB]
                  scan_s3GdG a3_s3GeB GHC.Base.id lvl116_s3GdB;
        } in  Unit# [sat_s3GeC];

a1_r3y9y :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

a2_r3y9z :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

$wlexHexOct_r3y9A
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3GeD]
        let {
          lvl116_s3GeE [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId] =
              [w2_s3GeD] \u []
                  let {
                    sat_s3GeI [Occ=Once]
                      :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xjx
                    [LclId] =
                        [w2_s3GeD] \r [a3_s3GeF]
                            let {
                              sat_s3GeG [Occ=Once] :: Text.Read.Lex.Number
                              [LclId] =
                                  CCCS Text.Read.Lex.MkNumber! [a2_r3y9z a3_s3GeF]; } in
                            let {
                              sat_s3GeH [Occ=Once] :: Text.Read.Lex.Lexeme
                              [LclId] =
                                  CCCS Text.Read.Lex.Number! [sat_s3GeG];
                            } in  w2_s3GeD sat_s3GeH;
                  } in 
                    case $wlexDigits_r3y9x a2_r3y9z sat_s3GeI of {
                      Unit# ww1_s3GeK [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3GeK];
                    }; } in
        let {
          lvl117_s3GeL [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId] =
              [w2_s3GeD] \u []
                  let {
                    sat_s3GeP [Occ=Once]
                      :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xjx
                    [LclId] =
                        [w2_s3GeD] \r [a3_s3GeM]
                            let {
                              sat_s3GeN [Occ=Once] :: Text.Read.Lex.Number
                              [LclId] =
                                  CCCS Text.Read.Lex.MkNumber! [a1_r3y9y a3_s3GeM]; } in
                            let {
                              sat_s3GeO [Occ=Once] :: Text.Read.Lex.Lexeme
                              [LclId] =
                                  CCCS Text.Read.Lex.Number! [sat_s3GeN];
                            } in  w2_s3GeD sat_s3GeO;
                  } in 
                    case $wlexDigits_r3y9x a1_r3y9y sat_s3GeP of {
                      Unit# ww1_s3GeR [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3GeR];
                    }; } in
        let {
          lvl118_s3GeS [InlPrag=NOUSERINLINE[0], Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
              [lvl116_s3GeE lvl117_s3GeL] \r [w3_s3GeT]
                  case w3_s3GeT of {
                    GHC.Types.C# ww1_s3GeV [Occ=Once!] ->
                        case ww1_s3GeV of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'O'# -> lvl117_s3GeL;
                          'X'# -> lvl116_s3GeE;
                          'o'# -> lvl117_s3GeL;
                          'x'# -> lvl116_s3GeE;
                        };
                  }; } in
        let {
          lvl119_s3GeX [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl118_s3GeS]; } in
        let {
          sat_s3Gf2 [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId] =
              [lvl119_s3GeX] \r [a_s3GeY]
                  case a_s3GeY of {
                    GHC.Types.C# y_s3Gf0 [Occ=Once!] ->
                        case y_s3Gf0 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '0'# -> lvl119_s3GeX;
                        };
                  };
        } in  Unit# [sat_s3Gf2];

lexHexOct_r3y9B
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3Gf3]
        case $wlexHexOct_r3y9A w2_s3Gf3 of {
          Unit# ww1_s3Gf5 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Gf5];
        };

lvl6_r3y9C :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

$wlexFrac_r3y9D
  :: forall b1.
     (GHC.Base.Maybe Text.Read.Lex.Digits
      -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3Gf6]
        let {
          lvl116_s3Gf7 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xjD
          [LclId] =
              [w2_s3Gf6] \u []
                  let {
                    sat_s3Gfa [Occ=Once]
                      :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xjD
                    [LclId] =
                        [w2_s3Gf6] \r [a3_s3Gf8]
                            let {
                              sat_s3Gf9 [Occ=Once] :: GHC.Base.Maybe Text.Read.Lex.Digits
                              [LclId] =
                                  CCCS GHC.Base.Just! [a3_s3Gf8];
                            } in  w2_s3Gf6 sat_s3Gf9;
                  } in 
                    case $wlexDigits_r3y9x lvl6_r3y9C sat_s3Gfa of {
                      Unit# ww1_s3Gfc [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3Gfc];
                    }; } in
        let {
          sat_s3Gfh [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xjD
          [LclId] =
              [lvl116_s3Gf7] \r [a_s3Gfd]
                  case a_s3Gfd of {
                    GHC.Types.C# y_s3Gff [Occ=Once!] ->
                        case y_s3Gff of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '.'# -> lvl116_s3Gf7;
                        };
                  };
        } in  Unit# [sat_s3Gfh];

lexFrac_r3y9E
  :: forall b1.
     (GHC.Base.Maybe Text.Read.Lex.Digits
      -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3Gfi]
        case $wlexFrac_r3y9D w2_s3Gfi of {
          Unit# ww1_s3Gfk [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Gfk];
        };

m1_r3y9F :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SOH"#;

m2_r3y9G :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m1_r3y9F;

x_r3y9H :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SOH'#];

m3_r3y9I :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SO"#;

m4_r3y9J :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m3_r3y9I;

x1_r3y9K :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SO'#];

m5_r3y9L :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NUL"#;

m6_r3y9M :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m5_r3y9L;

x2_r3y9N :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\NUL'#];

m7_r3y9O :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "STX"#;

m8_r3y9P :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m7_r3y9O;

x3_r3y9Q :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\STX'#];

m9_r3y9R :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETX"#;

m10_r3y9S :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m9_r3y9R;

x4_r3y9T :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ETX'#];

m11_r3y9U :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EOT"#;

m12_r3y9V :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m11_r3y9U;

x5_r3y9W :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\EOT'#];

m13_r3y9X :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ENQ"#;

m14_r3y9Y :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m13_r3y9X;

x6_r3y9Z :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ENQ'#];

m15_r3ya0 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ACK"#;

m16_r3ya1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m15_r3ya0;

x7_r3ya2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ACK'#];

m17_r3ya3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BEL"#;

m18_r3ya4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m17_r3ya3;

x8_r3ya5 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\a'#];

m19_r3ya6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BS"#;

m20_r3ya7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m19_r3ya6;

x9_r3ya8 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\b'#];

m21_r3ya9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HT"#;

m22_r3yaa :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m21_r3ya9;

x10_r3yab :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\t'#];

m23_r3yac :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LF"#;

m24_r3yad :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m23_r3yac;

x11_r3yae :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\n'#];

m25_r3yaf :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "VT"#;

m26_r3yag :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m25_r3yaf;

x12_r3yah :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\v'#];

m27_r3yai :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FF"#;

m28_r3yaj :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m27_r3yai;

x13_r3yak :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\f'#];

m29_r3yal :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CR"#;

m30_r3yam :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m29_r3yal;

x14_r3yan :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\r'#];

m31_r3yao :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SI"#;

m32_r3yap :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m31_r3yao;

x15_r3yaq :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SI'#];

m33_r3yar :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DLE"#;

m34_r3yas :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m33_r3yar;

x16_r3yat :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DLE'#];

m35_r3yau :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC1"#;

m36_r3yav :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m35_r3yau;

x17_r3yaw :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC1'#];

m37_r3yax :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC2"#;

m38_r3yay :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m37_r3yax;

x18_r3yaz :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC2'#];

m39_r3yaA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC3"#;

m40_r3yaB :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m39_r3yaA;

x19_r3yaC :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC3'#];

m41_r3yaD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC4"#;

m42_r3yaE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m41_r3yaD;

x20_r3yaF :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC4'#];

m43_r3yaG :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NAK"#;

m44_r3yaH :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m43_r3yaG;

x21_r3yaI :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\NAK'#];

m45_r3yaJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SYN"#;

m46_r3yaK :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m45_r3yaJ;

x22_r3yaL :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SYN'#];

m47_r3yaM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETB"#;

m48_r3yaN :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m47_r3yaM;

x23_r3yaO :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ETB'#];

m49_r3yaP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CAN"#;

m50_r3yaQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m49_r3yaP;

x24_r3yaR :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\CAN'#];

m51_r3yaS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EM"#;

m52_r3yaT :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m51_r3yaS;

x25_r3yaU :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\EM'#];

m53_r3yaV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SUB"#;

m54_r3yaW :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m53_r3yaV;

x26_r3yaX :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SUB'#];

m55_r3yaY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ESC"#;

m56_r3yaZ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m55_r3yaY;

x27_r3yb0 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ESC'#];

m57_r3yb1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FS"#;

m58_r3yb2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m57_r3yb1;

x28_r3yb3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\FS'#];

m59_r3yb4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GS"#;

m60_r3yb5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m59_r3yb4;

x29_r3yb6 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\GS'#];

m61_r3yb7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RS"#;

m62_r3yb8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m61_r3yb7;

x30_r3yb9 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\RS'#];

m63_r3yba :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "US"#;

m64_r3ybb :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m63_r3yba;

x31_r3ybc :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\US'#];

m65_r3ybd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SP"#;

m66_r3ybe :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m65_r3ybd;

x32_r3ybf :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

m67_r3ybg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DEL"#;

m68_r3ybh :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m67_r3ybg;

x33_r3ybi :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DEL'#];

sat_s3Gfl :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1114111#];

sat_s3Gfm :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gfl GHC.Types.[]];

lvl7_r3ybj :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3Gfm;

lvl8_r3ybk :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['"'#];

lvl9_r3ybl :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [lvl8_r3ybk GHC.Types.True];

lvl10_r3ybm :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\''#];

lvl11_r3ybn :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [lvl10_r3ybm GHC.Types.True];

lvl12_r3ybo :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\\'#];

lvl13_r3ybp :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [lvl12_r3ybo GHC.Types.True];

lvl14_r3ybq :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x8_r3ya5 GHC.Types.True];

lvl15_r3ybr :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x9_r3ya8 GHC.Types.True];

lvl16_r3ybs :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x13_r3yak GHC.Types.True];

lvl17_r3ybt :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x11_r3yae GHC.Types.True];

lvl18_r3ybu :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x14_r3yan GHC.Types.True];

lvl19_r3ybv :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x10_r3yab GHC.Types.True];

lvl20_r3ybw :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x12_r3yah GHC.Types.True];

lvl21_r3ybx :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x2_r3y9N GHC.Types.True];

lvl22_r3yby :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x_r3y9H GHC.Types.True];

lvl23_r3ybz :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x3_r3y9Q GHC.Types.True];

lvl24_r3ybA :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x4_r3y9T GHC.Types.True];

lvl25_r3ybB :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x5_r3y9W GHC.Types.True];

lvl26_r3ybC :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x6_r3y9Z GHC.Types.True];

lvl27_r3ybD :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x7_r3ya2 GHC.Types.True];

lvl28_r3ybE :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x1_r3y9K GHC.Types.True];

lvl29_r3ybF :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x15_r3yaq GHC.Types.True];

lvl30_r3ybG :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x16_r3yat GHC.Types.True];

lvl31_r3ybH :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x17_r3yaw GHC.Types.True];

lvl32_r3ybI :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x18_r3yaz GHC.Types.True];

lvl33_r3ybJ :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x19_r3yaC GHC.Types.True];

lvl34_r3ybK :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x20_r3yaF GHC.Types.True];

lvl35_r3ybL :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x21_r3yaI GHC.Types.True];

lvl36_r3ybM :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x22_r3yaL GHC.Types.True];

lvl37_r3ybN :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x23_r3yaO GHC.Types.True];

lvl38_r3ybO :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x24_r3yaR GHC.Types.True];

lvl39_r3ybP :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x25_r3yaU GHC.Types.True];

lvl40_r3ybQ :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x26_r3yaX GHC.Types.True];

lvl41_r3ybR :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x27_r3yb0 GHC.Types.True];

lvl42_r3ybS :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x28_r3yb3 GHC.Types.True];

lvl43_r3ybT :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x29_r3yb6 GHC.Types.True];

lvl44_r3ybU :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x30_r3yb9 GHC.Types.True];

lvl45_r3ybV :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x31_r3ybc GHC.Types.True];

w1_r3ybW
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gfn]
        let {
          lvl116_s3Gfo [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nYA
          [LclId] =
              [k1_s3Gfn] \u [] k1_s3Gfn x1_r3y9K; } in
        let {
          sat_s3Gfq [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nYA
          [LclId] =
              [lvl116_s3Gfo] \r [a3_s3Gfp] lvl116_s3Gfo;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m4_r3y9J sat_s3Gfq of {
            Unit# ww1_s3Gfs [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gfs];
          };

w_r3ybX
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gft]
        let {
          lvl116_s3Gfu [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gft] \u [] k1_s3Gft x_r3y9H; } in
        let {
          sat_s3Gfw [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gfu] \r [a3_s3Gfv] lvl116_s3Gfu;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m2_r3y9G sat_s3Gfw of {
            Unit# ww1_s3Gfy [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gfy];
          };

lvl46_r3ybY
  :: forall b.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [w2_s3Gfz]
        case
            Text.ParserCombinators.ReadP.$w<++ w_r3ybX w1_r3ybW w2_s3Gfz
        of
        { Unit# ww1_s3GfB [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3GfB];
        };

lvl47_r3ybZ
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GfC]
        let {
          lvl116_s3GfD [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GfC] \u [] k1_s3GfC x2_r3y9N; } in
        let {
          sat_s3GfF [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GfD] \r [a3_s3GfE] lvl116_s3GfD;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m6_r3y9M sat_s3GfF of {
            Unit# ww1_s3GfH [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GfH];
          };

lvl48_r3yc0
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GfI]
        let {
          lvl116_s3GfJ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GfI] \u [] k1_s3GfI x3_r3y9Q; } in
        let {
          sat_s3GfL [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GfJ] \r [a3_s3GfK] lvl116_s3GfJ;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m8_r3y9P sat_s3GfL of {
            Unit# ww1_s3GfN [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GfN];
          };

lvl49_r3yc1
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GfO]
        let {
          lvl116_s3GfP [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GfO] \u [] k1_s3GfO x4_r3y9T; } in
        let {
          sat_s3GfR [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GfP] \r [a3_s3GfQ] lvl116_s3GfP;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m10_r3y9S sat_s3GfR of {
            Unit# ww1_s3GfT [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GfT];
          };

lvl50_r3yc2
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GfU]
        let {
          lvl116_s3GfV [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GfU] \u [] k1_s3GfU x5_r3y9W; } in
        let {
          sat_s3GfX [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GfV] \r [a3_s3GfW] lvl116_s3GfV;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m12_r3y9V sat_s3GfX of {
            Unit# ww1_s3GfZ [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GfZ];
          };

lvl51_r3yc3
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gg0]
        let {
          lvl116_s3Gg1 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gg0] \u [] k1_s3Gg0 x6_r3y9Z; } in
        let {
          sat_s3Gg3 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gg1] \r [a3_s3Gg2] lvl116_s3Gg1;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m14_r3y9Y sat_s3Gg3 of {
            Unit# ww1_s3Gg5 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gg5];
          };

lvl52_r3yc4
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gg6]
        let {
          lvl116_s3Gg7 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gg6] \u [] k1_s3Gg6 x7_r3ya2; } in
        let {
          sat_s3Gg9 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gg7] \r [a3_s3Gg8] lvl116_s3Gg7;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m16_r3ya1 sat_s3Gg9 of {
            Unit# ww1_s3Ggb [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ggb];
          };

lvl53_r3yc5
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ggc]
        let {
          lvl116_s3Ggd [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ggc] \u [] k1_s3Ggc x8_r3ya5; } in
        let {
          sat_s3Ggf [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ggd] \r [a3_s3Gge] lvl116_s3Ggd;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m18_r3ya4 sat_s3Ggf of {
            Unit# ww1_s3Ggh [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ggh];
          };

lvl54_r3yc6
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ggi]
        let {
          lvl116_s3Ggj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ggi] \u [] k1_s3Ggi x9_r3ya8; } in
        let {
          sat_s3Ggl [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ggj] \r [a3_s3Ggk] lvl116_s3Ggj;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m20_r3ya7 sat_s3Ggl of {
            Unit# ww1_s3Ggn [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ggn];
          };

lvl55_r3yc7
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ggo]
        let {
          lvl116_s3Ggp [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ggo] \u [] k1_s3Ggo x10_r3yab; } in
        let {
          sat_s3Ggr [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ggp] \r [a3_s3Ggq] lvl116_s3Ggp;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m22_r3yaa sat_s3Ggr of {
            Unit# ww1_s3Ggt [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ggt];
          };

lvl56_r3yc8
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ggu]
        let {
          lvl116_s3Ggv [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ggu] \u [] k1_s3Ggu x11_r3yae; } in
        let {
          sat_s3Ggx [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ggv] \r [a3_s3Ggw] lvl116_s3Ggv;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m24_r3yad sat_s3Ggx of {
            Unit# ww1_s3Ggz [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ggz];
          };

lvl57_r3yc9
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GgA]
        let {
          lvl116_s3GgB [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GgA] \u [] k1_s3GgA x12_r3yah; } in
        let {
          sat_s3GgD [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GgB] \r [a3_s3GgC] lvl116_s3GgB;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m26_r3yag sat_s3GgD of {
            Unit# ww1_s3GgF [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GgF];
          };

lvl58_r3yca
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GgG]
        let {
          lvl116_s3GgH [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GgG] \u [] k1_s3GgG x13_r3yak; } in
        let {
          sat_s3GgJ [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GgH] \r [a3_s3GgI] lvl116_s3GgH;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m28_r3yaj sat_s3GgJ of {
            Unit# ww1_s3GgL [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GgL];
          };

lvl59_r3ycb
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GgM]
        let {
          lvl116_s3GgN [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GgM] \u [] k1_s3GgM x14_r3yan; } in
        let {
          sat_s3GgP [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GgN] \r [a3_s3GgO] lvl116_s3GgN;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m30_r3yam sat_s3GgP of {
            Unit# ww1_s3GgR [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GgR];
          };

lvl60_r3ycc
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GgS]
        let {
          lvl116_s3GgT [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GgS] \u [] k1_s3GgS x15_r3yaq; } in
        let {
          sat_s3GgV [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GgT] \r [a3_s3GgU] lvl116_s3GgT;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m32_r3yap sat_s3GgV of {
            Unit# ww1_s3GgX [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GgX];
          };

lvl61_r3ycd
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GgY]
        let {
          lvl116_s3GgZ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GgY] \u [] k1_s3GgY x16_r3yat; } in
        let {
          sat_s3Gh1 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GgZ] \r [a3_s3Gh0] lvl116_s3GgZ;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m34_r3yas sat_s3Gh1 of {
            Unit# ww1_s3Gh3 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gh3];
          };

lvl62_r3yce
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gh4]
        let {
          lvl116_s3Gh5 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gh4] \u [] k1_s3Gh4 x17_r3yaw; } in
        let {
          sat_s3Gh7 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gh5] \r [a3_s3Gh6] lvl116_s3Gh5;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m36_r3yav sat_s3Gh7 of {
            Unit# ww1_s3Gh9 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gh9];
          };

lvl63_r3ycf
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gha]
        let {
          lvl116_s3Ghb [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gha] \u [] k1_s3Gha x18_r3yaz; } in
        let {
          sat_s3Ghd [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ghb] \r [a3_s3Ghc] lvl116_s3Ghb;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m38_r3yay sat_s3Ghd of {
            Unit# ww1_s3Ghf [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ghf];
          };

lvl64_r3ycg
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ghg]
        let {
          lvl116_s3Ghh [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ghg] \u [] k1_s3Ghg x19_r3yaC; } in
        let {
          sat_s3Ghj [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ghh] \r [a3_s3Ghi] lvl116_s3Ghh;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m40_r3yaB sat_s3Ghj of {
            Unit# ww1_s3Ghl [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ghl];
          };

lvl65_r3ych
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ghm]
        let {
          lvl116_s3Ghn [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ghm] \u [] k1_s3Ghm x20_r3yaF; } in
        let {
          sat_s3Ghp [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ghn] \r [a3_s3Gho] lvl116_s3Ghn;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m42_r3yaE sat_s3Ghp of {
            Unit# ww1_s3Ghr [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ghr];
          };

lvl66_r3yci
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ghs]
        let {
          lvl116_s3Ght [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ghs] \u [] k1_s3Ghs x21_r3yaI; } in
        let {
          sat_s3Ghv [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ght] \r [a3_s3Ghu] lvl116_s3Ght;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m44_r3yaH sat_s3Ghv of {
            Unit# ww1_s3Ghx [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ghx];
          };

lvl67_r3ycj
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ghy]
        let {
          lvl116_s3Ghz [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ghy] \u [] k1_s3Ghy x22_r3yaL; } in
        let {
          sat_s3GhB [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ghz] \r [a3_s3GhA] lvl116_s3Ghz;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m46_r3yaK sat_s3GhB of {
            Unit# ww1_s3GhD [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GhD];
          };

lvl68_r3yck
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GhE]
        let {
          lvl116_s3GhF [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GhE] \u [] k1_s3GhE x23_r3yaO; } in
        let {
          sat_s3GhH [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GhF] \r [a3_s3GhG] lvl116_s3GhF;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m48_r3yaN sat_s3GhH of {
            Unit# ww1_s3GhJ [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GhJ];
          };

lvl69_r3ycl
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GhK]
        let {
          lvl116_s3GhL [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GhK] \u [] k1_s3GhK x24_r3yaR; } in
        let {
          sat_s3GhN [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GhL] \r [a3_s3GhM] lvl116_s3GhL;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m50_r3yaQ sat_s3GhN of {
            Unit# ww1_s3GhP [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GhP];
          };

lvl70_r3ycm
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GhQ]
        let {
          lvl116_s3GhR [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GhQ] \u [] k1_s3GhQ x25_r3yaU; } in
        let {
          sat_s3GhT [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GhR] \r [a3_s3GhS] lvl116_s3GhR;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m52_r3yaT sat_s3GhT of {
            Unit# ww1_s3GhV [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GhV];
          };

lvl71_r3ycn
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GhW]
        let {
          lvl116_s3GhX [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GhW] \u [] k1_s3GhW x26_r3yaX; } in
        let {
          sat_s3GhZ [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GhX] \r [a3_s3GhY] lvl116_s3GhX;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m54_r3yaW sat_s3GhZ of {
            Unit# ww1_s3Gi1 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gi1];
          };

lvl72_r3yco
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gi2]
        let {
          lvl116_s3Gi3 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gi2] \u [] k1_s3Gi2 x27_r3yb0; } in
        let {
          sat_s3Gi5 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gi3] \r [a3_s3Gi4] lvl116_s3Gi3;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m56_r3yaZ sat_s3Gi5 of {
            Unit# ww1_s3Gi7 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gi7];
          };

lvl73_r3ycp
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gi8]
        let {
          lvl116_s3Gi9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gi8] \u [] k1_s3Gi8 x28_r3yb3; } in
        let {
          sat_s3Gib [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gi9] \r [a3_s3Gia] lvl116_s3Gi9;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m58_r3yb2 sat_s3Gib of {
            Unit# ww1_s3Gid [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gid];
          };

lvl74_r3ycq
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gie]
        let {
          lvl116_s3Gif [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gie] \u [] k1_s3Gie x29_r3yb6; } in
        let {
          sat_s3Gih [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gif] \r [a3_s3Gig] lvl116_s3Gif;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m60_r3yb5 sat_s3Gih of {
            Unit# ww1_s3Gij [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gij];
          };

lvl75_r3ycr
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gik]
        let {
          lvl116_s3Gil [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gik] \u [] k1_s3Gik x30_r3yb9; } in
        let {
          sat_s3Gin [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gil] \r [a3_s3Gim] lvl116_s3Gil;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m62_r3yb8 sat_s3Gin of {
            Unit# ww1_s3Gip [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gip];
          };

lvl76_r3ycs
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Giq]
        let {
          lvl116_s3Gir [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Giq] \u [] k1_s3Giq x31_r3ybc; } in
        let {
          sat_s3Git [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gir] \r [a3_s3Gis] lvl116_s3Gir;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m64_r3ybb sat_s3Git of {
            Unit# ww1_s3Giv [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Giv];
          };

lvl77_r3yct
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Giw]
        let {
          lvl116_s3Gix [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Giw] \u [] k1_s3Giw x32_r3ybf; } in
        let {
          sat_s3Giz [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gix] \r [a3_s3Giy] lvl116_s3Gix;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m66_r3ybe sat_s3Giz of {
            Unit# ww1_s3GiB [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GiB];
          };

lvl78_r3ycu
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GiC]
        let {
          lvl116_s3GiD [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GiC] \u [] k1_s3GiC x33_r3ybi; } in
        let {
          sat_s3GiF [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GiD] \r [a3_s3GiE] lvl116_s3GiD;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m68_r3ybh sat_s3GiF of {
            Unit# ww1_s3GiH [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GiH];
          };

lvl79_r3ycv :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl78_r3ycu GHC.Types.[]];

lvl80_r3ycw :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl77_r3yct lvl79_r3ycv];

lvl81_r3ycx :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl76_r3ycs lvl80_r3ycw];

lvl82_r3ycy :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl75_r3ycr lvl81_r3ycx];

lvl83_r3ycz :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl74_r3ycq lvl82_r3ycy];

lvl84_r3ycA :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl73_r3ycp lvl83_r3ycz];

lvl85_r3ycB :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl72_r3yco lvl84_r3ycA];

lvl86_r3ycC :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl71_r3ycn lvl85_r3ycB];

lvl87_r3ycD :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl70_r3ycm lvl86_r3ycC];

lvl88_r3ycE :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl69_r3ycl lvl87_r3ycD];

lvl89_r3ycF :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl68_r3yck lvl88_r3ycE];

lvl90_r3ycG :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl67_r3ycj lvl89_r3ycF];

lvl91_r3ycH :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl66_r3yci lvl90_r3ycG];

lvl92_r3ycI :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl65_r3ych lvl91_r3ycH];

lvl93_r3ycJ :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl64_r3ycg lvl92_r3ycI];

lvl94_r3ycK :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl63_r3ycf lvl93_r3ycJ];

lvl95_r3ycL :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl62_r3yce lvl94_r3ycK];

lvl96_r3ycM :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl61_r3ycd lvl95_r3ycL];

lvl97_r3ycN :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl60_r3ycc lvl96_r3ycM];

lvl98_r3ycO :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl59_r3ycb lvl97_r3ycN];

lvl99_r3ycP :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl58_r3yca lvl98_r3ycO];

lvl100_r3ycQ :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl57_r3yc9 lvl99_r3ycP];

lvl101_r3ycR :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl56_r3yc8 lvl100_r3ycQ];

lvl102_r3ycS :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl55_r3yc7 lvl101_r3ycR];

lvl103_r3ycT :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl54_r3yc6 lvl102_r3ycS];

lvl104_r3ycU :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl53_r3yc5 lvl103_r3ycT];

lvl105_r3ycV :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl52_r3yc4 lvl104_r3ycU];

lvl106_r3ycW :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl51_r3yc3 lvl105_r3ycV];

lvl107_r3ycX :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl50_r3yc2 lvl106_r3ycW];

lvl108_r3ycY :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl49_r3yc1 lvl107_r3ycX];

lvl109_r3ycZ :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl48_r3yc0 lvl108_r3ycY];

lvl110_r3yd0 :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl47_r3ybZ lvl109_r3ycZ];

lvl111_r3yd1 :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl46_r3ybY lvl110_r3yd0];

lvl112_r3yd2
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [k_s3GiI]
        let {
          lvl116_s3GiJ [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_a3nIU
          [LclId] =
              [k_s3GiI] \u [] k_s3GiI a2_r3y9z; } in
        let {
          lvl117_s3GiK [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_a3nIU
          [LclId] =
              [k_s3GiI] \u [] k_s3GiI a1_r3y9y; } in
        let {
          sat_s3GiP [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_a3nIU
          [LclId] =
              [lvl116_s3GiJ lvl117_s3GiK] \r [a3_s3GiL]
                  case a3_s3GiL of {
                    GHC.Types.C# ds_s3GiN [Occ=Once!] ->
                        case ds_s3GiN of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'O'# -> lvl117_s3GiK;
                          'X'# -> lvl116_s3GiJ;
                          'o'# -> lvl117_s3GiK;
                          'x'# -> lvl116_s3GiJ;
                        };
                  };
        } in  Text.ParserCombinators.ReadP.Get [sat_s3GiP];

lvl113_r3yd3
  :: forall b.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [k_s3GiQ] k_s3GiQ lvl6_r3y9C;

Text.Read.Lex.lexChar2
  :: forall b1.
     ((GHC.Types.Char, GHC.Types.Bool)
      -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [k_s3GiR]
        let {
          lvl116_s3GiS :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl18_r3ybu; } in
        let {
          lvl117_s3GiT :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl16_r3ybs; } in
        let {
          lvl118_s3GiU :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl20_r3ybw; } in
        let {
          lvl119_s3GiV :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl17_r3ybt; } in
        let {
          lvl120_s3GiW :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl19_r3ybv; } in
        let {
          lvl121_s3GiX :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl15_r3ybr; } in
        let {
          lvl122_s3GiY :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl14_r3ybq; } in
        let {
          lvl123_s3GiZ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl13_r3ybp; } in
        let {
          lvl124_s3Gj0 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl11_r3ybn; } in
        let {
          lvl125_s3Gj1 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl9_r3ybl; } in
        let {
          sat_s3Gka [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR
               lvl116_s3GiS
               lvl117_s3GiT
               lvl118_s3GiU
               lvl119_s3GiV
               lvl120_s3GiW
               lvl121_s3GiX
               lvl122_s3GiY] \u []
                  let {
                    sat_s3Gjo [Occ=Once]
                      :: GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1_X3nNY
                    [LclId] =
                        [k_s3GiR] \r [a3_s3Gj8]
                            let {
                              lvl126_s3Gj9 [Occ=OnceL] :: GHC.Integer.Type.Integer
                              [LclId] =
                                  [a3_s3Gj8] \u []
                                      case a3_s3Gj8 of {
                                        GHC.Types.I# i_s3Gjb [Occ=Once] ->
                                            GHC.Integer.Type.smallInteger i_s3Gjb;
                                      }; } in
                            let {
                              sat_s3Gjl [Occ=Once]
                                :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_X3nNY
                              [LclId] =
                                  [k_s3GiR lvl126_s3Gj9] \r [a4_s3Gjc]
                                      case
                                          Text.Read.Lex.valInteger lvl126_s3Gj9 a4_s3Gjc
                                      of
                                      a5_s3Gjd [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.leInteger# a5_s3Gjd lvl7_r3ybj
                                            of
                                            { __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                              1# ->
                                                  let {
                                                    sat_s3Gjj [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        [a5_s3Gjd] \u []
                                                            case
                                                                GHC.Integer.Type.integerToInt
                                                                    a5_s3Gjd
                                                            of
                                                            wild1_s3Gjf
                                                            { __DEFAULT ->
                                                                  case
                                                                      int2Word# [wild1_s3Gjf]
                                                                  of
                                                                  sat_s3Gjg
                                                                  { __DEFAULT ->
                                                                        case
                                                                            leWord# [sat_s3Gjg
                                                                                     1114111##]
                                                                        of
                                                                        { __DEFAULT ->
                                                                              GHC.Char.$wlvl
                                                                                  wild1_s3Gjf;
                                                                          1# ->
                                                                              case
                                                                                  chr# [wild1_s3Gjf]
                                                                              of
                                                                              sat_s3Gji
                                                                              { __DEFAULT ->
                                                                                    GHC.Types.C# [sat_s3Gji];
                                                                              };
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_s3Gjk [Occ=Once]
                                                      :: (GHC.Types.Char, GHC.Types.Bool)
                                                    [LclId] =
                                                        CCCS (,)! [sat_s3Gjj GHC.Types.True];
                                                  } in  k_s3GiR sat_s3Gjk;
                                            };
                                      };
                            } in 
                              case $wlexDigits_r3y9x a3_s3Gj8 sat_s3Gjl of {
                                Unit# ww1_s3Gjn [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3Gjn];
                              };
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$w<++
                            lvl112_r3yd2 lvl113_r3yd3 sat_s3Gjo
                    of
                    { Unit# ww1_s3Gjq [Occ=Once] ->
                          let {
                            sat_s3Gk9 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
                            [LclId] =
                                [k_s3GiR
                                 lvl116_s3GiS
                                 lvl117_s3GiT
                                 lvl118_s3GiU
                                 lvl119_s3GiV
                                 lvl120_s3GiW
                                 lvl121_s3GiX
                                 lvl122_s3GiY] \u []
                                    let {
                                      lvl126_s3Gjs [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl45_r3ybV; } in
                                    let {
                                      lvl127_s3Gjt [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl44_r3ybU; } in
                                    let {
                                      lvl128_s3Gju [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl43_r3ybT; } in
                                    let {
                                      lvl129_s3Gjv [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl42_r3ybS; } in
                                    let {
                                      lvl130_s3Gjw [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl41_r3ybR; } in
                                    let {
                                      lvl131_s3Gjx [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl40_r3ybQ; } in
                                    let {
                                      lvl132_s3Gjy [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl39_r3ybP; } in
                                    let {
                                      lvl133_s3Gjz [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl38_r3ybO; } in
                                    let {
                                      lvl134_s3GjA [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl37_r3ybN; } in
                                    let {
                                      lvl135_s3GjB [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl36_r3ybM; } in
                                    let {
                                      lvl136_s3GjC [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl35_r3ybL; } in
                                    let {
                                      lvl137_s3GjD [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl34_r3ybK; } in
                                    let {
                                      lvl138_s3GjE [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl33_r3ybJ; } in
                                    let {
                                      lvl139_s3GjF [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl32_r3ybI; } in
                                    let {
                                      lvl140_s3GjG [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl31_r3ybH; } in
                                    let {
                                      lvl141_s3GjH [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl30_r3ybG; } in
                                    let {
                                      lvl142_s3GjI [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl29_r3ybF; } in
                                    let {
                                      lvl143_s3GjJ [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl28_r3ybE; } in
                                    let {
                                      lvl144_s3GjK [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl27_r3ybD; } in
                                    let {
                                      lvl145_s3GjL [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl26_r3ybC; } in
                                    let {
                                      lvl146_s3GjM [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl25_r3ybB; } in
                                    let {
                                      lvl147_s3GjN [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl24_r3ybA; } in
                                    let {
                                      lvl148_s3GjO [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl23_r3ybz; } in
                                    let {
                                      lvl149_s3GjP [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl22_r3yby; } in
                                    let {
                                      lvl150_s3GjQ [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl21_r3ybx; } in
                                    let {
                                      $wlvl1_s3GjR [InlPrag=NOUSERINLINE[0],
                                                    Occ=OnceL!,
                                                    Dmd=<L,C(U)>]
                                        :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                          sat-only [lvl116_s3GiS
                                                    lvl117_s3GiT
                                                    lvl118_s3GiU
                                                    lvl119_s3GiV
                                                    lvl120_s3GiW
                                                    lvl121_s3GiX
                                                    lvl122_s3GiY
                                                    lvl126_s3Gjs
                                                    lvl127_s3Gjt
                                                    lvl128_s3Gju
                                                    lvl129_s3Gjv
                                                    lvl130_s3Gjw
                                                    lvl131_s3Gjx
                                                    lvl132_s3Gjy
                                                    lvl133_s3Gjz
                                                    lvl134_s3GjA
                                                    lvl135_s3GjB
                                                    lvl136_s3GjC
                                                    lvl137_s3GjD
                                                    lvl138_s3GjE
                                                    lvl139_s3GjF
                                                    lvl140_s3GjG
                                                    lvl141_s3GjH
                                                    lvl142_s3GjI
                                                    lvl143_s3GjJ
                                                    lvl144_s3GjK
                                                    lvl145_s3GjL
                                                    lvl146_s3GjM
                                                    lvl147_s3GjN
                                                    lvl148_s3GjO
                                                    lvl149_s3GjP
                                                    lvl150_s3GjQ] \r [ww2_s3GjS]
                                              case ww2_s3GjS of {
                                                __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                '@'# -> lvl150_s3GjQ;
                                                'A'# -> lvl149_s3GjP;
                                                'B'# -> lvl148_s3GjO;
                                                'C'# -> lvl147_s3GjN;
                                                'D'# -> lvl146_s3GjM;
                                                'E'# -> lvl145_s3GjL;
                                                'F'# -> lvl144_s3GjK;
                                                'G'# -> lvl122_s3GiY;
                                                'H'# -> lvl121_s3GiX;
                                                'I'# -> lvl120_s3GiW;
                                                'J'# -> lvl119_s3GiV;
                                                'K'# -> lvl118_s3GiU;
                                                'L'# -> lvl117_s3GiT;
                                                'M'# -> lvl116_s3GiS;
                                                'N'# -> lvl143_s3GjJ;
                                                'O'# -> lvl142_s3GjI;
                                                'P'# -> lvl141_s3GjH;
                                                'Q'# -> lvl140_s3GjG;
                                                'R'# -> lvl139_s3GjF;
                                                'S'# -> lvl138_s3GjE;
                                                'T'# -> lvl137_s3GjD;
                                                'U'# -> lvl136_s3GjC;
                                                'V'# -> lvl135_s3GjB;
                                                'W'# -> lvl134_s3GjA;
                                                'X'# -> lvl133_s3Gjz;
                                                'Y'# -> lvl132_s3Gjy;
                                                'Z'# -> lvl131_s3Gjx;
                                                '['# -> lvl130_s3Gjw;
                                                '\\'# -> lvl129_s3Gjv;
                                                ']'# -> lvl128_s3Gju;
                                                '^'# -> lvl127_s3Gjt;
                                                '_'# -> lvl126_s3Gjs;
                                              }; } in
                                    let {
                                      lvl151_s3GjU [InlPrag=NOUSERINLINE[0], Occ=OnceL]
                                        :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
                                          [$wlvl1_s3GjR] \r [w2_s3GjV]
                                              case w2_s3GjV of {
                                                GHC.Types.C# ww3_s3GjX [Occ=Once] ->
                                                    $wlvl1_s3GjR ww3_s3GjX;
                                              }; } in
                                    let {
                                      lvl152_s3GjY [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId, Unf=OtherCon []] =
                                          CCCS Text.ParserCombinators.ReadP.Get! [lvl151_s3GjU]; } in
                                    let {
                                      sat_s3Gk8 [Occ=Once]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u []
                                              let {
                                                sat_s3Gk7 [Occ=Once]
                                                  :: GHC.Types.Char
                                                     -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                                [LclId] =
                                                    [k_s3GiR] \r [a3_s3Gk5]
                                                        let {
                                                          sat_s3Gk6 [Occ=Once]
                                                            :: (GHC.Types.Char, GHC.Types.Bool)
                                                          [LclId] =
                                                              CCCS (,)! [a3_s3Gk5 GHC.Types.True];
                                                        } in  k_s3GiR sat_s3Gk6;
                                              } in 
                                                Text.ParserCombinators.ReadP.choice
                                                    lvl111_r3yd1 sat_s3Gk7; } in
                                    let {
                                      sat_s3Gk3 [Occ=Once]
                                        :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [lvl152_s3GjY] \r [a_s3GjZ]
                                              case a_s3GjZ of {
                                                GHC.Types.C# y_s3Gk1 [Occ=Once!] ->
                                                    case y_s3Gk1 of {
                                                      __DEFAULT ->
                                                          Text.ParserCombinators.ReadP.Fail [];
                                                      '^'# -> lvl152_s3GjY;
                                                    };
                                              }; } in
                                    let {
                                      sat_s3Gk4 [Occ=Once]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gk3];
                                    } in 
                                      Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                          sat_s3Gk4 sat_s3Gk8; } in
                          let {
                            sat_s3Gjr [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
                            [LclId] =
                                CCCS Text.ParserCombinators.ReadP.Look! [ww1_s3Gjq];
                          } in 
                            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                sat_s3Gjr sat_s3Gk9;
                    }; } in
        let {
          sat_s3Gj6 [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [lvl116_s3GiS
               lvl117_s3GiT
               lvl118_s3GiU
               lvl119_s3GiV
               lvl120_s3GiW
               lvl121_s3GiX
               lvl122_s3GiY
               lvl123_s3GiZ
               lvl124_s3Gj0
               lvl125_s3Gj1] \r [a3_s3Gj2]
                  case a3_s3Gj2 of {
                    GHC.Types.C# ds_s3Gj4 [Occ=Once!] ->
                        case ds_s3Gj4 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '"'# -> lvl125_s3Gj1;
                          '\''# -> lvl124_s3Gj0;
                          '\\'# -> lvl123_s3GiZ;
                          'a'# -> lvl122_s3GiY;
                          'b'# -> lvl121_s3GiX;
                          'f'# -> lvl117_s3GiT;
                          'n'# -> lvl119_s3GiV;
                          'r'# -> lvl116_s3GiS;
                          't'# -> lvl120_s3GiW;
                          'v'# -> lvl118_s3GiU;
                        };
                  }; } in
        let {
          sat_s3Gj7 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gj6];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3Gj7 sat_s3Gka;

Text.Read.Lex.lexChar4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\&"#;

Text.Read.Lex.lexChar3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.lexChar4;

Text.Read.Lex.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3Gkb]
        let {
          lvl116_s3Gkc [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk1
          [LclId] =
              [w2_s3Gkb] \u []
                  case Text.Read.Lex.$wconsumeEmpties w2_s3Gkb of {
                    Unit# ww1_s3Gke [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Gke];
                  }; } in
        let {
          sat_s3Gkg [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xk1
          [LclId] =
              [lvl116_s3Gkc] \r [a3_s3Gkf] lvl116_s3Gkc;
        } in 
          Text.ParserCombinators.ReadP.$wstring
              Text.Read.Lex.lexChar3 sat_s3Gkg;
Text.Read.Lex.$wconsumeEmpties [InlPrag=NOUSERINLINE[0],
                                Occ=LoopBreaker]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3Gkh]
        let {
          lvl116_s3Gki [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xjV
          [LclId] =
              [w2_s3Gkh] \u []
                  case Text.Read.Lex.$wlvl w2_s3Gkh of {
                    Unit# ww1_s3Gkk [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Gkk];
                  }; } in
        let {
          lvl117_s3Gkl [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_s3xjV
          [LclId] =
              [w2_s3Gkh] \u [] w2_s3Gkh GHC.Tuple.(); } in
        let {
          sat_s3Gkz [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xjV
          [LclId] =
              [lvl116_s3Gki lvl117_s3Gkl] \r [a3_s3Gkm]
                  case a3_s3Gkm of {
                    [] -> lvl117_s3Gkl;
                    : ds_s3Gko [Occ=Once!] ds1_s3Gkp [Occ=Once!] ->
                        case ds_s3Gko of {
                          GHC.Types.C# ds2_s3Gkr [Occ=Once!] ->
                              case ds2_s3Gkr of {
                                __DEFAULT -> lvl117_s3Gkl;
                                '\\'# ->
                                    case ds1_s3Gkp of {
                                      [] -> lvl117_s3Gkl;
                                      : ds4_s3Gku [Occ=Once!] _ [Occ=Dead] ->
                                          case ds4_s3Gku of {
                                            GHC.Types.C# ds6_s3Gkx [Occ=Once!] ->
                                                case ds6_s3Gkx of {
                                                  __DEFAULT -> lvl117_s3Gkl;
                                                  '&'# -> lvl116_s3Gki;
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in  Unit# [sat_s3Gkz];

Text.Read.Lex.lexChar5 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3GkA]
        case Text.Read.Lex.$wconsumeEmpties w2_s3GkA of {
          Unit# ww1_s3GkC [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3GkC];
        };

Text.Read.Lex.$wlexChar [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3GkD]
        let {
          lvl116_s3GkE [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk7
          [LclId] =
              [w2_s3GkD] \u []
                  let {
                    k_s3GkF [Occ=Once, Dmd=<L,C(U)>]
                      :: (GHC.Types.Char, GHC.Types.Bool)
                         -> Text.ParserCombinators.ReadP.P b1_s3xk7
                    [LclId, Arity=1, Str=<S,1*U(U,A)>, Unf=OtherCon []] =
                        [w2_s3GkD] \r [a3_s3GkG]
                            case a3_s3GkG of {
                              (,) c_s3GkI [Occ=Once] _ [Occ=Dead] ->
                                  let {
                                    lvl117_s3GkK :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                    [LclId] =
                                        [w2_s3GkD c_s3GkI] \u [] w2_s3GkD c_s3GkI; } in
                                  let {
                                    lvl118_s3GkL [Occ=OnceL]
                                      :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                    [LclId] =
                                        [lvl117_s3GkK] \u []
                                            let {
                                              sat_s3GkN [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                              [LclId] =
                                                  [lvl117_s3GkK] \r [a4_s3GkM] lvl117_s3GkK;
                                            } in 
                                              case Text.Read.Lex.$wlvl sat_s3GkN of {
                                                Unit# ww1_s3GkP [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3GkP];
                                              }; } in
                                  let {
                                    sat_s3Gl3 [Occ=Once]
                                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                    [LclId] =
                                        [lvl117_s3GkK lvl118_s3GkL] \r [a4_s3GkQ]
                                            case a4_s3GkQ of {
                                              [] -> lvl117_s3GkK;
                                              : ds1_s3GkS [Occ=Once!] ds2_s3GkT [Occ=Once!] ->
                                                  case ds1_s3GkS of {
                                                    GHC.Types.C# ds3_s3GkV [Occ=Once!] ->
                                                        case ds3_s3GkV of {
                                                          __DEFAULT -> lvl117_s3GkK;
                                                          '\\'# ->
                                                              case ds2_s3GkT of {
                                                                [] -> lvl117_s3GkK;
                                                                : ds5_s3GkY [Occ=Once!]
                                                                  _ [Occ=Dead] ->
                                                                    case ds5_s3GkY of {
                                                                      GHC.Types.C# ds7_s3Gl1 [Occ=Once!] ->
                                                                          case ds7_s3Gl1 of {
                                                                            __DEFAULT ->
                                                                                lvl117_s3GkK;
                                                                            '&'# -> lvl118_s3GkL;
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                  } in  Text.ParserCombinators.ReadP.Look [sat_s3Gl3];
                            };
                  } in  Text.Read.Lex.lexChar2 k_s3GkF; } in
        let {
          sat_s3Gls [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xk7
          [LclId] =
              [w2_s3GkD lvl116_s3GkE] \r [a3_s3Gl4]
                  case a3_s3Gl4 of wild_s3Gl5 {
                    GHC.Types.C# x34_s3Gl6 [Occ=Once!] ->
                        case x34_s3Gl6 of {
                          __DEFAULT ->
                              let {
                                lvl117_s3Gl8 :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                [LclId] =
                                    [w2_s3GkD wild_s3Gl5] \u [] w2_s3GkD wild_s3Gl5; } in
                              let {
                                lvl118_s3Gl9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                [LclId] =
                                    [lvl117_s3Gl8] \u []
                                        let {
                                          sat_s3Glb [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                          [LclId] =
                                              [lvl117_s3Gl8] \r [a4_s3Gla] lvl117_s3Gl8;
                                        } in 
                                          case Text.Read.Lex.$wlvl sat_s3Glb of {
                                            Unit# ww1_s3Gld [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s3Gld];
                                          }; } in
                              let {
                                sat_s3Glr [Occ=Once]
                                  :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                [LclId] =
                                    [lvl117_s3Gl8 lvl118_s3Gl9] \r [a4_s3Gle]
                                        case a4_s3Gle of {
                                          [] -> lvl117_s3Gl8;
                                          : ds_s3Glg [Occ=Once!] ds1_s3Glh [Occ=Once!] ->
                                              case ds_s3Glg of {
                                                GHC.Types.C# ds2_s3Glj [Occ=Once!] ->
                                                    case ds2_s3Glj of {
                                                      __DEFAULT -> lvl117_s3Gl8;
                                                      '\\'# ->
                                                          case ds1_s3Glh of {
                                                            [] -> lvl117_s3Gl8;
                                                            : ds4_s3Glm [Occ=Once!] _ [Occ=Dead] ->
                                                                case ds4_s3Glm of {
                                                                  GHC.Types.C# ds6_s3Glp [Occ=Once!] ->
                                                                      case ds6_s3Glp of {
                                                                        __DEFAULT -> lvl117_s3Gl8;
                                                                        '&'# -> lvl118_s3Gl9;
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                        };
                              } in  Text.ParserCombinators.ReadP.Look [sat_s3Glr];
                          '\\'# -> lvl116_s3GkE;
                        };
                  };
        } in  Unit# [sat_s3Gls];

Text.Read.Lex.lexChar1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3Glt]
        case Text.Read.Lex.$wlexChar w2_s3Glt of {
          Unit# ww1_s3Glv [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Glv];
        };

Text.Read.Lex.lexChar
  :: Text.ParserCombinators.ReadP.ReadP GHC.Types.Char
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.lexChar1 eta_B1;

lexStrItem_r3yd4
  :: forall b.
     ((GHC.Types.Char, GHC.Types.Bool)
      -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [k_s3Glw]
        let {
          lvl116_s3Glx :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [k_s3Glw] \u [] lexStrItem_r3yd4 k_s3Glw; } in
        let {
          lvl117_s3Gly [Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
              [lvl116_s3Glx] \r [a_s3Glz]
                  case a_s3Glz of {
                    GHC.Types.C# y_s3GlB [Occ=Once!] ->
                        case y_s3GlB of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '\\'# -> lvl116_s3Glx;
                        };
                  }; } in
        let {
          lvl118_s3GlD [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl117_s3Gly]; } in
        let {
          k1_s3GlE [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl118_s3GlD] \r [a3_s3GlF] lvl118_s3GlD; } in
        let {
          lvl119_s3GlG [Occ=OnceL*]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              [k1_s3GlE] \r [a_s3GlH]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3GlH k1_s3GlE; } in
        let {
          $wlvl1_s3GlI [InlPrag=NOUSERINLINE[0], Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [lvl116_s3Glx lvl119_s3GlG] \r [ww_s3GlJ]
                  case ww_s3GlJ of ds_s3GlK {
                    __DEFAULT ->
                        case ord# [ds_s3GlK] of sat_s3GlM {
                          __DEFAULT ->
                              case int2Word# [sat_s3GlM] of x34_s3GlL [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case leWord# [x34_s3GlL 887##] of {
                                      __DEFAULT ->
                                          case ord# [ds_s3GlK] of sat_s3GlP {
                                            __DEFAULT ->
                                                case
                                                    __pkg_ccall base-4.11.0.0 [sat_s3GlP
                                                                               GHC.Prim.realWorld#]
                                                of
                                                { (#,#) _ [Occ=Dead] ds2_s3GlS [Occ=Once!] ->
                                                      case ds2_s3GlS of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Look [lvl119_s3GlG];
                                                        0# -> Text.ParserCombinators.ReadP.Fail [];
                                                      };
                                                };
                                          };
                                      1# ->
                                          case x34_s3GlL of wild_s3GlU {
                                            __DEFAULT ->
                                                case minusWord# [wild_s3GlU 9##] of sat_s3GlV {
                                                  __DEFAULT ->
                                                      case leWord# [sat_s3GlV 4##] of {
                                                        __DEFAULT ->
                                                            case wild_s3GlU of {
                                                              __DEFAULT ->
                                                                  Text.ParserCombinators.ReadP.Fail [];
                                                              160## ->
                                                                  Text.ParserCombinators.ReadP.Look [lvl119_s3GlG];
                                                            };
                                                        1# ->
                                                            Text.ParserCombinators.ReadP.Look [lvl119_s3GlG];
                                                      };
                                                };
                                            32## ->
                                                Text.ParserCombinators.ReadP.Look [lvl119_s3GlG];
                                          };
                                    };
                              };
                        };
                    '&'# -> lvl116_s3Glx;
                  }; } in
        let {
          lvl120_s3GlY [InlPrag=NOUSERINLINE[0], Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
              [$wlvl1_s3GlI] \r [w2_s3GlZ]
                  case w2_s3GlZ of {
                    GHC.Types.C# ww1_s3Gm1 [Occ=Once] -> $wlvl1_s3GlI ww1_s3Gm1;
                  }; } in
        let {
          lvl121_s3Gm2 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl120_s3GlY]; } in
        let {
          lvl122_s3Gm3 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [k_s3Glw] \u [] Text.Read.Lex.lexChar2 k_s3Glw; } in
        let {
          sat_s3Gmf [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [k_s3Glw lvl122_s3Gm3] \r [a3_s3Gma]
                  case a3_s3Gma of wild_s3Gmb {
                    GHC.Types.C# x34_s3Gmc [Occ=Once!] ->
                        case x34_s3Gmc of {
                          __DEFAULT ->
                              let {
                                sat_s3Gme [Occ=Once] :: (GHC.Types.Char, GHC.Types.Bool)
                                [LclId] =
                                    CCCS (,)! [wild_s3Gmb GHC.Types.False];
                              } in  k_s3Glw sat_s3Gme;
                          '\\'# -> lvl122_s3Gm3;
                        };
                  }; } in
        let {
          sat_s3Gmg [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gmf]; } in
        let {
          sat_s3Gm8 [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [lvl121_s3Gm2] \r [a_s3Gm4]
                  case a_s3Gm4 of {
                    GHC.Types.C# y_s3Gm6 [Occ=Once!] ->
                        case y_s3Gm6 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '\\'# -> lvl121_s3Gm2;
                        };
                  }; } in
        let {
          sat_s3Gm9 [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gm8];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3Gm9 sat_s3Gmg;

body_r3yd5
  :: ([GHC.Types.Char] -> GHC.Base.String)
     -> forall b1.
        (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,C(U)><L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [f_s3Gmh k_s3Gmi]
        let {
          lvl116_s3Gmj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nOE
          [LclId] =
              [f_s3Gmh k_s3Gmi] \u []
                  let {
                    sat_s3Gmk [Occ=OnceL] :: GHC.Base.String
                    [LclId] =
                        [f_s3Gmh] \u [] f_s3Gmh GHC.Types.[]; } in
                  let {
                    sat_s3Gml [Occ=Once] :: Text.Read.Lex.Lexeme
                    [LclId] =
                        CCCS Text.Read.Lex.String! [sat_s3Gmk];
                  } in  k_s3Gmi sat_s3Gml; } in
        let {
          sat_s3Gmy [Occ=Once]
            :: (GHC.Types.Char, GHC.Types.Bool)
               -> Text.ParserCombinators.ReadP.P b1_X3nOE
          [LclId] =
              [f_s3Gmh k_s3Gmi lvl116_s3Gmj] \r [a3_s3Gmm]
                  case a3_s3Gmm of {
                    (,) c_s3Gmo [Occ=Once!] esc_s3Gmp [Occ=Once!] ->
                        case c_s3Gmo of wild1_s3Gmq {
                          GHC.Types.C# x34_s3Gmr [Occ=Once!] ->
                              let-no-escape {
                                $j_s3Gms [Occ=Once*T[0], Dmd=<L,1*U>]
                                  :: Text.ParserCombinators.ReadP.P b1_X3nOE
                                [LclId[JoinId(0)], Unf=OtherCon []] =
                                    [f_s3Gmh k_s3Gmi wild1_s3Gmq] \r []
                                        let {
                                          sat_s3Gmv [Occ=Once]
                                            :: [GHC.Types.Char] -> GHC.Base.String
                                          [LclId] =
                                              [f_s3Gmh wild1_s3Gmq] \r [x35_s3Gmt]
                                                  let {
                                                    sat_s3Gmu [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        CCCS :! [wild1_s3Gmq x35_s3Gmt];
                                                  } in  f_s3Gmh sat_s3Gmu;
                                        } in  body_r3yd5 sat_s3Gmv k_s3Gmi;
                              } in 
                                case x34_s3Gmr of {
                                  __DEFAULT -> $j_s3Gms;
                                  '"'# ->
                                      case esc_s3Gmp of {
                                        GHC.Types.False -> lvl116_s3Gmj;
                                        GHC.Types.True -> $j_s3Gms;
                                      };
                                };
                        };
                  };
        } in  lexStrItem_r3yd4 sat_s3Gmy;

lexExp_r3yd6
  :: forall b1.
     (GHC.Base.Maybe GHC.Integer.Type.Integer
      -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [k_s3Gmz]
        let {
          lvl116_s3GmA :: Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              [k_s3Gmz] \u []
                  let {
                    k1_s3GmB [Dmd=<L,C(U)>]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []] =
                        sat-only [k_s3Gmz] \r [a3_s3GmC]
                            let {
                              sat_s3GmK [Occ=Once]
                                :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_X3nPk
                              [LclId] =
                                  [k_s3Gmz a3_s3GmC] \r [a4_s3GmD]
                                      let {
                                        sat_s3GmI [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [a3_s3GmC a4_s3GmD] \u []
                                                case a3_s3GmC of {
                                                  GHC.Types.C# x34_s3GmF [Occ=Once!] ->
                                                      case x34_s3GmF of {
                                                        __DEFAULT ->
                                                            Text.Read.Lex.valInteger
                                                                Text.Read.Lex.numberToFixed1
                                                                a4_s3GmD;
                                                        '-'# ->
                                                            case
                                                                Text.Read.Lex.valInteger
                                                                    Text.Read.Lex.numberToFixed1
                                                                    a4_s3GmD
                                                            of
                                                            sat_s3GmH
                                                            { __DEFAULT ->
                                                                  GHC.Integer.Type.negateInteger
                                                                      sat_s3GmH;
                                                            };
                                                      };
                                                }; } in
                                      let {
                                        sat_s3GmJ [Occ=Once]
                                          :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                        [LclId] =
                                            CCCS GHC.Base.Just! [sat_s3GmI];
                                      } in  k_s3Gmz sat_s3GmJ;
                            } in 
                              case $wlexDigits_r3y9x lvl6_r3y9C sat_s3GmK of {
                                Unit# ww1_s3GmM [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3GmM];
                              }; } in
                  let {
                    sat_s3Gn6 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        [k_s3Gmz] \u []
                            let {
                              sat_s3Gn3 [Occ=Once]
                                :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_X3nPk
                              [LclId] =
                                  [k_s3Gmz] \r [a3_s3Gn0]
                                      let {
                                        sat_s3Gn1 [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [a3_s3Gn0] \u []
                                                Text.Read.Lex.valInteger
                                                    Text.Read.Lex.numberToFixed1 a3_s3Gn0; } in
                                      let {
                                        sat_s3Gn2 [Occ=Once]
                                          :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                        [LclId] =
                                            CCCS GHC.Base.Just! [sat_s3Gn1];
                                      } in  k_s3Gmz sat_s3Gn2;
                            } in 
                              case $wlexDigits_r3y9x lvl6_r3y9C sat_s3Gn3 of {
                                Unit# ww1_s3Gn5 [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3Gn5];
                              }; } in
                  let {
                    sat_s3GmX [Occ=OnceL]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        [k1_s3GmB] \r [a_s3GmT]
                            case a_s3GmT of wild1_s3GmU {
                              GHC.Types.C# y_s3GmV [Occ=Once!] ->
                                  case y_s3GmV of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    '+'# -> k1_s3GmB wild1_s3GmU;
                                  };
                            }; } in
                  let {
                    sat_s3GmY [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Get! [sat_s3GmX]; } in
                  let {
                    sat_s3GmR [Occ=OnceL]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        [k1_s3GmB] \r [a_s3GmN]
                            case a_s3GmN of wild1_s3GmO {
                              GHC.Types.C# y_s3GmP [Occ=Once!] ->
                                  case y_s3GmP of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    '-'# -> k1_s3GmB wild1_s3GmO;
                                  };
                            }; } in
                  let {
                    sat_s3GmS [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Get! [sat_s3GmR];
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                            sat_s3GmS sat_s3GmY
                    of
                    sat_s3GmZ
                    { __DEFAULT ->
                          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                              sat_s3GmZ sat_s3Gn6;
                    }; } in
        let {
          sat_s3Gnh [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              [lvl116_s3GmA] \r [a_s3Gnd]
                  case a_s3Gnd of {
                    GHC.Types.C# y_s3Gnf [Occ=Once!] ->
                        case y_s3Gnf of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'E'# -> lvl116_s3GmA;
                        };
                  }; } in
        let {
          sat_s3Gni [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gnh]; } in
        let {
          sat_s3Gnb [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              [lvl116_s3GmA] \r [a_s3Gn7]
                  case a_s3Gn7 of {
                    GHC.Types.C# y_s3Gn9 [Occ=Once!] ->
                        case y_s3Gn9 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'e'# -> lvl116_s3GmA;
                        };
                  }; } in
        let {
          sat_s3Gnc [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gnb];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3Gnc sat_s3Gni;

lvl114_r3yd7
  :: forall b.
     (GHC.Base.Maybe Text.Read.Lex.Digits
      -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [k_s3Gnj] k_s3Gnj GHC.Base.Nothing;

lvl115_r3yd8
  :: forall b.
     (GHC.Base.Maybe GHC.Integer.Type.Integer
      -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [k_s3Gnk] k_s3Gnk GHC.Base.Nothing;

$wlexDecNumber_r3yd9
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3Gnl]
        let {
          sat_s3Gnx [Occ=Once]
            :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xkr
          [LclId] =
              [w2_s3Gnl] \r [a3_s3Gnm]
                  let {
                    sat_s3Gnu [Occ=Once]
                      :: GHC.Base.Maybe Text.Read.Lex.Digits
                         -> Text.ParserCombinators.ReadP.P b1_s3xkr
                    [LclId] =
                        [w2_s3Gnl a3_s3Gnm] \r [a4_s3Gnn]
                            let {
                              sat_s3Gnr [Occ=Once]
                                :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                   -> Text.ParserCombinators.ReadP.P b1_s3xkr
                              [LclId] =
                                  [w2_s3Gnl a3_s3Gnm a4_s3Gnn] \r [a5_s3Gno]
                                      let {
                                        sat_s3Gnp [Occ=Once] :: Text.Read.Lex.Number
                                        [LclId] =
                                            CCCS Text.Read.Lex.MkDecimal! [a3_s3Gnm
                                                                           a4_s3Gnn
                                                                           a5_s3Gno]; } in
                                      let {
                                        sat_s3Gnq [Occ=Once] :: Text.Read.Lex.Lexeme
                                        [LclId] =
                                            CCCS Text.Read.Lex.Number! [sat_s3Gnp];
                                      } in  w2_s3Gnl sat_s3Gnq;
                            } in 
                              case
                                  Text.ParserCombinators.ReadP.$w<++
                                      lexExp_r3yd6 lvl115_r3yd8 sat_s3Gnr
                              of
                              { Unit# ww1_s3Gnt [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3Gnt];
                              };
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$w<++
                            lexFrac_r3y9E lvl114_r3yd7 sat_s3Gnu
                    of
                    { Unit# ww1_s3Gnw [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3Gnw];
                    };
        } in  $wlexDigits_r3y9x lvl6_r3y9C sat_s3Gnx;

lexDecNumber_r3yda
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3Gny]
        case $wlexDecNumber_r3yd9 w2_s3Gny of {
          Unit# ww1_s3GnA [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3GnA];
        };

Text.Read.Lex.expect2
  :: forall b.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [k_s3GnB]
        let {
          $wk_s3GnC [InlPrag=NOUSERINLINE[0], Occ=OnceL!, Dmd=<L,C(C1(U))>]
            :: GHC.Types.Char
               -> GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Arity=2, Str=<L,U(U)><S,1*U>, Unf=OtherCon []] =
              sat-only [k_s3GnB] \r [ww_s3GnD ww1_s3GnE]
                  let {
                    lvl116_s3GnF [Occ=OnceL*] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [k_s3GnB ww_s3GnD] \u []
                            let {
                              sat_s3GnG [Occ=Once] :: Text.Read.Lex.Lexeme
                              [LclId] =
                                  CCCS Text.Read.Lex.Char! [ww_s3GnD];
                            } in  k_s3GnB sat_s3GnG;
                  } in 
                    case ww1_s3GnE of {
                      GHC.Types.False ->
                          case ww_s3GnD of {
                            GHC.Types.C# x34_s3GnJ [Occ=Once!] ->
                                case x34_s3GnJ of {
                                  __DEFAULT ->
                                      let {
                                        sat_s3GnP [Occ=Once]
                                          :: GHC.Types.Char
                                             -> Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            [lvl116_s3GnF] \r [a_s3GnL]
                                                case a_s3GnL of {
                                                  GHC.Types.C# y_s3GnN [Occ=Once!] ->
                                                      case y_s3GnN of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Fail [];
                                                        '\''# -> lvl116_s3GnF;
                                                      };
                                                };
                                      } in  Text.ParserCombinators.ReadP.Get [sat_s3GnP];
                                  '\''# -> Text.ParserCombinators.ReadP.Fail [];
                                };
                          };
                      GHC.Types.True ->
                          let {
                            sat_s3GnU [Occ=Once]
                              :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                            [LclId] =
                                [lvl116_s3GnF] \r [a_s3GnQ]
                                    case a_s3GnQ of {
                                      GHC.Types.C# y_s3GnS [Occ=Once!] ->
                                          case y_s3GnS of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            '\''# -> lvl116_s3GnF;
                                          };
                                    };
                          } in  Text.ParserCombinators.ReadP.Get [sat_s3GnU];
                    }; } in
        let {
          k1_s3GnV [InlPrag=NOUSERINLINE[0], Occ=Once, Dmd=<L,C(U)>]
            :: (GHC.Types.Char, GHC.Types.Bool)
               -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Arity=1, Str=<S(LS),1*U(U(U),1*U)>, Unf=OtherCon []] =
              [$wk_s3GnC] \r [w2_s3GnW]
                  case w2_s3GnW of {
                    (,) ww1_s3GnY [Occ=Once] ww2_s3GnZ [Occ=Once] ->
                        $wk_s3GnC ww1_s3GnY ww2_s3GnZ;
                  }; } in
        let {
          lvl116_s3Go0 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              [k1_s3GnV] \u [] Text.Read.Lex.lexChar2 k1_s3GnV; } in
        let {
          lvl117_s3Go1 [Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
              [k_s3GnB lvl116_s3Go0] \r [a3_s3Go2]
                  case a3_s3Go2 of wild_s3Go3 {
                    GHC.Types.C# x34_s3Go4 [Occ=Once!] ->
                        case x34_s3Go4 of {
                          __DEFAULT ->
                              let {
                                lvl118_s3Go6 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
                                [LclId] =
                                    [k_s3GnB wild_s3Go3] \u []
                                        let {
                                          sat_s3Go7 [Occ=Once] :: Text.Read.Lex.Lexeme
                                          [LclId] =
                                              CCCS Text.Read.Lex.Char! [wild_s3Go3];
                                        } in  k_s3GnB sat_s3Go7; } in
                              let {
                                sat_s3Goc [Occ=Once]
                                  :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                                [LclId] =
                                    [lvl118_s3Go6] \r [a_s3Go8]
                                        case a_s3Go8 of {
                                          GHC.Types.C# y_s3Goa [Occ=Once!] ->
                                              case y_s3Goa of {
                                                __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                '\''# -> lvl118_s3Go6;
                                              };
                                        };
                              } in  Text.ParserCombinators.ReadP.Get [sat_s3Goc];
                          '\''# -> Text.ParserCombinators.ReadP.Fail [];
                          '\\'# -> lvl116_s3Go0;
                        };
                  }; } in
        let {
          lvl118_s3God [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl117_s3Go1]; } in
        let {
          sat_s3Gp8 [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              [k_s3GnB] \u []
                  let {
                    lvl119_s3Gok [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [k_s3GnB] \u [] body_r3yd5 GHC.Base.id k_s3GnB; } in
                  let {
                    sat_s3Gp7 [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [k_s3GnB] \u []
                            let {
                              sat_s3Gp6 [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                              [LclId] =
                                  [k_s3GnB] \u []
                                      let {
                                        sat_s3Gp5 [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            [k_s3GnB] \u []
                                                let {
                                                  sat_s3Gp4 [Occ=Once]
                                                    :: Text.ParserCombinators.ReadP.P b_X3nCK
                                                  [LclId] =
                                                      [k_s3GnB] \u []
                                                          case
                                                              Text.ParserCombinators.ReadP.$w<++
                                                                  lexHexOct_r3y9B
                                                                  lexDecNumber_r3yda
                                                                  k_s3GnB
                                                          of
                                                          { Unit# ww1_s3Gp3 [Occ=Once] ->
                                                                Text.ParserCombinators.ReadP.Look [ww1_s3Gp3];
                                                          }; } in
                                                let {
                                                  sat_s3Gp0 [Occ=Once]
                                                    :: GHC.Types.Char
                                                       -> Text.ParserCombinators.ReadP.P b_X3nCK
                                                  [LclId] =
                                                      [k_s3GnB] \r [a_s3GoJ]
                                                          case a_s3GoJ of wild_s3GoK {
                                                            GHC.Types.C# c#_s3GoL ->
                                                                case ord# [c#_s3GoL] of sat_s3GoN {
                                                                  __DEFAULT ->
                                                                      case
                                                                          __pkg_ccall base-4.11.0.0 [sat_s3GoN
                                                                                                     GHC.Prim.realWorld#]
                                                                      of
                                                                      { (#,#) _ [Occ=Dead]
                                                                              ds1_s3GoQ [Occ=Once!] ->
                                                                            let-no-escape {
                                                                              $j_s3GoR [Occ=Once*T[0],
                                                                                        Dmd=<L,1*U>]
                                                                                :: Text.ParserCombinators.ReadP.P
                                                                                     b_X3nCK
                                                                              [LclId[JoinId(0)],
                                                                               Unf=OtherCon []] =
                                                                                  [k_s3GnB
                                                                                   wild_s3GoK] \r []
                                                                                      let {
                                                                                        sat_s3GoV [Occ=Once]
                                                                                          :: GHC.Base.String
                                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                                  b_X3nCK
                                                                                        [LclId] =
                                                                                            [k_s3GnB
                                                                                             wild_s3GoK] \r [a3_s3GoS]
                                                                                                let {
                                                                                                  sat_s3GoT [Occ=Once]
                                                                                                    :: GHC.Base.String
                                                                                                  [LclId] =
                                                                                                      CCCS :! [wild_s3GoK
                                                                                                               a3_s3GoS]; } in
                                                                                                let {
                                                                                                  sat_s3GoU [Occ=Once]
                                                                                                    :: Text.Read.Lex.Lexeme
                                                                                                  [LclId] =
                                                                                                      CCCS Text.Read.Lex.Ident! [sat_s3GoT];
                                                                                                } in 
                                                                                                  k_s3GnB
                                                                                                      sat_s3GoU;
                                                                                      } in 
                                                                                        case
                                                                                            Text.ParserCombinators.ReadP.$wmunch
                                                                                                isIdfChar_r3y8W
                                                                                                sat_s3GoV
                                                                                        of
                                                                                        { Unit# ww1_s3GoX [Occ=Once] ->
                                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3GoX];
                                                                                        };
                                                                            } in 
                                                                              case ds1_s3GoQ of {
                                                                                __DEFAULT ->
                                                                                    $j_s3GoR;
                                                                                0# ->
                                                                                    case
                                                                                        c#_s3GoL
                                                                                    of
                                                                                    { __DEFAULT ->
                                                                                          Text.ParserCombinators.ReadP.Fail [];
                                                                                      '_'# ->
                                                                                          $j_s3GoR;
                                                                                    };
                                                                              };
                                                                      };
                                                                };
                                                          }; } in
                                                let {
                                                  sat_s3Gp1 [Occ=Once]
                                                    :: Text.ParserCombinators.ReadP.P b_X3nCK
                                                  [LclId] =
                                                      CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gp0];
                                                } in 
                                                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                                      sat_s3Gp1 sat_s3Gp4; } in
                                      let {
                                        sat_s3GoH [Occ=Once]
                                          :: GHC.Types.Char
                                             -> Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            [k_s3GnB] \r [a_s3Gox]
                                                case Text.Read.Lex.isSymbolChar a_s3Gox of {
                                                  GHC.Types.False ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                  GHC.Types.True ->
                                                      let {
                                                        sat_s3GoE [Occ=Once]
                                                          :: GHC.Base.String
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b_X3nCK
                                                        [LclId] =
                                                            [k_s3GnB a_s3Gox] \r [a3_s3Goz]
                                                                let {
                                                                  a4_s3GoA :: GHC.Base.String
                                                                  [LclId, Unf=OtherCon []] =
                                                                      CCCS :! [a_s3Gox a3_s3Goz];
                                                                } in 
                                                                  case
                                                                      GHC.List.elem
                                                                          GHC.Classes.$fEq[]_$s$fEq[]1
                                                                          a4_s3GoA
                                                                          reserved_ops29_r3y9q
                                                                  of
                                                                  { GHC.Types.False ->
                                                                        let {
                                                                          sat_s3GoC [Occ=Once]
                                                                            :: Text.Read.Lex.Lexeme
                                                                          [LclId] =
                                                                              CCCS Text.Read.Lex.Symbol! [a4_s3GoA];
                                                                        } in  k_s3GnB sat_s3GoC;
                                                                    GHC.Types.True ->
                                                                        let {
                                                                          sat_s3GoD [Occ=Once]
                                                                            :: Text.Read.Lex.Lexeme
                                                                          [LclId] =
                                                                              CCCS Text.Read.Lex.Punc! [a4_s3GoA];
                                                                        } in  k_s3GnB sat_s3GoD;
                                                                  };
                                                      } in 
                                                        case
                                                            Text.ParserCombinators.ReadP.$wmunch
                                                                Text.Read.Lex.isSymbolChar sat_s3GoE
                                                        of
                                                        { Unit# ww1_s3GoG [Occ=Once] ->
                                                              Text.ParserCombinators.ReadP.Look [ww1_s3GoG];
                                                        };
                                                }; } in
                                      let {
                                        sat_s3GoI [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Get! [sat_s3GoH];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3GoI sat_s3Gp5; } in
                            let {
                              sat_s3Gov [Occ=Once]
                                :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                              [LclId] =
                                  [k_s3GnB] \r [a_s3Gor]
                                      case
                                          GHC.List.elem
                                              GHC.Classes.$fEqChar
                                              a_s3Gor
                                              Text.Read.Lex.isSymbolChar3
                                      of
                                      { GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                                        GHC.Types.True ->
                                            let {
                                              sat_s3Got [Occ=Once] :: GHC.Base.String
                                              [LclId] =
                                                  CCCS :! [a_s3Gor GHC.Types.[]]; } in
                                            let {
                                              sat_s3Gou [Occ=Once] :: Text.Read.Lex.Lexeme
                                              [LclId] =
                                                  CCCS Text.Read.Lex.Punc! [sat_s3Got];
                                            } in  k_s3GnB sat_s3Gou;
                                      }; } in
                            let {
                              sat_s3Gow [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gov];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3Gow sat_s3Gp6; } in
                  let {
                    sat_s3Gop [Occ=Once]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [lvl119_s3Gok] \r [a_s3Gol]
                            case a_s3Gol of {
                              GHC.Types.C# y_s3Gon [Occ=Once!] ->
                                  case y_s3Gon of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    '"'# -> lvl119_s3Gok;
                                  };
                            }; } in
                  let {
                    sat_s3Goq [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gop];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3Goq sat_s3Gp7; } in
        let {
          sat_s3Goi [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              [lvl118_s3God] \r [a_s3Goe]
                  case a_s3Goe of {
                    GHC.Types.C# y_s3Gog [Occ=Once!] ->
                        case y_s3Gog of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '\''# -> lvl118_s3God;
                        };
                  }; } in
        let {
          sat_s3Goj [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Goi];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3Goj sat_s3Gp8;

Text.Read.Lex.$wlex [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w2_s3Gp9]
        let {
          lvl116_s3Gpa [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xkG
          [LclId] =
              [w2_s3Gp9] \u []
                  let {
                    lvl117_s3Gpb [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        [w2_s3Gp9] \u [] w2_s3Gp9 Text.Read.Lex.EOF; } in
                  let {
                    sat_s3Gpi [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        [w2_s3Gp9] \u [] Text.Read.Lex.expect2 w2_s3Gp9; } in
                  let {
                    sat_s3Gpg [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        [lvl117_s3Gpb] \r [a3_s3Gpc]
                            case a3_s3Gpc of {
                              [] -> lvl117_s3Gpb;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3Gph [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Gpg];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3Gph sat_s3Gpi; } in
        let {
          k_s3Gpj [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3xkG
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3Gpa] \r [a3_s3Gpk] lvl116_s3Gpa; } in
        let {
          sat_s3Gpm [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkG
          [LclId] =
              [k_s3Gpj] \r [a_s3Gpl]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3Gpl k_s3Gpj;
        } in  Unit# [sat_s3Gpm];

Text.Read.Lex.lex1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [w2_s3Gpn]
        case Text.Read.Lex.$wlex w2_s3Gpn of {
          Unit# ww1_s3Gpp [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3Gpp];
        };

Text.Read.Lex.lex
  :: Text.ParserCombinators.ReadP.ReadP Text.Read.Lex.Lexeme
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.lex1 eta_B1;

Text.Read.Lex.$wexpect [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Lexeme
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U><L,1*C1(U)>, Unf=OtherCon []] =
    [] \r [w2_s3Gpq w3_s3Gpr]
        let {
          lvl116_s3Gps [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_s3xkN
          [LclId] =
              [w2_s3Gpq w3_s3Gpr] \u []
                  let {
                    lvl117_s3Gpt :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [w3_s3Gpr] \u [] w3_s3Gpr GHC.Tuple.(); } in
                  let {
                    lvl118_s3Gpu [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [w2_s3Gpq lvl117_s3Gpt] \u []
                            case w2_s3Gpq of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                              Text.Read.Lex.EOF -> lvl117_s3Gpt;
                            }; } in
                  let {
                    sat_s3GpF [Occ=Once] :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [w2_s3Gpq lvl117_s3Gpt] \u []
                            let {
                              sat_s3GpE [Occ=Once]
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b_s3xkN
                              [LclId] =
                                  [w2_s3Gpq lvl117_s3Gpt] \r [a3_s3GpC]
                                      case Text.Read.Lex.$fEqLexeme_$c== a3_s3GpC w2_s3Gpq of {
                                        GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                                        GHC.Types.True -> lvl117_s3Gpt;
                                      };
                            } in  Text.Read.Lex.expect2 sat_s3GpE; } in
                  let {
                    sat_s3GpA [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [lvl118_s3Gpu] \r [a3_s3Gpw]
                            case a3_s3Gpw of {
                              [] -> lvl118_s3Gpu;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3GpB [Occ=Once] :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3GpA];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3GpB sat_s3GpF; } in
        let {
          k_s3GpG [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b_s3xkN
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3Gps] \r [a3_s3GpH] lvl116_s3Gps; } in
        let {
          sat_s3GpJ [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xkN
          [LclId] =
              [k_s3GpG] \r [a_s3GpI]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3GpI k_s3GpG;
        } in  Unit# [sat_s3GpJ];

Text.Read.Lex.expect1 [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Lexeme
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3GpK w3_s3GpL]
        case Text.Read.Lex.$wexpect w2_s3GpK w3_s3GpL of {
          Unit# ww1_s3GpN [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3GpN];
        };

Text.Read.Lex.expect
  :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.ReadP ()
[GblId, Arity=2, Str=<L,U><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.expect1 eta_B2 eta_B1;

Text.Read.Lex.$whsLex [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3GpO]
        let {
          lvl116_s3GpP [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xkT
          [LclId] =
              [w2_s3GpO] \u []
                  let {
                    lvl117_s3GpQ [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT
                    [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                        [w2_s3GpO] \r [s_s3GpR] w2_s3GpO s_s3GpR; } in
                  let {
                    lvl118_s3GpS
                      :: Text.ParserCombinators.ReadP.P
                           (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId, Unf=OtherCon []] =
                        CCCS Text.ParserCombinators.ReadP.Result! [lvl117_s3GpQ
                                                                   Text.ParserCombinators.ReadP.Fail]; } in
                  let {
                    sat_s3Gq1 [Occ=Once]
                      :: Text.ParserCombinators.ReadP.P
                           (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId] =
                        [lvl118_s3GpS] \u []
                            let {
                              sat_s3Gq0 [Occ=Once]
                                :: Text.Read.Lex.Lexeme
                                   -> Text.ParserCombinators.ReadP.P
                                        (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                              [LclId] =
                                  [lvl118_s3GpS] \r [a3_s3GpZ] lvl118_s3GpS;
                            } in  Text.Read.Lex.expect2 sat_s3Gq0; } in
                  let {
                    sat_s3GpX [Occ=OnceL]
                      :: GHC.Base.String
                         -> Text.ParserCombinators.ReadP.P
                              (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId] =
                        [lvl118_s3GpS] \r [a3_s3GpT]
                            case a3_s3GpT of {
                              [] -> lvl118_s3GpS;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3GpY [Occ=Once]
                      :: Text.ParserCombinators.ReadP.P
                           (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3GpX];
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                            sat_s3GpY sat_s3Gq1
                    of
                    sat_s3Gq2
                    { __DEFAULT ->
                          Text.ParserCombinators.ReadP.gather_gath GHC.Base.id sat_s3Gq2;
                    }; } in
        let {
          k_s3Gq3 [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3xkT
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3GpP] \r [a3_s3Gq4] lvl116_s3GpP; } in
        let {
          sat_s3Gq6 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT
          [LclId] =
              [k_s3Gq3] \r [a_s3Gq5]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3Gq5 k_s3Gq3;
        } in  Unit# [sat_s3Gq6];

Text.Read.Lex.hsLex1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3Gq7]
        case Text.Read.Lex.$whsLex w2_s3Gq7 of {
          Unit# ww1_s3Gq9 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3Gq9];
        };

Text.Read.Lex.hsLex
  :: Text.ParserCombinators.ReadP.ReadP GHC.Base.String
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.hsLex1 eta_B1;

Text.Read.Lex.MkNumber
  :: GHC.Types.Int -> Text.Read.Lex.Digits -> Text.Read.Lex.Number
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.MkNumber [eta_B2 eta_B1];

Text.Read.Lex.MkDecimal
  :: Text.Read.Lex.Digits
     -> GHC.Base.Maybe Text.Read.Lex.Digits
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> Text.Read.Lex.Number
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Read.Lex.MkDecimal [eta_B3 eta_B2 eta_B1];

Text.Read.Lex.Char :: GHC.Types.Char -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Char [eta_B1];

Text.Read.Lex.String :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.String [eta_B1];

Text.Read.Lex.Punc :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Punc [eta_B1];

Text.Read.Lex.Ident :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m4,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Ident [eta_B1];

Text.Read.Lex.Symbol :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m5,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Symbol [eta_B1];

Text.Read.Lex.Number
  :: Text.Read.Lex.Number -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m6,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Number [eta_B1];

Text.Read.Lex.EOF :: Text.Read.Lex.Lexeme
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.EOF! [];


==================== STG syntax: ====================
2018-03-16 15:58:21.921993632 UTC

Text.Read.Lex.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Text.Read.Lex.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$trModule4];

Text.Read.Lex.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text.Read.Lex"#;

Text.Read.Lex.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$trModule2];

Text.Read.Lex.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Text.Read.Lex.$trModule3
                                     Text.Read.Lex.$trModule1];

$krep_r3y8E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep1_r3y8F :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_r3y8G :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep3_r3y8H :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r3y8E GHC.Types.[]];

$krep4_r3y8I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep3_r3y8H];

$krep5_r3y8J :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r3y8F GHC.Types.[]];

$krep6_r3y8K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep5_r3y8J];

$krep7_r3y8L :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_r3y8K GHC.Types.[]];

$krep8_r3y8M :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep7_r3y8L];

$krep9_r3y8N :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r3y8G GHC.Types.[]];

$krep10_r3y8O :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep9_r3y8N];

Text.Read.Lex.$tcNumber2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Number"#;

Text.Read.Lex.$tcNumber1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tcNumber2];

Text.Read.Lex.$tcNumber :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [309030926258572567##
                                    15861928963352354800##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tcNumber1
                                    0#
                                    GHC.Types.krep$*];

$krep11_r3y8P :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Read.Lex.$tcNumber
                                              GHC.Types.[]];

$krep12_r3y8Q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r3y8I $krep11_r3y8P];

$krep13_r3y8R :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r3y8M $krep12_r3y8Q];

Text.Read.Lex.$tc'MkDecimal1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r3y8K $krep13_r3y8R];

Text.Read.Lex.$tc'MkDecimal3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MkDecimal"#;

Text.Read.Lex.$tc'MkDecimal2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'MkDecimal3];

Text.Read.Lex.$tc'MkDecimal :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3768064156751246198##
                                    12661213050981530502##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'MkDecimal2
                                    0#
                                    Text.Read.Lex.$tc'MkDecimal1];

$krep14_r3y8S :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_r3y8K $krep11_r3y8P];

Text.Read.Lex.$tc'MkNumber1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r3y8F $krep14_r3y8S];

Text.Read.Lex.$tc'MkNumber3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MkNumber"#;

Text.Read.Lex.$tc'MkNumber2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'MkNumber3];

Text.Read.Lex.$tc'MkNumber :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13396293166029931455##
                                    9655480518931438202##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'MkNumber2
                                    0#
                                    Text.Read.Lex.$tc'MkNumber1];

Text.Read.Lex.$tcLexeme2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Lexeme"#;

Text.Read.Lex.$tcLexeme1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tcLexeme2];

Text.Read.Lex.$tcLexeme :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [80462090517814070##
                                    11862718491065697853##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tcLexeme1
                                    0#
                                    GHC.Types.krep$*];

Text.Read.Lex.$tc'EOF1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Read.Lex.$tcLexeme
                                              GHC.Types.[]];

Text.Read.Lex.$tc'EOF3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'EOF"#;

Text.Read.Lex.$tc'EOF2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'EOF3];

Text.Read.Lex.$tc'EOF :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3510729917506789415##
                                    3927434500167946503##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'EOF2
                                    0#
                                    Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'Ident1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_r3y8O
                                         Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'String2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'String"#;

Text.Read.Lex.$tc'String1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'String2];

Text.Read.Lex.$tc'String :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4234975262003182519##
                                    13764813366371540099##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'String1
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Punc2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Punc"#;

Text.Read.Lex.$tc'Punc1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Punc2];

Text.Read.Lex.$tc'Punc :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12518860736485891069##
                                    4367633479442506190##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Punc1
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Ident3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Ident"#;

Text.Read.Lex.$tc'Ident2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Ident3];

Text.Read.Lex.$tc'Ident :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17378133866674838049##
                                    11361322998352874125##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Ident2
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Symbol2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Symbol"#;

Text.Read.Lex.$tc'Symbol1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Symbol2];

Text.Read.Lex.$tc'Symbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [434905475898525586##
                                    17609692850475477756##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Symbol1
                                    0#
                                    Text.Read.Lex.$tc'Ident1];

Text.Read.Lex.$tc'Char1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_r3y8G
                                         Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'Char3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Char"#;

Text.Read.Lex.$tc'Char2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Char3];

Text.Read.Lex.$tc'Char :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4794546904228625478##
                                    396576625805862141##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Char2
                                    0#
                                    Text.Read.Lex.$tc'Char1];

Text.Read.Lex.$tc'Number1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r3y8P
                                         Text.Read.Lex.$tc'EOF1];

Text.Read.Lex.$tc'Number3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Number"#;

Text.Read.Lex.$tc'Number2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Read.Lex.$tc'Number3];

Text.Read.Lex.$tc'Number :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3115835552307058655##
                                    14198768466951480548##
                                    Text.Read.Lex.$trModule
                                    Text.Read.Lex.$tc'Number2
                                    0#
                                    Text.Read.Lex.$tc'Number1];

Text.Read.Lex.$fShowLexeme9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MkDecimal "#;

Text.Read.Lex.$fShowLexeme8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.$fShowLexeme9;

Text.Read.Lex.$fShowLexeme10 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

Text.Read.Lex.$fShowLexeme11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MkNumber "#;

Text.Read.Lex.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> Text.Read.Lex.Number -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s3G25 w2_s3G26]
        case w2_s3G26 of {
          Text.Read.Lex.MkNumber b1_s3G28 [Occ=OnceL!]
                                 b2_s3G29 [Occ=OnceL!] ->
              let {
                p_s3G2a [Occ=OnceL*] :: GHC.Show.ShowS
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    [b1_s3G28 b2_s3G29] \r [x34_s3G2b]
                        let {
                          sat_s3G2G [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [b1_s3G28 b2_s3G29 x34_s3G2b] \u []
                                  case b1_s3G28 of {
                                    GHC.Types.I# ww3_s3G2d [Occ=Once] ->
                                        let {
                                          sat_s3G2B [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [b2_s3G29 x34_s3G2b] \u []
                                                  case b2_s3G29 of {
                                                    [] ->
                                                        GHC.CString.unpackAppendCString#
                                                            GHC.Show.showList__4 x34_s3G2b;
                                                    : x35_s3G2f [Occ=Once!] xs_s3G2g [Occ=Once] ->
                                                        let {
                                                          sat_s3G2A [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [x34_s3G2b x35_s3G2f xs_s3G2g] \u []
                                                                  case x35_s3G2f of {
                                                                    GHC.Types.I# ww5_s3G2i [Occ=Once] ->
                                                                        let {
                                                                          sat_s3G2w [Occ=Once]
                                                                            :: GHC.Base.String
                                                                          [LclId] =
                                                                              [x34_s3G2b
                                                                               xs_s3G2g] \u []
                                                                                  let {
                                                                                    lvl116_s3G2j [Occ=OnceL]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId,
                                                                                     Unf=OtherCon []] =
                                                                                        CCCS :! [GHC.Show.showList__2
                                                                                                 x34_s3G2b]; } in
                                                                                  let {
                                                                                    showl_s3G2k [Occ=LoopBreaker]
                                                                                      :: [GHC.Types.Int]
                                                                                         -> GHC.Base.String
                                                                                    [LclId,
                                                                                     Arity=1,
                                                                                     Str=<S,1*U>,
                                                                                     Unf=OtherCon []] =
                                                                                        sat-only [lvl116_s3G2j
                                                                                                  showl_s3G2k] \r [ds2_s3G2l]
                                                                                            case
                                                                                                ds2_s3G2l
                                                                                            of
                                                                                            { [] ->
                                                                                                  lvl116_s3G2j;
                                                                                              : y_s3G2n [Occ=Once!]
                                                                                                ys_s3G2o [Occ=Once] ->
                                                                                                  let {
                                                                                                    sat_s3G2v [Occ=Once]
                                                                                                      :: [GHC.Types.Char]
                                                                                                    [LclId] =
                                                                                                        [showl_s3G2k
                                                                                                         y_s3G2n
                                                                                                         ys_s3G2o] \u []
                                                                                                            case
                                                                                                                y_s3G2n
                                                                                                            of
                                                                                                            { GHC.Types.I# ww7_s3G2q [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_s3G2r [Occ=Once]
                                                                                                                      :: GHC.Base.String
                                                                                                                    [LclId] =
                                                                                                                        [showl_s3G2k
                                                                                                                         ys_s3G2o] \u []
                                                                                                                            showl_s3G2k
                                                                                                                                ys_s3G2o;
                                                                                                                  } in 
                                                                                                                    case
                                                                                                                        GHC.Show.$wshowSignedInt
                                                                                                                            0#
                                                                                                                            ww7_s3G2q
                                                                                                                            sat_s3G2r
                                                                                                                    of
                                                                                                                    { (#,#) ww9_s3G2t [Occ=Once]
                                                                                                                            ww4_s3G2u [Occ=Once] ->
                                                                                                                          : [ww9_s3G2t
                                                                                                                             ww4_s3G2u];
                                                                                                                    };
                                                                                                            };
                                                                                                  } in 
                                                                                                    : [GHC.Show.showList__1
                                                                                                       sat_s3G2v];
                                                                                            };
                                                                                  } in 
                                                                                    showl_s3G2k
                                                                                        xs_s3G2g;
                                                                        } in 
                                                                          case
                                                                              GHC.Show.$wshowSignedInt
                                                                                  0#
                                                                                  ww5_s3G2i
                                                                                  sat_s3G2w
                                                                          of
                                                                          { (#,#) ww7_s3G2y [Occ=Once]
                                                                                  ww4_s3G2z [Occ=Once] ->
                                                                                : [ww7_s3G2y
                                                                                   ww4_s3G2z];
                                                                          };
                                                                  };
                                                        } in  : [GHC.Show.showList__3 sat_s3G2A];
                                                  }; } in
                                        let {
                                          sat_s3G2C [Occ=Once] :: GHC.Base.String
                                          [LclId] =
                                              CCCS :! [GHC.Show.showSpace1 sat_s3G2B];
                                        } in 
                                          case GHC.Show.$wshowSignedInt 11# ww3_s3G2d sat_s3G2C of {
                                            (#,#) ww5_s3G2E [Occ=Once] ww6_s3G2F [Occ=Once] ->
                                                : [ww5_s3G2E ww6_s3G2F];
                                          };
                                  };
                        } in 
                          GHC.CString.unpackAppendCString#
                              Text.Read.Lex.$fShowLexeme11 sat_s3G2G;
              } in 
                case >=# [ww_s3G25 11#] of {
                  __DEFAULT -> p_s3G2a;
                  1# ->
                      let {
                        sat_s3G2L [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p_s3G2a] \r [x34_s3G2I]
                                let {
                                  sat_s3G2K [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p_s3G2a x34_s3G2I] \u []
                                          let {
                                            sat_s3G2J [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                CCCS :! [GHC.Show.$fShow(,)2 x34_s3G2I];
                                          } in  p_s3G2a sat_s3G2J;
                                } in  : [GHC.Show.$fShow(,)4 sat_s3G2K];
                      } in  sat_s3G2L;
                };
          Text.Read.Lex.MkDecimal b1_s3G2M [Occ=OnceL]
                                  b2_s3G2N [Occ=Once]
                                  b3_s3G2O [Occ=Once] ->
              let {
                f_s3G2P [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [b2_s3G2N] \u []
                        GHC.Show.$fShowMaybe_$cshowsPrec
                            GHC.Show.$fShow[]_$s$fShow[]
                            Text.Read.Lex.$fShowLexeme10
                            b2_s3G2N; } in
              let {
                g_s3G2Q [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [b3_s3G2O] \u []
                        GHC.Show.$fShowMaybe_$cshowsPrec
                            GHC.Show.$fShowInteger Text.Read.Lex.$fShowLexeme10 b3_s3G2O; } in
              let {
                g1_s3G2R [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [b1_s3G2M f_s3G2P g_s3G2Q] \r [x34_s3G2S]
                        let {
                          sat_s3G2V [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [f_s3G2P g_s3G2Q x34_s3G2S] \u []
                                  let {
                                    sat_s3G2T [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [g_s3G2Q x34_s3G2S] \u [] g_s3G2Q x34_s3G2S; } in
                                  let {
                                    sat_s3G2U [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        CCCS :! [GHC.Show.showSpace1 sat_s3G2T];
                                  } in  f_s3G2P sat_s3G2U; } in
                        let {
                          sat_s3G2W [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.showSpace1 sat_s3G2V];
                        } in  GHC.Show.showList__ GHC.Show.$fShowInt1 b1_s3G2M sat_s3G2W;
              } in 
                case >=# [ww_s3G25 11#] of {
                  __DEFAULT ->
                      let {
                        sat_s3G30 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [g1_s3G2R] \r [x34_s3G2Y]
                                let {
                                  sat_s3G2Z [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [g1_s3G2R x34_s3G2Y] \s [] g1_s3G2R x34_s3G2Y;
                                } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme8 sat_s3G2Z;
                      } in  sat_s3G30;
                  1# ->
                      let {
                        sat_s3G35 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [g1_s3G2R] \r [x34_s3G31]
                                let {
                                  sat_s3G34 [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [g1_s3G2R x34_s3G31] \u []
                                          let {
                                            sat_s3G33 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [g1_s3G2R x34_s3G31] \s []
                                                    let {
                                                      sat_s3G32 [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          CCCS :! [GHC.Show.$fShow(,)2 x34_s3G31];
                                                    } in  g1_s3G2R sat_s3G32;
                                          } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme8 sat_s3G33;
                                } in  : [GHC.Show.$fShow(,)4 sat_s3G34];
                      } in  sat_s3G35;
                };
        };

Text.Read.Lex.$fShowNumber_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> Text.Read.Lex.Number -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [w2_s3G36 w3_s3G37]
        case w2_s3G36 of {
          GHC.Types.I# ww1_s3G39 [Occ=Once] ->
              Text.Read.Lex.$w$cshowsPrec ww1_s3G39 w3_s3G37;
        };

Text.Read.Lex.$fShowLexeme2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Text.Read.Lex.$fShowNumber_$cshow
  :: Text.Read.Lex.Number -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x34_s3G3a]
        Text.Read.Lex.$w$cshowsPrec 0# x34_s3G3a GHC.Types.[];

Text.Read.Lex.$fShowNumber1
  :: Text.Read.Lex.Number -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w2_s3G3b] Text.Read.Lex.$w$cshowsPrec 0# w2_s3G3b;

Text.Read.Lex.$fShowNumber_$cshowList
  :: [Text.Read.Lex.Number] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s3G3c s_s3G3d]
        GHC.Show.showList__ Text.Read.Lex.$fShowNumber1 ls_s3G3c s_s3G3d;

Text.Read.Lex.$fShowNumber [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Text.Read.Lex.Number
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Text.Read.Lex.$fShowNumber_$cshowsPrec
                                    Text.Read.Lex.$fShowNumber_$cshow
                                    Text.Read.Lex.$fShowNumber_$cshowList];

Text.Read.Lex.$fShowLexeme7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Number "#;

Text.Read.Lex.$fShowLexeme6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.$fShowLexeme7;

Text.Read.Lex.$fShowLexeme5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EOF"#;

Text.Read.Lex.$fShowLexeme4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.$fShowLexeme5;

Text.Read.Lex.$fShowLexeme3 :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ Text.Read.Lex.$fShowLexeme4 eta_B1;

Text.Read.Lex.$fShowLexeme16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Char "#;

Text.Read.Lex.$fShowLexeme15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "String "#;

Text.Read.Lex.$fShowLexeme14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Punc "#;

Text.Read.Lex.$fShowLexeme13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Ident "#;

Text.Read.Lex.$fShowLexeme12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Symbol "#;

Text.Read.Lex.$fShowLexeme_$cshowsPrec
  :: GHC.Types.Int -> Text.Read.Lex.Lexeme -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [a_s3G3e ds_s3G3f]
        case ds_s3G3f of {
          Text.Read.Lex.Char b1_s3G3h [Occ=OnceL*!] ->
              case a_s3G3e of {
                GHC.Types.I# x34_s3G3j [Occ=Once] ->
                    case >=# [x34_s3G3j 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3G3p [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G3h] \r [x35_s3G3l]
                                    let {
                                      sat_s3G3o [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G3h x35_s3G3l] \u []
                                              case b1_s3G3h of {
                                                GHC.Types.C# ww1_s3G3n [Occ=Once] ->
                                                    GHC.Show.$w$cshowsPrec3 ww1_s3G3n x35_s3G3l;
                                              };
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme16 sat_s3G3o;
                          } in  sat_s3G3p;
                      1# ->
                          let {
                            sat_s3G3w [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G3h] \r [x35_s3G3q]
                                    let {
                                      sat_s3G3v [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G3h x35_s3G3q] \u []
                                              let {
                                                sat_s3G3u [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3G3h x35_s3G3q] \u []
                                                        case b1_s3G3h of {
                                                          GHC.Types.C# ww1_s3G3s [Occ=Once] ->
                                                              let {
                                                                sat_s3G3t [Occ=Once]
                                                                  :: GHC.Base.String
                                                                [LclId] =
                                                                    CCCS :! [GHC.Show.$fShow(,)2
                                                                             x35_s3G3q];
                                                              } in 
                                                                GHC.Show.$w$cshowsPrec3
                                                                    ww1_s3G3s sat_s3G3t;
                                                        };
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme16 sat_s3G3u;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3G3v];
                          } in  sat_s3G3w;
                    };
              };
          Text.Read.Lex.String b1_s3G3x [Occ=OnceL*] ->
              case a_s3G3e of {
                GHC.Types.I# x34_s3G3z [Occ=Once] ->
                    case >=# [x34_s3G3z 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3G3F [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G3x] \r [x35_s3G3B]
                                    let {
                                      sat_s3G3D [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G3x x35_s3G3B] \u []
                                              let {
                                                sat_s3G3C [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3G3B];
                                              } in  GHC.Show.showLitString b1_s3G3x sat_s3G3C; } in
                                    let {
                                      sat_s3G3E [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3G3D];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme15 sat_s3G3E;
                          } in  sat_s3G3F;
                      1# ->
                          let {
                            sat_s3G3M [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G3x] \r [x35_s3G3G]
                                    let {
                                      sat_s3G3L [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G3x x35_s3G3G] \u []
                                              let {
                                                sat_s3G3J [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3G3x x35_s3G3G] \u []
                                                        let {
                                                          sat_s3G3H [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3G3G]; } in
                                                        let {
                                                          sat_s3G3I [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3G3H];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3G3x sat_s3G3I; } in
                                              let {
                                                sat_s3G3K [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G3J];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme15 sat_s3G3K;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3G3L];
                          } in  sat_s3G3M;
                    };
              };
          Text.Read.Lex.Punc b1_s3G3N [Occ=OnceL*] ->
              case a_s3G3e of {
                GHC.Types.I# x34_s3G3P [Occ=Once] ->
                    case >=# [x34_s3G3P 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3G3V [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G3N] \r [x35_s3G3R]
                                    let {
                                      sat_s3G3T [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G3N x35_s3G3R] \u []
                                              let {
                                                sat_s3G3S [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3G3R];
                                              } in  GHC.Show.showLitString b1_s3G3N sat_s3G3S; } in
                                    let {
                                      sat_s3G3U [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3G3T];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme14 sat_s3G3U;
                          } in  sat_s3G3V;
                      1# ->
                          let {
                            sat_s3G42 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G3N] \r [x35_s3G3W]
                                    let {
                                      sat_s3G41 [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G3N x35_s3G3W] \u []
                                              let {
                                                sat_s3G3Z [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3G3N x35_s3G3W] \u []
                                                        let {
                                                          sat_s3G3X [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3G3W]; } in
                                                        let {
                                                          sat_s3G3Y [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3G3X];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3G3N sat_s3G3Y; } in
                                              let {
                                                sat_s3G40 [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G3Z];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme14 sat_s3G40;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3G41];
                          } in  sat_s3G42;
                    };
              };
          Text.Read.Lex.Ident b1_s3G43 [Occ=OnceL*] ->
              case a_s3G3e of {
                GHC.Types.I# x34_s3G45 [Occ=Once] ->
                    case >=# [x34_s3G45 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3G4b [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G43] \r [x35_s3G47]
                                    let {
                                      sat_s3G49 [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G43 x35_s3G47] \u []
                                              let {
                                                sat_s3G48 [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3G47];
                                              } in  GHC.Show.showLitString b1_s3G43 sat_s3G48; } in
                                    let {
                                      sat_s3G4a [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3G49];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme13 sat_s3G4a;
                          } in  sat_s3G4b;
                      1# ->
                          let {
                            sat_s3G4i [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G43] \r [x35_s3G4c]
                                    let {
                                      sat_s3G4h [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G43 x35_s3G4c] \u []
                                              let {
                                                sat_s3G4f [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3G43 x35_s3G4c] \u []
                                                        let {
                                                          sat_s3G4d [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3G4c]; } in
                                                        let {
                                                          sat_s3G4e [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3G4d];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3G43 sat_s3G4e; } in
                                              let {
                                                sat_s3G4g [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G4f];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme13 sat_s3G4g;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3G4h];
                          } in  sat_s3G4i;
                    };
              };
          Text.Read.Lex.Symbol b1_s3G4j [Occ=OnceL*] ->
              case a_s3G3e of {
                GHC.Types.I# x34_s3G4l [Occ=Once] ->
                    case >=# [x34_s3G4l 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s3G4r [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G4j] \r [x35_s3G4n]
                                    let {
                                      sat_s3G4p [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G4j x35_s3G4n] \u []
                                              let {
                                                sat_s3G4o [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 x35_s3G4n];
                                              } in  GHC.Show.showLitString b1_s3G4j sat_s3G4o; } in
                                    let {
                                      sat_s3G4q [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)3 sat_s3G4p];
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          Text.Read.Lex.$fShowLexeme12 sat_s3G4q;
                          } in  sat_s3G4r;
                      1# ->
                          let {
                            sat_s3G4y [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                            [LclId] =
                                [b1_s3G4j] \r [x35_s3G4s]
                                    let {
                                      sat_s3G4x [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [b1_s3G4j x35_s3G4s] \u []
                                              let {
                                                sat_s3G4v [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [b1_s3G4j x35_s3G4s] \u []
                                                        let {
                                                          sat_s3G4t [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                       x35_s3G4s]; } in
                                                        let {
                                                          sat_s3G4u [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_s3G4t];
                                                        } in 
                                                          GHC.Show.showLitString
                                                              b1_s3G4j sat_s3G4u; } in
                                              let {
                                                sat_s3G4w [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G4v];
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    Text.Read.Lex.$fShowLexeme12 sat_s3G4w;
                                    } in  : [GHC.Show.$fShow(,)4 sat_s3G4x];
                          } in  sat_s3G4y;
                    };
              };
          Text.Read.Lex.Number b1_s3G4z [Occ=Once] ->
              case a_s3G3e of {
                GHC.Types.I# x34_s3G4B [Occ=Once] ->
                    let {
                      g_s3G4C [Occ=OnceL*!, Dmd=<L,C(U)>]
                        :: GHC.Base.String -> GHC.Base.String
                      [LclId] =
                          [b1_s3G4z] \u [] Text.Read.Lex.$w$cshowsPrec 11# b1_s3G4z;
                    } in 
                      case >=# [x34_s3G4B 11#] of {
                        __DEFAULT ->
                            let {
                              sat_s3G4G [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s3G4C] \r [x35_s3G4E]
                                      let {
                                        sat_s3G4F [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s3G4C x35_s3G4E] \s [] g_s3G4C x35_s3G4E;
                                      } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme6 sat_s3G4F;
                            } in  sat_s3G4G;
                        1# ->
                            let {
                              sat_s3G4L [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_s3G4C] \r [x35_s3G4H]
                                      let {
                                        sat_s3G4K [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_s3G4C x35_s3G4H] \u []
                                                let {
                                                  sat_s3G4J [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [g_s3G4C x35_s3G4H] \s []
                                                          let {
                                                            sat_s3G4I [Occ=Once] :: GHC.Base.String
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)2
                                                                         x35_s3G4H];
                                                          } in  g_s3G4C sat_s3G4I;
                                                } in 
                                                  GHC.Base.++ Text.Read.Lex.$fShowLexeme6 sat_s3G4J;
                                      } in  : [GHC.Show.$fShow(,)4 sat_s3G4K];
                            } in  sat_s3G4L;
                      };
              };
          Text.Read.Lex.EOF -> Text.Read.Lex.$fShowLexeme3;
        };

Text.Read.Lex.$fShowLexeme17 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)3 GHC.Types.[]];

Text.Read.Lex.$fShowLexeme_$cshow
  :: Text.Read.Lex.Lexeme -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x34_s3G4M]
        case x34_s3G4M of {
          Text.Read.Lex.Char b1_s3G4O [Occ=Once!] ->
              let {
                sat_s3G4R [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3G4O] \u []
                        case b1_s3G4O of {
                          GHC.Types.C# ww1_s3G4Q [Occ=Once] ->
                              GHC.Show.$w$cshowsPrec3 ww1_s3G4Q GHC.Types.[];
                        };
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme16 sat_s3G4R;
          Text.Read.Lex.String b1_s3G4S [Occ=Once] ->
              let {
                sat_s3G4T [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3G4S] \u []
                        GHC.Show.showLitString b1_s3G4S Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3G4U [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G4T];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme15 sat_s3G4U;
          Text.Read.Lex.Punc b1_s3G4V [Occ=Once] ->
              let {
                sat_s3G4W [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3G4V] \u []
                        GHC.Show.showLitString b1_s3G4V Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3G4X [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G4W];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme14 sat_s3G4X;
          Text.Read.Lex.Ident b1_s3G4Y [Occ=Once] ->
              let {
                sat_s3G4Z [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3G4Y] \u []
                        GHC.Show.showLitString b1_s3G4Y Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3G50 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G4Z];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme13 sat_s3G50;
          Text.Read.Lex.Symbol b1_s3G51 [Occ=Once] ->
              let {
                sat_s3G52 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3G51] \u []
                        GHC.Show.showLitString b1_s3G51 Text.Read.Lex.$fShowLexeme17; } in
              let {
                sat_s3G53 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [GHC.Show.$fShow(,)3 sat_s3G52];
              } in 
                GHC.CString.unpackAppendCString#
                    Text.Read.Lex.$fShowLexeme12 sat_s3G53;
          Text.Read.Lex.Number b1_s3G54 [Occ=Once] ->
              let {
                sat_s3G55 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s3G54] \s []
                        Text.Read.Lex.$w$cshowsPrec 11# b1_s3G54 GHC.Types.[];
              } in  GHC.Base.++ Text.Read.Lex.$fShowLexeme6 sat_s3G55;
          Text.Read.Lex.EOF -> Text.Read.Lex.$fShowLexeme4;
        };

Text.Read.Lex.$fShowLexeme1
  :: Text.Read.Lex.Lexeme -> GHC.Show.ShowS
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.Read.Lex.$fShowLexeme_$cshowsPrec
            Text.Read.Lex.$fShowLexeme2 eta_B1;

Text.Read.Lex.$fShowLexeme_$cshowList
  :: [Text.Read.Lex.Lexeme] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s3G56 s_s3G57]
        GHC.Show.showList__ Text.Read.Lex.$fShowLexeme1 ls_s3G56 s_s3G57;

Text.Read.Lex.$fShowLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Text.Read.Lex.Lexeme
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Text.Read.Lex.$fShowLexeme_$cshowsPrec
                                    Text.Read.Lex.$fShowLexeme_$cshow
                                    Text.Read.Lex.$fShowLexeme_$cshowList];

Text.Read.Lex.isSymbolChar4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ",;()[]{}`"#;

Text.Read.Lex.isSymbolChar3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.isSymbolChar4;

Text.Read.Lex.isSymbolChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'\""#;

Text.Read.Lex.isSymbolChar1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.isSymbolChar2;

Text.Read.Lex.isSymbolChar :: GHC.Types.Char -> GHC.Types.Bool
[GblId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [c_s3G58]
        case
            GHC.List.elem
                GHC.Classes.$fEqChar c_s3G58 Text.Read.Lex.isSymbolChar3
        of
        { GHC.Types.False ->
              case c_s3G58 of ww_s3G5a {
                GHC.Types.C# ww1_s3G5b ->
                    case GHC.Unicode.$wgeneralCategory ww1_s3G5b of {
                      __DEFAULT -> GHC.Types.False [];
                      GHC.Unicode.ConnectorPunctuation ->
                          case ww1_s3G5b of {
                            __DEFAULT -> GHC.Types.True [];
                            '_'# -> GHC.Types.False [];
                          };
                      GHC.Unicode.DashPunctuation -> GHC.Types.True [];
                      GHC.Unicode.OtherPunctuation ->
                          case
                              GHC.List.elem
                                  GHC.Classes.$fEqChar ww_s3G5a Text.Read.Lex.isSymbolChar1
                          of
                          { GHC.Types.False -> GHC.Types.True [];
                            GHC.Types.True -> GHC.Types.False [];
                          };
                      GHC.Unicode.MathSymbol -> GHC.Types.True [];
                      GHC.Unicode.CurrencySymbol -> GHC.Types.True [];
                      GHC.Unicode.ModifierSymbol -> GHC.Types.True [];
                      GHC.Unicode.OtherSymbol -> GHC.Types.True [];
                    };
              };
          GHC.Types.True -> GHC.Types.False [];
        };

lvl_r3y8T :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "_'"#;

lvl1_r3y8U :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_r3y8T;

$wisIdfChar_r3y8V :: GHC.Prim.Char# -> GHC.Types.Bool
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [ww_s3G5f]
        case ord# [ww_s3G5f] of sat_s3G5h {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_s3G5h GHC.Prim.realWorld#] of {
                Unit# ds1_s3G5k [Occ=Once!] ->
                    case ds1_s3G5k of {
                      __DEFAULT -> GHC.Types.True [];
                      0# ->
                          let {
                            sat_s3G5m [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [ww_s3G5f];
                          } in  GHC.List.elem GHC.Classes.$fEqChar sat_s3G5m lvl1_r3y8U;
                    };
              };
        };

isIdfChar_r3y8W :: GHC.Types.Char -> GHC.Types.Bool
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w2_s3G5n]
        case w2_s3G5n of {
          GHC.Types.C# ww1_s3G5p [Occ=Once] -> $wisIdfChar_r3y8V ww1_s3G5p;
        };

reserved_ops_r3y8X :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ".."#;

reserved_ops1_r3y8Y :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops_r3y8X;

reserved_ops2_r3y8Z :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "::"#;

reserved_ops3_r3y90 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops2_r3y8Z;

reserved_ops4_r3y91 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "="#;

reserved_ops5_r3y92 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops4_r3y91;

reserved_ops6_r3y93 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\"#;

reserved_ops7_r3y94 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops6_r3y93;

reserved_ops8_r3y95 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "|"#;

reserved_ops9_r3y96 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops8_r3y95;

reserved_ops10_r3y97 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "<-"#;

reserved_ops11_r3y98 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops10_r3y97;

reserved_ops12_r3y99 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "->"#;

reserved_ops13_r3y9a :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops12_r3y99;

reserved_ops14_r3y9b :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "@"#;

reserved_ops15_r3y9c :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops14_r3y9b;

reserved_ops16_r3y9d :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "~"#;

reserved_ops17_r3y9e :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops16_r3y9d;

reserved_ops18_r3y9f :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "=>"#;

reserved_ops19_r3y9g :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# reserved_ops18_r3y9f;

reserved_ops20_r3y9h :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops19_r3y9g GHC.Types.[]];

reserved_ops21_r3y9i :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops17_r3y9e reserved_ops20_r3y9h];

reserved_ops22_r3y9j :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops15_r3y9c reserved_ops21_r3y9i];

reserved_ops23_r3y9k :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops13_r3y9a reserved_ops22_r3y9j];

reserved_ops24_r3y9l :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops11_r3y98 reserved_ops23_r3y9k];

reserved_ops25_r3y9m :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops9_r3y96 reserved_ops24_r3y9l];

reserved_ops26_r3y9n :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops7_r3y94 reserved_ops25_r3y9m];

reserved_ops27_r3y9o :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops5_r3y92 reserved_ops26_r3y9n];

reserved_ops28_r3y9p :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops3_r3y90 reserved_ops27_r3y9o];

reserved_ops29_r3y9q :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [reserved_ops1_r3y8Y reserved_ops28_r3y9p];

Text.Read.Lex.$fEqLexeme_$c==1
  :: Text.Read.Lex.Number -> Text.Read.Lex.Number -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3G5q ds1_s3G5r]
        case ds_s3G5q of {
          Text.Read.Lex.MkNumber a3_s3G5t [Occ=Once!] a4_s3G5u [Occ=Once] ->
              case ds1_s3G5r of {
                Text.Read.Lex.MkNumber b1_s3G5w [Occ=Once!] b2_s3G5x [Occ=Once] ->
                    case a3_s3G5t of {
                      GHC.Types.I# x34_s3G5z [Occ=Once] ->
                          case b1_s3G5w of {
                            GHC.Types.I# y_s3G5B [Occ=Once] ->
                                case ==# [x34_s3G5z y_s3G5B] of {
                                  __DEFAULT -> GHC.Types.False [];
                                  1# -> GHC.Classes.$fEq[]_$s$c== a4_s3G5u b2_s3G5x;
                                };
                          };
                    };
                Text.Read.Lex.MkDecimal _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.False [];
              };
          Text.Read.Lex.MkDecimal a3_s3G5G [Occ=Once]
                                  a4_s3G5H [Occ=Once!]
                                  a5_s3G5I [Occ=Once!] ->
              case ds1_s3G5r of {
                Text.Read.Lex.MkNumber _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Types.False [];
                Text.Read.Lex.MkDecimal b1_s3G5M [Occ=Once]
                                        b2_s3G5N [Occ=Once*!]
                                        b3_s3G5O [Occ=Once*!] ->
                    case GHC.Classes.$fEq[]_$s$c== a3_s3G5G b1_s3G5M of {
                      GHC.Types.False -> GHC.Types.False [];
                      GHC.Types.True ->
                          let-no-escape {
                            $j_s3G5Q [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Types.Bool
                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                [a5_s3G5I b3_s3G5O] \r []
                                    case a5_s3G5I of {
                                      GHC.Base.Nothing ->
                                          case b3_s3G5O of {
                                            GHC.Base.Nothing -> GHC.Types.True [];
                                            GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                                          };
                                      GHC.Base.Just a6_s3G5U [Occ=Once] ->
                                          case b3_s3G5O of {
                                            GHC.Base.Nothing -> GHC.Types.False [];
                                            GHC.Base.Just b4_s3G5W [Occ=Once] ->
                                                GHC.Integer.Type.eqInteger a6_s3G5U b4_s3G5W;
                                          };
                                    };
                          } in 
                            case a4_s3G5H of {
                              GHC.Base.Nothing ->
                                  case b2_s3G5N of {
                                    GHC.Base.Nothing -> $j_s3G5Q;
                                    GHC.Base.Just _ [Occ=Dead] -> GHC.Types.False [];
                                  };
                              GHC.Base.Just a6_s3G60 [Occ=Once] ->
                                  case b2_s3G5N of {
                                    GHC.Base.Nothing -> GHC.Types.False [];
                                    GHC.Base.Just b4_s3G62 [Occ=Once] ->
                                        case GHC.Classes.$fEq[]_$s$c== a6_s3G60 b4_s3G62 of {
                                          GHC.Types.False -> GHC.Types.False [];
                                          GHC.Types.True -> $j_s3G5Q;
                                        };
                                  };
                            };
                    };
              };
        };

Text.Read.Lex.$fEqNumber_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Text.Read.Lex.Number -> Text.Read.Lex.Number -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s3G64 eta1_s3G65]
        case Text.Read.Lex.$fEqLexeme_$c==1 eta_s3G64 eta1_s3G65 of {
          GHC.Types.False -> GHC.Types.True [];
          GHC.Types.True -> GHC.Types.False [];
        };

Text.Read.Lex.$fEqNumber [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Text.Read.Lex.Number
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Text.Read.Lex.$fEqLexeme_$c==1
                                     Text.Read.Lex.$fEqNumber_$c/=];

Text.Read.Lex.$fEqLexeme_$c==
  :: Text.Read.Lex.Lexeme -> Text.Read.Lex.Lexeme -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3G67 ds1_s3G68]
        case ds_s3G67 of {
          Text.Read.Lex.Char a3_s3G6a [Occ=Once] ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Char b1_s3G6c [Occ=Once] ->
                    GHC.Classes.eqChar a3_s3G6a b1_s3G6c;
              };
          Text.Read.Lex.String a3_s3G6d [Occ=Once] ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.String b1_s3G6f [Occ=Once] ->
                    GHC.Base.eqString a3_s3G6d b1_s3G6f;
              };
          Text.Read.Lex.Punc a3_s3G6g [Occ=Once] ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Punc b1_s3G6i [Occ=Once] ->
                    GHC.Base.eqString a3_s3G6g b1_s3G6i;
              };
          Text.Read.Lex.Ident a3_s3G6j [Occ=Once] ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Ident b1_s3G6l [Occ=Once] ->
                    GHC.Base.eqString a3_s3G6j b1_s3G6l;
              };
          Text.Read.Lex.Symbol a3_s3G6m [Occ=Once] ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Symbol b1_s3G6o [Occ=Once] ->
                    GHC.Base.eqString a3_s3G6m b1_s3G6o;
              };
          Text.Read.Lex.Number a3_s3G6p [Occ=Once] ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.Number b1_s3G6r [Occ=Once] ->
                    Text.Read.Lex.$fEqLexeme_$c==1 a3_s3G6p b1_s3G6r;
              };
          Text.Read.Lex.EOF ->
              case ds1_s3G68 of {
                __DEFAULT -> GHC.Types.False [];
                Text.Read.Lex.EOF -> GHC.Types.True [];
              };
        };

Text.Read.Lex.$fEqLexeme_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Text.Read.Lex.Lexeme -> Text.Read.Lex.Lexeme -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s3G6t eta1_s3G6u]
        case Text.Read.Lex.$fEqLexeme_$c== eta_s3G6t eta1_s3G6u of {
          GHC.Types.False -> GHC.Types.True [];
          GHC.Types.True -> GHC.Types.False [];
        };

Text.Read.Lex.$fEqLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Text.Read.Lex.Lexeme
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Text.Read.Lex.$fEqLexeme_$c==
                                     Text.Read.Lex.$fEqLexeme_$c/=];

Text.Read.Lex.numberToFixed2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

lvl2_r3y9r :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "this should not happen"#;

lvl3_r3y9s :: [GHC.Integer.Type.Integer]
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl2_r3y9r of sat_s3G6w {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s3G6w;
        };

combine_r3y9t
  :: GHC.Integer.Type.Integer
     -> [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [b_s3G6x ds_s3G6y]
        case ds_s3G6y of {
          [] -> [] [];
          : d1_s3G6A [Occ=Once] ds1_s3G6B [Occ=Once!] ->
              case ds1_s3G6B of {
                [] -> lvl3_r3y9s;
                : d2_s3G6D [Occ=Once] ds2_s3G6E [Occ=Once] ->
                    case GHC.Integer.Type.timesInteger d1_s3G6A b_s3G6x of sat_s3G6F {
                      __DEFAULT ->
                          case GHC.Integer.Type.plusInteger sat_s3G6F d2_s3G6D of d_s3G6G {
                            __DEFAULT ->
                                let {
                                  sat_s3G6H [Occ=Once] :: [GHC.Integer.Type.Integer]
                                  [LclId] =
                                      [b_s3G6x ds2_s3G6E] \u [] combine_r3y9t b_s3G6x ds2_s3G6E;
                                } in  : [d_s3G6G sat_s3G6H];
                          };
                    };
              };
        };

Text.Read.Lex.numberToFixed_go [Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Types.Int
     -> [GHC.Integer.Type.Integer]
     -> GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3G6I ds1_s3G6J ds2_s3G6K]
        case ds2_s3G6K of wild_s3G6L {
          [] -> Text.Read.Lex.numberToFixed2;
          : d_s3G6M [Occ=Once] ds3_s3G6N [Occ=Once!] ->
              case ds3_s3G6N of {
                [] -> d_s3G6M;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    case ds1_s3G6J of {
                      GHC.Types.I# x34_s3G6S ->
                          case ># [x34_s3G6S 40#] of {
                            __DEFAULT ->
                                let-no-escape {
                                  go_s3G6U [Occ=LoopBreakerT[2]]
                                    :: GHC.Integer.Type.Integer
                                       -> [GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer
                                  [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
                                      sat-only [ds_s3G6I go_s3G6U] \r [r_s3G6V ds4_s3G6W]
                                          case ds4_s3G6W of {
                                            [] -> r_s3G6V;
                                            : d1_s3G6Y [Occ=Once] ds5_s3G6Z [Occ=Once] ->
                                                case
                                                    GHC.Integer.Type.timesInteger r_s3G6V ds_s3G6I
                                                of
                                                sat_s3G70
                                                { __DEFAULT ->
                                                      case
                                                          GHC.Integer.Type.plusInteger
                                                              sat_s3G70 d1_s3G6Y
                                                      of
                                                      r'_s3G71
                                                      { __DEFAULT -> go_s3G6U r'_s3G71 ds5_s3G6Z;
                                                      };
                                                };
                                          };
                                } in  go_s3G6U Text.Read.Lex.numberToFixed2 wild_s3G6L;
                            1# ->
                                case GHC.Integer.Type.timesInteger ds_s3G6I ds_s3G6I of b'_s3G72 {
                                  __DEFAULT ->
                                      case remInt# [x34_s3G6S 2#] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s3G77 [Occ=Once] :: [GHC.Integer.Type.Integer]
                                              [LclId] =
                                                  CCCS :! [Text.Read.Lex.numberToFixed2 wild_s3G6L];
                                            } in 
                                              case combine_r3y9t ds_s3G6I sat_s3G77 of sat_s3G78 {
                                                __DEFAULT ->
                                                    case +# [x34_s3G6S 1#] of sat_s3G74 {
                                                      __DEFAULT ->
                                                          case
                                                              quotInt# [sat_s3G74 2#]
                                                          of
                                                          sat_s3G75
                                                          { __DEFAULT ->
                                                                let {
                                                                  sat_s3G76 [Occ=Once]
                                                                    :: GHC.Types.Int
                                                                  [LclId] =
                                                                      CCCS GHC.Types.I#! [sat_s3G75];
                                                                } in 
                                                                  Text.Read.Lex.numberToFixed_go
                                                                      b'_s3G72 sat_s3G76 sat_s3G78;
                                                          };
                                                    };
                                              };
                                        0# ->
                                            case combine_r3y9t ds_s3G6I wild_s3G6L of sat_s3G7c {
                                              __DEFAULT ->
                                                  case +# [x34_s3G6S 1#] of sat_s3G79 {
                                                    __DEFAULT ->
                                                        case quotInt# [sat_s3G79 2#] of sat_s3G7a {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s3G7b [Occ=Once]
                                                                  :: GHC.Types.Int
                                                                [LclId] =
                                                                    CCCS GHC.Types.I#! [sat_s3G7a];
                                                              } in 
                                                                Text.Read.Lex.numberToFixed_go
                                                                    b'_s3G72 sat_s3G7b sat_s3G7c;
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Text.Read.Lex.valInteger
  :: GHC.Integer.Type.Integer
     -> Text.Read.Lex.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [b0_s3G7d ds0_s3G7e]
        case
            GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger ds0_s3G7e
        of
        sat_s3G7h
        { __DEFAULT ->
              let {
                sat_s3G7g [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                [LclId] =
                    [ds0_s3G7e] \s []
                        case GHC.List.$wlenAcc ds0_s3G7e 0# of ww2_s3G7f {
                          __DEFAULT -> GHC.Types.I# [ww2_s3G7f];
                        };
              } in  Text.Read.Lex.numberToFixed_go b0_s3G7d sat_s3G7g sat_s3G7h;
        };

Text.Read.Lex.$w$sreadIntP [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>,
 Unf=OtherCon []] =
    [] \r [w2_s3G7i w3_s3G7j w4_s3G7k w5_s3G7l]
        let {
          sat_s3G7y [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_s3xhH
          [LclId] =
              [w2_s3G7i w3_s3G7j w4_s3G7k w5_s3G7l] \r [a_s3G7m]
                  case w3_s3G7j a_s3G7m of {
                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                    GHC.Types.True ->
                        let {
                          sat_s3G7v [Occ=Once]
                            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xhH
                          [LclId] =
                              [w2_s3G7i w4_s3G7k w5_s3G7l a_s3G7m] \r [a3_s3G7o]
                                  let {
                                    sat_s3G7u [Occ=Once] :: GHC.Integer.Type.Integer
                                    [LclId] =
                                        [w2_s3G7i w4_s3G7k a_s3G7m a3_s3G7o] \u []
                                            let {
                                              sat_s3G7q [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  CCCS :! [a_s3G7m a3_s3G7o];
                                            } in 
                                              case
                                                  GHC.Base.map w4_s3G7k sat_s3G7q
                                              of
                                              ds0_s3G7p [Dmd=<S,U>]
                                              { __DEFAULT ->
                                                    case
                                                        GHC.Base.map
                                                            GHC.Real.$fIntegralInt_$ctoInteger
                                                            ds0_s3G7p
                                                    of
                                                    sat_s3G7t
                                                    { __DEFAULT ->
                                                          let {
                                                            sat_s3G7s [Occ=Once, Dmd=<L,1*U(U)>]
                                                              :: GHC.Types.Int
                                                            [LclId] =
                                                                [ds0_s3G7p] \s []
                                                                    case
                                                                        GHC.List.$wlenAcc
                                                                            ds0_s3G7p 0#
                                                                    of
                                                                    ww2_s3G7r
                                                                    { __DEFAULT ->
                                                                          GHC.Types.I# [ww2_s3G7r];
                                                                    };
                                                          } in 
                                                            Text.Read.Lex.numberToFixed_go
                                                                w2_s3G7i sat_s3G7s sat_s3G7t;
                                                    };
                                              };
                                  } in  w5_s3G7l sat_s3G7u;
                        } in 
                          case Text.ParserCombinators.ReadP.$wmunch w3_s3G7j sat_s3G7v of {
                            Unit# ww1_s3G7x [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww1_s3G7x];
                          };
                  };
        } in  Unit# [sat_s3G7y];

Text.Read.Lex.readIntP1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [w2_s3G7z w3_s3G7A w4_s3G7B w5_s3G7C]
        case
            Text.Read.Lex.$w$sreadIntP w2_s3G7z w3_s3G7A w4_s3G7B w5_s3G7C
        of
        { Unit# ww1_s3G7E [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3G7E];
        };

Text.Read.Lex.readIntP_$sreadIntP
  :: GHC.Integer.Type.Integer
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId,
 Arity=4,
 Str=<L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Read.Lex.readIntP1 eta_B4 eta_B3 eta_B2 eta_B1;

Text.Read.Lex.$wreadIntP [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Num.Num a =>
     a
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>,
 Unf=OtherCon []] =
    [] \r [w2_s3G7F w3_s3G7G w4_s3G7H w5_s3G7I w6_s3G7J]
        let {
          lvl116_s3G7K [Occ=OnceL] :: a_s3xhP
          [LclId] =
              [w2_s3G7F] \u []
                  GHC.Num.fromInteger w2_s3G7F Text.Read.Lex.numberToFixed2; } in
        let {
          sat_s3G86 [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_s3xhU
          [LclId] =
              [w2_s3G7F
               w3_s3G7G
               w4_s3G7H
               w5_s3G7I
               w6_s3G7J
               lvl116_s3G7K] \r [a3_s3G7L]
                  case w4_s3G7H a3_s3G7L of {
                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                    GHC.Types.True ->
                        let {
                          sat_s3G83 [Occ=Once]
                            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xhU
                          [LclId] =
                              [w2_s3G7F
                               w3_s3G7G
                               w5_s3G7I
                               w6_s3G7J
                               lvl116_s3G7K
                               a3_s3G7L] \r [a4_s3G7N]
                                  let {
                                    sat_s3G82 [Occ=Once] :: a_s3xhP
                                    [LclId] =
                                        [w2_s3G7F
                                         w3_s3G7G
                                         w5_s3G7I
                                         lvl116_s3G7K
                                         a3_s3G7L
                                         a4_s3G7N] \u []
                                            let {
                                              sat_s3G80 [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  CCCS :! [a3_s3G7L a4_s3G7N];
                                            } in 
                                              case GHC.Base.map w5_s3G7I sat_s3G80 of sat_s3G81 {
                                                __DEFAULT ->
                                                    let-no-escape {
                                                      go_s3G7O [Occ=LoopBreakerT[2]]
                                                        :: a_s3xhP -> [GHC.Types.Int] -> a_s3xhP
                                                      [LclId[JoinId(2)],
                                                       Arity=2,
                                                       Str=<L,U><S,1*U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [w2_s3G7F
                                                                    w3_s3G7G
                                                                    go_s3G7O] \r [r_s3G7P ds_s3G7Q]
                                                              case ds_s3G7Q of {
                                                                [] -> r_s3G7P;
                                                                : d_s3G7S [Occ=Once!]
                                                                  ds1_s3G7T [Occ=Once] ->
                                                                    let {
                                                                      sat_s3G7Y [Occ=Once]
                                                                        :: a_s3xhP
                                                                      [LclId] =
                                                                          [w2_s3G7F d_s3G7S] \u []
                                                                              let {
                                                                                sat_s3G7X [Occ=Once]
                                                                                  :: GHC.Integer.Type.Integer
                                                                                [LclId] =
                                                                                    [d_s3G7S] \u []
                                                                                        case
                                                                                            d_s3G7S
                                                                                        of
                                                                                        { GHC.Types.I# i_s3G7W [Occ=Once] ->
                                                                                              GHC.Integer.Type.smallInteger
                                                                                                  i_s3G7W;
                                                                                        };
                                                                              } in 
                                                                                GHC.Num.fromInteger
                                                                                    w2_s3G7F
                                                                                    sat_s3G7X; } in
                                                                    let {
                                                                      sat_s3G7U [Occ=Once]
                                                                        :: a_s3xhP
                                                                      [LclId] =
                                                                          [w2_s3G7F
                                                                           w3_s3G7G
                                                                           r_s3G7P] \u []
                                                                              GHC.Num.*
                                                                                  w2_s3G7F
                                                                                  r_s3G7P
                                                                                  w3_s3G7G;
                                                                    } in 
                                                                      case
                                                                          GHC.Num.+
                                                                              w2_s3G7F
                                                                              sat_s3G7U
                                                                              sat_s3G7Y
                                                                      of
                                                                      r'_s3G7Z
                                                                      { __DEFAULT ->
                                                                            go_s3G7O
                                                                                r'_s3G7Z ds1_s3G7T;
                                                                      };
                                                              };
                                                    } in  go_s3G7O lvl116_s3G7K sat_s3G81;
                                              };
                                  } in  w6_s3G7J sat_s3G82;
                        } in 
                          case Text.ParserCombinators.ReadP.$wmunch w4_s3G7H sat_s3G83 of {
                            Unit# ww1_s3G85 [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww1_s3G85];
                          };
                  };
        } in  Unit# [sat_s3G86];

Text.Read.Lex.readIntP2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Num.Num a =>
     a
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [w2_s3G87 w3_s3G88 w4_s3G89 w5_s3G8a w6_s3G8b]
        case
            Text.Read.Lex.$wreadIntP
                w2_s3G87 w3_s3G88 w4_s3G89 w5_s3G8a w6_s3G8b
        of
        { Unit# ww1_s3G8d [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3G8d];
        };

Text.Read.Lex.readIntP
  :: forall a.
     GHC.Num.Num a =>
     a
     -> (GHC.Types.Char -> GHC.Types.Bool)
     -> (GHC.Types.Char -> GHC.Types.Int)
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)><L,C(U)><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Read.Lex.readIntP2 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

sat_s3G8e :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

sat_s3G8f :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3G8e GHC.Types.[]];

Text.Read.Lex.numberToFixed1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3G8f;

Text.Read.Lex.numberToInteger
  :: Text.Read.Lex.Number -> GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3G8g]
        case ds_s3G8g of {
          Text.Read.Lex.MkNumber base_s3G8i [Occ=Once] iPart_s3G8j ->
              let {
                sat_s3G8o [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [base_s3G8i iPart_s3G8j] \u []
                        case
                            GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger iPart_s3G8j
                        of
                        sat_s3G8n
                        { __DEFAULT ->
                              let {
                                sat_s3G8m [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                                [LclId] =
                                    [iPart_s3G8j] \s []
                                        case GHC.List.$wlenAcc iPart_s3G8j 0# of ww2_s3G8l {
                                          __DEFAULT -> GHC.Types.I# [ww2_s3G8l];
                                        }; } in
                              let {
                                sat_s3G8k [Occ=Once] :: GHC.Integer.Type.Integer
                                [LclId] =
                                    [base_s3G8i] \u []
                                        GHC.Real.$fIntegralInt_$ctoInteger base_s3G8i;
                              } in  Text.Read.Lex.numberToFixed_go sat_s3G8k sat_s3G8m sat_s3G8n;
                        };
              } in  GHC.Base.Just [sat_s3G8o];
          Text.Read.Lex.MkDecimal iPart_s3G8p [Occ=Once]
                                  ds1_s3G8q [Occ=Once!]
                                  ds2_s3G8r [Occ=Once!] ->
              case ds1_s3G8q of {
                GHC.Base.Nothing ->
                    case ds2_s3G8r of {
                      GHC.Base.Nothing ->
                          let {
                            sat_s3G8u [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [iPart_s3G8p] \u []
                                    Text.Read.Lex.valInteger
                                        Text.Read.Lex.numberToFixed1 iPart_s3G8p;
                          } in  GHC.Base.Just [sat_s3G8u];
                      GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
                    };
                GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
              };
        };

sat_s3G8x :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s3G8y :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3G8x GHC.Types.[]];

lvl4_r3y9u :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3G8y;

$wfracExp_r3y9v
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Text.Read.Lex.Digits
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=3, Str=<S,U><S,1*U><S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3G8z w3_s3G8A w4_s3G8B]
        case w4_s3G8B of {
          [] ->
              case
                  GHC.Integer.Type.ltInteger# w2_s3G8z Text.Read.Lex.numberToFixed2
              of
              { __DEFAULT ->
                    case
                        GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 w2_s3G8z
                    of
                    sat_s3G8E
                    { __DEFAULT ->
                          case GHC.Integer.Type.timesInteger w3_s3G8A sat_s3G8E of dt_s3G8F {
                            __DEFAULT -> (#,#) [dt_s3G8F GHC.Real.$fEnumRatio1];
                          };
                    };
                1# ->
                    case GHC.Integer.Type.negateInteger w2_s3G8z of sat_s3G8H {
                      __DEFAULT ->
                          case
                              GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 sat_s3G8H
                          of
                          ww1_s3G8G [Dmd=<S,U>]
                          { __DEFAULT ->
                                case GHC.Integer.Type.absInteger ww1_s3G8G of sat_s3G8K {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.signumInteger ww1_s3G8G of sat_s3G8I {
                                        __DEFAULT ->
                                            case
                                                GHC.Integer.Type.timesInteger w3_s3G8A sat_s3G8I
                                            of
                                            sat_s3G8J
                                            { __DEFAULT -> GHC.Real.$w$sreduce sat_s3G8J sat_s3G8K;
                                            };
                                      };
                                };
                          };
                    };
              };
          : d_s3G8L [Occ=Once!] ds_s3G8M [Occ=Once] ->
              case
                  GHC.Integer.Type.minusInteger w2_s3G8z lvl4_r3y9u
              of
              exp'_s3G8N
              { __DEFAULT ->
                    case d_s3G8L of {
                      GHC.Types.I# i_s3G8P [Occ=Once] ->
                          case GHC.Integer.Type.smallInteger i_s3G8P of sat_s3G8R {
                            __DEFAULT ->
                                case
                                    GHC.Integer.Type.timesInteger
                                        w3_s3G8A Text.Read.Lex.numberToFixed1
                                of
                                sat_s3G8Q
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.plusInteger sat_s3G8Q sat_s3G8R
                                      of
                                      mant'_s3G8S
                                      { __DEFAULT ->
                                            $wfracExp_r3y9v exp'_s3G8N mant'_s3G8S ds_s3G8M;
                                      };
                                };
                          };
                    };
              };
        };

Text.Read.Lex.numberToFixed_integerTake [Occ=LoopBreaker]
  :: forall a. GHC.Integer.Type.Integer -> [a] -> [a]
[GblId, Arity=2, Str=<S,U><L,1*U>, Unf=OtherCon []] =
    [] \r [n_s3G8T ds_s3G8U]
        case
            GHC.Integer.Type.leInteger# n_s3G8T Text.Read.Lex.numberToFixed2
        of
        { __DEFAULT ->
              case ds_s3G8U of {
                [] -> [] [];
                : x34_s3G8X [Occ=Once] xs_s3G8Y [Occ=Once] ->
                    let {
                      sat_s3G90 [Occ=Once] :: [a_a3va7]
                      [LclId] =
                          [n_s3G8T xs_s3G8Y] \u []
                              case
                                  GHC.Integer.Type.minusInteger n_s3G8T lvl4_r3y9u
                              of
                              sat_s3G8Z
                              { __DEFAULT ->
                                    Text.Read.Lex.numberToFixed_integerTake sat_s3G8Z xs_s3G8Y;
                              };
                    } in  : [x34_s3G8X sat_s3G90];
              };
          1# -> [] [];
        };

Text.Read.Lex.numberToFixed_xs [Occ=LoopBreaker] :: [GHC.Types.Int]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Read.Lex.$fShowLexeme2
                      Text.Read.Lex.numberToFixed_xs];

Text.Read.Lex.numberToFixed
  :: GHC.Integer.Type.Integer
     -> Text.Read.Lex.Number
     -> GHC.Base.Maybe
          (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3G91 ds1_s3G92]
        case ds1_s3G92 of {
          Text.Read.Lex.MkNumber base_s3G94 [Occ=Once] iPart_s3G95 ->
              let {
                sat_s3G9a [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [base_s3G94 iPart_s3G95] \u []
                        case
                            GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger iPart_s3G95
                        of
                        sat_s3G99
                        { __DEFAULT ->
                              let {
                                sat_s3G98 [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                                [LclId] =
                                    [iPart_s3G95] \s []
                                        case GHC.List.$wlenAcc iPart_s3G95 0# of ww2_s3G97 {
                                          __DEFAULT -> GHC.Types.I# [ww2_s3G97];
                                        }; } in
                              let {
                                sat_s3G96 [Occ=Once] :: GHC.Integer.Type.Integer
                                [LclId] =
                                    [base_s3G94] \u []
                                        GHC.Real.$fIntegralInt_$ctoInteger base_s3G94;
                              } in  Text.Read.Lex.numberToFixed_go sat_s3G96 sat_s3G98 sat_s3G99;
                        }; } in
              let {
                sat_s3G9b [Occ=Once]
                  :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                [LclId] =
                    CCCS (,)! [sat_s3G9a Text.Read.Lex.numberToFixed2];
              } in  GHC.Base.Just [sat_s3G9b];
          Text.Read.Lex.MkDecimal iPart_s3G9c [Occ=Once*]
                                  ds2_s3G9d [Occ=Once!]
                                  ds3_s3G9e [Occ=Once*!] ->
              case ds2_s3G9d of {
                GHC.Base.Nothing ->
                    case ds3_s3G9e of {
                      GHC.Base.Nothing ->
                          let {
                            sat_s3G9h [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [iPart_s3G9c] \u []
                                    Text.Read.Lex.valInteger
                                        Text.Read.Lex.numberToFixed1 iPart_s3G9c; } in
                          let {
                            sat_s3G9i [Occ=Once]
                              :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                            [LclId] =
                                CCCS (,)! [sat_s3G9h Text.Read.Lex.numberToFixed2];
                          } in  GHC.Base.Just [sat_s3G9i];
                      GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
                    };
                GHC.Base.Just fPart_s3G9k [Occ=Once] ->
                    case ds3_s3G9e of {
                      GHC.Base.Nothing ->
                          let {
                            sat_s3G9s [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [ds_s3G91 fPart_s3G9k] \u []
                                    let {
                                      sat_s3G9o [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Int]
                                      [LclId] =
                                          [fPart_s3G9k] \s []
                                              GHC.Base.++
                                                  fPart_s3G9k Text.Read.Lex.numberToFixed_xs;
                                    } in 
                                      case
                                          Text.Read.Lex.numberToFixed_integerTake ds_s3G91 sat_s3G9o
                                      of
                                      ds0_s3G9n [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                GHC.Base.map
                                                    GHC.Real.$fIntegralInt_$ctoInteger ds0_s3G9n
                                            of
                                            sat_s3G9r
                                            { __DEFAULT ->
                                                  let {
                                                    sat_s3G9q [Occ=Once, Dmd=<L,1*U(U)>]
                                                      :: GHC.Types.Int
                                                    [LclId] =
                                                        [ds0_s3G9n] \s []
                                                            case
                                                                GHC.List.$wlenAcc ds0_s3G9n 0#
                                                            of
                                                            ww2_s3G9p
                                                            { __DEFAULT -> GHC.Types.I# [ww2_s3G9p];
                                                            };
                                                  } in 
                                                    Text.Read.Lex.numberToFixed_go
                                                        Text.Read.Lex.numberToFixed1
                                                        sat_s3G9q
                                                        sat_s3G9r;
                                            };
                                      }; } in
                          let {
                            sat_s3G9m [Occ=Once] :: GHC.Integer.Type.Integer
                            [LclId] =
                                [iPart_s3G9c] \u []
                                    Text.Read.Lex.valInteger
                                        Text.Read.Lex.numberToFixed1 iPart_s3G9c; } in
                          let {
                            sat_s3G9t [Occ=Once]
                              :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                            [LclId] =
                                CCCS (,)! [sat_s3G9m sat_s3G9s];
                          } in  GHC.Base.Just [sat_s3G9t];
                      GHC.Base.Just _ [Occ=Dead] -> GHC.Base.Nothing [];
                    };
              };
        };

Text.Read.Lex.$wnumberToRational [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Number
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w2_s3G9v]
        case w2_s3G9v of {
          Text.Read.Lex.MkNumber base_s3G9x [Occ=Once!] iPart_s3G9y ->
              case
                  GHC.Base.map GHC.Real.$fIntegralInt_$ctoInteger iPart_s3G9y
              of
              sat_s3G9E
              { __DEFAULT ->
                    let {
                      sat_s3G9D [Occ=Once, Dmd=<L,1*U(U)>] :: GHC.Types.Int
                      [LclId] =
                          [iPart_s3G9y] \s []
                              case GHC.List.$wlenAcc iPart_s3G9y 0# of ww2_s3G9C {
                                __DEFAULT -> GHC.Types.I# [ww2_s3G9C];
                              }; } in
                    let {
                      sat_s3G9B [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [base_s3G9x] \u []
                              case base_s3G9x of {
                                GHC.Types.I# i_s3G9A [Occ=Once] ->
                                    GHC.Integer.Type.smallInteger i_s3G9A;
                              };
                    } in 
                      case
                          Text.Read.Lex.numberToFixed_go sat_s3G9B sat_s3G9D sat_s3G9E
                      of
                      sat_s3G9F
                      { __DEFAULT ->
                            case
                                GHC.Integer.Type.timesInteger sat_s3G9F lvl4_r3y9u
                            of
                            sat_s3G9G
                            { __DEFAULT -> GHC.Real.$w$sreduce sat_s3G9G lvl4_r3y9u;
                            };
                      };
              };
          Text.Read.Lex.MkDecimal iPart_s3G9H [Occ=Once*]
                                  mFPart_s3G9I [Occ=Once!]
                                  mExp_s3G9J [Occ=Once*!] ->
              case mFPart_s3G9I of {
                GHC.Base.Nothing ->
                    case mExp_s3G9J of {
                      GHC.Base.Nothing ->
                          case
                              Text.Read.Lex.valInteger Text.Read.Lex.numberToFixed1 iPart_s3G9H
                          of
                          sat_s3G9M
                          { __DEFAULT ->
                                case
                                    GHC.Integer.Type.timesInteger sat_s3G9M lvl4_r3y9u
                                of
                                sat_s3G9N
                                { __DEFAULT -> GHC.Real.$w$sreduce sat_s3G9N lvl4_r3y9u;
                                };
                          };
                      GHC.Base.Just exp_s3G9O ->
                          case
                              GHC.Integer.Type.geInteger# exp_s3G9O Text.Read.Lex.numberToFixed2
                          of
                          { __DEFAULT ->
                                case GHC.Integer.Type.negateInteger exp_s3G9O of sat_s3G9R {
                                  __DEFAULT ->
                                      case
                                          GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 sat_s3G9R
                                      of
                                      ww1_s3G9Q [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.absInteger ww1_s3G9Q
                                            of
                                            sat_s3G9V
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.signumInteger ww1_s3G9Q
                                                  of
                                                  sat_s3G9T
                                                  { __DEFAULT ->
                                                        case
                                                            Text.Read.Lex.valInteger
                                                                Text.Read.Lex.numberToFixed1
                                                                iPart_s3G9H
                                                        of
                                                        sat_s3G9S
                                                        { __DEFAULT ->
                                                              case
                                                                  GHC.Integer.Type.timesInteger
                                                                      sat_s3G9S sat_s3G9T
                                                              of
                                                              sat_s3G9U
                                                              { __DEFAULT ->
                                                                    GHC.Real.$w$sreduce
                                                                        sat_s3G9U sat_s3G9V;
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                            1# ->
                                case
                                    GHC.Real.^_$s^ Text.Read.Lex.numberToFixed1 exp_s3G9O
                                of
                                sat_s3G9X
                                { __DEFAULT ->
                                      case
                                          Text.Read.Lex.valInteger
                                              Text.Read.Lex.numberToFixed1 iPart_s3G9H
                                      of
                                      sat_s3G9W
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.timesInteger sat_s3G9W sat_s3G9X
                                            of
                                            sat_s3G9Y
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.timesInteger
                                                          sat_s3G9Y lvl4_r3y9u
                                                  of
                                                  sat_s3G9Z
                                                  { __DEFAULT ->
                                                        GHC.Real.$w$sreduce sat_s3G9Z lvl4_r3y9u;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Base.Just fPart_s3Ga0 [Occ=Once*] ->
                    case mExp_s3G9J of {
                      GHC.Base.Nothing ->
                          case
                              Text.Read.Lex.valInteger Text.Read.Lex.numberToFixed1 iPart_s3G9H
                          of
                          sat_s3Ga2
                          { __DEFAULT ->
                                $wfracExp_r3y9v Text.Read.Lex.numberToFixed2 sat_s3Ga2 fPart_s3Ga0;
                          };
                      GHC.Base.Just exp_s3Ga3 [Occ=Once] ->
                          case
                              Text.Read.Lex.valInteger Text.Read.Lex.numberToFixed1 iPart_s3G9H
                          of
                          sat_s3Ga4
                          { __DEFAULT -> $wfracExp_r3y9v exp_s3Ga3 sat_s3Ga4 fPart_s3Ga0;
                          };
                    };
              };
        };

Text.Read.Lex.numberToRational [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Number -> GHC.Real.Rational
[GblId, Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w2_s3Ga5]
        case Text.Read.Lex.$wnumberToRational w2_s3Ga5 of {
          (#,#) ww1_s3Ga7 [Occ=Once] ww2_s3Ga8 [Occ=Once] ->
              GHC.Real.:% [ww1_s3Ga7 ww2_s3Ga8];
        };

Text.Read.Lex.numberToRangedRational3
  :: GHC.Real.Ratio GHC.Integer.Type.Integer
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Real.:%! [Text.Read.Lex.numberToFixed2
                                GHC.Real.$fEnumRatio1];

Text.Read.Lex.numberToRangedRational2
  :: GHC.Base.Maybe GHC.Real.Rational
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Read.Lex.numberToRangedRational3];

Text.Read.Lex.numberToRangedRational1
  :: GHC.Types.Int -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Classes.eqInt Text.Read.Lex.$fShowLexeme2 eta_B1;

sat_s3Gab :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

sat_s3Gac :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gab GHC.Types.[]];

sat_s3Gaa :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_s3Gad :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gaa sat_s3Gac];

sat_s3Ga9 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_s3Gae :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Ga9 sat_s3Gad];

Text.Read.Lex.numberToRangedRational4 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_s3Gae;

sat_s3Gah :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s3Gai :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gah GHC.Types.[]];

sat_s3Gag :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2147483647#];

sat_s3Gaj :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gag sat_s3Gai];

sat_s3Gaf :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2147483647#];

sat_s3Gak :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gaf sat_s3Gaj];

Text.Read.Lex.numberToRangedRational5 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3Gak;

Text.Read.Lex.$wnumberToRangedRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.Types.Int
     -> Text.Read.Lex.Number
     -> GHC.Base.Maybe GHC.Real.Rational
[GblId,
 Arity=3,
 Str=<L,1*U(U)><L,1*U(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s3Gal ww1_s3Gam w2_s3Gan]
        case w2_s3Gan of wild_s3Gao {
          Text.Read.Lex.MkNumber _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                sat_s3Gau [Occ=Once] :: GHC.Real.Rational
                [LclId] =
                    [wild_s3Gao] \u []
                        case Text.Read.Lex.$wnumberToRational wild_s3Gao of {
                          (#,#) ww3_s3Gas [Occ=Once] ww4_s3Gat [Occ=Once] ->
                              GHC.Real.:% [ww3_s3Gas ww4_s3Gat];
                        };
              } in  GHC.Base.Just [sat_s3Gau];
          Text.Read.Lex.MkDecimal iPart_s3Gav [Occ=Once]
                                  mFPart_s3Gaw [Occ=Once!]
                                  ds_s3Gax [Occ=Once!] ->
              case ds_s3Gax of {
                GHC.Base.Nothing ->
                    let {
                      sat_s3GaC [Occ=Once] :: GHC.Real.Rational
                      [LclId] =
                          [wild_s3Gao] \u []
                              case Text.Read.Lex.$wnumberToRational wild_s3Gao of {
                                (#,#) ww3_s3GaA [Occ=Once] ww4_s3GaB [Occ=Once] ->
                                    GHC.Real.:% [ww3_s3GaA ww4_s3GaB];
                              };
                    } in  GHC.Base.Just [sat_s3GaC];
                GHC.Base.Just exp_s3GaD ->
                    case
                        GHC.Integer.Type.gtInteger#
                            exp_s3GaD Text.Read.Lex.numberToRangedRational5
                    of
                    { __DEFAULT ->
                          case
                              GHC.Integer.Type.ltInteger#
                                  exp_s3GaD Text.Read.Lex.numberToRangedRational4
                          of
                          { __DEFAULT ->
                                let-no-escape {
                                  $w$j_s3GaG [InlPrag=NOUSERINLINE[0],
                                              Occ=Once*!T[1],
                                              Dmd=<L,1*C1(U)>]
                                    :: GHC.Prim.Int# -> GHC.Base.Maybe GHC.Real.Rational
                                  [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      sat-only [ww_s3Gal
                                                ww1_s3Gam
                                                wild_s3Gao
                                                exp_s3GaD] \r [ww2_s3GaH]
                                          case ww1_s3Gam of {
                                            GHC.Types.I# x34_s3GaJ [Occ=Once] ->
                                                case
                                                    GHC.Integer.Type.integerToInt exp_s3GaD
                                                of
                                                wild5_s3GaK
                                                { __DEFAULT ->
                                                      case
                                                          +# [ww2_s3GaH wild5_s3GaK]
                                                      of
                                                      x35_s3GaL [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            case +# [x34_s3GaJ 3#] of sat_s3GaM {
                                                              __DEFAULT ->
                                                                  case ># [x35_s3GaL sat_s3GaM] of {
                                                                    __DEFAULT ->
                                                                        case ww_s3Gal of {
                                                                          GHC.Types.I# x36_s3GaP [Occ=Once] ->
                                                                              case
                                                                                  -# [x36_s3GaP 3#]
                                                                              of
                                                                              sat_s3GaQ
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        <# [x35_s3GaL
                                                                                            sat_s3GaQ]
                                                                                    of
                                                                                    { __DEFAULT ->
                                                                                          let {
                                                                                            sat_s3GaV [Occ=Once]
                                                                                              :: GHC.Real.Rational
                                                                                            [LclId] =
                                                                                                [wild_s3Gao] \u []
                                                                                                    case
                                                                                                        Text.Read.Lex.$wnumberToRational
                                                                                                            wild_s3Gao
                                                                                                    of
                                                                                                    { (#,#) ww4_s3GaT [Occ=Once]
                                                                                                            ww5_s3GaU [Occ=Once] ->
                                                                                                          GHC.Real.:% [ww4_s3GaT
                                                                                                                       ww5_s3GaU];
                                                                                                    };
                                                                                          } in 
                                                                                            GHC.Base.Just [sat_s3GaV];
                                                                                      1# ->
                                                                                          Text.Read.Lex.numberToRangedRational2;
                                                                                    };
                                                                              };
                                                                        };
                                                                    1# -> GHC.Base.Nothing [];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                } in 
                                  case
                                      GHC.List.dropWhile
                                          Text.Read.Lex.numberToRangedRational1 iPart_s3Gav
                                  of
                                  wild4_s3GaW
                                  { [] ->
                                        case mFPart_s3Gaw of {
                                          GHC.Base.Nothing -> Text.Read.Lex.numberToRangedRational2;
                                          GHC.Base.Just fPart_s3GaY [Occ=Once] ->
                                              case
                                                  GHC.List.$wspan
                                                      Text.Read.Lex.numberToRangedRational1
                                                      fPart_s3GaY
                                              of
                                              { (#,#) ww3_s3Gb0 [Occ=Once] ww4_s3Gb1 [Occ=Once!] ->
                                                    case ww4_s3Gb1 of {
                                                      [] -> Text.Read.Lex.numberToRangedRational2;
                                                      : _ [Occ=Dead] _ [Occ=Dead] ->
                                                          case
                                                              GHC.List.$wlenAcc ww3_s3Gb0 0#
                                                          of
                                                          ww5_s3Gb5
                                                          { __DEFAULT ->
                                                                case
                                                                    negateInt# [ww5_s3Gb5]
                                                                of
                                                                sat_s3Gb6
                                                                { __DEFAULT -> $w$j_s3GaG sat_s3Gb6;
                                                                };
                                                          };
                                                    };
                                              };
                                        };
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case GHC.List.$wlenAcc wild4_s3GaW 0# of ww2_s3Gb9 {
                                          __DEFAULT -> $w$j_s3GaG ww2_s3Gb9;
                                        };
                                  };
                            1# -> GHC.Base.Nothing [];
                          };
                      1# -> GHC.Base.Nothing [];
                    };
              };
        };

Text.Read.Lex.numberToRangedRational [InlPrag=NOUSERINLINE[0]]
  :: (GHC.Types.Int, GHC.Types.Int)
     -> Text.Read.Lex.Number -> GHC.Base.Maybe GHC.Real.Rational
[GblId,
 Arity=2,
 Str=<S,1*U(1*U(U),1*U(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w2_s3Gba w3_s3Gbb]
        case w2_s3Gba of {
          (,) ww1_s3Gbd [Occ=Once] ww2_s3Gbe [Occ=Once] ->
              Text.Read.Lex.$wnumberToRangedRational
                  ww1_s3Gbd ww2_s3Gbe w3_s3Gbb;
        };

lvl5_r3y9w :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "valDig: Bad base"#;

Text.Read.Lex.readDecP2 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl5_r3y9w of sat_s3Gbf {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s3Gbf;
        };

sat_s3Gbg :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

sat_s3Gbh :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gbg GHC.Types.[]];

Text.Read.Lex.readDecP3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3Gbh;

sat_s3Gbi :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

sat_s3Gbj :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gbi GHC.Types.[]];

Text.Read.Lex.readDecP4 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3Gbj;

Text.Read.Lex.$w$svalDig [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Char# -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [w2_s3Gbk ww_s3Gbl]
        case
            GHC.Integer.Type.eqInteger# w2_s3Gbk Text.Read.Lex.readDecP4
        of
        { __DEFAULT ->
              case
                  GHC.Integer.Type.eqInteger# w2_s3Gbk Text.Read.Lex.numberToFixed1
              of
              { __DEFAULT ->
                    case
                        GHC.Integer.Type.eqInteger# w2_s3Gbk Text.Read.Lex.readDecP3
                    of
                    { __DEFAULT -> Text.Read.Lex.readDecP2;
                      1# ->
                          let-no-escape {
                            $j_s3Gbp [Occ=Once*T[0], Dmd=<L,1*U>]
                              :: GHC.Base.Maybe GHC.Types.Int
                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                [ww_s3Gbl] \r []
                                    let-no-escape {
                                      $j1_s3Gbq [Occ=Once*T[0], Dmd=<L,1*U>]
                                        :: GHC.Base.Maybe GHC.Types.Int
                                      [LclId[JoinId(0)], Unf=OtherCon []] =
                                          [ww_s3Gbl] \r []
                                              case leChar# ['A'# ww_s3Gbl] of {
                                                __DEFAULT -> GHC.Base.Nothing [];
                                                1# ->
                                                    case leChar# [ww_s3Gbl 'F'#] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case ord# [ww_s3Gbl] of sat_s3Gbt {
                                                            __DEFAULT ->
                                                                case
                                                                    -# [sat_s3Gbt 65#]
                                                                of
                                                                sat_s3Gbu
                                                                { __DEFAULT ->
                                                                      case
                                                                          +# [sat_s3Gbu 10#]
                                                                      of
                                                                      sat_s3Gbv
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s3Gbw [Occ=Once]
                                                                                :: GHC.Types.Int
                                                                              [LclId] =
                                                                                  CCCS GHC.Types.I#! [sat_s3Gbv];
                                                                            } in 
                                                                              GHC.Base.Just [sat_s3Gbw];
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                    } in 
                                      case leChar# ['a'# ww_s3Gbl] of {
                                        __DEFAULT -> $j1_s3Gbq;
                                        1# ->
                                            case leChar# [ww_s3Gbl 'f'#] of {
                                              __DEFAULT -> $j1_s3Gbq;
                                              1# ->
                                                  case ord# [ww_s3Gbl] of sat_s3Gbz {
                                                    __DEFAULT ->
                                                        case -# [sat_s3Gbz 97#] of sat_s3GbA {
                                                          __DEFAULT ->
                                                              case +# [sat_s3GbA 10#] of sat_s3GbB {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s3GbC [Occ=Once]
                                                                        :: GHC.Types.Int
                                                                      [LclId] =
                                                                          CCCS GHC.Types.I#! [sat_s3GbB];
                                                                    } in  GHC.Base.Just [sat_s3GbC];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                          } in 
                            case leChar# ['0'# ww_s3Gbl] of {
                              __DEFAULT -> $j_s3Gbp;
                              1# ->
                                  case leChar# [ww_s3Gbl '9'#] of {
                                    __DEFAULT -> $j_s3Gbp;
                                    1# ->
                                        case ord# [ww_s3Gbl] of sat_s3GbF {
                                          __DEFAULT ->
                                              case -# [sat_s3GbF 48#] of sat_s3GbG {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s3GbH [Occ=Once] :: GHC.Types.Int
                                                      [LclId] =
                                                          CCCS GHC.Types.I#! [sat_s3GbG];
                                                    } in  GHC.Base.Just [sat_s3GbH];
                                              };
                                        };
                                  };
                            };
                    };
                1# ->
                    case leChar# ['0'# ww_s3Gbl] of {
                      __DEFAULT -> GHC.Base.Nothing [];
                      1# ->
                          case leChar# [ww_s3Gbl '9'#] of {
                            __DEFAULT -> GHC.Base.Nothing [];
                            1# ->
                                case ord# [ww_s3Gbl] of sat_s3GbK {
                                  __DEFAULT ->
                                      case -# [sat_s3GbK 48#] of sat_s3GbL {
                                        __DEFAULT ->
                                            let {
                                              sat_s3GbM [Occ=Once] :: GHC.Types.Int
                                              [LclId] =
                                                  CCCS GHC.Types.I#! [sat_s3GbL];
                                            } in  GHC.Base.Just [sat_s3GbM];
                                      };
                                };
                          };
                    };
              };
          1# ->
              case leChar# ['0'# ww_s3Gbl] of {
                __DEFAULT -> GHC.Base.Nothing [];
                1# ->
                    case leChar# [ww_s3Gbl '7'#] of {
                      __DEFAULT -> GHC.Base.Nothing [];
                      1# ->
                          case ord# [ww_s3Gbl] of sat_s3GbP {
                            __DEFAULT ->
                                case -# [sat_s3GbP 48#] of sat_s3GbQ {
                                  __DEFAULT ->
                                      let {
                                        sat_s3GbR [Occ=Once] :: GHC.Types.Int
                                        [LclId] =
                                            CCCS GHC.Types.I#! [sat_s3GbQ];
                                      } in  GHC.Base.Just [sat_s3GbR];
                                };
                          };
                    };
              };
        };

Text.Read.Lex.$wvalDig [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     a -> GHC.Prim.Char# -> GHC.Base.Maybe GHC.Types.Int
[GblId,
 Arity=4,
 Str=<S(C(C(S))L),U(C(C1(U)),A)><L,U(A,A,A,A,A,A,C(U))><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w2_s3GbS w3_s3GbT w4_s3GbU ww_s3GbV]
        let {
          sat_s3GbW [Occ=Once] :: a_s3xiO
          [LclId] =
              [w3_s3GbT] \u []
                  GHC.Num.fromInteger w3_s3GbT Text.Read.Lex.readDecP4;
        } in 
          case GHC.Classes.== w2_s3GbS w4_s3GbU sat_s3GbW of {
            GHC.Types.False ->
                let {
                  sat_s3GbY [Occ=Once] :: a_s3xiO
                  [LclId] =
                      [w3_s3GbT] \u []
                          GHC.Num.fromInteger w3_s3GbT Text.Read.Lex.numberToFixed1;
                } in 
                  case GHC.Classes.== w2_s3GbS w4_s3GbU sat_s3GbY of {
                    GHC.Types.False ->
                        let {
                          sat_s3Gc0 [Occ=Once] :: a_s3xiO
                          [LclId] =
                              [w3_s3GbT] \u []
                                  GHC.Num.fromInteger w3_s3GbT Text.Read.Lex.readDecP3;
                        } in 
                          case GHC.Classes.== w2_s3GbS w4_s3GbU sat_s3Gc0 of {
                            GHC.Types.False -> Text.Read.Lex.readDecP2;
                            GHC.Types.True ->
                                let-no-escape {
                                  $j_s3Gc2 [Occ=Once*T[0], Dmd=<L,1*U>]
                                    :: GHC.Base.Maybe GHC.Types.Int
                                  [LclId[JoinId(0)], Unf=OtherCon []] =
                                      [ww_s3GbV] \r []
                                          let-no-escape {
                                            $j1_s3Gc3 [Occ=Once*T[0], Dmd=<L,1*U>]
                                              :: GHC.Base.Maybe GHC.Types.Int
                                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                                [ww_s3GbV] \r []
                                                    case leChar# ['A'# ww_s3GbV] of {
                                                      __DEFAULT -> GHC.Base.Nothing [];
                                                      1# ->
                                                          case leChar# [ww_s3GbV 'F'#] of {
                                                            __DEFAULT -> GHC.Base.Nothing [];
                                                            1# ->
                                                                case ord# [ww_s3GbV] of sat_s3Gc6 {
                                                                  __DEFAULT ->
                                                                      case
                                                                          -# [sat_s3Gc6 65#]
                                                                      of
                                                                      sat_s3Gc7
                                                                      { __DEFAULT ->
                                                                            case
                                                                                +# [sat_s3Gc7 10#]
                                                                            of
                                                                            sat_s3Gc8
                                                                            { __DEFAULT ->
                                                                                  let {
                                                                                    sat_s3Gc9 [Occ=Once]
                                                                                      :: GHC.Types.Int
                                                                                    [LclId] =
                                                                                        CCCS GHC.Types.I#! [sat_s3Gc8];
                                                                                  } in 
                                                                                    GHC.Base.Just [sat_s3Gc9];
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                          } in 
                                            case leChar# ['a'# ww_s3GbV] of {
                                              __DEFAULT -> $j1_s3Gc3;
                                              1# ->
                                                  case leChar# [ww_s3GbV 'f'#] of {
                                                    __DEFAULT -> $j1_s3Gc3;
                                                    1# ->
                                                        case ord# [ww_s3GbV] of sat_s3Gcc {
                                                          __DEFAULT ->
                                                              case -# [sat_s3Gcc 97#] of sat_s3Gcd {
                                                                __DEFAULT ->
                                                                    case
                                                                        +# [sat_s3Gcd 10#]
                                                                    of
                                                                    sat_s3Gce
                                                                    { __DEFAULT ->
                                                                          let {
                                                                            sat_s3Gcf [Occ=Once]
                                                                              :: GHC.Types.Int
                                                                            [LclId] =
                                                                                CCCS GHC.Types.I#! [sat_s3Gce];
                                                                          } in 
                                                                            GHC.Base.Just [sat_s3Gcf];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                } in 
                                  case leChar# ['0'# ww_s3GbV] of {
                                    __DEFAULT -> $j_s3Gc2;
                                    1# ->
                                        case leChar# [ww_s3GbV '9'#] of {
                                          __DEFAULT -> $j_s3Gc2;
                                          1# ->
                                              case ord# [ww_s3GbV] of sat_s3Gci {
                                                __DEFAULT ->
                                                    case -# [sat_s3Gci 48#] of sat_s3Gcj {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s3Gck [Occ=Once] :: GHC.Types.Int
                                                            [LclId] =
                                                                CCCS GHC.Types.I#! [sat_s3Gcj];
                                                          } in  GHC.Base.Just [sat_s3Gck];
                                                    };
                                              };
                                        };
                                  };
                          };
                    GHC.Types.True ->
                        case leChar# ['0'# ww_s3GbV] of {
                          __DEFAULT -> GHC.Base.Nothing [];
                          1# ->
                              case leChar# [ww_s3GbV '9'#] of {
                                __DEFAULT -> GHC.Base.Nothing [];
                                1# ->
                                    case ord# [ww_s3GbV] of sat_s3Gcn {
                                      __DEFAULT ->
                                          case -# [sat_s3Gcn 48#] of sat_s3Gco {
                                            __DEFAULT ->
                                                let {
                                                  sat_s3Gcp [Occ=Once] :: GHC.Types.Int
                                                  [LclId] =
                                                      CCCS GHC.Types.I#! [sat_s3Gco];
                                                } in  GHC.Base.Just [sat_s3Gcp];
                                          };
                                    };
                              };
                        };
                  };
            GHC.Types.True ->
                case leChar# ['0'# ww_s3GbV] of {
                  __DEFAULT -> GHC.Base.Nothing [];
                  1# ->
                      case leChar# [ww_s3GbV '7'#] of {
                        __DEFAULT -> GHC.Base.Nothing [];
                        1# ->
                            case ord# [ww_s3GbV] of sat_s3Gcs {
                              __DEFAULT ->
                                  case -# [sat_s3Gcs 48#] of sat_s3Gct {
                                    __DEFAULT ->
                                        let {
                                          sat_s3Gcu [Occ=Once] :: GHC.Types.Int
                                          [LclId] =
                                              CCCS GHC.Types.I#! [sat_s3Gct];
                                        } in  GHC.Base.Just [sat_s3Gcu];
                                  };
                            };
                      };
                };
          };

Text.Read.Lex.$w$sreadIntP' [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U><L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3Gcv w3_s3Gcw]
        let {
          sat_s3GcI [Occ=Once] :: GHC.Types.Char -> GHC.Types.Int
          [LclId] =
              [w2_s3Gcv] \r [c_s3GcD]
                  case c_s3GcD of {
                    GHC.Types.C# ww1_s3GcF [Occ=Once] ->
                        case Text.Read.Lex.$w$svalDig w2_s3Gcv ww1_s3GcF of {
                          GHC.Base.Nothing -> Text.Read.Lex.$fShowLexeme2;
                          GHC.Base.Just x34_s3GcH [Occ=Once] -> x34_s3GcH;
                        };
                  }; } in
        let {
          sat_s3GcC [Occ=Once] :: GHC.Types.Char -> GHC.Types.Bool
          [LclId] =
              [w2_s3Gcv] \r [c_s3Gcx]
                  case c_s3Gcx of {
                    GHC.Types.C# ww1_s3Gcz [Occ=Once] ->
                        case Text.Read.Lex.$w$svalDig w2_s3Gcv ww1_s3Gcz of {
                          GHC.Base.Nothing -> GHC.Types.False [];
                          GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                        };
                  };
        } in 
          Text.Read.Lex.$w$sreadIntP w2_s3Gcv sat_s3GcC sat_s3GcI w3_s3Gcw;

Text.Read.Lex.$wreadIntP' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     a
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)>,
 Unf=OtherCon []] =
    [] \r [w2_s3GcJ w3_s3GcK w4_s3GcL w5_s3GcM]
        let {
          sat_s3GcY [Occ=Once] :: GHC.Types.Char -> GHC.Types.Int
          [LclId] =
              [w2_s3GcJ w3_s3GcK w4_s3GcL] \r [c_s3GcT]
                  case c_s3GcT of {
                    GHC.Types.C# ww1_s3GcV [Occ=Once] ->
                        case
                            Text.Read.Lex.$wvalDig w2_s3GcJ w3_s3GcK w4_s3GcL ww1_s3GcV
                        of
                        { GHC.Base.Nothing -> Text.Read.Lex.$fShowLexeme2;
                          GHC.Base.Just x34_s3GcX [Occ=Once] -> x34_s3GcX;
                        };
                  }; } in
        let {
          sat_s3GcS [Occ=Once] :: GHC.Types.Char -> GHC.Types.Bool
          [LclId] =
              [w2_s3GcJ w3_s3GcK w4_s3GcL] \r [c_s3GcN]
                  case c_s3GcN of {
                    GHC.Types.C# ww1_s3GcP [Occ=Once] ->
                        case
                            Text.Read.Lex.$wvalDig w2_s3GcJ w3_s3GcK w4_s3GcL ww1_s3GcP
                        of
                        { GHC.Base.Nothing -> GHC.Types.False [];
                          GHC.Base.Just _ [Occ=Dead] -> GHC.Types.True [];
                        };
                  };
        } in 
          Text.Read.Lex.$wreadIntP
              w3_s3GcK w4_s3GcL sat_s3GcS sat_s3GcY w5_s3GcM;

Text.Read.Lex.readDecP6 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     a
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><L,U><L,C(U)>m1,
 Unf=OtherCon []] =
    [] \r [w2_s3GcZ w3_s3Gd0 w4_s3Gd1 w5_s3Gd2]
        case
            Text.Read.Lex.$wreadIntP' w2_s3GcZ w3_s3Gd0 w4_s3Gd1 w5_s3Gd2
        of
        { Unit# ww1_s3Gd4 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Gd4];
        };

Text.Read.Lex.readOctP1
  :: forall b.
     (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3Gd5]
        case
            Text.Read.Lex.$w$sreadIntP' Text.Read.Lex.readDecP4 w2_s3Gd5
        of
        { Unit# ww1_s3Gd7 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Gd7];
        };

Text.Read.Lex.readOctP_$sreadOctP
  :: Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.readOctP1 eta_B1;

Text.Read.Lex.readOctP2
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [$dEq_s3Gd8 $dNum_s3Gd9]
        let {
          w2_s3Gda [Occ=OnceL] :: a_a3v4p
          [LclId] =
              [$dNum_s3Gd9] \u []
                  GHC.Num.fromInteger $dNum_s3Gd9 Text.Read.Lex.readDecP4; } in
        let {
          sat_s3Gde [Occ=OnceT[0]]
            :: forall b.
               (a_a3v4p -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [$dEq_s3Gd8 $dNum_s3Gd9 w2_s3Gda] \r [w3_s3Gdb]
                  case
                      Text.Read.Lex.$wreadIntP' $dEq_s3Gd8 $dNum_s3Gd9 w2_s3Gda w3_s3Gdb
                  of
                  { Unit# ww1_s3Gdd [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Gdd];
                  };
        } in  sat_s3Gde;

Text.Read.Lex.readOctP
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.readOctP2 eta_B2 eta_B1;

Text.Read.Lex.readDecP1
  :: forall b.
     (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3Gdf]
        case
            Text.Read.Lex.$w$sreadIntP' Text.Read.Lex.numberToFixed1 w2_s3Gdf
        of
        { Unit# ww1_s3Gdh [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Gdh];
        };

Text.Read.Lex.readDecP_$sreadDecP
  :: Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.readDecP1 eta_B1;

Text.Read.Lex.readDecP5
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [$dEq_s3Gdi $dNum_s3Gdj]
        let {
          w2_s3Gdk [Occ=OnceL] :: a_a3v4H
          [LclId] =
              [$dNum_s3Gdj] \u []
                  GHC.Num.fromInteger $dNum_s3Gdj Text.Read.Lex.numberToFixed1; } in
        let {
          sat_s3Gdo [Occ=OnceT[0]]
            :: forall b.
               (a_a3v4H -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [$dEq_s3Gdi $dNum_s3Gdj w2_s3Gdk] \r [w3_s3Gdl]
                  case
                      Text.Read.Lex.$wreadIntP' $dEq_s3Gdi $dNum_s3Gdj w2_s3Gdk w3_s3Gdl
                  of
                  { Unit# ww1_s3Gdn [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Gdn];
                  };
        } in  sat_s3Gdo;

Text.Read.Lex.readDecP
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.readDecP5 eta_B2 eta_B1;

Text.Read.Lex.readHexP1
  :: forall b.
     (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3Gdp]
        case
            Text.Read.Lex.$w$sreadIntP' Text.Read.Lex.readDecP3 w2_s3Gdp
        of
        { Unit# ww1_s3Gdr [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Gdr];
        };

Text.Read.Lex.readHexP_$sreadHexP
  :: Text.ParserCombinators.ReadP.ReadP GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.readHexP1 eta_B1;

Text.Read.Lex.readHexP2
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     forall b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [$dEq_s3Gds $dNum_s3Gdt]
        let {
          w2_s3Gdu [Occ=OnceL] :: a_a3v4Z
          [LclId] =
              [$dNum_s3Gdt] \u []
                  GHC.Num.fromInteger $dNum_s3Gdt Text.Read.Lex.readDecP3; } in
        let {
          sat_s3Gdy [Occ=OnceT[0]]
            :: forall b.
               (a_a3v4Z -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [$dEq_s3Gds $dNum_s3Gdt w2_s3Gdu] \r [w3_s3Gdv]
                  case
                      Text.Read.Lex.$wreadIntP' $dEq_s3Gds $dNum_s3Gdt w2_s3Gdu w3_s3Gdv
                  of
                  { Unit# ww1_s3Gdx [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Gdx];
                  };
        } in  sat_s3Gdy;

Text.Read.Lex.readHexP
  :: forall a.
     (GHC.Classes.Eq a, GHC.Num.Num a) =>
     Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A)><L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.readHexP2 eta_B2 eta_B1;

$wlexDigits_r3y9x
  :: GHC.Types.Int
     -> forall b.
        (Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U(U)><L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3Gdz w3_s3GdA]
        let {
          lvl116_s3GdB [Occ=OnceL, Dmd=<L,C(U)>]
            :: [GHC.Types.Int] -> Text.ParserCombinators.ReadP.P b_s3xjl
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              [w3_s3GdA] \r [a3_s3GdC]
                  case a3_s3GdC of wild_s3GdD {
                    [] -> Text.ParserCombinators.ReadP.Fail [];
                    : _ [Occ=Dead] _ [Occ=Dead] -> w3_s3GdA wild_s3GdD;
                  }; } in
        let {
          scan_s3GdG [Occ=LoopBreaker]
            :: forall a.
               [GHC.Types.Char]
               -> ([GHC.Types.Int] -> a)
               -> forall b1.
                  (a -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId,
           Arity=3,
           Str=<S,1*U><L,1*C1(U)><L,1*C1(U)>,
           Unf=OtherCon []] =
              sat-only [w2_s3Gdz scan_s3GdG] \r [ds_s3GdH f_s3GdI eta_s3GdJ]
                  case ds_s3GdH of {
                    [] ->
                        let {
                          sat_s3GdL [Occ=Once] :: a_a3vca
                          [LclId] =
                              [f_s3GdI] \u [] f_s3GdI GHC.Types.[];
                        } in  eta_s3GdJ sat_s3GdL;
                    : c_s3GdM [Occ=Once!] cs_s3GdN [Occ=Once] ->
                        case w2_s3Gdz of {
                          GHC.Types.I# ww1_s3GdP [Occ=Once!] ->
                              case c_s3GdM of {
                                GHC.Types.C# ww3_s3GdR ->
                                    let-no-escape {
                                      $j_s3GdS [Dmd=<L,1*C1(U)>]
                                        :: GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1_X3npr
                                      [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                          sat-only [scan_s3GdG
                                                    f_s3GdI
                                                    eta_s3GdJ
                                                    cs_s3GdN] \r [n_s3GdT]
                                              let {
                                                lvl117_s3GdU [Occ=OnceL]
                                                  :: Text.ParserCombinators.ReadP.P b1_X3npr
                                                [LclId] =
                                                    [scan_s3GdG
                                                     f_s3GdI
                                                     eta_s3GdJ
                                                     cs_s3GdN
                                                     n_s3GdT] \u []
                                                        let {
                                                          sat_s3GdX [Occ=Once]
                                                            :: [GHC.Types.Int] -> a_a3vca
                                                          [LclId] =
                                                              [f_s3GdI n_s3GdT] \r [x34_s3GdV]
                                                                  let {
                                                                    sat_s3GdW [Occ=Once]
                                                                      :: [GHC.Types.Int]
                                                                    [LclId] =
                                                                        CCCS :! [n_s3GdT x34_s3GdV];
                                                                  } in  f_s3GdI sat_s3GdW;
                                                        } in 
                                                          scan_s3GdG
                                                              cs_s3GdN sat_s3GdX eta_s3GdJ; } in
                                              let {
                                                sat_s3GdZ [Occ=Once]
                                                  :: GHC.Types.Char
                                                     -> Text.ParserCombinators.ReadP.P b1_X3npr
                                                [LclId] =
                                                    [lvl117_s3GdU] \r [a3_s3GdY] lvl117_s3GdU;
                                              } in  Text.ParserCombinators.ReadP.Get [sat_s3GdZ];
                                    } in 
                                      case ww1_s3GdP of {
                                        __DEFAULT -> Text.Read.Lex.readDecP2;
                                        8# ->
                                            case leChar# ['0'# ww3_s3GdR] of {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s3Ge3 [Occ=Once] :: a_a3vca
                                                    [LclId] =
                                                        [f_s3GdI] \u [] f_s3GdI GHC.Types.[];
                                                  } in  eta_s3GdJ sat_s3Ge3;
                                              1# ->
                                                  case leChar# [ww3_s3GdR '7'#] of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s3Ge5 [Occ=Once] :: a_a3vca
                                                          [LclId] =
                                                              [f_s3GdI] \u [] f_s3GdI GHC.Types.[];
                                                        } in  eta_s3GdJ sat_s3Ge5;
                                                    1# ->
                                                        case ord# [ww3_s3GdR] of sat_s3Ge6 {
                                                          __DEFAULT ->
                                                              case -# [sat_s3Ge6 48#] of sat_s3Ge7 {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s3Ge8 [Occ=Once]
                                                                        :: GHC.Types.Int
                                                                      [LclId] =
                                                                          CCCS GHC.Types.I#! [sat_s3Ge7];
                                                                    } in  $j_s3GdS sat_s3Ge8;
                                                              };
                                                        };
                                                  };
                                            };
                                        10# ->
                                            case leChar# ['0'# ww3_s3GdR] of {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s3Gea [Occ=Once] :: a_a3vca
                                                    [LclId] =
                                                        [f_s3GdI] \u [] f_s3GdI GHC.Types.[];
                                                  } in  eta_s3GdJ sat_s3Gea;
                                              1# ->
                                                  case leChar# [ww3_s3GdR '9'#] of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s3Gec [Occ=Once] :: a_a3vca
                                                          [LclId] =
                                                              [f_s3GdI] \u [] f_s3GdI GHC.Types.[];
                                                        } in  eta_s3GdJ sat_s3Gec;
                                                    1# ->
                                                        case ord# [ww3_s3GdR] of sat_s3Ged {
                                                          __DEFAULT ->
                                                              case -# [sat_s3Ged 48#] of sat_s3Gee {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s3Gef [Occ=Once]
                                                                        :: GHC.Types.Int
                                                                      [LclId] =
                                                                          CCCS GHC.Types.I#! [sat_s3Gee];
                                                                    } in  $j_s3GdS sat_s3Gef;
                                                              };
                                                        };
                                                  };
                                            };
                                        16# ->
                                            let-no-escape {
                                              $j1_s3Geg [Occ=Once*T[0], Dmd=<L,1*U>]
                                                :: Text.ParserCombinators.ReadP.P b1_X3npr
                                              [LclId[JoinId(0)], Unf=OtherCon []] =
                                                  [f_s3GdI eta_s3GdJ ww3_s3GdR $j_s3GdS] \r []
                                                      let-no-escape {
                                                        $j2_s3Geh [Occ=Once*T[0], Dmd=<L,1*U>]
                                                          :: Text.ParserCombinators.ReadP.P b1_X3npr
                                                        [LclId[JoinId(0)], Unf=OtherCon []] =
                                                            [f_s3GdI
                                                             eta_s3GdJ
                                                             ww3_s3GdR
                                                             $j_s3GdS] \r []
                                                                case leChar# ['A'# ww3_s3GdR] of {
                                                                  __DEFAULT ->
                                                                      let {
                                                                        sat_s3Gej [Occ=Once]
                                                                          :: a_a3vca
                                                                        [LclId] =
                                                                            [f_s3GdI] \u []
                                                                                f_s3GdI
                                                                                    GHC.Types.[];
                                                                      } in  eta_s3GdJ sat_s3Gej;
                                                                  1# ->
                                                                      case
                                                                          leChar# [ww3_s3GdR 'F'#]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s3Gel [Occ=Once]
                                                                                :: a_a3vca
                                                                              [LclId] =
                                                                                  [f_s3GdI] \u []
                                                                                      f_s3GdI
                                                                                          GHC.Types.[];
                                                                            } in 
                                                                              eta_s3GdJ sat_s3Gel;
                                                                        1# ->
                                                                            case
                                                                                ord# [ww3_s3GdR]
                                                                            of
                                                                            sat_s3Gem
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      -# [sat_s3Gem
                                                                                          65#]
                                                                                  of
                                                                                  sat_s3Gen
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            +# [sat_s3Gen
                                                                                                10#]
                                                                                        of
                                                                                        sat_s3Geo
                                                                                        { __DEFAULT ->
                                                                                              let {
                                                                                                sat_s3Gep [Occ=Once]
                                                                                                  :: GHC.Types.Int
                                                                                                [LclId] =
                                                                                                    CCCS GHC.Types.I#! [sat_s3Geo];
                                                                                              } in 
                                                                                                $j_s3GdS
                                                                                                    sat_s3Gep;
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                      } in 
                                                        case leChar# ['a'# ww3_s3GdR] of {
                                                          __DEFAULT -> $j2_s3Geh;
                                                          1# ->
                                                              case leChar# [ww3_s3GdR 'f'#] of {
                                                                __DEFAULT -> $j2_s3Geh;
                                                                1# ->
                                                                    case
                                                                        ord# [ww3_s3GdR]
                                                                    of
                                                                    sat_s3Ges
                                                                    { __DEFAULT ->
                                                                          case
                                                                              -# [sat_s3Ges 97#]
                                                                          of
                                                                          sat_s3Get
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    +# [sat_s3Get
                                                                                        10#]
                                                                                of
                                                                                sat_s3Geu
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s3Gev [Occ=Once]
                                                                                          :: GHC.Types.Int
                                                                                        [LclId] =
                                                                                            CCCS GHC.Types.I#! [sat_s3Geu];
                                                                                      } in 
                                                                                        $j_s3GdS
                                                                                            sat_s3Gev;
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                            } in 
                                              case leChar# ['0'# ww3_s3GdR] of {
                                                __DEFAULT -> $j1_s3Geg;
                                                1# ->
                                                    case leChar# [ww3_s3GdR '9'#] of {
                                                      __DEFAULT -> $j1_s3Geg;
                                                      1# ->
                                                          case ord# [ww3_s3GdR] of sat_s3Gey {
                                                            __DEFAULT ->
                                                                case
                                                                    -# [sat_s3Gey 48#]
                                                                of
                                                                sat_s3Gez
                                                                { __DEFAULT ->
                                                                      let {
                                                                        sat_s3GeA [Occ=Once]
                                                                          :: GHC.Types.Int
                                                                        [LclId] =
                                                                            CCCS GHC.Types.I#! [sat_s3Gez];
                                                                      } in  $j_s3GdS sat_s3GeA;
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                              };
                        };
                  }; } in
        let {
          sat_s3GeC [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xjl
          [LclId] =
              [lvl116_s3GdB scan_s3GdG] \r [a3_s3GeB]
                  scan_s3GdG a3_s3GeB GHC.Base.id lvl116_s3GdB;
        } in  Unit# [sat_s3GeC];

a1_r3y9y :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

a2_r3y9z :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

$wlexHexOct_r3y9A
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3GeD]
        let {
          lvl116_s3GeE [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId] =
              [w2_s3GeD] \u []
                  let {
                    sat_s3GeI [Occ=Once]
                      :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xjx
                    [LclId] =
                        [w2_s3GeD] \r [a3_s3GeF]
                            let {
                              sat_s3GeG [Occ=Once] :: Text.Read.Lex.Number
                              [LclId] =
                                  CCCS Text.Read.Lex.MkNumber! [a2_r3y9z a3_s3GeF]; } in
                            let {
                              sat_s3GeH [Occ=Once] :: Text.Read.Lex.Lexeme
                              [LclId] =
                                  CCCS Text.Read.Lex.Number! [sat_s3GeG];
                            } in  w2_s3GeD sat_s3GeH;
                  } in 
                    case $wlexDigits_r3y9x a2_r3y9z sat_s3GeI of {
                      Unit# ww1_s3GeK [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3GeK];
                    }; } in
        let {
          lvl117_s3GeL [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId] =
              [w2_s3GeD] \u []
                  let {
                    sat_s3GeP [Occ=Once]
                      :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xjx
                    [LclId] =
                        [w2_s3GeD] \r [a3_s3GeM]
                            let {
                              sat_s3GeN [Occ=Once] :: Text.Read.Lex.Number
                              [LclId] =
                                  CCCS Text.Read.Lex.MkNumber! [a1_r3y9y a3_s3GeM]; } in
                            let {
                              sat_s3GeO [Occ=Once] :: Text.Read.Lex.Lexeme
                              [LclId] =
                                  CCCS Text.Read.Lex.Number! [sat_s3GeN];
                            } in  w2_s3GeD sat_s3GeO;
                  } in 
                    case $wlexDigits_r3y9x a1_r3y9y sat_s3GeP of {
                      Unit# ww1_s3GeR [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3GeR];
                    }; } in
        let {
          lvl118_s3GeS [InlPrag=NOUSERINLINE[0], Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
              [lvl116_s3GeE lvl117_s3GeL] \r [w3_s3GeT]
                  case w3_s3GeT of {
                    GHC.Types.C# ww1_s3GeV [Occ=Once!] ->
                        case ww1_s3GeV of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'O'# -> lvl117_s3GeL;
                          'X'# -> lvl116_s3GeE;
                          'o'# -> lvl117_s3GeL;
                          'x'# -> lvl116_s3GeE;
                        };
                  }; } in
        let {
          lvl119_s3GeX [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl118_s3GeS]; } in
        let {
          sat_s3Gf2 [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xjx
          [LclId] =
              [lvl119_s3GeX] \r [a_s3GeY]
                  case a_s3GeY of {
                    GHC.Types.C# y_s3Gf0 [Occ=Once!] ->
                        case y_s3Gf0 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '0'# -> lvl119_s3GeX;
                        };
                  };
        } in  Unit# [sat_s3Gf2];

lexHexOct_r3y9B
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3Gf3]
        case $wlexHexOct_r3y9A w2_s3Gf3 of {
          Unit# ww1_s3Gf5 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Gf5];
        };

lvl6_r3y9C :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

$wlexFrac_r3y9D
  :: forall b1.
     (GHC.Base.Maybe Text.Read.Lex.Digits
      -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3Gf6]
        let {
          lvl116_s3Gf7 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xjD
          [LclId] =
              [w2_s3Gf6] \u []
                  let {
                    sat_s3Gfa [Occ=Once]
                      :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xjD
                    [LclId] =
                        [w2_s3Gf6] \r [a3_s3Gf8]
                            let {
                              sat_s3Gf9 [Occ=Once] :: GHC.Base.Maybe Text.Read.Lex.Digits
                              [LclId] =
                                  CCCS GHC.Base.Just! [a3_s3Gf8];
                            } in  w2_s3Gf6 sat_s3Gf9;
                  } in 
                    case $wlexDigits_r3y9x lvl6_r3y9C sat_s3Gfa of {
                      Unit# ww1_s3Gfc [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3Gfc];
                    }; } in
        let {
          sat_s3Gfh [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xjD
          [LclId] =
              [lvl116_s3Gf7] \r [a_s3Gfd]
                  case a_s3Gfd of {
                    GHC.Types.C# y_s3Gff [Occ=Once!] ->
                        case y_s3Gff of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '.'# -> lvl116_s3Gf7;
                        };
                  };
        } in  Unit# [sat_s3Gfh];

lexFrac_r3y9E
  :: forall b1.
     (GHC.Base.Maybe Text.Read.Lex.Digits
      -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3Gfi]
        case $wlexFrac_r3y9D w2_s3Gfi of {
          Unit# ww1_s3Gfk [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Gfk];
        };

m1_r3y9F :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SOH"#;

m2_r3y9G :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m1_r3y9F;

x_r3y9H :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SOH'#];

m3_r3y9I :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SO"#;

m4_r3y9J :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m3_r3y9I;

x1_r3y9K :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SO'#];

m5_r3y9L :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NUL"#;

m6_r3y9M :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m5_r3y9L;

x2_r3y9N :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\NUL'#];

m7_r3y9O :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "STX"#;

m8_r3y9P :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m7_r3y9O;

x3_r3y9Q :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\STX'#];

m9_r3y9R :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETX"#;

m10_r3y9S :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m9_r3y9R;

x4_r3y9T :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ETX'#];

m11_r3y9U :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EOT"#;

m12_r3y9V :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m11_r3y9U;

x5_r3y9W :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\EOT'#];

m13_r3y9X :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ENQ"#;

m14_r3y9Y :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m13_r3y9X;

x6_r3y9Z :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ENQ'#];

m15_r3ya0 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ACK"#;

m16_r3ya1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m15_r3ya0;

x7_r3ya2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ACK'#];

m17_r3ya3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BEL"#;

m18_r3ya4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m17_r3ya3;

x8_r3ya5 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\a'#];

m19_r3ya6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BS"#;

m20_r3ya7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m19_r3ya6;

x9_r3ya8 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\b'#];

m21_r3ya9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HT"#;

m22_r3yaa :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m21_r3ya9;

x10_r3yab :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\t'#];

m23_r3yac :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LF"#;

m24_r3yad :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m23_r3yac;

x11_r3yae :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\n'#];

m25_r3yaf :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "VT"#;

m26_r3yag :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m25_r3yaf;

x12_r3yah :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\v'#];

m27_r3yai :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FF"#;

m28_r3yaj :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m27_r3yai;

x13_r3yak :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\f'#];

m29_r3yal :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CR"#;

m30_r3yam :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m29_r3yal;

x14_r3yan :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\r'#];

m31_r3yao :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SI"#;

m32_r3yap :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m31_r3yao;

x15_r3yaq :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SI'#];

m33_r3yar :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DLE"#;

m34_r3yas :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m33_r3yar;

x16_r3yat :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DLE'#];

m35_r3yau :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC1"#;

m36_r3yav :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m35_r3yau;

x17_r3yaw :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC1'#];

m37_r3yax :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC2"#;

m38_r3yay :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m37_r3yax;

x18_r3yaz :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC2'#];

m39_r3yaA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC3"#;

m40_r3yaB :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m39_r3yaA;

x19_r3yaC :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC3'#];

m41_r3yaD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC4"#;

m42_r3yaE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m41_r3yaD;

x20_r3yaF :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DC4'#];

m43_r3yaG :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NAK"#;

m44_r3yaH :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m43_r3yaG;

x21_r3yaI :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\NAK'#];

m45_r3yaJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SYN"#;

m46_r3yaK :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m45_r3yaJ;

x22_r3yaL :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SYN'#];

m47_r3yaM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETB"#;

m48_r3yaN :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m47_r3yaM;

x23_r3yaO :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ETB'#];

m49_r3yaP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CAN"#;

m50_r3yaQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m49_r3yaP;

x24_r3yaR :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\CAN'#];

m51_r3yaS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EM"#;

m52_r3yaT :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m51_r3yaS;

x25_r3yaU :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\EM'#];

m53_r3yaV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SUB"#;

m54_r3yaW :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m53_r3yaV;

x26_r3yaX :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\SUB'#];

m55_r3yaY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ESC"#;

m56_r3yaZ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m55_r3yaY;

x27_r3yb0 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\ESC'#];

m57_r3yb1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FS"#;

m58_r3yb2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m57_r3yb1;

x28_r3yb3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\FS'#];

m59_r3yb4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GS"#;

m60_r3yb5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m59_r3yb4;

x29_r3yb6 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\GS'#];

m61_r3yb7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RS"#;

m62_r3yb8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m61_r3yb7;

x30_r3yb9 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\RS'#];

m63_r3yba :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "US"#;

m64_r3ybb :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m63_r3yba;

x31_r3ybc :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\US'#];

m65_r3ybd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SP"#;

m66_r3ybe :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m65_r3ybd;

x32_r3ybf :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

m67_r3ybg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DEL"#;

m68_r3ybh :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# m67_r3ybg;

x33_r3ybi :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\DEL'#];

sat_s3Gfl :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1114111#];

sat_s3Gfm :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s3Gfl GHC.Types.[]];

lvl7_r3ybj :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s3Gfm;

lvl8_r3ybk :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['"'#];

lvl9_r3ybl :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [lvl8_r3ybk GHC.Types.True];

lvl10_r3ybm :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\''#];

lvl11_r3ybn :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [lvl10_r3ybm GHC.Types.True];

lvl12_r3ybo :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\\'#];

lvl13_r3ybp :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [lvl12_r3ybo GHC.Types.True];

lvl14_r3ybq :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x8_r3ya5 GHC.Types.True];

lvl15_r3ybr :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x9_r3ya8 GHC.Types.True];

lvl16_r3ybs :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x13_r3yak GHC.Types.True];

lvl17_r3ybt :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x11_r3yae GHC.Types.True];

lvl18_r3ybu :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x14_r3yan GHC.Types.True];

lvl19_r3ybv :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x10_r3yab GHC.Types.True];

lvl20_r3ybw :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x12_r3yah GHC.Types.True];

lvl21_r3ybx :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x2_r3y9N GHC.Types.True];

lvl22_r3yby :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x_r3y9H GHC.Types.True];

lvl23_r3ybz :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x3_r3y9Q GHC.Types.True];

lvl24_r3ybA :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x4_r3y9T GHC.Types.True];

lvl25_r3ybB :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x5_r3y9W GHC.Types.True];

lvl26_r3ybC :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x6_r3y9Z GHC.Types.True];

lvl27_r3ybD :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x7_r3ya2 GHC.Types.True];

lvl28_r3ybE :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x1_r3y9K GHC.Types.True];

lvl29_r3ybF :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x15_r3yaq GHC.Types.True];

lvl30_r3ybG :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x16_r3yat GHC.Types.True];

lvl31_r3ybH :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x17_r3yaw GHC.Types.True];

lvl32_r3ybI :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x18_r3yaz GHC.Types.True];

lvl33_r3ybJ :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x19_r3yaC GHC.Types.True];

lvl34_r3ybK :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x20_r3yaF GHC.Types.True];

lvl35_r3ybL :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x21_r3yaI GHC.Types.True];

lvl36_r3ybM :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x22_r3yaL GHC.Types.True];

lvl37_r3ybN :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x23_r3yaO GHC.Types.True];

lvl38_r3ybO :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x24_r3yaR GHC.Types.True];

lvl39_r3ybP :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x25_r3yaU GHC.Types.True];

lvl40_r3ybQ :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x26_r3yaX GHC.Types.True];

lvl41_r3ybR :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x27_r3yb0 GHC.Types.True];

lvl42_r3ybS :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x28_r3yb3 GHC.Types.True];

lvl43_r3ybT :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x29_r3yb6 GHC.Types.True];

lvl44_r3ybU :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x30_r3yb9 GHC.Types.True];

lvl45_r3ybV :: (GHC.Types.Char, GHC.Types.Bool)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [x31_r3ybc GHC.Types.True];

w1_r3ybW
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gfn]
        let {
          lvl116_s3Gfo [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nYA
          [LclId] =
              [k1_s3Gfn] \u [] k1_s3Gfn x1_r3y9K; } in
        let {
          sat_s3Gfq [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nYA
          [LclId] =
              [lvl116_s3Gfo] \r [a3_s3Gfp] lvl116_s3Gfo;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m4_r3y9J sat_s3Gfq of {
            Unit# ww1_s3Gfs [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gfs];
          };

w_r3ybX
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gft]
        let {
          lvl116_s3Gfu [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gft] \u [] k1_s3Gft x_r3y9H; } in
        let {
          sat_s3Gfw [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gfu] \r [a3_s3Gfv] lvl116_s3Gfu;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m2_r3y9G sat_s3Gfw of {
            Unit# ww1_s3Gfy [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gfy];
          };

lvl46_r3ybY
  :: forall b.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [w2_s3Gfz]
        case
            Text.ParserCombinators.ReadP.$w<++ w_r3ybX w1_r3ybW w2_s3Gfz
        of
        { Unit# ww1_s3GfB [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3GfB];
        };

lvl47_r3ybZ
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GfC]
        let {
          lvl116_s3GfD [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GfC] \u [] k1_s3GfC x2_r3y9N; } in
        let {
          sat_s3GfF [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GfD] \r [a3_s3GfE] lvl116_s3GfD;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m6_r3y9M sat_s3GfF of {
            Unit# ww1_s3GfH [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GfH];
          };

lvl48_r3yc0
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GfI]
        let {
          lvl116_s3GfJ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GfI] \u [] k1_s3GfI x3_r3y9Q; } in
        let {
          sat_s3GfL [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GfJ] \r [a3_s3GfK] lvl116_s3GfJ;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m8_r3y9P sat_s3GfL of {
            Unit# ww1_s3GfN [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GfN];
          };

lvl49_r3yc1
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GfO]
        let {
          lvl116_s3GfP [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GfO] \u [] k1_s3GfO x4_r3y9T; } in
        let {
          sat_s3GfR [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GfP] \r [a3_s3GfQ] lvl116_s3GfP;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m10_r3y9S sat_s3GfR of {
            Unit# ww1_s3GfT [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GfT];
          };

lvl50_r3yc2
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GfU]
        let {
          lvl116_s3GfV [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GfU] \u [] k1_s3GfU x5_r3y9W; } in
        let {
          sat_s3GfX [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GfV] \r [a3_s3GfW] lvl116_s3GfV;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m12_r3y9V sat_s3GfX of {
            Unit# ww1_s3GfZ [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GfZ];
          };

lvl51_r3yc3
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gg0]
        let {
          lvl116_s3Gg1 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gg0] \u [] k1_s3Gg0 x6_r3y9Z; } in
        let {
          sat_s3Gg3 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gg1] \r [a3_s3Gg2] lvl116_s3Gg1;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m14_r3y9Y sat_s3Gg3 of {
            Unit# ww1_s3Gg5 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gg5];
          };

lvl52_r3yc4
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gg6]
        let {
          lvl116_s3Gg7 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gg6] \u [] k1_s3Gg6 x7_r3ya2; } in
        let {
          sat_s3Gg9 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gg7] \r [a3_s3Gg8] lvl116_s3Gg7;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m16_r3ya1 sat_s3Gg9 of {
            Unit# ww1_s3Ggb [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ggb];
          };

lvl53_r3yc5
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ggc]
        let {
          lvl116_s3Ggd [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ggc] \u [] k1_s3Ggc x8_r3ya5; } in
        let {
          sat_s3Ggf [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ggd] \r [a3_s3Gge] lvl116_s3Ggd;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m18_r3ya4 sat_s3Ggf of {
            Unit# ww1_s3Ggh [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ggh];
          };

lvl54_r3yc6
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ggi]
        let {
          lvl116_s3Ggj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ggi] \u [] k1_s3Ggi x9_r3ya8; } in
        let {
          sat_s3Ggl [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ggj] \r [a3_s3Ggk] lvl116_s3Ggj;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m20_r3ya7 sat_s3Ggl of {
            Unit# ww1_s3Ggn [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ggn];
          };

lvl55_r3yc7
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ggo]
        let {
          lvl116_s3Ggp [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ggo] \u [] k1_s3Ggo x10_r3yab; } in
        let {
          sat_s3Ggr [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ggp] \r [a3_s3Ggq] lvl116_s3Ggp;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m22_r3yaa sat_s3Ggr of {
            Unit# ww1_s3Ggt [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ggt];
          };

lvl56_r3yc8
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ggu]
        let {
          lvl116_s3Ggv [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ggu] \u [] k1_s3Ggu x11_r3yae; } in
        let {
          sat_s3Ggx [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ggv] \r [a3_s3Ggw] lvl116_s3Ggv;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m24_r3yad sat_s3Ggx of {
            Unit# ww1_s3Ggz [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ggz];
          };

lvl57_r3yc9
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GgA]
        let {
          lvl116_s3GgB [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GgA] \u [] k1_s3GgA x12_r3yah; } in
        let {
          sat_s3GgD [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GgB] \r [a3_s3GgC] lvl116_s3GgB;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m26_r3yag sat_s3GgD of {
            Unit# ww1_s3GgF [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GgF];
          };

lvl58_r3yca
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GgG]
        let {
          lvl116_s3GgH [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GgG] \u [] k1_s3GgG x13_r3yak; } in
        let {
          sat_s3GgJ [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GgH] \r [a3_s3GgI] lvl116_s3GgH;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m28_r3yaj sat_s3GgJ of {
            Unit# ww1_s3GgL [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GgL];
          };

lvl59_r3ycb
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GgM]
        let {
          lvl116_s3GgN [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GgM] \u [] k1_s3GgM x14_r3yan; } in
        let {
          sat_s3GgP [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GgN] \r [a3_s3GgO] lvl116_s3GgN;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m30_r3yam sat_s3GgP of {
            Unit# ww1_s3GgR [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GgR];
          };

lvl60_r3ycc
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GgS]
        let {
          lvl116_s3GgT [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GgS] \u [] k1_s3GgS x15_r3yaq; } in
        let {
          sat_s3GgV [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GgT] \r [a3_s3GgU] lvl116_s3GgT;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m32_r3yap sat_s3GgV of {
            Unit# ww1_s3GgX [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GgX];
          };

lvl61_r3ycd
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GgY]
        let {
          lvl116_s3GgZ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GgY] \u [] k1_s3GgY x16_r3yat; } in
        let {
          sat_s3Gh1 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GgZ] \r [a3_s3Gh0] lvl116_s3GgZ;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m34_r3yas sat_s3Gh1 of {
            Unit# ww1_s3Gh3 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gh3];
          };

lvl62_r3yce
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gh4]
        let {
          lvl116_s3Gh5 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gh4] \u [] k1_s3Gh4 x17_r3yaw; } in
        let {
          sat_s3Gh7 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gh5] \r [a3_s3Gh6] lvl116_s3Gh5;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m36_r3yav sat_s3Gh7 of {
            Unit# ww1_s3Gh9 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gh9];
          };

lvl63_r3ycf
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gha]
        let {
          lvl116_s3Ghb [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gha] \u [] k1_s3Gha x18_r3yaz; } in
        let {
          sat_s3Ghd [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ghb] \r [a3_s3Ghc] lvl116_s3Ghb;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m38_r3yay sat_s3Ghd of {
            Unit# ww1_s3Ghf [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ghf];
          };

lvl64_r3ycg
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ghg]
        let {
          lvl116_s3Ghh [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ghg] \u [] k1_s3Ghg x19_r3yaC; } in
        let {
          sat_s3Ghj [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ghh] \r [a3_s3Ghi] lvl116_s3Ghh;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m40_r3yaB sat_s3Ghj of {
            Unit# ww1_s3Ghl [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ghl];
          };

lvl65_r3ych
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ghm]
        let {
          lvl116_s3Ghn [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ghm] \u [] k1_s3Ghm x20_r3yaF; } in
        let {
          sat_s3Ghp [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ghn] \r [a3_s3Gho] lvl116_s3Ghn;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m42_r3yaE sat_s3Ghp of {
            Unit# ww1_s3Ghr [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ghr];
          };

lvl66_r3yci
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ghs]
        let {
          lvl116_s3Ght [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ghs] \u [] k1_s3Ghs x21_r3yaI; } in
        let {
          sat_s3Ghv [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ght] \r [a3_s3Ghu] lvl116_s3Ght;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m44_r3yaH sat_s3Ghv of {
            Unit# ww1_s3Ghx [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Ghx];
          };

lvl67_r3ycj
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Ghy]
        let {
          lvl116_s3Ghz [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Ghy] \u [] k1_s3Ghy x22_r3yaL; } in
        let {
          sat_s3GhB [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Ghz] \r [a3_s3GhA] lvl116_s3Ghz;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m46_r3yaK sat_s3GhB of {
            Unit# ww1_s3GhD [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GhD];
          };

lvl68_r3yck
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GhE]
        let {
          lvl116_s3GhF [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GhE] \u [] k1_s3GhE x23_r3yaO; } in
        let {
          sat_s3GhH [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GhF] \r [a3_s3GhG] lvl116_s3GhF;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m48_r3yaN sat_s3GhH of {
            Unit# ww1_s3GhJ [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GhJ];
          };

lvl69_r3ycl
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GhK]
        let {
          lvl116_s3GhL [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GhK] \u [] k1_s3GhK x24_r3yaR; } in
        let {
          sat_s3GhN [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GhL] \r [a3_s3GhM] lvl116_s3GhL;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m50_r3yaQ sat_s3GhN of {
            Unit# ww1_s3GhP [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GhP];
          };

lvl70_r3ycm
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GhQ]
        let {
          lvl116_s3GhR [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GhQ] \u [] k1_s3GhQ x25_r3yaU; } in
        let {
          sat_s3GhT [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GhR] \r [a3_s3GhS] lvl116_s3GhR;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m52_r3yaT sat_s3GhT of {
            Unit# ww1_s3GhV [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GhV];
          };

lvl71_r3ycn
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GhW]
        let {
          lvl116_s3GhX [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GhW] \u [] k1_s3GhW x26_r3yaX; } in
        let {
          sat_s3GhZ [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GhX] \r [a3_s3GhY] lvl116_s3GhX;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m54_r3yaW sat_s3GhZ of {
            Unit# ww1_s3Gi1 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gi1];
          };

lvl72_r3yco
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gi2]
        let {
          lvl116_s3Gi3 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gi2] \u [] k1_s3Gi2 x27_r3yb0; } in
        let {
          sat_s3Gi5 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gi3] \r [a3_s3Gi4] lvl116_s3Gi3;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m56_r3yaZ sat_s3Gi5 of {
            Unit# ww1_s3Gi7 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gi7];
          };

lvl73_r3ycp
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gi8]
        let {
          lvl116_s3Gi9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gi8] \u [] k1_s3Gi8 x28_r3yb3; } in
        let {
          sat_s3Gib [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gi9] \r [a3_s3Gia] lvl116_s3Gi9;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m58_r3yb2 sat_s3Gib of {
            Unit# ww1_s3Gid [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gid];
          };

lvl74_r3ycq
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gie]
        let {
          lvl116_s3Gif [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gie] \u [] k1_s3Gie x29_r3yb6; } in
        let {
          sat_s3Gih [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gif] \r [a3_s3Gig] lvl116_s3Gif;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m60_r3yb5 sat_s3Gih of {
            Unit# ww1_s3Gij [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gij];
          };

lvl75_r3ycr
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Gik]
        let {
          lvl116_s3Gil [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Gik] \u [] k1_s3Gik x30_r3yb9; } in
        let {
          sat_s3Gin [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gil] \r [a3_s3Gim] lvl116_s3Gil;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m62_r3yb8 sat_s3Gin of {
            Unit# ww1_s3Gip [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Gip];
          };

lvl76_r3ycs
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Giq]
        let {
          lvl116_s3Gir [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Giq] \u [] k1_s3Giq x31_r3ybc; } in
        let {
          sat_s3Git [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gir] \r [a3_s3Gis] lvl116_s3Gir;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m64_r3ybb sat_s3Git of {
            Unit# ww1_s3Giv [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Giv];
          };

lvl77_r3yct
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3Giw]
        let {
          lvl116_s3Gix [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3Giw] \u [] k1_s3Giw x32_r3ybf; } in
        let {
          sat_s3Giz [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3Gix] \r [a3_s3Giy] lvl116_s3Gix;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m66_r3ybe sat_s3Giz of {
            Unit# ww1_s3GiB [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GiB];
          };

lvl78_r3ycu
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [k1_s3GiC]
        let {
          lvl116_s3GiD [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [k1_s3GiC] \u [] k1_s3GiC x33_r3ybi; } in
        let {
          sat_s3GiF [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_X3nNm
          [LclId] =
              [lvl116_s3GiD] \r [a3_s3GiE] lvl116_s3GiD;
        } in 
          case Text.ParserCombinators.ReadP.$wstring m68_r3ybh sat_s3GiF of {
            Unit# ww1_s3GiH [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3GiH];
          };

lvl79_r3ycv :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl78_r3ycu GHC.Types.[]];

lvl80_r3ycw :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl77_r3yct lvl79_r3ycv];

lvl81_r3ycx :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl76_r3ycs lvl80_r3ycw];

lvl82_r3ycy :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl75_r3ycr lvl81_r3ycx];

lvl83_r3ycz :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl74_r3ycq lvl82_r3ycy];

lvl84_r3ycA :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl73_r3ycp lvl83_r3ycz];

lvl85_r3ycB :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl72_r3yco lvl84_r3ycA];

lvl86_r3ycC :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl71_r3ycn lvl85_r3ycB];

lvl87_r3ycD :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl70_r3ycm lvl86_r3ycC];

lvl88_r3ycE :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl69_r3ycl lvl87_r3ycD];

lvl89_r3ycF :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl68_r3yck lvl88_r3ycE];

lvl90_r3ycG :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl67_r3ycj lvl89_r3ycF];

lvl91_r3ycH :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl66_r3yci lvl90_r3ycG];

lvl92_r3ycI :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl65_r3ych lvl91_r3ycH];

lvl93_r3ycJ :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl64_r3ycg lvl92_r3ycI];

lvl94_r3ycK :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl63_r3ycf lvl93_r3ycJ];

lvl95_r3ycL :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl62_r3yce lvl94_r3ycK];

lvl96_r3ycM :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl61_r3ycd lvl95_r3ycL];

lvl97_r3ycN :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl60_r3ycc lvl96_r3ycM];

lvl98_r3ycO :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl59_r3ycb lvl97_r3ycN];

lvl99_r3ycP :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl58_r3yca lvl98_r3ycO];

lvl100_r3ycQ :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl57_r3yc9 lvl99_r3ycP];

lvl101_r3ycR :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl56_r3yc8 lvl100_r3ycQ];

lvl102_r3ycS :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl55_r3yc7 lvl101_r3ycR];

lvl103_r3ycT :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl54_r3yc6 lvl102_r3ycS];

lvl104_r3ycU :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl53_r3yc5 lvl103_r3ycT];

lvl105_r3ycV :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl52_r3yc4 lvl104_r3ycU];

lvl106_r3ycW :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl51_r3yc3 lvl105_r3ycV];

lvl107_r3ycX :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl50_r3yc2 lvl106_r3ycW];

lvl108_r3ycY :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl49_r3yc1 lvl107_r3ycX];

lvl109_r3ycZ :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl48_r3yc0 lvl108_r3ycY];

lvl110_r3yd0 :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl47_r3ybZ lvl109_r3ycZ];

lvl111_r3yd1 :: [Text.ParserCombinators.ReadP.ReadP GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [lvl46_r3ybY lvl110_r3yd0];

lvl112_r3yd2
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [k_s3GiI]
        let {
          lvl116_s3GiJ [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_a3nIU
          [LclId] =
              [k_s3GiI] \u [] k_s3GiI a2_r3y9z; } in
        let {
          lvl117_s3GiK [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_a3nIU
          [LclId] =
              [k_s3GiI] \u [] k_s3GiI a1_r3y9y; } in
        let {
          sat_s3GiP [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_a3nIU
          [LclId] =
              [lvl116_s3GiJ lvl117_s3GiK] \r [a3_s3GiL]
                  case a3_s3GiL of {
                    GHC.Types.C# ds_s3GiN [Occ=Once!] ->
                        case ds_s3GiN of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'O'# -> lvl117_s3GiK;
                          'X'# -> lvl116_s3GiJ;
                          'o'# -> lvl117_s3GiK;
                          'x'# -> lvl116_s3GiJ;
                        };
                  };
        } in  Text.ParserCombinators.ReadP.Get [sat_s3GiP];

lvl113_r3yd3
  :: forall b.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [k_s3GiQ] k_s3GiQ lvl6_r3y9C;

Text.Read.Lex.lexChar2
  :: forall b1.
     ((GHC.Types.Char, GHC.Types.Bool)
      -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [k_s3GiR]
        let {
          lvl116_s3GiS :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl18_r3ybu; } in
        let {
          lvl117_s3GiT :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl16_r3ybs; } in
        let {
          lvl118_s3GiU :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl20_r3ybw; } in
        let {
          lvl119_s3GiV :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl17_r3ybt; } in
        let {
          lvl120_s3GiW :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl19_r3ybv; } in
        let {
          lvl121_s3GiX :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl15_r3ybr; } in
        let {
          lvl122_s3GiY :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl14_r3ybq; } in
        let {
          lvl123_s3GiZ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl13_r3ybp; } in
        let {
          lvl124_s3Gj0 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl11_r3ybn; } in
        let {
          lvl125_s3Gj1 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR] \u [] k_s3GiR lvl9_r3ybl; } in
        let {
          sat_s3Gka [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [k_s3GiR
               lvl116_s3GiS
               lvl117_s3GiT
               lvl118_s3GiU
               lvl119_s3GiV
               lvl120_s3GiW
               lvl121_s3GiX
               lvl122_s3GiY] \u []
                  let {
                    sat_s3Gjo [Occ=Once]
                      :: GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1_X3nNY
                    [LclId] =
                        [k_s3GiR] \r [a3_s3Gj8]
                            let {
                              lvl126_s3Gj9 [Occ=OnceL] :: GHC.Integer.Type.Integer
                              [LclId] =
                                  [a3_s3Gj8] \u []
                                      case a3_s3Gj8 of {
                                        GHC.Types.I# i_s3Gjb [Occ=Once] ->
                                            GHC.Integer.Type.smallInteger i_s3Gjb;
                                      }; } in
                            let {
                              sat_s3Gjl [Occ=Once]
                                :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_X3nNY
                              [LclId] =
                                  [k_s3GiR lvl126_s3Gj9] \r [a4_s3Gjc]
                                      case
                                          Text.Read.Lex.valInteger lvl126_s3Gj9 a4_s3Gjc
                                      of
                                      a5_s3Gjd [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.leInteger# a5_s3Gjd lvl7_r3ybj
                                            of
                                            { __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                              1# ->
                                                  let {
                                                    sat_s3Gjj [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        [a5_s3Gjd] \u []
                                                            case
                                                                GHC.Integer.Type.integerToInt
                                                                    a5_s3Gjd
                                                            of
                                                            wild1_s3Gjf
                                                            { __DEFAULT ->
                                                                  case
                                                                      int2Word# [wild1_s3Gjf]
                                                                  of
                                                                  sat_s3Gjg
                                                                  { __DEFAULT ->
                                                                        case
                                                                            leWord# [sat_s3Gjg
                                                                                     1114111##]
                                                                        of
                                                                        { __DEFAULT ->
                                                                              GHC.Char.$wlvl
                                                                                  wild1_s3Gjf;
                                                                          1# ->
                                                                              case
                                                                                  chr# [wild1_s3Gjf]
                                                                              of
                                                                              sat_s3Gji
                                                                              { __DEFAULT ->
                                                                                    GHC.Types.C# [sat_s3Gji];
                                                                              };
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_s3Gjk [Occ=Once]
                                                      :: (GHC.Types.Char, GHC.Types.Bool)
                                                    [LclId] =
                                                        CCCS (,)! [sat_s3Gjj GHC.Types.True];
                                                  } in  k_s3GiR sat_s3Gjk;
                                            };
                                      };
                            } in 
                              case $wlexDigits_r3y9x a3_s3Gj8 sat_s3Gjl of {
                                Unit# ww1_s3Gjn [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3Gjn];
                              };
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$w<++
                            lvl112_r3yd2 lvl113_r3yd3 sat_s3Gjo
                    of
                    { Unit# ww1_s3Gjq [Occ=Once] ->
                          let {
                            sat_s3Gk9 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
                            [LclId] =
                                [k_s3GiR
                                 lvl116_s3GiS
                                 lvl117_s3GiT
                                 lvl118_s3GiU
                                 lvl119_s3GiV
                                 lvl120_s3GiW
                                 lvl121_s3GiX
                                 lvl122_s3GiY] \u []
                                    let {
                                      lvl126_s3Gjs [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl45_r3ybV; } in
                                    let {
                                      lvl127_s3Gjt [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl44_r3ybU; } in
                                    let {
                                      lvl128_s3Gju [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl43_r3ybT; } in
                                    let {
                                      lvl129_s3Gjv [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl42_r3ybS; } in
                                    let {
                                      lvl130_s3Gjw [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl41_r3ybR; } in
                                    let {
                                      lvl131_s3Gjx [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl40_r3ybQ; } in
                                    let {
                                      lvl132_s3Gjy [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl39_r3ybP; } in
                                    let {
                                      lvl133_s3Gjz [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl38_r3ybO; } in
                                    let {
                                      lvl134_s3GjA [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl37_r3ybN; } in
                                    let {
                                      lvl135_s3GjB [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl36_r3ybM; } in
                                    let {
                                      lvl136_s3GjC [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl35_r3ybL; } in
                                    let {
                                      lvl137_s3GjD [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl34_r3ybK; } in
                                    let {
                                      lvl138_s3GjE [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl33_r3ybJ; } in
                                    let {
                                      lvl139_s3GjF [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl32_r3ybI; } in
                                    let {
                                      lvl140_s3GjG [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl31_r3ybH; } in
                                    let {
                                      lvl141_s3GjH [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl30_r3ybG; } in
                                    let {
                                      lvl142_s3GjI [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl29_r3ybF; } in
                                    let {
                                      lvl143_s3GjJ [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl28_r3ybE; } in
                                    let {
                                      lvl144_s3GjK [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl27_r3ybD; } in
                                    let {
                                      lvl145_s3GjL [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl26_r3ybC; } in
                                    let {
                                      lvl146_s3GjM [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl25_r3ybB; } in
                                    let {
                                      lvl147_s3GjN [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl24_r3ybA; } in
                                    let {
                                      lvl148_s3GjO [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl23_r3ybz; } in
                                    let {
                                      lvl149_s3GjP [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl22_r3yby; } in
                                    let {
                                      lvl150_s3GjQ [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u [] k_s3GiR lvl21_r3ybx; } in
                                    let {
                                      $wlvl1_s3GjR [InlPrag=NOUSERINLINE[0],
                                                    Occ=OnceL!,
                                                    Dmd=<L,C(U)>]
                                        :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                          sat-only [lvl116_s3GiS
                                                    lvl117_s3GiT
                                                    lvl118_s3GiU
                                                    lvl119_s3GiV
                                                    lvl120_s3GiW
                                                    lvl121_s3GiX
                                                    lvl122_s3GiY
                                                    lvl126_s3Gjs
                                                    lvl127_s3Gjt
                                                    lvl128_s3Gju
                                                    lvl129_s3Gjv
                                                    lvl130_s3Gjw
                                                    lvl131_s3Gjx
                                                    lvl132_s3Gjy
                                                    lvl133_s3Gjz
                                                    lvl134_s3GjA
                                                    lvl135_s3GjB
                                                    lvl136_s3GjC
                                                    lvl137_s3GjD
                                                    lvl138_s3GjE
                                                    lvl139_s3GjF
                                                    lvl140_s3GjG
                                                    lvl141_s3GjH
                                                    lvl142_s3GjI
                                                    lvl143_s3GjJ
                                                    lvl144_s3GjK
                                                    lvl145_s3GjL
                                                    lvl146_s3GjM
                                                    lvl147_s3GjN
                                                    lvl148_s3GjO
                                                    lvl149_s3GjP
                                                    lvl150_s3GjQ] \r [ww2_s3GjS]
                                              case ww2_s3GjS of {
                                                __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                '@'# -> lvl150_s3GjQ;
                                                'A'# -> lvl149_s3GjP;
                                                'B'# -> lvl148_s3GjO;
                                                'C'# -> lvl147_s3GjN;
                                                'D'# -> lvl146_s3GjM;
                                                'E'# -> lvl145_s3GjL;
                                                'F'# -> lvl144_s3GjK;
                                                'G'# -> lvl122_s3GiY;
                                                'H'# -> lvl121_s3GiX;
                                                'I'# -> lvl120_s3GiW;
                                                'J'# -> lvl119_s3GiV;
                                                'K'# -> lvl118_s3GiU;
                                                'L'# -> lvl117_s3GiT;
                                                'M'# -> lvl116_s3GiS;
                                                'N'# -> lvl143_s3GjJ;
                                                'O'# -> lvl142_s3GjI;
                                                'P'# -> lvl141_s3GjH;
                                                'Q'# -> lvl140_s3GjG;
                                                'R'# -> lvl139_s3GjF;
                                                'S'# -> lvl138_s3GjE;
                                                'T'# -> lvl137_s3GjD;
                                                'U'# -> lvl136_s3GjC;
                                                'V'# -> lvl135_s3GjB;
                                                'W'# -> lvl134_s3GjA;
                                                'X'# -> lvl133_s3Gjz;
                                                'Y'# -> lvl132_s3Gjy;
                                                'Z'# -> lvl131_s3Gjx;
                                                '['# -> lvl130_s3Gjw;
                                                '\\'# -> lvl129_s3Gjv;
                                                ']'# -> lvl128_s3Gju;
                                                '^'# -> lvl127_s3Gjt;
                                                '_'# -> lvl126_s3Gjs;
                                              }; } in
                                    let {
                                      lvl151_s3GjU [InlPrag=NOUSERINLINE[0], Occ=OnceL]
                                        :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
                                          [$wlvl1_s3GjR] \r [w2_s3GjV]
                                              case w2_s3GjV of {
                                                GHC.Types.C# ww3_s3GjX [Occ=Once] ->
                                                    $wlvl1_s3GjR ww3_s3GjX;
                                              }; } in
                                    let {
                                      lvl152_s3GjY [Occ=OnceL]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId, Unf=OtherCon []] =
                                          CCCS Text.ParserCombinators.ReadP.Get! [lvl151_s3GjU]; } in
                                    let {
                                      sat_s3Gk8 [Occ=Once]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [k_s3GiR] \u []
                                              let {
                                                sat_s3Gk7 [Occ=Once]
                                                  :: GHC.Types.Char
                                                     -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                                [LclId] =
                                                    [k_s3GiR] \r [a3_s3Gk5]
                                                        let {
                                                          sat_s3Gk6 [Occ=Once]
                                                            :: (GHC.Types.Char, GHC.Types.Bool)
                                                          [LclId] =
                                                              CCCS (,)! [a3_s3Gk5 GHC.Types.True];
                                                        } in  k_s3GiR sat_s3Gk6;
                                              } in 
                                                Text.ParserCombinators.ReadP.choice
                                                    lvl111_r3yd1 sat_s3Gk7; } in
                                    let {
                                      sat_s3Gk3 [Occ=Once]
                                        :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          [lvl152_s3GjY] \r [a_s3GjZ]
                                              case a_s3GjZ of {
                                                GHC.Types.C# y_s3Gk1 [Occ=Once!] ->
                                                    case y_s3Gk1 of {
                                                      __DEFAULT ->
                                                          Text.ParserCombinators.ReadP.Fail [];
                                                      '^'# -> lvl152_s3GjY;
                                                    };
                                              }; } in
                                    let {
                                      sat_s3Gk4 [Occ=Once]
                                        :: Text.ParserCombinators.ReadP.P b1_X3nNY
                                      [LclId] =
                                          CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gk3];
                                    } in 
                                      Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                          sat_s3Gk4 sat_s3Gk8; } in
                          let {
                            sat_s3Gjr [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
                            [LclId] =
                                CCCS Text.ParserCombinators.ReadP.Look! [ww1_s3Gjq];
                          } in 
                            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                sat_s3Gjr sat_s3Gk9;
                    }; } in
        let {
          sat_s3Gj6 [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              [lvl116_s3GiS
               lvl117_s3GiT
               lvl118_s3GiU
               lvl119_s3GiV
               lvl120_s3GiW
               lvl121_s3GiX
               lvl122_s3GiY
               lvl123_s3GiZ
               lvl124_s3Gj0
               lvl125_s3Gj1] \r [a3_s3Gj2]
                  case a3_s3Gj2 of {
                    GHC.Types.C# ds_s3Gj4 [Occ=Once!] ->
                        case ds_s3Gj4 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '"'# -> lvl125_s3Gj1;
                          '\''# -> lvl124_s3Gj0;
                          '\\'# -> lvl123_s3GiZ;
                          'a'# -> lvl122_s3GiY;
                          'b'# -> lvl121_s3GiX;
                          'f'# -> lvl117_s3GiT;
                          'n'# -> lvl119_s3GiV;
                          'r'# -> lvl116_s3GiS;
                          't'# -> lvl120_s3GiW;
                          'v'# -> lvl118_s3GiU;
                        };
                  }; } in
        let {
          sat_s3Gj7 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nNY
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gj6];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3Gj7 sat_s3Gka;

Text.Read.Lex.lexChar4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\&"#;

Text.Read.Lex.lexChar3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Read.Lex.lexChar4;

Text.Read.Lex.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3Gkb]
        let {
          lvl116_s3Gkc [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk1
          [LclId] =
              [w2_s3Gkb] \u []
                  case Text.Read.Lex.$wconsumeEmpties w2_s3Gkb of {
                    Unit# ww1_s3Gke [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Gke];
                  }; } in
        let {
          sat_s3Gkg [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xk1
          [LclId] =
              [lvl116_s3Gkc] \r [a3_s3Gkf] lvl116_s3Gkc;
        } in 
          Text.ParserCombinators.ReadP.$wstring
              Text.Read.Lex.lexChar3 sat_s3Gkg;
Text.Read.Lex.$wconsumeEmpties [InlPrag=NOUSERINLINE[0],
                                Occ=LoopBreaker]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3Gkh]
        let {
          lvl116_s3Gki [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xjV
          [LclId] =
              [w2_s3Gkh] \u []
                  case Text.Read.Lex.$wlvl w2_s3Gkh of {
                    Unit# ww1_s3Gkk [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Gkk];
                  }; } in
        let {
          lvl117_s3Gkl [Occ=OnceL*]
            :: Text.ParserCombinators.ReadP.P b1_s3xjV
          [LclId] =
              [w2_s3Gkh] \u [] w2_s3Gkh GHC.Tuple.(); } in
        let {
          sat_s3Gkz [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xjV
          [LclId] =
              [lvl116_s3Gki lvl117_s3Gkl] \r [a3_s3Gkm]
                  case a3_s3Gkm of {
                    [] -> lvl117_s3Gkl;
                    : ds_s3Gko [Occ=Once!] ds1_s3Gkp [Occ=Once!] ->
                        case ds_s3Gko of {
                          GHC.Types.C# ds2_s3Gkr [Occ=Once!] ->
                              case ds2_s3Gkr of {
                                __DEFAULT -> lvl117_s3Gkl;
                                '\\'# ->
                                    case ds1_s3Gkp of {
                                      [] -> lvl117_s3Gkl;
                                      : ds4_s3Gku [Occ=Once!] _ [Occ=Dead] ->
                                          case ds4_s3Gku of {
                                            GHC.Types.C# ds6_s3Gkx [Occ=Once!] ->
                                                case ds6_s3Gkx of {
                                                  __DEFAULT -> lvl117_s3Gkl;
                                                  '&'# -> lvl116_s3Gki;
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in  Unit# [sat_s3Gkz];

Text.Read.Lex.lexChar5 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (() -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3GkA]
        case Text.Read.Lex.$wconsumeEmpties w2_s3GkA of {
          Unit# ww1_s3GkC [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3GkC];
        };

Text.Read.Lex.$wlexChar [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3GkD]
        let {
          lvl116_s3GkE [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk7
          [LclId] =
              [w2_s3GkD] \u []
                  let {
                    k_s3GkF [Occ=Once, Dmd=<L,C(U)>]
                      :: (GHC.Types.Char, GHC.Types.Bool)
                         -> Text.ParserCombinators.ReadP.P b1_s3xk7
                    [LclId, Arity=1, Str=<S,1*U(U,A)>, Unf=OtherCon []] =
                        [w2_s3GkD] \r [a3_s3GkG]
                            case a3_s3GkG of {
                              (,) c_s3GkI [Occ=Once] _ [Occ=Dead] ->
                                  let {
                                    lvl117_s3GkK :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                    [LclId] =
                                        [w2_s3GkD c_s3GkI] \u [] w2_s3GkD c_s3GkI; } in
                                  let {
                                    lvl118_s3GkL [Occ=OnceL]
                                      :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                    [LclId] =
                                        [lvl117_s3GkK] \u []
                                            let {
                                              sat_s3GkN [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                              [LclId] =
                                                  [lvl117_s3GkK] \r [a4_s3GkM] lvl117_s3GkK;
                                            } in 
                                              case Text.Read.Lex.$wlvl sat_s3GkN of {
                                                Unit# ww1_s3GkP [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3GkP];
                                              }; } in
                                  let {
                                    sat_s3Gl3 [Occ=Once]
                                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                    [LclId] =
                                        [lvl117_s3GkK lvl118_s3GkL] \r [a4_s3GkQ]
                                            case a4_s3GkQ of {
                                              [] -> lvl117_s3GkK;
                                              : ds1_s3GkS [Occ=Once!] ds2_s3GkT [Occ=Once!] ->
                                                  case ds1_s3GkS of {
                                                    GHC.Types.C# ds3_s3GkV [Occ=Once!] ->
                                                        case ds3_s3GkV of {
                                                          __DEFAULT -> lvl117_s3GkK;
                                                          '\\'# ->
                                                              case ds2_s3GkT of {
                                                                [] -> lvl117_s3GkK;
                                                                : ds5_s3GkY [Occ=Once!]
                                                                  _ [Occ=Dead] ->
                                                                    case ds5_s3GkY of {
                                                                      GHC.Types.C# ds7_s3Gl1 [Occ=Once!] ->
                                                                          case ds7_s3Gl1 of {
                                                                            __DEFAULT ->
                                                                                lvl117_s3GkK;
                                                                            '&'# -> lvl118_s3GkL;
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                  } in  Text.ParserCombinators.ReadP.Look [sat_s3Gl3];
                            };
                  } in  Text.Read.Lex.lexChar2 k_s3GkF; } in
        let {
          sat_s3Gls [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_s3xk7
          [LclId] =
              [w2_s3GkD lvl116_s3GkE] \r [a3_s3Gl4]
                  case a3_s3Gl4 of wild_s3Gl5 {
                    GHC.Types.C# x34_s3Gl6 [Occ=Once!] ->
                        case x34_s3Gl6 of {
                          __DEFAULT ->
                              let {
                                lvl117_s3Gl8 :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                [LclId] =
                                    [w2_s3GkD wild_s3Gl5] \u [] w2_s3GkD wild_s3Gl5; } in
                              let {
                                lvl118_s3Gl9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xk7
                                [LclId] =
                                    [lvl117_s3Gl8] \u []
                                        let {
                                          sat_s3Glb [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                          [LclId] =
                                              [lvl117_s3Gl8] \r [a4_s3Gla] lvl117_s3Gl8;
                                        } in 
                                          case Text.Read.Lex.$wlvl sat_s3Glb of {
                                            Unit# ww1_s3Gld [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s3Gld];
                                          }; } in
                              let {
                                sat_s3Glr [Occ=Once]
                                  :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xk7
                                [LclId] =
                                    [lvl117_s3Gl8 lvl118_s3Gl9] \r [a4_s3Gle]
                                        case a4_s3Gle of {
                                          [] -> lvl117_s3Gl8;
                                          : ds_s3Glg [Occ=Once!] ds1_s3Glh [Occ=Once!] ->
                                              case ds_s3Glg of {
                                                GHC.Types.C# ds2_s3Glj [Occ=Once!] ->
                                                    case ds2_s3Glj of {
                                                      __DEFAULT -> lvl117_s3Gl8;
                                                      '\\'# ->
                                                          case ds1_s3Glh of {
                                                            [] -> lvl117_s3Gl8;
                                                            : ds4_s3Glm [Occ=Once!] _ [Occ=Dead] ->
                                                                case ds4_s3Glm of {
                                                                  GHC.Types.C# ds6_s3Glp [Occ=Once!] ->
                                                                      case ds6_s3Glp of {
                                                                        __DEFAULT -> lvl117_s3Gl8;
                                                                        '&'# -> lvl118_s3Gl9;
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                        };
                              } in  Text.ParserCombinators.ReadP.Look [sat_s3Glr];
                          '\\'# -> lvl116_s3GkE;
                        };
                  };
        } in  Unit# [sat_s3Gls];

Text.Read.Lex.lexChar1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w2_s3Glt]
        case Text.Read.Lex.$wlexChar w2_s3Glt of {
          Unit# ww1_s3Glv [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Glv];
        };

Text.Read.Lex.lexChar
  :: Text.ParserCombinators.ReadP.ReadP GHC.Types.Char
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.lexChar1 eta_B1;

lexStrItem_r3yd4
  :: forall b.
     ((GHC.Types.Char, GHC.Types.Bool)
      -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [k_s3Glw]
        let {
          lvl116_s3Glx :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [k_s3Glw] \u [] lexStrItem_r3yd4 k_s3Glw; } in
        let {
          lvl117_s3Gly [Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
              [lvl116_s3Glx] \r [a_s3Glz]
                  case a_s3Glz of {
                    GHC.Types.C# y_s3GlB [Occ=Once!] ->
                        case y_s3GlB of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '\\'# -> lvl116_s3Glx;
                        };
                  }; } in
        let {
          lvl118_s3GlD [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl117_s3Gly]; } in
        let {
          k1_s3GlE [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl118_s3GlD] \r [a3_s3GlF] lvl118_s3GlD; } in
        let {
          lvl119_s3GlG [Occ=OnceL*]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              [k1_s3GlE] \r [a_s3GlH]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3GlH k1_s3GlE; } in
        let {
          $wlvl1_s3GlI [InlPrag=NOUSERINLINE[0], Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [lvl116_s3Glx lvl119_s3GlG] \r [ww_s3GlJ]
                  case ww_s3GlJ of ds_s3GlK {
                    __DEFAULT ->
                        case ord# [ds_s3GlK] of sat_s3GlM {
                          __DEFAULT ->
                              case int2Word# [sat_s3GlM] of x34_s3GlL [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case leWord# [x34_s3GlL 887##] of {
                                      __DEFAULT ->
                                          case ord# [ds_s3GlK] of sat_s3GlP {
                                            __DEFAULT ->
                                                case
                                                    __pkg_ccall base-4.11.0.0 [sat_s3GlP
                                                                               GHC.Prim.realWorld#]
                                                of
                                                { Unit# ds2_s3GlS [Occ=Once!] ->
                                                      case ds2_s3GlS of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Look [lvl119_s3GlG];
                                                        0# -> Text.ParserCombinators.ReadP.Fail [];
                                                      };
                                                };
                                          };
                                      1# ->
                                          case x34_s3GlL of wild_s3GlU {
                                            __DEFAULT ->
                                                case minusWord# [wild_s3GlU 9##] of sat_s3GlV {
                                                  __DEFAULT ->
                                                      case leWord# [sat_s3GlV 4##] of {
                                                        __DEFAULT ->
                                                            case wild_s3GlU of {
                                                              __DEFAULT ->
                                                                  Text.ParserCombinators.ReadP.Fail [];
                                                              160## ->
                                                                  Text.ParserCombinators.ReadP.Look [lvl119_s3GlG];
                                                            };
                                                        1# ->
                                                            Text.ParserCombinators.ReadP.Look [lvl119_s3GlG];
                                                      };
                                                };
                                            32## ->
                                                Text.ParserCombinators.ReadP.Look [lvl119_s3GlG];
                                          };
                                    };
                              };
                        };
                    '&'# -> lvl116_s3Glx;
                  }; } in
        let {
          lvl120_s3GlY [InlPrag=NOUSERINLINE[0], Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
              [$wlvl1_s3GlI] \r [w2_s3GlZ]
                  case w2_s3GlZ of {
                    GHC.Types.C# ww1_s3Gm1 [Occ=Once] -> $wlvl1_s3GlI ww1_s3Gm1;
                  }; } in
        let {
          lvl121_s3Gm2 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl120_s3GlY]; } in
        let {
          lvl122_s3Gm3 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [k_s3Glw] \u [] Text.Read.Lex.lexChar2 k_s3Glw; } in
        let {
          sat_s3Gmf [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [k_s3Glw lvl122_s3Gm3] \r [a3_s3Gma]
                  case a3_s3Gma of wild_s3Gmb {
                    GHC.Types.C# x34_s3Gmc [Occ=Once!] ->
                        case x34_s3Gmc of {
                          __DEFAULT ->
                              let {
                                sat_s3Gme [Occ=Once] :: (GHC.Types.Char, GHC.Types.Bool)
                                [LclId] =
                                    CCCS (,)! [wild_s3Gmb GHC.Types.False];
                              } in  k_s3Glw sat_s3Gme;
                          '\\'# -> lvl122_s3Gm3;
                        };
                  }; } in
        let {
          sat_s3Gmg [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gmf]; } in
        let {
          sat_s3Gm8 [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              [lvl121_s3Gm2] \r [a_s3Gm4]
                  case a_s3Gm4 of {
                    GHC.Types.C# y_s3Gm6 [Occ=Once!] ->
                        case y_s3Gm6 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '\\'# -> lvl121_s3Gm2;
                        };
                  }; } in
        let {
          sat_s3Gm9 [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nBl
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gm8];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3Gm9 sat_s3Gmg;

body_r3yd5
  :: ([GHC.Types.Char] -> GHC.Base.String)
     -> forall b1.
        (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,C(U)><L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [f_s3Gmh k_s3Gmi]
        let {
          lvl116_s3Gmj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_X3nOE
          [LclId] =
              [f_s3Gmh k_s3Gmi] \u []
                  let {
                    sat_s3Gmk [Occ=OnceL] :: GHC.Base.String
                    [LclId] =
                        [f_s3Gmh] \u [] f_s3Gmh GHC.Types.[]; } in
                  let {
                    sat_s3Gml [Occ=Once] :: Text.Read.Lex.Lexeme
                    [LclId] =
                        CCCS Text.Read.Lex.String! [sat_s3Gmk];
                  } in  k_s3Gmi sat_s3Gml; } in
        let {
          sat_s3Gmy [Occ=Once]
            :: (GHC.Types.Char, GHC.Types.Bool)
               -> Text.ParserCombinators.ReadP.P b1_X3nOE
          [LclId] =
              [f_s3Gmh k_s3Gmi lvl116_s3Gmj] \r [a3_s3Gmm]
                  case a3_s3Gmm of {
                    (,) c_s3Gmo [Occ=Once!] esc_s3Gmp [Occ=Once!] ->
                        case c_s3Gmo of wild1_s3Gmq {
                          GHC.Types.C# x34_s3Gmr [Occ=Once!] ->
                              let-no-escape {
                                $j_s3Gms [Occ=Once*T[0], Dmd=<L,1*U>]
                                  :: Text.ParserCombinators.ReadP.P b1_X3nOE
                                [LclId[JoinId(0)], Unf=OtherCon []] =
                                    [f_s3Gmh k_s3Gmi wild1_s3Gmq] \r []
                                        let {
                                          sat_s3Gmv [Occ=Once]
                                            :: [GHC.Types.Char] -> GHC.Base.String
                                          [LclId] =
                                              [f_s3Gmh wild1_s3Gmq] \r [x35_s3Gmt]
                                                  let {
                                                    sat_s3Gmu [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        CCCS :! [wild1_s3Gmq x35_s3Gmt];
                                                  } in  f_s3Gmh sat_s3Gmu;
                                        } in  body_r3yd5 sat_s3Gmv k_s3Gmi;
                              } in 
                                case x34_s3Gmr of {
                                  __DEFAULT -> $j_s3Gms;
                                  '"'# ->
                                      case esc_s3Gmp of {
                                        GHC.Types.False -> lvl116_s3Gmj;
                                        GHC.Types.True -> $j_s3Gms;
                                      };
                                };
                        };
                  };
        } in  lexStrItem_r3yd4 sat_s3Gmy;

lexExp_r3yd6
  :: forall b1.
     (GHC.Base.Maybe GHC.Integer.Type.Integer
      -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [k_s3Gmz]
        let {
          lvl116_s3GmA :: Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              [k_s3Gmz] \u []
                  let {
                    k1_s3GmB [Dmd=<L,C(U)>]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId, Arity=1, Str=<L,U(U)>, Unf=OtherCon []] =
                        sat-only [k_s3Gmz] \r [a3_s3GmC]
                            let {
                              sat_s3GmK [Occ=Once]
                                :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_X3nPk
                              [LclId] =
                                  [k_s3Gmz a3_s3GmC] \r [a4_s3GmD]
                                      let {
                                        sat_s3GmI [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [a3_s3GmC a4_s3GmD] \u []
                                                case a3_s3GmC of {
                                                  GHC.Types.C# x34_s3GmF [Occ=Once!] ->
                                                      case x34_s3GmF of {
                                                        __DEFAULT ->
                                                            Text.Read.Lex.valInteger
                                                                Text.Read.Lex.numberToFixed1
                                                                a4_s3GmD;
                                                        '-'# ->
                                                            case
                                                                Text.Read.Lex.valInteger
                                                                    Text.Read.Lex.numberToFixed1
                                                                    a4_s3GmD
                                                            of
                                                            sat_s3GmH
                                                            { __DEFAULT ->
                                                                  GHC.Integer.Type.negateInteger
                                                                      sat_s3GmH;
                                                            };
                                                      };
                                                }; } in
                                      let {
                                        sat_s3GmJ [Occ=Once]
                                          :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                        [LclId] =
                                            CCCS GHC.Base.Just! [sat_s3GmI];
                                      } in  k_s3Gmz sat_s3GmJ;
                            } in 
                              case $wlexDigits_r3y9x lvl6_r3y9C sat_s3GmK of {
                                Unit# ww1_s3GmM [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3GmM];
                              }; } in
                  let {
                    sat_s3Gn6 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        [k_s3Gmz] \u []
                            let {
                              sat_s3Gn3 [Occ=Once]
                                :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_X3nPk
                              [LclId] =
                                  [k_s3Gmz] \r [a3_s3Gn0]
                                      let {
                                        sat_s3Gn1 [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [a3_s3Gn0] \u []
                                                Text.Read.Lex.valInteger
                                                    Text.Read.Lex.numberToFixed1 a3_s3Gn0; } in
                                      let {
                                        sat_s3Gn2 [Occ=Once]
                                          :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                        [LclId] =
                                            CCCS GHC.Base.Just! [sat_s3Gn1];
                                      } in  k_s3Gmz sat_s3Gn2;
                            } in 
                              case $wlexDigits_r3y9x lvl6_r3y9C sat_s3Gn3 of {
                                Unit# ww1_s3Gn5 [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3Gn5];
                              }; } in
                  let {
                    sat_s3GmX [Occ=OnceL]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        [k1_s3GmB] \r [a_s3GmT]
                            case a_s3GmT of wild1_s3GmU {
                              GHC.Types.C# y_s3GmV [Occ=Once!] ->
                                  case y_s3GmV of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    '+'# -> k1_s3GmB wild1_s3GmU;
                                  };
                            }; } in
                  let {
                    sat_s3GmY [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Get! [sat_s3GmX]; } in
                  let {
                    sat_s3GmR [Occ=OnceL]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        [k1_s3GmB] \r [a_s3GmN]
                            case a_s3GmN of wild1_s3GmO {
                              GHC.Types.C# y_s3GmP [Occ=Once!] ->
                                  case y_s3GmP of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    '-'# -> k1_s3GmB wild1_s3GmO;
                                  };
                            }; } in
                  let {
                    sat_s3GmS [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Get! [sat_s3GmR];
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                            sat_s3GmS sat_s3GmY
                    of
                    sat_s3GmZ
                    { __DEFAULT ->
                          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                              sat_s3GmZ sat_s3Gn6;
                    }; } in
        let {
          sat_s3Gnh [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              [lvl116_s3GmA] \r [a_s3Gnd]
                  case a_s3Gnd of {
                    GHC.Types.C# y_s3Gnf [Occ=Once!] ->
                        case y_s3Gnf of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'E'# -> lvl116_s3GmA;
                        };
                  }; } in
        let {
          sat_s3Gni [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gnh]; } in
        let {
          sat_s3Gnb [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              [lvl116_s3GmA] \r [a_s3Gn7]
                  case a_s3Gn7 of {
                    GHC.Types.C# y_s3Gn9 [Occ=Once!] ->
                        case y_s3Gn9 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          'e'# -> lvl116_s3GmA;
                        };
                  }; } in
        let {
          sat_s3Gnc [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nPk
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gnb];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3Gnc sat_s3Gni;

lvl114_r3yd7
  :: forall b.
     (GHC.Base.Maybe Text.Read.Lex.Digits
      -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [k_s3Gnj] k_s3Gnj GHC.Base.Nothing;

lvl115_r3yd8
  :: forall b.
     (GHC.Base.Maybe GHC.Integer.Type.Integer
      -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [k_s3Gnk] k_s3Gnk GHC.Base.Nothing;

$wlexDecNumber_r3yd9
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    sat-only [] \r [w2_s3Gnl]
        let {
          sat_s3Gnx [Occ=Once]
            :: Text.Read.Lex.Digits -> Text.ParserCombinators.ReadP.P b1_s3xkr
          [LclId] =
              [w2_s3Gnl] \r [a3_s3Gnm]
                  let {
                    sat_s3Gnu [Occ=Once]
                      :: GHC.Base.Maybe Text.Read.Lex.Digits
                         -> Text.ParserCombinators.ReadP.P b1_s3xkr
                    [LclId] =
                        [w2_s3Gnl a3_s3Gnm] \r [a4_s3Gnn]
                            let {
                              sat_s3Gnr [Occ=Once]
                                :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                   -> Text.ParserCombinators.ReadP.P b1_s3xkr
                              [LclId] =
                                  [w2_s3Gnl a3_s3Gnm a4_s3Gnn] \r [a5_s3Gno]
                                      let {
                                        sat_s3Gnp [Occ=Once] :: Text.Read.Lex.Number
                                        [LclId] =
                                            CCCS Text.Read.Lex.MkDecimal! [a3_s3Gnm
                                                                           a4_s3Gnn
                                                                           a5_s3Gno]; } in
                                      let {
                                        sat_s3Gnq [Occ=Once] :: Text.Read.Lex.Lexeme
                                        [LclId] =
                                            CCCS Text.Read.Lex.Number! [sat_s3Gnp];
                                      } in  w2_s3Gnl sat_s3Gnq;
                            } in 
                              case
                                  Text.ParserCombinators.ReadP.$w<++
                                      lexExp_r3yd6 lvl115_r3yd8 sat_s3Gnr
                              of
                              { Unit# ww1_s3Gnt [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3Gnt];
                              };
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$w<++
                            lexFrac_r3y9E lvl114_r3yd7 sat_s3Gnu
                    of
                    { Unit# ww1_s3Gnw [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3Gnw];
                    };
        } in  $wlexDigits_r3y9x lvl6_r3y9C sat_s3Gnx;

lexDecNumber_r3yda
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3Gny]
        case $wlexDecNumber_r3yd9 w2_s3Gny of {
          Unit# ww1_s3GnA [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3GnA];
        };

Text.Read.Lex.expect2
  :: forall b.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [k_s3GnB]
        let {
          $wk_s3GnC [InlPrag=NOUSERINLINE[0], Occ=OnceL!, Dmd=<L,C(C1(U))>]
            :: GHC.Types.Char
               -> GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Arity=2, Str=<L,U(U)><S,1*U>, Unf=OtherCon []] =
              sat-only [k_s3GnB] \r [ww_s3GnD ww1_s3GnE]
                  let {
                    lvl116_s3GnF [Occ=OnceL*] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [k_s3GnB ww_s3GnD] \u []
                            let {
                              sat_s3GnG [Occ=Once] :: Text.Read.Lex.Lexeme
                              [LclId] =
                                  CCCS Text.Read.Lex.Char! [ww_s3GnD];
                            } in  k_s3GnB sat_s3GnG;
                  } in 
                    case ww1_s3GnE of {
                      GHC.Types.False ->
                          case ww_s3GnD of {
                            GHC.Types.C# x34_s3GnJ [Occ=Once!] ->
                                case x34_s3GnJ of {
                                  __DEFAULT ->
                                      let {
                                        sat_s3GnP [Occ=Once]
                                          :: GHC.Types.Char
                                             -> Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            [lvl116_s3GnF] \r [a_s3GnL]
                                                case a_s3GnL of {
                                                  GHC.Types.C# y_s3GnN [Occ=Once!] ->
                                                      case y_s3GnN of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Fail [];
                                                        '\''# -> lvl116_s3GnF;
                                                      };
                                                };
                                      } in  Text.ParserCombinators.ReadP.Get [sat_s3GnP];
                                  '\''# -> Text.ParserCombinators.ReadP.Fail [];
                                };
                          };
                      GHC.Types.True ->
                          let {
                            sat_s3GnU [Occ=Once]
                              :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                            [LclId] =
                                [lvl116_s3GnF] \r [a_s3GnQ]
                                    case a_s3GnQ of {
                                      GHC.Types.C# y_s3GnS [Occ=Once!] ->
                                          case y_s3GnS of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            '\''# -> lvl116_s3GnF;
                                          };
                                    };
                          } in  Text.ParserCombinators.ReadP.Get [sat_s3GnU];
                    }; } in
        let {
          k1_s3GnV [InlPrag=NOUSERINLINE[0], Occ=Once, Dmd=<L,C(U)>]
            :: (GHC.Types.Char, GHC.Types.Bool)
               -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Arity=1, Str=<S(LS),1*U(U(U),1*U)>, Unf=OtherCon []] =
              [$wk_s3GnC] \r [w2_s3GnW]
                  case w2_s3GnW of {
                    (,) ww1_s3GnY [Occ=Once] ww2_s3GnZ [Occ=Once] ->
                        $wk_s3GnC ww1_s3GnY ww2_s3GnZ;
                  }; } in
        let {
          lvl116_s3Go0 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              [k1_s3GnV] \u [] Text.Read.Lex.lexChar2 k1_s3GnV; } in
        let {
          lvl117_s3Go1 [Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
              [k_s3GnB lvl116_s3Go0] \r [a3_s3Go2]
                  case a3_s3Go2 of wild_s3Go3 {
                    GHC.Types.C# x34_s3Go4 [Occ=Once!] ->
                        case x34_s3Go4 of {
                          __DEFAULT ->
                              let {
                                lvl118_s3Go6 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
                                [LclId] =
                                    [k_s3GnB wild_s3Go3] \u []
                                        let {
                                          sat_s3Go7 [Occ=Once] :: Text.Read.Lex.Lexeme
                                          [LclId] =
                                              CCCS Text.Read.Lex.Char! [wild_s3Go3];
                                        } in  k_s3GnB sat_s3Go7; } in
                              let {
                                sat_s3Goc [Occ=Once]
                                  :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                                [LclId] =
                                    [lvl118_s3Go6] \r [a_s3Go8]
                                        case a_s3Go8 of {
                                          GHC.Types.C# y_s3Goa [Occ=Once!] ->
                                              case y_s3Goa of {
                                                __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                '\''# -> lvl118_s3Go6;
                                              };
                                        };
                              } in  Text.ParserCombinators.ReadP.Get [sat_s3Goc];
                          '\''# -> Text.ParserCombinators.ReadP.Fail [];
                          '\\'# -> lvl116_s3Go0;
                        };
                  }; } in
        let {
          lvl118_s3God [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [lvl117_s3Go1]; } in
        let {
          sat_s3Gp8 [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              [k_s3GnB] \u []
                  let {
                    lvl119_s3Gok [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [k_s3GnB] \u [] body_r3yd5 GHC.Base.id k_s3GnB; } in
                  let {
                    sat_s3Gp7 [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [k_s3GnB] \u []
                            let {
                              sat_s3Gp6 [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                              [LclId] =
                                  [k_s3GnB] \u []
                                      let {
                                        sat_s3Gp5 [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            [k_s3GnB] \u []
                                                let {
                                                  sat_s3Gp4 [Occ=Once]
                                                    :: Text.ParserCombinators.ReadP.P b_X3nCK
                                                  [LclId] =
                                                      [k_s3GnB] \u []
                                                          case
                                                              Text.ParserCombinators.ReadP.$w<++
                                                                  lexHexOct_r3y9B
                                                                  lexDecNumber_r3yda
                                                                  k_s3GnB
                                                          of
                                                          { Unit# ww1_s3Gp3 [Occ=Once] ->
                                                                Text.ParserCombinators.ReadP.Look [ww1_s3Gp3];
                                                          }; } in
                                                let {
                                                  sat_s3Gp0 [Occ=Once]
                                                    :: GHC.Types.Char
                                                       -> Text.ParserCombinators.ReadP.P b_X3nCK
                                                  [LclId] =
                                                      [k_s3GnB] \r [a_s3GoJ]
                                                          case a_s3GoJ of wild_s3GoK {
                                                            GHC.Types.C# c#_s3GoL ->
                                                                case ord# [c#_s3GoL] of sat_s3GoN {
                                                                  __DEFAULT ->
                                                                      case
                                                                          __pkg_ccall base-4.11.0.0 [sat_s3GoN
                                                                                                     GHC.Prim.realWorld#]
                                                                      of
                                                                      { Unit# ds1_s3GoQ [Occ=Once!] ->
                                                                            let-no-escape {
                                                                              $j_s3GoR [Occ=Once*T[0],
                                                                                        Dmd=<L,1*U>]
                                                                                :: Text.ParserCombinators.ReadP.P
                                                                                     b_X3nCK
                                                                              [LclId[JoinId(0)],
                                                                               Unf=OtherCon []] =
                                                                                  [k_s3GnB
                                                                                   wild_s3GoK] \r []
                                                                                      let {
                                                                                        sat_s3GoV [Occ=Once]
                                                                                          :: GHC.Base.String
                                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                                  b_X3nCK
                                                                                        [LclId] =
                                                                                            [k_s3GnB
                                                                                             wild_s3GoK] \r [a3_s3GoS]
                                                                                                let {
                                                                                                  sat_s3GoT [Occ=Once]
                                                                                                    :: GHC.Base.String
                                                                                                  [LclId] =
                                                                                                      CCCS :! [wild_s3GoK
                                                                                                               a3_s3GoS]; } in
                                                                                                let {
                                                                                                  sat_s3GoU [Occ=Once]
                                                                                                    :: Text.Read.Lex.Lexeme
                                                                                                  [LclId] =
                                                                                                      CCCS Text.Read.Lex.Ident! [sat_s3GoT];
                                                                                                } in 
                                                                                                  k_s3GnB
                                                                                                      sat_s3GoU;
                                                                                      } in 
                                                                                        case
                                                                                            Text.ParserCombinators.ReadP.$wmunch
                                                                                                isIdfChar_r3y8W
                                                                                                sat_s3GoV
                                                                                        of
                                                                                        { Unit# ww1_s3GoX [Occ=Once] ->
                                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3GoX];
                                                                                        };
                                                                            } in 
                                                                              case ds1_s3GoQ of {
                                                                                __DEFAULT ->
                                                                                    $j_s3GoR;
                                                                                0# ->
                                                                                    case
                                                                                        c#_s3GoL
                                                                                    of
                                                                                    { __DEFAULT ->
                                                                                          Text.ParserCombinators.ReadP.Fail [];
                                                                                      '_'# ->
                                                                                          $j_s3GoR;
                                                                                    };
                                                                              };
                                                                      };
                                                                };
                                                          }; } in
                                                let {
                                                  sat_s3Gp1 [Occ=Once]
                                                    :: Text.ParserCombinators.ReadP.P b_X3nCK
                                                  [LclId] =
                                                      CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gp0];
                                                } in 
                                                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                                      sat_s3Gp1 sat_s3Gp4; } in
                                      let {
                                        sat_s3GoH [Occ=Once]
                                          :: GHC.Types.Char
                                             -> Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            [k_s3GnB] \r [a_s3Gox]
                                                case Text.Read.Lex.isSymbolChar a_s3Gox of {
                                                  GHC.Types.False ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                  GHC.Types.True ->
                                                      let {
                                                        sat_s3GoE [Occ=Once]
                                                          :: GHC.Base.String
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b_X3nCK
                                                        [LclId] =
                                                            [k_s3GnB a_s3Gox] \r [a3_s3Goz]
                                                                let {
                                                                  a4_s3GoA :: GHC.Base.String
                                                                  [LclId, Unf=OtherCon []] =
                                                                      CCCS :! [a_s3Gox a3_s3Goz];
                                                                } in 
                                                                  case
                                                                      GHC.List.elem
                                                                          GHC.Classes.$fEq[]_$s$fEq[]1
                                                                          a4_s3GoA
                                                                          reserved_ops29_r3y9q
                                                                  of
                                                                  { GHC.Types.False ->
                                                                        let {
                                                                          sat_s3GoC [Occ=Once]
                                                                            :: Text.Read.Lex.Lexeme
                                                                          [LclId] =
                                                                              CCCS Text.Read.Lex.Symbol! [a4_s3GoA];
                                                                        } in  k_s3GnB sat_s3GoC;
                                                                    GHC.Types.True ->
                                                                        let {
                                                                          sat_s3GoD [Occ=Once]
                                                                            :: Text.Read.Lex.Lexeme
                                                                          [LclId] =
                                                                              CCCS Text.Read.Lex.Punc! [a4_s3GoA];
                                                                        } in  k_s3GnB sat_s3GoD;
                                                                  };
                                                      } in 
                                                        case
                                                            Text.ParserCombinators.ReadP.$wmunch
                                                                Text.Read.Lex.isSymbolChar sat_s3GoE
                                                        of
                                                        { Unit# ww1_s3GoG [Occ=Once] ->
                                                              Text.ParserCombinators.ReadP.Look [ww1_s3GoG];
                                                        };
                                                }; } in
                                      let {
                                        sat_s3GoI [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b_X3nCK
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Get! [sat_s3GoH];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3GoI sat_s3Gp5; } in
                            let {
                              sat_s3Gov [Occ=Once]
                                :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                              [LclId] =
                                  [k_s3GnB] \r [a_s3Gor]
                                      case
                                          GHC.List.elem
                                              GHC.Classes.$fEqChar
                                              a_s3Gor
                                              Text.Read.Lex.isSymbolChar3
                                      of
                                      { GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                                        GHC.Types.True ->
                                            let {
                                              sat_s3Got [Occ=Once] :: GHC.Base.String
                                              [LclId] =
                                                  CCCS :! [a_s3Gor GHC.Types.[]]; } in
                                            let {
                                              sat_s3Gou [Occ=Once] :: Text.Read.Lex.Lexeme
                                              [LclId] =
                                                  CCCS Text.Read.Lex.Punc! [sat_s3Got];
                                            } in  k_s3GnB sat_s3Gou;
                                      }; } in
                            let {
                              sat_s3Gow [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gov];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3Gow sat_s3Gp6; } in
                  let {
                    sat_s3Gop [Occ=Once]
                      :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        [lvl119_s3Gok] \r [a_s3Gol]
                            case a_s3Gol of {
                              GHC.Types.C# y_s3Gon [Occ=Once!] ->
                                  case y_s3Gon of {
                                    __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                    '"'# -> lvl119_s3Gok;
                                  };
                            }; } in
                  let {
                    sat_s3Goq [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Gop];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3Goq sat_s3Gp7; } in
        let {
          sat_s3Goi [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              [lvl118_s3God] \r [a_s3Goe]
                  case a_s3Goe of {
                    GHC.Types.C# y_s3Gog [Occ=Once!] ->
                        case y_s3Gog of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '\''# -> lvl118_s3God;
                        };
                  }; } in
        let {
          sat_s3Goj [Occ=Once] :: Text.ParserCombinators.ReadP.P b_X3nCK
          [LclId] =
              CCCS Text.ParserCombinators.ReadP.Get! [sat_s3Goi];
        } in 
          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              sat_s3Goj sat_s3Gp8;

Text.Read.Lex.$wlex [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w2_s3Gp9]
        let {
          lvl116_s3Gpa [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xkG
          [LclId] =
              [w2_s3Gp9] \u []
                  let {
                    lvl117_s3Gpb [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        [w2_s3Gp9] \u [] w2_s3Gp9 Text.Read.Lex.EOF; } in
                  let {
                    sat_s3Gpi [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        [w2_s3Gp9] \u [] Text.Read.Lex.expect2 w2_s3Gp9; } in
                  let {
                    sat_s3Gpg [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        [lvl117_s3Gpb] \r [a3_s3Gpc]
                            case a3_s3Gpc of {
                              [] -> lvl117_s3Gpb;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3Gph [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3xkG
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Gpg];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3Gph sat_s3Gpi; } in
        let {
          k_s3Gpj [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3xkG
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3Gpa] \r [a3_s3Gpk] lvl116_s3Gpa; } in
        let {
          sat_s3Gpm [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkG
          [LclId] =
              [k_s3Gpj] \r [a_s3Gpl]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3Gpl k_s3Gpj;
        } in  Unit# [sat_s3Gpm];

Text.Read.Lex.lex1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [w2_s3Gpn]
        case Text.Read.Lex.$wlex w2_s3Gpn of {
          Unit# ww1_s3Gpp [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3Gpp];
        };

Text.Read.Lex.lex
  :: Text.ParserCombinators.ReadP.ReadP Text.Read.Lex.Lexeme
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.lex1 eta_B1;

Text.Read.Lex.$wexpect [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Lexeme
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId, Arity=2, Str=<L,U><L,1*C1(U)>, Unf=OtherCon []] =
    [] \r [w2_s3Gpq w3_s3Gpr]
        let {
          lvl116_s3Gps [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_s3xkN
          [LclId] =
              [w2_s3Gpq w3_s3Gpr] \u []
                  let {
                    lvl117_s3Gpt :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [w3_s3Gpr] \u [] w3_s3Gpr GHC.Tuple.(); } in
                  let {
                    lvl118_s3Gpu [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [w2_s3Gpq lvl117_s3Gpt] \u []
                            case w2_s3Gpq of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                              Text.Read.Lex.EOF -> lvl117_s3Gpt;
                            }; } in
                  let {
                    sat_s3GpF [Occ=Once] :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [w2_s3Gpq lvl117_s3Gpt] \u []
                            let {
                              sat_s3GpE [Occ=Once]
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b_s3xkN
                              [LclId] =
                                  [w2_s3Gpq lvl117_s3Gpt] \r [a3_s3GpC]
                                      case Text.Read.Lex.$fEqLexeme_$c== a3_s3GpC w2_s3Gpq of {
                                        GHC.Types.False -> Text.ParserCombinators.ReadP.Fail [];
                                        GHC.Types.True -> lvl117_s3Gpt;
                                      };
                            } in  Text.Read.Lex.expect2 sat_s3GpE; } in
                  let {
                    sat_s3GpA [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        [lvl118_s3Gpu] \r [a3_s3Gpw]
                            case a3_s3Gpw of {
                              [] -> lvl118_s3Gpu;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3GpB [Occ=Once] :: Text.ParserCombinators.ReadP.P b_s3xkN
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3GpA];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3GpB sat_s3GpF; } in
        let {
          k_s3GpG [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b_s3xkN
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3Gps] \r [a3_s3GpH] lvl116_s3Gps; } in
        let {
          sat_s3GpJ [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3xkN
          [LclId] =
              [k_s3GpG] \r [a_s3GpI]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3GpI k_s3GpG;
        } in  Unit# [sat_s3GpJ];

Text.Read.Lex.expect1 [InlPrag=NOUSERINLINE[0]]
  :: Text.Read.Lex.Lexeme
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3GpK w3_s3GpL]
        case Text.Read.Lex.$wexpect w2_s3GpK w3_s3GpL of {
          Unit# ww1_s3GpN [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3GpN];
        };

Text.Read.Lex.expect
  :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.ReadP ()
[GblId, Arity=2, Str=<L,U><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.expect1 eta_B2 eta_B1;

Text.Read.Lex.$whsLex [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w2_s3GpO]
        let {
          lvl116_s3GpP [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3xkT
          [LclId] =
              [w2_s3GpO] \u []
                  let {
                    lvl117_s3GpQ [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT
                    [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                        [w2_s3GpO] \r [s_s3GpR] w2_s3GpO s_s3GpR; } in
                  let {
                    lvl118_s3GpS
                      :: Text.ParserCombinators.ReadP.P
                           (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId, Unf=OtherCon []] =
                        CCCS Text.ParserCombinators.ReadP.Result! [lvl117_s3GpQ
                                                                   Text.ParserCombinators.ReadP.Fail]; } in
                  let {
                    sat_s3Gq1 [Occ=Once]
                      :: Text.ParserCombinators.ReadP.P
                           (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId] =
                        [lvl118_s3GpS] \u []
                            let {
                              sat_s3Gq0 [Occ=Once]
                                :: Text.Read.Lex.Lexeme
                                   -> Text.ParserCombinators.ReadP.P
                                        (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                              [LclId] =
                                  [lvl118_s3GpS] \r [a3_s3GpZ] lvl118_s3GpS;
                            } in  Text.Read.Lex.expect2 sat_s3Gq0; } in
                  let {
                    sat_s3GpX [Occ=OnceL]
                      :: GHC.Base.String
                         -> Text.ParserCombinators.ReadP.P
                              (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId] =
                        [lvl118_s3GpS] \r [a3_s3GpT]
                            case a3_s3GpT of {
                              [] -> lvl118_s3GpS;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3GpY [Occ=Once]
                      :: Text.ParserCombinators.ReadP.P
                           (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT)
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3GpX];
                  } in 
                    case
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                            sat_s3GpY sat_s3Gq1
                    of
                    sat_s3Gq2
                    { __DEFAULT ->
                          Text.ParserCombinators.ReadP.gather_gath GHC.Base.id sat_s3Gq2;
                    }; } in
        let {
          k_s3Gq3 [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3xkT
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3GpP] \r [a3_s3Gq4] lvl116_s3GpP; } in
        let {
          sat_s3Gq6 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3xkT
          [LclId] =
              [k_s3Gq3] \r [a_s3Gq5]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3Gq5 k_s3Gq3;
        } in  Unit# [sat_s3Gq6];

Text.Read.Lex.hsLex1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w2_s3Gq7]
        case Text.Read.Lex.$whsLex w2_s3Gq7 of {
          Unit# ww1_s3Gq9 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3Gq9];
        };

Text.Read.Lex.hsLex
  :: Text.ParserCombinators.ReadP.ReadP GHC.Base.String
[GblId, Arity=1, Str=<L,C(U)>m2, Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.hsLex1 eta_B1;

Text.Read.Lex.MkNumber
  :: GHC.Types.Int -> Text.Read.Lex.Digits -> Text.Read.Lex.Number
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Read.Lex.MkNumber [eta_B2 eta_B1];

Text.Read.Lex.MkDecimal
  :: Text.Read.Lex.Digits
     -> GHC.Base.Maybe Text.Read.Lex.Digits
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> Text.Read.Lex.Number
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Read.Lex.MkDecimal [eta_B3 eta_B2 eta_B1];

Text.Read.Lex.Char :: GHC.Types.Char -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Char [eta_B1];

Text.Read.Lex.String :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.String [eta_B1];

Text.Read.Lex.Punc :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Punc [eta_B1];

Text.Read.Lex.Ident :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m4,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Ident [eta_B1];

Text.Read.Lex.Symbol :: GHC.Base.String -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m5,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Symbol [eta_B1];

Text.Read.Lex.Number
  :: Text.Read.Lex.Number -> Text.Read.Lex.Lexeme
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m6,
 Unf=OtherCon []] =
    [] \r [eta_B1] Text.Read.Lex.Number [eta_B1];

Text.Read.Lex.EOF :: Text.Read.Lex.Lexeme
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.EOF! [];

