
==================== Output Cmm ====================
2018-03-16 15:58:07.162422052 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:58:07.163773545 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure" {
     Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure:
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_info;
 },
 sat_s3tB5_entry() //  [R1, R2]
         { info_tbl: [(c3tEa,
                       label: sat_s3tB5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tEa: // global
           R4 = R2;
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tB6_entry() //  [R1, R2]
         { info_tbl: [(c3tEd,
                       label: sat_s3tB6_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tEd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tEh; else goto c3tEg;
       c3tEh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tEg: // global
           _s3tB0::P64 = P64[R1 + 7];
           _s3tB3::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3tB5_info;
           P64[Hp - 8] = _s3tB0::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3tB3::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(c3tEi,
                       label: Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tEi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3tEm; else goto c3tEl;
       c3tEm: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tEl: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3tB6_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.16600211 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_info;
 },
 sat_s3tBe_entry() //  [R1]
         { info_tbl: [(c3tED,
                       label: sat_s3tBe_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tED: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBf_entry() //  [R1, R2]
         { info_tbl: [(c3tEG,
                       label: sat_s3tBf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tEG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3tEK; else goto c3tEJ;
       c3tEK: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tEJ: // global
           _s3tB7::P64 = P64[R1 + 7];
           _s3tBa::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = _s3tB7::P64;
           I64[Hp - 8] = sat_s3tBe_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3tBa::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(c3tEL,
                       label: Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tEL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3tEP; else goto c3tEO;
       c3tEP: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tEO: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3tBf_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.16749784 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fFunctorReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fFunctorReadPrec_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure+3;
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.168246094 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_info;
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_entry() //  [R2,
                                                                     R4]
         { info_tbl: [(c3tEU,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tEU: // global
           R2 = R2;
           R1 = R4;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.169089896 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_info;
 },
 Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_entry() //  []
         { info_tbl: [(c3tF1,
                       label: Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tF1: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.170476706 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_info;
 },
 sat_s3tBs_entry() //  [R1, R2]
         { info_tbl: [(c3tFj,
                       label: sat_s3tBs_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tFj: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBt_entry() //  [R1, R2]
         { info_tbl: [(c3tFm,
                       label: sat_s3tBt_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tFm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tFq; else goto c3tFp;
       c3tFq: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tFp: // global
           _s3tBn::P64 = P64[R1 + 7];
           _s3tBo::P64 = P64[R1 + 15];
           _s3tBp::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3tBs_info;
           P64[Hp - 16] = _s3tBn::P64;
           P64[Hp - 8] = _s3tBo::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3tBp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3tFr,
                       label: Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tFr: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3tFv; else goto c3tFu;
       c3tFv: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tFu: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tBt_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.172730741 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_info;
 },
 sat_s3tBD_entry() //  [R1, R2]
         { info_tbl: [(c3tFR,
                       label: sat_s3tBD_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tFR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3tFV; else goto c3tFU;
       c3tFV: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tFU: // global
           _s3tBu::P64 = P64[R1 + 7];
           _s3tBz::P64 = P64[R1 + 15];
           _s3tBA::P64 = P64[R1 + 23];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3tBu::P64;
           P64[Hp - 8] = _s3tBA::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3tBz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBE_entry() //  [R1, R2]
         { info_tbl: [(c3tFW,
                       label: sat_s3tBE_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tFW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tG0; else goto c3tFZ;
       c3tG0: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tFZ: // global
           _s3tBu::P64 = P64[R1 + 7];
           _s3tBw::P64 = P64[R1 + 15];
           _s3tBx::P64 = P64[R1 + 23];
           _s3tBz::P64 = P64[R1 + 31];
           I64[Hp - 24] = sat_s3tBD_info;
           P64[Hp - 16] = _s3tBu::P64;
           P64[Hp - 8] = _s3tBz::P64;
           P64[Hp] = R2;
           R3 = Hp - 23;
           R2 = _s3tBx::P64;
           R1 = _s3tBw::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBF_entry() //  [R1, R2]
         { info_tbl: [(c3tG1,
                       label: sat_s3tBF_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tG1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3tG5; else goto c3tG4;
       c3tG5: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tG4: // global
           _s3tBu::P64 = P64[R1 + 7];
           _s3tBw::P64 = P64[R1 + 15];
           _s3tBx::P64 = P64[R1 + 23];
           _s3tBy::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3tBE_info;
           P64[Hp - 24] = _s3tBu::P64;
           P64[Hp - 16] = _s3tBw::P64;
           P64[Hp - 8] = _s3tBx::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3tBy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_entry() //  [R2,
                                                                     R3, R4, R5]
         { info_tbl: [(c3tG6,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tG6: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3tGa; else goto c3tG9;
       c3tGa: // global
           HpAlloc = 72;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tG9: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_s3tBF_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = Hp - 64;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.175861624 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_info;
 },
 sat_s3tBO_entry() //  [R1]
         { info_tbl: [(c3tGw,
                       label: sat_s3tBO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tGw: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBP_entry() //  [R1, R2]
         { info_tbl: [(c3tGz,
                       label: sat_s3tBP_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tGz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3tGD; else goto c3tGC;
       c3tGD: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tGC: // global
           _s3tBH::P64 = P64[R1 + 7];
           _s3tBI::P64 = P64[R1 + 15];
           _s3tBK::P64 = P64[R1 + 23];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3tBK::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3tBO_info;
           P64[Hp] = Hp - 40;
           R3 = Hp - 7;
           R2 = _s3tBI::P64;
           R1 = _s3tBH::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBQ_entry() //  [R1, R2]
         { info_tbl: [(c3tGE,
                       label: sat_s3tBQ_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tGE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tGI; else goto c3tGH;
       c3tGI: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tGH: // global
           _s3tBH::P64 = P64[R1 + 7];
           _s3tBI::P64 = P64[R1 + 15];
           _s3tBJ::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3tBP_info;
           P64[Hp - 16] = _s3tBH::P64;
           P64[Hp - 8] = _s3tBI::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3tBJ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3tGJ,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tGJ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3tGN; else goto c3tGM;
       c3tGN: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tGM: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tBQ_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.178861748 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_info;
 },
 sat_s3tBZ_entry() //  [R1, R2]
         { info_tbl: [(c3tH9,
                       label: sat_s3tBZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tH9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tHd; else goto c3tHc;
       c3tHd: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tHc: // global
           _s3tBV::P64 = P64[R1 + 7];
           _s3tBW::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3tBW::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3tBV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tC0_entry() //  [R1, R2]
         { info_tbl: [(c3tHe,
                       label: sat_s3tC0_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tHe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tHi; else goto c3tHh;
       c3tHi: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tHh: // global
           _s3tBS::P64 = P64[R1 + 7];
           _s3tBT::P64 = P64[R1 + 15];
           _s3tBV::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_s3tBZ_info;
           P64[Hp - 8] = _s3tBV::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3tBT::P64;
           R1 = _s3tBS::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tC1_entry() //  [R1, R2]
         { info_tbl: [(c3tHj,
                       label: sat_s3tC1_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tHj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tHn; else goto c3tHm;
       c3tHn: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tHm: // global
           _s3tBS::P64 = P64[R1 + 7];
           _s3tBT::P64 = P64[R1 + 15];
           _s3tBU::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3tC0_info;
           P64[Hp - 16] = _s3tBS::P64;
           P64[Hp - 8] = _s3tBT::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3tBU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3tHo,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tHo: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3tHs; else goto c3tHr;
       c3tHs: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tHr: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tC1_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.183033186 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_info;
 },
 sat_s3tC9_entry() //  [R1, R2]
         { info_tbl: [(c3tHM,
                       label: sat_s3tC9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tHM: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl1_s3tC7_entry() //  [R1]
         { info_tbl: [(c3tHP,
                       label: lvl1_s3tC7_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tHP: // global
           _s3tC7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3tHQ; else goto c3tHR;
       c3tHR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tHT; else goto c3tHS;
       c3tHT: // global
           HpAlloc = 16;
           goto c3tHQ;
       c3tHQ: // global
           R1 = _s3tC7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tHS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3tC7::P64;
           _s3tC3::P64 = P64[_s3tC7::P64 + 16];
           _s3tC4::P64 = P64[_s3tC7::P64 + 24];
           _s3tC6::P64 = P64[_s3tC7::P64 + 32];
           I64[Hp - 8] = sat_s3tC9_info;
           P64[Hp] = _s3tC6::P64;
           R3 = Hp - 7;
           R2 = _s3tC4::P64;
           R1 = _s3tC3::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3tCb_entry() //  [R1]
         { info_tbl: [(c3tHZ,
                       label: sat_s3tCb_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tHZ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tCc_entry() //  [R1, R2]
         { info_tbl: [(c3tI2,
                       label: sat_s3tCc_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tI2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3tI6; else goto c3tI5;
       c3tI6: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tI5: // global
           _s3tC3::P64 = P64[R1 + 7];
           _s3tC4::P64 = P64[R1 + 15];
           _s3tC5::P64 = P64[R1 + 23];
           I64[Hp - 48] = lvl1_s3tC7_info;
           P64[Hp - 32] = _s3tC3::P64;
           P64[Hp - 24] = _s3tC4::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3tCb_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3tC5::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3tI7,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tI7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3tIb; else goto c3tIa;
       c3tIb: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tIa: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tCc_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.185974528 UTC

[section ""data" . $c>>_r3tAR_closure" {
     $c>>_r3tAR_closure:
         const $c>>_r3tAR_info;
 },
 sat_s3tCk_entry() //  [R1]
         { info_tbl: [(c3tIs,
                       label: sat_s3tCk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tIs: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tCl_entry() //  [R1, R2]
         { info_tbl: [(c3tIv,
                       label: sat_s3tCl_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tIv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3tIz; else goto c3tIy;
       c3tIz: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tIy: // global
           _s3tCe::P64 = P64[R1 + 7];
           _s3tCf::P64 = P64[R1 + 15];
           _s3tCg::P64 = P64[R1 + 23];
           I64[Hp - 48] = stg_ap_3_upd_info;
           P64[Hp - 32] = _s3tCe::P64;
           P64[Hp - 24] = _s3tCf::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3tCk_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3tCg::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 $c>>_r3tAR_entry() //  [R2, R3, R4]
         { info_tbl: [(c3tIA,
                       label: $c>>_r3tAR_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tIA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3tIE; else goto c3tID;
       c3tIE: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $c>>_r3tAR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tID: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tCl_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.187711779 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_closure:
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_info;
 },
 Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_entry() //  [R2,
                                                                   R3, R4]
         { info_tbl: [(c3tIJ,
                       label: Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tIJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $c>>_r3tAR_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.188548144 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure+4;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.189352465 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure+3;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure+3;
         const Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.190018141 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.190640728 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.minPrec_closure" {
     Text.ParserCombinators.ReadPrec.minPrec_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.191438713 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.reset1_closure" {
     Text.ParserCombinators.ReadPrec.reset1_closure:
         const Text.ParserCombinators.ReadPrec.reset1_info;
 },
 Text.ParserCombinators.ReadPrec.reset1_entry() //  [R2]
         { info_tbl: [(c3tIQ,
                       label: Text.ParserCombinators.ReadPrec.reset1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tIQ: // global
           _s3tCm::P64 = R2;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure+1;
           R1 = _s3tCm::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.192306873 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.reset_closure" {
     Text.ParserCombinators.ReadPrec.reset_closure:
         const Text.ParserCombinators.ReadPrec.reset_info;
 },
 Text.ParserCombinators.ReadPrec.reset_entry() //  [R2, R3]
         { info_tbl: [(c3tIX,
                       label: Text.ParserCombinators.ReadPrec.reset_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tIX: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.reset1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.193174744 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.lift1_closure" {
     Text.ParserCombinators.ReadPrec.lift1_closure:
         const Text.ParserCombinators.ReadPrec.lift1_info;
 },
 Text.ParserCombinators.ReadPrec.lift1_entry() //  [R2]
         { info_tbl: [(c3tJ4,
                       label: Text.ParserCombinators.ReadPrec.lift1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tJ4: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.194098311 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.lift_closure" {
     Text.ParserCombinators.ReadPrec.lift_closure:
         const Text.ParserCombinators.ReadPrec.lift_info;
 },
 Text.ParserCombinators.ReadPrec.lift_entry() //  [R2, R3]
         { info_tbl: [(c3tJb,
                       label: Text.ParserCombinators.ReadPrec.lift_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tJb: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.lift1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.195034874 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.get1_closure" {
     Text.ParserCombinators.ReadPrec.get1_closure:
         const Text.ParserCombinators.ReadPrec.get1_info;
 },
 Text.ParserCombinators.ReadPrec.get1_entry() //  [R2, R3]
         { info_tbl: [(c3tJj,
                       label: Text.ParserCombinators.ReadPrec.get1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tJj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tJn; else goto c3tJm;
       c3tJn: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.get1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tJm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R3;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.196050291 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.get_closure" {
     Text.ParserCombinators.ReadPrec.get_closure:
         const Text.ParserCombinators.ReadPrec.get_info;
 },
 Text.ParserCombinators.ReadPrec.get_entry() //  [R2, R3]
         { info_tbl: [(c3tJs,
                       label: Text.ParserCombinators.ReadPrec.get_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tJs: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.get1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.196942413 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.look1_closure" {
     Text.ParserCombinators.ReadPrec.look1_closure:
         const Text.ParserCombinators.ReadPrec.look1_info;
 },
 Text.ParserCombinators.ReadPrec.look1_entry() //  [R2, R3]
         { info_tbl: [(c3tJA,
                       label: Text.ParserCombinators.ReadPrec.look1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tJA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tJE; else goto c3tJD;
       c3tJE: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.look1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tJD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R3;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.19793424 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.look_closure" {
     Text.ParserCombinators.ReadPrec.look_closure:
         const Text.ParserCombinators.ReadPrec.look_info;
 },
 Text.ParserCombinators.ReadPrec.look_entry() //  [R2, R3]
         { info_tbl: [(c3tJJ,
                       label: Text.ParserCombinators.ReadPrec.look_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tJJ: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.look1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.198686075 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_info;
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_entry() //  []
         { info_tbl: [(c3tJQ,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tJQ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.199476394 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.pfail_closure" {
     Text.ParserCombinators.ReadPrec.pfail_closure:
         const Text.ParserCombinators.ReadPrec.pfail_info;
 },
 Text.ParserCombinators.ReadPrec.pfail_entry() //  [R2, R3]
         { info_tbl: [(c3tJX,
                       label: Text.ParserCombinators.ReadPrec.pfail_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tJX: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_entry(R3,
                                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.200673926 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.step1_closure" {
     Text.ParserCombinators.ReadPrec.step1_closure:
         const Text.ParserCombinators.ReadPrec.step1_info;
 },
 sat_s3tCB_entry() //  [R1]
         { info_tbl: [(c3tKb,
                       label: sat_s3tCB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tKb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3tKi; else goto c3tKj;
       c3tKi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tKj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3tK8_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3tKn; else goto c3tK9;
       u3tKn: // global
           call _c3tK8(R1) args: 0, res: 0, upd: 0;
       c3tK9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3tK8() //  [R1]
         { info_tbl: [(c3tK8,
                       label: block_c3tK8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tK8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tKm; else goto c3tKl;
       c3tKm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3tKl: // global
           _s3tCA::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3tCA::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadPrec.step1_entry() //  [R2, R3]
         { info_tbl: [(c3tKo,
                       label: Text.ParserCombinators.ReadPrec.step1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tKo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tKs; else goto c3tKr;
       c3tKs: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.step1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tKr: // global
           I64[Hp - 16] = sat_s3tCB_info;
           P64[Hp] = R3;
           _s3tCw::P64 = R2;
           R2 = Hp - 16;
           R1 = _s3tCw::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.202300468 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.step_closure" {
     Text.ParserCombinators.ReadPrec.step_closure:
         const Text.ParserCombinators.ReadPrec.step_info;
 },
 Text.ParserCombinators.ReadPrec.step_entry() //  [R2, R3]
         { info_tbl: [(c3tKx,
                       label: Text.ParserCombinators.ReadPrec.step_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tKx: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.step1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.203494874 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.prec1_closure" {
     Text.ParserCombinators.ReadPrec.prec1_closure:
         const Text.ParserCombinators.ReadPrec.prec1_info;
 },
 Text.ParserCombinators.ReadPrec.prec1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3tKH,
                       label: Text.ParserCombinators.ReadPrec.prec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tKH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3tKL; else goto c3tKM;
       c3tKL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.prec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tKM: // global
           I64[Sp - 24] = block_c3tKE_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3tKZ; else goto c3tKF;
       u3tKZ: // global
           call _c3tKE(R1) args: 0, res: 0, upd: 0;
       c3tKF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tKE() //  [R1]
         { info_tbl: [(c3tKE,
                       label: block_c3tKE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tKE: // global
           I64[Sp] = block_c3tKK_info;
           _s3tCG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3tCG::I64;
           if (R1 & 7 != 0) goto u3tKY; else goto c3tKO;
       u3tKY: // global
           call _c3tKK(R1) args: 0, res: 0, upd: 0;
       c3tKO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tKK() //  [R1]
         { info_tbl: [(c3tKK,
                       label: block_c3tKK_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tKK: // global
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto c3tKW; else goto c3tKX;
       c3tKW: // global
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3tKX: // global
           R2 = R1;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.205005339 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.prec_closure" {
     Text.ParserCombinators.ReadPrec.prec_closure:
         const Text.ParserCombinators.ReadPrec.prec_info;
 },
 Text.ParserCombinators.ReadPrec.prec_entry() //  [R2, R3, R4]
         { info_tbl: [(c3tL4,
                       label: Text.ParserCombinators.ReadPrec.prec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tL4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.prec1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.206352715 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_info;
         const 0;
 },
 sat_s3tCS_entry() //  [R1, R2]
         { info_tbl: [(c3tLl,
                       label: sat_s3tCS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tLl: // global
           _s3tCP::P64 = R2;
           _s3tCS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3tLm; else goto c3tLn;
       c3tLn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tLp; else goto c3tLo;
       c3tLp: // global
           HpAlloc = 32;
           goto c3tLm;
       c3tLm: // global
           R2 = _s3tCP::P64;
           R1 = _s3tCS::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tLo: // global
           _s3tCN::P64 = P64[_s3tCS::P64 + 7];
           _s3tCO::P64 = P64[_s3tCS::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3tCO::P64;
           P64[Hp] = _s3tCP::P64;
           I64[Sp - 16] = block_c3tLj_info;
           R2 = _s3tCP::P64;
           R1 = _s3tCN::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tLj() //  [R1]
         { info_tbl: [(c3tLj,
                       label: block_c3tLj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tLj: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3tLt,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tLt: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3tLx; else goto c3tLw;
       c3tLx: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tLw: // global
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3tCS_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.208026511 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.+++_closure" {
     Text.ParserCombinators.ReadPrec.+++_closure:
         const Text.ParserCombinators.ReadPrec.+++_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.+++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3tLD,
                       label: Text.ParserCombinators.ReadPrec.+++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tLD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_entry(R4,
                                                                             R3,
                                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.208942142 UTC

[section ""data" . lvl_r3tAS_closure" {
     lvl_r3tAS_closure:
         const lvl_r3tAS_info;
 },
 lvl_r3tAS_entry() //  []
         { info_tbl: [(c3tLK,
                       label: lvl_r3tAS_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tLK: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.210609156 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.choice2_closure" {
     Text.ParserCombinators.ReadPrec.choice2_closure:
         const Text.ParserCombinators.ReadPrec.choice2_info;
         const 0;
 },
 ds2_s3tD0_entry() //  [R1]
         { info_tbl: [(c3tM2,
                       label: ds2_s3tD0_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tM2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3tM3; else goto c3tM4;
       c3tM3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tM4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadPrec.choice2_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3tD4_entry() //  [R1, R2]
         { info_tbl: [(c3tMd,
                       label: sat_s3tD4_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tMd: // global
           _s3tD1::P64 = R2;
           _s3tD4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3tMe; else goto c3tMf;
       c3tMf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tMh; else goto c3tMg;
       c3tMh: // global
           HpAlloc = 32;
           goto c3tMe;
       c3tMe: // global
           R2 = _s3tD1::P64;
           R1 = _s3tD4::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tMg: // global
           _s3tCZ::P64 = P64[_s3tD4::P64 + 7];
           _s3tD0::P64 = P64[_s3tD4::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3tD0::P64;
           P64[Hp] = _s3tD1::P64;
           I64[Sp - 16] = block_c3tMb_info;
           R2 = _s3tD1::P64;
           R1 = _s3tCZ::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tMb() //  [R1]
         { info_tbl: [(c3tMb,
                       label: block_c3tMb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tMb: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.choice2_entry() //  [R2, R3]
         { info_tbl: [(c3tMp,
                       label: Text.ParserCombinators.ReadPrec.choice2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tMp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3tMq; else goto c3tMr;
       c3tMq: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.choice2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tMr: // global
           I64[Sp - 16] = block_c3tLR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3tMx; else goto c3tLS;
       u3tMx: // global
           call _c3tLR(R1) args: 0, res: 0, upd: 0;
       c3tLS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tLR() //  [R1]
         { info_tbl: [(c3tLR,
                       label: block_c3tLR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tLR: // global
           if (R1 & 7 == 1) goto c3tMm; else goto c3tMn;
       c3tMm: // global
           R1 = lvl_r3tAS_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3tMn: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3tMw; else goto c3tMv;
       c3tMw: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3tMv: // global
           _s3tCX::P64 = P64[R1 + 6];
           _s3tCY::P64 = P64[R1 + 14];
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = _s3tCX::P64;
           _s3tCV::P64 = P64[Sp + 8];
           P64[Hp - 56] = _s3tCV::P64;
           I64[Hp - 48] = ds2_s3tD0_info;
           P64[Hp - 32] = _s3tCV::P64;
           P64[Hp - 24] = _s3tCY::P64;
           I64[Hp - 16] = sat_s3tD4_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.213048495 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.choice1_closure" {
     Text.ParserCombinators.ReadPrec.choice1_closure:
         const Text.ParserCombinators.ReadPrec.choice1_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.choice1_entry() //  [R2, R3]
         { info_tbl: [(c3tMC,
                       label: Text.ParserCombinators.ReadPrec.choice1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tMC: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.choice2_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.214003158 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.choice_closure" {
     Text.ParserCombinators.ReadPrec.choice_closure:
         const Text.ParserCombinators.ReadPrec.choice_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.choice_entry() //  [R2, R3]
         { info_tbl: [(c3tMJ,
                       label: Text.ParserCombinators.ReadPrec.choice_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tMJ: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.choice1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.216205961 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_info;
         const 0;
 },
 sat_s3tDj_entry() //  [R1]
         { info_tbl: [(c3tNb,
                       label: sat_s3tDj_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tNb: // global
           _s3tDj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3tNc; else goto c3tNd;
       c3tNd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tNf; else goto c3tNe;
       c3tNf: // global
           HpAlloc = 24;
           goto c3tNc;
       c3tNc: // global
           R1 = _s3tDj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tNe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3tDj::P64;
           _s3tDc::P64 = P64[_s3tDj::P64 + 16];
           _s3tDd::P64 = P64[_s3tDj::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3tDd::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3tDc::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3tDg_entry() //  [R1, R2]
         { info_tbl: [(c3tNm,
                       label: sat_s3tDg_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tNm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tNq; else goto c3tNp;
       c3tNq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tNp: // global
           _s3tDc::P64 = P64[R1 + 7];
           _s3tDd::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3tDd::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3tDc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tDk_entry() //  [R1, R2]
         { info_tbl: [(c3tNt,
                       label: sat_s3tDk_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tNt: // global
           _s3tDd::P64 = R2;
           _s3tDk::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3tNu; else goto c3tNv;
       c3tNv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3tNx; else goto c3tNw;
       c3tNx: // global
           HpAlloc = 56;
           goto c3tNu;
       c3tNu: // global
           R2 = _s3tDd::P64;
           R1 = _s3tDk::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tNw: // global
           _s3tD9::P64 = P64[_s3tDk::P64 + 7];
           _s3tDa::P64 = P64[_s3tDk::P64 + 15];
           _s3tDc::P64 = P64[_s3tDk::P64 + 23];
           I64[Hp - 48] = sat_s3tDj_info;
           P64[Hp - 32] = _s3tDc::P64;
           P64[Hp - 24] = _s3tDd::P64;
           I64[Hp - 16] = sat_s3tDg_info;
           P64[Hp - 8] = _s3tDc::P64;
           P64[Hp] = _s3tDd::P64;
           I64[Sp - 16] = block_c3tNr_info;
           R2 = _s3tDa::P64;
           R1 = _s3tD9::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 32;
           call some_v_s3tD9_entry(R2, R1) args: 24, res: 8, upd: 8;
     }
 },
 _c3tNr() //  [R1]
         { info_tbl: [(c3tNr,
                       label: block_c3tNr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tNr: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tDl_entry() //  [R1, R2]
         { info_tbl: [(c3tNB,
                       label: sat_s3tDl_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tNB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tNF; else goto c3tNE;
       c3tNF: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tNE: // global
           _s3tD9::P64 = P64[R1 + 7];
           _s3tDa::P64 = P64[R1 + 15];
           _s3tDb::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3tDk_info;
           P64[Hp - 16] = _s3tD9::P64;
           P64[Hp - 8] = _s3tDa::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3tDb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 some_v_s3tD9_entry() //  [R1, R2]
         { info_tbl: [(c3tNG,
                       label: some_v_s3tD9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tNG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3tNK; else goto c3tNJ;
       c3tNK: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tNJ: // global
           _s3tD7::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3tD7::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3tDl_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_entry() //  [R2,
                                                                     R3]
         { info_tbl: [(c3tNL,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tNL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tNP; else goto c3tNO;
       c3tNP: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tNO: // global
           I64[Hp - 8] = some_v_s3tD9_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call some_v_s3tD9_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.220765593 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_info;
         const 0;
 },
 sat_s3tDy_entry() //  [R1]
         { info_tbl: [(c3tO9,
                       label: sat_s3tDy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tO9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3tOa; else goto c3tOb;
       c3tOa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tOb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3tDv_entry() //  [R1, R2]
         { info_tbl: [(c3tOn,
                       label: sat_s3tDv_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tOn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tOr; else goto c3tOq;
       c3tOr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tOq: // global
           _s3tDr::P64 = P64[R1 + 7];
           _s3tDs::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3tDs::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3tDr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tDw_entry() //  [R1, R2]
         { info_tbl: [(c3tOs,
                       label: sat_s3tDw_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tOs: // global
           _s3tDs::P64 = R2;
           _s3tDw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3tOt; else goto c3tOu;
       c3tOu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tOw; else goto c3tOv;
       c3tOw: // global
           HpAlloc = 24;
           goto c3tOt;
       c3tOt: // global
           R2 = _s3tDs::P64;
           R1 = _s3tDw::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tOv: // global
           _s3tDo::P64 = P64[_s3tDw::P64 + 7];
           _s3tDp::P64 = P64[_s3tDw::P64 + 15];
           _s3tDr::P64 = P64[_s3tDw::P64 + 23];
           I64[Hp - 16] = sat_s3tDv_info;
           P64[Hp - 8] = _s3tDr::P64;
           P64[Hp] = _s3tDs::P64;
           R2 = _s3tDp::P64;
           R1 = _s3tDo::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call many_v_s3tDo_entry(R2, R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s3tDz_entry() //  [R1, R2]
         { info_tbl: [(c3tOz,
                       label: sat_s3tDz_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tOz: // global
           _s3tDr::P64 = R2;
           _s3tDz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3tOA; else goto c3tOB;
       c3tOB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3tOD; else goto c3tOC;
       c3tOD: // global
           HpAlloc = 56;
           goto c3tOA;
       c3tOA: // global
           R2 = _s3tDr::P64;
           R1 = _s3tDz::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tOC: // global
           _s3tDo::P64 = P64[_s3tDz::P64 + 7];
           _s3tDp::P64 = P64[_s3tDz::P64 + 15];
           _s3tDq::P64 = P64[_s3tDz::P64 + 23];
           I64[Hp - 48] = sat_s3tDy_info;
           P64[Hp - 32] = _s3tDr::P64;
           I64[Hp - 24] = sat_s3tDw_info;
           P64[Hp - 16] = _s3tDo::P64;
           P64[Hp - 8] = _s3tDp::P64;
           P64[Hp] = _s3tDr::P64;
           I64[Sp - 16] = block_c3tOx_info;
           R2 = Hp - 23;
           R1 = _s3tDq::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tOx() //  [R1]
         { info_tbl: [(c3tOx,
                       label: block_c3tOx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tOx: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 many_v_s3tDo_entry() //  [R1, R2]
         { info_tbl: [(c3tOH,
                       label: many_v_s3tDo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tOH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3tOL; else goto c3tOK;
       c3tOL: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tOK: // global
           _s3tDm::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3tDm::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3tDz_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_entry() //  [R2,
                                                                     R3]
         { info_tbl: [(c3tOM,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tOM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tOQ; else goto c3tOP;
       c3tOQ: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tOP: // global
           I64[Hp - 8] = many_v_s3tDo_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call many_v_s3tDo_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.223935307 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure+3;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure+2;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.224737994 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadPlusReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadPlusReadPrec_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.226144343 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.<++1_closure" {
     Text.ParserCombinators.ReadPrec.<++1_closure:
         const Text.ParserCombinators.ReadPrec.<++1_info;
         const 0;
 },
 sat_s3tDI_entry() //  [R1, R2]
         { info_tbl: [(c3tP5,
                       label: sat_s3tDI_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tP5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3tP6; else goto c3tP7;
       c3tP6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tP7: // global
           I64[Sp - 8] = block_c3tP2_info;
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3tP2() //  [R1]
         { info_tbl: [(c3tP2,
                       label: block_c3tP2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tP2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tPa; else goto c3tP9;
       c3tPa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3tP9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.<++1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3tPb,
                       label: Text.ParserCombinators.ReadPrec.<++1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tPb: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3tPf; else goto c3tPe;
       c3tPf: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.<++1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tPe: // global
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3tDI_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.229619181 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.<++_closure" {
     Text.ParserCombinators.ReadPrec.<++_closure:
         const Text.ParserCombinators.ReadPrec.<++_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.<++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3tPk,
                       label: Text.ParserCombinators.ReadPrec.<++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tPk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.<++1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.23055697 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readPrec_to_P1_closure" {
     Text.ParserCombinators.ReadPrec.readPrec_to_P1_closure:
         const Text.ParserCombinators.ReadPrec.readPrec_to_P1_info;
 },
 Text.ParserCombinators.ReadPrec.readPrec_to_P1_entry() //  [R2]
         { info_tbl: [(c3tPr,
                       label: Text.ParserCombinators.ReadPrec.readPrec_to_P1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tPr: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.231419057 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readPrec_to_P_closure" {
     Text.ParserCombinators.ReadPrec.readPrec_to_P_closure:
         const Text.ParserCombinators.ReadPrec.readPrec_to_P_info;
 },
 Text.ParserCombinators.ReadPrec.readPrec_to_P_entry() //  [R2]
         { info_tbl: [(c3tPy,
                       label: Text.ParserCombinators.ReadPrec.readPrec_to_P_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tPy: // global
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.readPrec_to_P1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.232283018 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readP_to_Prec1_closure" {
     Text.ParserCombinators.ReadPrec.readP_to_Prec1_closure:
         const Text.ParserCombinators.ReadPrec.readP_to_Prec1_info;
 },
 Text.ParserCombinators.ReadPrec.readP_to_Prec1_entry() //  [R2]
         { info_tbl: [(c3tPF,
                       label: Text.ParserCombinators.ReadPrec.readP_to_Prec1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tPF: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.233079624 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readP_to_Prec_closure" {
     Text.ParserCombinators.ReadPrec.readP_to_Prec_closure:
         const Text.ParserCombinators.ReadPrec.readP_to_Prec_info;
 },
 Text.ParserCombinators.ReadPrec.readP_to_Prec_entry() //  [R2]
         { info_tbl: [(c3tPM,
                       label: Text.ParserCombinators.ReadPrec.readP_to_Prec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tPM: // global
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.readP_to_Prec1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.234230873 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readPrec_to_S_closure" {
     Text.ParserCombinators.ReadPrec.readPrec_to_S_closure:
         const Text.ParserCombinators.ReadPrec.readPrec_to_S_info;
 },
 sat_s3tDN_entry() //  [R1]
         { info_tbl: [(c3tPX,
                       label: sat_s3tDN_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tPX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3tPY; else goto c3tPZ;
       c3tPY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tPZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadPrec.readPrec_to_S_entry() //  [R2, R3]
         { info_tbl: [(c3tQ0,
                       label: Text.ParserCombinators.ReadPrec.readPrec_to_S_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tQ0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tQ4; else goto c3tQ3;
       c3tQ4: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.readPrec_to_S_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tQ3: // global
           I64[Hp - 24] = sat_s3tDN_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.235810764 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readS_to_Prec1_closure" {
     Text.ParserCombinators.ReadPrec.readS_to_Prec1_closure:
         const Text.ParserCombinators.ReadPrec.readS_to_Prec1_info;
 },
 sat_s3tDU_entry() //  [R1, R2]
         { info_tbl: [(c3tQi,
                       label: sat_s3tDU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tQi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3tQj; else goto c3tQk;
       c3tQj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tQk: // global
           I64[Sp - 8] = block_c3tQf_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3tQf() //  [R1]
         { info_tbl: [(c3tQf,
                       label: block_c3tQf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tQf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tQn; else goto c3tQm;
       c3tQn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3tQm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry() //  [R2, R3]
         { info_tbl: [(c3tQo,
                       label: Text.ParserCombinators.ReadPrec.readS_to_Prec1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tQo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3tQs; else goto c3tQr;
       c3tQs: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.readS_to_Prec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tQr: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s3tDU_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.237234359 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readS_to_Prec_closure" {
     Text.ParserCombinators.ReadPrec.readS_to_Prec_closure:
         const Text.ParserCombinators.ReadPrec.readS_to_Prec_info;
 },
 Text.ParserCombinators.ReadPrec.readS_to_Prec_entry() //  [R2, R3]
         { info_tbl: [(c3tQx,
                       label: Text.ParserCombinators.ReadPrec.readS_to_Prec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tQx: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.238034342 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$trModule4_bytes" {
     Text.ParserCombinators.ReadPrec.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.238592121 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$trModule3_closure" {
     Text.ParserCombinators.ReadPrec.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.239153288 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$trModule2_bytes" {
     Text.ParserCombinators.ReadPrec.$trModule2_bytes:
         I8[] [84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,114,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.239715992 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$trModule1_closure" {
     Text.ParserCombinators.ReadPrec.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.240258427 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$trModule_closure" {
     Text.ParserCombinators.ReadPrec.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule3_closure+1;
         const Text.ParserCombinators.ReadPrec.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.240816838 UTC

[section ""data" . $krep_r3tAT_closure" {
     $krep_r3tAT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.242173064 UTC

[section ""data" . $krep1_r3tAU_closure" {
     $krep1_r3tAU_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.242699573 UTC

[section ""data" . $krep2_r3tAV_closure" {
     $krep2_r3tAV_closure:
         const :_con_info;
         const $krep1_r3tAU_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.243286842 UTC

[section ""data" . $krep3_r3tAW_closure" {
     $krep3_r3tAW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadP.$tcReadP_closure;
         const $krep2_r3tAV_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.243883858 UTC

[section ""data" . $krep4_r3tAX_closure" {
     $krep4_r3tAX_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3tAT_closure+1;
         const $krep3_r3tAW_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.244456755 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$tcReadPrec2_bytes" {
     Text.ParserCombinators.ReadPrec.$tcReadPrec2_bytes:
         I8[] [82,101,97,100,80,114,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.244991519 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tcReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$tcReadPrec1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.245655423 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tcReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$tcReadPrec_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule_closure+1;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17656447446138014199;
         const 97878223355588575;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.246303246 UTC

[section ""data" . $krep5_r3tAY_closure" {
     $krep5_r3tAY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec_closure+1;
         const $krep2_r3tAV_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.246897282 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tc'P1_closure" {
     Text.ParserCombinators.ReadPrec.$tc'P1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3tAX_closure+4;
         const $krep5_r3tAY_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.247478438 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$tc'P3_bytes" {
     Text.ParserCombinators.ReadPrec.$tc'P3_bytes:
         I8[] [39,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.248023621 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tc'P2_closure" {
     Text.ParserCombinators.ReadPrec.$tc'P2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$tc'P3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.248608366 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tc'P_closure" {
     Text.ParserCombinators.ReadPrec.$tc'P_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule_closure+1;
         const Text.ParserCombinators.ReadPrec.$tc'P2_closure+1;
         const Text.ParserCombinators.ReadPrec.$tc'P1_closure+4;
         const 14970691021354513070;
         const 16104245447600145137;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.249236639 UTC

[section ""relreadonly" . S3tLy_srt" {
     S3tLy_srt:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure;
         const Text.ParserCombinators.ReadPrec.choice2_closure;
         const Text.ParserCombinators.ReadPrec.choice1_closure;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const Text.ParserCombinators.ReadPrec.<++1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.249943852 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:58:07.251093387 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure" {
     Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure:
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_info;
 },
 sat_s3tB5_entry() //  [R1, R2]
         { info_tbl: [(c3tQP,
                       label: sat_s3tB5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tQP: // global
           R4 = R2;
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tB6_entry() //  [R1, R2]
         { info_tbl: [(c3tQS,
                       label: sat_s3tB6_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tQS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tQW; else goto c3tQV;
       c3tQW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tQV: // global
           _s3tB0::P64 = P64[R1 + 7];
           _s3tB3::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3tB5_info;
           P64[Hp - 8] = _s3tB0::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3tB3::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(c3tQX,
                       label: Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tQX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3tR1; else goto c3tR0;
       c3tR1: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tR0: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3tB6_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.25304062 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_info;
 },
 sat_s3tBe_entry() //  [R1]
         { info_tbl: [(c3tRi,
                       label: sat_s3tBe_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tRi: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBf_entry() //  [R1, R2]
         { info_tbl: [(c3tRl,
                       label: sat_s3tBf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tRl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3tRp; else goto c3tRo;
       c3tRp: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tRo: // global
           _s3tB7::P64 = P64[R1 + 7];
           _s3tBa::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = _s3tB7::P64;
           I64[Hp - 8] = sat_s3tBe_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3tBa::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(c3tRq,
                       label: Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tRq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3tRu; else goto c3tRt;
       c3tRu: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tRt: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3tBf_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.25452657 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fFunctorReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fFunctorReadPrec_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure+3;
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.255304111 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_info;
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_entry() //  [R2,
                                                                     R4]
         { info_tbl: [(c3tRz,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tRz: // global
           R2 = R2;
           R1 = R4;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.256142364 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_info;
 },
 Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_entry() //  []
         { info_tbl: [(c3tRG,
                       label: Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tRG: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.257520129 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_info;
 },
 sat_s3tBs_entry() //  [R1, R2]
         { info_tbl: [(c3tRY,
                       label: sat_s3tBs_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tRY: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBt_entry() //  [R1, R2]
         { info_tbl: [(c3tS1,
                       label: sat_s3tBt_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tS1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tS5; else goto c3tS4;
       c3tS5: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tS4: // global
           _s3tBn::P64 = P64[R1 + 7];
           _s3tBo::P64 = P64[R1 + 15];
           _s3tBp::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3tBs_info;
           P64[Hp - 16] = _s3tBn::P64;
           P64[Hp - 8] = _s3tBo::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3tBp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3tS6,
                       label: Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tS6: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3tSa; else goto c3tS9;
       c3tSa: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tS9: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tBt_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.2599023 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_info;
 },
 sat_s3tBD_entry() //  [R1, R2]
         { info_tbl: [(c3tSw,
                       label: sat_s3tBD_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tSw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3tSA; else goto c3tSz;
       c3tSA: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tSz: // global
           _s3tBu::P64 = P64[R1 + 7];
           _s3tBz::P64 = P64[R1 + 15];
           _s3tBA::P64 = P64[R1 + 23];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3tBu::P64;
           P64[Hp - 8] = _s3tBA::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3tBz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBE_entry() //  [R1, R2]
         { info_tbl: [(c3tSB,
                       label: sat_s3tBE_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tSB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tSF; else goto c3tSE;
       c3tSF: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tSE: // global
           _s3tBu::P64 = P64[R1 + 7];
           _s3tBw::P64 = P64[R1 + 15];
           _s3tBx::P64 = P64[R1 + 23];
           _s3tBz::P64 = P64[R1 + 31];
           I64[Hp - 24] = sat_s3tBD_info;
           P64[Hp - 16] = _s3tBu::P64;
           P64[Hp - 8] = _s3tBz::P64;
           P64[Hp] = R2;
           R3 = Hp - 23;
           R2 = _s3tBx::P64;
           R1 = _s3tBw::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBF_entry() //  [R1, R2]
         { info_tbl: [(c3tSG,
                       label: sat_s3tBF_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tSG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3tSK; else goto c3tSJ;
       c3tSK: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tSJ: // global
           _s3tBu::P64 = P64[R1 + 7];
           _s3tBw::P64 = P64[R1 + 15];
           _s3tBx::P64 = P64[R1 + 23];
           _s3tBy::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3tBE_info;
           P64[Hp - 24] = _s3tBu::P64;
           P64[Hp - 16] = _s3tBw::P64;
           P64[Hp - 8] = _s3tBx::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3tBy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_entry() //  [R2,
                                                                     R3, R4, R5]
         { info_tbl: [(c3tSL,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tSL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3tSP; else goto c3tSO;
       c3tSP: // global
           HpAlloc = 72;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tSO: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_s3tBF_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = Hp - 64;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.263240351 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_info;
 },
 sat_s3tBO_entry() //  [R1]
         { info_tbl: [(c3tTb,
                       label: sat_s3tBO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tTb: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBP_entry() //  [R1, R2]
         { info_tbl: [(c3tTe,
                       label: sat_s3tBP_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tTe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3tTi; else goto c3tTh;
       c3tTi: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tTh: // global
           _s3tBH::P64 = P64[R1 + 7];
           _s3tBI::P64 = P64[R1 + 15];
           _s3tBK::P64 = P64[R1 + 23];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3tBK::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3tBO_info;
           P64[Hp] = Hp - 40;
           R3 = Hp - 7;
           R2 = _s3tBI::P64;
           R1 = _s3tBH::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBQ_entry() //  [R1, R2]
         { info_tbl: [(c3tTj,
                       label: sat_s3tBQ_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tTj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tTn; else goto c3tTm;
       c3tTn: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tTm: // global
           _s3tBH::P64 = P64[R1 + 7];
           _s3tBI::P64 = P64[R1 + 15];
           _s3tBJ::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3tBP_info;
           P64[Hp - 16] = _s3tBH::P64;
           P64[Hp - 8] = _s3tBI::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3tBJ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3tTo,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tTo: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3tTs; else goto c3tTr;
       c3tTs: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tTr: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tBQ_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.265763803 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_info;
 },
 sat_s3tBZ_entry() //  [R1, R2]
         { info_tbl: [(c3tTO,
                       label: sat_s3tBZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tTO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tTS; else goto c3tTR;
       c3tTS: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tTR: // global
           _s3tBV::P64 = P64[R1 + 7];
           _s3tBW::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3tBW::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3tBV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tC0_entry() //  [R1, R2]
         { info_tbl: [(c3tTT,
                       label: sat_s3tC0_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tTT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tTX; else goto c3tTW;
       c3tTX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tTW: // global
           _s3tBS::P64 = P64[R1 + 7];
           _s3tBT::P64 = P64[R1 + 15];
           _s3tBV::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_s3tBZ_info;
           P64[Hp - 8] = _s3tBV::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3tBT::P64;
           R1 = _s3tBS::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tC1_entry() //  [R1, R2]
         { info_tbl: [(c3tTY,
                       label: sat_s3tC1_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tTY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tU2; else goto c3tU1;
       c3tU2: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tU1: // global
           _s3tBS::P64 = P64[R1 + 7];
           _s3tBT::P64 = P64[R1 + 15];
           _s3tBU::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3tC0_info;
           P64[Hp - 16] = _s3tBS::P64;
           P64[Hp - 8] = _s3tBT::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3tBU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3tU3,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tU3: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3tU7; else goto c3tU6;
       c3tU7: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tU6: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tC1_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.26838374 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_info;
 },
 sat_s3tC9_entry() //  [R1, R2]
         { info_tbl: [(c3tUr,
                       label: sat_s3tC9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tUr: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl1_s3tC7_entry() //  [R1]
         { info_tbl: [(c3tUu,
                       label: lvl1_s3tC7_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tUu: // global
           _s3tC7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3tUv; else goto c3tUw;
       c3tUw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tUy; else goto c3tUx;
       c3tUy: // global
           HpAlloc = 16;
           goto c3tUv;
       c3tUv: // global
           R1 = _s3tC7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tUx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3tC7::P64;
           _s3tC3::P64 = P64[_s3tC7::P64 + 16];
           _s3tC4::P64 = P64[_s3tC7::P64 + 24];
           _s3tC6::P64 = P64[_s3tC7::P64 + 32];
           I64[Hp - 8] = sat_s3tC9_info;
           P64[Hp] = _s3tC6::P64;
           R3 = Hp - 7;
           R2 = _s3tC4::P64;
           R1 = _s3tC3::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3tCb_entry() //  [R1]
         { info_tbl: [(c3tUE,
                       label: sat_s3tCb_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tUE: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tCc_entry() //  [R1, R2]
         { info_tbl: [(c3tUH,
                       label: sat_s3tCc_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tUH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3tUL; else goto c3tUK;
       c3tUL: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tUK: // global
           _s3tC3::P64 = P64[R1 + 7];
           _s3tC4::P64 = P64[R1 + 15];
           _s3tC5::P64 = P64[R1 + 23];
           I64[Hp - 48] = lvl1_s3tC7_info;
           P64[Hp - 32] = _s3tC3::P64;
           P64[Hp - 24] = _s3tC4::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3tCb_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3tC5::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3tUM,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tUM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3tUQ; else goto c3tUP;
       c3tUQ: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tUP: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tCc_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.271077475 UTC

[section ""data" . $c>>_r3tAR_closure" {
     $c>>_r3tAR_closure:
         const $c>>_r3tAR_info;
 },
 sat_s3tCk_entry() //  [R1]
         { info_tbl: [(c3tV7,
                       label: sat_s3tCk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tV7: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tCl_entry() //  [R1, R2]
         { info_tbl: [(c3tVa,
                       label: sat_s3tCl_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tVa: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3tVe; else goto c3tVd;
       c3tVe: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tVd: // global
           _s3tCe::P64 = P64[R1 + 7];
           _s3tCf::P64 = P64[R1 + 15];
           _s3tCg::P64 = P64[R1 + 23];
           I64[Hp - 48] = stg_ap_3_upd_info;
           P64[Hp - 32] = _s3tCe::P64;
           P64[Hp - 24] = _s3tCf::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3tCk_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3tCg::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 $c>>_r3tAR_entry() //  [R2, R3, R4]
         { info_tbl: [(c3tVf,
                       label: $c>>_r3tAR_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tVf: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3tVj; else goto c3tVi;
       c3tVj: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $c>>_r3tAR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tVi: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tCl_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.279489317 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_closure:
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_info;
 },
 Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_entry() //  [R2,
                                                                   R3, R4]
         { info_tbl: [(c3tVo,
                       label: Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tVo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $c>>_r3tAR_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.280687637 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure+4;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.281642774 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure+3;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure+3;
         const Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.282448505 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.283119891 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.minPrec_closure" {
     Text.ParserCombinators.ReadPrec.minPrec_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.284200871 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.reset1_closure" {
     Text.ParserCombinators.ReadPrec.reset1_closure:
         const Text.ParserCombinators.ReadPrec.reset1_info;
 },
 Text.ParserCombinators.ReadPrec.reset1_entry() //  [R2]
         { info_tbl: [(c3tVv,
                       label: Text.ParserCombinators.ReadPrec.reset1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tVv: // global
           _s3tCm::P64 = R2;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure+1;
           R1 = _s3tCm::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.28550761 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.reset_closure" {
     Text.ParserCombinators.ReadPrec.reset_closure:
         const Text.ParserCombinators.ReadPrec.reset_info;
 },
 Text.ParserCombinators.ReadPrec.reset_entry() //  [R2, R3]
         { info_tbl: [(c3tVC,
                       label: Text.ParserCombinators.ReadPrec.reset_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tVC: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.reset1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.286588915 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.lift1_closure" {
     Text.ParserCombinators.ReadPrec.lift1_closure:
         const Text.ParserCombinators.ReadPrec.lift1_info;
 },
 Text.ParserCombinators.ReadPrec.lift1_entry() //  [R2]
         { info_tbl: [(c3tVJ,
                       label: Text.ParserCombinators.ReadPrec.lift1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tVJ: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.287699783 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.lift_closure" {
     Text.ParserCombinators.ReadPrec.lift_closure:
         const Text.ParserCombinators.ReadPrec.lift_info;
 },
 Text.ParserCombinators.ReadPrec.lift_entry() //  [R2, R3]
         { info_tbl: [(c3tVQ,
                       label: Text.ParserCombinators.ReadPrec.lift_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tVQ: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.lift1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.288720873 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.get1_closure" {
     Text.ParserCombinators.ReadPrec.get1_closure:
         const Text.ParserCombinators.ReadPrec.get1_info;
 },
 Text.ParserCombinators.ReadPrec.get1_entry() //  [R2, R3]
         { info_tbl: [(c3tVY,
                       label: Text.ParserCombinators.ReadPrec.get1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tVY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tW2; else goto c3tW1;
       c3tW2: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.get1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tW1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R3;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.289906568 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.get_closure" {
     Text.ParserCombinators.ReadPrec.get_closure:
         const Text.ParserCombinators.ReadPrec.get_info;
 },
 Text.ParserCombinators.ReadPrec.get_entry() //  [R2, R3]
         { info_tbl: [(c3tW7,
                       label: Text.ParserCombinators.ReadPrec.get_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tW7: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.get1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.290966554 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.look1_closure" {
     Text.ParserCombinators.ReadPrec.look1_closure:
         const Text.ParserCombinators.ReadPrec.look1_info;
 },
 Text.ParserCombinators.ReadPrec.look1_entry() //  [R2, R3]
         { info_tbl: [(c3tWf,
                       label: Text.ParserCombinators.ReadPrec.look1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tWf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tWj; else goto c3tWi;
       c3tWj: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.look1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tWi: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R3;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.292192555 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.look_closure" {
     Text.ParserCombinators.ReadPrec.look_closure:
         const Text.ParserCombinators.ReadPrec.look_info;
 },
 Text.ParserCombinators.ReadPrec.look_entry() //  [R2, R3]
         { info_tbl: [(c3tWo,
                       label: Text.ParserCombinators.ReadPrec.look_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tWo: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.look1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.293342415 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_info;
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_entry() //  []
         { info_tbl: [(c3tWv,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tWv: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.294222266 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.pfail_closure" {
     Text.ParserCombinators.ReadPrec.pfail_closure:
         const Text.ParserCombinators.ReadPrec.pfail_info;
 },
 Text.ParserCombinators.ReadPrec.pfail_entry() //  [R2, R3]
         { info_tbl: [(c3tWC,
                       label: Text.ParserCombinators.ReadPrec.pfail_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tWC: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_entry(R3,
                                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.295564601 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.step1_closure" {
     Text.ParserCombinators.ReadPrec.step1_closure:
         const Text.ParserCombinators.ReadPrec.step1_info;
 },
 sat_s3tCB_entry() //  [R1]
         { info_tbl: [(c3tWQ,
                       label: sat_s3tCB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tWQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3tWX; else goto c3tWY;
       c3tWX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tWY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3tWN_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3tX2; else goto c3tWO;
       u3tX2: // global
           call _c3tWN(R1) args: 0, res: 0, upd: 0;
       c3tWO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3tWN() //  [R1]
         { info_tbl: [(c3tWN,
                       label: block_c3tWN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tWN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tX1; else goto c3tX0;
       c3tX1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3tX0: // global
           _s3tCA::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3tCA::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadPrec.step1_entry() //  [R2, R3]
         { info_tbl: [(c3tX3,
                       label: Text.ParserCombinators.ReadPrec.step1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tX3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tX7; else goto c3tX6;
       c3tX7: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.step1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tX6: // global
           I64[Hp - 16] = sat_s3tCB_info;
           P64[Hp] = R3;
           _s3tCw::P64 = R2;
           R2 = Hp - 16;
           R1 = _s3tCw::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.297879652 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.step_closure" {
     Text.ParserCombinators.ReadPrec.step_closure:
         const Text.ParserCombinators.ReadPrec.step_info;
 },
 Text.ParserCombinators.ReadPrec.step_entry() //  [R2, R3]
         { info_tbl: [(c3tXc,
                       label: Text.ParserCombinators.ReadPrec.step_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tXc: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.step1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.29903321 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.prec1_closure" {
     Text.ParserCombinators.ReadPrec.prec1_closure:
         const Text.ParserCombinators.ReadPrec.prec1_info;
 },
 Text.ParserCombinators.ReadPrec.prec1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3tXm,
                       label: Text.ParserCombinators.ReadPrec.prec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tXm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3tXq; else goto c3tXr;
       c3tXq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.prec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tXr: // global
           I64[Sp - 24] = block_c3tXj_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3tXE; else goto c3tXk;
       u3tXE: // global
           call _c3tXj(R1) args: 0, res: 0, upd: 0;
       c3tXk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tXj() //  [R1]
         { info_tbl: [(c3tXj,
                       label: block_c3tXj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tXj: // global
           I64[Sp] = block_c3tXp_info;
           _s3tCG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3tCG::I64;
           if (R1 & 7 != 0) goto u3tXD; else goto c3tXt;
       u3tXD: // global
           call _c3tXp(R1) args: 0, res: 0, upd: 0;
       c3tXt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tXp() //  [R1]
         { info_tbl: [(c3tXp,
                       label: block_c3tXp_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tXp: // global
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto c3tXB; else goto c3tXC;
       c3tXB: // global
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3tXC: // global
           R2 = R1;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.30054585 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.prec_closure" {
     Text.ParserCombinators.ReadPrec.prec_closure:
         const Text.ParserCombinators.ReadPrec.prec_info;
 },
 Text.ParserCombinators.ReadPrec.prec_entry() //  [R2, R3, R4]
         { info_tbl: [(c3tXJ,
                       label: Text.ParserCombinators.ReadPrec.prec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tXJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.prec1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.301905893 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_info;
         const 0;
 },
 sat_s3tCS_entry() //  [R1, R2]
         { info_tbl: [(c3tY0,
                       label: sat_s3tCS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tY0: // global
           _s3tCP::P64 = R2;
           _s3tCS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3tY1; else goto c3tY2;
       c3tY2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tY4; else goto c3tY3;
       c3tY4: // global
           HpAlloc = 32;
           goto c3tY1;
       c3tY1: // global
           R2 = _s3tCP::P64;
           R1 = _s3tCS::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tY3: // global
           _s3tCN::P64 = P64[_s3tCS::P64 + 7];
           _s3tCO::P64 = P64[_s3tCS::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3tCO::P64;
           P64[Hp] = _s3tCP::P64;
           I64[Sp - 16] = block_c3tXY_info;
           R2 = _s3tCP::P64;
           R1 = _s3tCN::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tXY() //  [R1]
         { info_tbl: [(c3tXY,
                       label: block_c3tXY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tXY: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3tY8,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tY8: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3tYc; else goto c3tYb;
       c3tYc: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tYb: // global
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3tCS_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.303654015 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.+++_closure" {
     Text.ParserCombinators.ReadPrec.+++_closure:
         const Text.ParserCombinators.ReadPrec.+++_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.+++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3tYh,
                       label: Text.ParserCombinators.ReadPrec.+++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tYh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_entry(R4,
                                                                             R3,
                                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.304671608 UTC

[section ""data" . lvl_r3tAS_closure" {
     lvl_r3tAS_closure:
         const lvl_r3tAS_info;
 },
 lvl_r3tAS_entry() //  []
         { info_tbl: [(c3tYo,
                       label: lvl_r3tAS_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tYo: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.306325267 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.choice2_closure" {
     Text.ParserCombinators.ReadPrec.choice2_closure:
         const Text.ParserCombinators.ReadPrec.choice2_info;
         const 0;
 },
 ds2_s3tD0_entry() //  [R1]
         { info_tbl: [(c3tYG,
                       label: ds2_s3tD0_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tYG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3tYH; else goto c3tYI;
       c3tYH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tYI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadPrec.choice2_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3tD4_entry() //  [R1, R2]
         { info_tbl: [(c3tYR,
                       label: sat_s3tD4_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tYR: // global
           _s3tD1::P64 = R2;
           _s3tD4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3tYS; else goto c3tYT;
       c3tYT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tYV; else goto c3tYU;
       c3tYV: // global
           HpAlloc = 32;
           goto c3tYS;
       c3tYS: // global
           R2 = _s3tD1::P64;
           R1 = _s3tD4::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tYU: // global
           _s3tCZ::P64 = P64[_s3tD4::P64 + 7];
           _s3tD0::P64 = P64[_s3tD4::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3tD0::P64;
           P64[Hp] = _s3tD1::P64;
           I64[Sp - 16] = block_c3tYP_info;
           R2 = _s3tD1::P64;
           R1 = _s3tCZ::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tYP() //  [R1]
         { info_tbl: [(c3tYP,
                       label: block_c3tYP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tYP: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.choice2_entry() //  [R2, R3]
         { info_tbl: [(c3tZ3,
                       label: Text.ParserCombinators.ReadPrec.choice2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tZ3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3tZ4; else goto c3tZ5;
       c3tZ4: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.choice2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tZ5: // global
           I64[Sp - 16] = block_c3tYv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3tZb; else goto c3tYw;
       u3tZb: // global
           call _c3tYv(R1) args: 0, res: 0, upd: 0;
       c3tYw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tYv() //  [R1]
         { info_tbl: [(c3tYv,
                       label: block_c3tYv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tYv: // global
           if (R1 & 7 == 1) goto c3tZ0; else goto c3tZ1;
       c3tZ0: // global
           R1 = lvl_r3tAS_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3tZ1: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3tZa; else goto c3tZ9;
       c3tZa: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3tZ9: // global
           _s3tCX::P64 = P64[R1 + 6];
           _s3tCY::P64 = P64[R1 + 14];
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = _s3tCX::P64;
           _s3tCV::P64 = P64[Sp + 8];
           P64[Hp - 56] = _s3tCV::P64;
           I64[Hp - 48] = ds2_s3tD0_info;
           P64[Hp - 32] = _s3tCV::P64;
           P64[Hp - 24] = _s3tCY::P64;
           I64[Hp - 16] = sat_s3tD4_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.308656935 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.choice1_closure" {
     Text.ParserCombinators.ReadPrec.choice1_closure:
         const Text.ParserCombinators.ReadPrec.choice1_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.choice1_entry() //  [R2, R3]
         { info_tbl: [(c3tZg,
                       label: Text.ParserCombinators.ReadPrec.choice1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tZg: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.choice2_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.309612006 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.choice_closure" {
     Text.ParserCombinators.ReadPrec.choice_closure:
         const Text.ParserCombinators.ReadPrec.choice_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.choice_entry() //  [R2, R3]
         { info_tbl: [(c3tZn,
                       label: Text.ParserCombinators.ReadPrec.choice_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tZn: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.choice1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.311550182 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_info;
         const 0;
 },
 sat_s3tDj_entry() //  [R1]
         { info_tbl: [(c3tZP,
                       label: sat_s3tDj_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tZP: // global
           _s3tDj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3tZQ; else goto c3tZR;
       c3tZR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tZT; else goto c3tZS;
       c3tZT: // global
           HpAlloc = 24;
           goto c3tZQ;
       c3tZQ: // global
           R1 = _s3tDj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tZS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3tDj::P64;
           _s3tDc::P64 = P64[_s3tDj::P64 + 16];
           _s3tDd::P64 = P64[_s3tDj::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3tDd::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3tDc::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3tDg_entry() //  [R1, R2]
         { info_tbl: [(c3u00,
                       label: sat_s3tDg_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u00: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3u04; else goto c3u03;
       c3u04: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u03: // global
           _s3tDc::P64 = P64[R1 + 7];
           _s3tDd::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3tDd::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3tDc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tDk_entry() //  [R1, R2]
         { info_tbl: [(c3u07,
                       label: sat_s3tDk_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u07: // global
           _s3tDd::P64 = R2;
           _s3tDk::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3u08; else goto c3u09;
       c3u09: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3u0b; else goto c3u0a;
       c3u0b: // global
           HpAlloc = 56;
           goto c3u08;
       c3u08: // global
           R2 = _s3tDd::P64;
           R1 = _s3tDk::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u0a: // global
           _s3tD9::P64 = P64[_s3tDk::P64 + 7];
           _s3tDa::P64 = P64[_s3tDk::P64 + 15];
           _s3tDc::P64 = P64[_s3tDk::P64 + 23];
           I64[Hp - 48] = sat_s3tDj_info;
           P64[Hp - 32] = _s3tDc::P64;
           P64[Hp - 24] = _s3tDd::P64;
           I64[Hp - 16] = sat_s3tDg_info;
           P64[Hp - 8] = _s3tDc::P64;
           P64[Hp] = _s3tDd::P64;
           I64[Sp - 16] = block_c3u05_info;
           R2 = _s3tDa::P64;
           R1 = _s3tD9::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 32;
           call some_v_s3tD9_entry(R2, R1) args: 24, res: 8, upd: 8;
     }
 },
 _c3u05() //  [R1]
         { info_tbl: [(c3u05,
                       label: block_c3u05_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u05: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tDl_entry() //  [R1, R2]
         { info_tbl: [(c3u0f,
                       label: sat_s3tDl_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u0f: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3u0j; else goto c3u0i;
       c3u0j: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u0i: // global
           _s3tD9::P64 = P64[R1 + 7];
           _s3tDa::P64 = P64[R1 + 15];
           _s3tDb::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3tDk_info;
           P64[Hp - 16] = _s3tD9::P64;
           P64[Hp - 8] = _s3tDa::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3tDb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 some_v_s3tD9_entry() //  [R1, R2]
         { info_tbl: [(c3u0k,
                       label: some_v_s3tD9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u0k: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3u0o; else goto c3u0n;
       c3u0o: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u0n: // global
           _s3tD7::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3tD7::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3tDl_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_entry() //  [R2,
                                                                     R3]
         { info_tbl: [(c3u0p,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u0p: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3u0t; else goto c3u0s;
       c3u0t: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u0s: // global
           I64[Hp - 8] = some_v_s3tD9_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call some_v_s3tD9_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.315813889 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_info;
         const 0;
 },
 sat_s3tDy_entry() //  [R1]
         { info_tbl: [(c3u0N,
                       label: sat_s3tDy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u0N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3u0O; else goto c3u0P;
       c3u0O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3u0P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3tDv_entry() //  [R1, R2]
         { info_tbl: [(c3u11,
                       label: sat_s3tDv_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u11: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3u15; else goto c3u14;
       c3u15: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u14: // global
           _s3tDr::P64 = P64[R1 + 7];
           _s3tDs::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3tDs::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3tDr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tDw_entry() //  [R1, R2]
         { info_tbl: [(c3u16,
                       label: sat_s3tDw_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u16: // global
           _s3tDs::P64 = R2;
           _s3tDw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3u17; else goto c3u18;
       c3u18: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3u1a; else goto c3u19;
       c3u1a: // global
           HpAlloc = 24;
           goto c3u17;
       c3u17: // global
           R2 = _s3tDs::P64;
           R1 = _s3tDw::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u19: // global
           _s3tDo::P64 = P64[_s3tDw::P64 + 7];
           _s3tDp::P64 = P64[_s3tDw::P64 + 15];
           _s3tDr::P64 = P64[_s3tDw::P64 + 23];
           I64[Hp - 16] = sat_s3tDv_info;
           P64[Hp - 8] = _s3tDr::P64;
           P64[Hp] = _s3tDs::P64;
           R2 = _s3tDp::P64;
           R1 = _s3tDo::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call many_v_s3tDo_entry(R2, R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s3tDz_entry() //  [R1, R2]
         { info_tbl: [(c3u1d,
                       label: sat_s3tDz_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u1d: // global
           _s3tDr::P64 = R2;
           _s3tDz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3u1e; else goto c3u1f;
       c3u1f: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3u1h; else goto c3u1g;
       c3u1h: // global
           HpAlloc = 56;
           goto c3u1e;
       c3u1e: // global
           R2 = _s3tDr::P64;
           R1 = _s3tDz::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u1g: // global
           _s3tDo::P64 = P64[_s3tDz::P64 + 7];
           _s3tDp::P64 = P64[_s3tDz::P64 + 15];
           _s3tDq::P64 = P64[_s3tDz::P64 + 23];
           I64[Hp - 48] = sat_s3tDy_info;
           P64[Hp - 32] = _s3tDr::P64;
           I64[Hp - 24] = sat_s3tDw_info;
           P64[Hp - 16] = _s3tDo::P64;
           P64[Hp - 8] = _s3tDp::P64;
           P64[Hp] = _s3tDr::P64;
           I64[Sp - 16] = block_c3u1b_info;
           R2 = Hp - 23;
           R1 = _s3tDq::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3u1b() //  [R1]
         { info_tbl: [(c3u1b,
                       label: block_c3u1b_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u1b: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 many_v_s3tDo_entry() //  [R1, R2]
         { info_tbl: [(c3u1l,
                       label: many_v_s3tDo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u1l: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3u1p; else goto c3u1o;
       c3u1p: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u1o: // global
           _s3tDm::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3tDm::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3tDz_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_entry() //  [R2,
                                                                     R3]
         { info_tbl: [(c3u1q,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u1q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3u1u; else goto c3u1t;
       c3u1u: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u1t: // global
           I64[Hp - 8] = many_v_s3tDo_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call many_v_s3tDo_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.318754356 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure+3;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure+2;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.31944766 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadPlusReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadPlusReadPrec_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.320666821 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.<++1_closure" {
     Text.ParserCombinators.ReadPrec.<++1_closure:
         const Text.ParserCombinators.ReadPrec.<++1_info;
         const 0;
 },
 sat_s3tDI_entry() //  [R1, R2]
         { info_tbl: [(c3u1J,
                       label: sat_s3tDI_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u1J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3u1K; else goto c3u1L;
       c3u1K: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u1L: // global
           I64[Sp - 8] = block_c3u1G_info;
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3u1G() //  [R1]
         { info_tbl: [(c3u1G,
                       label: block_c3u1G_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u1G: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3u1O; else goto c3u1N;
       c3u1O: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3u1N: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.<++1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3u1P,
                       label: Text.ParserCombinators.ReadPrec.<++1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u1P: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3u1T; else goto c3u1S;
       c3u1T: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.<++1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u1S: // global
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3tDI_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.322496062 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.<++_closure" {
     Text.ParserCombinators.ReadPrec.<++_closure:
         const Text.ParserCombinators.ReadPrec.<++_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.<++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3u1Y,
                       label: Text.ParserCombinators.ReadPrec.<++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u1Y: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.<++1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.323410572 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readPrec_to_P1_closure" {
     Text.ParserCombinators.ReadPrec.readPrec_to_P1_closure:
         const Text.ParserCombinators.ReadPrec.readPrec_to_P1_info;
 },
 Text.ParserCombinators.ReadPrec.readPrec_to_P1_entry() //  [R2]
         { info_tbl: [(c3u25,
                       label: Text.ParserCombinators.ReadPrec.readPrec_to_P1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u25: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.324273808 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readPrec_to_P_closure" {
     Text.ParserCombinators.ReadPrec.readPrec_to_P_closure:
         const Text.ParserCombinators.ReadPrec.readPrec_to_P_info;
 },
 Text.ParserCombinators.ReadPrec.readPrec_to_P_entry() //  [R2]
         { info_tbl: [(c3u2c,
                       label: Text.ParserCombinators.ReadPrec.readPrec_to_P_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u2c: // global
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.readPrec_to_P1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.325173092 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readP_to_Prec1_closure" {
     Text.ParserCombinators.ReadPrec.readP_to_Prec1_closure:
         const Text.ParserCombinators.ReadPrec.readP_to_Prec1_info;
 },
 Text.ParserCombinators.ReadPrec.readP_to_Prec1_entry() //  [R2]
         { info_tbl: [(c3u2j,
                       label: Text.ParserCombinators.ReadPrec.readP_to_Prec1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u2j: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.326113706 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readP_to_Prec_closure" {
     Text.ParserCombinators.ReadPrec.readP_to_Prec_closure:
         const Text.ParserCombinators.ReadPrec.readP_to_Prec_info;
 },
 Text.ParserCombinators.ReadPrec.readP_to_Prec_entry() //  [R2]
         { info_tbl: [(c3u2q,
                       label: Text.ParserCombinators.ReadPrec.readP_to_Prec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u2q: // global
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.readP_to_Prec1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.328775165 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readPrec_to_S_closure" {
     Text.ParserCombinators.ReadPrec.readPrec_to_S_closure:
         const Text.ParserCombinators.ReadPrec.readPrec_to_S_info;
 },
 sat_s3tDN_entry() //  [R1]
         { info_tbl: [(c3u2B,
                       label: sat_s3tDN_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u2B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3u2C; else goto c3u2D;
       c3u2C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3u2D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadPrec.readPrec_to_S_entry() //  [R2, R3]
         { info_tbl: [(c3u2E,
                       label: Text.ParserCombinators.ReadPrec.readPrec_to_S_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u2E: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3u2I; else goto c3u2H;
       c3u2I: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.readPrec_to_S_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u2H: // global
           I64[Hp - 24] = sat_s3tDN_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.330501855 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readS_to_Prec1_closure" {
     Text.ParserCombinators.ReadPrec.readS_to_Prec1_closure:
         const Text.ParserCombinators.ReadPrec.readS_to_Prec1_info;
 },
 sat_s3tDU_entry() //  [R1, R2]
         { info_tbl: [(c3u2W,
                       label: sat_s3tDU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u2W: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3u2X; else goto c3u2Y;
       c3u2X: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u2Y: // global
           I64[Sp - 8] = block_c3u2T_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3u2T() //  [R1]
         { info_tbl: [(c3u2T,
                       label: block_c3u2T_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u2T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3u31; else goto c3u30;
       c3u31: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3u30: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry() //  [R2, R3]
         { info_tbl: [(c3u32,
                       label: Text.ParserCombinators.ReadPrec.readS_to_Prec1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u32: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3u36; else goto c3u35;
       c3u36: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.readS_to_Prec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u35: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s3tDU_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.331982047 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readS_to_Prec_closure" {
     Text.ParserCombinators.ReadPrec.readS_to_Prec_closure:
         const Text.ParserCombinators.ReadPrec.readS_to_Prec_info;
 },
 Text.ParserCombinators.ReadPrec.readS_to_Prec_entry() //  [R2, R3]
         { info_tbl: [(c3u3b,
                       label: Text.ParserCombinators.ReadPrec.readS_to_Prec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u3b: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.332690084 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$trModule4_bytes" {
     Text.ParserCombinators.ReadPrec.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.333223961 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$trModule3_closure" {
     Text.ParserCombinators.ReadPrec.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.333825054 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$trModule2_bytes" {
     Text.ParserCombinators.ReadPrec.$trModule2_bytes:
         I8[] [84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,114,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.334385876 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$trModule1_closure" {
     Text.ParserCombinators.ReadPrec.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.334945725 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$trModule_closure" {
     Text.ParserCombinators.ReadPrec.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule3_closure+1;
         const Text.ParserCombinators.ReadPrec.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.335528435 UTC

[section ""data" . $krep_r3tAT_closure" {
     $krep_r3tAT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.336119532 UTC

[section ""data" . $krep1_r3tAU_closure" {
     $krep1_r3tAU_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.336725731 UTC

[section ""data" . $krep2_r3tAV_closure" {
     $krep2_r3tAV_closure:
         const :_con_info;
         const $krep1_r3tAU_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.337409429 UTC

[section ""data" . $krep3_r3tAW_closure" {
     $krep3_r3tAW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadP.$tcReadP_closure;
         const $krep2_r3tAV_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.338046367 UTC

[section ""data" . $krep4_r3tAX_closure" {
     $krep4_r3tAX_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3tAT_closure+1;
         const $krep3_r3tAW_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.338635819 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$tcReadPrec2_bytes" {
     Text.ParserCombinators.ReadPrec.$tcReadPrec2_bytes:
         I8[] [82,101,97,100,80,114,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.339236414 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tcReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$tcReadPrec1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.339846424 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tcReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$tcReadPrec_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule_closure+1;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17656447446138014199;
         const 97878223355588575;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.34045104 UTC

[section ""data" . $krep5_r3tAY_closure" {
     $krep5_r3tAY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec_closure+1;
         const $krep2_r3tAV_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.341014238 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tc'P1_closure" {
     Text.ParserCombinators.ReadPrec.$tc'P1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3tAX_closure+4;
         const $krep5_r3tAY_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.341674737 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$tc'P3_bytes" {
     Text.ParserCombinators.ReadPrec.$tc'P3_bytes:
         I8[] [39,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.342239602 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tc'P2_closure" {
     Text.ParserCombinators.ReadPrec.$tc'P2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$tc'P3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.34280187 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tc'P_closure" {
     Text.ParserCombinators.ReadPrec.$tc'P_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule_closure+1;
         const Text.ParserCombinators.ReadPrec.$tc'P2_closure+1;
         const Text.ParserCombinators.ReadPrec.$tc'P1_closure+4;
         const 14970691021354513070;
         const 16104245447600145137;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.34345168 UTC

[section ""relreadonly" . S3tLy_srt" {
     S3tLy_srt:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure;
         const Text.ParserCombinators.ReadPrec.choice2_closure;
         const Text.ParserCombinators.ReadPrec.choice1_closure;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const Text.ParserCombinators.ReadPrec.<++1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.344302291 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:58:07.346155923 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure" {
     Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure:
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_info;
 },
 sat_s3tB5_entry() //  [R1, R2]
         { info_tbl: [(c3u3t,
                       label: sat_s3tB5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u3t: // global
           R4 = R2;
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tB6_entry() //  [R1, R2]
         { info_tbl: [(c3u3w,
                       label: sat_s3tB6_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u3w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3u3A; else goto c3u3z;
       c3u3A: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u3z: // global
           _s3tB0::P64 = P64[R1 + 7];
           _s3tB3::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3tB5_info;
           P64[Hp - 8] = _s3tB0::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3tB3::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(c3u3B,
                       label: Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u3B: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3u3F; else goto c3u3E;
       c3u3F: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u3E: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3tB6_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.35497377 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_info;
 },
 sat_s3tBe_entry() //  [R1]
         { info_tbl: [(c3u48,
                       label: sat_s3tBe_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u48: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBf_entry() //  [R1, R2]
         { info_tbl: [(c3u4b,
                       label: sat_s3tBf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u4b: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3u4f; else goto c3u4e;
       c3u4f: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u4e: // global
           _s3tB7::P64 = P64[R1 + 7];
           _s3tBa::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = _s3tB7::P64;
           I64[Hp - 8] = sat_s3tBe_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3tBa::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(c3u4g,
                       label: Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u4g: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3u4k; else goto c3u4j;
       c3u4k: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u4j: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3tBf_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.36362068 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fFunctorReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fFunctorReadPrec_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure+3;
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.365688532 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_info;
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_entry() //  [R2,
                                                                     R4]
         { info_tbl: [(c3u4F,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u4F: // global
           R2 = R2;
           R1 = R4;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.369161322 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_info;
 },
 Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_entry() //  []
         { info_tbl: [(c3u4Q,
                       label: Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u4Q: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.373343442 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_info;
 },
 sat_s3tBs_entry() //  [R1, R2]
         { info_tbl: [(c3u5d,
                       label: sat_s3tBs_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u5d: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBt_entry() //  [R1, R2]
         { info_tbl: [(c3u5g,
                       label: sat_s3tBt_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u5g: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3u5k; else goto c3u5j;
       c3u5k: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u5j: // global
           _s3tBn::P64 = P64[R1 + 7];
           _s3tBo::P64 = P64[R1 + 15];
           _s3tBp::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3tBs_info;
           P64[Hp - 16] = _s3tBn::P64;
           P64[Hp - 8] = _s3tBo::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3tBp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3u5l,
                       label: Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u5l: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3u5p; else goto c3u5o;
       c3u5p: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u5o: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tBt_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.382224836 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_info;
 },
 sat_s3tBD_entry() //  [R1, R2]
         { info_tbl: [(c3u5X,
                       label: sat_s3tBD_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u5X: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3u61; else goto c3u60;
       c3u61: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u60: // global
           _s3tBu::P64 = P64[R1 + 7];
           _s3tBz::P64 = P64[R1 + 15];
           _s3tBA::P64 = P64[R1 + 23];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3tBu::P64;
           P64[Hp - 8] = _s3tBA::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3tBz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBE_entry() //  [R1, R2]
         { info_tbl: [(c3u62,
                       label: sat_s3tBE_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u62: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3u66; else goto c3u65;
       c3u66: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u65: // global
           _s3tBu::P64 = P64[R1 + 7];
           _s3tBw::P64 = P64[R1 + 15];
           _s3tBx::P64 = P64[R1 + 23];
           _s3tBz::P64 = P64[R1 + 31];
           I64[Hp - 24] = sat_s3tBD_info;
           P64[Hp - 16] = _s3tBu::P64;
           P64[Hp - 8] = _s3tBz::P64;
           P64[Hp] = R2;
           R3 = Hp - 23;
           R2 = _s3tBx::P64;
           R1 = _s3tBw::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBF_entry() //  [R1, R2]
         { info_tbl: [(c3u67,
                       label: sat_s3tBF_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u67: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3u6b; else goto c3u6a;
       c3u6b: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u6a: // global
           _s3tBu::P64 = P64[R1 + 7];
           _s3tBw::P64 = P64[R1 + 15];
           _s3tBx::P64 = P64[R1 + 23];
           _s3tBy::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3tBE_info;
           P64[Hp - 24] = _s3tBu::P64;
           P64[Hp - 16] = _s3tBw::P64;
           P64[Hp - 8] = _s3tBx::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3tBy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_entry() //  [R2,
                                                                     R3, R4, R5]
         { info_tbl: [(c3u6c,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u6c: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3u6g; else goto c3u6f;
       c3u6g: // global
           HpAlloc = 72;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u6f: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_s3tBF_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = Hp - 64;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.394463946 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_info;
 },
 sat_s3tBO_entry() //  [R1]
         { info_tbl: [(c3u6R,
                       label: sat_s3tBO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u6R: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBP_entry() //  [R1, R2]
         { info_tbl: [(c3u6U,
                       label: sat_s3tBP_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u6U: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3u6Y; else goto c3u6X;
       c3u6Y: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u6X: // global
           _s3tBH::P64 = P64[R1 + 7];
           _s3tBI::P64 = P64[R1 + 15];
           _s3tBK::P64 = P64[R1 + 23];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3tBK::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3tBO_info;
           P64[Hp] = Hp - 40;
           R3 = Hp - 7;
           R2 = _s3tBI::P64;
           R1 = _s3tBH::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tBQ_entry() //  [R1, R2]
         { info_tbl: [(c3u6Z,
                       label: sat_s3tBQ_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u6Z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3u73; else goto c3u72;
       c3u73: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u72: // global
           _s3tBH::P64 = P64[R1 + 7];
           _s3tBI::P64 = P64[R1 + 15];
           _s3tBJ::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3tBP_info;
           P64[Hp - 16] = _s3tBH::P64;
           P64[Hp - 8] = _s3tBI::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3tBJ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3u74,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u74: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3u78; else goto c3u77;
       c3u78: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u77: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tBQ_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.406580308 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_info;
 },
 sat_s3tBZ_entry() //  [R1, R2]
         { info_tbl: [(c3u7M,
                       label: sat_s3tBZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u7M: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3u7Q; else goto c3u7P;
       c3u7Q: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u7P: // global
           _s3tBV::P64 = P64[R1 + 7];
           _s3tBW::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3tBW::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3tBV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tC0_entry() //  [R1, R2]
         { info_tbl: [(c3u7R,
                       label: sat_s3tC0_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u7R: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3u7V; else goto c3u7U;
       c3u7V: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u7U: // global
           _s3tBS::P64 = P64[R1 + 7];
           _s3tBT::P64 = P64[R1 + 15];
           _s3tBV::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_s3tBZ_info;
           P64[Hp - 8] = _s3tBV::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3tBT::P64;
           R1 = _s3tBS::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tC1_entry() //  [R1, R2]
         { info_tbl: [(c3u7W,
                       label: sat_s3tC1_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u7W: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3u80; else goto c3u7Z;
       c3u80: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u7Z: // global
           _s3tBS::P64 = P64[R1 + 7];
           _s3tBT::P64 = P64[R1 + 15];
           _s3tBU::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3tC0_info;
           P64[Hp - 16] = _s3tBS::P64;
           P64[Hp - 8] = _s3tBT::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3tBU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3u81,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u81: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3u85; else goto c3u84;
       c3u85: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u84: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tC1_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.417600189 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_info;
 },
 sat_s3tC9_entry() //  [R1, R2]
         { info_tbl: [(c3u8E,
                       label: sat_s3tC9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u8E: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl1_s3tC7_entry() //  [R1]
         { info_tbl: [(c3u8H,
                       label: lvl1_s3tC7_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u8H: // global
           _s3tC7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3u8I; else goto c3u8J;
       c3u8J: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3u8L; else goto c3u8K;
       c3u8L: // global
           HpAlloc = 16;
           goto c3u8I;
       c3u8I: // global
           R1 = _s3tC7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3u8K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3tC7::P64;
           _s3tC3::P64 = P64[_s3tC7::P64 + 16];
           _s3tC4::P64 = P64[_s3tC7::P64 + 24];
           _s3tC6::P64 = P64[_s3tC7::P64 + 32];
           I64[Hp - 8] = sat_s3tC9_info;
           P64[Hp] = _s3tC6::P64;
           R3 = Hp - 7;
           R2 = _s3tC4::P64;
           R1 = _s3tC3::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3tCb_entry() //  [R1]
         { info_tbl: [(c3u8R,
                       label: sat_s3tCb_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u8R: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tCc_entry() //  [R1, R2]
         { info_tbl: [(c3u8U,
                       label: sat_s3tCc_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u8U: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3u8Y; else goto c3u8X;
       c3u8Y: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u8X: // global
           _s3tC3::P64 = P64[R1 + 7];
           _s3tC4::P64 = P64[R1 + 15];
           _s3tC5::P64 = P64[R1 + 23];
           I64[Hp - 48] = lvl1_s3tC7_info;
           P64[Hp - 32] = _s3tC3::P64;
           P64[Hp - 24] = _s3tC4::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3tCb_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3tC5::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3u8Z,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u8Z: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3u93; else goto c3u92;
       c3u93: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u92: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tCc_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.429949867 UTC

[section ""data" . $c>>_r3tAR_closure" {
     $c>>_r3tAR_closure:
         const $c>>_r3tAR_info;
 },
 sat_s3tCk_entry() //  [R1]
         { info_tbl: [(c3u9G,
                       label: sat_s3tCk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u9G: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tCl_entry() //  [R1, R2]
         { info_tbl: [(c3u9J,
                       label: sat_s3tCl_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u9J: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3u9N; else goto c3u9M;
       c3u9N: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3u9M: // global
           _s3tCe::P64 = P64[R1 + 7];
           _s3tCf::P64 = P64[R1 + 15];
           _s3tCg::P64 = P64[R1 + 23];
           I64[Hp - 48] = stg_ap_3_upd_info;
           P64[Hp - 32] = _s3tCe::P64;
           P64[Hp - 24] = _s3tCf::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3tCk_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3tCg::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 $c>>_r3tAR_entry() //  [R2, R3, R4]
         { info_tbl: [(c3u9O,
                       label: $c>>_r3tAR_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3u9O: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3u9S; else goto c3u9R;
       c3u9S: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $c>>_r3tAR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3u9R: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3tCl_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.438164007 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_closure:
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_info;
 },
 Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_entry() //  [R2,
                                                                   R3, R4]
         { info_tbl: [(c3uac,
                       label: Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uac: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $c>>_r3tAR_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.441674581 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure+4;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.444166382 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure+3;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure+3;
         const Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.446126356 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.447889249 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.minPrec_closure" {
     Text.ParserCombinators.ReadPrec.minPrec_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.449940842 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.reset1_closure" {
     Text.ParserCombinators.ReadPrec.reset1_closure:
         const Text.ParserCombinators.ReadPrec.reset1_info;
 },
 Text.ParserCombinators.ReadPrec.reset1_entry() //  [R2]
         { info_tbl: [(c3uar,
                       label: Text.ParserCombinators.ReadPrec.reset1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uar: // global
           _s3tCm::P64 = R2;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure+1;
           R1 = _s3tCm::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.454108632 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.reset_closure" {
     Text.ParserCombinators.ReadPrec.reset_closure:
         const Text.ParserCombinators.ReadPrec.reset_info;
 },
 Text.ParserCombinators.ReadPrec.reset_entry() //  [R2, R3]
         { info_tbl: [(c3uaC,
                       label: Text.ParserCombinators.ReadPrec.reset_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uaC: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.reset1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.457684242 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.lift1_closure" {
     Text.ParserCombinators.ReadPrec.lift1_closure:
         const Text.ParserCombinators.ReadPrec.lift1_info;
 },
 Text.ParserCombinators.ReadPrec.lift1_entry() //  [R2]
         { info_tbl: [(c3uaN,
                       label: Text.ParserCombinators.ReadPrec.lift1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uaN: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.461345295 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.lift_closure" {
     Text.ParserCombinators.ReadPrec.lift_closure:
         const Text.ParserCombinators.ReadPrec.lift_info;
 },
 Text.ParserCombinators.ReadPrec.lift_entry() //  [R2, R3]
         { info_tbl: [(c3uaY,
                       label: Text.ParserCombinators.ReadPrec.lift_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uaY: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.lift1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.464924479 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.get1_closure" {
     Text.ParserCombinators.ReadPrec.get1_closure:
         const Text.ParserCombinators.ReadPrec.get1_info;
 },
 Text.ParserCombinators.ReadPrec.get1_entry() //  [R2, R3]
         { info_tbl: [(c3uba,
                       label: Text.ParserCombinators.ReadPrec.get1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uba: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ube; else goto c3ubd;
       c3ube: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.get1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ubd: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R3;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.46909309 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.get_closure" {
     Text.ParserCombinators.ReadPrec.get_closure:
         const Text.ParserCombinators.ReadPrec.get_info;
 },
 Text.ParserCombinators.ReadPrec.get_entry() //  [R2, R3]
         { info_tbl: [(c3ubo,
                       label: Text.ParserCombinators.ReadPrec.get_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ubo: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.get1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.472635789 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.look1_closure" {
     Text.ParserCombinators.ReadPrec.look1_closure:
         const Text.ParserCombinators.ReadPrec.look1_info;
 },
 Text.ParserCombinators.ReadPrec.look1_entry() //  [R2, R3]
         { info_tbl: [(c3ubA,
                       label: Text.ParserCombinators.ReadPrec.look1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ubA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ubE; else goto c3ubD;
       c3ubE: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.look1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ubD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R3;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.477632245 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.look_closure" {
     Text.ParserCombinators.ReadPrec.look_closure:
         const Text.ParserCombinators.ReadPrec.look_info;
 },
 Text.ParserCombinators.ReadPrec.look_entry() //  [R2, R3]
         { info_tbl: [(c3ubO,
                       label: Text.ParserCombinators.ReadPrec.look_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ubO: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.look1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.480941558 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_info;
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_entry() //  []
         { info_tbl: [(c3ubZ,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ubZ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.48430405 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.pfail_closure" {
     Text.ParserCombinators.ReadPrec.pfail_closure:
         const Text.ParserCombinators.ReadPrec.pfail_info;
 },
 Text.ParserCombinators.ReadPrec.pfail_entry() //  [R2, R3]
         { info_tbl: [(c3ucb,
                       label: Text.ParserCombinators.ReadPrec.pfail_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ucb: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_entry(R3,
                                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.488835419 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.step1_closure" {
     Text.ParserCombinators.ReadPrec.step1_closure:
         const Text.ParserCombinators.ReadPrec.step1_info;
 },
 sat_s3tCB_entry() //  [R1]
         { info_tbl: [(c3uct,
                       label: sat_s3tCB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uct: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3ucA; else goto c3ucB;
       c3ucA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ucB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3ucq_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3ucF; else goto c3ucr;
       u3ucF: // global
           call _c3ucq(R1) args: 0, res: 0, upd: 0;
       c3ucr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3ucq() //  [R1]
         { info_tbl: [(c3ucq,
                       label: block_c3ucq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ucq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ucE; else goto c3ucD;
       c3ucE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3ucD: // global
           _s3tCA::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3tCA::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadPrec.step1_entry() //  [R2, R3]
         { info_tbl: [(c3ucG,
                       label: Text.ParserCombinators.ReadPrec.step1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ucG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ucK; else goto c3ucJ;
       c3ucK: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.step1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ucJ: // global
           I64[Hp - 16] = sat_s3tCB_info;
           P64[Hp] = R3;
           _s3tCw::P64 = R2;
           R2 = Hp - 16;
           R1 = _s3tCw::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.496643363 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.step_closure" {
     Text.ParserCombinators.ReadPrec.step_closure:
         const Text.ParserCombinators.ReadPrec.step_info;
 },
 Text.ParserCombinators.ReadPrec.step_entry() //  [R2, R3]
         { info_tbl: [(c3ud3,
                       label: Text.ParserCombinators.ReadPrec.step_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ud3: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.step1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.500301409 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.prec1_closure" {
     Text.ParserCombinators.ReadPrec.prec1_closure:
         const Text.ParserCombinators.ReadPrec.prec1_info;
 },
 Text.ParserCombinators.ReadPrec.prec1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3udh,
                       label: Text.ParserCombinators.ReadPrec.prec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3udh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3udl; else goto c3udm;
       c3udl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.prec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3udm: // global
           I64[Sp - 24] = block_c3ude_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3udz; else goto c3udf;
       u3udz: // global
           call _c3ude(R1) args: 0, res: 0, upd: 0;
       c3udf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ude() //  [R1]
         { info_tbl: [(c3ude,
                       label: block_c3ude_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ude: // global
           I64[Sp] = block_c3udk_info;
           _s3tCG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3tCG::I64;
           if (R1 & 7 != 0) goto u3udy; else goto c3udo;
       u3udy: // global
           call _c3udk(R1) args: 0, res: 0, upd: 0;
       c3udo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3udk() //  [R1]
         { info_tbl: [(c3udk,
                       label: block_c3udk_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3udk: // global
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto c3udw; else goto c3udx;
       c3udw: // global
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3udx: // global
           R2 = R1;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.508113414 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.prec_closure" {
     Text.ParserCombinators.ReadPrec.prec_closure:
         const Text.ParserCombinators.ReadPrec.prec_info;
 },
 Text.ParserCombinators.ReadPrec.prec_entry() //  [R2, R3, R4]
         { info_tbl: [(c3udT,
                       label: Text.ParserCombinators.ReadPrec.prec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3udT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.prec1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.512792903 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_info;
         const 0;
 },
 sat_s3tCS_entry() //  [R1, R2]
         { info_tbl: [(c3uee,
                       label: sat_s3tCS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uee: // global
           _s3tCP::P64 = R2;
           _s3tCS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3uef; else goto c3ueg;
       c3ueg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3uei; else goto c3ueh;
       c3uei: // global
           HpAlloc = 32;
           goto c3uef;
       c3uef: // global
           R2 = _s3tCP::P64;
           R1 = _s3tCS::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ueh: // global
           _s3tCN::P64 = P64[_s3tCS::P64 + 7];
           _s3tCO::P64 = P64[_s3tCS::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3tCO::P64;
           P64[Hp] = _s3tCP::P64;
           I64[Sp - 16] = block_c3uec_info;
           R2 = _s3tCP::P64;
           R1 = _s3tCN::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3uec() //  [R1]
         { info_tbl: [(c3uec,
                       label: block_c3uec_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uec: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3uem,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uem: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3ueq; else goto c3uep;
       c3ueq: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uep: // global
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3tCS_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.521434916 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.+++_closure" {
     Text.ParserCombinators.ReadPrec.+++_closure:
         const Text.ParserCombinators.ReadPrec.+++_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.+++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3ueK,
                       label: Text.ParserCombinators.ReadPrec.+++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ueK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_entry(R4,
                                                                             R3,
                                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.524937671 UTC

[section ""data" . lvl_r3tAS_closure" {
     lvl_r3tAS_closure:
         const lvl_r3tAS_info;
 },
 lvl_r3tAS_entry() //  []
         { info_tbl: [(c3ueV,
                       label: lvl_r3tAS_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ueV: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.529473573 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.choice2_closure" {
     Text.ParserCombinators.ReadPrec.choice2_closure:
         const Text.ParserCombinators.ReadPrec.choice2_info;
         const 0;
 },
 ds2_s3tD0_entry() //  [R1]
         { info_tbl: [(c3ufi,
                       label: ds2_s3tD0_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ufi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ufj; else goto c3ufk;
       c3ufj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ufk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadPrec.choice2_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3tD4_entry() //  [R1, R2]
         { info_tbl: [(c3uft,
                       label: sat_s3tD4_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uft: // global
           _s3tD1::P64 = R2;
           _s3tD4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ufu; else goto c3ufv;
       c3ufv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ufx; else goto c3ufw;
       c3ufx: // global
           HpAlloc = 32;
           goto c3ufu;
       c3ufu: // global
           R2 = _s3tD1::P64;
           R1 = _s3tD4::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ufw: // global
           _s3tCZ::P64 = P64[_s3tD4::P64 + 7];
           _s3tD0::P64 = P64[_s3tD4::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3tD0::P64;
           P64[Hp] = _s3tD1::P64;
           I64[Sp - 16] = block_c3ufr_info;
           R2 = _s3tD1::P64;
           R1 = _s3tCZ::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ufr() //  [R1]
         { info_tbl: [(c3ufr,
                       label: block_c3ufr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ufr: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.choice2_entry() //  [R2, R3]
         { info_tbl: [(c3ufF,
                       label: Text.ParserCombinators.ReadPrec.choice2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ufF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ufG; else goto c3ufH;
       c3ufG: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.choice2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ufH: // global
           I64[Sp - 16] = block_c3uf7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3ufN; else goto c3uf8;
       u3ufN: // global
           call _c3uf7(R1) args: 0, res: 0, upd: 0;
       c3uf8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3uf7() //  [R1]
         { info_tbl: [(c3uf7,
                       label: block_c3uf7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uf7: // global
           if (R1 & 7 == 1) goto c3ufC; else goto c3ufD;
       c3ufC: // global
           R1 = lvl_r3tAS_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ufD: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3ufM; else goto c3ufL;
       c3ufM: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ufL: // global
           _s3tCX::P64 = P64[R1 + 6];
           _s3tCY::P64 = P64[R1 + 14];
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = _s3tCX::P64;
           _s3tCV::P64 = P64[Sp + 8];
           P64[Hp - 56] = _s3tCV::P64;
           I64[Hp - 48] = ds2_s3tD0_info;
           P64[Hp - 32] = _s3tCV::P64;
           P64[Hp - 24] = _s3tCY::P64;
           I64[Hp - 16] = sat_s3tD4_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.541767605 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.choice1_closure" {
     Text.ParserCombinators.ReadPrec.choice1_closure:
         const Text.ParserCombinators.ReadPrec.choice1_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.choice1_entry() //  [R2, R3]
         { info_tbl: [(c3ugj,
                       label: Text.ParserCombinators.ReadPrec.choice1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ugj: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.choice2_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.545501347 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.choice_closure" {
     Text.ParserCombinators.ReadPrec.choice_closure:
         const Text.ParserCombinators.ReadPrec.choice_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.choice_entry() //  [R2, R3]
         { info_tbl: [(c3ugu,
                       label: Text.ParserCombinators.ReadPrec.choice_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ugu: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.choice1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.551378967 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_info;
         const 0;
 },
 sat_s3tDj_entry() //  [R1]
         { info_tbl: [(c3uh0,
                       label: sat_s3tDj_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uh0: // global
           _s3tDj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3uh1; else goto c3uh2;
       c3uh2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3uh4; else goto c3uh3;
       c3uh4: // global
           HpAlloc = 24;
           goto c3uh1;
       c3uh1: // global
           R1 = _s3tDj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3uh3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3tDj::P64;
           _s3tDc::P64 = P64[_s3tDj::P64 + 16];
           _s3tDd::P64 = P64[_s3tDj::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3tDd::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3tDc::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3tDg_entry() //  [R1, R2]
         { info_tbl: [(c3uhb,
                       label: sat_s3tDg_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uhb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3uhf; else goto c3uhe;
       c3uhf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uhe: // global
           _s3tDc::P64 = P64[R1 + 7];
           _s3tDd::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3tDd::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3tDc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tDk_entry() //  [R1, R2]
         { info_tbl: [(c3uhi,
                       label: sat_s3tDk_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uhi: // global
           _s3tDd::P64 = R2;
           _s3tDk::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3uhj; else goto c3uhk;
       c3uhk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3uhm; else goto c3uhl;
       c3uhm: // global
           HpAlloc = 56;
           goto c3uhj;
       c3uhj: // global
           R2 = _s3tDd::P64;
           R1 = _s3tDk::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uhl: // global
           _s3tD9::P64 = P64[_s3tDk::P64 + 7];
           _s3tDa::P64 = P64[_s3tDk::P64 + 15];
           _s3tDc::P64 = P64[_s3tDk::P64 + 23];
           I64[Hp - 48] = sat_s3tDj_info;
           P64[Hp - 32] = _s3tDc::P64;
           P64[Hp - 24] = _s3tDd::P64;
           I64[Hp - 16] = sat_s3tDg_info;
           P64[Hp - 8] = _s3tDc::P64;
           P64[Hp] = _s3tDd::P64;
           I64[Sp - 16] = block_c3uhg_info;
           R2 = _s3tDa::P64;
           R1 = _s3tD9::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 32;
           call some_v_s3tD9_entry(R2, R1) args: 24, res: 8, upd: 8;
     }
 },
 _c3uhg() //  [R1]
         { info_tbl: [(c3uhg,
                       label: block_c3uhg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uhg: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tDl_entry() //  [R1, R2]
         { info_tbl: [(c3uhq,
                       label: sat_s3tDl_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uhq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3uhu; else goto c3uht;
       c3uhu: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uht: // global
           _s3tD9::P64 = P64[R1 + 7];
           _s3tDa::P64 = P64[R1 + 15];
           _s3tDb::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3tDk_info;
           P64[Hp - 16] = _s3tD9::P64;
           P64[Hp - 8] = _s3tDa::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3tDb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 some_v_s3tD9_entry() //  [R1, R2]
         { info_tbl: [(c3uhv,
                       label: some_v_s3tD9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uhv: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3uhz; else goto c3uhy;
       c3uhz: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uhy: // global
           _s3tD7::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3tD7::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3tDl_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_entry() //  [R2,
                                                                     R3]
         { info_tbl: [(c3uhA,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uhA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3uhE; else goto c3uhD;
       c3uhE: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uhD: // global
           I64[Hp - 8] = some_v_s3tD9_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call some_v_s3tD9_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.5798294 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_info;
         const 0;
 },
 sat_s3tDy_entry() //  [R1]
         { info_tbl: [(c3uiq,
                       label: sat_s3tDy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uiq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3uir; else goto c3uis;
       c3uir: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3uis: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3tDv_entry() //  [R1, R2]
         { info_tbl: [(c3uiE,
                       label: sat_s3tDv_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uiE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3uiI; else goto c3uiH;
       c3uiI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uiH: // global
           _s3tDr::P64 = P64[R1 + 7];
           _s3tDs::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3tDs::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3tDr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3tDw_entry() //  [R1, R2]
         { info_tbl: [(c3uiJ,
                       label: sat_s3tDw_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uiJ: // global
           _s3tDs::P64 = R2;
           _s3tDw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3uiK; else goto c3uiL;
       c3uiL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3uiN; else goto c3uiM;
       c3uiN: // global
           HpAlloc = 24;
           goto c3uiK;
       c3uiK: // global
           R2 = _s3tDs::P64;
           R1 = _s3tDw::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uiM: // global
           _s3tDo::P64 = P64[_s3tDw::P64 + 7];
           _s3tDp::P64 = P64[_s3tDw::P64 + 15];
           _s3tDr::P64 = P64[_s3tDw::P64 + 23];
           I64[Hp - 16] = sat_s3tDv_info;
           P64[Hp - 8] = _s3tDr::P64;
           P64[Hp] = _s3tDs::P64;
           R2 = _s3tDp::P64;
           R1 = _s3tDo::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call many_v_s3tDo_entry(R2, R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s3tDz_entry() //  [R1, R2]
         { info_tbl: [(c3uiQ,
                       label: sat_s3tDz_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uiQ: // global
           _s3tDr::P64 = R2;
           _s3tDz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3uiR; else goto c3uiS;
       c3uiS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3uiU; else goto c3uiT;
       c3uiU: // global
           HpAlloc = 56;
           goto c3uiR;
       c3uiR: // global
           R2 = _s3tDr::P64;
           R1 = _s3tDz::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uiT: // global
           _s3tDo::P64 = P64[_s3tDz::P64 + 7];
           _s3tDp::P64 = P64[_s3tDz::P64 + 15];
           _s3tDq::P64 = P64[_s3tDz::P64 + 23];
           I64[Hp - 48] = sat_s3tDy_info;
           P64[Hp - 32] = _s3tDr::P64;
           I64[Hp - 24] = sat_s3tDw_info;
           P64[Hp - 16] = _s3tDo::P64;
           P64[Hp - 8] = _s3tDp::P64;
           P64[Hp] = _s3tDr::P64;
           I64[Sp - 16] = block_c3uiO_info;
           R2 = Hp - 23;
           R1 = _s3tDq::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3uiO() //  [R1]
         { info_tbl: [(c3uiO,
                       label: block_c3uiO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uiO: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 many_v_s3tDo_entry() //  [R1, R2]
         { info_tbl: [(c3uiY,
                       label: many_v_s3tDo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uiY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3uj2; else goto c3uj1;
       c3uj2: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uj1: // global
           _s3tDm::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3tDm::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3tDz_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_entry() //  [R2,
                                                                     R3]
         { info_tbl: [(c3uj3,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uj3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3uj7; else goto c3uj6;
       c3uj7: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uj6: // global
           I64[Hp - 8] = many_v_s3tDo_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call many_v_s3tDo_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.607175702 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure+3;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure+2;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.609924556 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadPlusReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadPlusReadPrec_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.613193264 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.<++1_closure" {
     Text.ParserCombinators.ReadPrec.<++1_closure:
         const Text.ParserCombinators.ReadPrec.<++1_info;
         const 0;
 },
 sat_s3tDI_entry() //  [R1, R2]
         { info_tbl: [(c3ujR,
                       label: sat_s3tDI_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ujR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ujS; else goto c3ujT;
       c3ujS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ujT: // global
           I64[Sp - 8] = block_c3ujO_info;
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ujO() //  [R1]
         { info_tbl: [(c3ujO,
                       label: block_c3ujO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ujO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ujW; else goto c3ujV;
       c3ujW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ujV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.<++1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3ujX,
                       label: Text.ParserCombinators.ReadPrec.<++1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ujX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3uk1; else goto c3uk0;
       c3uk1: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.<++1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uk0: // global
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3tDI_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.621547753 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.<++_closure" {
     Text.ParserCombinators.ReadPrec.<++_closure:
         const Text.ParserCombinators.ReadPrec.<++_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.<++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3ukl,
                       label: Text.ParserCombinators.ReadPrec.<++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ukl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.<++1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.625222694 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readPrec_to_P1_closure" {
     Text.ParserCombinators.ReadPrec.readPrec_to_P1_closure:
         const Text.ParserCombinators.ReadPrec.readPrec_to_P1_info;
 },
 Text.ParserCombinators.ReadPrec.readPrec_to_P1_entry() //  [R2]
         { info_tbl: [(c3ukw,
                       label: Text.ParserCombinators.ReadPrec.readPrec_to_P1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ukw: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.62902653 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readPrec_to_P_closure" {
     Text.ParserCombinators.ReadPrec.readPrec_to_P_closure:
         const Text.ParserCombinators.ReadPrec.readPrec_to_P_info;
 },
 Text.ParserCombinators.ReadPrec.readPrec_to_P_entry() //  [R2]
         { info_tbl: [(c3ukH,
                       label: Text.ParserCombinators.ReadPrec.readPrec_to_P_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ukH: // global
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.readPrec_to_P1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.632646346 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readP_to_Prec1_closure" {
     Text.ParserCombinators.ReadPrec.readP_to_Prec1_closure:
         const Text.ParserCombinators.ReadPrec.readP_to_Prec1_info;
 },
 Text.ParserCombinators.ReadPrec.readP_to_Prec1_entry() //  [R2]
         { info_tbl: [(c3ukS,
                       label: Text.ParserCombinators.ReadPrec.readP_to_Prec1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ukS: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.636231352 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readP_to_Prec_closure" {
     Text.ParserCombinators.ReadPrec.readP_to_Prec_closure:
         const Text.ParserCombinators.ReadPrec.readP_to_Prec_info;
 },
 Text.ParserCombinators.ReadPrec.readP_to_Prec_entry() //  [R2]
         { info_tbl: [(c3ul3,
                       label: Text.ParserCombinators.ReadPrec.readP_to_Prec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ul3: // global
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.readP_to_Prec1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.640298634 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readPrec_to_S_closure" {
     Text.ParserCombinators.ReadPrec.readPrec_to_S_closure:
         const Text.ParserCombinators.ReadPrec.readPrec_to_S_info;
 },
 sat_s3tDN_entry() //  [R1]
         { info_tbl: [(c3uli,
                       label: sat_s3tDN_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uli: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ulj; else goto c3ulk;
       c3ulj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ulk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadPrec.readPrec_to_S_entry() //  [R2, R3]
         { info_tbl: [(c3ull,
                       label: Text.ParserCombinators.ReadPrec.readPrec_to_S_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ull: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ulp; else goto c3ulo;
       c3ulp: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.readPrec_to_S_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ulo: // global
           I64[Hp - 24] = sat_s3tDN_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.646898779 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readS_to_Prec1_closure" {
     Text.ParserCombinators.ReadPrec.readS_to_Prec1_closure:
         const Text.ParserCombinators.ReadPrec.readS_to_Prec1_info;
 },
 sat_s3tDU_entry() //  [R1, R2]
         { info_tbl: [(c3ulL,
                       label: sat_s3tDU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ulL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ulM; else goto c3ulN;
       c3ulM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ulN: // global
           I64[Sp - 8] = block_c3ulI_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ulI() //  [R1]
         { info_tbl: [(c3ulI,
                       label: block_c3ulI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ulI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ulQ; else goto c3ulP;
       c3ulQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ulP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry() //  [R2, R3]
         { info_tbl: [(c3ulR,
                       label: Text.ParserCombinators.ReadPrec.readS_to_Prec1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ulR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3ulV; else goto c3ulU;
       c3ulV: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.readS_to_Prec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ulU: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s3tDU_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.655878675 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readS_to_Prec_closure" {
     Text.ParserCombinators.ReadPrec.readS_to_Prec_closure:
         const Text.ParserCombinators.ReadPrec.readS_to_Prec_info;
 },
 Text.ParserCombinators.ReadPrec.readS_to_Prec_entry() //  [R2, R3]
         { info_tbl: [(c3ume,
                       label: Text.ParserCombinators.ReadPrec.readS_to_Prec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ume: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.65920725 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$trModule4_bytes" {
     Text.ParserCombinators.ReadPrec.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.660859258 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$trModule3_closure" {
     Text.ParserCombinators.ReadPrec.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.662711911 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$trModule2_bytes" {
     Text.ParserCombinators.ReadPrec.$trModule2_bytes:
         I8[] [84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,114,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.664458278 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$trModule1_closure" {
     Text.ParserCombinators.ReadPrec.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.666300626 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$trModule_closure" {
     Text.ParserCombinators.ReadPrec.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule3_closure+1;
         const Text.ParserCombinators.ReadPrec.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.668101321 UTC

[section ""data" . $krep_r3tAT_closure" {
     $krep_r3tAT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.669944141 UTC

[section ""data" . $krep1_r3tAU_closure" {
     $krep1_r3tAU_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.67169627 UTC

[section ""data" . $krep2_r3tAV_closure" {
     $krep2_r3tAV_closure:
         const :_con_info;
         const $krep1_r3tAU_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.673564324 UTC

[section ""data" . $krep3_r3tAW_closure" {
     $krep3_r3tAW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadP.$tcReadP_closure;
         const $krep2_r3tAV_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.675389077 UTC

[section ""data" . $krep4_r3tAX_closure" {
     $krep4_r3tAX_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3tAT_closure+1;
         const $krep3_r3tAW_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.677808939 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$tcReadPrec2_bytes" {
     Text.ParserCombinators.ReadPrec.$tcReadPrec2_bytes:
         I8[] [82,101,97,100,80,114,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.679691855 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tcReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$tcReadPrec1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.682057671 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tcReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$tcReadPrec_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule_closure+1;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17656447446138014199;
         const 97878223355588575;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.683963359 UTC

[section ""data" . $krep5_r3tAY_closure" {
     $krep5_r3tAY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec_closure+1;
         const $krep2_r3tAV_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.685744088 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tc'P1_closure" {
     Text.ParserCombinators.ReadPrec.$tc'P1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3tAX_closure+4;
         const $krep5_r3tAY_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.68745062 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$tc'P3_bytes" {
     Text.ParserCombinators.ReadPrec.$tc'P3_bytes:
         I8[] [39,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.689149998 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tc'P2_closure" {
     Text.ParserCombinators.ReadPrec.$tc'P2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$tc'P3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.690924059 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tc'P_closure" {
     Text.ParserCombinators.ReadPrec.$tc'P_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule_closure+1;
         const Text.ParserCombinators.ReadPrec.$tc'P2_closure+1;
         const Text.ParserCombinators.ReadPrec.$tc'P1_closure+4;
         const 14970691021354513070;
         const 16104245447600145137;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:07.692746284 UTC

[section ""relreadonly" . S3tLy_srt" {
     S3tLy_srt:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure;
         const Text.ParserCombinators.ReadPrec.choice2_closure;
         const Text.ParserCombinators.ReadPrec.choice1_closure;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const Text.ParserCombinators.ReadPrec.<++1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.401810422 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:58:08.404035818 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure" {
     Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure:
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_info;
 },
 sat_s3umJ_entry() //  [R1, R2]
         { info_tbl: [(c3upO,
                       label: sat_s3umJ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3upO: // global
           R4 = R2;
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3umK_entry() //  [R1, R2]
         { info_tbl: [(c3upR,
                       label: sat_s3umK_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3upR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3upV; else goto c3upU;
       c3upV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3upU: // global
           _s3umE::P64 = P64[R1 + 7];
           _s3umH::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3umJ_info;
           P64[Hp - 8] = _s3umE::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3umH::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(c3upW,
                       label: Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3upW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3uq0; else goto c3upZ;
       c3uq0: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3upZ: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3umK_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.412424179 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_info;
 },
 sat_s3umS_entry() //  [R1]
         { info_tbl: [(c3uqw,
                       label: sat_s3umS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uqw: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3umT_entry() //  [R1, R2]
         { info_tbl: [(c3uqz,
                       label: sat_s3umT_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uqz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3uqD; else goto c3uqC;
       c3uqD: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uqC: // global
           _s3umL::P64 = P64[R1 + 7];
           _s3umO::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = _s3umL::P64;
           I64[Hp - 8] = sat_s3umS_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3umO::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(c3uqE,
                       label: Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uqE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3uqI; else goto c3uqH;
       c3uqI: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uqH: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3umT_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.420264716 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fFunctorReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fFunctorReadPrec_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2_closure+3;
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.422305263 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_info;
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_entry() //  [R2,
                                                                     R4]
         { info_tbl: [(c3ur7,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ur7: // global
           R2 = R2;
           R1 = R4;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.425810508 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_info;
 },
 Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_entry() //  []
         { info_tbl: [(c3uri,
                       label: Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uri: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.430070266 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_info;
 },
 sat_s3un6_entry() //  [R1, R2]
         { info_tbl: [(c3urG,
                       label: sat_s3un6_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3urG: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3un7_entry() //  [R1, R2]
         { info_tbl: [(c3urJ,
                       label: sat_s3un7_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3urJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3urN; else goto c3urM;
       c3urN: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3urM: // global
           _s3un1::P64 = P64[R1 + 7];
           _s3un2::P64 = P64[R1 + 15];
           _s3un3::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3un6_info;
           P64[Hp - 16] = _s3un1::P64;
           P64[Hp - 8] = _s3un2::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3un3::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3urO,
                       label: Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3urO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3urS; else goto c3urR;
       c3urS: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3urR: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3un7_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.438609834 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_info;
 },
 sat_s3unh_entry() //  [R1, R2]
         { info_tbl: [(c3ust,
                       label: sat_s3unh_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ust: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3usx; else goto c3usw;
       c3usx: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3usw: // global
           _s3un8::P64 = P64[R1 + 7];
           _s3und::P64 = P64[R1 + 15];
           _s3une::P64 = P64[R1 + 23];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3un8::P64;
           P64[Hp - 8] = _s3une::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3und::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3uni_entry() //  [R1, R2]
         { info_tbl: [(c3usy,
                       label: sat_s3uni_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3usy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3usC; else goto c3usB;
       c3usC: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3usB: // global
           _s3un8::P64 = P64[R1 + 7];
           _s3una::P64 = P64[R1 + 15];
           _s3unb::P64 = P64[R1 + 23];
           _s3und::P64 = P64[R1 + 31];
           I64[Hp - 24] = sat_s3unh_info;
           P64[Hp - 16] = _s3un8::P64;
           P64[Hp - 8] = _s3und::P64;
           P64[Hp] = R2;
           R3 = Hp - 23;
           R2 = _s3unb::P64;
           R1 = _s3una::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3unj_entry() //  [R1, R2]
         { info_tbl: [(c3usD,
                       label: sat_s3unj_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3usD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3usH; else goto c3usG;
       c3usH: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3usG: // global
           _s3un8::P64 = P64[R1 + 7];
           _s3una::P64 = P64[R1 + 15];
           _s3unb::P64 = P64[R1 + 23];
           _s3unc::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3uni_info;
           P64[Hp - 24] = _s3un8::P64;
           P64[Hp - 16] = _s3una::P64;
           P64[Hp - 8] = _s3unb::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3unc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_entry() //  [R2,
                                                                     R3, R4, R5]
         { info_tbl: [(c3usI,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3usI: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3usM; else goto c3usL;
       c3usM: // global
           HpAlloc = 72;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3usL: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_s3unj_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = Hp - 64;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.450004474 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_info;
 },
 sat_s3uns_entry() //  [R1]
         { info_tbl: [(c3uts,
                       label: sat_s3uns_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uts: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3unt_entry() //  [R1, R2]
         { info_tbl: [(c3utv,
                       label: sat_s3unt_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3utv: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3utz; else goto c3uty;
       c3utz: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uty: // global
           _s3unl::P64 = P64[R1 + 7];
           _s3unm::P64 = P64[R1 + 15];
           _s3uno::P64 = P64[R1 + 23];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3uno::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3uns_info;
           P64[Hp] = Hp - 40;
           R3 = Hp - 7;
           R2 = _s3unm::P64;
           R1 = _s3unl::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3unu_entry() //  [R1, R2]
         { info_tbl: [(c3utA,
                       label: sat_s3unu_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3utA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3utE; else goto c3utD;
       c3utE: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3utD: // global
           _s3unl::P64 = P64[R1 + 7];
           _s3unm::P64 = P64[R1 + 15];
           _s3unn::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3unt_info;
           P64[Hp - 16] = _s3unl::P64;
           P64[Hp - 8] = _s3unm::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3unn::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3utF,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3utF: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3utJ; else goto c3utI;
       c3utJ: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3utI: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3unu_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.460251053 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_info;
 },
 sat_s3unD_entry() //  [R1, R2]
         { info_tbl: [(c3uus,
                       label: sat_s3unD_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uus: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3uuw; else goto c3uuv;
       c3uuw: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uuv: // global
           _s3unz::P64 = P64[R1 + 7];
           _s3unA::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3unA::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3unz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3unE_entry() //  [R1, R2]
         { info_tbl: [(c3uux,
                       label: sat_s3unE_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uux: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3uuB; else goto c3uuA;
       c3uuB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uuA: // global
           _s3unw::P64 = P64[R1 + 7];
           _s3unx::P64 = P64[R1 + 15];
           _s3unz::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_s3unD_info;
           P64[Hp - 8] = _s3unz::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3unx::P64;
           R1 = _s3unw::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3unF_entry() //  [R1, R2]
         { info_tbl: [(c3uuC,
                       label: sat_s3unF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uuC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3uuG; else goto c3uuF;
       c3uuG: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uuF: // global
           _s3unw::P64 = P64[R1 + 7];
           _s3unx::P64 = P64[R1 + 15];
           _s3uny::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3unE_info;
           P64[Hp - 16] = _s3unw::P64;
           P64[Hp - 8] = _s3unx::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3uny::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3uuH,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uuH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3uuL; else goto c3uuK;
       c3uuL: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uuK: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3unF_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.471742679 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure:
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_info;
 },
 sat_s3unN_entry() //  [R1, R2]
         { info_tbl: [(c3uvp,
                       label: sat_s3unN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uvp: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl1_s3unL_entry() //  [R1]
         { info_tbl: [(c3uvs,
                       label: lvl1_s3unL_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uvs: // global
           _s3unL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3uvt; else goto c3uvu;
       c3uvu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3uvw; else goto c3uvv;
       c3uvw: // global
           HpAlloc = 16;
           goto c3uvt;
       c3uvt: // global
           R1 = _s3unL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3uvv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3unL::P64;
           _s3unH::P64 = P64[_s3unL::P64 + 16];
           _s3unI::P64 = P64[_s3unL::P64 + 24];
           _s3unK::P64 = P64[_s3unL::P64 + 32];
           I64[Hp - 8] = sat_s3unN_info;
           P64[Hp] = _s3unK::P64;
           R3 = Hp - 7;
           R2 = _s3unI::P64;
           R1 = _s3unH::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3unP_entry() //  [R1]
         { info_tbl: [(c3uvC,
                       label: sat_s3unP_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uvC: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3unQ_entry() //  [R1, R2]
         { info_tbl: [(c3uvF,
                       label: sat_s3unQ_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uvF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3uvJ; else goto c3uvI;
       c3uvJ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uvI: // global
           _s3unH::P64 = P64[R1 + 7];
           _s3unI::P64 = P64[R1 + 15];
           _s3unJ::P64 = P64[R1 + 23];
           I64[Hp - 48] = lvl1_s3unL_info;
           P64[Hp - 32] = _s3unH::P64;
           P64[Hp - 24] = _s3unI::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3unP_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3unJ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3uvK,
                       label: Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uvK: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3uvO; else goto c3uvN;
       c3uvO: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uvN: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3unQ_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.483711364 UTC

[section ""data" . $c>>_r3tAR_closure" {
     $c>>_r3tAR_closure:
         const $c>>_r3tAR_info;
 },
 sat_s3unY_entry() //  [R1]
         { info_tbl: [(c3uwx,
                       label: sat_s3unY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uwx: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3unZ_entry() //  [R1, R2]
         { info_tbl: [(c3uwA,
                       label: sat_s3unZ_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uwA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3uwE; else goto c3uwD;
       c3uwE: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uwD: // global
           _s3unS::P64 = P64[R1 + 7];
           _s3unT::P64 = P64[R1 + 15];
           _s3unU::P64 = P64[R1 + 23];
           I64[Hp - 48] = stg_ap_3_upd_info;
           P64[Hp - 32] = _s3unS::P64;
           P64[Hp - 24] = _s3unT::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3unY_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3unU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 $c>>_r3tAR_entry() //  [R2, R3, R4]
         { info_tbl: [(c3uwF,
                       label: $c>>_r3tAR_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uwF: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3uwJ; else goto c3uwI;
       c3uwJ: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $c>>_r3tAR_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uwI: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3unZ_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.491614622 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_closure:
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_info;
 },
 Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_entry() //  [R2,
                                                                   R3, R4]
         { info_tbl: [(c3ux7,
                       label: Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ux7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $c>>_r3tAR_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.494962537 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadPrec.$fFunctorReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3_closure+4;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.496771934 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec1_closure+3;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>_closure+3;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5_closure+3;
         const Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.498733677 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.500398587 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.minPrec_closure" {
     Text.ParserCombinators.ReadPrec.minPrec_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.502243037 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.reset1_closure" {
     Text.ParserCombinators.ReadPrec.reset1_closure:
         const Text.ParserCombinators.ReadPrec.reset1_info;
 },
 Text.ParserCombinators.ReadPrec.reset1_entry() //  [R2]
         { info_tbl: [(c3uxm,
                       label: Text.ParserCombinators.ReadPrec.reset1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uxm: // global
           _s3uo0::P64 = R2;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure+1;
           R1 = _s3uo0::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.505821941 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.reset_closure" {
     Text.ParserCombinators.ReadPrec.reset_closure:
         const Text.ParserCombinators.ReadPrec.reset_info;
 },
 Text.ParserCombinators.ReadPrec.reset_entry() //  [R2, R3]
         { info_tbl: [(c3uxx,
                       label: Text.ParserCombinators.ReadPrec.reset_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uxx: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.reset1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.509312795 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.lift1_closure" {
     Text.ParserCombinators.ReadPrec.lift1_closure:
         const Text.ParserCombinators.ReadPrec.lift1_info;
 },
 Text.ParserCombinators.ReadPrec.lift1_entry() //  [R2]
         { info_tbl: [(c3uxI,
                       label: Text.ParserCombinators.ReadPrec.lift1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uxI: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.512612221 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.lift_closure" {
     Text.ParserCombinators.ReadPrec.lift_closure:
         const Text.ParserCombinators.ReadPrec.lift_info;
 },
 Text.ParserCombinators.ReadPrec.lift_entry() //  [R2, R3]
         { info_tbl: [(c3uxT,
                       label: Text.ParserCombinators.ReadPrec.lift_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uxT: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.lift1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.516860057 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.get1_closure" {
     Text.ParserCombinators.ReadPrec.get1_closure:
         const Text.ParserCombinators.ReadPrec.get1_info;
 },
 Text.ParserCombinators.ReadPrec.get1_entry() //  [R2, R3]
         { info_tbl: [(c3uy5,
                       label: Text.ParserCombinators.ReadPrec.get1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uy5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3uy9; else goto c3uy8;
       c3uy9: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.get1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uy8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R3;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.520861492 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.get_closure" {
     Text.ParserCombinators.ReadPrec.get_closure:
         const Text.ParserCombinators.ReadPrec.get_info;
 },
 Text.ParserCombinators.ReadPrec.get_entry() //  [R2, R3]
         { info_tbl: [(c3uyk,
                       label: Text.ParserCombinators.ReadPrec.get_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uyk: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.get1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.524257077 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.look1_closure" {
     Text.ParserCombinators.ReadPrec.look1_closure:
         const Text.ParserCombinators.ReadPrec.look1_info;
 },
 Text.ParserCombinators.ReadPrec.look1_entry() //  [R2, R3]
         { info_tbl: [(c3uyw,
                       label: Text.ParserCombinators.ReadPrec.look1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uyw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3uyA; else goto c3uyz;
       c3uyA: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.look1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uyz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R3;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.528207777 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.look_closure" {
     Text.ParserCombinators.ReadPrec.look_closure:
         const Text.ParserCombinators.ReadPrec.look_info;
 },
 Text.ParserCombinators.ReadPrec.look_entry() //  [R2, R3]
         { info_tbl: [(c3uyL,
                       label: Text.ParserCombinators.ReadPrec.look_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uyL: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.look1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.532417491 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_info;
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_entry() //  []
         { info_tbl: [(c3uyW,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uyW: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.535860521 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.pfail_closure" {
     Text.ParserCombinators.ReadPrec.pfail_closure:
         const Text.ParserCombinators.ReadPrec.pfail_info;
 },
 Text.ParserCombinators.ReadPrec.pfail_entry() //  [R2, R3]
         { info_tbl: [(c3uz9,
                       label: Text.ParserCombinators.ReadPrec.pfail_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uz9: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_entry(R3,
                                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.539507075 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.step1_closure" {
     Text.ParserCombinators.ReadPrec.step1_closure:
         const Text.ParserCombinators.ReadPrec.step1_info;
 },
 sat_s3uof_entry() //  [R1]
         { info_tbl: [(c3uzr,
                       label: sat_s3uof_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uzr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3uzy; else goto c3uzz;
       c3uzy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3uzz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3uzo_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3uzD; else goto c3uzp;
       u3uzD: // global
           call _c3uzo(R1) args: 0, res: 0, upd: 0;
       c3uzp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3uzo() //  [R1]
         { info_tbl: [(c3uzo,
                       label: block_c3uzo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uzo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3uzC; else goto c3uzB;
       c3uzC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3uzB: // global
           _s3uoe::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3uoe::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadPrec.step1_entry() //  [R2, R3]
         { info_tbl: [(c3uzE,
                       label: Text.ParserCombinators.ReadPrec.step1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uzE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3uzI; else goto c3uzH;
       c3uzI: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.step1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uzH: // global
           I64[Hp - 16] = sat_s3uof_info;
           P64[Hp] = R3;
           _s3uoa::P64 = R2;
           R2 = Hp - 16;
           R1 = _s3uoa::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.547266286 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.step_closure" {
     Text.ParserCombinators.ReadPrec.step_closure:
         const Text.ParserCombinators.ReadPrec.step_info;
 },
 Text.ParserCombinators.ReadPrec.step_entry() //  [R2, R3]
         { info_tbl: [(c3uA5,
                       label: Text.ParserCombinators.ReadPrec.step_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uA5: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.step1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.550918607 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.prec1_closure" {
     Text.ParserCombinators.ReadPrec.prec1_closure:
         const Text.ParserCombinators.ReadPrec.prec1_info;
 },
 Text.ParserCombinators.ReadPrec.prec1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3uAj,
                       label: Text.ParserCombinators.ReadPrec.prec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uAj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3uAn; else goto c3uAo;
       c3uAn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.prec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uAo: // global
           I64[Sp - 24] = block_c3uAg_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3uAB; else goto c3uAh;
       u3uAB: // global
           call _c3uAg(R1) args: 0, res: 0, upd: 0;
       c3uAh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3uAg() //  [R1]
         { info_tbl: [(c3uAg,
                       label: block_c3uAg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uAg: // global
           I64[Sp] = block_c3uAm_info;
           _s3uok::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3uok::I64;
           if (R1 & 7 != 0) goto u3uAA; else goto c3uAq;
       u3uAA: // global
           call _c3uAm(R1) args: 0, res: 0, upd: 0;
       c3uAq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3uAm() //  [R1]
         { info_tbl: [(c3uAm,
                       label: block_c3uAm_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uAm: // global
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto c3uAy; else goto c3uAz;
       c3uAy: // global
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3uAz: // global
           R2 = R1;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.558667662 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.prec_closure" {
     Text.ParserCombinators.ReadPrec.prec_closure:
         const Text.ParserCombinators.ReadPrec.prec_info;
 },
 Text.ParserCombinators.ReadPrec.prec_entry() //  [R2, R3, R4]
         { info_tbl: [(c3uAY,
                       label: Text.ParserCombinators.ReadPrec.prec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uAY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.prec1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.562594496 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_info;
         const 0;
 },
 sat_s3uow_entry() //  [R1, R2]
         { info_tbl: [(c3uBj,
                       label: sat_s3uow_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uBj: // global
           _s3uot::P64 = R2;
           _s3uow::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3uBk; else goto c3uBl;
       c3uBl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3uBn; else goto c3uBm;
       c3uBn: // global
           HpAlloc = 32;
           goto c3uBk;
       c3uBk: // global
           R2 = _s3uot::P64;
           R1 = _s3uow::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uBm: // global
           _s3uor::P64 = P64[_s3uow::P64 + 7];
           _s3uos::P64 = P64[_s3uow::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3uos::P64;
           P64[Hp] = _s3uot::P64;
           I64[Sp - 16] = block_c3uBh_info;
           R2 = _s3uot::P64;
           R1 = _s3uor::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3uBh() //  [R1]
         { info_tbl: [(c3uBh,
                       label: block_c3uBh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uBh: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_entry() //  [R2,
                                                                     R3, R4]
         { info_tbl: [(c3uBr,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uBr: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3uBv; else goto c3uBu;
       c3uBv: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uBu: // global
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3uow_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.573180601 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.+++_closure" {
     Text.ParserCombinators.ReadPrec.+++_closure:
         const Text.ParserCombinators.ReadPrec.+++_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.+++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3uBV,
                       label: Text.ParserCombinators.ReadPrec.+++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uBV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_entry(R4,
                                                                             R3,
                                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.577184247 UTC

[section ""data" . lvl_r3tAS_closure" {
     lvl_r3tAS_closure:
         const lvl_r3tAS_info;
 },
 lvl_r3tAS_entry() //  []
         { info_tbl: [(c3uC6,
                       label: lvl_r3tAS_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uC6: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.581401423 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.choice2_closure" {
     Text.ParserCombinators.ReadPrec.choice2_closure:
         const Text.ParserCombinators.ReadPrec.choice2_info;
         const 0;
 },
 ds2_s3uoE_entry() //  [R1]
         { info_tbl: [(c3uCu,
                       label: ds2_s3uoE_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uCu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3uCv; else goto c3uCw;
       c3uCv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3uCw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadPrec.choice2_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3uoI_entry() //  [R1, R2]
         { info_tbl: [(c3uCF,
                       label: sat_s3uoI_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uCF: // global
           _s3uoF::P64 = R2;
           _s3uoI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3uCG; else goto c3uCH;
       c3uCH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3uCJ; else goto c3uCI;
       c3uCJ: // global
           HpAlloc = 32;
           goto c3uCG;
       c3uCG: // global
           R2 = _s3uoF::P64;
           R1 = _s3uoI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uCI: // global
           _s3uoD::P64 = P64[_s3uoI::P64 + 7];
           _s3uoE::P64 = P64[_s3uoI::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3uoE::P64;
           P64[Hp] = _s3uoF::P64;
           I64[Sp - 16] = block_c3uCD_info;
           R2 = _s3uoF::P64;
           R1 = _s3uoD::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3uCD() //  [R1]
         { info_tbl: [(c3uCD,
                       label: block_c3uCD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uCD: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.choice2_entry() //  [R2, R3]
         { info_tbl: [(c3uCR,
                       label: Text.ParserCombinators.ReadPrec.choice2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uCR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3uCS; else goto c3uCT;
       c3uCS: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.choice2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uCT: // global
           I64[Sp - 16] = block_c3uCj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3uCZ; else goto c3uCk;
       u3uCZ: // global
           call _c3uCj(R1) args: 0, res: 0, upd: 0;
       c3uCk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3uCj() //  [R1]
         { info_tbl: [(c3uCj,
                       label: block_c3uCj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uCj: // global
           if (R1 & 7 == 1) goto c3uCO; else goto c3uCP;
       c3uCO: // global
           R1 = lvl_r3tAS_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3uCP: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3uCY; else goto c3uCX;
       c3uCY: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3uCX: // global
           _s3uoB::P64 = P64[R1 + 6];
           _s3uoC::P64 = P64[R1 + 14];
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = _s3uoB::P64;
           _s3uoz::P64 = P64[Sp + 8];
           P64[Hp - 56] = _s3uoz::P64;
           I64[Hp - 48] = ds2_s3uoE_info;
           P64[Hp - 32] = _s3uoz::P64;
           P64[Hp - 24] = _s3uoC::P64;
           I64[Hp - 16] = sat_s3uoI_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.594452453 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.choice1_closure" {
     Text.ParserCombinators.ReadPrec.choice1_closure:
         const Text.ParserCombinators.ReadPrec.choice1_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.choice1_entry() //  [R2, R3]
         { info_tbl: [(c3uDC,
                       label: Text.ParserCombinators.ReadPrec.choice1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uDC: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.choice2_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.598148308 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.choice_closure" {
     Text.ParserCombinators.ReadPrec.choice_closure:
         const Text.ParserCombinators.ReadPrec.choice_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.choice_entry() //  [R2, R3]
         { info_tbl: [(c3uDN,
                       label: Text.ParserCombinators.ReadPrec.choice_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uDN: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.choice1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.602994034 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_info;
         const 0;
 },
 sat_s3uoX_entry() //  [R1]
         { info_tbl: [(c3uEj,
                       label: sat_s3uoX_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uEj: // global
           _s3uoX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3uEk; else goto c3uEl;
       c3uEl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3uEn; else goto c3uEm;
       c3uEn: // global
           HpAlloc = 24;
           goto c3uEk;
       c3uEk: // global
           R1 = _s3uoX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3uEm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3uoX::P64;
           _s3uoQ::P64 = P64[_s3uoX::P64 + 16];
           _s3uoR::P64 = P64[_s3uoX::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3uoR::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3uoQ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3uoU_entry() //  [R1, R2]
         { info_tbl: [(c3uEu,
                       label: sat_s3uoU_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uEu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3uEy; else goto c3uEx;
       c3uEy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uEx: // global
           _s3uoQ::P64 = P64[R1 + 7];
           _s3uoR::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3uoR::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3uoQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3uoY_entry() //  [R1, R2]
         { info_tbl: [(c3uEB,
                       label: sat_s3uoY_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uEB: // global
           _s3uoR::P64 = R2;
           _s3uoY::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3uEC; else goto c3uED;
       c3uED: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3uEF; else goto c3uEE;
       c3uEF: // global
           HpAlloc = 56;
           goto c3uEC;
       c3uEC: // global
           R2 = _s3uoR::P64;
           R1 = _s3uoY::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uEE: // global
           _s3uoN::P64 = P64[_s3uoY::P64 + 7];
           _s3uoO::P64 = P64[_s3uoY::P64 + 15];
           _s3uoQ::P64 = P64[_s3uoY::P64 + 23];
           I64[Hp - 48] = sat_s3uoX_info;
           P64[Hp - 32] = _s3uoQ::P64;
           P64[Hp - 24] = _s3uoR::P64;
           I64[Hp - 16] = sat_s3uoU_info;
           P64[Hp - 8] = _s3uoQ::P64;
           P64[Hp] = _s3uoR::P64;
           I64[Sp - 16] = block_c3uEz_info;
           R2 = _s3uoO::P64;
           R1 = _s3uoN::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 32;
           call some_v_s3uoN_entry(R2, R1) args: 24, res: 8, upd: 8;
     }
 },
 _c3uEz() //  [R1]
         { info_tbl: [(c3uEz,
                       label: block_c3uEz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uEz: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3uoZ_entry() //  [R1, R2]
         { info_tbl: [(c3uEJ,
                       label: sat_s3uoZ_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uEJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3uEN; else goto c3uEM;
       c3uEN: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uEM: // global
           _s3uoN::P64 = P64[R1 + 7];
           _s3uoO::P64 = P64[R1 + 15];
           _s3uoP::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3uoY_info;
           P64[Hp - 16] = _s3uoN::P64;
           P64[Hp - 8] = _s3uoO::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3uoP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 some_v_s3uoN_entry() //  [R1, R2]
         { info_tbl: [(c3uEO,
                       label: some_v_s3uoN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uEO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3uES; else goto c3uER;
       c3uES: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uER: // global
           _s3uoL::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3uoL::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3uoZ_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_entry() //  [R2,
                                                                     R3]
         { info_tbl: [(c3uET,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uET: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3uEX; else goto c3uEW;
       c3uEX: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uEW: // global
           I64[Hp - 8] = some_v_s3uoN_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call some_v_s3uoN_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.621955022 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure:
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_info;
         const 0;
 },
 sat_s3upc_entry() //  [R1]
         { info_tbl: [(c3uFW,
                       label: sat_s3upc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uFW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3uFX; else goto c3uFY;
       c3uFX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3uFY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3up9_entry() //  [R1, R2]
         { info_tbl: [(c3uGa,
                       label: sat_s3up9_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uGa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3uGe; else goto c3uGd;
       c3uGe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uGd: // global
           _s3up5::P64 = P64[R1 + 7];
           _s3up6::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3up6::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3up5::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3upa_entry() //  [R1, R2]
         { info_tbl: [(c3uGf,
                       label: sat_s3upa_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uGf: // global
           _s3up6::P64 = R2;
           _s3upa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3uGg; else goto c3uGh;
       c3uGh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3uGj; else goto c3uGi;
       c3uGj: // global
           HpAlloc = 24;
           goto c3uGg;
       c3uGg: // global
           R2 = _s3up6::P64;
           R1 = _s3upa::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uGi: // global
           _s3up2::P64 = P64[_s3upa::P64 + 7];
           _s3up3::P64 = P64[_s3upa::P64 + 15];
           _s3up5::P64 = P64[_s3upa::P64 + 23];
           I64[Hp - 16] = sat_s3up9_info;
           P64[Hp - 8] = _s3up5::P64;
           P64[Hp] = _s3up6::P64;
           R2 = _s3up3::P64;
           R1 = _s3up2::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call many_v_s3up2_entry(R2, R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s3upd_entry() //  [R1, R2]
         { info_tbl: [(c3uGm,
                       label: sat_s3upd_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uGm: // global
           _s3up5::P64 = R2;
           _s3upd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3uGn; else goto c3uGo;
       c3uGo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3uGq; else goto c3uGp;
       c3uGq: // global
           HpAlloc = 56;
           goto c3uGn;
       c3uGn: // global
           R2 = _s3up5::P64;
           R1 = _s3upd::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uGp: // global
           _s3up2::P64 = P64[_s3upd::P64 + 7];
           _s3up3::P64 = P64[_s3upd::P64 + 15];
           _s3up4::P64 = P64[_s3upd::P64 + 23];
           I64[Hp - 48] = sat_s3upc_info;
           P64[Hp - 32] = _s3up5::P64;
           I64[Hp - 24] = sat_s3upa_info;
           P64[Hp - 16] = _s3up2::P64;
           P64[Hp - 8] = _s3up3::P64;
           P64[Hp] = _s3up5::P64;
           I64[Sp - 16] = block_c3uGk_info;
           R2 = Hp - 23;
           R1 = _s3up4::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3uGk() //  [R1]
         { info_tbl: [(c3uGk,
                       label: block_c3uGk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uGk: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 many_v_s3up2_entry() //  [R1, R2]
         { info_tbl: [(c3uGu,
                       label: many_v_s3up2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uGu: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3uGy; else goto c3uGx;
       c3uGy: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uGx: // global
           _s3up0::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3up0::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3upd_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_entry() //  [R2,
                                                                     R3]
         { info_tbl: [(c3uGz,
                       label: Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uGz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3uGD; else goto c3uGC;
       c3uGD: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uGC: // global
           I64[Hp - 8] = many_v_s3up2_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call many_v_s3up2_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.63885808 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure+3;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure+2;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.640856322 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$fMonadPlusReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$fMonadPlusReadPrec_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fMonadReadPrec_closure+1;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.643529176 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.<++1_closure" {
     Text.ParserCombinators.ReadPrec.<++1_closure:
         const Text.ParserCombinators.ReadPrec.<++1_info;
         const 0;
 },
 sat_s3upm_entry() //  [R1, R2]
         { info_tbl: [(c3uHy,
                       label: sat_s3upm_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uHy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3uHz; else goto c3uHA;
       c3uHz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uHA: // global
           I64[Sp - 8] = block_c3uHv_info;
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3uHv() //  [R1]
         { info_tbl: [(c3uHv,
                       label: block_c3uHv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uHv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3uHD; else goto c3uHC;
       c3uHD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3uHC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.<++1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3uHE,
                       label: Text.ParserCombinators.ReadPrec.<++1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uHE: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3uHI; else goto c3uHH;
       c3uHI: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.<++1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uHH: // global
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_s3upm_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.652430303 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.<++_closure" {
     Text.ParserCombinators.ReadPrec.<++_closure:
         const Text.ParserCombinators.ReadPrec.<++_info;
         const 0;
 },
 Text.ParserCombinators.ReadPrec.<++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3uI7,
                       label: Text.ParserCombinators.ReadPrec.<++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uI7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.<++1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.656270759 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readPrec_to_P1_closure" {
     Text.ParserCombinators.ReadPrec.readPrec_to_P1_closure:
         const Text.ParserCombinators.ReadPrec.readPrec_to_P1_info;
 },
 Text.ParserCombinators.ReadPrec.readPrec_to_P1_entry() //  [R2]
         { info_tbl: [(c3uIi,
                       label: Text.ParserCombinators.ReadPrec.readPrec_to_P1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uIi: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.65989876 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readPrec_to_P_closure" {
     Text.ParserCombinators.ReadPrec.readPrec_to_P_closure:
         const Text.ParserCombinators.ReadPrec.readPrec_to_P_info;
 },
 Text.ParserCombinators.ReadPrec.readPrec_to_P_entry() //  [R2]
         { info_tbl: [(c3uIt,
                       label: Text.ParserCombinators.ReadPrec.readPrec_to_P_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uIt: // global
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.readPrec_to_P1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.663752597 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readP_to_Prec1_closure" {
     Text.ParserCombinators.ReadPrec.readP_to_Prec1_closure:
         const Text.ParserCombinators.ReadPrec.readP_to_Prec1_info;
 },
 Text.ParserCombinators.ReadPrec.readP_to_Prec1_entry() //  [R2]
         { info_tbl: [(c3uIE,
                       label: Text.ParserCombinators.ReadPrec.readP_to_Prec1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uIE: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.667513282 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readP_to_Prec_closure" {
     Text.ParserCombinators.ReadPrec.readP_to_Prec_closure:
         const Text.ParserCombinators.ReadPrec.readP_to_Prec_info;
 },
 Text.ParserCombinators.ReadPrec.readP_to_Prec_entry() //  [R2]
         { info_tbl: [(c3uIP,
                       label: Text.ParserCombinators.ReadPrec.readP_to_Prec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uIP: // global
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.readP_to_Prec1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.671346964 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readPrec_to_S_closure" {
     Text.ParserCombinators.ReadPrec.readPrec_to_S_closure:
         const Text.ParserCombinators.ReadPrec.readPrec_to_S_info;
 },
 sat_s3upr_entry() //  [R1]
         { info_tbl: [(c3uJ4,
                       label: sat_s3upr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uJ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3uJ5; else goto c3uJ6;
       c3uJ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3uJ6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadPrec.readPrec_to_S_entry() //  [R2, R3]
         { info_tbl: [(c3uJ7,
                       label: Text.ParserCombinators.ReadPrec.readPrec_to_S_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uJ7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3uJb; else goto c3uJa;
       c3uJb: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.readPrec_to_S_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uJa: // global
           I64[Hp - 24] = sat_s3upr_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.678086332 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readS_to_Prec1_closure" {
     Text.ParserCombinators.ReadPrec.readS_to_Prec1_closure:
         const Text.ParserCombinators.ReadPrec.readS_to_Prec1_info;
 },
 sat_s3upy_entry() //  [R1, R2]
         { info_tbl: [(c3uJB,
                       label: sat_s3upy_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uJB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3uJC; else goto c3uJD;
       c3uJC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3uJD: // global
           I64[Sp - 8] = block_c3uJy_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3uJy() //  [R1]
         { info_tbl: [(c3uJy,
                       label: block_c3uJy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uJy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3uJG; else goto c3uJF;
       c3uJG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3uJF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry() //  [R2, R3]
         { info_tbl: [(c3uJH,
                       label: Text.ParserCombinators.ReadPrec.readS_to_Prec1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uJH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3uJL; else goto c3uJK;
       c3uJL: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadPrec.readS_to_Prec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3uJK: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s3upy_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.686294736 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.readS_to_Prec_closure" {
     Text.ParserCombinators.ReadPrec.readS_to_Prec_closure:
         const Text.ParserCombinators.ReadPrec.readS_to_Prec_info;
 },
 Text.ParserCombinators.ReadPrec.readS_to_Prec_entry() //  [R2, R3]
         { info_tbl: [(c3uK8,
                       label: Text.ParserCombinators.ReadPrec.readS_to_Prec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3uK8: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.689710263 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$trModule4_bytes" {
     Text.ParserCombinators.ReadPrec.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.691522236 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$trModule3_closure" {
     Text.ParserCombinators.ReadPrec.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.693337203 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$trModule2_bytes" {
     Text.ParserCombinators.ReadPrec.$trModule2_bytes:
         I8[] [84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,114,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.695000997 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$trModule1_closure" {
     Text.ParserCombinators.ReadPrec.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.696770859 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$trModule_closure" {
     Text.ParserCombinators.ReadPrec.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule3_closure+1;
         const Text.ParserCombinators.ReadPrec.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.698730911 UTC

[section ""data" . $krep_r3tAT_closure" {
     $krep_r3tAT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.700644928 UTC

[section ""data" . $krep1_r3tAU_closure" {
     $krep1_r3tAU_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.702499655 UTC

[section ""data" . $krep2_r3tAV_closure" {
     $krep2_r3tAV_closure:
         const :_con_info;
         const $krep1_r3tAU_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.704381188 UTC

[section ""data" . $krep3_r3tAW_closure" {
     $krep3_r3tAW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadP.$tcReadP_closure;
         const $krep2_r3tAV_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.706695592 UTC

[section ""data" . $krep4_r3tAX_closure" {
     $krep4_r3tAX_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3tAT_closure+1;
         const $krep3_r3tAW_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.708587742 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$tcReadPrec2_bytes" {
     Text.ParserCombinators.ReadPrec.$tcReadPrec2_bytes:
         I8[] [82,101,97,100,80,114,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.710443897 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tcReadPrec1_closure" {
     Text.ParserCombinators.ReadPrec.$tcReadPrec1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.712308479 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tcReadPrec_closure" {
     Text.ParserCombinators.ReadPrec.$tcReadPrec_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule_closure+1;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17656447446138014199;
         const 97878223355588575;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.71424279 UTC

[section ""data" . $krep5_r3tAY_closure" {
     $krep5_r3tAY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec_closure+1;
         const $krep2_r3tAV_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.71610804 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tc'P1_closure" {
     Text.ParserCombinators.ReadPrec.$tc'P1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3tAX_closure+4;
         const $krep5_r3tAY_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.718096394 UTC

[section ""cstring" . Text.ParserCombinators.ReadPrec.$tc'P3_bytes" {
     Text.ParserCombinators.ReadPrec.$tc'P3_bytes:
         I8[] [39,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.719888917 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tc'P2_closure" {
     Text.ParserCombinators.ReadPrec.$tc'P2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadPrec.$tc'P3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.722488205 UTC

[section ""data" . Text.ParserCombinators.ReadPrec.$tc'P_closure" {
     Text.ParserCombinators.ReadPrec.$tc'P_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadPrec.$trModule_closure+1;
         const Text.ParserCombinators.ReadPrec.$tc'P2_closure+1;
         const Text.ParserCombinators.ReadPrec.$tc'P1_closure+4;
         const 14970691021354513070;
         const 16104245447600145137;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:08.724464293 UTC

[section ""relreadonly" . S3uBw_srt" {
     S3uBw_srt:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3_closure;
         const Text.ParserCombinators.ReadPrec.choice2_closure;
         const Text.ParserCombinators.ReadPrec.choice1_closure;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2_closure;
         const Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const Text.ParserCombinators.ReadPrec.<++1_closure;
 }]

