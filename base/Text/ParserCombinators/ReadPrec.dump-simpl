
==================== Tidy Core ====================
2018-03-16 15:58:07.080448381 UTC

Result size of Tidy Core
  = {terms: 523, types: 845, coercions: 538, joins: 0/23}

-- RHS size: {terms: 14, types: 21, coercions: 7, joins: 0/1}
Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2
  :: forall a b. (a -> b) -> ReadPrec a -> Prec -> ReadP b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(U)><L,1*C1(C(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3tu3)
                 (@ b_a3tu4)
                 (h_a3tm8 [Occ=OnceL] :: a_a3tu3 -> b_a3tu4)
                 (ds_d3tvP :: ReadPrec a_a3tu3)
                 (n_a3tma [Occ=Once] :: Prec) ->
                 let {
                   ds1_s3txn [Occ=OnceL] :: ReadP a_a3tu3
                   [LclId]
                   ds1_s3txn
                     = (ds_d3tvP
                        `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tu3>_R
                                :: (ReadPrec a_a3tu3 :: *) ~R# (Prec -> ReadP a_a3tu3 :: *)))
                         n_a3tma } in
                 (\ (@ b1_a3nKT)
                    (k_a3ngz [Occ=Once]
                       :: b_a3tu4 -> Text.ParserCombinators.ReadP.P b1_a3nKT) ->
                    (ds1_s3txn
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tu3>_R
                             :: (ReadP a_a3tu3 :: *)
                                ~R# (forall b.
                                     (a_a3tu3 -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ b1_a3nKT
                      (. @ b_a3tu4
                         @ (Text.ParserCombinators.ReadP.P b1_a3nKT)
                         @ a_a3tu3
                         k_a3ngz
                         h_a3tm8))
                 `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3tu4>_R)
                         :: (forall b.
                             (b_a3tu4 -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                            ~R# (ReadP b_a3tu4 :: *))}]
Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2
  = \ (@ a_a3tu3)
      (@ b_a3tu4)
      (h_a3tm8 :: a_a3tu3 -> b_a3tu4)
      (ds_d3tvP :: ReadPrec a_a3tu3)
      (n_a3tma :: Prec) ->
      let {
        ds1_s3txn [Dmd=<L,C(U)>] :: ReadP a_a3tu3
        [LclId]
        ds1_s3txn
          = (ds_d3tvP
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tu3>_R
                     :: (ReadPrec a_a3tu3 :: *) ~R# (Prec -> ReadP a_a3tu3 :: *)))
              n_a3tma } in
      (\ (@ b1_a3nKT)
         (k_a3ngz :: b_a3tu4 -> Text.ParserCombinators.ReadP.P b1_a3nKT) ->
         (ds1_s3txn
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tu3>_R
                  :: (ReadP a_a3tu3 :: *)
                     ~R# (forall b.
                          (a_a3tu3 -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ b1_a3nKT
           (. @ b_a3tu4
              @ (Text.ParserCombinators.ReadP.P b1_a3nKT)
              @ a_a3tu3
              k_a3ngz
              h_a3tm8))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3tu4>_R)
              :: (forall b.
                  (b_a3tu4 -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (ReadP b_a3tu4 :: *))

-- RHS size: {terms: 16, types: 19, coercions: 7, joins: 0/2}
Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1
  :: forall b a. a -> ReadPrec b -> Prec -> ReadP a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,1*C1(C(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ b_a3tug)
                 (@ a_a3tuf)
                 (x_X1xZf [Occ=OnceL] :: a_a3tuf)
                 (eta_B2 :: ReadPrec b_a3tug)
                 (eta1_B1 [Occ=Once] :: Prec) ->
                 let {
                   ds_s3txl [Occ=OnceL] :: ReadP b_a3tug
                   [LclId]
                   ds_s3txl
                     = (eta_B2
                        `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b_a3tug>_R
                                :: (ReadPrec b_a3tug :: *) ~R# (Prec -> ReadP b_a3tug :: *)))
                         eta1_B1 } in
                 (\ (@ b1_a3nKT)
                    (k_a3ngz [Occ=Once!]
                       :: a_a3tuf -> Text.ParserCombinators.ReadP.P b1_a3nKT) ->
                    let {
                      lvl1_s3txp [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nKT
                      [LclId]
                      lvl1_s3txp = k_a3ngz x_X1xZf } in
                    (ds_s3txl
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3tug>_R
                             :: (ReadP b_a3tug :: *)
                                ~R# (forall b.
                                     (b_a3tug -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ b1_a3nKT (\ _ [Occ=Dead] -> lvl1_s3txp))
                 `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tuf>_R)
                         :: (forall b.
                             (a_a3tuf -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                            ~R# (ReadP a_a3tuf :: *))}]
Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1
  = \ (@ b_a3tug)
      (@ a_a3tuf)
      (x_X1xZf :: a_a3tuf)
      (eta_B2 :: ReadPrec b_a3tug)
      (eta1_B1 :: Prec) ->
      let {
        ds_s3txl [Dmd=<L,C(U)>] :: ReadP b_a3tug
        [LclId]
        ds_s3txl
          = (eta_B2
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b_a3tug>_R
                     :: (ReadPrec b_a3tug :: *) ~R# (Prec -> ReadP b_a3tug :: *)))
              eta1_B1 } in
      (\ (@ b1_a3nKT)
         (k_a3ngz :: a_a3tuf -> Text.ParserCombinators.ReadP.P b1_a3nKT) ->
         let {
           lvl1_s3txp :: Text.ParserCombinators.ReadP.P b1_a3nKT
           [LclId]
           lvl1_s3txp = k_a3ngz x_X1xZf } in
         (ds_s3txl
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3tug>_R
                  :: (ReadP b_a3tug :: *)
                     ~R# (forall b.
                          (b_a3tug -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ b1_a3nKT (\ _ [Occ=Dead] -> lvl1_s3txp))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tuf>_R)
              :: (forall b.
                  (a_a3tuf -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (ReadP a_a3tuf :: *))

-- RHS size: {terms: 5, types: 7, coercions: 29, joins: 0/0}
Text.ParserCombinators.ReadPrec.$fFunctorReadPrec [InlPrag=NOUSERINLINE CONLIKE]
  :: Functor ReadPrec
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Functor TYPE: ReadPrec
                          Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a -> b>_R
                                  ->_R <ReadPrec a>_R
                                  ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b>_R)
                                  :: (forall a b. (a -> b) -> ReadPrec a -> Prec -> ReadP b :: *)
                                     ~R# (forall a b. (a -> b) -> ReadPrec a -> ReadPrec b :: *))
                          (\ (@ a_a3tuf) (@ b_a3tug) ->
                             Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1
                               @ b_a3tug @ a_a3tuf)
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a>_R
                                  ->_R <ReadPrec b>_R
                                  ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                                  :: (forall a b. a -> ReadPrec b -> Prec -> ReadP a :: *)
                                     ~R# (forall a b. a -> ReadPrec b -> ReadPrec a :: *))]
Text.ParserCombinators.ReadPrec.$fFunctorReadPrec
  = GHC.Base.C:Functor
      @ ReadPrec
      (Text.ParserCombinators.ReadPrec.$fFunctorReadPrec2
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <a -> b>_R
               ->_R <ReadPrec a>_R
               ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b>_R)
               :: (forall a b. (a -> b) -> ReadPrec a -> Prec -> ReadP b :: *)
                  ~R# (forall a b. (a -> b) -> ReadPrec a -> ReadPrec b :: *)))
      ((\ (@ a_a3tuf) (@ b_a3tug) ->
          Text.ParserCombinators.ReadPrec.$fFunctorReadPrec1
            @ b_a3tug @ a_a3tuf)
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <a>_R
               ->_R <ReadPrec b>_R
               ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
               :: (forall a b. a -> ReadPrec b -> Prec -> ReadP a :: *)
                  ~R# (forall a b. a -> ReadPrec b -> ReadPrec a :: *)))

-- RHS size: {terms: 7, types: 9, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5
  :: forall a.
     a
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a3tt9)
                 (x_a3tm7 [Occ=Once] :: a_a3tt9)
                 _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: a_a3tt9 -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw x_a3tm7}]
Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5
  = \ (@ a_a3tt9)
      (x_a3tm7 :: a_a3tt9)
      _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw :: a_a3tt9 -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw x_a3tm7

-- RHS size: {terms: 6, types: 10, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1
  :: forall a.
     String
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a3tsT)
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 (@ b_a3nJE)
                 _ [Occ=Dead] ->
                 Text.ParserCombinators.ReadP.Fail @ b_a3nJE}]
Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1
  = \ (@ a_a3tsT)
      _ [Occ=Dead]
      _ [Occ=Dead]
      (@ b_a3nJE)
      _ [Occ=Dead] ->
      Text.ParserCombinators.ReadP.Fail @ b_a3nJE

-- RHS size: {terms: 16, types: 20, coercions: 11, joins: 0/1}
Text.ParserCombinators.ReadPrec.$fMonadReadPrec1
  :: forall a b. ReadPrec a -> (a -> ReadPrec b) -> Prec -> ReadP b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C(U))><L,C(C1(C1(U)))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 60 0] 110 60}]
Text.ParserCombinators.ReadPrec.$fMonadReadPrec1
  = \ (@ a_a3tsh)
      (@ b_a3tsi)
      (ds_d3tvu :: ReadPrec a_a3tsh)
      (k_a3tm3 :: a_a3tsh -> ReadPrec b_a3tsi)
      (n_a3tm4 :: Prec) ->
      let {
        ds1_s3txj [Dmd=<L,C(U)>] :: ReadP a_a3tsh
        [LclId]
        ds1_s3txj
          = (ds_d3tvu
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tsh>_R
                     :: (ReadPrec a_a3tsh :: *) ~R# (Prec -> ReadP a_a3tsh :: *)))
              n_a3tm4 } in
      (\ (@ b1_a3nIU)
         (k1_a3ngs :: b_a3tsi -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
         (ds1_s3txj
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tsh>_R
                  :: (ReadP a_a3tsh :: *)
                     ~R# (forall b.
                          (a_a3tsh -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ b1_a3nIU
           (\ (a1_a3ngt :: a_a3tsh) ->
              ((((k_a3tm3 a1_a3ngt)
                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b_a3tsi>_R
                         :: (ReadPrec b_a3tsi :: *) ~R# (Prec -> ReadP b_a3tsi :: *)))
                  n_a3tm4)
               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3tsi>_R
                       :: (ReadP b_a3tsi :: *)
                          ~R# (forall b.
                               (b_a3tsi -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)))
                @ b1_a3nIU k1_a3ngs))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3tsi>_R)
              :: (forall b.
                  (b_a3tsi -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (ReadP b_a3tsi :: *))

-- RHS size: {terms: 21, types: 25, coercions: 11, joins: 0/1}
Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3
  :: forall c b a.
     (a -> b -> c) -> ReadPrec a -> ReadPrec b -> Prec -> ReadP c
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,1*C1(C(U))><L,C(C1(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [60 60 60 0] 160 60}]
Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3
  = \ (@ c_a3ttw)
      (@ b_a3ttv)
      (@ a_a3ttu)
      (f_X1JlC :: a_a3ttu -> b_a3ttv -> c_a3ttw)
      (m1_X1JlE :: ReadPrec a_a3ttu)
      (m2_X1JlG :: ReadPrec b_a3ttv)
      (n_a3tm4 :: Prec) ->
      let {
        ds_s3txh [Dmd=<L,C(U)>] :: ReadP a_a3ttu
        [LclId]
        ds_s3txh
          = (m1_X1JlE
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3ttu>_R
                     :: (ReadPrec a_a3ttu :: *) ~R# (Prec -> ReadP a_a3ttu :: *)))
              n_a3tm4 } in
      (\ (@ b1_a3nIU)
         (k_a3ngs :: c_a3ttw -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
         (ds_s3txh
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3ttu>_R
                  :: (ReadP a_a3ttu :: *)
                     ~R# (forall b.
                          (a_a3ttu -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ b1_a3nIU
           (\ (a1_a3ngt :: a_a3ttu) ->
              (((m2_X1JlG
                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b_a3ttv>_R
                         :: (ReadPrec b_a3ttv :: *) ~R# (Prec -> ReadP b_a3ttv :: *)))
                  n_a3tm4)
               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3ttv>_R
                       :: (ReadP b_a3ttv :: *)
                          ~R# (forall b.
                               (b_a3ttv -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)))
                @ b1_a3nIU
                (\ (a2_X3ni8 :: b_a3ttv) -> k_a3ngs (f_X1JlC a1_a3ngt a2_X3ni8))))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <c_a3ttw>_R)
              :: (forall b.
                  (c_a3ttw -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (ReadP c_a3ttw :: *))

-- RHS size: {terms: 19, types: 22, coercions: 11, joins: 0/2}
Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1
  :: forall a b. ReadPrec a -> ReadPrec b -> Prec -> ReadP a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C(U))><L,C(C1(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 60 0] 140 60}]
Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1
  = \ (@ a_a3ttR)
      (@ b_a3ttS)
      (m1_X1Jn6 :: ReadPrec a_a3ttR)
      (m2_X1Jn9 :: ReadPrec b_a3ttS)
      (n_X3tny :: Prec) ->
      let {
        ds_s3txf [Dmd=<L,C(U)>] :: ReadP a_a3ttR
        [LclId]
        ds_s3txf
          = (m1_X1Jn6
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3ttR>_R
                     :: (ReadPrec a_a3ttR :: *) ~R# (Prec -> ReadP a_a3ttR :: *)))
              n_X3tny } in
      (\ (@ b1_a3nIU)
         (k_a3ngs :: a_a3ttR -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
         (ds_s3txf
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3ttR>_R
                  :: (ReadP a_a3ttR :: *)
                     ~R# (forall b.
                          (a_a3ttR -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ b1_a3nIU
           (\ (a1_a3ngt :: a_a3ttR) ->
              let {
                lvl1_s3txr :: Text.ParserCombinators.ReadP.P b1_a3nIU
                [LclId]
                lvl1_s3txr = k_a3ngs a1_a3ngt } in
              (((m2_X1Jn9
                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b_a3ttS>_R
                         :: (ReadPrec b_a3ttS :: *) ~R# (Prec -> ReadP b_a3ttS :: *)))
                  n_X3tny)
               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3ttS>_R
                       :: (ReadP b_a3ttS :: *)
                          ~R# (forall b.
                               (b_a3ttS -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)))
                @ b1_a3nIU (\ _ [Occ=Dead] -> lvl1_s3txr)))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3ttR>_R)
              :: (forall b.
                  (a_a3ttR -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (ReadP a_a3ttR :: *))

-- RHS size: {terms: 18, types: 23, coercions: 13, joins: 0/1}
Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4
  :: forall b a. ReadPrec (a -> b) -> ReadPrec a -> Prec -> ReadP b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C(U))><L,C(C1(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 60 0] 150 60}]
Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4
  = \ (@ b_a3ttk)
      (@ a_a3ttj)
      (m1_X1Jln :: ReadPrec (a_a3ttj -> b_a3ttk))
      (m2_X1Jlp :: ReadPrec a_a3ttj)
      (n_a3tm4 :: Prec) ->
      let {
        ds_s3txd [Dmd=<L,C(U)>] :: ReadP (a_a3ttj -> b_a3ttk)
        [LclId]
        ds_s3txd
          = (m1_X1Jln
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                         <a_a3ttj -> b_a3ttk>_R
                     :: (ReadPrec (a_a3ttj -> b_a3ttk) :: *)
                        ~R# (Prec -> ReadP (a_a3ttj -> b_a3ttk) :: *)))
              n_a3tm4 } in
      (\ (@ b1_a3nIU)
         (k_a3ngs :: b_a3ttk -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
         (ds_s3txd
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <a_a3ttj -> b_a3ttk>_R
                  :: (ReadP (a_a3ttj -> b_a3ttk) :: *)
                     ~R# (forall b.
                          ((a_a3ttj -> b_a3ttk) -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ b1_a3nIU
           (\ (a1_a3ngt :: a_a3ttj -> b_a3ttk) ->
              (((m2_X1Jlp
                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3ttj>_R
                         :: (ReadPrec a_a3ttj :: *) ~R# (Prec -> ReadP a_a3ttj :: *)))
                  n_a3tm4)
               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3ttj>_R
                       :: (ReadP a_a3ttj :: *)
                          ~R# (forall b.
                               (a_a3ttj -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)))
                @ b1_a3nIU
                (\ (a2_X3ni3 :: a_a3ttj) -> k_a3ngs (a1_a3ngt a2_X3ni3))))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3ttk>_R)
              :: (forall b.
                  (b_a3ttk -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (ReadP b_a3ttk :: *))

-- RHS size: {terms: 19, types: 22, coercions: 11, joins: 0/2}
Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2
  :: forall a b. ReadPrec a -> ReadPrec b -> Prec -> ReadP b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C(U))><L,C(C1(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 60 0] 140 60}]
Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2
  = \ (@ a_a3ttH)
      (@ b_a3ttI)
      (a1_i1xXL :: ReadPrec a_a3ttH)
      (a2_i1xXM :: ReadPrec b_a3ttI)
      (eta_B1 :: Prec) ->
      let {
        ds_s3txb [Dmd=<L,C(U)>] :: ReadP a_a3ttH
        [LclId]
        ds_s3txb
          = (a1_i1xXL
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3ttH>_R
                     :: (ReadPrec a_a3ttH :: *) ~R# (Prec -> ReadP a_a3ttH :: *)))
              eta_B1 } in
      (\ (@ b1_a3nIU)
         (k_a3ngs :: b_a3ttI -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
         let {
           lvl1_s3txs :: Text.ParserCombinators.ReadP.P b1_a3nIU
           [LclId]
           lvl1_s3txs
             = (((a2_i1xXM
                  `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b_a3ttI>_R
                          :: (ReadPrec b_a3ttI :: *) ~R# (Prec -> ReadP b_a3ttI :: *)))
                   eta_B1)
                `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3ttI>_R
                        :: (ReadP b_a3ttI :: *)
                           ~R# (forall b.
                                (b_a3ttI -> Text.ParserCombinators.ReadP.P b)
                                -> Text.ParserCombinators.ReadP.P b :: *)))
                 @ b1_a3nIU (\ (a4_X3ni3 :: b_a3ttI) -> k_a3ngs a4_X3ni3) } in
         (ds_s3txb
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3ttH>_R
                  :: (ReadP a_a3ttH :: *)
                     ~R# (forall b.
                          (a_a3ttH -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ b1_a3nIU (\ _ [Occ=Dead] -> lvl1_s3txs))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3ttI>_R)
              :: (forall b.
                  (b_a3ttI -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (ReadP b_a3ttI :: *))

-- RHS size: {terms: 17, types: 21, coercions: 11, joins: 0/2}
$c>>_r3tAR
  :: forall a b. ReadPrec a -> ReadPrec b -> Prec -> ReadP b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C(U))><L,C(C1(U))><L,U>,
 Unf=OtherCon []]
$c>>_r3tAR
  = \ (@ a_a3tsB)
      (@ b_a3tsC)
      (eta_B2 :: ReadPrec a_a3tsB)
      (eta1_B1 :: ReadPrec b_a3tsC)
      (n_a3tm4 :: Prec) ->
      let {
        ds_s3tx9 [Dmd=<L,C(U)>] :: ReadP a_a3tsB
        [LclId]
        ds_s3tx9
          = (eta_B2
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tsB>_R
                     :: (ReadPrec a_a3tsB :: *) ~R# (Prec -> ReadP a_a3tsB :: *)))
              n_a3tm4 } in
      (\ (@ b1_a3nIU)
         (k_a3ngs :: b_a3tsC -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
         let {
           lvl1_s3txt :: Text.ParserCombinators.ReadP.P b1_a3nIU
           [LclId]
           lvl1_s3txt
             = (((eta1_B1
                  `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b_a3tsC>_R
                          :: (ReadPrec b_a3tsC :: *) ~R# (Prec -> ReadP b_a3tsC :: *)))
                   n_a3tm4)
                `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3tsC>_R
                        :: (ReadP b_a3tsC :: *)
                           ~R# (forall b.
                                (b_a3tsC -> Text.ParserCombinators.ReadP.P b)
                                -> Text.ParserCombinators.ReadP.P b :: *)))
                 @ b1_a3nIU k_a3ngs } in
         (ds_s3tx9
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tsB>_R
                  :: (ReadP a_a3tsB :: *)
                     ~R# (forall b.
                          (a_a3tsB -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ b1_a3nIU (\ _ [Occ=Dead] -> lvl1_s3txt))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3tsC>_R)
              :: (forall b.
                  (b_a3tsC -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (ReadP b_a3tsC :: *))

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b. ReadPrec a -> ReadPrec b -> ReadPrec b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C(U))><L,C(C1(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= (\ (@ a_X3ttS)
                  (@ b_X3ttU)
                  (m1_i3nU4 :: ReadPrec a_X3ttS)
                  (k_i3nU5 [Occ=OnceL] :: ReadPrec b_X3ttU)
                  (n_a3tm4 :: Prec) ->
                  let {
                    ds_d3nTP [Occ=OnceL] :: ReadP a_X3ttS
                    [LclId]
                    ds_d3nTP
                      = (m1_i3nU4
                         `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_X3ttS>_R
                                 :: (ReadPrec a_X3ttS :: *) ~R# (Prec -> ReadP a_X3ttS :: *)))
                          n_a3tm4 } in
                  (\ (@ b1_a3nIU)
                     (k1_a3ngs [Occ=OnceL]
                        :: b_X3ttU -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
                     (ds_d3nTP
                      `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_X3ttS>_R
                              :: (ReadP a_X3ttS :: *)
                                 ~R# (forall b.
                                      (a_X3ttS -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)))
                       @ b1_a3nIU
                       (\ _ [Occ=Dead] ->
                          (((k_i3nU5
                             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b_X3ttU>_R
                                     :: (ReadPrec b_X3ttU :: *) ~R# (Prec -> ReadP b_X3ttU :: *)))
                              n_a3tm4)
                           `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <b_X3ttU>_R
                                   :: (ReadP b_X3ttU :: *)
                                      ~R# (forall b.
                                           (b_X3ttU -> Text.ParserCombinators.ReadP.P b)
                                           -> Text.ParserCombinators.ReadP.P b :: *)))
                            @ b1_a3nIU k1_a3ngs))
                  `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <b_X3ttU>_R)
                          :: (forall b.
                              (b_X3ttU -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                             ~R# (ReadP b_X3ttU :: *)))
               `cast` (forall (a :: <*>_N) (b :: <*>_N).
                       <ReadPrec a>_R
                       ->_R <ReadPrec b>_R
                       ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b>_R)
                       :: (forall a b. ReadPrec a -> ReadPrec b -> Prec -> ReadP b :: *)
                          ~R# (forall a b. ReadPrec a -> ReadPrec b -> ReadPrec b :: *))}]
Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>
  = $c>>_r3tAR
    `cast` (forall (a :: <*>_N) (b :: <*>_N).
            <ReadPrec a>_R
            ->_R <ReadPrec b>_R
            ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b>_R)
            :: (forall a b. ReadPrec a -> ReadPrec b -> Prec -> ReadP b :: *)
               ~R# (forall a b. ReadPrec a -> ReadPrec b -> ReadPrec b :: *))

-- RHS size: {terms: 12, types: 16, coercions: 82, joins: 0/0}
Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec [InlPrag=NOUSERINLINE CONLIKE]
  :: Applicative ReadPrec
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Applicative TYPE: ReadPrec
                              Text.ParserCombinators.ReadPrec.$fFunctorReadPrec
                              Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5
                              `cast` (forall (a :: <*>_N).
                                      <a>_R
                                      ->_R (<Prec>_R
                                            ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                          <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <a>_R)
                                      :: (forall a.
                                          a
                                          -> Prec
                                          -> forall b.
                                             (a -> Text.ParserCombinators.ReadP.P b)
                                             -> Text.ParserCombinators.ReadP.P b :: *)
                                         ~R# (forall a. a -> ReadPrec a :: *))
                              (\ (@ a_a3ttj) (@ b_a3ttk) ->
                                 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4
                                   @ b_a3ttk @ a_a3ttj)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <ReadPrec (a -> b)>_R
                                      ->_R <ReadPrec a>_R
                                      ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b>_R)
                                      :: (forall a b.
                                          ReadPrec (a -> b) -> ReadPrec a -> Prec -> ReadP b :: *)
                                         ~R# (forall a b.
                                              ReadPrec (a -> b) -> ReadPrec a -> ReadPrec b :: *))
                              (\ (@ a_a3ttu) (@ b_a3ttv) (@ c_a3ttw) ->
                                 Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3
                                   @ c_a3ttw @ b_a3ttv @ a_a3ttu)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                                      <a -> b -> c>_R
                                      ->_R <ReadPrec a>_R
                                      ->_R <ReadPrec b>_R
                                      ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <c>_R)
                                      :: (forall a b c.
                                          (a -> b -> c)
                                          -> ReadPrec a -> ReadPrec b -> Prec -> ReadP c :: *)
                                         ~R# (forall a b c.
                                              (a -> b -> c)
                                              -> ReadPrec a -> ReadPrec b -> ReadPrec c :: *))
                              Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <ReadPrec a>_R
                                      ->_R <ReadPrec b>_R
                                      ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b>_R)
                                      :: (forall a b.
                                          ReadPrec a -> ReadPrec b -> Prec -> ReadP b :: *)
                                         ~R# (forall a b.
                                              ReadPrec a -> ReadPrec b -> ReadPrec b :: *))
                              Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <ReadPrec a>_R
                                      ->_R <ReadPrec b>_R
                                      ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                                      :: (forall a b.
                                          ReadPrec a -> ReadPrec b -> Prec -> ReadP a :: *)
                                         ~R# (forall a b.
                                              ReadPrec a -> ReadPrec b -> ReadPrec a :: *))]
Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec
  = GHC.Base.C:Applicative
      @ ReadPrec
      Text.ParserCombinators.ReadPrec.$fFunctorReadPrec
      (Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5
       `cast` (forall (a :: <*>_N).
               <a>_R
               ->_R (<Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <a>_R)
               :: (forall a.
                   a
                   -> Prec
                   -> forall b.
                      (a -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (forall a. a -> ReadPrec a :: *)))
      ((\ (@ a_a3ttj) (@ b_a3ttk) ->
          Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec4
            @ b_a3ttk @ a_a3ttj)
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <ReadPrec (a -> b)>_R
               ->_R <ReadPrec a>_R
               ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b>_R)
               :: (forall a b.
                   ReadPrec (a -> b) -> ReadPrec a -> Prec -> ReadP b :: *)
                  ~R# (forall a b.
                       ReadPrec (a -> b) -> ReadPrec a -> ReadPrec b :: *)))
      ((\ (@ a_a3ttu) (@ b_a3ttv) (@ c_a3ttw) ->
          Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec3
            @ c_a3ttw @ b_a3ttv @ a_a3ttu)
       `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
               <a -> b -> c>_R
               ->_R <ReadPrec a>_R
               ->_R <ReadPrec b>_R
               ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <c>_R)
               :: (forall a b c.
                   (a -> b -> c) -> ReadPrec a -> ReadPrec b -> Prec -> ReadP c :: *)
                  ~R# (forall a b c.
                       (a -> b -> c) -> ReadPrec a -> ReadPrec b -> ReadPrec c :: *)))
      (Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec2
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <ReadPrec a>_R
               ->_R <ReadPrec b>_R
               ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b>_R)
               :: (forall a b. ReadPrec a -> ReadPrec b -> Prec -> ReadP b :: *)
                  ~R# (forall a b. ReadPrec a -> ReadPrec b -> ReadPrec b :: *)))
      (Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec1
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <ReadPrec a>_R
               ->_R <ReadPrec b>_R
               ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
               :: (forall a b. ReadPrec a -> ReadPrec b -> Prec -> ReadP a :: *)
                  ~R# (forall a b. ReadPrec a -> ReadPrec b -> ReadPrec a :: *)))

-- RHS size: {terms: 6, types: 1, coercions: 44, joins: 0/0}
Text.ParserCombinators.ReadPrec.$fMonadReadPrec [InlPrag=NOUSERINLINE CONLIKE]
  :: Monad ReadPrec
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Monad TYPE: ReadPrec
                        Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec
                        Text.ParserCombinators.ReadPrec.$fMonadReadPrec1
                        `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                <ReadPrec a>_R
                                ->_R <a -> ReadPrec b>_R
                                ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b>_R)
                                :: (forall a b.
                                    ReadPrec a -> (a -> ReadPrec b) -> Prec -> ReadP b :: *)
                                   ~R# (forall a b.
                                        ReadPrec a -> (a -> ReadPrec b) -> ReadPrec b :: *))
                        Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>
                        Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5
                        `cast` (forall (a :: <*>_N).
                                <a>_R
                                ->_R (<Prec>_R
                                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                    <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       <a>_R)
                                :: (forall a.
                                    a
                                    -> Prec
                                    -> forall b.
                                       (a -> Text.ParserCombinators.ReadP.P b)
                                       -> Text.ParserCombinators.ReadP.P b :: *)
                                   ~R# (forall a. a -> ReadPrec a :: *))
                        Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1
                        `cast` (forall (a :: <*>_N).
                                <String>_R
                                ->_R (<Prec>_R
                                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                    <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       <a>_R)
                                :: (forall a.
                                    String
                                    -> Prec
                                    -> forall b.
                                       (a -> Text.ParserCombinators.ReadP.P b)
                                       -> Text.ParserCombinators.ReadP.P b :: *)
                                   ~R# (forall a. String -> ReadPrec a :: *))]
Text.ParserCombinators.ReadPrec.$fMonadReadPrec
  = GHC.Base.C:Monad
      @ ReadPrec
      Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec
      (Text.ParserCombinators.ReadPrec.$fMonadReadPrec1
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <ReadPrec a>_R
               ->_R <a -> ReadPrec b>_R
               ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b>_R)
               :: (forall a b.
                   ReadPrec a -> (a -> ReadPrec b) -> Prec -> ReadP b :: *)
                  ~R# (forall a b.
                       ReadPrec a -> (a -> ReadPrec b) -> ReadPrec b :: *)))
      Text.ParserCombinators.ReadPrec.$fMonadReadPrec_$c>>
      (Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec5
       `cast` (forall (a :: <*>_N).
               <a>_R
               ->_R (<Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <a>_R)
               :: (forall a.
                   a
                   -> Prec
                   -> forall b.
                      (a -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (forall a. a -> ReadPrec a :: *)))
      (Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1
       `cast` (forall (a :: <*>_N).
               <String>_R
               ->_R (<Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <a>_R)
               :: (forall a.
                   String
                   -> Prec
                   -> forall b.
                      (a -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (forall a. String -> ReadPrec a :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec [InlPrag=NOUSERINLINE CONLIKE]
  :: MonadFail.MonadFail ReadPrec
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Control.Monad.Fail.C:MonadFail TYPE: ReadPrec
                                      Text.ParserCombinators.ReadPrec.$fMonadReadPrec
                                      Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1
                                      `cast` (forall (a :: <*>_N).
                                              <String>_R
                                              ->_R (<Prec>_R
                                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                  <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                     <a>_R)
                                              :: (forall a.
                                                  String
                                                  -> Prec
                                                  -> forall b.
                                                     (a -> Text.ParserCombinators.ReadP.P b)
                                                     -> Text.ParserCombinators.ReadP.P b :: *)
                                                 ~R# (forall a. String -> ReadPrec a :: *))]
Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec
  = Control.Monad.Fail.C:MonadFail
      @ ReadPrec
      Text.ParserCombinators.ReadPrec.$fMonadReadPrec
      (Text.ParserCombinators.ReadPrec.$fMonadFailReadPrec1
       `cast` (forall (a :: <*>_N).
               <String>_R
               ->_R (<Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <a>_R)
               :: (forall a.
                   String
                   -> Prec
                   -> forall b.
                      (a -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (forall a. String -> ReadPrec a :: *)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
minPrec :: Prec
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
minPrec = GHC.Types.I# 0#

-- RHS size: {terms: 5, types: 5, coercions: 2, joins: 0/0}
Text.ParserCombinators.ReadPrec.reset1
  :: forall a. ReadPrec a -> Prec -> ReadP a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a3tqT)
                 (ds_d3tvh [Occ=Once] :: ReadPrec a_a3tqT)
                 _ [Occ=Dead] ->
                 (ds_d3tvh
                  `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tqT>_R
                          :: (ReadPrec a_a3tqT :: *) ~R# (Prec -> ReadP a_a3tqT :: *)))
                   minPrec}]
Text.ParserCombinators.ReadPrec.reset1
  = \ (@ a_a3tqT) (ds_d3tvh :: ReadPrec a_a3tqT) _ [Occ=Dead] ->
      (ds_d3tvh
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tqT>_R
               :: (ReadPrec a_a3tqT :: *) ~R# (Prec -> ReadP a_a3tqT :: *)))
        minPrec

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
reset :: forall a. ReadPrec a -> ReadPrec a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.reset1
               `cast` (forall (a :: <*>_N).
                       <ReadPrec a>_R
                       ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                       :: (forall a. ReadPrec a -> Prec -> ReadP a :: *)
                          ~R# (forall a. ReadPrec a -> ReadPrec a :: *))}]
reset
  = Text.ParserCombinators.ReadPrec.reset1
    `cast` (forall (a :: <*>_N).
            <ReadPrec a>_R
            ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a. ReadPrec a -> Prec -> ReadP a :: *)
               ~R# (forall a. ReadPrec a -> ReadPrec a :: *))

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.lift1
  :: forall a. ReadP a -> Prec -> ReadP a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a3tqB)
                 (m_a3tmn [Occ=Once] :: ReadP a_a3tqB)
                 _ [Occ=Dead] ->
                 m_a3tmn}]
Text.ParserCombinators.ReadPrec.lift1
  = \ (@ a_a3tqB) (m_a3tmn :: ReadP a_a3tqB) _ [Occ=Dead] -> m_a3tmn

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
lift :: forall a. ReadP a -> ReadPrec a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.lift1
               `cast` (forall (a :: <*>_N).
                       <ReadP a>_R
                       ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                       :: (forall a. ReadP a -> Prec -> ReadP a :: *)
                          ~R# (forall a. ReadP a -> ReadPrec a :: *))}]
lift
  = Text.ParserCombinators.ReadPrec.lift1
    `cast` (forall (a :: <*>_N).
            <ReadP a>_R
            ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a. ReadP a -> Prec -> ReadP a :: *)
               ~R# (forall a. ReadP a -> ReadPrec a :: *))

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.get1
  :: Prec
     -> forall a.
        (Char -> Text.ParserCombinators.ReadP.P a)
        -> Text.ParserCombinators.ReadP.P a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,U>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ a_a3ngo)
                 (eta_B1 [Occ=Once]
                    :: Char -> Text.ParserCombinators.ReadP.P a_a3ngo) ->
                 Text.ParserCombinators.ReadP.Get @ a_a3ngo eta_B1}]
Text.ParserCombinators.ReadPrec.get1
  = \ _ [Occ=Dead]
      (@ a_a3ngo)
      (eta_B1 :: Char -> Text.ParserCombinators.ReadP.P a_a3ngo) ->
      Text.ParserCombinators.ReadP.Get @ a_a3ngo eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
get :: ReadPrec Char
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,U>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.get1
               `cast` ((<Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Char>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                            <Char>_R)
                       :: (Prec
                           -> forall b.
                              (Char -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (ReadPrec Char :: *))}]
get
  = Text.ParserCombinators.ReadPrec.get1
    `cast` ((<Prec>_R
             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                           <Char>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                 <Char>_R)
            :: (Prec
                -> forall b.
                   (Char -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (ReadPrec Char :: *))

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.look1
  :: Prec
     -> forall a.
        (String -> Text.ParserCombinators.ReadP.P a)
        -> Text.ParserCombinators.ReadP.P a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ a_a3ngo)
                 (eta_B1 [Occ=Once]
                    :: String -> Text.ParserCombinators.ReadP.P a_a3ngo) ->
                 Text.ParserCombinators.ReadP.Look @ a_a3ngo eta_B1}]
Text.ParserCombinators.ReadPrec.look1
  = \ _ [Occ=Dead]
      (@ a_a3ngo)
      (eta_B1 :: String -> Text.ParserCombinators.ReadP.P a_a3ngo) ->
      Text.ParserCombinators.ReadP.Look @ a_a3ngo eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
look :: ReadPrec String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.look1
               `cast` ((<Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <String>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <String>_R)
                       :: (Prec
                           -> forall b.
                              (String -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (ReadPrec String :: *))}]
look
  = Text.ParserCombinators.ReadPrec.look1
    `cast` ((<Prec>_R
             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                           <String>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <String>_R)
            :: (Prec
                -> forall b.
                   (String -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (ReadPrec String :: *))

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
  :: forall a.
     Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a3tqI) _ [Occ=Dead] (@ b_a3nza) _ [Occ=Dead] ->
                 Text.ParserCombinators.ReadP.Fail @ b_a3nza}]
Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
  = \ (@ a_a3tqI) _ [Occ=Dead] (@ b_a3nza) _ [Occ=Dead] ->
      Text.ParserCombinators.ReadP.Fail @ b_a3nza

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
pfail :: forall a. ReadPrec a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
               `cast` (forall (a :: <*>_N).
                       (<Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <a>_R)
                       :: (forall a.
                           Prec
                           -> forall b.
                              (a -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a. ReadPrec a :: *))}]
pfail
  = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
    `cast` (forall (a :: <*>_N).
            (<Prec>_R
             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                           <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a.
                Prec
                -> forall b.
                   (a -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a. ReadPrec a :: *))

-- RHS size: {terms: 11, types: 7, coercions: 2, joins: 0/0}
Text.ParserCombinators.ReadPrec.step1
  :: forall a. ReadPrec a -> Prec -> ReadP a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3tqt)
                 (ds_d3tv3 [Occ=Once] :: ReadPrec a_a3tqt)
                 (n_a3tmp [Occ=Once!] :: Prec) ->
                 (ds_d3tv3
                  `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tqt>_R
                          :: (ReadPrec a_a3tqt :: *) ~R# (Prec -> ReadP a_a3tqt :: *)))
                   (case n_a3tmp of { I# x_i1AMi [Occ=Once] ->
                    GHC.Types.I# (+# x_i1AMi 1#)
                    })}]
Text.ParserCombinators.ReadPrec.step1
  = \ (@ a_a3tqt) (ds_d3tv3 :: ReadPrec a_a3tqt) (n_a3tmp :: Prec) ->
      (ds_d3tv3
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tqt>_R
               :: (ReadPrec a_a3tqt :: *) ~R# (Prec -> ReadP a_a3tqt :: *)))
        (case n_a3tmp of { I# x_i1AMi -> GHC.Types.I# (+# x_i1AMi 1#) })

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
step :: forall a. ReadPrec a -> ReadPrec a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.step1
               `cast` (forall (a :: <*>_N).
                       <ReadPrec a>_R
                       ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                       :: (forall a. ReadPrec a -> Prec -> ReadP a :: *)
                          ~R# (forall a. ReadPrec a -> ReadPrec a :: *))}]
step
  = Text.ParserCombinators.ReadPrec.step1
    `cast` (forall (a :: <*>_N).
            <ReadPrec a>_R
            ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a. ReadPrec a -> Prec -> ReadP a :: *)
               ~R# (forall a. ReadPrec a -> ReadPrec a :: *))

-- RHS size: {terms: 19, types: 12, coercions: 5, joins: 0/0}
Text.ParserCombinators.ReadPrec.prec1
  :: forall a. Prec -> ReadPrec a -> Prec -> ReadP a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3tqm)
                 (n_a3tmr [Occ=Once!] :: Prec)
                 (ds_d3tuY [Occ=Once] :: ReadPrec a_a3tqm)
                 (c_a3tmt [Occ=Once!] :: Prec) ->
                 case c_a3tmt of { I# x_at1e [Occ=Once] ->
                 case n_a3tmr of wild1_at1g { I# y_at1i [Occ=Once] ->
                 case <=# x_at1e y_at1i of {
                   __DEFAULT ->
                     (Text.ParserCombinators.ReadP.$fAlternativeReadP4 @ a_a3tqm)
                     `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tqm>_R)
                             :: (forall b.
                                 (a_a3tqm -> Text.ParserCombinators.ReadP.P b)
                                 -> Text.ParserCombinators.ReadP.P b :: *)
                                ~R# (ReadP a_a3tqm :: *));
                   1# ->
                     (ds_d3tuY
                      `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tqm>_R
                              :: (ReadPrec a_a3tqm :: *) ~R# (Prec -> ReadP a_a3tqm :: *)))
                       wild1_at1g
                 }
                 }
                 }}]
Text.ParserCombinators.ReadPrec.prec1
  = \ (@ a_a3tqm)
      (n_a3tmr :: Prec)
      (ds_d3tuY :: ReadPrec a_a3tqm)
      (c_a3tmt :: Prec) ->
      case c_a3tmt of { I# x_at1e ->
      case n_a3tmr of wild1_at1g { I# y_at1i ->
      case <=# x_at1e y_at1i of {
        __DEFAULT ->
          (Text.ParserCombinators.ReadP.$fAlternativeReadP4 @ a_a3tqm)
          `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tqm>_R)
                  :: (forall b.
                      (a_a3tqm -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                     ~R# (ReadP a_a3tqm :: *));
        1# ->
          (ds_d3tuY
           `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tqm>_R
                   :: (ReadPrec a_a3tqm :: *) ~R# (Prec -> ReadP a_a3tqm :: *)))
            wild1_at1g
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 11, joins: 0/0}
prec :: forall a. Prec -> ReadPrec a -> ReadPrec a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.prec1
               `cast` (forall (a :: <*>_N).
                       <Prec>_R
                       ->_R <ReadPrec a>_R
                       ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                       :: (forall a. Prec -> ReadPrec a -> Prec -> ReadP a :: *)
                          ~R# (forall a. Prec -> ReadPrec a -> ReadPrec a :: *))}]
prec
  = Text.ParserCombinators.ReadPrec.prec1
    `cast` (forall (a :: <*>_N).
            <Prec>_R
            ->_R <ReadPrec a>_R
            ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a. Prec -> ReadPrec a -> Prec -> ReadP a :: *)
               ~R# (forall a. Prec -> ReadPrec a -> ReadPrec a :: *))

-- RHS size: {terms: 17, types: 19, coercions: 11, joins: 0/2}
Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3
  :: forall a. ReadPrec a -> ReadPrec a -> Prec -> ReadP a
[GblId,
 Arity=3,
 Str=<L,1*C1(C(U))><L,1*C1(C(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 60 0] 140 60}]
Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3
  = \ (@ a_a3tqi)
      (ds_d3tuQ :: ReadPrec a_a3tqi)
      (ds1_d3tuR :: ReadPrec a_a3tqi)
      (n_a3tmw :: Prec) ->
      let {
        ds2_s3tx7 [Dmd=<L,C(U)>] :: ReadP a_a3tqi
        [LclId]
        ds2_s3tx7
          = (ds_d3tuQ
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tqi>_R
                     :: (ReadPrec a_a3tqi :: *) ~R# (Prec -> ReadP a_a3tqi :: *)))
              n_a3tmw } in
      let {
        ds3_s3tx6 [Dmd=<L,C(U)>] :: ReadP a_a3tqi
        [LclId]
        ds3_s3tx6
          = (ds1_d3tuR
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tqi>_R
                     :: (ReadPrec a_a3tqi :: *) ~R# (Prec -> ReadP a_a3tqi :: *)))
              n_a3tmw } in
      (\ (@ b_a3nvJ)
         (k_a3ni6 :: a_a3tqi -> Text.ParserCombinators.ReadP.P b_a3nvJ) ->
         Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
           @ b_a3nvJ
           ((ds2_s3tx7
             `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tqi>_R
                     :: (ReadP a_a3tqi :: *)
                        ~R# (forall b.
                             (a_a3tqi -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)))
              @ b_a3nvJ k_a3ni6)
           ((ds3_s3tx6
             `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tqi>_R
                     :: (ReadP a_a3tqi :: *)
                        ~R# (forall b.
                             (a_a3tqi -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)))
              @ b_a3nvJ k_a3ni6))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tqi>_R)
              :: (forall b.
                  (a_a3tqi -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (ReadP a_a3tqi :: *))

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
+++ :: forall a. ReadPrec a -> ReadPrec a -> ReadPrec a
[GblId,
 Arity=3,
 Str=<L,1*C1(C(U))><L,1*C1(C(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3
               `cast` (forall (a :: <*>_N).
                       <ReadPrec a>_R
                       ->_R <ReadPrec a>_R
                       ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                       :: (forall a. ReadPrec a -> ReadPrec a -> Prec -> ReadP a :: *)
                          ~R# (forall a. ReadPrec a -> ReadPrec a -> ReadPrec a :: *))}]
+++
  = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3
    `cast` (forall (a :: <*>_N).
            <ReadPrec a>_R
            ->_R <ReadPrec a>_R
            ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a. ReadPrec a -> ReadPrec a -> Prec -> ReadP a :: *)
               ~R# (forall a. ReadPrec a -> ReadPrec a -> ReadPrec a :: *))

-- RHS size: {terms: 4, types: 8, coercions: 0, joins: 0/0}
lvl_r3tAS
  :: forall a b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []]
lvl_r3tAS
  = \ (@ a_a3tqM) (@ b_a3nza) _ [Occ=Dead] ->
      Text.ParserCombinators.ReadP.Fail @ b_a3nza

Rec {
-- RHS size: {terms: 22, types: 28, coercions: 12, joins: 0/2}
Text.ParserCombinators.ReadPrec.choice2 [Occ=LoopBreaker]
  :: forall a. [ReadPrec a] -> Prec -> ReadP a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
Text.ParserCombinators.ReadPrec.choice2
  = \ (@ a_a3tqM)
      (ds_i1y1c :: [ReadPrec a_a3tqM])
      (eta_X1I :: Prec) ->
      case ds_i1y1c of {
        [] ->
          (lvl_r3tAS @ a_a3tqM)
          `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tqM>_R)
                  :: (forall b.
                      (a_a3tqM -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                     ~R# (ReadP a_a3tqM :: *));
        : y_i1y1h ys_i1y1i ->
          let {
            ds1_s3tx7 [Dmd=<L,C(U)>] :: ReadP a_a3tqM
            [LclId]
            ds1_s3tx7
              = (y_i1y1h
                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tqM>_R
                         :: (ReadPrec a_a3tqM :: *) ~R# (Prec -> ReadP a_a3tqM :: *)))
                  eta_X1I } in
          let {
            ds2_s3tx6 [Dmd=<L,C(U)>] :: ReadP a_a3tqM
            [LclId]
            ds2_s3tx6
              = Text.ParserCombinators.ReadPrec.choice2
                  @ a_a3tqM ys_i1y1i eta_X1I } in
          (\ (@ b_a3nvJ)
             (k_a3ni6 :: a_a3tqM -> Text.ParserCombinators.ReadP.P b_a3nvJ) ->
             Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
               @ b_a3nvJ
               ((ds1_s3tx7
                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tqM>_R
                         :: (ReadP a_a3tqM :: *)
                            ~R# (forall b.
                                 (a_a3tqM -> Text.ParserCombinators.ReadP.P b)
                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                  @ b_a3nvJ k_a3ni6)
               ((ds2_s3tx6
                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tqM>_R
                         :: (ReadP a_a3tqM :: *)
                            ~R# (forall b.
                                 (a_a3tqM -> Text.ParserCombinators.ReadP.P b)
                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                  @ b_a3nvJ k_a3ni6))
          `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tqM>_R)
                  :: (forall b.
                      (a_a3tqM -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                     ~R# (ReadP a_a3tqM :: *))
      }
end Rec }

-- RHS size: {terms: 6, types: 7, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.choice1
  :: forall a. [ReadPrec a] -> Prec -> ReadP a
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)}]
Text.ParserCombinators.ReadPrec.choice1
  = \ (@ a_a3tqM)
      (ps_a3tmA :: [ReadPrec a_a3tqM])
      (eta_B1 :: Prec) ->
      Text.ParserCombinators.ReadPrec.choice2 @ a_a3tqM ps_a3tmA eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
choice :: forall a. [ReadPrec a] -> ReadPrec a
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.choice1
               `cast` (forall (a :: <*>_N).
                       <[ReadPrec a]>_R
                       ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                       :: (forall a. [ReadPrec a] -> Prec -> ReadP a :: *)
                          ~R# (forall a. [ReadPrec a] -> ReadPrec a :: *))}]
choice
  = Text.ParserCombinators.ReadPrec.choice1
    `cast` (forall (a :: <*>_N).
            <[ReadPrec a]>_R
            ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a. [ReadPrec a] -> Prec -> ReadP a :: *)
               ~R# (forall a. [ReadPrec a] -> ReadPrec a :: *))

-- RHS size: {terms: 26, types: 27, coercions: 11, joins: 0/2}
Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2
  :: forall a. ReadPrec a -> Prec -> ReadP [a]
[GblId,
 Arity=2,
 Str=<L,C(C(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0] 240 0}]
Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2
  = \ (@ a_a3trf) (v_i3nTB :: ReadPrec a_a3trf) (eta_B1 :: Prec) ->
      letrec {
        some_v_s3tx1 [Occ=LoopBreaker] :: Prec -> ReadP [a_a3trf]
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        some_v_s3tx1
          = \ (n_a3tm4 :: Prec) ->
              let {
                ds_s3tx3 [Dmd=<L,C(U)>] :: ReadP a_a3trf
                [LclId]
                ds_s3tx3
                  = (v_i3nTB
                     `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3trf>_R
                             :: (ReadPrec a_a3trf :: *) ~R# (Prec -> ReadP a_a3trf :: *)))
                      n_a3tm4 } in
              (\ (@ b1_a3nIU)
                 (k_a3ngs
                    :: [a_a3trf] -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
                 (ds_s3tx3
                  `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3trf>_R
                          :: (ReadP a_a3trf :: *)
                             ~R# (forall b.
                                  (a_a3trf -> Text.ParserCombinators.ReadP.P b)
                                  -> Text.ParserCombinators.ReadP.P b :: *)))
                   @ b1_a3nIU
                   (\ (a1_a3ngt :: a_a3trf) ->
                      Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        @ b1_a3nIU
                        (((some_v_s3tx1 n_a3tm4)
                          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[a_a3trf]>_R
                                  :: (ReadP [a_a3trf] :: *)
                                     ~R# (forall b.
                                          ([a_a3trf] -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)))
                           @ b1_a3nIU
                           (\ (a2_X3ni8 :: [a_a3trf]) ->
                              k_a3ngs (GHC.Types.: @ a_a3trf a1_a3ngt a2_X3ni8)))
                        (k_a3ngs
                           (GHC.Types.: @ a_a3trf a1_a3ngt (GHC.Types.[] @ a_a3trf)))))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <[a_a3trf]>_R)
                      :: (forall b.
                          ([a_a3trf] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadP [a_a3trf] :: *)); } in
      some_v_s3tx1 eta_B1

-- RHS size: {terms: 24, types: 26, coercions: 11, joins: 0/2}
Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1
  :: forall a. ReadPrec a -> Prec -> ReadP [a]
[GblId,
 Arity=2,
 Str=<L,C(C(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0] 230 0}]
Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1
  = \ (@ a_a3trn) (v_i3nTH :: ReadPrec a_a3trn) (eta_B1 :: Prec) ->
      letrec {
        many_v_s3twX [Occ=LoopBreaker] :: Prec -> ReadP [a_a3trn]
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        many_v_s3twX
          = \ (n_a3tmw :: Prec) ->
              let {
                ds_s3twZ [Dmd=<L,C(U)>] :: ReadP a_a3trn
                [LclId]
                ds_s3twZ
                  = (v_i3nTH
                     `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3trn>_R
                             :: (ReadPrec a_a3trn :: *) ~R# (Prec -> ReadP a_a3trn :: *)))
                      n_a3tmw } in
              (\ (@ b_a3nvJ)
                 (k_a3ni6 :: [a_a3trn] -> Text.ParserCombinators.ReadP.P b_a3nvJ) ->
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b_a3nvJ
                   ((ds_s3twZ
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3trn>_R
                             :: (ReadP a_a3trn :: *)
                                ~R# (forall b.
                                     (a_a3trn -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ b_a3nvJ
                      (\ (a1_a3ngt :: a_a3trn) ->
                         ((many_v_s3twX n_a3tmw)
                          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[a_a3trn]>_R
                                  :: (ReadP [a_a3trn] :: *)
                                     ~R# (forall b.
                                          ([a_a3trn] -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)))
                           @ b_a3nvJ
                           (\ (a2_X3ni8 :: [a_a3trn]) ->
                              k_a3ni6 (GHC.Types.: @ a_a3trn a1_a3ngt a2_X3ni8))))
                   (k_a3ni6 (GHC.Types.[] @ a_a3trn)))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <[a_a3trn]>_R)
                      :: (forall b.
                          ([a_a3trn] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadP [a_a3trn] :: *)); } in
      many_v_s3twX eta_B1

-- RHS size: {terms: 6, types: 1, coercions: 44, joins: 0/0}
Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec [InlPrag=NOUSERINLINE CONLIKE]
  :: Alternative ReadPrec
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Alternative TYPE: ReadPrec
                              Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec
                              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
                              `cast` (forall (a :: <*>_N).
                                      (<Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                     <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        <a>_R)
                                      :: (forall a.
                                          Prec
                                          -> forall b.
                                             (a -> Text.ParserCombinators.ReadP.P b)
                                             -> Text.ParserCombinators.ReadP.P b :: *)
                                         ~R# (forall a. ReadPrec a :: *))
                              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3
                              `cast` (forall (a :: <*>_N).
                                      <ReadPrec a>_R
                                      ->_R <ReadPrec a>_R
                                      ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                                      :: (forall a.
                                          ReadPrec a -> ReadPrec a -> Prec -> ReadP a :: *)
                                         ~R# (forall a.
                                              ReadPrec a -> ReadPrec a -> ReadPrec a :: *))
                              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2
                              `cast` (forall (a :: <*>_N).
                                      <ReadPrec a>_R
                                      ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                    <[a]>_R)
                                      :: (forall a. ReadPrec a -> Prec -> ReadP [a] :: *)
                                         ~R# (forall a. ReadPrec a -> ReadPrec [a] :: *))
                              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1
                              `cast` (forall (a :: <*>_N).
                                      <ReadPrec a>_R
                                      ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                    <[a]>_R)
                                      :: (forall a. ReadPrec a -> Prec -> ReadP [a] :: *)
                                         ~R# (forall a. ReadPrec a -> ReadPrec [a] :: *))]
Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec
  = GHC.Base.C:Alternative
      @ ReadPrec
      Text.ParserCombinators.ReadPrec.$fApplicativeReadPrec
      (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
       `cast` (forall (a :: <*>_N).
               (<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
               :: (forall a.
                   Prec
                   -> forall b.
                      (a -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (forall a. ReadPrec a :: *)))
      (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3
       `cast` (forall (a :: <*>_N).
               <ReadPrec a>_R
               ->_R <ReadPrec a>_R
               ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
               :: (forall a. ReadPrec a -> ReadPrec a -> Prec -> ReadP a :: *)
                  ~R# (forall a. ReadPrec a -> ReadPrec a -> ReadPrec a :: *)))
      (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec2
       `cast` (forall (a :: <*>_N).
               <ReadPrec a>_R
               ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[a]>_R)
               :: (forall a. ReadPrec a -> Prec -> ReadP [a] :: *)
                  ~R# (forall a. ReadPrec a -> ReadPrec [a] :: *)))
      (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec1
       `cast` (forall (a :: <*>_N).
               <ReadPrec a>_R
               ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[a]>_R)
               :: (forall a. ReadPrec a -> Prec -> ReadP [a] :: *)
                  ~R# (forall a. ReadPrec a -> ReadPrec [a] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 24, joins: 0/0}
Text.ParserCombinators.ReadPrec.$fMonadPlusReadPrec [InlPrag=NOUSERINLINE CONLIKE]
  :: MonadPlus ReadPrec
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:MonadPlus TYPE: ReadPrec
                            Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec
                            Text.ParserCombinators.ReadPrec.$fMonadReadPrec
                            Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
                            `cast` (forall (a :: <*>_N).
                                    (<Prec>_R
                                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                   <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <a>_R)
                                    :: (forall a.
                                        Prec
                                        -> forall b.
                                           (a -> Text.ParserCombinators.ReadP.P b)
                                           -> Text.ParserCombinators.ReadP.P b :: *)
                                       ~R# (forall a. ReadPrec a :: *))
                            Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3
                            `cast` (forall (a :: <*>_N).
                                    <ReadPrec a>_R
                                    ->_R <ReadPrec a>_R
                                    ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                                    :: (forall a. ReadPrec a -> ReadPrec a -> Prec -> ReadP a :: *)
                                       ~R# (forall a. ReadPrec a -> ReadPrec a -> ReadPrec a :: *))]
Text.ParserCombinators.ReadPrec.$fMonadPlusReadPrec
  = GHC.Base.C:MonadPlus
      @ ReadPrec
      Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec
      Text.ParserCombinators.ReadPrec.$fMonadReadPrec
      (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
       `cast` (forall (a :: <*>_N).
               (<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
               :: (forall a.
                   Prec
                   -> forall b.
                      (a -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (forall a. ReadPrec a :: *)))
      (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec3
       `cast` (forall (a :: <*>_N).
               <ReadPrec a>_R
               ->_R <ReadPrec a>_R
               ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
               :: (forall a. ReadPrec a -> ReadPrec a -> Prec -> ReadP a :: *)
                  ~R# (forall a. ReadPrec a -> ReadPrec a -> ReadPrec a :: *)))

-- RHS size: {terms: 20, types: 27, coercions: 4, joins: 0/2}
Text.ParserCombinators.ReadPrec.<++1
  :: forall a.
     ReadPrec a
     -> ReadPrec a
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,1*C1(C(U))><L,1*C1(C(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 60 0] 130 60}]
Text.ParserCombinators.ReadPrec.<++1
  = \ (@ a_a3tqe)
      (ds_d3tuI :: ReadPrec a_a3tqe)
      (ds1_d3tuJ :: ReadPrec a_a3tqe)
      (n_a3tmz :: Prec) ->
      let {
        w_s3ohV [Dmd=<L,C(U)>] :: ReadP a_a3tqe
        [LclId]
        w_s3ohV
          = (ds_d3tuI
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tqe>_R
                     :: (ReadPrec a_a3tqe :: *) ~R# (Prec -> ReadP a_a3tqe :: *)))
              n_a3tmz } in
      let {
        w1_s3ohW [Dmd=<L,C(U)>] :: ReadP a_a3tqe
        [LclId]
        w1_s3ohW
          = (ds1_d3tuJ
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tqe>_R
                     :: (ReadPrec a_a3tqe :: *) ~R# (Prec -> ReadP a_a3tqe :: *)))
              n_a3tmz } in
      \ (@ b_s3ohX)
        (w2_s3ohY :: a_a3tqe -> Text.ParserCombinators.ReadP.P b_s3ohX) ->
        case Text.ParserCombinators.ReadP.$w<++
               @ a_a3tqe w_s3ohV w1_s3ohW @ b_s3ohX w2_s3ohY
        of
        { (# ww1_s3oiI #) ->
        Text.ParserCombinators.ReadP.Look @ b_s3ohX ww1_s3oiI
        }

-- RHS size: {terms: 1, types: 0, coercions: 18, joins: 0/0}
<++ :: forall a. ReadPrec a -> ReadPrec a -> ReadPrec a
[GblId,
 Arity=3,
 Str=<L,1*C1(C(U))><L,1*C1(C(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.<++1
               `cast` (forall (a :: <*>_N).
                       <ReadPrec a>_R
                       ->_R <ReadPrec a>_R
                       ->_R (<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <a>_R)
                       :: (forall a.
                           ReadPrec a
                           -> ReadPrec a
                           -> Prec
                           -> forall b.
                              (a -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a. ReadPrec a -> ReadPrec a -> ReadPrec a :: *))}]
<++
  = Text.ParserCombinators.ReadPrec.<++1
    `cast` (forall (a :: <*>_N).
            <ReadPrec a>_R
            ->_R <ReadPrec a>_R
            ->_R (<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a.
                ReadPrec a
                -> ReadPrec a
                -> Prec
                -> forall b.
                   (a -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a. ReadPrec a -> ReadPrec a -> ReadPrec a :: *))

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.readPrec_to_P1
  :: forall a. ReadPrec a -> ReadPrec a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a3tqc) (ds_d3tuE [Occ=Once] :: ReadPrec a_a3tqc) ->
                 ds_d3tuE}]
Text.ParserCombinators.ReadPrec.readPrec_to_P1
  = \ (@ a_a3tqc) (ds_d3tuE :: ReadPrec a_a3tqc) -> ds_d3tuE

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
readPrec_to_P :: forall a. ReadPrec a -> Int -> ReadP a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.readPrec_to_P1
               `cast` (forall (a :: <*>_N).
                       <ReadPrec a>_R
                       ->_R Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R
                       :: (forall a. ReadPrec a -> ReadPrec a :: *)
                          ~R# (forall a. ReadPrec a -> Prec -> ReadP a :: *))}]
readPrec_to_P
  = Text.ParserCombinators.ReadPrec.readPrec_to_P1
    `cast` (forall (a :: <*>_N).
            <ReadPrec a>_R
            ->_R Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R
            :: (forall a. ReadPrec a -> ReadPrec a :: *)
               ~R# (forall a. ReadPrec a -> Prec -> ReadP a :: *))

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.readP_to_Prec1
  :: forall a. (Int -> ReadP a) -> Int -> ReadP a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a3tq9) (f_a3tmC [Occ=Once] :: Int -> ReadP a_a3tq9) ->
                 f_a3tmC}]
Text.ParserCombinators.ReadPrec.readP_to_Prec1
  = \ (@ a_a3tq9) (f_a3tmC :: Int -> ReadP a_a3tq9) -> f_a3tmC

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
readP_to_Prec :: forall a. (Int -> ReadP a) -> ReadPrec a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.readP_to_Prec1
               `cast` (forall (a :: <*>_N).
                       <Int -> ReadP a>_R
                       ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                       :: (forall a. (Int -> ReadP a) -> Prec -> ReadP a :: *)
                          ~R# (forall a. (Int -> ReadP a) -> ReadPrec a :: *))}]
readP_to_Prec
  = Text.ParserCombinators.ReadPrec.readP_to_Prec1
    `cast` (forall (a :: <*>_N).
            <Int -> ReadP a>_R
            ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a. (Int -> ReadP a) -> Prec -> ReadP a :: *)
               ~R# (forall a. (Int -> ReadP a) -> ReadPrec a :: *))

-- RHS size: {terms: 7, types: 8, coercions: 4, joins: 0/0}
readPrec_to_S :: forall a. ReadPrec a -> Int -> ReadS a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3tq6)
                 (ds_d3tuz [Occ=Once] :: ReadPrec a_a3tq6)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ a_a3tq6
                   ((((ds_d3tuz
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tq6>_R
                               :: (ReadPrec a_a3tq6 :: *) ~R# (Prec -> ReadP a_a3tq6 :: *)))
                        n_a3tmE)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tq6>_R
                             :: (ReadP a_a3tq6 :: *)
                                ~R# (forall b.
                                     (a_a3tq6 -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ a_a3tq6
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ a_a3tq6))}]
readPrec_to_S
  = \ (@ a_a3tq6) (ds_d3tuz :: ReadPrec a_a3tq6) (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ a_a3tq6
        ((((ds_d3tuz
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3tq6>_R
                    :: (ReadPrec a_a3tq6 :: *) ~R# (Prec -> ReadP a_a3tq6 :: *)))
             n_a3tmE)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3tq6>_R
                  :: (ReadP a_a3tq6 :: *)
                     ~R# (forall b.
                          (a_a3tq6 -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ a_a3tq6
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ a_a3tq6))

-- RHS size: {terms: 15, types: 24, coercions: 0, joins: 0/1}
Text.ParserCombinators.ReadPrec.readS_to_Prec1
  :: forall a.
     (Int -> ReadS a)
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(C(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3tq2)
                 (f_a3tmF [Occ=Once!] :: Int -> ReadS a_a3tq2)
                 (n_a3tmG [Occ=Once] :: Prec) ->
                 let {
                   w_s3ofF [Occ=OnceL] :: ReadS a_a3tq2
                   [LclId]
                   w_s3ofF = f_a3tmF n_a3tmG } in
                 \ (@ b_s3ofG)
                   (w1_s3ofH [Occ=Once]
                      :: a_a3tq2 -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                   case Text.ParserCombinators.ReadP.$wreadS_to_P
                          @ a_a3tq2 w_s3ofF @ b_s3ofG w1_s3ofH
                   of
                   { (# ww1_s3oiG [Occ=Once] #) ->
                   Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                   }}]
Text.ParserCombinators.ReadPrec.readS_to_Prec1
  = \ (@ a_a3tq2)
      (f_a3tmF :: Int -> ReadS a_a3tq2)
      (n_a3tmG :: Prec) ->
      let {
        w_s3ofF [Dmd=<L,C(U)>] :: ReadS a_a3tq2
        [LclId]
        w_s3ofF = f_a3tmF n_a3tmG } in
      \ (@ b_s3ofG)
        (w1_s3ofH :: a_a3tq2 -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
        case Text.ParserCombinators.ReadP.$wreadS_to_P
               @ a_a3tq2 w_s3ofF @ b_s3ofG w1_s3ofH
        of
        { (# ww1_s3oiG #) ->
        Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
        }

-- RHS size: {terms: 1, types: 0, coercions: 16, joins: 0/0}
readS_to_Prec :: forall a. (Int -> ReadS a) -> ReadPrec a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(C(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Text.ParserCombinators.ReadPrec.readS_to_Prec1
               `cast` (forall (a :: <*>_N).
                       <Int -> ReadS a>_R
                       ->_R (<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <a>_R)
                       :: (forall a.
                           (Int -> ReadS a)
                           -> Prec
                           -> forall b.
                              (a -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a. (Int -> ReadS a) -> ReadPrec a :: *))}]
readS_to_Prec
  = Text.ParserCombinators.ReadPrec.readS_to_Prec1
    `cast` (forall (a :: <*>_N).
            <Int -> ReadS a>_R
            ->_R (<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a.
                (Int -> ReadS a)
                -> Prec
                -> forall b.
                   (a -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a. (Int -> ReadS a) -> ReadPrec a :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.ParserCombinators.ReadPrec.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.ParserCombinators.ReadPrec.$trModule3
  = GHC.Types.TrNameS Text.ParserCombinators.ReadPrec.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 90 0}]
Text.ParserCombinators.ReadPrec.$trModule2
  = "Text.ParserCombinators.ReadPrec"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.ParserCombinators.ReadPrec.$trModule1
  = GHC.Types.TrNameS Text.ParserCombinators.ReadPrec.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.ParserCombinators.ReadPrec.$trModule
  = GHC.Types.Module
      Text.ParserCombinators.ReadPrec.$trModule3
      Text.ParserCombinators.ReadPrec.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r3tAT :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r3tAT
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep1_r3tAU :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep1_r3tAU = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep2_r3tAV :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep2_r3tAV
  = GHC.Types.: @ KindRep $krep1_r3tAU (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_r3tAW :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_r3tAW
  = GHC.Types.KindRepTyConApp
      Text.ParserCombinators.ReadP.$tcReadP $krep2_r3tAV

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_r3tAX :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep4_r3tAX = GHC.Types.KindRepFun $krep_r3tAT $krep3_r3tAW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$tcReadPrec2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.ParserCombinators.ReadPrec.$tcReadPrec2 = "ReadPrec"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$tcReadPrec1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.ParserCombinators.ReadPrec.$tcReadPrec1
  = GHC.Types.TrNameS Text.ParserCombinators.ReadPrec.$tcReadPrec2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$tcReadPrec :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.ParserCombinators.ReadPrec.$tcReadPrec
  = GHC.Types.TyCon
      17656447446138014199##
      97878223355588575##
      Text.ParserCombinators.ReadPrec.$trModule
      Text.ParserCombinators.ReadPrec.$tcReadPrec1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_r3tAY :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep5_r3tAY
  = GHC.Types.KindRepTyConApp
      Text.ParserCombinators.ReadPrec.$tcReadPrec $krep2_r3tAV

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$tc'P1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.ParserCombinators.ReadPrec.$tc'P1
  = GHC.Types.KindRepFun $krep4_r3tAX $krep5_r3tAY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$tc'P3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.ParserCombinators.ReadPrec.$tc'P3 = "'P"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$tc'P2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.ParserCombinators.ReadPrec.$tc'P2
  = GHC.Types.TrNameS Text.ParserCombinators.ReadPrec.$tc'P3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.ParserCombinators.ReadPrec.$tc'P :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.ParserCombinators.ReadPrec.$tc'P
  = GHC.Types.TyCon
      14970691021354513070##
      16104245447600145137##
      Text.ParserCombinators.ReadPrec.$trModule
      Text.ParserCombinators.ReadPrec.$tc'P2
      1#
      Text.ParserCombinators.ReadPrec.$tc'P1


