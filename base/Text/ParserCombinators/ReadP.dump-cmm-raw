
==================== Raw Cmm ====================
2018-03-16 15:58:01.265050191 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:58:01.267061248 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_entry() //  [R2]
         { []
         }
     {offset
       c3qnI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qnM; else goto c3qnL;
       c3qnM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qnL: // global
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.271068119 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure:
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info;
 },
 Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_entry() //  []
         { []
         }
     {offset
       c3qnW: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info" {
     Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info:
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.275476385 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP2_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP2_closure:
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_info;
 },
 sat_s3or2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qod: // global
           R4 = R2;
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3or2_info" {
     sat_s3or2_info:
         const sat_s3or2_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fFunctorReadP2_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c3qog: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qok; else goto c3qoj;
       c3qok: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fFunctorReadP2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qoj: // global
           I64[Hp - 16] = sat_s3or2_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 15;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fFunctorReadP2_info" {
     Text.ParserCombinators.ReadP.$fFunctorReadP2_info:
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.283850674 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP1_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP1_closure:
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_info;
 },
 sat_s3or8_entry() //  [R1]
         { []
         }
     {offset
       c3qoC: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3or8_info" {
     sat_s3or8_info:
         const sat_s3or8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fFunctorReadP1_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c3qoF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qoJ; else goto c3qoI;
       c3qoJ: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fFunctorReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qoI: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3or8_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fFunctorReadP1_info" {
     Text.ParserCombinators.ReadP.$fFunctorReadP1_info:
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.288909667 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_closure+3;
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.291592683 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_info;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP5_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c3qoZ: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeReadP5_info" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP5_info:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.295151977 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure:
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_info;
 },
 Text.ParserCombinators.ReadP.$fMonadFailReadP1_entry() //  []
         { []
         }
     {offset
       c3qpa: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fMonadFailReadP1_info" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP1_info:
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.299866507 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP1_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP1_closure:
         const Text.ParserCombinators.ReadP.$fMonadReadP1_info;
 },
 sat_s3orh_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qpr: // global
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3orh_info" {
     sat_s3orh_info:
         const sat_s3orh_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fMonadReadP1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3qpu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qpy; else goto c3qpx;
       c3qpy: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fMonadReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qpx: // global
           I64[Hp - 16] = sat_s3orh_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3ord::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ord::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fMonadReadP1_info" {
     Text.ParserCombinators.ReadP.$fMonadReadP1_info:
         const Text.ParserCombinators.ReadP.$fMonadReadP1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.310636866 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info;
 },
 sat_s3oro_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qpW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qpX; else goto c3qpY;
       c3qpX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qpY: // global
           I64[Sp - 16] = block_c3qpU_info;
           R2 = R2;
           _s3ori::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3ori::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oro_info" {
     sat_s3oro_info:
         const sat_s3oro_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3qpU() //  [R1]
         { []
         }
     {offset
       c3qpU: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qpU_info" {
     block_c3qpU_info:
         const _c3qpU;
         const 1;
         const 30;
 },
 sat_s3ors_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qqb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qqc; else goto c3qqd;
       c3qqc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qqd: // global
           I64[Sp - 16] = block_c3qq9_info;
           R2 = R2;
           _s3ori::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3ori::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ors_info" {
     sat_s3ors_info:
         const sat_s3ors_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3qq9() //  [R1]
         { []
         }
     {offset
       c3qq9: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qq9_info" {
     block_c3qq9_info:
         const _c3qq9;
         const 1;
         const 30;
 },
 sat_s3orw_entry() //  [R1]
         { []
         }
     {offset
       c3qqo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qqp; else goto c3qqq;
       c3qqp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qqq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3orw_info" {
     sat_s3orw_info:
         const sat_s3orw_entry;
         const 2;
         const 18;
 },
 sat_s3orD_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qqF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qqK; else goto c3qqL;
       c3qqK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qqL: // global
           I64[Sp - 16] = block_c3qqC_info;
           _s3ori::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ori::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qqP; else goto c3qqD;
       u3qqP: // global
           call _c3qqC(R1) args: 0, res: 0, upd: 0;
       c3qqD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3orD_info" {
     sat_s3orD_info:
         const sat_s3orD_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3qqC() //  [R1]
         { []
         }
     {offset
       c3qqC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qqO; else goto c3qqN;
       c3qqO: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qqN: // global
           _s3orA::P64 = P64[R1 + 7];
           _s3orB::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s3orA::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _s3orB::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qqC_info" {
     block_c3qqC_info:
         const _c3qqC;
         const 1;
         const 30;
 },
 sat_s3orE_entry() //  [R1]
         { []
         }
     {offset
       c3qqQ: // global
           _s3orE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qqR; else goto c3qqS;
       c3qqS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qqU; else goto c3qqT;
       c3qqU: // global
           HpAlloc = 16;
           goto c3qqR;
       c3qqR: // global
           R1 = _s3orE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qqT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3orE::P64;
           _s3ori::P64 = P64[_s3orE::P64 + 16];
           _s3orx::P64 = P64[_s3orE::P64 + 24];
           I64[Hp - 8] = sat_s3orD_info;
           P64[Hp] = _s3ori::P64;
           R3 = _s3orx::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3orE_info" {
     sat_s3orE_info:
         const sat_s3orE_entry;
         const 2;
         const 18;
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       c3qr2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qr3; else goto c3qr4;
       c3qr3: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qr4: // global
           I64[Sp - 16] = block_c3qpK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qrr; else goto c3qpL;
       u3qrr: // global
           call _c3qpK(R1) args: 0, res: 0, upd: 0;
       c3qpL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3qpK() //  [R1]
         { []
         }
     {offset
       c3qpK: // global
           _s3ori::P64 = P64[Sp + 8];
           _c3qr1::P64 = R1 & 7;
           if (_c3qr1::P64 < 4) goto u3qro; else goto u3qrq;
       u3qro: // global
           if (_c3qr1::P64 < 3) goto u3qrp; else goto c3qqY;
       u3qrp: // global
           if (_c3qr1::P64 < 2) goto c3qqW; else goto c3qqX;
       c3qqW: // global
           Hp = Hp + 40;
           _s3ork::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qrc; else goto c3qr7;
       c3qr7: // global
           _s3orl::P64 = P64[_s3ork::P64 + 7];
           I64[Hp - 32] = sat_s3oro_info;
           P64[Hp - 24] = _s3ori::P64;
           P64[Hp - 16] = _s3orl::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qqX: // global
           Hp = Hp + 40;
           _s3ork::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qrc; else goto c3qrb;
       c3qrc: // global
           HpAlloc = 40;
           R1 = _s3ork::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qrb: // global
           _s3orp::P64 = P64[_s3ork::P64 + 6];
           I64[Hp - 32] = sat_s3ors_info;
           P64[Hp - 24] = _s3ori::P64;
           P64[Hp - 16] = _s3orp::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qqY: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qrq: // global
           if (_c3qr1::P64 < 5) goto c3qqZ; else goto c3qr0;
       c3qqZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3qrj; else goto c3qri;
       c3qrj: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qri: // global
           _s3ort::P64 = P64[R1 + 4];
           _s3oru::P64 = P64[R1 + 12];
           I64[Hp - 80] = sat_s3orw_info;
           P64[Hp - 64] = _s3ori::P64;
           P64[Hp - 56] = _s3oru::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ori::P64;
           P64[Hp - 24] = _s3ort::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qr0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qrn; else goto c3qrm;
       c3qrn: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qrm: // global
           _s3orx::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3orE_info;
           P64[Hp - 24] = _s3ori::P64;
           P64[Hp - 16] = _s3orx::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qpK_info" {
     block_c3qpK_info:
         const _c3qpK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.337100441 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info;
 },
 sat_s3orL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qsz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qsA; else goto c3qsB;
       c3qsA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qsB: // global
           I64[Sp - 16] = block_c3qsx_info;
           R2 = R2;
           _s3orF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3orF::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3orL_info" {
     sat_s3orL_info:
         const sat_s3orL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3qsx() //  [R1]
         { []
         }
     {offset
       c3qsx: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qsx_info" {
     block_c3qsx_info:
         const _c3qsx;
         const 1;
         const 30;
 },
 sat_s3orP_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qsO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qsP; else goto c3qsQ;
       c3qsP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qsQ: // global
           I64[Sp - 16] = block_c3qsM_info;
           R2 = R2;
           _s3orF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3orF::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3orP_info" {
     sat_s3orP_info:
         const sat_s3orP_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3qsM() //  [R1]
         { []
         }
     {offset
       c3qsM: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qsM_info" {
     block_c3qsM_info:
         const _c3qsM;
         const 1;
         const 30;
 },
 sat_s3orS_entry() //  [R1]
         { []
         }
     {offset
       c3qt1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qt2; else goto c3qt3;
       c3qt2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qt3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3orS_info" {
     sat_s3orS_info:
         const sat_s3orS_entry;
         const 2;
         const 18;
 },
 sat_s3orY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qti: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qtm; else goto c3qtn;
       c3qtm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qtn: // global
           I64[Sp - 16] = block_c3qtf_info;
           _s3orF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3orF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qtr; else goto c3qtg;
       u3qtr: // global
           call _c3qtf(R1) args: 0, res: 0, upd: 0;
       c3qtg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3orY_info" {
     sat_s3orY_info:
         const sat_s3orY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3qtf() //  [R1]
         { []
         }
     {offset
       c3qtf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qtq; else goto c3qtp;
       c3qtq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qtp: // global
           _s3orX::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s3orX::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qtf_info" {
     block_c3qtf_info:
         const _c3qtf;
         const 1;
         const 30;
 },
 sat_s3orZ_entry() //  [R1]
         { []
         }
     {offset
       c3qts: // global
           _s3orZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qtt; else goto c3qtu;
       c3qtu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qtw; else goto c3qtv;
       c3qtw: // global
           HpAlloc = 16;
           goto c3qtt;
       c3qtt: // global
           R1 = _s3orZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qtv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3orZ::P64;
           _s3orF::P64 = P64[_s3orZ::P64 + 16];
           _s3orT::P64 = P64[_s3orZ::P64 + 24];
           I64[Hp - 8] = sat_s3orY_info;
           P64[Hp] = _s3orF::P64;
           R3 = _s3orT::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3orZ_info" {
     sat_s3orZ_info:
         const sat_s3orZ_entry;
         const 2;
         const 18;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c3qtE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qtF; else goto c3qtG;
       c3qtF: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qtG: // global
           I64[Sp - 16] = block_c3qsn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qu2; else goto c3qso;
       u3qu2: // global
           call _c3qsn(R1) args: 0, res: 0, upd: 0;
       c3qso: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3qsn() //  [R1]
         { []
         }
     {offset
       c3qsn: // global
           _s3orF::P64 = P64[Sp + 8];
           _c3qtD::P64 = R1 & 7;
           if (_c3qtD::P64 < 4) goto u3qtZ; else goto u3qu1;
       u3qtZ: // global
           if (_c3qtD::P64 < 3) goto u3qu0; else goto c3qtA;
       u3qu0: // global
           if (_c3qtD::P64 < 2) goto c3qty; else goto c3qtz;
       c3qty: // global
           Hp = Hp + 40;
           _s3orH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qtO; else goto c3qtJ;
       c3qtJ: // global
           _s3orI::P64 = P64[_s3orH::P64 + 7];
           I64[Hp - 32] = sat_s3orL_info;
           P64[Hp - 24] = _s3orF::P64;
           P64[Hp - 16] = _s3orI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qtz: // global
           Hp = Hp + 40;
           _s3orH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qtO; else goto c3qtN;
       c3qtO: // global
           HpAlloc = 40;
           R1 = _s3orH::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qtN: // global
           _s3orM::P64 = P64[_s3orH::P64 + 6];
           I64[Hp - 32] = sat_s3orP_info;
           P64[Hp - 24] = _s3orF::P64;
           P64[Hp - 16] = _s3orM::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qtA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qu1: // global
           if (_c3qtD::P64 < 5) goto c3qtB; else goto c3qtC;
       c3qtB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qtU; else goto c3qtT;
       c3qtU: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qtT: // global
           _s3orR::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3orS_info;
           P64[Hp - 32] = _s3orF::P64;
           P64[Hp - 24] = _s3orR::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3orF::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qtC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qtY; else goto c3qtX;
       c3qtY: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qtX: // global
           _s3orT::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3orZ_info;
           P64[Hp - 24] = _s3orF::P64;
           P64[Hp - 16] = _s3orT::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qsn_info" {
     block_c3qsn_info:
         const _c3qsn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.364804714 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorP_closure" {
     Text.ParserCombinators.ReadP.$fFunctorP_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.371502583 UTC

[section ""data" . Text.ParserCombinators.ReadP.run_closure" {
     Text.ParserCombinators.ReadP.run_closure:
         const Text.ParserCombinators.ReadP.run_info;
 },
 sat_s3osd_entry() //  [R1]
         { []
         }
     {offset
       c3qv9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qva; else goto c3qvb;
       c3qva: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qvb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3osd_info" {
     sat_s3osd_info:
         const sat_s3osd_entry;
         const 2;
         const 18;
 },
 Text.ParserCombinators.ReadP.run_entry() //  [R2, R3]
         { []
         }
     {offset
       c3qvj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qvk; else goto u3qw0;
       c3qvk: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.run_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u3qw0: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c3quU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.run_info" {
     Text.ParserCombinators.ReadP.run_info:
         const Text.ParserCombinators.ReadP.run_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3quU() //  []
         { []
         }
     {offset
       c3quU: // global
           _s3os0::P64 = P64[Sp];
           I64[Sp] = block_c3quX_info;
           R1 = _s3os0::P64;
           if (R1 & 7 != 0) goto u3qw5; else goto c3quY;
       u3qw5: // global
           call _c3quX(R1) args: 0, res: 0, upd: 0;
       c3quY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3quX() //  [R1]
         { []
         }
     {offset
       c3quX: // global
           _s3os1::P64 = P64[Sp + 8];
           _c3qvi::P64 = R1 & 7;
           if (_c3qvi::P64 < 4) goto u3qvX; else goto u3qvZ;
       u3qvX: // global
           if (_c3qvi::P64 < 3) goto u3qvY; else goto u3qw1;
       u3qvY: // global
           if (_c3qvi::P64 < 2) goto c3qvd; else goto c3qve;
       c3qvd: // global
           I64[Sp] = block_c3qvn_info;
           _s3os3::P64 = P64[R1 + 7];
           R1 = _s3os1::P64;
           P64[Sp + 8] = _s3os3::P64;
           if (R1 & 7 != 0) goto u3qw6; else goto c3qvp;
       u3qw6: // global
           call _c3qvn(R1) args: 0, res: 0, upd: 0;
       c3qvp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3qve: // global
           I64[Sp] = block_c3qvG_info;
           R2 = _s3os1::P64;
           R1 = P64[R1 + 6];
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3qw1: // global
           Sp = Sp + 16;
           call _c3qvf() args: 0, res: 0, upd: 0;
       u3qvZ: // global
           if (_c3qvi::P64 < 5) goto c3qvg; else goto c3qvh;
       c3qvg: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3qvS; else goto c3qvR;
       c3qvS: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qvR: // global
           _s3osa::P64 = P64[R1 + 4];
           _s3osb::P64 = P64[R1 + 12];
           I64[Hp - 72] = sat_s3osd_info;
           P64[Hp - 56] = _s3os1::P64;
           P64[Hp - 48] = _s3osb::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s3osa::P64;
           P64[Hp - 24] = _s3os1::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qvh: // global
           R1 = P64[R1 + 3] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3quX_info" {
     block_c3quX_info:
         const _c3quX;
         const 1;
         const 30;
 },
 _c3qvn() //  [R1]
         { []
         }
     {offset
       c3qvn: // global
           if (R1 & 7 == 1) goto u3qw2; else goto c3qvA;
       u3qw2: // global
           Sp = Sp + 16;
           call _c3qvf() args: 0, res: 0, upd: 0;
       c3qvA: // global
           I64[Sp] = block_c3qvy_info;
           R2 = P64[R1 + 6];
           _s3os6::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3os6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qvn_info" {
     block_c3qvn_info:
         const _c3qvn;
         const 1;
         const 30;
 },
 _c3qvy() //  [R1]
         { []
         }
     {offset
       c3qvy: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c3quU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3qvy_info" {
     block_c3qvy_info:
         const _c3qvy;
         const 1;
         const 30;
 },
 _c3qvG() //  [R1]
         { []
         }
     {offset
       c3qvG: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c3quU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3qvG_info" {
     block_c3qvG_info:
         const _c3qvG;
         const 1;
         const 30;
 },
 _c3qvf() //  []
         { []
         }
     {offset
       c3qvf: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.393091177 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wreadS_to_P_closure" {
     Text.ParserCombinators.ReadP.$wreadS_to_P_closure:
         const Text.ParserCombinators.ReadP.$wreadS_to_P_info;
 },
 sat_s3osr_entry() //  [R1]
         { []
         }
     {offset
       c3qxc: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_s3osh_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3osr_info" {
     sat_s3osr_info:
         const sat_s3osr_entry;
         const 2;
         const 18;
 },
 go_s3osh_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qxj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3qxk; else goto c3qxl;
       c3qxk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qxl: // global
           I64[Sp - 24] = block_c3qwX_info;
           _s3osh::P64 = R1;
           _s3osg::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3osg::P64;
           P64[Sp - 8] = _s3osh::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3qxD; else goto c3qwY;
       u3qxD: // global
           call _c3qwX(R1) args: 0, res: 0, upd: 0;
       c3qwY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s3osh_info" {
     go_s3osh_info:
         const go_s3osh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3qwX() //  [R1]
         { []
         }
     {offset
       c3qwX: // global
           if (R1 & 7 == 1) goto c3qxg; else goto c3qxh;
       c3qxg: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qxh: // global
           I64[Sp - 8] = block_c3qx3_info;
           _s3osl::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3osl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qxC; else goto c3qx4;
       u3qxC: // global
           call _c3qx3(R1) args: 0, res: 0, upd: 0;
       c3qx4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qwX_info" {
     block_c3qwX_info:
         const _c3qwX;
         const 2;
         const 30;
 },
 _c3qx3() //  [R1]
         { []
         }
     {offset
       c3qx3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qxw; else goto c3qxv;
       c3qxw: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qxv: // global
           _s3osn::P64 = P64[R1 + 7];
           _s3oso::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3osr_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3qxo_info;
           R2 = _s3osn::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3oso::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qx3_info" {
     block_c3qx3_info:
         const _c3qx3;
         const 3;
         const 30;
 },
 _c3qxo() //  [R1]
         { []
         }
     {offset
       c3qxo: // global
           _s3oso::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3qxs_info;
           R3 = _s3oso::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qxo_info" {
     block_c3qxo_info:
         const _c3qxo;
         const 2;
         const 30;
 },
 _c3qxs() //  [R1]
         { []
         }
     {offset
       c3qxs: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qxs_info" {
     block_c3qxs_info:
         const _c3qxs;
         const 1;
         const 30;
 },
 sat_s3osx_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qxL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qxM; else goto c3qxN;
       c3qxM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qxN: // global
           I64[Sp - 16] = block_c3qxJ_info;
           R2 = R2;
           _s3osh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3osh::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3osx_info" {
     sat_s3osx_info:
         const sat_s3osx_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3qxJ() //  [R1]
         { []
         }
     {offset
       c3qxJ: // global
           _s3osh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3qxQ_info;
           R2 = R1;
           R1 = _s3osh::P64;
           Sp = Sp + 8;
           call go_s3osh_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qxJ_info" {
     block_c3qxJ_info:
         const _c3qxJ;
         const 1;
         const 30;
 },
 _c3qxQ() //  [R1]
         { []
         }
     {offset
       c3qxQ: // global
           if (R1 & 7 == 1) goto c3qxX; else goto c3qy1;
       c3qxX: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qy1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qy4; else goto c3qy3;
       c3qy4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qy3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R1;
           R1 = Hp - 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qxQ_info" {
     block_c3qxQ_info:
         const _c3qxQ;
         const 0;
         const 30;
 },
 Text.ParserCombinators.ReadP.$wreadS_to_P_entry() //  [R2, R3]
         { []
         }
     {offset
       c3qy6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qya; else goto c3qy9;
       c3qya: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wreadS_to_P_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qy9: // global
           I64[Hp - 32] = go_s3osh_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3osx_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$wreadS_to_P_info" {
     Text.ParserCombinators.ReadP.$wreadS_to_P_info:
         const Text.ParserCombinators.ReadP.$wreadS_to_P_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.413492827 UTC

[section ""data" . Text.ParserCombinators.ReadP.readS_to_P1_closure" {
     Text.ParserCombinators.ReadP.readS_to_P1_closure:
         const Text.ParserCombinators.ReadP.readS_to_P1_info;
 },
 Text.ParserCombinators.ReadP.readS_to_P1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3qz3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3qz4; else goto c3qz5;
       c3qz4: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.readS_to_P1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qz5: // global
           I64[Sp - 8] = block_c3qz0_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.readS_to_P1_info" {
     Text.ParserCombinators.ReadP.readS_to_P1_info:
         const Text.ParserCombinators.ReadP.readS_to_P1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3qz0() //  [R1]
         { []
         }
     {offset
       c3qz0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qz8; else goto c3qz7;
       c3qz8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qz7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qz0_info" {
     block_c3qz0_info:
         const _c3qz0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.419160149 UTC

[section ""data" . Text.ParserCombinators.ReadP.readS_to_P_closure" {
     Text.ParserCombinators.ReadP.readS_to_P_closure:
         const Text.ParserCombinators.ReadP.readS_to_P_info;
 },
 Text.ParserCombinators.ReadP.readS_to_P_entry() //  [R2, R3]
         { []
         }
     {offset
       c3qzm: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.readS_to_P1_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.readS_to_P_info" {
     Text.ParserCombinators.ReadP.readS_to_P_info:
         const Text.ParserCombinators.ReadP.readS_to_P_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.424680636 UTC

[section ""cstring" . lvl_r3oqE_bytes" {
     lvl_r3oqE_bytes:
         I8[] [84,101,120,116,47,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,47,82,101,97,100,80,46,104,115,58,40,49,51,52,44,51,41,45,40,49,53,55,44,53,50,41,124,102,117,110,99,116,105,111,110,32,60,124,62]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.427341872 UTC

[section ""data" . lvl1_r3oqF_closure" {
     lvl1_r3oqF_closure:
         const lvl1_r3oqF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3oqF_entry() //  [R1]
         { []
         }
     {offset
       c3qzA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qzB; else goto c3qzC;
       c3qzB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qzC: // global
           (_c3qzx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3qzx::I64 == 0) goto c3qzz; else goto c3qzy;
       c3qzz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3qzy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3qzx::I64;
           R2 = lvl_r3oqE_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r3oqF_info" {
     lvl1_r3oqF_info:
         const lvl1_r3oqF_entry;
         const 0;
         const 4294967317;
         const S3oJX_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.451804798 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info;
         const 0;
 },
 sat_s3osS_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qAz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qAD; else goto c3qAC;
       c3qAD: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qAC: // global
           _s3osM::P64 = P64[R1 + 7];
           _s3osP::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3osP::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = _s3osM::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3osS_info" {
     sat_s3osS_info:
         const sat_s3osS_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+8;
 },
 sat_s3osY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qAS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qAT; else goto c3qAU;
       c3qAT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qAU: // global
           I64[Sp - 16] = block_c3qAQ_info;
           R2 = R2;
           _s3osU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3osU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3osY_info" {
     sat_s3osY_info:
         const sat_s3osY_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+8;
 },
 _c3qAQ() //  [R1]
         { []
         }
     {offset
       c3qAQ: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qAQ_info" {
     block_c3qAQ_info:
         const _c3qAQ;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 },
 sat_s3ot3_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qB8: // global
           _s3ot0::P64 = R2;
           _s3ot3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qB9; else goto c3qBa;
       c3qBa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qBc; else goto c3qBb;
       c3qBc: // global
           HpAlloc = 32;
           goto c3qB9;
       c3qB9: // global
           R2 = _s3ot0::P64;
           R1 = _s3ot3::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qBb: // global
           _s3osT::P64 = P64[_s3ot3::P64 + 7];
           _s3osZ::P64 = P64[_s3ot3::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3osZ::P64;
           P64[Hp] = _s3ot0::P64;
           I64[Sp - 16] = block_c3qB6_info;
           R2 = _s3ot0::P64;
           R1 = _s3osT::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ot3_info" {
     sat_s3ot3_info:
         const sat_s3ot3_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+8;
 },
 _c3qB6() //  [R1]
         { []
         }
     {offset
       c3qB6: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qB6_info" {
     block_c3qB6_info:
         const _c3qB6;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 },
 sat_s3ot7_entry() //  [R1]
         { []
         }
     {offset
       c3qBt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3qBu; else goto c3qBv;
       c3qBu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qBv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3qBr_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ot7_info" {
     sat_s3ot7_info:
         const sat_s3ot7_entry;
         const 3;
         const 15;
 },
 _c3qBr() //  [R1]
         { []
         }
     {offset
       c3qBr: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3qBr_info" {
     block_c3qBr_info:
         const _c3qBr;
         const 1;
         const 30;
 },
 sat_s3ot8_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qBA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qBE; else goto c3qBD;
       c3qBE: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qBD: // global
           _s3osH::P64 = P64[R1 + 7];
           _s3ot4::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3ot7_info;
           P64[Hp - 32] = _s3osH::P64;
           P64[Hp - 24] = _s3ot4::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ot8_info" {
     sat_s3ot8_info:
         const sat_s3ot8_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3otg_entry() //  [R1]
         { []
         }
     {offset
       c3qC2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3qC6; else goto c3qC7;
       c3qC6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qC7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3qC0_info;
           _s3otd::P64 = P64[R1 + 32];
           R2 = _s3otd::P64;
           _s3otc::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s3otc::P64;
           P64[Sp - 24] = _s3otd::P64;
           Sp = Sp - 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3otg_info" {
     sat_s3otg_info:
         const sat_s3otg_entry;
         const 3;
         const 15;
 },
 _c3qC0() //  [R1]
         { []
         }
     {offset
       c3qC0: // global
           I64[Sp] = block_c3qC5_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3qC0_info" {
     block_c3qC0_info:
         const _c3qC0;
         const 2;
         const 30;
 },
 _c3qC5() //  [R1]
         { []
         }
     {offset
       c3qC5: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3qC5_info" {
     block_c3qC5_info:
         const _c3qC5;
         const 130;
         const 30;
 },
 sat_s3oth_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qCe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qCi; else goto c3qCh;
       c3qCi: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qCh: // global
           _s3ota::P64 = P64[R1 + 7];
           _s3otc::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3otg_info;
           P64[Hp - 32] = _s3ota::P64;
           P64[Hp - 24] = _s3otc::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oth_info" {
     sat_s3oth_info:
         const sat_s3oth_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3otm_entry() //  [R1]
         { []
         }
     {offset
       c3qCD: // global
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3otm_info" {
     sat_s3otm_info:
         const sat_s3otm_entry;
         const 2;
         const 18;
 },
 sat_s3otn_entry() //  [R1]
         { []
         }
     {offset
       c3qCG: // global
           _s3otn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qCH; else goto c3qCI;
       c3qCI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qCK; else goto c3qCJ;
       c3qCK: // global
           HpAlloc = 32;
           goto c3qCH;
       c3qCH: // global
           R1 = _s3otn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qCJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3otn::P64;
           _s3oti::P64 = P64[_s3otn::P64 + 16];
           _s3otj::P64 = P64[_s3otn::P64 + 24];
           _s3otl::P64 = P64[_s3otn::P64 + 32];
           I64[Hp - 24] = sat_s3otm_info;
           P64[Hp - 8] = _s3otj::P64;
           P64[Hp] = _s3otl::P64;
           R3 = Hp - 24;
           R2 = _s3oti::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3otn_info" {
     sat_s3otn_info:
         const sat_s3otn_entry;
         const 3;
         const 15;
 },
 sat_s3oto_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qCM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qCQ; else goto c3qCP;
       c3qCQ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qCP: // global
           _s3oti::P64 = P64[R1 + 7];
           _s3otj::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3otn_info;
           P64[Hp - 32] = _s3oti::P64;
           P64[Hp - 24] = _s3otj::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oto_info" {
     sat_s3oto_info:
         const sat_s3oto_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3ots_entry() //  [R1]
         { []
         }
     {offset
       c3qD8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qD9; else goto c3qDa;
       c3qD9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qDa: // global
           I64[Sp - 16] = block_c3qD6_info;
           _s3otq::P64 = P64[R1 + 24];
           R2 = _s3otq::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 8] = _s3otq::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ots_info" {
     sat_s3ots_info:
         const sat_s3ots_entry;
         const 2;
         const 18;
 },
 _c3qD6() //  [R1]
         { []
         }
     {offset
       c3qD6: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qD6_info" {
     block_c3qD6_info:
         const _c3qD6;
         const 1;
         const 30;
 },
 sat_s3ott_entry() //  [R1]
         { []
         }
     {offset
       c3qDe: // global
           _s3ott::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qDf; else goto c3qDg;
       c3qDg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qDi; else goto c3qDh;
       c3qDi: // global
           HpAlloc = 32;
           goto c3qDf;
       c3qDf: // global
           R1 = _s3ott::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qDh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ott::P64;
           _s3oti::P64 = P64[_s3ott::P64 + 16];
           _s3otp::P64 = P64[_s3ott::P64 + 24];
           _s3otq::P64 = P64[_s3ott::P64 + 32];
           I64[Hp - 24] = sat_s3ots_info;
           P64[Hp - 8] = _s3otp::P64;
           P64[Hp] = _s3otq::P64;
           R3 = Hp - 24;
           R2 = _s3oti::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ott_info" {
     sat_s3ott_info:
         const sat_s3ott_entry;
         const 3;
         const 15;
 },
 sat_s3otu_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qDk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qDo; else goto c3qDn;
       c3qDo: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qDn: // global
           _s3oti::P64 = P64[R1 + 7];
           _s3otp::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3ott_info;
           P64[Hp - 32] = _s3oti::P64;
           P64[Hp - 24] = _s3otp::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3otu_info" {
     sat_s3otu_info:
         const sat_s3otu_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3otw_entry() //  [R1]
         { []
         }
     {offset
       c3qDv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qDw; else goto c3qDx;
       c3qDw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qDx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3otw_info" {
     sat_s3otw_info:
         const sat_s3otw_entry;
         const 2;
         const 18;
 },
 sat_s3otz_entry() //  [R1]
         { []
         }
     {offset
       c3qDE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qDF; else goto c3qDG;
       c3qDF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qDG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3otz_info" {
     sat_s3otz_info:
         const sat_s3otz_entry;
         const 2;
         const 4294967314;
         const S3oJX_srt+8;
 },
 sat_s3otH_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qE1: // global
           _s3otE::P64 = R2;
           _s3otH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qE2; else goto c3qE3;
       c3qE3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qE5; else goto c3qE4;
       c3qE5: // global
           HpAlloc = 32;
           goto c3qE2;
       c3qE2: // global
           R2 = _s3otE::P64;
           R1 = _s3otH::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qE4: // global
           _s3otB::P64 = P64[_s3otH::P64 + 7];
           _s3otD::P64 = P64[_s3otH::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3otD::P64;
           P64[Hp] = _s3otE::P64;
           I64[Sp - 16] = block_c3qDZ_info;
           R2 = _s3otE::P64;
           R1 = _s3otB::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3otH_info" {
     sat_s3otH_info:
         const sat_s3otH_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+8;
 },
 _c3qDZ() //  [R1]
         { []
         }
     {offset
       c3qDZ: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qDZ_info" {
     block_c3qDZ_info:
         const _c3qDZ;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 },
 sat_s3otK_entry() //  [R1]
         { []
         }
     {offset
       c3qEf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qEg; else goto c3qEh;
       c3qEg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qEh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3otK_info" {
     sat_s3otK_info:
         const sat_s3otK_entry;
         const 2;
         const 4294967314;
         const S3oJX_srt+8;
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c3qEn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3qEo; else goto c3qEp;
       c3qEo: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qEp: // global
           I64[Sp - 24] = block_c3qDH_info;
           R1 = R2;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3qGD; else goto c3qDI;
       u3qGD: // global
           call _c3qDH(R1) args: 0, res: 0, upd: 0;
       c3qDI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3oJX_srt+8;
 },
 _c3qDH() //  [R1]
         { []
         }
     {offset
       c3qDH: // global
           _s3osD::P64 = P64[Sp + 16];
           _c3qEm::P64 = R1 & 7;
           if (_c3qEm::P64 == 1) goto c3qEk; else goto u3qGl;
       c3qEk: // global
           I64[Sp - 8] = block_c3qDN_info;
           _s3otB::P64 = P64[R1 + 7];
           R1 = _s3osD::P64;
           P64[Sp] = _s3otB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qGA; else goto c3qDO;
       u3qGA: // global
           call _c3qDN(R1) args: 0, res: 0, upd: 0;
       c3qDO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3qGl: // global
           if (_c3qEm::P64 == 4) goto c3qEl; else goto u3qGm;
       c3qEl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qG7; else goto c3qG6;
       c3qG7: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qG6: // global
           _s3otI::P64 = P64[R1 + 4];
           _s3otJ::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3otK_info;
           P64[Hp - 32] = _s3osD::P64;
           P64[Hp - 24] = _s3otJ::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3otI::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qGm: // global
           Sp = Sp + 8;
           call _s3osE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3qDH_info" {
     block_c3qDH_info:
         const _c3qDH;
         const 2;
         const 12884901918;
         const S3oJX_srt+8;
 },
 _c3qDN() //  [R1]
         { []
         }
     {offset
       c3qDN: // global
           if (R1 & 7 == 1) goto c3qG0; else goto u3qGn;
       c3qG0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qG3; else goto c3qG2;
       c3qG3: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qG2: // global
           _s3otD::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_s3otH_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3otD::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qGn: // global
           Sp = Sp + 16;
           call _s3osE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3qDN_info" {
     block_c3qDN_info:
         const _c3qDN;
         const 3;
         const 12884901918;
         const S3oJX_srt+8;
 },
 _s3osE() //  []
         { []
         }
     {offset
       s3osE: // global
           I64[Sp - 8] = block_c3qzT_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qGE; else goto c3qzU;
       u3qGE: // global
           call _c3qzT(R1) args: 0, res: 0, upd: 0;
       c3qzU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qzT() //  [R1]
         { []
         }
     {offset
       c3qzT: // global
           _s3osC::P64 = P64[Sp + 8];
           if (R1 & 7 == 4) goto c3qFO; else goto c3qEt;
       c3qFO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qFR; else goto c3qFQ;
       c3qFR: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qFQ: // global
           _s3otx::P64 = P64[R1 + 4];
           _s3oty::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3otz_info;
           P64[Hp - 32] = _s3osC::P64;
           P64[Hp - 24] = _s3oty::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3otx::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qEt: // global
           I64[Sp + 8] = block_c3qzY_info;
           _s3osG::P64 = R1;
           R1 = _s3osC::P64;
           P64[Sp + 16] = _s3osG::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3qGq; else goto c3qzZ;
       u3qGq: // global
           call _c3qzY(R1) args: 0, res: 0, upd: 0;
       c3qzZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qzT_info" {
     block_c3qzT_info:
         const _c3qzT;
         const 130;
         const 12884901918;
         const S3oJX_srt+8;
 },
 _c3qzY() //  [R1]
         { []
         }
     {offset
       c3qzY: // global
           _s3osG::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto c3qFM; else goto c3qEw;
       c3qFM: // global
           R1 = _s3osG::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3qEw: // global
           I64[Sp] = block_c3qA3_info;
           _s3osH::P64 = R1;
           R1 = _s3osG::P64;
           P64[Sp + 8] = _s3osH::P64;
           if (R1 & 7 != 0) goto u3qGr; else goto c3qA4;
       u3qGr: // global
           call _c3qA3(R1) args: 0, res: 0, upd: 0;
       c3qA4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qzY_info" {
     block_c3qzY_info:
         const _c3qzY;
         const 1;
         const 12884901918;
         const S3oJX_srt+8;
 },
 _c3qA3() //  [R1]
         { []
         }
     {offset
       c3qA3: // global
           _s3osH::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto c3qFI; else goto c3qF7;
       c3qFI: // global
           R1 = _s3osH::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3qF7: // global
           I64[Sp - 8] = block_c3qBF_info;
           _s3osI::P64 = R1;
           R1 = _s3osH::P64;
           P64[Sp] = _s3osI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qGs; else goto c3qBG;
       u3qGs: // global
           call _c3qBF(R1) args: 0, res: 0, upd: 0;
       c3qBG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qA3_info" {
     block_c3qA3_info:
         const _c3qA3;
         const 1;
         const 12884901918;
         const S3oJX_srt+8;
 },
 _c3qBF() //  [R1]
         { []
         }
     {offset
       c3qBF: // global
           _s3osI::P64 = P64[Sp + 8];
           _c3qGc::P64 = R1 & 7;
           if (_c3qGc::P64 == 2) goto c3qFd; else goto u3qGj;
       c3qFd: // global
           I64[Sp - 8] = block_c3qBL_info;
           _s3ota::P64 = P64[R1 + 6];
           R1 = _s3osI::P64;
           P64[Sp] = _s3ota::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qGw; else goto c3qBM;
       u3qGw: // global
           call _c3qBL(R1) args: 0, res: 0, upd: 0;
       c3qBM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3qGj: // global
           if (_c3qGc::P64 == 5) goto c3qFo; else goto u3qGo;
       c3qFo: // global
           I64[Sp + 8] = block_c3qCl_info;
           _s3oti::P64 = P64[R1 + 3];
           R1 = _s3osI::P64;
           P64[Sp + 16] = _s3oti::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3qGx; else goto c3qCm;
       u3qGx: // global
           call _c3qCl(R1) args: 0, res: 0, upd: 0;
       c3qCm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3qGo: // global
           Sp = Sp + 8;
           call _s3osJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3qBF_info" {
     block_c3qBF_info:
         const _c3qBF;
         const 2;
         const 12884901918;
         const S3oJX_srt+8;
 },
 _c3qBL() //  [R1]
         { []
         }
     {offset
       c3qBL: // global
           if (R1 & 7 == 5) goto c3qFj; else goto u3qGp;
       c3qFj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qFm; else goto c3qFl;
       c3qFm: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qFl: // global
           _s3otc::P64 = P64[R1 + 3];
           I64[Hp - 32] = sat_s3oth_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3otc::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qGp: // global
           Sp = Sp + 16;
           call _s3osJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3qBL_info" {
     block_c3qBL_info:
         const _c3qBL;
         const 3;
         const 12884901918;
         const S3oJX_srt+8;
 },
 _c3qCl() //  [R1]
         { []
         }
     {offset
       c3qCl: // global
           _s3oti::P64 = P64[Sp + 8];
           _c3qGd::P64 = R1 & 7;
           if (_c3qGd::P64 < 5) goto u3qGk; else goto c3qFB;
       u3qGk: // global
           if (_c3qGd::P64 < 2) goto c3qFr; else goto c3qFw;
       c3qFr: // global
           Hp = Hp + 40;
           _s3otj::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qFz; else goto c3qFt;
       c3qFt: // global
           I64[Hp - 32] = sat_s3oto_info;
           P64[Hp - 24] = _s3oti::P64;
           P64[Hp - 16] = _s3otj::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qFw: // global
           Hp = Hp + 40;
           _s3otj::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qFz; else goto c3qFy;
       c3qFz: // global
           HpAlloc = 40;
           R1 = _s3otj::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qFy: // global
           _s3otp::P64 = P64[_s3otj::P64 + 6];
           I64[Hp - 32] = sat_s3otu_info;
           P64[Hp - 24] = _s3oti::P64;
           P64[Hp - 16] = _s3otp::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qFB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qFE; else goto c3qFD;
       c3qFE: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qFD: // global
           _s3otv::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3otw_info;
           P64[Hp - 24] = _s3oti::P64;
           P64[Hp - 16] = _s3otv::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qCl_info" {
     block_c3qCl_info:
         const _c3qCl;
         const 1;
         const 30;
 },
 _s3osJ() //  []
         { []
         }
     {offset
       s3osJ: // global
           _s3osI::P64 = P64[Sp];
           I64[Sp] = block_c3qAd_info;
           R1 = _s3osI::P64;
           if (R1 & 7 != 0) goto u3qGF; else goto c3qAe;
       u3qGF: // global
           call _c3qAd(R1) args: 0, res: 0, upd: 0;
       c3qAe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qAd() //  [R1]
         { []
         }
     {offset
       c3qAd: // global
           _s3osH::P64 = P64[Sp + 8];
           if (R1 & 7 == 5) goto c3qF2; else goto c3qEB;
       c3qF2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qF5; else goto c3qF4;
       c3qF5: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qF4: // global
           _s3ot4::P64 = P64[R1 + 3];
           I64[Hp - 32] = sat_s3ot8_info;
           P64[Hp - 24] = _s3osH::P64;
           P64[Hp - 16] = _s3ot4::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qEB: // global
           I64[Sp] = block_c3qAi_info;
           _s3osL::P64 = R1;
           R1 = _s3osH::P64;
           P64[Sp + 8] = _s3osL::P64;
           if (R1 & 7 != 0) goto u3qGt; else goto c3qAj;
       u3qGt: // global
           call _c3qAi(R1) args: 0, res: 0, upd: 0;
       c3qAj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qAd_info" {
     block_c3qAd_info:
         const _c3qAd;
         const 1;
         const 12884901918;
         const S3oJX_srt+8;
 },
 _c3qAi() //  [R1]
         { []
         }
     {offset
       c3qAi: // global
           _s3osL::P64 = P64[Sp + 8];
           if (R1 & 7 == 2) goto c3qEP; else goto c3qEE;
       c3qEP: // global
           I64[Sp] = block_c3qAG_info;
           _s3osT::P64 = P64[R1 + 6];
           R1 = _s3osL::P64;
           P64[Sp + 8] = _s3osT::P64;
           if (R1 & 7 != 0) goto u3qGv; else goto c3qAH;
       u3qGv: // global
           call _c3qAG(R1) args: 0, res: 0, upd: 0;
       c3qAH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3qEE: // global
           I64[Sp] = block_c3qAn_info;
           _s3osM::P64 = R1;
           R1 = _s3osL::P64;
           P64[Sp + 8] = _s3osM::P64;
           if (R1 & 7 != 0) goto u3qGu; else goto c3qAo;
       u3qGu: // global
           call _c3qAn(R1) args: 0, res: 0, upd: 0;
       c3qAo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qAi_info" {
     block_c3qAi_info:
         const _c3qAi;
         const 1;
         const 12884901918;
         const S3oJX_srt+8;
 },
 _c3qAG() //  [R1]
         { []
         }
     {offset
       c3qAG: // global
           _s3osT::P64 = P64[Sp + 8];
           if (R1 & 7 < 2) goto c3qES; else goto c3qEX;
       c3qES: // global
           Hp = Hp + 40;
           _s3osU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qF0; else goto c3qEU;
       c3qEU: // global
           I64[Hp - 32] = sat_s3osY_info;
           P64[Hp - 24] = _s3osT::P64;
           P64[Hp - 16] = _s3osU::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qEX: // global
           Hp = Hp + 40;
           _s3osU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qF0; else goto c3qEZ;
       c3qF0: // global
           HpAlloc = 40;
           R1 = _s3osU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qEZ: // global
           _s3osZ::P64 = P64[_s3osU::P64 + 6];
           I64[Hp - 32] = sat_s3ot3_info;
           P64[Hp - 24] = _s3osT::P64;
           P64[Hp - 16] = _s3osZ::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qAG_info" {
     block_c3qAG_info:
         const _c3qAG;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 },
 _c3qAn() //  [R1]
         { []
         }
     {offset
       c3qAn: // global
           if (R1 & 7 < 2) goto c3qEI; else goto c3qEK;
       c3qEI: // global
           R1 = lvl1_r3oqF_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3qEK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qEN; else goto c3qEM;
       c3qEN: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qEM: // global
           _s3osP::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_s3osS_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3osP::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qAn_info" {
     block_c3qAn_info:
         const _c3qAn;
         const 1;
         const 12884901918;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.54528693 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info;
         const 0;
 },
 sat_s3otR_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qKc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qKd; else goto c3qKe;
       c3qKd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qKe: // global
           I64[Sp - 16] = block_c3qKa_info;
           R2 = R2;
           _s3otM::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3otM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3otR_info" {
     sat_s3otR_info:
         const sat_s3otR_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+24;
 },
 _c3qKa() //  [R1]
         { []
         }
     {offset
       c3qKa: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qKa_info" {
     block_c3qKa_info:
         const _c3qKa;
         const 1;
         const 4294967326;
         const S3oJX_srt+24;
 },
 sat_s3otV_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qKr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qKs; else goto c3qKt;
       c3qKs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qKt: // global
           I64[Sp - 16] = block_c3qKp_info;
           R2 = R2;
           _s3otM::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3otM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3otV_info" {
     sat_s3otV_info:
         const sat_s3otV_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+24;
 },
 _c3qKp() //  [R1]
         { []
         }
     {offset
       c3qKp: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qKp_info" {
     block_c3qKp_info:
         const _c3qKp;
         const 1;
         const 4294967326;
         const S3oJX_srt+24;
 },
 sat_s3otZ_entry() //  [R1]
         { []
         }
     {offset
       c3qKE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qKF; else goto c3qKG;
       c3qKF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qKG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3otZ_info" {
     sat_s3otZ_info:
         const sat_s3otZ_entry;
         const 2;
         const 4294967314;
         const S3oJX_srt+24;
 },
 sat_s3oub_entry() //  [R1]
         { []
         }
     {offset
       c3qL3: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_s3ou1_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oub_info" {
     sat_s3oub_info:
         const sat_s3oub_entry;
         const 2;
         const 18;
 },
 go_s3ou1_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qLa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3qLb; else goto c3qLc;
       c3qLb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qLc: // global
           I64[Sp - 24] = block_c3qKO_info;
           _s3ou1::P64 = R1;
           _s3otM::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3otM::P64;
           P64[Sp - 8] = _s3ou1::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3qLu; else goto c3qKP;
       u3qLu: // global
           call _c3qKO(R1) args: 0, res: 0, upd: 0;
       c3qKP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s3ou1_info" {
     go_s3ou1_info:
         const go_s3ou1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3qKO() //  [R1]
         { []
         }
     {offset
       c3qKO: // global
           if (R1 & 7 == 1) goto c3qL7; else goto c3qL8;
       c3qL7: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qL8: // global
           I64[Sp - 8] = block_c3qKU_info;
           _s3ou5::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3ou5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qLt; else goto c3qKV;
       u3qLt: // global
           call _c3qKU(R1) args: 0, res: 0, upd: 0;
       c3qKV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qKO_info" {
     block_c3qKO_info:
         const _c3qKO;
         const 2;
         const 30;
 },
 _c3qKU() //  [R1]
         { []
         }
     {offset
       c3qKU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qLn; else goto c3qLm;
       c3qLn: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qLm: // global
           _s3ou7::P64 = P64[R1 + 7];
           _s3ou8::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3oub_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3qLf_info;
           R2 = _s3ou7::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3ou8::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qKU_info" {
     block_c3qKU_info:
         const _c3qKU;
         const 3;
         const 30;
 },
 _c3qLf() //  [R1]
         { []
         }
     {offset
       c3qLf: // global
           _s3ou8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3qLj_info;
           R3 = _s3ou8::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qLf_info" {
     block_c3qLf_info:
         const _c3qLf;
         const 2;
         const 30;
 },
 _c3qLj() //  [R1]
         { []
         }
     {offset
       c3qLj: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qLj_info" {
     block_c3qLj_info:
         const _c3qLj;
         const 1;
         const 30;
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c3qLC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qLD; else goto c3qLE;
       c3qLD: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qLE: // global
           I64[Sp - 16] = block_c3qK0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qMl; else goto c3qK1;
       u3qMl: // global
           call _c3qK0(R1) args: 0, res: 0, upd: 0;
       c3qK1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S3oJX_srt+8;
 },
 _c3qK0() //  [R1]
         { []
         }
     {offset
       c3qK0: // global
           _s3otM::P64 = P64[Sp + 8];
           _c3qLB::P64 = R1 & 7;
           if (_c3qLB::P64 < 4) goto u3qMf; else goto u3qMh;
       u3qMf: // global
           if (_c3qLB::P64 < 3) goto u3qMg; else goto u3qMi;
       u3qMg: // global
           if (_c3qLB::P64 < 2) goto c3qLw; else goto c3qLx;
       c3qLw: // global
           Hp = Hp + 40;
           _s3otN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qLM; else goto c3qLH;
       c3qLH: // global
           _s3otO::P64 = P64[_s3otN::P64 + 7];
           I64[Hp - 32] = sat_s3otR_info;
           P64[Hp - 24] = _s3otM::P64;
           P64[Hp - 16] = _s3otO::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qLx: // global
           Hp = Hp + 40;
           _s3otN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qLM; else goto c3qLL;
       c3qLM: // global
           HpAlloc = 40;
           R1 = _s3otN::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qLL: // global
           _s3otS::P64 = P64[_s3otN::P64 + 6];
           I64[Hp - 32] = sat_s3otV_info;
           P64[Hp - 24] = _s3otM::P64;
           P64[Hp - 16] = _s3otS::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qMi: // global
           Sp = Sp + 16;
           call _c3qM6() args: 0, res: 0, upd: 0;
       u3qMh: // global
           if (_c3qLB::P64 < 5) goto c3qLz; else goto c3qLA;
       c3qLz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qLS; else goto c3qLR;
       c3qLS: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qLR: // global
           _s3otW::P64 = P64[R1 + 4];
           _s3otX::P64 = P64[R1 + 12];
           I64[Hp - 24] = sat_s3otZ_info;
           P64[Hp - 8] = _s3otM::P64;
           P64[Hp] = _s3otX::P64;
           I64[Sp] = block_c3qLP_info;
           R2 = _s3otW::P64;
           R1 = _s3otM::P64;
           P64[Sp + 8] = Hp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3qLA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qM0; else goto c3qLZ;
       c3qM0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qLZ: // global
           _s3ou0::P64 = P64[R1 + 3];
           I64[Hp - 8] = go_s3ou1_info;
           P64[Hp] = _s3otM::P64;
           I64[Sp + 8] = block_c3qLX_info;
           R2 = _s3ou0::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s3ou1_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qK0_info" {
     block_c3qK0_info:
         const _c3qK0;
         const 1;
         const 21474836510;
         const S3oJX_srt+8;
 },
 _c3qLP() //  [R1]
         { []
         }
     {offset
       c3qLP: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qLP_info" {
     block_c3qLP_info:
         const _c3qLP;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 },
 _c3qLX() //  [R1]
         { []
         }
     {offset
       c3qLX: // global
           if (R1 & 7 == 1) goto u3qMj; else goto c3qMa;
       u3qMj: // global
           Sp = Sp + 8;
           call _c3qM6() args: 0, res: 0, upd: 0;
       c3qMa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qMd; else goto c3qMc;
       c3qMd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qMc: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R1;
           R1 = Hp - 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qLX_info" {
     block_c3qLX_info:
         const _c3qLX;
         const 0;
         const 30;
 },
 _c3qM6() //  []
         { []
         }
     {offset
       c3qM6: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.587691217 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info;
         const 0;
 },
 sat_s3ouk_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qNN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qNR; else goto c3qNQ;
       c3qNR: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qNQ: // global
           _s3ouh::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ouh::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ouk_info" {
     sat_s3ouk_info:
         const sat_s3ouk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3oul_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qNS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qNW; else goto c3qNV;
       c3qNW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qNV: // global
           _s3oug::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s3ouk_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = _s3oug::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oul_info" {
     sat_s3oul_info:
         const sat_s3oul_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3oJX_srt+24;
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c3qNX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qO1; else goto c3qO0;
       c3qO1: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qO0: // global
           I64[Hp - 8] = sat_s3oul_info;
           P64[Hp] = R3;
           R3 = Hp - 7;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3oJX_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.597480903 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info;
         const 0;
 },
 sat_s3ouo_entry() //  [R1]
         { []
         }
     {offset
       c3qOm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qOn; else goto c3qOo;
       c3qOn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qOo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ouo_info" {
     sat_s3ouo_info:
         const sat_s3ouo_entry;
         const 2;
         const 18;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       c3qOp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qOt; else goto c3qOs;
       c3qOt: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qOs: // global
           I64[Hp - 24] = sat_s3ouo_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3oJX_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.603537561 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP1_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP1_closure:
         const Text.ParserCombinators.ReadP.Result_con_info;
         const GHC.Types.[]_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.608170307 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info;
         const 0;
 },
 m2_s3our_entry() //  [R1]
         { []
         }
     {offset
       c3qOP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qOQ; else goto c3qOR;
       c3qOQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qOR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fAlternativeP1_closure+4;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m2_s3our_info" {
     m2_s3our_info:
         const m2_s3our_entry;
         const 1;
         const 4294967312;
         const S3oJX_srt+8;
 },
 sat_s3ouw_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qP4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qP8; else goto c3qP7;
       c3qP8: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qP7: // global
           _s3out::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3out::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ouw_info" {
     sat_s3ouw_info:
         const sat_s3ouw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3oux_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qP9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qPd; else goto c3qPc;
       c3qPd: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qPc: // global
           _s3our::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s3ouw_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = _s3our::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oux_info" {
     sat_s3oux_info:
         const sat_s3oux_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3oJX_srt+24;
 },
 some_v_s3ouq_entry() //  [R1]
         { []
         }
     {offset
       c3qPg: // global
           _s3ouq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3qPh; else goto c3qPi;
       c3qPi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qPk; else goto c3qPj;
       c3qPk: // global
           HpAlloc = 40;
           goto c3qPh;
       c3qPh: // global
           R1 = _s3ouq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qPj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ouq::P64;
           _s3oup::P64 = P64[_s3ouq::P64 + 16];
           I64[Hp - 32] = m2_s3our_info;
           P64[Hp - 16] = _s3ouq::P64;
           I64[Hp - 8] = sat_s3oux_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 32] = block_c3qPe_info;
           R3 = _s3oup::P64;
           R2 = GHC.Types.:_closure+2;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . some_v_s3ouq_info" {
     some_v_s3ouq_info:
         const some_v_s3ouq_entry;
         const 1;
         const 21474836496;
         const S3oJX_srt+8;
 },
 _c3qPe() //  [R1]
         { []
         }
     {offset
       c3qPe: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3qPe_info" {
     block_c3qPe_info:
         const _c3qPe;
         const 1;
         const 4294967326;
         const S3oJX_srt+24;
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$csome_entry() //  [R2]
         { []
         }
     {offset
       c3qPo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qPs; else goto c3qPr;
       c3qPs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qPr: // global
           I64[Hp - 16] = some_v_s3ouq_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_entry;
         const 0;
         const 158913789966;
         const 4294967301;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.623374248 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info;
         const 0;
 },
 sat_s3ouz_entry() //  [R1]
         { []
         }
     {offset
       c3qQ2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qQ3; else goto c3qQ4;
       c3qQ3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qQ4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ouz_info" {
     sat_s3ouz_info:
         const sat_s3ouz_entry;
         const 1;
         const 16;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_entry() //  [R2]
         { []
         }
     {offset
       c3qQ5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qQ9; else goto c3qQ8;
       c3qQ9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qQ8: // global
           I64[Hp - 16] = sat_s3ouz_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S3oJX_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.629673205 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c3qQo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qQp; else goto c3qQq;
       c3qQp: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qQq: // global
           I64[Sp - 16] = block_c3qQm_info;
           _s3ouB::P64 = R3;
           R3 = R2;
           R2 = GHC.Base.breakpoint_closure+1;
           P64[Sp - 8] = _s3ouB::P64;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S3oJX_srt+32;
 },
 _c3qQm() //  [R1]
         { []
         }
     {offset
       c3qQm: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qQm_info" {
     block_c3qQm_info:
         const _c3qQm;
         const 1;
         const 4294967326;
         const S3oJX_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.637548454 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info;
         const 0;
 },
 many_v_s3ouE_entry() //  [R1]
         { []
         }
     {offset
       c3qQM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3qQQ; else goto c3qQR;
       c3qQQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qQR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3qQK_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Types.:_closure+2;
           P64[Sp - 24] = R1;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . many_v_s3ouE_info" {
     many_v_s3ouE_info:
         const many_v_s3ouE_entry;
         const 1;
         const 38654705680;
         const S3oJX_srt+8;
 },
 _c3qQK() //  [R1]
         { []
         }
     {offset
       c3qQK: // global
           _s3ouE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3qQP_info;
           R3 = _s3ouE::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3qQK_info" {
     block_c3qQK_info:
         const _c3qQK;
         const 1;
         const 38654705694;
         const S3oJX_srt+8;
 },
 _c3qQP() //  [R1]
         { []
         }
     {offset
       c3qQP: // global
           R3 = Text.ParserCombinators.ReadP.$fAlternativeP1_closure+4;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3qQP_info" {
     block_c3qQP_info:
         const _c3qQP;
         const 0;
         const 4294967326;
         const S3oJX_srt+8;
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_entry() //  [R2]
         { []
         }
     {offset
       c3qQX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qR1; else goto c3qR0;
       c3qR1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qR0: // global
           I64[Hp - 16] = many_v_s3ouE_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_entry;
         const 0;
         const 1138166333454;
         const 4294967301;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.648262413 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure" {
     Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure:
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_info;
         const 0;
 },
 sat_s3ouK_entry() //  [R1]
         { []
         }
     {offset
       c3qRr: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ouK_info" {
     sat_s3ouK_info:
         const sat_s3ouK_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fMonadP_$c>>_entry() //  [R2, R3]
         { []
         }
     {offset
       c3qRu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qRy; else goto c3qRx;
       c3qRy: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qRx: // global
           I64[Hp - 8] = sat_s3ouK_info;
           P64[Hp] = R3;
           R3 = Hp - 7;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fMonadP_$c>>_info" {
     Text.ParserCombinators.ReadP.$fMonadP_$c>>_info:
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S3oJX_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.653490497 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorP_closure+1;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.655529924 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadP_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure+2;
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.658383416 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeP_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure+2;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.662280992 UTC

[section ""data" . Text.ParserCombinators.ReadP.readP_to_S_closure" {
     Text.ParserCombinators.ReadP.readP_to_S_closure:
         const Text.ParserCombinators.ReadP.readP_to_S_info;
 },
 sat_s3ouM_entry() //  [R1]
         { []
         }
     {offset
       c3qRT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qRU; else goto c3qRV;
       c3qRU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qRV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ouM_info" {
     sat_s3ouM_info:
         const sat_s3ouM_entry;
         const 1;
         const 16;
 },
 Text.ParserCombinators.ReadP.readP_to_S_entry() //  [R2]
         { []
         }
     {offset
       c3qRW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qS0; else goto c3qRZ;
       c3qS0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.readP_to_S_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qRZ: // global
           I64[Hp - 16] = sat_s3ouM_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.readP_to_S_info" {
     Text.ParserCombinators.ReadP.readP_to_S_info:
         const Text.ParserCombinators.ReadP.readP_to_S_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.668490454 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailP_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailP_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadP.$fMonadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.670359425 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadPlusP_closure" {
     Text.ParserCombinators.ReadP.$fMonadPlusP_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadP_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.672708572 UTC

[section ""data" . Text.ParserCombinators.ReadP.get_closure" {
     Text.ParserCombinators.ReadP.get_closure:
         const Text.ParserCombinators.ReadP.get_info;
 },
 Text.ParserCombinators.ReadP.get_entry() //  [R2]
         { []
         }
     {offset
       c3qSg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qSk; else goto c3qSj;
       c3qSk: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.get_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qSj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.get_info" {
     Text.ParserCombinators.ReadP.get_info:
         const Text.ParserCombinators.ReadP.get_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.676743147 UTC

[section ""data" . Text.ParserCombinators.ReadP.look_closure" {
     Text.ParserCombinators.ReadP.look_closure:
         const Text.ParserCombinators.ReadP.look_info;
 },
 Text.ParserCombinators.ReadP.look_entry() //  [R2]
         { []
         }
     {offset
       c3qSv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qSz; else goto c3qSy;
       c3qSz: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.look_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qSy: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.look_info" {
     Text.ParserCombinators.ReadP.look_info:
         const Text.ParserCombinators.ReadP.look_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.680716884 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_info;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry() //  []
         { []
         }
     {offset
       c3qSJ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeReadP4_info" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP4_info:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.685513142 UTC

[section ""data" . Text.ParserCombinators.ReadP.pfail_closure" {
     Text.ParserCombinators.ReadP.pfail_closure:
         const Text.ParserCombinators.ReadP.pfail_info;
 },
 Text.ParserCombinators.ReadP.pfail_entry() //  [R2]
         { []
         }
     {offset
       c3qSV: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.pfail_info" {
     Text.ParserCombinators.ReadP.pfail_info:
         const Text.ParserCombinators.ReadP.pfail_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.689970964 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       c3qT9: // global
           _s3ouQ::P64 = R4;
           _s3ouP::P64 = R3;
           _s3ouO::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qTa; else goto c3qTb;
       c3qTb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qTd; else goto c3qTc;
       c3qTd: // global
           HpAlloc = 32;
           goto c3qTa;
       c3qTa: // global
           R4 = _s3ouQ::P64;
           R3 = _s3ouP::P64;
           R2 = _s3ouO::P64;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qTc: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ouP::P64;
           P64[Hp] = _s3ouQ::P64;
           I64[Sp - 16] = block_c3qT7_info;
           R2 = _s3ouQ::P64;
           R1 = _s3ouO::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeReadP3_info" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP3_info:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry;
         const 0;
         const 4402341478414;
         const 12884901911;
         const S3oJX_srt+8;
 },
 _c3qT7() //  [R1]
         { []
         }
     {offset
       c3qT7: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qT7_info" {
     block_c3qT7_info:
         const _c3qT7;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.695907187 UTC

[section ""data" . Text.ParserCombinators.ReadP.+++_closure" {
     Text.ParserCombinators.ReadP.+++_closure:
         const Text.ParserCombinators.ReadP.+++_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.+++_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3qTu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.+++_info" {
     Text.ParserCombinators.ReadP.+++_info:
         const Text.ParserCombinators.ReadP.+++_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3oJX_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.705211603 UTC

[section ""data" . Text.ParserCombinators.ReadP.choice_closure" {
     Text.ParserCombinators.ReadP.choice_closure:
         const Text.ParserCombinators.ReadP.choice_info;
         const 0;
 },
 ds2_s3ov0_entry() //  [R1]
         { []
         }
     {offset
       c3qTV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qTW; else goto c3qTX;
       c3qTW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qTX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.choice_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s3ov0_info" {
     ds2_s3ov0_info:
         const ds2_s3ov0_entry;
         const 1;
         const 4294967312;
         const S3oJX_srt+96;
 },
 sat_s3ov4_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qU6: // global
           _s3ov1::P64 = R2;
           _s3ov4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qU7; else goto c3qU8;
       c3qU8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qUa; else goto c3qU9;
       c3qUa: // global
           HpAlloc = 32;
           goto c3qU7;
       c3qU7: // global
           R2 = _s3ov1::P64;
           R1 = _s3ov4::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qU9: // global
           _s3ouV::P64 = P64[_s3ov4::P64 + 7];
           _s3ov0::P64 = P64[_s3ov4::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ov0::P64;
           P64[Hp] = _s3ov1::P64;
           I64[Sp - 16] = block_c3qU4_info;
           R2 = _s3ov1::P64;
           R1 = _s3ouV::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ov4_info" {
     sat_s3ov4_info:
         const sat_s3ov4_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+8;
 },
 _c3qU4() //  [R1]
         { []
         }
     {offset
       c3qU4: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qU4_info" {
     block_c3qU4_info:
         const _c3qU4;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 },
 Text.ParserCombinators.ReadP.choice_entry() //  [R2]
         { []
         }
     {offset
       c3qUi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qUj; else goto c3qUk;
       c3qUj: // global
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.choice_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qUk: // global
           I64[Sp - 8] = block_c3qTF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qUy; else goto c3qTG;
       u3qUy: // global
           call _c3qTF(R1) args: 0, res: 0, upd: 0;
       c3qTG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.choice_info" {
     Text.ParserCombinators.ReadP.choice_info:
         const Text.ParserCombinators.ReadP.choice_entry;
         const 0;
         const 8800387989518;
         const 4294967301;
         const S3oJX_srt+8;
 },
 _c3qTF() //  [R1]
         { []
         }
     {offset
       c3qTF: // global
           if (R1 & 7 == 1) goto c3qUf; else goto c3qUg;
       c3qUf: // global
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qUg: // global
           I64[Sp - 8] = block_c3qTL_info;
           _s3ouV::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3ouV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qUx; else goto c3qTM;
       u3qUx: // global
           call _c3qTL(R1) args: 0, res: 0, upd: 0;
       c3qTM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qTF_info" {
     block_c3qTF_info:
         const _c3qTF;
         const 0;
         const 8800387989534;
         const S3oJX_srt+8;
 },
 _c3qTL() //  [R1]
         { []
         }
     {offset
       c3qTL: // global
           _s3ouV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3qUr; else goto c3qUs;
       c3qUr: // global
           R1 = _s3ouV::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c3qUs: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qUv; else goto c3qUu;
       c3qUv: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qUu: // global
           I64[Hp - 40] = ds2_s3ov0_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s3ov4_info;
           P64[Hp - 8] = _s3ouV::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qTL_info" {
     block_c3qTL_info:
         const _c3qTL;
         const 1;
         const 8800387989534;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.719712218 UTC

[section ""cstring" . lvl2_r3oqG_bytes" {
     lvl2_r3oqG_bytes:
         I8[] [100,111,32,110,111,116,32,117,115,101,32,114,101,97,100,83,95,116,111,95,80,32,105,110,32,103,97,116,104,101,114,33]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.722423024 UTC

[section ""data" . lvl3_r3oqH_closure" {
     lvl3_r3oqH_closure:
         const lvl3_r3oqH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r3oqH_entry() //  [R1]
         { []
         }
     {offset
       c3qVe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3qVf; else goto c3qVg;
       c3qVf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qVg: // global
           (_c3qV9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3qV9::I64 == 0) goto c3qVb; else goto c3qVa;
       c3qVb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3qVa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3qV9::I64;
           I64[Sp - 24] = block_c3qVc_info;
           R2 = lvl2_r3oqG_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r3oqH_info" {
     lvl3_r3oqH_info:
         const lvl3_r3oqH_entry;
         const 0;
         const 4294967317;
         const S3oJX_srt+104;
 },
 _c3qVc() //  [R1]
         { []
         }
     {offset
       c3qVc: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3qVc_info" {
     block_c3qVc_info:
         const _c3qVc;
         const 0;
         const 4294967326;
         const S3oJX_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.734000592 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather_gath_closure" {
     Text.ParserCombinators.ReadP.gather_gath_closure:
         const Text.ParserCombinators.ReadP.gather_gath_info;
         const 0;
 },
 sat_s3ovd_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qVS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qVW; else goto c3qVV;
       c3qVW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qVV: // global
           _s3ov6::P64 = P64[R1 + 7];
           _s3ova::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3ova::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3ov6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ovd_info" {
     sat_s3ovd_info:
         const sat_s3ovd_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3ovf_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qVX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3qVY; else goto c3qVZ;
       c3qVY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qVZ: // global
           I64[Sp - 24] = block_c3qVI_info;
           _s3ova::P64 = R2;
           R2 = R2;
           _s3ov6::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _s3ov6::P64;
           P64[Sp - 8] = _s3ova::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ovf_info" {
     sat_s3ovf_info:
         const sat_s3ovf_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+112;
 },
 _c3qVI() //  [R1]
         { []
         }
     {offset
       c3qVI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qW2; else goto c3qW1;
       c3qW2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qW1: // global
           I64[Hp - 16] = sat_s3ovd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R3 = R1;
           R2 = Hp - 15;
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qVI_info" {
     block_c3qVI_info:
         const _c3qVI;
         const 2;
         const 4294967326;
         const S3oJX_srt+112;
 },
 sat_s3ovj_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qWc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qWd; else goto c3qWe;
       c3qWd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qWe: // global
           I64[Sp - 16] = block_c3qWa_info;
           R2 = R2;
           _s3ov6::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3ov6::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ovj_info" {
     sat_s3ovj_info:
         const sat_s3ovj_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+112;
 },
 _c3qWa() //  [R1]
         { []
         }
     {offset
       c3qWa: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qWa_info" {
     block_c3qWa_info:
         const _c3qWa;
         const 1;
         const 4294967326;
         const S3oJX_srt+112;
 },
 sat_s3ovo_entry() //  [R1]
         { []
         }
     {offset
       c3qWp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qWq; else goto c3qWr;
       c3qWq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qWr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ovo_info" {
     sat_s3ovo_info:
         const sat_s3ovo_entry;
         const 2;
         const 4294967314;
         const S3oJX_srt+112;
 },
 sat_s3ovm_entry() //  [R1]
         { []
         }
     {offset
       c3qWw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qWx; else goto c3qWy;
       c3qWx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qWy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ovm_info" {
     sat_s3ovm_info:
         const sat_s3ovm_entry;
         const 1;
         const 16;
 },
 Text.ParserCombinators.ReadP.gather_gath_entry() //  [R2, R3]
         { []
         }
     {offset
       c3qWG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qWH; else goto c3qWI;
       c3qWH: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.gather_gath_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qWI: // global
           I64[Sp - 16] = block_c3qVy_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qX7; else goto c3qVz;
       u3qX7: // global
           call _c3qVy(R1) args: 0, res: 0, upd: 0;
       c3qVz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.gather_gath_info" {
     Text.ParserCombinators.ReadP.gather_gath_info:
         const Text.ParserCombinators.ReadP.gather_gath_entry;
         const 0;
         const 105557411233806;
         const 8589934607;
         const S3oJX_srt+8;
 },
 _c3qVy() //  [R1]
         { []
         }
     {offset
       c3qVy: // global
           _s3ov6::P64 = P64[Sp + 8];
           _c3qWF::P64 = R1 & 7;
           if (_c3qWF::P64 < 4) goto u3qX4; else goto u3qX6;
       u3qX4: // global
           if (_c3qWF::P64 < 3) goto u3qX5; else goto c3qWC;
       u3qX5: // global
           if (_c3qWF::P64 < 2) goto c3qWA; else goto c3qWB;
       c3qWA: // global
           Hp = Hp + 40;
           _s3ov8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qWQ; else goto c3qWL;
       c3qWL: // global
           _s3ov9::P64 = P64[_s3ov8::P64 + 7];
           I64[Hp - 32] = sat_s3ovf_info;
           P64[Hp - 24] = _s3ov6::P64;
           P64[Hp - 16] = _s3ov9::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qWB: // global
           Hp = Hp + 40;
           _s3ov8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qWQ; else goto c3qWP;
       c3qWQ: // global
           HpAlloc = 40;
           R1 = _s3ov8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qWP: // global
           _s3ovg::P64 = P64[_s3ov8::P64 + 6];
           I64[Hp - 32] = sat_s3ovj_info;
           P64[Hp - 24] = _s3ov6::P64;
           P64[Hp - 16] = _s3ovg::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qWC: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qX6: // global
           if (_c3qWF::P64 < 5) goto c3qWD; else goto c3qWE;
       c3qWD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qWW; else goto c3qWV;
       c3qWW: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qWV: // global
           _s3ovk::P64 = P64[R1 + 4];
           _s3ovl::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3ovo_info;
           P64[Hp - 32] = _s3ov6::P64;
           P64[Hp - 24] = _s3ovl::P64;
           I64[Hp - 16] = sat_s3ovm_info;
           P64[Hp] = _s3ov6::P64;
           I64[Sp] = block_c3qWT_info;
           R2 = Hp - 16;
           R1 = _s3ovk::P64;
           P64[Sp + 8] = Hp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3qWE: // global
           R1 = lvl3_r3oqH_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qVy_info" {
     block_c3qVy_info:
         const _c3qVy;
         const 1;
         const 105557411233822;
         const S3oJX_srt+8;
 },
 _c3qWT() //  [R1]
         { []
         }
     {offset
       c3qWT: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qWT_info" {
     block_c3qWT_info:
         const _c3qWT;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.756735528 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather1_closure" {
     Text.ParserCombinators.ReadP.gather1_closure:
         const Text.ParserCombinators.ReadP.gather1_info;
         const 0;
 },
 sat_s3ovv_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qY8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qYc; else goto c3qYb;
       c3qYc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qYb: // global
           _s3ovr::P64 = P64[R1 + 7];
           _s3ovs::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = _s3ovs::P64;
           R2 = Hp - 15;
           R1 = _s3ovr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ovv_info" {
     sat_s3ovv_info:
         const sat_s3ovv_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3ovw_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qYe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qYi; else goto c3qYh;
       c3qYi: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qYh: // global
           _s3ovr::P64 = P64[R1 + 7];
           I64[Hp - 40] = sat_s3ovv_info;
           P64[Hp - 32] = _s3ovr::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ovw_info" {
     sat_s3ovw_info:
         const sat_s3ovw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.gather1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3qYl: // global
           _s3ovr::P64 = R3;
           _s3ovq::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3qYm; else goto c3qYn;
       c3qYn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qYp; else goto c3qYo;
       c3qYp: // global
           HpAlloc = 16;
           goto c3qYm;
       c3qYm: // global
           R3 = _s3ovr::P64;
           R2 = _s3ovq::P64;
           R1 = Text.ParserCombinators.ReadP.gather1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qYo: // global
           I64[Hp - 8] = sat_s3ovw_info;
           P64[Hp] = _s3ovr::P64;
           I64[Sp - 8] = block_c3qYj_info;
           R2 = Hp - 7;
           R1 = _s3ovq::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.gather1_info" {
     Text.ParserCombinators.ReadP.gather1_info:
         const Text.ParserCombinators.ReadP.gather1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S3oJX_srt+112;
 },
 _c3qYj() //  [R1]
         { []
         }
     {offset
       c3qYj: // global
           R3 = R1;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3qYj_info" {
     block_c3qYj_info:
         const _c3qYj;
         const 0;
         const 4294967326;
         const S3oJX_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.765905916 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather_closure" {
     Text.ParserCombinators.ReadP.gather_closure:
         const Text.ParserCombinators.ReadP.gather_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.gather_entry() //  [R2, R3]
         { []
         }
     {offset
       c3qYN: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.gather1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.gather_info" {
     Text.ParserCombinators.ReadP.gather_info:
         const Text.ParserCombinators.ReadP.gather_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3oJX_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.77007881 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$trModule4_bytes" {
     Text.ParserCombinators.ReadP.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.771811404 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule3_closure" {
     Text.ParserCombinators.ReadP.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.773577024 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$trModule2_bytes" {
     Text.ParserCombinators.ReadP.$trModule2_bytes:
         I8[] [84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.775295084 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule1_closure" {
     Text.ParserCombinators.ReadP.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.777022443 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule_closure" {
     Text.ParserCombinators.ReadP.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.ParserCombinators.ReadP.$trModule3_closure+1;
         const Text.ParserCombinators.ReadP.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.778817941 UTC

[section ""data" . $krep_r3oqI_closure" {
     $krep_r3oqI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.780595697 UTC

[section ""data" . $krep1_r3oqJ_closure" {
     $krep1_r3oqJ_closure:
         const :_con_info;
         const $krep_r3oqI_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.78249332 UTC

[section ""data" . $krep2_r3oqK_closure" {
     $krep2_r3oqK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r3oqJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.784327342 UTC

[section ""data" . $krep3_r3oqL_closure" {
     $krep3_r3oqL_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.786634753 UTC

[section ""data" . $krep4_r3oqM_closure" {
     $krep4_r3oqM_closure:
         const :_con_info;
         const $krep2_r3oqK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.788410648 UTC

[section ""data" . $krep5_r3oqN_closure" {
     $krep5_r3oqN_closure:
         const :_con_info;
         const $krep3_r3oqL_closure+2;
         const $krep4_r3oqM_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.790640111 UTC

[section ""data" . $krep6_r3oqO_closure" {
     $krep6_r3oqO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep5_r3oqN_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.792429328 UTC

[section ""data" . $krep7_r3oqP_closure" {
     $krep7_r3oqP_closure:
         const :_con_info;
         const $krep6_r3oqO_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.794254637 UTC

[section ""data" . $krep8_r3oqQ_closure" {
     $krep8_r3oqQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep7_r3oqP_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.796010133 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tcP2_bytes" {
     Text.ParserCombinators.ReadP.$tcP2_bytes:
         I8[] [80]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.797724818 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcP1_closure" {
     Text.ParserCombinators.ReadP.$tcP1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tcP2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.799585431 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcP_closure" {
     Text.ParserCombinators.ReadP.$tcP_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tcP1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 4287589432649596960;
         const 9029773818181158220;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.80148372 UTC

[section ""data" . $krep9_r3oqR_closure" {
     $krep9_r3oqR_closure:
         const :_con_info;
         const $krep3_r3oqL_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.803749361 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail1_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadP.$tcP_closure+1;
         const $krep9_r3oqR_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.807110056 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Fail3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Fail3_bytes:
         I8[] [39,70,97,105,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.808860227 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail2_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Fail3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.810738314 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 16564457091671581868;
         const 4540703186775139959;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.812607403 UTC

[section ""data" . $krep10_r3oqS_closure" {
     $krep10_r3oqS_closure:
         const GHC.Types.KindRepFun_con_info;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.81439538 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result1_closure" {
     Text.ParserCombinators.ReadP.$tc'Result1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3oqL_closure+2;
         const $krep10_r3oqS_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.81693542 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Result3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Result3_bytes:
         I8[] [39,82,101,115,117,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.818952676 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result2_closure" {
     Text.ParserCombinators.ReadP.$tc'Result2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Result3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.820884184 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result_closure" {
     Text.ParserCombinators.ReadP.$tc'Result_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Result2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Result1_closure+4;
         const 14629176799732153257;
         const 2029199220309899277;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.823754684 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final1_closure" {
     Text.ParserCombinators.ReadP.$tc'Final1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r3oqQ_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.825434151 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Final3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Final3_bytes:
         I8[] [39,70,105,110,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.827187582 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final2_closure" {
     Text.ParserCombinators.ReadP.$tc'Final2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Final3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.829018311 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final_closure" {
     Text.ParserCombinators.ReadP.$tc'Final_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Final2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Final1_closure+4;
         const 9825883373667767852;
         const 1277540149077833820;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.831014291 UTC

[section ""data" . $krep11_r3oqT_closure" {
     $krep11_r3oqT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3oqK_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.832747158 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look1_closure" {
     Text.ParserCombinators.ReadP.$tc'Look1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r3oqT_closure+4;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.83451777 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Look3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Look3_bytes:
         I8[] [39,76,111,111,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.836258869 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look2_closure" {
     Text.ParserCombinators.ReadP.$tc'Look2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Look3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.838308248 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look_closure" {
     Text.ParserCombinators.ReadP.$tc'Look_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Look2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Look1_closure+4;
         const 11302519862508684236;
         const 969530656846011597;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.840658639 UTC

[section ""data" . $krep12_r3oqU_closure" {
     $krep12_r3oqU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3oqI_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.842422895 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get1_closure" {
     Text.ParserCombinators.ReadP.$tc'Get1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r3oqU_closure+4;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.844103709 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Get3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Get3_bytes:
         I8[] [39,71,101,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.845925666 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get2_closure" {
     Text.ParserCombinators.ReadP.$tc'Get2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Get3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.847684989 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get_closure" {
     Text.ParserCombinators.ReadP.$tc'Get_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Get2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Get1_closure+4;
         const 10806119809527641225;
         const 14618661019746688366;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.849582624 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tcReadP2_bytes" {
     Text.ParserCombinators.ReadP.$tcReadP2_bytes:
         I8[] [82,101,97,100,80]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.851310427 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcReadP1_closure" {
     Text.ParserCombinators.ReadP.$tcReadP1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tcReadP2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.8537412 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcReadP_closure" {
     Text.ParserCombinators.ReadP.$tcReadP_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tcReadP1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15640243629783811470;
         const 8988027559298507146;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.857334802 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_info;
 },
 sat_s3ovE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qZR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qZV; else goto c3qZU;
       c3qZV: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qZU: // global
           _s3ovA::P64 = P64[R1 + 7];
           _s3ovB::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ovB::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3ovA::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ovE_info" {
     sat_s3ovE_info:
         const sat_s3ovE_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3ovF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3qZW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r00; else goto c3qZZ;
       c3r00: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qZZ: // global
           _s3ovz::P64 = P64[R1 + 7];
           _s3ovA::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ovE_info;
           P64[Hp - 8] = _s3ovA::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3ovz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ovF_info" {
     sat_s3ovF_info:
         const sat_s3ovF_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP4_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       c3r01: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r05; else goto c3r04;
       c3r05: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r04: // global
           I64[Hp - 16] = sat_s3ovF_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3ovy::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ovy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeReadP4_info" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP4_info:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.866454451 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_info;
 },
 sat_s3ovL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3r0t: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ovL_info" {
     sat_s3ovL_info:
         const sat_s3ovL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl4_s3ovJ_entry() //  [R1]
         { []
         }
     {offset
       c3r0w: // global
           _s3ovJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3r0x; else goto c3r0y;
       c3r0y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3r0A; else goto c3r0z;
       c3r0A: // global
           HpAlloc = 16;
           goto c3r0x;
       c3r0x: // global
           R1 = _s3ovJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3r0z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ovJ::P64;
           _s3ovH::P64 = P64[_s3ovJ::P64 + 16];
           _s3ovI::P64 = P64[_s3ovJ::P64 + 24];
           I64[Hp - 8] = sat_s3ovL_info;
           P64[Hp] = _s3ovI::P64;
           R2 = Hp - 7;
           R1 = _s3ovH::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3ovJ_info" {
     lvl4_s3ovJ_info:
         const lvl4_s3ovJ_entry;
         const 2;
         const 18;
 },
 sat_s3ovN_entry() //  [R1]
         { []
         }
     {offset
       c3r0G: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ovN_info" {
     sat_s3ovN_info:
         const sat_s3ovN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP2_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       c3r0J: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3r0N; else goto c3r0M;
       c3r0N: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r0M: // global
           I64[Hp - 40] = lvl4_s3ovJ_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3ovN_info;
           P64[Hp] = Hp - 40;
           _s3ovG::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3ovG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeReadP2_info" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP2_info:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.877215825 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_info;
 },
 sat_s3ovW_entry() //  [R1, R2]
         { []
         }
     {offset
       c3r1l: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3r1p; else goto c3r1o;
       c3r1p: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r1o: // global
           _s3ovR::P64 = P64[R1 + 7];
           _s3ovT::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ovT::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3ovR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ovW_info" {
     sat_s3ovW_info:
         const sat_s3ovW_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3ovX_entry() //  [R1, R2]
         { []
         }
     {offset
       c3r1q: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3r1u; else goto c3r1t;
       c3r1u: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r1t: // global
           _s3ovO::P64 = P64[R1 + 7];
           _s3ovQ::P64 = P64[R1 + 15];
           _s3ovR::P64 = P64[R1 + 23];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ovO::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3ovW_info;
           P64[Hp - 8] = _s3ovR::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 15;
           R1 = _s3ovQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ovX_info" {
     sat_s3ovX_info:
         const sat_s3ovX_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP3_entry() //  [R2,
                                                               R3, R4, R5]
         { []
         }
     {offset
       c3r1v: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3r1z; else goto c3r1y;
       c3r1z: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r1y: // global
           I64[Hp - 24] = sat_s3ovX_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 23;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeReadP3_info" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP3_info:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.886423138 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_info;
 },
 sat_s3ow4_entry() //  [R1]
         { []
         }
     {offset
       c3r20: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ow4_info" {
     sat_s3ow4_info:
         const sat_s3ow4_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3ow5_entry() //  [R1, R2]
         { []
         }
     {offset
       c3r23: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3r27; else goto c3r26;
       c3r27: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r26: // global
           _s3ovZ::P64 = P64[R1 + 7];
           _s3ow0::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3ow0::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3ow4_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3ovZ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ow5_info" {
     sat_s3ow5_info:
         const sat_s3ow5_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP1_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       c3r28: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r2c; else goto c3r2b;
       c3r2c: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r2b: // global
           I64[Hp - 16] = sat_s3ow5_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3ovY::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ovY::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeReadP1_info" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP1_info:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.894580604 UTC

[section ""data" . $c>>_r3oqV_closure" {
     $c>>_r3oqV_closure:
         const $c>>_r3oqV_info;
 },
 sat_s3owb_entry() //  [R1]
         { []
         }
     {offset
       c3r2A: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3owb_info" {
     sat_s3owb_info:
         const sat_s3owb_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 $c>>_r3oqV_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3r2D: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3r2H; else goto c3r2G;
       c3r2H: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $c>>_r3oqV_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r2G: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3owb_info;
           P64[Hp] = Hp - 40;
           _s3ow6::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3ow6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $c>>_r3oqV_info" {
     $c>>_r3oqV_info:
         const $c>>_r3oqV_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.900635143 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure:
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info;
 },
 Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       c3r2W: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $c>>_r3oqV_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info" {
     Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info:
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.903946429 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure+4;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.905856198 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadReadP1_closure+3;
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure+2;
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.910276903 UTC

[section ""data" . Text.ParserCombinators.ReadP.between1_closure" {
     Text.ParserCombinators.ReadP.between1_closure:
         const Text.ParserCombinators.ReadP.between1_info;
 },
 sat_s3owk_entry() //  [R1]
         { []
         }
     {offset
       c3r3o: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3owk_info" {
     sat_s3owk_info:
         const sat_s3owk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3owl_entry() //  [R1, R2]
         { []
         }
     {offset
       c3r3r: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3r3v; else goto c3r3u;
       c3r3v: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r3u: // global
           _s3owd::P64 = P64[R1 + 7];
           _s3owf::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3owf::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3owk_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3owd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3owl_info" {
     sat_s3owl_info:
         const sat_s3owl_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 lvl4_s3owg_entry() //  [R1]
         { []
         }
     {offset
       c3r3w: // global
           _s3owg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3r3x; else goto c3r3y;
       c3r3y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r3A; else goto c3r3z;
       c3r3A: // global
           HpAlloc = 24;
           goto c3r3x;
       c3r3x: // global
           R1 = _s3owg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3r3z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3owg::P64;
           _s3owd::P64 = P64[_s3owg::P64 + 16];
           _s3owe::P64 = P64[_s3owg::P64 + 24];
           _s3owf::P64 = P64[_s3owg::P64 + 32];
           I64[Hp - 16] = sat_s3owl_info;
           P64[Hp - 8] = _s3owd::P64;
           P64[Hp] = _s3owf::P64;
           R2 = Hp - 15;
           R1 = _s3owe::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3owg_info" {
     lvl4_s3owg_info:
         const lvl4_s3owg_entry;
         const 3;
         const 15;
 },
 sat_s3own_entry() //  [R1]
         { []
         }
     {offset
       c3r3G: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3own_info" {
     sat_s3own_info:
         const sat_s3own_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.between1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3r3J: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3r3N; else goto c3r3M;
       c3r3N: // global
           HpAlloc = 56;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.between1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r3M: // global
           I64[Hp - 48] = lvl4_s3owg_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = sat_s3own_info;
           P64[Hp] = Hp - 48;
           _s3owc::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3owc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.between1_info" {
     Text.ParserCombinators.ReadP.between1_info:
         const Text.ParserCombinators.ReadP.between1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.921530148 UTC

[section ""data" . Text.ParserCombinators.ReadP.between_closure" {
     Text.ParserCombinators.ReadP.between_closure:
         const Text.ParserCombinators.ReadP.between_info;
 },
 Text.ParserCombinators.ReadP.between_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3r4f: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.between1_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.between_info" {
     Text.ParserCombinators.ReadP.between_info:
         const Text.ParserCombinators.ReadP.between_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.927679444 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wcount_closure" {
     Text.ParserCombinators.ReadP.$wcount_closure:
         const Text.ParserCombinators.ReadP.$wcount_info;
 },
 sat_s3owA_entry() //  [R1, R2]
         { []
         }
     {offset
       c3r4P: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r4T; else goto c3r4S;
       c3r4T: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r4S: // global
           _s3owu::P64 = P64[R1 + 7];
           _s3owx::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3owx::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3owu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3owA_info" {
     sat_s3owA_info:
         const sat_s3owA_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3owB_entry() //  [R1, R2]
         { []
         }
     {offset
       c3r4U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r4Y; else goto c3r4X;
       c3r4Y: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r4X: // global
           _s3ows::P64 = P64[R1 + 7];
           _s3owu::P64 = P64[R1 + 15];
           _s3oww::I64 = I64[R1 + 23];
           I64[Hp - 16] = sat_s3owA_info;
           P64[Hp - 8] = _s3owu::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3oww::I64;
           R1 = _s3ows::P64;
           call $wxs_s3ows_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3owB_info" {
     sat_s3owB_info:
         const sat_s3owB_entry;
         const 4294967298;
         const 8;
         const 4294967301;
 },
 sat_s3owE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3r56: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r5a; else goto c3r59;
       c3r5a: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r59: // global
           _s3owu::P64 = P64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3owu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3owE_info" {
     sat_s3owE_info:
         const sat_s3owE_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 $wxs_s3ows_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3r5e: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3r5i; else goto c3r5h;
       c3r5i: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r5h: // global
           _s3owp::P64 = P64[R1 + 6];
           if (R2 == 1) goto c3r5d; else goto c3r5c;
       c3r5d: // global
           I64[Hp - 24] = sat_s3owE_info;
           P64[Hp - 16] = R3;
           _c3r50::P64 = Hp - 23;
           Hp = Hp - 16;
           R2 = _c3r50::P64;
           R1 = _s3owp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3r5c: // global
           I64[Hp - 24] = sat_s3owB_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R3;
           I64[Hp] = R2 - 1;
           R2 = Hp - 23;
           R1 = _s3owp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs_s3ows_info" {
     $wxs_s3ows_info:
         const $wxs_s3ows_entry;
         const 1;
         const 9;
         const 8589934605;
 },
 Text.ParserCombinators.ReadP.$wcount_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3r5m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3r5q; else goto c3r5p;
       c3r5q: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wcount_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r5p: // global
           if (%MO_S_Ge_W64(0, R2)) goto c3r5k; else goto c3r5l;
       c3r5k: // global
           Hp = Hp - 16;
           R2 = GHC.Types.[]_closure+1;
           R1 = R4;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3r5l: // global
           I64[Hp - 8] = $wxs_s3ows_info;
           P64[Hp] = R3;
           R3 = R4;
           R2 = R2;
           R1 = Hp - 6;
           call $wxs_s3ows_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$wcount_info" {
     Text.ParserCombinators.ReadP.$wcount_info:
         const Text.ParserCombinators.ReadP.$wcount_entry;
         const 0;
         const 14;
         const 12884901907;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.940557273 UTC

[section ""data" . Text.ParserCombinators.ReadP.count1_closure" {
     Text.ParserCombinators.ReadP.count1_closure:
         const Text.ParserCombinators.ReadP.count1_info;
 },
 Text.ParserCombinators.ReadP.count1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3r5P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3r5Q; else goto c3r5R;
       c3r5Q: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.count1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r5R: // global
           I64[Sp - 24] = block_c3r5M_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3r5V; else goto c3r5N;
       u3r5V: // global
           call _c3r5M(R1) args: 0, res: 0, upd: 0;
       c3r5N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.count1_info" {
     Text.ParserCombinators.ReadP.count1_info:
         const Text.ParserCombinators.ReadP.count1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3r5M() //  [R1]
         { []
         }
     {offset
       c3r5M: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$wcount_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3r5M_info" {
     block_c3r5M_info:
         const _c3r5M;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.946227721 UTC

[section ""data" . Text.ParserCombinators.ReadP.count_closure" {
     Text.ParserCombinators.ReadP.count_closure:
         const Text.ParserCombinators.ReadP.count_info;
 },
 Text.ParserCombinators.ReadP.count_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3r69: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.count1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.count_info" {
     Text.ParserCombinators.ReadP.count_info:
         const Text.ParserCombinators.ReadP.count_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.950342974 UTC

[section ""data" . Text.ParserCombinators.ReadP.option1_closure" {
     Text.ParserCombinators.ReadP.option1_closure:
         const Text.ParserCombinators.ReadP.option1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.option1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3r6n: // global
           _s3owM::P64 = R4;
           _s3owL::P64 = R3;
           _s3owK::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3r6o; else goto c3r6p;
       c3r6p: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3r6r; else goto c3r6q;
       c3r6r: // global
           HpAlloc = 32;
           goto c3r6o;
       c3r6o: // global
           R4 = _s3owM::P64;
           R3 = _s3owL::P64;
           R2 = _s3owK::P64;
           R1 = Text.ParserCombinators.ReadP.option1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r6q: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3owM::P64;
           P64[Hp] = _s3owK::P64;
           I64[Sp - 16] = block_c3r6l_info;
           R2 = _s3owM::P64;
           R1 = _s3owL::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.option1_info" {
     Text.ParserCombinators.ReadP.option1_info:
         const Text.ParserCombinators.ReadP.option1_entry;
         const 0;
         const 281479271677966;
         const 12884901911;
         const S3oJX_srt+8;
 },
 _c3r6l() //  [R1]
         { []
         }
     {offset
       c3r6l: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3r6l_info" {
     block_c3r6l_info:
         const _c3r6l;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.956183241 UTC

[section ""data" . Text.ParserCombinators.ReadP.option_closure" {
     Text.ParserCombinators.ReadP.option_closure:
         const Text.ParserCombinators.ReadP.option_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.option_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3r6I: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.option1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.option_info" {
     Text.ParserCombinators.ReadP.option_info:
         const Text.ParserCombinators.ReadP.option_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3oJX_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.962018174 UTC

[section ""data" . Text.ParserCombinators.ReadP.optional1_closure" {
     Text.ParserCombinators.ReadP.optional1_closure:
         const Text.ParserCombinators.ReadP.optional1_info;
         const 0;
 },
 lvl4_s3owR_entry() //  [R1]
         { []
         }
     {offset
       c3r6X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3r6Y; else goto c3r6Z;
       c3r6Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3r6Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3owR_info" {
     lvl4_s3owR_info:
         const lvl4_s3owR_entry;
         const 1;
         const 16;
 },
 sat_s3owT_entry() //  [R1]
         { []
         }
     {offset
       c3r75: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3owT_info" {
     sat_s3owT_info:
         const sat_s3owT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.optional1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3r7a: // global
           _s3owQ::P64 = R3;
           _s3owP::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3r7b; else goto c3r7c;
       c3r7c: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3r7e; else goto c3r7d;
       c3r7e: // global
           HpAlloc = 40;
           goto c3r7b;
       c3r7b: // global
           R3 = _s3owQ::P64;
           R2 = _s3owP::P64;
           R1 = Text.ParserCombinators.ReadP.optional1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r7d: // global
           I64[Hp - 32] = lvl4_s3owR_info;
           P64[Hp - 16] = _s3owQ::P64;
           I64[Hp - 8] = sat_s3owT_info;
           _c3r6T::P64 = Hp - 32;
           P64[Hp] = _c3r6T::P64;
           I64[Sp - 16] = block_c3r78_info;
           R2 = Hp - 7;
           R1 = _s3owP::P64;
           P64[Sp - 8] = _c3r6T::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.optional1_info" {
     Text.ParserCombinators.ReadP.optional1_info:
         const Text.ParserCombinators.ReadP.optional1_entry;
         const 0;
         const 562954248388622;
         const 8589934607;
         const S3oJX_srt+8;
 },
 _c3r78() //  [R1]
         { []
         }
     {offset
       c3r78: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3r78_info" {
     block_c3r78_info:
         const _c3r78;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.971078265 UTC

[section ""data" . Text.ParserCombinators.ReadP.optional_closure" {
     Text.ParserCombinators.ReadP.optional_closure:
         const Text.ParserCombinators.ReadP.optional_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.optional_entry() //  [R2, R3]
         { []
         }
     {offset
       c3r7D: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.optional1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.optional_info" {
     Text.ParserCombinators.ReadP.optional_info:
         const Text.ParserCombinators.ReadP.optional_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3oJX_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.977419545 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy3_closure" {
     Text.ParserCombinators.ReadP.endBy3_closure:
         const Text.ParserCombinators.ReadP.endBy3_info;
         const 0;
 },
 sat_s3ox1_entry() //  [R1, R2]
         { []
         }
     {offset
       c3r83: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r87; else goto c3r86;
       c3r87: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r86: // global
           _s3owW::P64 = P64[R1 + 7];
           _s3owY::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3owY::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3owW::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ox1_info" {
     sat_s3ox1_info:
         const sat_s3ox1_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3ox2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3r88: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r8c; else goto c3r8b;
       c3r8c: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r8b: // global
           _s3owV::P64 = P64[R1 + 7];
           _s3owW::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ox1_info;
           P64[Hp - 8] = _s3owW::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3owV::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ox2_info" {
     sat_s3ox2_info:
         const sat_s3ox2_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+152;
 },
 sat_s3ox3_entry() //  [R1]
         { []
         }
     {offset
       c3r8d: // global
           _s3ox3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3r8e; else goto c3r8f;
       c3r8f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r8h; else goto c3r8g;
       c3r8h: // global
           HpAlloc = 24;
           goto c3r8e;
       c3r8e: // global
           R1 = _s3ox3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3r8g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ox3::P64;
           _s3owV::P64 = P64[_s3ox3::P64 + 16];
           _s3owW::P64 = P64[_s3ox3::P64 + 24];
           I64[Hp - 16] = sat_s3ox2_info;
           P64[Hp - 8] = _s3owV::P64;
           P64[Hp] = _s3owW::P64;
           R2 = Hp - 15;
           R1 = _s3owV::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ox3_info" {
     sat_s3ox3_info:
         const sat_s3ox3_entry;
         const 2;
         const 4294967314;
         const S3oJX_srt+152;
 },
 Text.ParserCombinators.ReadP.endBy3_entry() //  [R2, R3]
         { []
         }
     {offset
       c3r8k: // global
           _s3owW::P64 = R3;
           _s3owV::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3r8l; else goto c3r8m;
       c3r8m: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3r8o; else goto c3r8n;
       c3r8o: // global
           HpAlloc = 32;
           goto c3r8l;
       c3r8l: // global
           R3 = _s3owW::P64;
           R2 = _s3owV::P64;
           R1 = Text.ParserCombinators.ReadP.endBy3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r8n: // global
           I64[Hp - 24] = sat_s3ox3_info;
           P64[Hp - 8] = _s3owV::P64;
           P64[Hp] = _s3owW::P64;
           I64[Sp - 16] = block_c3r8i_info;
           R2 = GHC.Types.[]_closure+1;
           R1 = _s3owW::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.endBy3_info" {
     Text.ParserCombinators.ReadP.endBy3_info:
         const Text.ParserCombinators.ReadP.endBy3_entry;
         const 0;
         const 1125904201809934;
         const 8589934607;
         const S3oJX_srt+8;
 },
 _c3r8i() //  [R1]
         { []
         }
     {offset
       c3r8i: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3r8i_info" {
     block_c3r8i_info:
         const _c3r8i;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.988744859 UTC

[section ""data" . Text.ParserCombinators.ReadP.many_closure" {
     Text.ParserCombinators.ReadP.many_closure:
         const Text.ParserCombinators.ReadP.many_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.many_entry() //  [R2, R3]
         { []
         }
     {offset
       c3r8P: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.many_info" {
     Text.ParserCombinators.ReadP.many_info:
         const Text.ParserCombinators.ReadP.many_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3oJX_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:01.994001837 UTC

[section ""data" . Text.ParserCombinators.ReadP.many2_closure" {
     Text.ParserCombinators.ReadP.many2_closure:
         const Text.ParserCombinators.ReadP.many2_info;
         const 0;
 },
 sat_s3ox9_entry() //  [R1, R2]
         { []
         }
     {offset
       c3r9b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r9f; else goto c3r9e;
       c3r9f: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r9e: // global
           _s3ox5::P64 = P64[R1 + 7];
           _s3ox6::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3ox6::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3ox5::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ox9_info" {
     sat_s3ox9_info:
         const sat_s3ox9_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3oxa_entry() //  [R1, R2]
         { []
         }
     {offset
       c3r9g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r9k; else goto c3r9j;
       c3r9k: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r9j: // global
           _s3ox4::P64 = P64[R1 + 7];
           _s3ox5::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ox9_info;
           P64[Hp - 8] = _s3ox5::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3ox4::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oxa_info" {
     sat_s3oxa_info:
         const sat_s3oxa_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+152;
 },
 Text.ParserCombinators.ReadP.many2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3r9l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r9p; else goto c3r9o;
       c3r9p: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.many2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r9o: // global
           I64[Hp - 16] = sat_s3oxa_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s3ox4::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ox4::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.many2_info" {
     Text.ParserCombinators.ReadP.many2_info:
         const Text.ParserCombinators.ReadP.many2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3oJX_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.002037231 UTC

[section ""data" . Text.ParserCombinators.ReadP.many1_closure" {
     Text.ParserCombinators.ReadP.many1_closure:
         const Text.ParserCombinators.ReadP.many1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.many1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3r9E: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.many2_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.many1_info" {
     Text.ParserCombinators.ReadP.many1_info:
         const Text.ParserCombinators.ReadP.many1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3oJX_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.008975595 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy4_closure" {
     Text.ParserCombinators.ReadP.endBy4_closure:
         const Text.ParserCombinators.ReadP.endBy4_info;
         const 0;
 },
 sat_s3oxj_entry() //  [R1]
         { []
         }
     {offset
       c3ra5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oxj_info" {
     sat_s3oxj_info:
         const sat_s3oxj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3oxk_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ra8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rac; else goto c3rab;
       c3rac: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rab: // global
           _s3oxc::P64 = P64[R1 + 7];
           _s3oxf::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3oxf::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oxj_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3oxc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oxk_info" {
     sat_s3oxk_info:
         const sat_s3oxk_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 p1_s3oxe_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rad: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rah; else goto c3rag;
       c3rah: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rag: // global
           _s3oxb::P64 = P64[R1 + 7];
           _s3oxc::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oxk_info;
           P64[Hp - 8] = _s3oxc::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oxb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p1_s3oxe_info" {
     p1_s3oxe_info:
         const p1_s3oxe_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3oxp_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rax: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3raB; else goto c3raA;
       c3raB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3raA: // global
           _s3oxd::P64 = P64[R1 + 7];
           _s3oxl::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oxl::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oxd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oxp_info" {
     sat_s3oxp_info:
         const sat_s3oxp_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 lvl4_s3oxm_entry() //  [R1]
         { []
         }
     {offset
       c3raC: // global
           _s3oxm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3raD; else goto c3raE;
       c3raE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3raG; else goto c3raF;
       c3raG: // global
           HpAlloc = 24;
           goto c3raD;
       c3raD: // global
           R1 = _s3oxm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3raF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3oxm::P64;
           _s3oxd::P64 = P64[_s3oxm::P64 + 16];
           _s3oxe::P64 = P64[_s3oxm::P64 + 24];
           _s3oxl::P64 = P64[_s3oxm::P64 + 32];
           I64[Hp - 16] = sat_s3oxp_info;
           P64[Hp - 8] = _s3oxd::P64;
           P64[Hp] = _s3oxl::P64;
           R3 = Hp - 15;
           R2 = _s3oxe::P64;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3oxm_info" {
     lvl4_s3oxm_info:
         const lvl4_s3oxm_entry;
         const 3;
         const 4294967311;
         const S3oJX_srt+152;
 },
 sat_s3oxr_entry() //  [R1]
         { []
         }
     {offset
       c3raM: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oxr_info" {
     sat_s3oxr_info:
         const sat_s3oxr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3oxs_entry() //  [R1, R2]
         { []
         }
     {offset
       c3raP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3raT; else goto c3raS;
       c3raT: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3raS: // global
           _s3oxc::P64 = P64[R1 + 7];
           _s3oxd::P64 = P64[R1 + 15];
           _s3oxe::P64 = P64[R1 + 23];
           I64[Hp - 48] = lvl4_s3oxm_info;
           P64[Hp - 32] = _s3oxd::P64;
           P64[Hp - 24] = _s3oxe::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oxr_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3oxc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oxs_info" {
     sat_s3oxs_info:
         const sat_s3oxs_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3oJX_srt+152;
 },
 Text.ParserCombinators.ReadP.endBy4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3raU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3raY; else goto c3raX;
       c3raY: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.endBy4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3raX: // global
           I64[Hp - 48] = p1_s3oxe_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3oxs_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 47;
           _s3oxb::P64 = R2;
           R2 = Hp - 23;
           R1 = _s3oxb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.endBy4_info" {
     Text.ParserCombinators.ReadP.endBy4_info:
         const Text.ParserCombinators.ReadP.endBy4_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S3oJX_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.025958341 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy1_closure" {
     Text.ParserCombinators.ReadP.endBy1_closure:
         const Text.ParserCombinators.ReadP.endBy1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.endBy1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rbA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy4_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.endBy1_info" {
     Text.ParserCombinators.ReadP.endBy1_info:
         const Text.ParserCombinators.ReadP.endBy1_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3oJX_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.030453252 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany2_closure" {
     Text.ParserCombinators.ReadP.skipMany2_closure:
         const Text.ParserCombinators.ReadP.skipMany2_info;
         const 0;
 },
 sat_s3oxx_entry() //  [R1]
         { []
         }
     {offset
       c3rbU: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oxx_info" {
     sat_s3oxx_info:
         const sat_s3oxx_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.skipMany2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rbX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rbY; else goto c3rbZ;
       c3rbY: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipMany2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rbZ: // global
           I64[Sp - 16] = block_c3rbL_info;
           _s3oxt::P64 = R2;
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           P64[Sp - 8] = _s3oxt::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipMany2_info" {
     Text.ParserCombinators.ReadP.skipMany2_info:
         const Text.ParserCombinators.ReadP.skipMany2_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S3oJX_srt+152;
 },
 _c3rbL() //  [R1]
         { []
         }
     {offset
       c3rbL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rc2; else goto c3rc1;
       c3rc2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rc1: // global
           I64[Hp - 8] = sat_s3oxx_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rbL_info" {
     block_c3rbL_info:
         const _c3rbL;
         const 1;
         const 4294967326;
         const S3oJX_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.03801524 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany_closure" {
     Text.ParserCombinators.ReadP.skipMany_closure:
         const Text.ParserCombinators.ReadP.skipMany_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.skipMany_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rck: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipMany2_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipMany_info" {
     Text.ParserCombinators.ReadP.skipMany_info:
         const Text.ParserCombinators.ReadP.skipMany_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3oJX_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.043558745 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany3_closure" {
     Text.ParserCombinators.ReadP.skipMany3_closure:
         const Text.ParserCombinators.ReadP.skipMany3_info;
         const 0;
 },
 sat_s3oxD_entry() //  [R1]
         { []
         }
     {offset
       c3rcI: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oxD_info" {
     sat_s3oxD_info:
         const sat_s3oxD_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl4_s3oxA_entry() //  [R1]
         { []
         }
     {offset
       c3rcL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3rcM; else goto c3rcN;
       c3rcM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rcN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3rcz_info;
           R2 = GHC.Tuple.()_closure+1;
           _s3oxy::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s3oxy::P64;
           Sp = Sp - 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3oxA_info" {
     lvl4_s3oxA_info:
         const lvl4_s3oxA_entry;
         const 2;
         const 4294967314;
         const S3oJX_srt+152;
 },
 _c3rcz() //  [R1]
         { []
         }
     {offset
       c3rcz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rcQ; else goto c3rcP;
       c3rcQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3rcP: // global
           I64[Hp - 8] = sat_s3oxD_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3rcz_info" {
     block_c3rcz_info:
         const _c3rcz;
         const 1;
         const 4294967326;
         const S3oJX_srt+152;
 },
 sat_s3oxF_entry() //  [R1]
         { []
         }
     {offset
       c3rcW: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oxF_info" {
     sat_s3oxF_info:
         const sat_s3oxF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.skipMany3_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rcZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rd3; else goto c3rd2;
       c3rd3: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipMany3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rd2: // global
           I64[Hp - 40] = lvl4_s3oxA_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s3oxF_info;
           P64[Hp] = Hp - 40;
           _s3oxy::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3oxy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipMany3_info" {
     Text.ParserCombinators.ReadP.skipMany3_info:
         const Text.ParserCombinators.ReadP.skipMany3_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S3oJX_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.053839016 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany1_closure" {
     Text.ParserCombinators.ReadP.skipMany1_closure:
         const Text.ParserCombinators.ReadP.skipMany1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.skipMany1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rdu: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipMany3_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipMany1_info" {
     Text.ParserCombinators.ReadP.skipMany1_info:
         const Text.ParserCombinators.ReadP.skipMany1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3oJX_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.060645861 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy3_closure" {
     Text.ParserCombinators.ReadP.sepBy3_closure:
         const Text.ParserCombinators.ReadP.sepBy3_info;
         const 0;
 },
 sat_s3oxN_entry() //  [R1]
         { []
         }
     {offset
       c3rdQ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oxN_info" {
     sat_s3oxN_info:
         const sat_s3oxN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 m2_s3oxJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rdT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rdX; else goto c3rdW;
       c3rdX: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rdW: // global
           _s3oxG::P64 = P64[R1 + 7];
           _s3oxH::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3oxG::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oxN_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3oxH::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . m2_s3oxJ_info" {
     m2_s3oxJ_info:
         const m2_s3oxJ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3oxR_entry() //  [R1, R2]
         { []
         }
     {offset
       c3re9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3red; else goto c3rec;
       c3red: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rec: // global
           _s3oxI::P64 = P64[R1 + 7];
           _s3oxO::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oxO::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oxI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oxR_info" {
     sat_s3oxR_info:
         const sat_s3oxR_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3oxS_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ree: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rei; else goto c3reh;
       c3rei: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3reh: // global
           _s3oxI::P64 = P64[R1 + 7];
           _s3oxJ::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oxR_info;
           P64[Hp - 8] = _s3oxI::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3oxJ::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oxS_info" {
     sat_s3oxS_info:
         const sat_s3oxS_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+152;
 },
 Text.ParserCombinators.ReadP.sepBy3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rej: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3ren; else goto c3rem;
       c3ren: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.sepBy3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rem: // global
           I64[Hp - 40] = m2_s3oxJ_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3oxS_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 39;
           _s3oxG::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3oxG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.sepBy3_info" {
     Text.ParserCombinators.ReadP.sepBy3_info:
         const Text.ParserCombinators.ReadP.sepBy3_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const S3oJX_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.071397426 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy1_closure" {
     Text.ParserCombinators.ReadP.sepBy1_closure:
         const Text.ParserCombinators.ReadP.sepBy1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.sepBy1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3reM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.sepBy3_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.sepBy1_info" {
     Text.ParserCombinators.ReadP.sepBy1_info:
         const Text.ParserCombinators.ReadP.sepBy1_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3oJX_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.076703789 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy2_closure" {
     Text.ParserCombinators.ReadP.endBy2_closure:
         const Text.ParserCombinators.ReadP.endBy2_info;
         const 0;
 },
 sat_s3oy0_entry() //  [R1]
         { []
         }
     {offset
       c3rfd: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oy0_info" {
     sat_s3oy0_info:
         const sat_s3oy0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3oy1_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rfg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rfk; else goto c3rfj;
       c3rfk: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rfj: // global
           _s3oxU::P64 = P64[R1 + 7];
           _s3oxW::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3oxW::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oy0_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3oxU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oy1_info" {
     sat_s3oy1_info:
         const sat_s3oy1_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3oy2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rfl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rfp; else goto c3rfo;
       c3rfp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rfo: // global
           _s3oxT::P64 = P64[R1 + 7];
           _s3oxU::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oy1_info;
           P64[Hp - 8] = _s3oxU::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oxT::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oy2_info" {
     sat_s3oy2_info:
         const sat_s3oy2_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.endBy2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rfq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rfu; else goto c3rft;
       c3rfu: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.endBy2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rft: // global
           I64[Hp - 16] = sat_s3oy2_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R4;
           R2 = Hp - 15;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.endBy2_info" {
     Text.ParserCombinators.ReadP.endBy2_info:
         const Text.ParserCombinators.ReadP.endBy2_entry;
         const 0;
         const 279172874254;
         const 12884901911;
         const S3oJX_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.086380719 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy_closure" {
     Text.ParserCombinators.ReadP.endBy_closure:
         const Text.ParserCombinators.ReadP.endBy_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.endBy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rfP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.endBy_info" {
     Text.ParserCombinators.ReadP.endBy_info:
         const Text.ParserCombinators.ReadP.endBy_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3oJX_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.09112636 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy2_closure" {
     Text.ParserCombinators.ReadP.sepBy2_closure:
         const Text.ParserCombinators.ReadP.sepBy2_info;
         const 0;
 },
 sat_s3oy7_entry() //  [R1]
         { []
         }
     {offset
       c3rg4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rg5; else goto c3rg6;
       c3rg5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rg6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3oy7_info" {
     sat_s3oy7_info:
         const sat_s3oy7_entry;
         const 1;
         const 16;
 },
 Text.ParserCombinators.ReadP.sepBy2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rg9: // global
           _s3oy5::P64 = R4;
           _s3oy4::P64 = R3;
           _s3oy3::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rga; else goto c3rgb;
       c3rgb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rgd; else goto c3rgc;
       c3rgd: // global
           HpAlloc = 24;
           goto c3rga;
       c3rga: // global
           R4 = _s3oy5::P64;
           R3 = _s3oy4::P64;
           R2 = _s3oy3::P64;
           R1 = Text.ParserCombinators.ReadP.sepBy2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rgc: // global
           I64[Hp - 16] = sat_s3oy7_info;
           P64[Hp] = _s3oy5::P64;
           I64[Sp - 16] = block_c3rg7_info;
           R4 = _s3oy5::P64;
           R3 = _s3oy4::P64;
           R2 = _s3oy3::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.sepBy3_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.sepBy2_info" {
     Text.ParserCombinators.ReadP.sepBy2_info:
         const Text.ParserCombinators.ReadP.sepBy2_entry;
         const 0;
         const 180143989389787150;
         const 12884901911;
         const S3oJX_srt+8;
 },
 _c3rg7() //  [R1]
         { []
         }
     {offset
       c3rg7: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rg7_info" {
     block_c3rg7_info:
         const _c3rg7;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.099228875 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy_closure" {
     Text.ParserCombinators.ReadP.sepBy_closure:
         const Text.ParserCombinators.ReadP.sepBy_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.sepBy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rgy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.sepBy2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.sepBy_info" {
     Text.ParserCombinators.ReadP.sepBy_info:
         const Text.ParserCombinators.ReadP.sepBy_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3oJX_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.102757386 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadP.$fMonadReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.107508832 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_info;
         const 0;
 },
 sat_s3oyi_entry() //  [R1]
         { []
         }
     {offset
       c3rgZ: // global
           _s3oyi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rh0; else goto c3rh1;
       c3rh1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rh3; else goto c3rh2;
       c3rh3: // global
           HpAlloc = 24;
           goto c3rh0;
       c3rh0: // global
           R1 = _s3oyi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rh2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3oyi::P64;
           _s3oyb::P64 = P64[_s3oyi::P64 + 16];
           _s3oyc::P64 = P64[_s3oyi::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oyc::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3oyb::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3oyi_info" {
     sat_s3oyi_info:
         const sat_s3oyi_entry;
         const 2;
         const 18;
 },
 sat_s3oyf_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rha: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rhe; else goto c3rhd;
       c3rhe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rhd: // global
           _s3oyb::P64 = P64[R1 + 7];
           _s3oyc::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oyc::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oyb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oyf_info" {
     sat_s3oyf_info:
         const sat_s3oyf_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3oyj_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rhh: // global
           _s3oyc::P64 = R2;
           _s3oyj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rhi; else goto c3rhj;
       c3rhj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3rhl; else goto c3rhk;
       c3rhl: // global
           HpAlloc = 56;
           goto c3rhi;
       c3rhi: // global
           R2 = _s3oyc::P64;
           R1 = _s3oyj::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rhk: // global
           _s3oya::P64 = P64[_s3oyj::P64 + 7];
           _s3oyb::P64 = P64[_s3oyj::P64 + 15];
           I64[Hp - 48] = sat_s3oyi_info;
           P64[Hp - 32] = _s3oyb::P64;
           P64[Hp - 24] = _s3oyc::P64;
           I64[Hp - 16] = sat_s3oyf_info;
           P64[Hp - 8] = _s3oyb::P64;
           P64[Hp] = _s3oyc::P64;
           I64[Sp - 16] = block_c3rhf_info;
           R2 = Hp - 15;
           R1 = _s3oya::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call some_v_s3oya_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oyj_info" {
     sat_s3oyj_info:
         const sat_s3oyj_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+8;
 },
 _c3rhf() //  [R1]
         { []
         }
     {offset
       c3rhf: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rhf_info" {
     block_c3rhf_info:
         const _c3rhf;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 },
 some_v_s3oya_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rhp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rht; else goto c3rhs;
       c3rht: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rhs: // global
           _s3oy8::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3oyj_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oy8::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . some_v_s3oya_info" {
     some_v_s3oya_info:
         const some_v_s3oya_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3oJX_srt+8;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP2_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c3rhu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rhy; else goto c3rhx;
       c3rhy: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rhx: // global
           I64[Hp - 8] = some_v_s3oya_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call some_v_s3oya_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeReadP2_info" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP2_info:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_entry;
         const 0;
         const 288230380446679054;
         const 8589934607;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.124051511 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_info;
         const 0;
 },
 sat_s3oyu_entry() //  [R1]
         { []
         }
     {offset
       c3ri8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ri9; else goto c3ria;
       c3ri9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ria: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3oyu_info" {
     sat_s3oyu_info:
         const sat_s3oyu_entry;
         const 1;
         const 16;
 },
 sat_s3oyr_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rim: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3riq; else goto c3rip;
       c3riq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rip: // global
           _s3oyn::P64 = P64[R1 + 7];
           _s3oyo::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oyo::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oyn::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oyr_info" {
     sat_s3oyr_info:
         const sat_s3oyr_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3oys_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rir: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3riv; else goto c3riu;
       c3riv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3riu: // global
           _s3oym::P64 = P64[R1 + 7];
           _s3oyn::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oyr_info;
           P64[Hp - 8] = _s3oyn::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oym::P64;
           call many_v_s3oym_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oys_info" {
     sat_s3oys_info:
         const sat_s3oys_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+8;
 },
 many_v_s3oym_entry() //  [R1, R2]
         { []
         }
     {offset
       c3riy: // global
           _s3oyn::P64 = R2;
           _s3oym::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3riz; else goto c3riA;
       c3riA: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3riC; else goto c3riB;
       c3riC: // global
           HpAlloc = 48;
           goto c3riz;
       c3riz: // global
           R2 = _s3oyn::P64;
           R1 = _s3oym::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3riB: // global
           _s3oyk::P64 = P64[_s3oym::P64 + 7];
           I64[Hp - 40] = sat_s3oyu_info;
           P64[Hp - 24] = _s3oyn::P64;
           I64[Hp - 16] = sat_s3oys_info;
           P64[Hp - 8] = _s3oym::P64;
           P64[Hp] = _s3oyn::P64;
           I64[Sp - 16] = block_c3riw_info;
           R2 = Hp - 15;
           R1 = _s3oyk::P64;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . many_v_s3oym_info" {
     many_v_s3oym_info:
         const many_v_s3oym_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3oJX_srt+8;
 },
 _c3riw() //  [R1]
         { []
         }
     {offset
       c3riw: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3riw_info" {
     block_c3riw_info:
         const _c3riw;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP1_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c3riG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3riK; else goto c3riJ;
       c3riK: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3riJ: // global
           I64[Hp - 8] = many_v_s3oym_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call many_v_s3oym_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeReadP1_info" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP1_info:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_entry;
         const 0;
         const 576460756598390798;
         const 8589934607;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.136854406 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure+2;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.139237051 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadPlusReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadPlusReadP_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.144074089 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr3_closure" {
     Text.ParserCombinators.ReadP.chainr3_closure:
         const Text.ParserCombinators.ReadP.chainr3_info;
         const 0;
 },
 sat_s3oyE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rjz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3rjD; else goto c3rjC;
       c3rjD: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rjC: // global
           _s3oyz::P64 = P64[R1 + 7];
           _s3oyA::P64 = P64[R1 + 15];
           _s3oyB::P64 = P64[R1 + 23];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3oyB::P64;
           P64[Hp - 8] = _s3oyA::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3oyz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oyE_info" {
     sat_s3oyE_info:
         const sat_s3oyE_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3oyF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rjE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3rjI; else goto c3rjH;
       c3rjI: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rjH: // global
           _s3oyy::P64 = P64[R1 + 7];
           _s3oyz::P64 = P64[R1 + 15];
           _s3oyA::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3oyE_info;
           P64[Hp - 16] = _s3oyz::P64;
           P64[Hp - 8] = _s3oyA::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3oyy::P64;
           call scan_s3oyy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oyF_info" {
     sat_s3oyF_info:
         const sat_s3oyF_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3oJX_srt+8;
 },
 sat_s3oyI_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rjL: // global
           _s3oyA::P64 = R2;
           _s3oyI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rjM; else goto c3rjN;
       c3rjN: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3rjP; else goto c3rjO;
       c3rjP: // global
           HpAlloc = 64;
           goto c3rjM;
       c3rjM: // global
           R2 = _s3oyA::P64;
           R1 = _s3oyI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rjO: // global
           _s3oyw::P64 = P64[_s3oyI::P64 + 7];
           _s3oyy::P64 = P64[_s3oyI::P64 + 15];
           _s3oyz::P64 = P64[_s3oyI::P64 + 23];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3oyz::P64;
           P64[Hp - 32] = _s3oyA::P64;
           I64[Hp - 24] = sat_s3oyF_info;
           P64[Hp - 16] = _s3oyy::P64;
           P64[Hp - 8] = _s3oyz::P64;
           P64[Hp] = _s3oyA::P64;
           I64[Sp - 16] = block_c3rjJ_info;
           R2 = Hp - 23;
           R1 = _s3oyw::P64;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oyI_info" {
     sat_s3oyI_info:
         const sat_s3oyI_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3oJX_srt+8;
 },
 _c3rjJ() //  [R1]
         { []
         }
     {offset
       c3rjJ: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rjJ_info" {
     block_c3rjJ_info:
         const _c3rjJ;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 },
 scan_s3oyy_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rjT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3rjX; else goto c3rjW;
       c3rjX: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rjW: // global
           _s3oyv::P64 = P64[R1 + 7];
           _s3oyw::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3oyI_info;
           P64[Hp - 16] = _s3oyw::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3oyv::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . scan_s3oyy_info" {
     scan_s3oyy_info:
         const scan_s3oyy_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+8;
 },
 Text.ParserCombinators.ReadP.chainr3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rjY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rk2; else goto c3rk1;
       c3rk2: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.chainr3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rk1: // global
           I64[Hp - 16] = scan_s3oyy_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = R4;
           R1 = Hp - 15;
           call scan_s3oyy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainr3_info" {
     Text.ParserCombinators.ReadP.chainr3_info:
         const Text.ParserCombinators.ReadP.chainr3_entry;
         const 0;
         const 1152921508901814286;
         const 12884901911;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.158336405 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr1_closure" {
     Text.ParserCombinators.ReadP.chainr1_closure:
         const Text.ParserCombinators.ReadP.chainr1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rks: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainr3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainr1_info" {
     Text.ParserCombinators.ReadP.chainr1_info:
         const Text.ParserCombinators.ReadP.chainr1_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3oJX_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.162571984 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr2_closure" {
     Text.ParserCombinators.ReadP.chainr2_closure:
         const Text.ParserCombinators.ReadP.chainr2_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3rkG: // global
           _s3oyM::P64 = R5;
           _s3oyL::P64 = R4;
           _s3oyK::P64 = R3;
           _s3oyJ::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rkH; else goto c3rkI;
       c3rkI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3rkK; else goto c3rkJ;
       c3rkK: // global
           HpAlloc = 32;
           goto c3rkH;
       c3rkH: // global
           R5 = _s3oyM::P64;
           R4 = _s3oyL::P64;
           R3 = _s3oyK::P64;
           R2 = _s3oyJ::P64;
           R1 = Text.ParserCombinators.ReadP.chainr2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rkJ: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3oyM::P64;
           P64[Hp] = _s3oyL::P64;
           I64[Sp - 16] = block_c3rkE_info;
           R4 = _s3oyM::P64;
           R3 = _s3oyK::P64;
           R2 = _s3oyJ::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.chainr3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainr2_info" {
     Text.ParserCombinators.ReadP.chainr2_info:
         const Text.ParserCombinators.ReadP.chainr2_entry;
         const 0;
         const 3458764518115508238;
         const 17179869208;
         const S3oJX_srt+8;
 },
 _c3rkE() //  [R1]
         { []
         }
     {offset
       c3rkE: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rkE_info" {
     block_c3rkE_info:
         const _c3rkE;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.168376352 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr_closure" {
     Text.ParserCombinators.ReadP.chainr_closure:
         const Text.ParserCombinators.ReadP.chainr_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3rl1: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainr2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainr_info" {
     Text.ParserCombinators.ReadP.chainr_info:
         const Text.ParserCombinators.ReadP.chainr_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3oJX_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.174872158 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl3_closure" {
     Text.ParserCombinators.ReadP.chainl3_closure:
         const Text.ParserCombinators.ReadP.chainl3_info;
         const 0;
 },
 sat_s3oyY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rlt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3rlx; else goto c3rlw;
       c3rlx: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rlw: // global
           _s3oyS::P64 = P64[R1 + 7];
           _s3oyT::P64 = P64[R1 + 15];
           _s3oyU::P64 = P64[R1 + 23];
           _s3oyV::P64 = P64[R1 + 31];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3oyV::P64;
           P64[Hp - 8] = _s3oyT::P64;
           P64[Hp] = R2;
           R3 = _s3oyU::P64;
           R2 = Hp - 32;
           R1 = _s3oyS::P64;
           call rest_s3oyS_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oyY_info" {
     sat_s3oyY_info:
         const sat_s3oyY_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3oJX_srt+8;
 },
 sat_s3oyZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rly: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3rlC; else goto c3rlB;
       c3rlC: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rlB: // global
           _s3oyP::P64 = P64[R1 + 7];
           _s3oyS::P64 = P64[R1 + 15];
           _s3oyT::P64 = P64[R1 + 23];
           _s3oyU::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3oyY_info;
           P64[Hp - 24] = _s3oyS::P64;
           P64[Hp - 16] = _s3oyT::P64;
           P64[Hp - 8] = _s3oyU::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3oyP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oyZ_info" {
     sat_s3oyZ_info:
         const sat_s3oyZ_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3oJX_srt+8;
 },
 rest_s3oyS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3rlF: // global
           _s3oyU::P64 = R3;
           _s3oyT::P64 = R2;
           _s3oyS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rlG; else goto c3rlH;
       c3rlH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3rlJ; else goto c3rlI;
       c3rlJ: // global
           HpAlloc = 72;
           goto c3rlG;
       c3rlG: // global
           R3 = _s3oyU::P64;
           R2 = _s3oyT::P64;
           R1 = _s3oyS::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rlI: // global
           _s3oyP::P64 = P64[_s3oyS::P64 + 6];
           _s3oyQ::P64 = P64[_s3oyS::P64 + 14];
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s3oyU::P64;
           P64[Hp - 40] = _s3oyT::P64;
           I64[Hp - 32] = sat_s3oyZ_info;
           P64[Hp - 24] = _s3oyP::P64;
           P64[Hp - 16] = _s3oyS::P64;
           P64[Hp - 8] = _s3oyT::P64;
           P64[Hp] = _s3oyU::P64;
           I64[Sp - 16] = block_c3rlD_info;
           R2 = Hp - 31;
           R1 = _s3oyQ::P64;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . rest_s3oyS_info" {
     rest_s3oyS_info:
         const rest_s3oyS_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3oJX_srt+8;
 },
 _c3rlD() //  [R1]
         { []
         }
     {offset
       c3rlD: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rlD_info" {
     block_c3rlD_info:
         const _c3rlD;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 },
 sat_s3oz3_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rlS: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 15];
           call rest_s3oyS_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oz3_info" {
     sat_s3oz3_info:
         const sat_s3oz3_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+8;
 },
 Text.ParserCombinators.ReadP.chainl3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rlV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rlZ; else goto c3rlY;
       c3rlZ: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.chainl3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rlY: // global
           I64[Hp - 40] = rest_s3oyS_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3oz3_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 38;
           _s3oyP::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3oyP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainl3_info" {
     Text.ParserCombinators.ReadP.chainl3_info:
         const Text.ParserCombinators.ReadP.chainl3_entry;
         const 0;
         const 4611686022722355214;
         const 12884901911;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.188524374 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl1_closure" {
     Text.ParserCombinators.ReadP.chainl1_closure:
         const Text.ParserCombinators.ReadP.chainl1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rmq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainl3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainl1_info" {
     Text.ParserCombinators.ReadP.chainl1_info:
         const Text.ParserCombinators.ReadP.chainl1_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3oJX_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.1926645 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl2_closure" {
     Text.ParserCombinators.ReadP.chainl2_closure:
         const Text.ParserCombinators.ReadP.chainl2_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3rmE: // global
           _s3oz7::P64 = R5;
           _s3oz6::P64 = R4;
           _s3oz5::P64 = R3;
           _s3oz4::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rmF; else goto c3rmG;
       c3rmG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3rmI; else goto c3rmH;
       c3rmI: // global
           HpAlloc = 32;
           goto c3rmF;
       c3rmF: // global
           R5 = _s3oz7::P64;
           R4 = _s3oz6::P64;
           R3 = _s3oz5::P64;
           R2 = _s3oz4::P64;
           R1 = Text.ParserCombinators.ReadP.chainl2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rmH: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3oz7::P64;
           P64[Hp] = _s3oz6::P64;
           I64[Sp - 16] = block_c3rmC_info;
           R4 = _s3oz7::P64;
           R3 = _s3oz5::P64;
           R2 = _s3oz4::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.chainl3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainl2_info" {
     Text.ParserCombinators.ReadP.chainl2_info:
         const Text.ParserCombinators.ReadP.chainl2_entry;
         const 0;
         const 13835058059577131022;
         const 17179869208;
         const S3oJX_srt+8;
 },
 _c3rmC() //  [R1]
         { []
         }
     {offset
       c3rmC: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rmC_info" {
     block_c3rmC_info:
         const _c3rmC;
         const 1;
         const 4294967326;
         const S3oJX_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.198954766 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl_closure" {
     Text.ParserCombinators.ReadP.chainl_closure:
         const Text.ParserCombinators.ReadP.chainl_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3rmZ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainl2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainl_info" {
     Text.ParserCombinators.ReadP.chainl_info:
         const Text.ParserCombinators.ReadP.chainl_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3oJX_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.203488068 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++2_closure" {
     Text.ParserCombinators.ReadP.<++2_closure:
         const Text.ParserCombinators.ReadP.<++2_info;
 },
 lvl4_s3ozd_entry() //  [R1]
         { []
         }
     {offset
       c3rni: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rnj; else goto c3rnk;
       c3rnj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rnk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = I64[R1 + 24] - 1;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.<++2_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3ozd_info" {
     lvl4_s3ozd_info:
         const lvl4_s3ozd_entry;
         const 4294967297;
         const 19;
 },
 sat_s3ozg_entry() //  [R1]
         { []
         }
     {offset
       c3rnq: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ozg_info" {
     sat_s3ozg_info:
         const sat_s3ozg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.<++2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rnw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3rnA; else goto c3rnz;
       c3rnA: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.<++2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rnz: // global
           if (R2 == 0) goto c3rnv; else goto c3rnu;
       c3rnv: // global
           Hp = Hp - 64;
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3rnu: // global
           I64[Hp - 56] = lvl4_s3ozd_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3ozg_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.<++2_info" {
     Text.ParserCombinators.ReadP.<++2_info:
         const Text.ParserCombinators.ReadP.<++2_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.215619144 UTC

[section ""data" . Text.ParserCombinators.ReadP.$w<++_closure" {
     Text.ParserCombinators.ReadP.$w<++_closure:
         const Text.ParserCombinators.ReadP.$w<++_info;
         const 0;
 },
 lvl4_s3ozk_entry() //  [R1]
         { []
         }
     {offset
       c3ro1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ro2; else goto c3ro3;
       c3ro2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ro3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3ozk_info" {
     lvl4_s3ozk_info:
         const lvl4_s3ozk_entry;
         const 1;
         const 16;
 },
 probe_s3ozl_slow() //  [R1]
         { []
         }
     {offset
       c3ro6: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call probe_s3ozl_entry(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ozC_entry() //  [R1]
         { []
         }
     {offset
       c3ron: // global
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ozC_info" {
     sat_s3ozC_info:
         const sat_s3ozC_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+24;
 },
 probe_s3ozl_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c3rox: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3roy; else goto u3rpf;
       c3roy: // global
           R1 = R1;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       u3rpf: // global
           P64[Sp - 40] = R1;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call _c3ro7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . probe_s3ozl_info" {
     probe_s3ozl_info:
         const probe_s3ozl_entry;
         const 1;
         const 4294967305;
         const 17179869184;
         const S3oJX_srt+24;
         const 260;
         const probe_s3ozl_slow;
 },
 _c3ro7() //  []
         { []
         }
     {offset
       c3ro7: // global
           _s3ozi::P64 = P64[P64[Sp] + 4];
           I64[Sp - 8] = block_c3roa_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3ozi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3rpk; else goto c3rob;
       u3rpk: // global
           call _c3roa(R1) args: 0, res: 0, upd: 0;
       c3rob: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3roa() //  [R1]
         { []
         }
     {offset
       c3roa: // global
           _c3row::P64 = R1 & 7;
           if (_c3row::P64 < 4) goto u3rpc; else goto u3rpe;
       u3rpc: // global
           if (_c3row::P64 < 3) goto u3rpd; else goto u3rpg;
       u3rpd: // global
           _s3ozn::P64 = P64[Sp + 24];
           if (_c3row::P64 < 2) goto c3ror; else goto c3ros;
       c3ror: // global
           I64[Sp] = block_c3roB_info;
           _s3ozr::P64 = P64[R1 + 7];
           R1 = _s3ozn::P64;
           P64[Sp + 24] = _s3ozr::P64;
           if (R1 & 7 != 0) goto u3rpl; else goto c3roD;
       u3rpl: // global
           call _c3roB(R1) args: 0, res: 0, upd: 0;
       c3roD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ros: // global
           I64[Sp] = block_c3roX_info;
           R2 = _s3ozn::P64;
           R1 = P64[R1 + 6];
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3rpg: // global
           Sp = Sp + 16;
           call _c3rot() args: 0, res: 0, upd: 0;
       u3rpe: // global
           _s3ozp::P64 = P64[Sp + 40];
           if (_c3row::P64 < 5) goto c3rou; else goto c3rov;
       c3rou: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rp7; else goto c3rp6;
       c3rp7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rp6: // global
           I64[Hp - 16] = sat_s3ozC_info;
           P64[Hp - 8] = _s3ozp::P64;
           P64[Hp] = R1;
           R3 = Hp - 15;
           R2 = I64[Sp + 32];
           Sp = Sp + 48;
           call Text.ParserCombinators.ReadP.<++2_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
       c3rov: // global
           R3 = _s3ozp::P64;
           R2 = R1;
           Sp = Sp + 48;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3roa_info" {
     block_c3roa_info:
         const _c3roa;
         const 517;
         const 4294967326;
         const S3oJX_srt+24;
 },
 _c3roB() //  [R1]
         { []
         }
     {offset
       c3roB: // global
           if (R1 & 7 == 1) goto u3rph; else goto c3roR;
       u3rph: // global
           Sp = Sp + 16;
           call _c3rot() args: 0, res: 0, upd: 0;
       c3roR: // global
           I64[Sp] = block_c3roP_info;
           R2 = P64[R1 + 6];
           _s3ozu::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = I64[Sp + 32] + 1;
           P64[Sp + 32] = _s3ozu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3roB_info" {
     block_c3roB_info:
         const _c3roB;
         const 517;
         const 4294967326;
         const S3oJX_srt+24;
 },
 _c3roP() //  [R1]
         { []
         }
     {offset
       c3roP: // global
           P64[Sp + 16] = R1;
           _s3ozo::I64 = I64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 32];
           I64[Sp + 32] = _s3ozo::I64;
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c3ro7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3roP_info" {
     block_c3roP_info:
         const _c3roP;
         const 389;
         const 4294967326;
         const S3oJX_srt+24;
 },
 _c3roX() //  [R1]
         { []
         }
     {offset
       c3roX: // global
           P64[Sp + 16] = R1;
           P64[Sp + 24] = P64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c3ro7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3roX_info" {
     block_c3roX_info:
         const _c3roX;
         const 645;
         const 4294967326;
         const S3oJX_srt+24;
 },
 _c3rot() //  []
         { []
         }
     {offset
       c3rot: // global
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ozF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rpw: // global
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = R2;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           call probe_s3ozl_entry(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ozF_info" {
     sat_s3ozF_info:
         const sat_s3ozF_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3oJX_srt+24;
 },
 Text.ParserCombinators.ReadP.$w<++_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rpz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3rpD; else goto c3rpC;
       c3rpD: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$w<++_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rpC: // global
           I64[Hp - 64] = lvl4_s3ozk_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = probe_s3ozl_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3ozF_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 36;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$w<++_info" {
     Text.ParserCombinators.ReadP.$w<++_info:
         const Text.ParserCombinators.ReadP.$w<++_entry;
         const 0;
         const 4611686022722355214;
         const 12884901911;
         const S3oJX_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.237862419 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++1_closure" {
     Text.ParserCombinators.ReadP.<++1_closure:
         const Text.ParserCombinators.ReadP.<++1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.<++1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rqB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3rqC; else goto c3rqD;
       c3rqC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.<++1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rqD: // global
           I64[Sp - 8] = block_c3rqy_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.<++1_info" {
     Text.ParserCombinators.ReadP.<++1_info:
         const Text.ParserCombinators.ReadP.<++1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S3oJX_srt+264;
 },
 _c3rqy() //  [R1]
         { []
         }
     {offset
       c3rqy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rqG; else goto c3rqF;
       c3rqG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rqF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rqy_info" {
     block_c3rqy_info:
         const _c3rqy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.243533567 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++_closure" {
     Text.ParserCombinators.ReadP.<++_closure:
         const Text.ParserCombinators.ReadP.<++_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.<++_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rqU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.<++1_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.<++_info" {
     Text.ParserCombinators.ReadP.<++_info:
         const Text.ParserCombinators.ReadP.<++_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3oJX_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.251263915 UTC

[section ""data" . Text.ParserCombinators.ReadP.manyTill1_closure" {
     Text.ParserCombinators.ReadP.manyTill1_closure:
         const Text.ParserCombinators.ReadP.manyTill1_info;
         const 0;
 },
 lvl4_s3ozQ_entry() //  [R1]
         { []
         }
     {offset
       c3rre: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rrf; else goto c3rrg;
       c3rrf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rrg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3ozQ_info" {
     lvl4_s3ozQ_info:
         const lvl4_s3ozQ_entry;
         const 1;
         const 16;
 },
 sat_s3ozS_entry() //  [R1]
         { []
         }
     {offset
       c3rrm: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ozS_info" {
     sat_s3ozS_info:
         const sat_s3ozS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 scan_s3ozO_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rrp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3rrt; else goto c3rrs;
       c3rrt: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rrs: // global
           _s3ozM::P64 = P64[R1 + 7];
           I64[Hp - 32] = lvl4_s3ozQ_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3ozS_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 7;
           R1 = _s3ozM::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . scan_s3ozO_info" {
     scan_s3ozO_info:
         const scan_s3ozO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3ozZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rrL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rrP; else goto c3rrO;
       c3rrP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rrO: // global
           _s3ozV::P64 = P64[R1 + 7];
           _s3ozW::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3ozW::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3ozV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ozZ_info" {
     sat_s3ozZ_info:
         const sat_s3ozZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3oA0_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rrQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rrU; else goto c3rrT;
       c3rrU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rrT: // global
           _s3ozU::P64 = P64[R1 + 7];
           _s3ozV::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ozZ_info;
           P64[Hp - 8] = _s3ozV::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3ozU::P64;
           call scan2_s3ozU_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oA0_info" {
     sat_s3oA0_info:
         const sat_s3oA0_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+264;
 },
 scan1_s3ozT_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rrV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rrZ; else goto c3rrY;
       c3rrZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rrY: // global
           _s3ozL::P64 = P64[R1 + 7];
           _s3ozU::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oA0_info;
           P64[Hp - 8] = _s3ozU::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3ozL::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . scan1_s3ozT_info" {
     scan1_s3ozT_info:
         const scan1_s3ozT_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+264;
 },
 scan2_s3ozU_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rs7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3rs8; else goto c3rs9;
       c3rs8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rs9: // global
           I64[Sp - 8] = block_c3rs4_info;
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . scan2_s3ozU_info" {
     scan2_s3ozU_info:
         const scan2_s3ozU_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3oJX_srt+264;
 },
 _c3rs4() //  [R1]
         { []
         }
     {offset
       c3rs4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rsc; else goto c3rsb;
       c3rsc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rsb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rs4_info" {
     block_c3rs4_info:
         const _c3rs4;
         const 0;
         const 30;
 },
 Text.ParserCombinators.ReadP.manyTill1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rsd: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3rsh; else goto c3rsg;
       c3rsh: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.manyTill1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rsg: // global
           I64[Hp - 56] = scan_s3ozO_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = scan1_s3ozT_info;
           P64[Hp - 32] = R2;
           _c3rrv::P64 = Hp - 15;
           P64[Hp - 24] = _c3rrv::P64;
           I64[Hp - 16] = scan2_s3ozU_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 39;
           R2 = R4;
           R1 = _c3rrv::P64;
           call scan2_s3ozU_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.manyTill1_info" {
     Text.ParserCombinators.ReadP.manyTill1_info:
         const Text.ParserCombinators.ReadP.manyTill1_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S3oJX_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.269101335 UTC

[section ""data" . Text.ParserCombinators.ReadP.manyTill_closure" {
     Text.ParserCombinators.ReadP.manyTill_closure:
         const Text.ParserCombinators.ReadP.manyTill_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.manyTill_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rsW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.manyTill1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.manyTill_info" {
     Text.ParserCombinators.ReadP.manyTill_info:
         const Text.ParserCombinators.ReadP.manyTill_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3oJX_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.274711237 UTC

[section ""data" . Text.ParserCombinators.ReadP.eof1_closure" {
     Text.ParserCombinators.ReadP.eof1_closure:
         const Text.ParserCombinators.ReadP.eof1_info;
 },
 lvl4_s3oA5_entry() //  [R1]
         { []
         }
     {offset
       c3rtb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rtc; else goto c3rtd;
       c3rtc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rtd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3oA5_info" {
     lvl4_s3oA5_info:
         const lvl4_s3oA5_entry;
         const 1;
         const 16;
 },
 sat_s3oAa_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rtq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rtr; else goto c3rts;
       c3rtr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rts: // global
           I64[Sp - 16] = block_c3rtj_info;
           _s3oA5::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3oA5::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3rtz; else goto c3rtk;
       u3rtz: // global
           call _c3rtj(R1) args: 0, res: 0, upd: 0;
       c3rtk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oAa_info" {
     sat_s3oAa_info:
         const sat_s3oAa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3rtj() //  [R1]
         { []
         }
     {offset
       c3rtj: // global
           if (R1 & 7 == 1) goto c3rtn; else goto c3rto;
       c3rtn: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3rto: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rtj_info" {
     block_c3rtj_info:
         const _c3rtj;
         const 1;
         const 30;
 },
 Text.ParserCombinators.ReadP.eof1_entry() //  [R2]
         { []
         }
     {offset
       c3rtB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3rtF; else goto c3rtE;
       c3rtF: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.eof1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rtE: // global
           I64[Hp - 48] = lvl4_s3oA5_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3oAa_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.eof1_info" {
     Text.ParserCombinators.ReadP.eof1_info:
         const Text.ParserCombinators.ReadP.eof1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.283330744 UTC

[section ""data" . Text.ParserCombinators.ReadP.eof_closure" {
     Text.ParserCombinators.ReadP.eof_closure:
         const Text.ParserCombinators.ReadP.eof_info;
 },
 Text.ParserCombinators.ReadP.eof_entry() //  [R2]
         { []
         }
     {offset
       c3ru8: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.eof1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.eof_info" {
     Text.ParserCombinators.ReadP.eof_info:
         const Text.ParserCombinators.ReadP.eof_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.287783108 UTC

[section ""data" . Text.ParserCombinators.ReadP.satisfy1_closure" {
     Text.ParserCombinators.ReadP.satisfy1_closure:
         const Text.ParserCombinators.ReadP.satisfy1_info;
 },
 sat_s3oAf_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ruu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3ruv; else goto c3ruw;
       c3ruv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ruw: // global
           I64[Sp - 24] = block_c3ruo_info;
           _s3oAd::P64 = R2;
           R2 = R2;
           _s3oAc::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s3oAc::P64;
           P64[Sp - 8] = _s3oAd::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oAf_info" {
     sat_s3oAf_info:
         const sat_s3oAf_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3ruo() //  [R1]
         { []
         }
     {offset
       c3ruo: // global
           if (R1 & 7 == 1) goto c3rur; else goto c3rus;
       c3rur: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rus: // global
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ruo_info" {
     block_c3ruo_info:
         const _c3ruo;
         const 2;
         const 30;
 },
 Text.ParserCombinators.ReadP.satisfy1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3ruE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ruI; else goto c3ruH;
       c3ruI: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.satisfy1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ruH: // global
           I64[Hp - 32] = sat_s3oAf_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.satisfy1_info" {
     Text.ParserCombinators.ReadP.satisfy1_info:
         const Text.ParserCombinators.ReadP.satisfy1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.296071974 UTC

[section ""data" . Text.ParserCombinators.ReadP.satisfy_closure" {
     Text.ParserCombinators.ReadP.satisfy_closure:
         const Text.ParserCombinators.ReadP.satisfy_info;
 },
 Text.ParserCombinators.ReadP.satisfy_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rv3: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.satisfy1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.satisfy_info" {
     Text.ParserCombinators.ReadP.satisfy_info:
         const Text.ParserCombinators.ReadP.satisfy_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.300903708 UTC

[section ""data" . Text.ParserCombinators.ReadP.char1_closure" {
     Text.ParserCombinators.ReadP.char1_closure:
         const Text.ParserCombinators.ReadP.char1_info;
 },
 sat_s3oAo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rvm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3rvq; else goto c3rvr;
       c3rvq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rvr: // global
           I64[Sp - 24] = block_c3rvj_info;
           _s3oAh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s3oAh::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3rvE; else goto c3rvk;
       u3rvE: // global
           call _c3rvj(R1) args: 0, res: 0, upd: 0;
       c3rvk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oAo_info" {
     sat_s3oAo_info:
         const sat_s3oAo_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3rvj() //  [R1]
         { []
         }
     {offset
       c3rvj: // global
           I64[Sp] = block_c3rvp_info;
           _s3oAk::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3oAk::I64;
           if (R1 & 7 != 0) goto u3rvD; else goto c3rvt;
       u3rvD: // global
           call _c3rvp(R1) args: 0, res: 0, upd: 0;
       c3rvt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rvj_info" {
     block_c3rvj_info:
         const _c3rvj;
         const 2;
         const 30;
 },
 _c3rvp() //  [R1]
         { []
         }
     {offset
       c3rvp: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c3rvC; else goto c3rvB;
       c3rvC: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3rvB: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rvp_info" {
     block_c3rvp_info:
         const _c3rvp;
         const 130;
         const 30;
 },
 Text.ParserCombinators.ReadP.char1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rvG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3rvK; else goto c3rvJ;
       c3rvK: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.char1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rvJ: // global
           I64[Hp - 32] = sat_s3oAo_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.char1_info" {
     Text.ParserCombinators.ReadP.char1_info:
         const Text.ParserCombinators.ReadP.char1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.309782286 UTC

[section ""data" . Text.ParserCombinators.ReadP.char_closure" {
     Text.ParserCombinators.ReadP.char_closure:
         const Text.ParserCombinators.ReadP.char_info;
 },
 Text.ParserCombinators.ReadP.char_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rw9: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.char1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.char_info" {
     Text.ParserCombinators.ReadP.char_info:
         const Text.ParserCombinators.ReadP.char_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.317833846 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wstring_closure" {
     Text.ParserCombinators.ReadP.$wstring_closure:
         const Text.ParserCombinators.ReadP.$wstring_info;
 },
 sat_s3oAI_entry() //  [R1]
         { []
         }
     {offset
       c3rwV: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oAI_info" {
     sat_s3oAI_info:
         const sat_s3oAI_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 scan_s3oAr_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c3rx2: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3rx3; else goto c3rx4;
       c3rx3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rx4: // global
           I64[Sp - 40] = block_c3rwp_info;
           _s3oAr::P64 = R1;
           _s3oAp::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3oAp::P64;
           P64[Sp - 24] = _s3oAr::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3rxq; else goto c3rwq;
       u3rxq: // global
           call _c3rwp(R1) args: 0, res: 0, upd: 0;
       c3rwq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . scan_s3oAr_info" {
     scan_s3oAr_info:
         const scan_s3oAr_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c3rwp() //  [R1]
         { []
         }
     {offset
       c3rwp: // global
           if (R1 & 7 == 1) goto c3rwZ; else goto c3rx0;
       c3rwZ: // global
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3rx0: // global
           I64[Sp] = block_c3rwv_info;
           _s3oAw::P64 = P64[R1 + 6];
           _s3oAx::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 8] = _s3oAx::P64;
           P64[Sp + 24] = _s3oAw::P64;
           if (R1 & 7 != 0) goto u3rxn; else goto c3rww;
       u3rxn: // global
           call _c3rwv(R1) args: 0, res: 0, upd: 0;
       c3rww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rwp_info" {
     block_c3rwp_info:
         const _c3rwp;
         const 4;
         const 30;
 },
 _c3rwv() //  [R1]
         { []
         }
     {offset
       c3rwv: // global
           if (R1 & 7 == 1) goto c3rxb; else goto c3rxd;
       c3rxb: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rxd: // global
           I64[Sp - 8] = block_c3rwB_info;
           _s3oAz::P64 = P64[R1 + 6];
           _s3oAA::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _s3oAA::P64;
           P64[Sp + 24] = _s3oAz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3rxo; else goto c3rwC;
       u3rxo: // global
           call _c3rwB(R1) args: 0, res: 0, upd: 0;
       c3rwC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rwv_info" {
     block_c3rwv_info:
         const _c3rwv;
         const 4;
         const 30;
 },
 _c3rwB() //  [R1]
         { []
         }
     {offset
       c3rwB: // global
           I64[Sp] = block_c3rwG_info;
           _s3oAC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3oAC::I64;
           if (R1 & 7 != 0) goto u3rxp; else goto c3rwH;
       u3rxp: // global
           call _c3rwG(R1) args: 0, res: 0, upd: 0;
       c3rwH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rwB_info" {
     block_c3rwB_info:
         const _c3rwB;
         const 5;
         const 30;
 },
 _c3rwG() //  [R1]
         { []
         }
     {offset
       c3rwG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3rxh; else goto c3rxg;
       c3rxh: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rxg: // global
           if (I64[Sp + 32] == I64[R1 + 7]) goto c3rxl; else goto c3rxj;
       c3rxl: // global
           I64[Hp - 72] = stg_ap_4_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 40];
           I64[Hp - 24] = sat_s3oAI_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rxj: // global
           Hp = Hp - 80;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rwG_info" {
     block_c3rwG_info:
         const _c3rwG;
         const 517;
         const 30;
 },
 sat_s3oAK_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rxw: // global
           R4 = P64[R1 + 15];
           R3 = R2;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 23];
           call scan_s3oAr_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oAK_info" {
     sat_s3oAK_info:
         const sat_s3oAK_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$wstring_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rxz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rxD; else goto c3rxC;
       c3rxD: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wstring_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rxC: // global
           I64[Hp - 40] = scan_s3oAr_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3oAK_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 37;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$wstring_info" {
     Text.ParserCombinators.ReadP.$wstring_info:
         const Text.ParserCombinators.ReadP.$wstring_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.334838729 UTC

[section ""data" . Text.ParserCombinators.ReadP.string1_closure" {
     Text.ParserCombinators.ReadP.string1_closure:
         const Text.ParserCombinators.ReadP.string1_info;
 },
 Text.ParserCombinators.ReadP.string1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3ryx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ryy; else goto c3ryz;
       c3ryy: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.string1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ryz: // global
           I64[Sp - 8] = block_c3ryu_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.string1_info" {
     Text.ParserCombinators.ReadP.string1_info:
         const Text.ParserCombinators.ReadP.string1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3ryu() //  [R1]
         { []
         }
     {offset
       c3ryu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ryC; else goto c3ryB;
       c3ryC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ryB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ryu_info" {
     block_c3ryu_info:
         const _c3ryu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.340062167 UTC

[section ""data" . Text.ParserCombinators.ReadP.string_closure" {
     Text.ParserCombinators.ReadP.string_closure:
         const Text.ParserCombinators.ReadP.string_info;
 },
 Text.ParserCombinators.ReadP.string_entry() //  [R2, R3]
         { []
         }
     {offset
       c3ryQ: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.string1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.string_info" {
     Text.ParserCombinators.ReadP.string_info:
         const Text.ParserCombinators.ReadP.string_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.347516706 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wmunch_closure" {
     Text.ParserCombinators.ReadP.$wmunch_closure:
         const Text.ParserCombinators.ReadP.$wmunch_info;
 },
 sat_s3oB1_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rzr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rzv; else goto c3rzu;
       c3rzv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rzu: // global
           _s3oAT::P64 = P64[R1 + 7];
           _s3oAV::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oAV::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oAT::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oB1_info" {
     sat_s3oB1_info:
         const sat_s3oB1_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 lvl4_s3oAY_entry() //  [R1]
         { []
         }
     {offset
       c3rzw: // global
           _s3oAY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rzx; else goto c3rzy;
       c3rzy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rzA; else goto c3rzz;
       c3rzA: // global
           HpAlloc = 24;
           goto c3rzx;
       c3rzx: // global
           R1 = _s3oAY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rzz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3oAY::P64;
           _s3oAR::P64 = P64[_s3oAY::P64 + 16];
           _s3oAT::P64 = P64[_s3oAY::P64 + 24];
           _s3oAV::P64 = P64[_s3oAY::P64 + 32];
           _s3oAW::P64 = P64[_s3oAY::P64 + 40];
           I64[Hp - 16] = sat_s3oB1_info;
           P64[Hp - 8] = _s3oAT::P64;
           P64[Hp] = _s3oAV::P64;
           R3 = Hp - 15;
           R2 = _s3oAW::P64;
           R1 = _s3oAR::P64;
           Sp = Sp - 16;
           call scan_s3oAR_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3oAY_info" {
     lvl4_s3oAY_info:
         const lvl4_s3oAY_entry;
         const 4;
         const 15;
 },
 sat_s3oB3_entry() //  [R1]
         { []
         }
     {offset
       c3rzG: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oB3_info" {
     sat_s3oB3_info:
         const sat_s3oB3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 scan_s3oAR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3rzN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3rzO; else goto c3rzP;
       c3rzO: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rzP: // global
           I64[Sp - 32] = block_c3rz6_info;
           _s3oAR::P64 = R1;
           _s3oAP::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 24] = _s3oAP::P64;
           P64[Sp - 16] = _s3oAR::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3rA7; else goto c3rz7;
       u3rA7: // global
           call _c3rz6(R1) args: 0, res: 0, upd: 0;
       c3rz7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . scan_s3oAR_info" {
     scan_s3oAR_info:
         const scan_s3oAR_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3rz6() //  [R1]
         { []
         }
     {offset
       c3rz6: // global
           if (R1 & 7 == 1) goto u3rA3; else goto c3rzL;
       u3rA3: // global
           Sp = Sp + 24;
           call _c3rzW() args: 0, res: 0, upd: 0;
       c3rzL: // global
           I64[Sp - 8] = block_c3rzc_info;
           _s3oAV::P64 = P64[R1 + 6];
           R2 = _s3oAV::P64;
           _s3oAW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s3oAW::P64;
           P64[Sp + 8] = _s3oAV::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rz6_info" {
     block_c3rz6_info:
         const _c3rz6;
         const 3;
         const 30;
 },
 _c3rzc() //  [R1]
         { []
         }
     {offset
       c3rzc: // global
           if (R1 & 7 == 1) goto u3rA4; else goto c3rzY;
       u3rA4: // global
           Sp = Sp + 32;
           call _c3rzW() args: 0, res: 0, upd: 0;
       c3rzY: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3rA1; else goto c3rA0;
       c3rA1: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rA0: // global
           I64[Hp - 72] = lvl4_s3oAY_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = sat_s3oB3_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rzc_info" {
     block_c3rzc_info:
         const _c3rzc;
         const 4;
         const 30;
 },
 _c3rzW() //  []
         { []
         }
     {offset
       c3rzW: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oB5_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rAd: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 15];
           call scan_s3oAR_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oB5_info" {
     sat_s3oB5_info:
         const sat_s3oB5_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$wmunch_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rAg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3rAk; else goto c3rAj;
       c3rAk: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wmunch_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rAj: // global
           I64[Hp - 32] = scan_s3oAR_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3oB5_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 30;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$wmunch_info" {
     Text.ParserCombinators.ReadP.$wmunch_info:
         const Text.ParserCombinators.ReadP.$wmunch_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.365026126 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch2_closure" {
     Text.ParserCombinators.ReadP.munch2_closure:
         const Text.ParserCombinators.ReadP.munch2_info;
 },
 Text.ParserCombinators.ReadP.munch2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rBb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3rBc; else goto c3rBd;
       c3rBc: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.munch2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rBd: // global
           I64[Sp - 8] = block_c3rB8_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.munch2_info" {
     Text.ParserCombinators.ReadP.munch2_info:
         const Text.ParserCombinators.ReadP.munch2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3rB8() //  [R1]
         { []
         }
     {offset
       c3rB8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rBg; else goto c3rBf;
       c3rBg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rBf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rB8_info" {
     block_c3rB8_info:
         const _c3rB8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.371309746 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch_closure" {
     Text.ParserCombinators.ReadP.munch_closure:
         const Text.ParserCombinators.ReadP.munch_info;
 },
 Text.ParserCombinators.ReadP.munch_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rBu: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.munch2_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.munch_info" {
     Text.ParserCombinators.ReadP.munch_info:
         const Text.ParserCombinators.ReadP.munch_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.376934223 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wmunch1_closure" {
     Text.ParserCombinators.ReadP.$wmunch1_closure:
         const Text.ParserCombinators.ReadP.$wmunch1_info;
 },
 sat_s3oBg_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rBV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rBZ; else goto c3rBY;
       c3rBZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rBY: // global
           _s3oBb::P64 = P64[R1 + 7];
           _s3oBc::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oBc::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oBb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oBg_info" {
     sat_s3oBg_info:
         const sat_s3oBg_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3oBj_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rC4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3rC5; else goto c3rC6;
       c3rC5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rC6: // global
           I64[Sp - 32] = block_c3rBK_info;
           _s3oBc::P64 = R2;
           R2 = R2;
           _s3oBa::P64 = P64[R1 + 7];
           _s3oBb::P64 = P64[R1 + 15];
           R1 = _s3oBa::P64;
           P64[Sp - 24] = _s3oBa::P64;
           P64[Sp - 16] = _s3oBb::P64;
           P64[Sp - 8] = _s3oBc::P64;
           Sp = Sp - 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oBj_info" {
     sat_s3oBj_info:
         const sat_s3oBj_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3rBK() //  [R1]
         { []
         }
     {offset
       c3rBK: // global
           if (R1 & 7 == 1) goto c3rC1; else goto c3rC2;
       c3rC1: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rC2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rCe; else goto c3rCd;
       c3rCe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rCd: // global
           I64[Hp - 16] = sat_s3oBg_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_c3rC9_info;
           R3 = Hp - 15;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rBK_info" {
     block_c3rBK_info:
         const _c3rBK;
         const 3;
         const 30;
 },
 _c3rC9() //  [R1]
         { []
         }
     {offset
       c3rC9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rCh; else goto c3rCg;
       c3rCh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rCg: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rC9_info" {
     block_c3rC9_info:
         const _c3rC9;
         const 0;
         const 30;
 },
 Text.ParserCombinators.ReadP.$wmunch1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rCi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rCm; else goto c3rCl;
       c3rCm: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wmunch1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rCl: // global
           I64[Hp - 16] = sat_s3oBj_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$wmunch1_info" {
     Text.ParserCombinators.ReadP.$wmunch1_info:
         const Text.ParserCombinators.ReadP.$wmunch1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.388506439 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch3_closure" {
     Text.ParserCombinators.ReadP.munch3_closure:
         const Text.ParserCombinators.ReadP.munch3_info;
 },
 Text.ParserCombinators.ReadP.munch3_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rCS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3rCT; else goto c3rCU;
       c3rCT: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.munch3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rCU: // global
           I64[Sp - 8] = block_c3rCP_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch1_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.munch3_info" {
     Text.ParserCombinators.ReadP.munch3_info:
         const Text.ParserCombinators.ReadP.munch3_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3rCP() //  [R1]
         { []
         }
     {offset
       c3rCP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rCX; else goto c3rCW;
       c3rCX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rCW: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rCP_info" {
     block_c3rCP_info:
         const _c3rCP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.394763948 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch1_closure" {
     Text.ParserCombinators.ReadP.munch1_closure:
         const Text.ParserCombinators.ReadP.munch1_info;
 },
 Text.ParserCombinators.ReadP.munch1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rDb: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.munch3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.munch1_info" {
     Text.ParserCombinators.ReadP.munch1_info:
         const Text.ParserCombinators.ReadP.munch1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.403021294 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces2_closure" {
     Text.ParserCombinators.ReadP.skipSpaces2_closure:
         const Text.ParserCombinators.ReadP.skipSpaces2_info;
 },
 lvl4_s3oBE_entry() //  [R1]
         { []
         }
     {offset
       c3rDR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rDS; else goto c3rDT;
       c3rDS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rDT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3oBE_info" {
     lvl4_s3oBE_info:
         const lvl4_s3oBE_entry;
         const 2;
         const 18;
 },
 sat_s3oBG_entry() //  [R1]
         { []
         }
     {offset
       c3rDZ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oBG_info" {
     sat_s3oBG_info:
         const sat_s3oBG_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl4_s3oBL_entry() //  [R1]
         { []
         }
     {offset
       c3rEi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rEj; else goto c3rEk;
       c3rEj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rEk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3oBL_info" {
     lvl4_s3oBL_info:
         const lvl4_s3oBL_entry;
         const 2;
         const 18;
 },
 sat_s3oBN_entry() //  [R1]
         { []
         }
     {offset
       c3rEq: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oBN_info" {
     sat_s3oBN_info:
         const sat_s3oBN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl4_s3oBO_entry() //  [R1]
         { []
         }
     {offset
       c3rEy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rEz; else goto c3rEA;
       c3rEz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rEA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3oBO_info" {
     lvl4_s3oBO_info:
         const lvl4_s3oBO_entry;
         const 2;
         const 18;
 },
 sat_s3oBQ_entry() //  [R1]
         { []
         }
     {offset
       c3rEG: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oBQ_info" {
     sat_s3oBQ_info:
         const sat_s3oBQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl4_s3oBR_entry() //  [R1]
         { []
         }
     {offset
       c3rEO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rEP; else goto c3rEQ;
       c3rEP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rEQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3oBR_info" {
     lvl4_s3oBR_info:
         const lvl4_s3oBR_entry;
         const 2;
         const 18;
 },
 sat_s3oBT_entry() //  [R1]
         { []
         }
     {offset
       c3rEW: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oBT_info" {
     sat_s3oBT_info:
         const sat_s3oBT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.skipSpaces2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rF3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3rF4; else goto c3rF5;
       c3rF4: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipSpaces2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rF5: // global
           I64[Sp - 16] = block_c3rDm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3rFw; else goto c3rDn;
       u3rFw: // global
           call _c3rDm(R1) args: 0, res: 0, upd: 0;
       c3rDn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipSpaces2_info" {
     Text.ParserCombinators.ReadP.skipSpaces2_info:
         const Text.ParserCombinators.ReadP.skipSpaces2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3rDm() //  [R1]
         { []
         }
     {offset
       c3rDm: // global
           if (R1 & 7 == 1) goto c3rF0; else goto c3rF1;
       c3rF0: // global
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3rF1: // global
           I64[Sp - 8] = block_c3rDs_info;
           _s3oBs::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3oBs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3rFv; else goto c3rDt;
       u3rFv: // global
           call _c3rDs(R1) args: 0, res: 0, upd: 0;
       c3rDt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rDm_info" {
     block_c3rDm_info:
         const _c3rDm;
         const 1;
         const 30;
 },
 _c3rDs() //  [R1]
         { []
         }
     {offset
       c3rDs: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3rFb; else goto c3rFa;
       c3rFb: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rFa: // global
           _s3oBp::P64 = P64[Sp + 16];
           _s3oBs::P64 = P64[Sp + 8];
           _s3oBu::I64 = I64[R1 + 7];
           if (_s3oBu::I64 > 887) goto c3rFh; else goto c3rFu;
       c3rFh: // global
           (_s3oBC::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(_s3oBu::I64);
           if (_s3oBC::I64 == 0) goto c3rFj; else goto c3rFe;
       c3rFe: // global
           I64[Hp - 56] = lvl4_s3oBE_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBG_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rFu: // global
           if (_s3oBu::I64 == 32) goto c3rFt; else goto c3rFr;
       c3rFt: // global
           I64[Hp - 56] = lvl4_s3oBR_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBT_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rFr: // global
           if ((_s3oBu::I64 + -9) > 4) goto c3rFn; else goto c3rFp;
       c3rFn: // global
           if (_s3oBu::I64 != 160) goto c3rFj; else goto c3rFl;
       c3rFj: // global
           Hp = Hp - 64;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s3oBp::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3rFl: // global
           I64[Hp - 56] = lvl4_s3oBL_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBN_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rFp: // global
           I64[Hp - 56] = lvl4_s3oBO_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBQ_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rDs_info" {
     block_c3rDs_info:
         const _c3rDs;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.426402662 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces1_closure" {
     Text.ParserCombinators.ReadP.skipSpaces1_closure:
         const Text.ParserCombinators.ReadP.skipSpaces1_info;
 },
 sat_s3oBW_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rGJ: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3oBW_info" {
     sat_s3oBW_info:
         const sat_s3oBW_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.skipSpaces1_entry() //  [R2]
         { []
         }
     {offset
       c3rGN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3rGR; else goto c3rGQ;
       c3rGR: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipSpaces1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rGQ: // global
           I64[Hp - 24] = sat_s3oBW_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipSpaces1_info" {
     Text.ParserCombinators.ReadP.skipSpaces1_info:
         const Text.ParserCombinators.ReadP.skipSpaces1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.432264553 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces_closure" {
     Text.ParserCombinators.ReadP.skipSpaces_closure:
         const Text.ParserCombinators.ReadP.skipSpaces_info;
 },
 Text.ParserCombinators.ReadP.skipSpaces_entry() //  [R2]
         { []
         }
     {offset
       c3rH5: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipSpaces_info" {
     Text.ParserCombinators.ReadP.skipSpaces_info:
         const Text.ParserCombinators.ReadP.skipSpaces_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.435926925 UTC

[section ""data" . Text.ParserCombinators.ReadP.Get_closure" {
     Text.ParserCombinators.ReadP.Get_closure:
         const Text.ParserCombinators.ReadP.Get_info;
 },
 Text.ParserCombinators.ReadP.Get_entry() //  [R2]
         { []
         }
     {offset
       c3rHh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rHl; else goto c3rHk;
       c3rHl: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Get_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rHk: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Get_info" {
     Text.ParserCombinators.ReadP.Get_info:
         const Text.ParserCombinators.ReadP.Get_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.439955907 UTC

[section ""data" . Text.ParserCombinators.ReadP.Look_closure" {
     Text.ParserCombinators.ReadP.Look_closure:
         const Text.ParserCombinators.ReadP.Look_info;
 },
 Text.ParserCombinators.ReadP.Look_entry() //  [R2]
         { []
         }
     {offset
       c3rHw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rHA; else goto c3rHz;
       c3rHA: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Look_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rHz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Look_info" {
     Text.ParserCombinators.ReadP.Look_info:
         const Text.ParserCombinators.ReadP.Look_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.443490066 UTC

[section ""data" . Text.ParserCombinators.ReadP.Fail_closure" {
     Text.ParserCombinators.ReadP.Fail_closure:
         const Text.ParserCombinators.ReadP.Fail_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.445930709 UTC

[section ""data" . Text.ParserCombinators.ReadP.Result_closure" {
     Text.ParserCombinators.ReadP.Result_closure:
         const Text.ParserCombinators.ReadP.Result_info;
 },
 Text.ParserCombinators.ReadP.Result_entry() //  [R2, R3]
         { []
         }
     {offset
       c3rHM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rHQ; else goto c3rHP;
       c3rHQ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Result_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rHP: // global
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Result_info" {
     Text.ParserCombinators.ReadP.Result_info:
         const Text.ParserCombinators.ReadP.Result_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.450527281 UTC

[section ""data" . Text.ParserCombinators.ReadP.Final_closure" {
     Text.ParserCombinators.ReadP.Final_closure:
         const Text.ParserCombinators.ReadP.Final_info;
 },
 Text.ParserCombinators.ReadP.Final_entry() //  [R2]
         { []
         }
     {offset
       c3rI1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rI5; else goto c3rI4;
       c3rI5: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Final_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rI4: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Final_info" {
     Text.ParserCombinators.ReadP.Final_info:
         const Text.ParserCombinators.ReadP.Final_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.454166833 UTC

[section ""cstring" . i3qnu_str" {
     i3qnu_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,71,101,116]
 },
 Text.ParserCombinators.ReadP.Get_con_entry() //  [R1]
         { []
         }
     {offset
       c3rIb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Get_con_info" {
     Text.ParserCombinators.ReadP.Get_con_info:
         const Text.ParserCombinators.ReadP.Get_con_entry;
         const 1;
         const 2;
         const i3qnu_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.457926863 UTC

[section ""cstring" . i3qnw_str" {
     i3qnw_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,76,111,111,107]
 },
 Text.ParserCombinators.ReadP.Look_con_entry() //  [R1]
         { []
         }
     {offset
       c3rIh: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Look_con_info" {
     Text.ParserCombinators.ReadP.Look_con_info:
         const Text.ParserCombinators.ReadP.Look_con_entry;
         const 1;
         const 4294967298;
         const i3qnw_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.461304217 UTC

[section ""cstring" . i3qny_str" {
     i3qny_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,70,97,105,108]
 },
 Text.ParserCombinators.ReadP.Fail_con_entry() //  [R1]
         { []
         }
     {offset
       c3rIn: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Fail_con_info" {
     Text.ParserCombinators.ReadP.Fail_con_info:
         const Text.ParserCombinators.ReadP.Fail_con_entry;
         const 4294967296;
         const 8589934595;
         const i3qny_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.464683945 UTC

[section ""cstring" . i3qnA_str" {
     i3qnA_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,82,101,115,117,108,116]
 },
 Text.ParserCombinators.ReadP.Result_con_entry() //  [R1]
         { []
         }
     {offset
       c3rIt: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Result_con_info" {
     Text.ParserCombinators.ReadP.Result_con_info:
         const Text.ParserCombinators.ReadP.Result_con_entry;
         const 2;
         const 12884901892;
         const i3qnA_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.468396197 UTC

[section ""cstring" . i3qnC_str" {
     i3qnC_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,70,105,110,97,108]
 },
 Text.ParserCombinators.ReadP.Final_con_entry() //  [R1]
         { []
         }
     {offset
       c3rIz: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Final_con_info" {
     Text.ParserCombinators.ReadP.Final_con_info:
         const Text.ParserCombinators.ReadP.Final_con_entry;
         const 1;
         const 17179869186;
         const i3qnC_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:02.471611261 UTC

[section ""relreadonly" . S3oJX_srt" {
     S3oJX_srt:
         const Control.Exception.Base.patError_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const lvl1_r3oqF_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure;
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure;
         const Text.ParserCombinators.ReadP.choice_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const lvl3_r3oqH_closure;
         const Text.ParserCombinators.ReadP.gather1_closure;
         const Text.ParserCombinators.ReadP.option1_closure;
         const Text.ParserCombinators.ReadP.optional1_closure;
         const Text.ParserCombinators.ReadP.endBy3_closure;
         const Text.ParserCombinators.ReadP.many2_closure;
         const Text.ParserCombinators.ReadP.endBy4_closure;
         const Text.ParserCombinators.ReadP.skipMany2_closure;
         const Text.ParserCombinators.ReadP.skipMany3_closure;
         const Text.ParserCombinators.ReadP.sepBy3_closure;
         const Text.ParserCombinators.ReadP.endBy2_closure;
         const Text.ParserCombinators.ReadP.sepBy2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure;
         const Text.ParserCombinators.ReadP.chainr3_closure;
         const Text.ParserCombinators.ReadP.chainr2_closure;
         const Text.ParserCombinators.ReadP.chainl3_closure;
         const Text.ParserCombinators.ReadP.chainl2_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const Text.ParserCombinators.ReadP.<++1_closure;
         const Text.ParserCombinators.ReadP.manyTill1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.659158627 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:58:05.660976124 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_entry() //  [R2]
         { []
         }
     {offset
       c3rTL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rTP; else goto c3rTO;
       c3rTP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rTO: // global
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.665079015 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure:
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info;
 },
 Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_entry() //  []
         { []
         }
     {offset
       c3rU1: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info" {
     Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info:
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.669781266 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP2_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP2_closure:
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_info;
 },
 sat_s3rIL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rUi: // global
           R4 = R2;
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rIL_info" {
     sat_s3rIL_info:
         const sat_s3rIL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fFunctorReadP2_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c3rUl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rUp; else goto c3rUo;
       c3rUp: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fFunctorReadP2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rUo: // global
           I64[Hp - 16] = sat_s3rIL_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 15;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fFunctorReadP2_info" {
     Text.ParserCombinators.ReadP.$fFunctorReadP2_info:
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.679201487 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP1_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP1_closure:
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_info;
 },
 sat_s3rIR_entry() //  [R1]
         { []
         }
     {offset
       c3rUI: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rIR_info" {
     sat_s3rIR_info:
         const sat_s3rIR_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fFunctorReadP1_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c3rUL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rUP; else goto c3rUO;
       c3rUP: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fFunctorReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rUO: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rIR_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fFunctorReadP1_info" {
     Text.ParserCombinators.ReadP.$fFunctorReadP1_info:
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.684530446 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_closure+3;
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.68683534 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_info;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP5_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c3rV7: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeReadP5_info" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP5_info:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.690479243 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure:
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_info;
 },
 Text.ParserCombinators.ReadP.$fMonadFailReadP1_entry() //  []
         { []
         }
     {offset
       c3rVi: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fMonadFailReadP1_info" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP1_info:
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.694682922 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP1_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP1_closure:
         const Text.ParserCombinators.ReadP.$fMonadReadP1_info;
 },
 sat_s3rJ0_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rVz: // global
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rJ0_info" {
     sat_s3rJ0_info:
         const sat_s3rJ0_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fMonadReadP1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3rVC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rVG; else goto c3rVF;
       c3rVG: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fMonadReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rVF: // global
           I64[Hp - 16] = sat_s3rJ0_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3rIW::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3rIW::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fMonadReadP1_info" {
     Text.ParserCombinators.ReadP.$fMonadReadP1_info:
         const Text.ParserCombinators.ReadP.$fMonadReadP1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.705504317 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info;
 },
 sat_s3rJ7_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rW5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rW6; else goto c3rW7;
       c3rW6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rW7: // global
           I64[Sp - 16] = block_c3rW3_info;
           R2 = R2;
           _s3rJ1::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rJ1::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rJ7_info" {
     sat_s3rJ7_info:
         const sat_s3rJ7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3rW3() //  [R1]
         { []
         }
     {offset
       c3rW3: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rW3_info" {
     block_c3rW3_info:
         const _c3rW3;
         const 1;
         const 30;
 },
 sat_s3rJb_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rWk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rWl; else goto c3rWm;
       c3rWl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rWm: // global
           I64[Sp - 16] = block_c3rWi_info;
           R2 = R2;
           _s3rJ1::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rJ1::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rJb_info" {
     sat_s3rJb_info:
         const sat_s3rJb_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3rWi() //  [R1]
         { []
         }
     {offset
       c3rWi: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rWi_info" {
     block_c3rWi_info:
         const _c3rWi;
         const 1;
         const 30;
 },
 sat_s3rJf_entry() //  [R1]
         { []
         }
     {offset
       c3rWx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rWy; else goto c3rWz;
       c3rWy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rWz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rJf_info" {
     sat_s3rJf_info:
         const sat_s3rJf_entry;
         const 2;
         const 18;
 },
 sat_s3rJm_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rWO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rWT; else goto c3rWU;
       c3rWT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rWU: // global
           I64[Sp - 16] = block_c3rWL_info;
           _s3rJ1::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3rJ1::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3rWY; else goto c3rWM;
       u3rWY: // global
           call _c3rWL(R1) args: 0, res: 0, upd: 0;
       c3rWM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rJm_info" {
     sat_s3rJm_info:
         const sat_s3rJm_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3rWL() //  [R1]
         { []
         }
     {offset
       c3rWL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3rWX; else goto c3rWW;
       c3rWX: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rWW: // global
           _s3rJj::P64 = P64[R1 + 7];
           _s3rJk::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s3rJj::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _s3rJk::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rWL_info" {
     block_c3rWL_info:
         const _c3rWL;
         const 1;
         const 30;
 },
 sat_s3rJn_entry() //  [R1]
         { []
         }
     {offset
       c3rWZ: // global
           _s3rJn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rX0; else goto c3rX1;
       c3rX1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rX3; else goto c3rX2;
       c3rX3: // global
           HpAlloc = 16;
           goto c3rX0;
       c3rX0: // global
           R1 = _s3rJn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rX2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rJn::P64;
           _s3rJ1::P64 = P64[_s3rJn::P64 + 16];
           _s3rJg::P64 = P64[_s3rJn::P64 + 24];
           I64[Hp - 8] = sat_s3rJm_info;
           P64[Hp] = _s3rJ1::P64;
           R3 = _s3rJg::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rJn_info" {
     sat_s3rJn_info:
         const sat_s3rJn_entry;
         const 2;
         const 18;
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       c3rXb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rXc; else goto c3rXd;
       c3rXc: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rXd: // global
           I64[Sp - 16] = block_c3rVT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3rXA; else goto c3rVU;
       u3rXA: // global
           call _c3rVT(R1) args: 0, res: 0, upd: 0;
       c3rVU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3rVT() //  [R1]
         { []
         }
     {offset
       c3rVT: // global
           _s3rJ1::P64 = P64[Sp + 8];
           _c3rXa::P64 = R1 & 7;
           if (_c3rXa::P64 < 4) goto u3rXx; else goto u3rXz;
       u3rXx: // global
           if (_c3rXa::P64 < 3) goto u3rXy; else goto c3rX7;
       u3rXy: // global
           if (_c3rXa::P64 < 2) goto c3rX5; else goto c3rX6;
       c3rX5: // global
           Hp = Hp + 40;
           _s3rJ3::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3rXl; else goto c3rXg;
       c3rXg: // global
           _s3rJ4::P64 = P64[_s3rJ3::P64 + 7];
           I64[Hp - 32] = sat_s3rJ7_info;
           P64[Hp - 24] = _s3rJ1::P64;
           P64[Hp - 16] = _s3rJ4::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rX6: // global
           Hp = Hp + 40;
           _s3rJ3::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3rXl; else goto c3rXk;
       c3rXl: // global
           HpAlloc = 40;
           R1 = _s3rJ3::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rXk: // global
           _s3rJ8::P64 = P64[_s3rJ3::P64 + 6];
           I64[Hp - 32] = sat_s3rJb_info;
           P64[Hp - 24] = _s3rJ1::P64;
           P64[Hp - 16] = _s3rJ8::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rX7: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3rXz: // global
           if (_c3rXa::P64 < 5) goto c3rX8; else goto c3rX9;
       c3rX8: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3rXs; else goto c3rXr;
       c3rXs: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rXr: // global
           _s3rJc::P64 = P64[R1 + 4];
           _s3rJd::P64 = P64[R1 + 12];
           I64[Hp - 80] = sat_s3rJf_info;
           P64[Hp - 64] = _s3rJ1::P64;
           P64[Hp - 56] = _s3rJd::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3rJ1::P64;
           P64[Hp - 24] = _s3rJc::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rX9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rXw; else goto c3rXv;
       c3rXw: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rXv: // global
           _s3rJg::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3rJn_info;
           P64[Hp - 24] = _s3rJ1::P64;
           P64[Hp - 16] = _s3rJg::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rVT_info" {
     block_c3rVT_info:
         const _c3rVT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.741454742 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info;
 },
 sat_s3rJu_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rZ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rZ1; else goto c3rZ2;
       c3rZ1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rZ2: // global
           I64[Sp - 16] = block_c3rYY_info;
           R2 = R2;
           _s3rJo::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rJo::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rJu_info" {
     sat_s3rJu_info:
         const sat_s3rJu_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3rYY() //  [R1]
         { []
         }
     {offset
       c3rYY: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rYY_info" {
     block_c3rYY_info:
         const _c3rYY;
         const 1;
         const 30;
 },
 sat_s3rJy_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rZf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rZg; else goto c3rZh;
       c3rZg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rZh: // global
           I64[Sp - 16] = block_c3rZd_info;
           R2 = R2;
           _s3rJo::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rJo::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rJy_info" {
     sat_s3rJy_info:
         const sat_s3rJy_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3rZd() //  [R1]
         { []
         }
     {offset
       c3rZd: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rZd_info" {
     block_c3rZd_info:
         const _c3rZd;
         const 1;
         const 30;
 },
 sat_s3rJB_entry() //  [R1]
         { []
         }
     {offset
       c3rZs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rZt; else goto c3rZu;
       c3rZt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rZu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rJB_info" {
     sat_s3rJB_info:
         const sat_s3rJB_entry;
         const 2;
         const 18;
 },
 sat_s3rJH_entry() //  [R1, R2]
         { []
         }
     {offset
       c3rZJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rZN; else goto c3rZO;
       c3rZN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rZO: // global
           I64[Sp - 16] = block_c3rZG_info;
           _s3rJo::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3rJo::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3rZS; else goto c3rZH;
       u3rZS: // global
           call _c3rZG(R1) args: 0, res: 0, upd: 0;
       c3rZH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rJH_info" {
     sat_s3rJH_info:
         const sat_s3rJH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3rZG() //  [R1]
         { []
         }
     {offset
       c3rZG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rZR; else goto c3rZQ;
       c3rZR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rZQ: // global
           _s3rJG::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s3rJG::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rZG_info" {
     block_c3rZG_info:
         const _c3rZG;
         const 1;
         const 30;
 },
 sat_s3rJI_entry() //  [R1]
         { []
         }
     {offset
       c3rZT: // global
           _s3rJI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rZU; else goto c3rZV;
       c3rZV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rZX; else goto c3rZW;
       c3rZX: // global
           HpAlloc = 16;
           goto c3rZU;
       c3rZU: // global
           R1 = _s3rJI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rZW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rJI::P64;
           _s3rJo::P64 = P64[_s3rJI::P64 + 16];
           _s3rJC::P64 = P64[_s3rJI::P64 + 24];
           I64[Hp - 8] = sat_s3rJH_info;
           P64[Hp] = _s3rJo::P64;
           R3 = _s3rJC::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rJI_info" {
     sat_s3rJI_info:
         const sat_s3rJI_entry;
         const 2;
         const 18;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c3s05: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3s06; else goto c3s07;
       c3s06: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3s07: // global
           I64[Sp - 16] = block_c3rYO_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3s0t; else goto c3rYP;
       u3s0t: // global
           call _c3rYO(R1) args: 0, res: 0, upd: 0;
       c3rYP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3rYO() //  [R1]
         { []
         }
     {offset
       c3rYO: // global
           _s3rJo::P64 = P64[Sp + 8];
           _c3s04::P64 = R1 & 7;
           if (_c3s04::P64 < 4) goto u3s0q; else goto u3s0s;
       u3s0q: // global
           if (_c3s04::P64 < 3) goto u3s0r; else goto c3s01;
       u3s0r: // global
           if (_c3s04::P64 < 2) goto c3rZZ; else goto c3s00;
       c3rZZ: // global
           Hp = Hp + 40;
           _s3rJq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3s0f; else goto c3s0a;
       c3s0a: // global
           _s3rJr::P64 = P64[_s3rJq::P64 + 7];
           I64[Hp - 32] = sat_s3rJu_info;
           P64[Hp - 24] = _s3rJo::P64;
           P64[Hp - 16] = _s3rJr::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3s00: // global
           Hp = Hp + 40;
           _s3rJq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3s0f; else goto c3s0e;
       c3s0f: // global
           HpAlloc = 40;
           R1 = _s3rJq::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s0e: // global
           _s3rJv::P64 = P64[_s3rJq::P64 + 6];
           I64[Hp - 32] = sat_s3rJy_info;
           P64[Hp - 24] = _s3rJo::P64;
           P64[Hp - 16] = _s3rJv::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3s01: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3s0s: // global
           if (_c3s04::P64 < 5) goto c3s02; else goto c3s03;
       c3s02: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3s0l; else goto c3s0k;
       c3s0l: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s0k: // global
           _s3rJA::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3rJB_info;
           P64[Hp - 32] = _s3rJo::P64;
           P64[Hp - 24] = _s3rJA::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3rJo::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3s03: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3s0p; else goto c3s0o;
       c3s0p: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s0o: // global
           _s3rJC::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3rJI_info;
           P64[Hp - 24] = _s3rJo::P64;
           P64[Hp - 16] = _s3rJC::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3rYO_info" {
     block_c3rYO_info:
         const _c3rYO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.774985998 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorP_closure" {
     Text.ParserCombinators.ReadP.$fFunctorP_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.783122454 UTC

[section ""data" . Text.ParserCombinators.ReadP.run_closure" {
     Text.ParserCombinators.ReadP.run_closure:
         const Text.ParserCombinators.ReadP.run_info;
 },
 sat_s3rJW_entry() //  [R1]
         { []
         }
     {offset
       c3s1Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3s1R; else goto c3s1S;
       c3s1R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3s1S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rJW_info" {
     sat_s3rJW_info:
         const sat_s3rJW_entry;
         const 2;
         const 18;
 },
 Text.ParserCombinators.ReadP.run_entry() //  [R2, R3]
         { []
         }
     {offset
       c3s20: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3s21; else goto u3s2H;
       c3s21: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.run_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u3s2H: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c3s1B() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.run_info" {
     Text.ParserCombinators.ReadP.run_info:
         const Text.ParserCombinators.ReadP.run_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3s1B() //  []
         { []
         }
     {offset
       c3s1B: // global
           _s3rJJ::P64 = P64[Sp];
           I64[Sp] = block_c3s1E_info;
           R1 = _s3rJJ::P64;
           if (R1 & 7 != 0) goto u3s2M; else goto c3s1F;
       u3s2M: // global
           call _c3s1E(R1) args: 0, res: 0, upd: 0;
       c3s1F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s1E() //  [R1]
         { []
         }
     {offset
       c3s1E: // global
           _s3rJK::P64 = P64[Sp + 8];
           _c3s1Z::P64 = R1 & 7;
           if (_c3s1Z::P64 < 4) goto u3s2E; else goto u3s2G;
       u3s2E: // global
           if (_c3s1Z::P64 < 3) goto u3s2F; else goto u3s2I;
       u3s2F: // global
           if (_c3s1Z::P64 < 2) goto c3s1U; else goto c3s1V;
       c3s1U: // global
           I64[Sp] = block_c3s24_info;
           _s3rJM::P64 = P64[R1 + 7];
           R1 = _s3rJK::P64;
           P64[Sp + 8] = _s3rJM::P64;
           if (R1 & 7 != 0) goto u3s2N; else goto c3s26;
       u3s2N: // global
           call _c3s24(R1) args: 0, res: 0, upd: 0;
       c3s26: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3s1V: // global
           I64[Sp] = block_c3s2n_info;
           R2 = _s3rJK::P64;
           R1 = P64[R1 + 6];
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3s2I: // global
           Sp = Sp + 16;
           call _c3s1W() args: 0, res: 0, upd: 0;
       u3s2G: // global
           if (_c3s1Z::P64 < 5) goto c3s1X; else goto c3s1Y;
       c3s1X: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3s2z; else goto c3s2y;
       c3s2z: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s2y: // global
           _s3rJT::P64 = P64[R1 + 4];
           _s3rJU::P64 = P64[R1 + 12];
           I64[Hp - 72] = sat_s3rJW_info;
           P64[Hp - 56] = _s3rJK::P64;
           P64[Hp - 48] = _s3rJU::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s3rJT::P64;
           P64[Hp - 24] = _s3rJK::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3s1Y: // global
           R1 = P64[R1 + 3] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s1E_info" {
     block_c3s1E_info:
         const _c3s1E;
         const 1;
         const 30;
 },
 _c3s24() //  [R1]
         { []
         }
     {offset
       c3s24: // global
           if (R1 & 7 == 1) goto u3s2J; else goto c3s2h;
       u3s2J: // global
           Sp = Sp + 16;
           call _c3s1W() args: 0, res: 0, upd: 0;
       c3s2h: // global
           I64[Sp] = block_c3s2f_info;
           R2 = P64[R1 + 6];
           _s3rJP::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3rJP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s24_info" {
     block_c3s24_info:
         const _c3s24;
         const 1;
         const 30;
 },
 _c3s2f() //  [R1]
         { []
         }
     {offset
       c3s2f: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c3s1B() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3s2f_info" {
     block_c3s2f_info:
         const _c3s2f;
         const 1;
         const 30;
 },
 _c3s2n() //  [R1]
         { []
         }
     {offset
       c3s2n: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c3s1B() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3s2n_info" {
     block_c3s2n_info:
         const _c3s2n;
         const 1;
         const 30;
 },
 _c3s1W() //  []
         { []
         }
     {offset
       c3s1W: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.801567036 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wreadS_to_P_closure" {
     Text.ParserCombinators.ReadP.$wreadS_to_P_closure:
         const Text.ParserCombinators.ReadP.$wreadS_to_P_info;
 },
 sat_s3rKa_entry() //  [R1]
         { []
         }
     {offset
       c3s42: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_s3rK0_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rKa_info" {
     sat_s3rKa_info:
         const sat_s3rKa_entry;
         const 2;
         const 18;
 },
 go_s3rK0_entry() //  [R1, R2]
         { []
         }
     {offset
       c3s49: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3s4a; else goto c3s4b;
       c3s4a: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s4b: // global
           I64[Sp - 24] = block_c3s3N_info;
           _s3rK0::P64 = R1;
           _s3rJZ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3rJZ::P64;
           P64[Sp - 8] = _s3rK0::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3s4t; else goto c3s3O;
       u3s4t: // global
           call _c3s3N(R1) args: 0, res: 0, upd: 0;
       c3s3O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s3rK0_info" {
     go_s3rK0_info:
         const go_s3rK0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3s3N() //  [R1]
         { []
         }
     {offset
       c3s3N: // global
           if (R1 & 7 == 1) goto c3s46; else goto c3s47;
       c3s46: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3s47: // global
           I64[Sp - 8] = block_c3s3T_info;
           _s3rK4::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3rK4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3s4s; else goto c3s3U;
       u3s4s: // global
           call _c3s3T(R1) args: 0, res: 0, upd: 0;
       c3s3U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s3N_info" {
     block_c3s3N_info:
         const _c3s3N;
         const 2;
         const 30;
 },
 _c3s3T() //  [R1]
         { []
         }
     {offset
       c3s3T: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3s4m; else goto c3s4l;
       c3s4m: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s4l: // global
           _s3rK6::P64 = P64[R1 + 7];
           _s3rK7::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3rKa_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3s4e_info;
           R2 = _s3rK6::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3rK7::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s3T_info" {
     block_c3s3T_info:
         const _c3s3T;
         const 3;
         const 30;
 },
 _c3s4e() //  [R1]
         { []
         }
     {offset
       c3s4e: // global
           _s3rK7::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3s4i_info;
           R3 = _s3rK7::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s4e_info" {
     block_c3s4e_info:
         const _c3s4e;
         const 2;
         const 30;
 },
 _c3s4i() //  [R1]
         { []
         }
     {offset
       c3s4i: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s4i_info" {
     block_c3s4i_info:
         const _c3s4i;
         const 1;
         const 30;
 },
 sat_s3rKg_entry() //  [R1, R2]
         { []
         }
     {offset
       c3s4B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3s4C; else goto c3s4D;
       c3s4C: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s4D: // global
           I64[Sp - 16] = block_c3s4z_info;
           R2 = R2;
           _s3rK0::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3rK0::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rKg_info" {
     sat_s3rKg_info:
         const sat_s3rKg_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3s4z() //  [R1]
         { []
         }
     {offset
       c3s4z: // global
           _s3rK0::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3s4G_info;
           R2 = R1;
           R1 = _s3rK0::P64;
           Sp = Sp + 8;
           call go_s3rK0_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s4z_info" {
     block_c3s4z_info:
         const _c3s4z;
         const 1;
         const 30;
 },
 _c3s4G() //  [R1]
         { []
         }
     {offset
       c3s4G: // global
           if (R1 & 7 == 1) goto c3s4N; else goto c3s4R;
       c3s4N: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3s4R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3s4U; else goto c3s4T;
       c3s4U: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s4T: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R1;
           R1 = Hp - 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s4G_info" {
     block_c3s4G_info:
         const _c3s4G;
         const 0;
         const 30;
 },
 Text.ParserCombinators.ReadP.$wreadS_to_P_entry() //  [R2, R3]
         { []
         }
     {offset
       c3s4W: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3s50; else goto c3s4Z;
       c3s50: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wreadS_to_P_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3s4Z: // global
           I64[Hp - 32] = go_s3rK0_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3rKg_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$wreadS_to_P_info" {
     Text.ParserCombinators.ReadP.$wreadS_to_P_info:
         const Text.ParserCombinators.ReadP.$wreadS_to_P_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.831926675 UTC

[section ""data" . Text.ParserCombinators.ReadP.readS_to_P1_closure" {
     Text.ParserCombinators.ReadP.readS_to_P1_closure:
         const Text.ParserCombinators.ReadP.readS_to_P1_info;
 },
 Text.ParserCombinators.ReadP.readS_to_P1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3s64: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3s65; else goto c3s66;
       c3s65: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.readS_to_P1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3s66: // global
           I64[Sp - 8] = block_c3s61_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.readS_to_P1_info" {
     Text.ParserCombinators.ReadP.readS_to_P1_info:
         const Text.ParserCombinators.ReadP.readS_to_P1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3s61() //  [R1]
         { []
         }
     {offset
       c3s61: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3s69; else goto c3s68;
       c3s69: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s68: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s61_info" {
     block_c3s61_info:
         const _c3s61;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.838682719 UTC

[section ""data" . Text.ParserCombinators.ReadP.readS_to_P_closure" {
     Text.ParserCombinators.ReadP.readS_to_P_closure:
         const Text.ParserCombinators.ReadP.readS_to_P_info;
 },
 Text.ParserCombinators.ReadP.readS_to_P_entry() //  [R2, R3]
         { []
         }
     {offset
       c3s6p: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.readS_to_P1_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.readS_to_P_info" {
     Text.ParserCombinators.ReadP.readS_to_P_info:
         const Text.ParserCombinators.ReadP.readS_to_P_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.8420146 UTC

[section ""cstring" . lvl_r3oqE_bytes" {
     lvl_r3oqE_bytes:
         I8[] [84,101,120,116,47,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,47,82,101,97,100,80,46,104,115,58,40,49,51,52,44,51,41,45,40,49,53,55,44,53,50,41,124,102,117,110,99,116,105,111,110,32,60,124,62]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.844465627 UTC

[section ""data" . lvl1_r3oqF_closure" {
     lvl1_r3oqF_closure:
         const lvl1_r3oqF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3oqF_entry() //  [R1]
         { []
         }
     {offset
       c3s6D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3s6E; else goto c3s6F;
       c3s6E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3s6F: // global
           (_c3s6A::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3s6A::I64 == 0) goto c3s6C; else goto c3s6B;
       c3s6C: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3s6B: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3s6A::I64;
           R2 = lvl_r3oqE_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r3oqF_info" {
     lvl1_r3oqF_info:
         const lvl1_r3oqF_entry;
         const 0;
         const 4294967317;
         const S3s6G_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.866165259 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info;
         const 0;
 },
 sat_s3rKB_entry() //  [R1, R2]
         { []
         }
     {offset
       c3s7E: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3s7I; else goto c3s7H;
       c3s7I: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s7H: // global
           _s3rKv::P64 = P64[R1 + 7];
           _s3rKy::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rKy::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = _s3rKv::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rKB_info" {
     sat_s3rKB_info:
         const sat_s3rKB_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+8;
 },
 sat_s3rKH_entry() //  [R1, R2]
         { []
         }
     {offset
       c3s7X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3s7Y; else goto c3s7Z;
       c3s7Y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s7Z: // global
           I64[Sp - 16] = block_c3s7V_info;
           R2 = R2;
           _s3rKD::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3rKD::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rKH_info" {
     sat_s3rKH_info:
         const sat_s3rKH_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+8;
 },
 _c3s7V() //  [R1]
         { []
         }
     {offset
       c3s7V: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s7V_info" {
     block_c3s7V_info:
         const _c3s7V;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 },
 sat_s3rKM_entry() //  [R1, R2]
         { []
         }
     {offset
       c3s8d: // global
           _s3rKJ::P64 = R2;
           _s3rKM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3s8e; else goto c3s8f;
       c3s8f: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3s8h; else goto c3s8g;
       c3s8h: // global
           HpAlloc = 32;
           goto c3s8e;
       c3s8e: // global
           R2 = _s3rKJ::P64;
           R1 = _s3rKM::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s8g: // global
           _s3rKC::P64 = P64[_s3rKM::P64 + 7];
           _s3rKI::P64 = P64[_s3rKM::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rKI::P64;
           P64[Hp] = _s3rKJ::P64;
           I64[Sp - 16] = block_c3s8b_info;
           R2 = _s3rKJ::P64;
           R1 = _s3rKC::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rKM_info" {
     sat_s3rKM_info:
         const sat_s3rKM_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+8;
 },
 _c3s8b() //  [R1]
         { []
         }
     {offset
       c3s8b: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s8b_info" {
     block_c3s8b_info:
         const _c3s8b;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 },
 sat_s3rKQ_entry() //  [R1]
         { []
         }
     {offset
       c3s8y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3s8z; else goto c3s8A;
       c3s8z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3s8A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3s8w_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rKQ_info" {
     sat_s3rKQ_info:
         const sat_s3rKQ_entry;
         const 3;
         const 15;
 },
 _c3s8w() //  [R1]
         { []
         }
     {offset
       c3s8w: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3s8w_info" {
     block_c3s8w_info:
         const _c3s8w;
         const 1;
         const 30;
 },
 sat_s3rKR_entry() //  [R1, R2]
         { []
         }
     {offset
       c3s8F: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3s8J; else goto c3s8I;
       c3s8J: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s8I: // global
           _s3rKq::P64 = P64[R1 + 7];
           _s3rKN::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3rKQ_info;
           P64[Hp - 32] = _s3rKq::P64;
           P64[Hp - 24] = _s3rKN::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rKR_info" {
     sat_s3rKR_info:
         const sat_s3rKR_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rKZ_entry() //  [R1]
         { []
         }
     {offset
       c3s97: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3s9b; else goto c3s9c;
       c3s9b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3s9c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3s95_info;
           _s3rKW::P64 = P64[R1 + 32];
           R2 = _s3rKW::P64;
           _s3rKV::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s3rKV::P64;
           P64[Sp - 24] = _s3rKW::P64;
           Sp = Sp - 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rKZ_info" {
     sat_s3rKZ_info:
         const sat_s3rKZ_entry;
         const 3;
         const 15;
 },
 _c3s95() //  [R1]
         { []
         }
     {offset
       c3s95: // global
           I64[Sp] = block_c3s9a_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3s95_info" {
     block_c3s95_info:
         const _c3s95;
         const 2;
         const 30;
 },
 _c3s9a() //  [R1]
         { []
         }
     {offset
       c3s9a: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3s9a_info" {
     block_c3s9a_info:
         const _c3s9a;
         const 130;
         const 30;
 },
 sat_s3rL0_entry() //  [R1, R2]
         { []
         }
     {offset
       c3s9j: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3s9n; else goto c3s9m;
       c3s9n: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s9m: // global
           _s3rKT::P64 = P64[R1 + 7];
           _s3rKV::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3rKZ_info;
           P64[Hp - 32] = _s3rKT::P64;
           P64[Hp - 24] = _s3rKV::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rL0_info" {
     sat_s3rL0_info:
         const sat_s3rL0_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rL5_entry() //  [R1]
         { []
         }
     {offset
       c3s9I: // global
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rL5_info" {
     sat_s3rL5_info:
         const sat_s3rL5_entry;
         const 2;
         const 18;
 },
 sat_s3rL6_entry() //  [R1]
         { []
         }
     {offset
       c3s9L: // global
           _s3rL6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3s9M; else goto c3s9N;
       c3s9N: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3s9P; else goto c3s9O;
       c3s9P: // global
           HpAlloc = 32;
           goto c3s9M;
       c3s9M: // global
           R1 = _s3rL6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3s9O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rL6::P64;
           _s3rL1::P64 = P64[_s3rL6::P64 + 16];
           _s3rL2::P64 = P64[_s3rL6::P64 + 24];
           _s3rL4::P64 = P64[_s3rL6::P64 + 32];
           I64[Hp - 24] = sat_s3rL5_info;
           P64[Hp - 8] = _s3rL2::P64;
           P64[Hp] = _s3rL4::P64;
           R3 = Hp - 24;
           R2 = _s3rL1::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rL6_info" {
     sat_s3rL6_info:
         const sat_s3rL6_entry;
         const 3;
         const 15;
 },
 sat_s3rL7_entry() //  [R1, R2]
         { []
         }
     {offset
       c3s9R: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3s9V; else goto c3s9U;
       c3s9V: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s9U: // global
           _s3rL1::P64 = P64[R1 + 7];
           _s3rL2::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3rL6_info;
           P64[Hp - 32] = _s3rL1::P64;
           P64[Hp - 24] = _s3rL2::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rL7_info" {
     sat_s3rL7_info:
         const sat_s3rL7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rLb_entry() //  [R1]
         { []
         }
     {offset
       c3sad: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sae; else goto c3saf;
       c3sae: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3saf: // global
           I64[Sp - 16] = block_c3sab_info;
           _s3rL9::P64 = P64[R1 + 24];
           R2 = _s3rL9::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 8] = _s3rL9::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rLb_info" {
     sat_s3rLb_info:
         const sat_s3rLb_entry;
         const 2;
         const 18;
 },
 _c3sab() //  [R1]
         { []
         }
     {offset
       c3sab: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sab_info" {
     block_c3sab_info:
         const _c3sab;
         const 1;
         const 30;
 },
 sat_s3rLc_entry() //  [R1]
         { []
         }
     {offset
       c3saj: // global
           _s3rLc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sak; else goto c3sal;
       c3sal: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3san; else goto c3sam;
       c3san: // global
           HpAlloc = 32;
           goto c3sak;
       c3sak: // global
           R1 = _s3rLc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sam: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rLc::P64;
           _s3rL1::P64 = P64[_s3rLc::P64 + 16];
           _s3rL8::P64 = P64[_s3rLc::P64 + 24];
           _s3rL9::P64 = P64[_s3rLc::P64 + 32];
           I64[Hp - 24] = sat_s3rLb_info;
           P64[Hp - 8] = _s3rL8::P64;
           P64[Hp] = _s3rL9::P64;
           R3 = Hp - 24;
           R2 = _s3rL1::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rLc_info" {
     sat_s3rLc_info:
         const sat_s3rLc_entry;
         const 3;
         const 15;
 },
 sat_s3rLd_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sap: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sat; else goto c3sas;
       c3sat: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sas: // global
           _s3rL1::P64 = P64[R1 + 7];
           _s3rL8::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3rLc_info;
           P64[Hp - 32] = _s3rL1::P64;
           P64[Hp - 24] = _s3rL8::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rLd_info" {
     sat_s3rLd_info:
         const sat_s3rLd_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rLf_entry() //  [R1]
         { []
         }
     {offset
       c3saA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3saB; else goto c3saC;
       c3saB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3saC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rLf_info" {
     sat_s3rLf_info:
         const sat_s3rLf_entry;
         const 2;
         const 18;
 },
 sat_s3rLi_entry() //  [R1]
         { []
         }
     {offset
       c3saJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3saK; else goto c3saL;
       c3saK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3saL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rLi_info" {
     sat_s3rLi_info:
         const sat_s3rLi_entry;
         const 2;
         const 4294967314;
         const S3s6G_srt+8;
 },
 sat_s3rLq_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sb6: // global
           _s3rLn::P64 = R2;
           _s3rLq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sb7; else goto c3sb8;
       c3sb8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sba; else goto c3sb9;
       c3sba: // global
           HpAlloc = 32;
           goto c3sb7;
       c3sb7: // global
           R2 = _s3rLn::P64;
           R1 = _s3rLq::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sb9: // global
           _s3rLk::P64 = P64[_s3rLq::P64 + 7];
           _s3rLm::P64 = P64[_s3rLq::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rLm::P64;
           P64[Hp] = _s3rLn::P64;
           I64[Sp - 16] = block_c3sb4_info;
           R2 = _s3rLn::P64;
           R1 = _s3rLk::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rLq_info" {
     sat_s3rLq_info:
         const sat_s3rLq_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+8;
 },
 _c3sb4() //  [R1]
         { []
         }
     {offset
       c3sb4: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sb4_info" {
     block_c3sb4_info:
         const _c3sb4;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 },
 sat_s3rLt_entry() //  [R1]
         { []
         }
     {offset
       c3sbk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sbl; else goto c3sbm;
       c3sbl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sbm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rLt_info" {
     sat_s3rLt_info:
         const sat_s3rLt_entry;
         const 2;
         const 4294967314;
         const S3s6G_srt+8;
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c3sbs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3sbt; else goto c3sbu;
       c3sbt: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sbu: // global
           I64[Sp - 24] = block_c3saM_info;
           R1 = R2;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3sdI; else goto c3saN;
       u3sdI: // global
           call _c3saM(R1) args: 0, res: 0, upd: 0;
       c3saN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3s6G_srt+8;
 },
 _c3saM() //  [R1]
         { []
         }
     {offset
       c3saM: // global
           _s3rKm::P64 = P64[Sp + 16];
           _c3sbr::P64 = R1 & 7;
           if (_c3sbr::P64 == 1) goto c3sbp; else goto u3sdq;
       c3sbp: // global
           I64[Sp - 8] = block_c3saS_info;
           _s3rLk::P64 = P64[R1 + 7];
           R1 = _s3rKm::P64;
           P64[Sp] = _s3rLk::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3sdF; else goto c3saT;
       u3sdF: // global
           call _c3saS(R1) args: 0, res: 0, upd: 0;
       c3saT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3sdq: // global
           if (_c3sbr::P64 == 4) goto c3sbq; else goto u3sdr;
       c3sbq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sdc; else goto c3sdb;
       c3sdc: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sdb: // global
           _s3rLr::P64 = P64[R1 + 4];
           _s3rLs::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3rLt_info;
           P64[Hp - 32] = _s3rKm::P64;
           P64[Hp - 24] = _s3rLs::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3rLr::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3sdr: // global
           Sp = Sp + 8;
           call _s3rKn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3saM_info" {
     block_c3saM_info:
         const _c3saM;
         const 2;
         const 12884901918;
         const S3s6G_srt+8;
 },
 _c3saS() //  [R1]
         { []
         }
     {offset
       c3saS: // global
           if (R1 & 7 == 1) goto c3sd5; else goto u3sds;
       c3sd5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sd8; else goto c3sd7;
       c3sd8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sd7: // global
           _s3rLm::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_s3rLq_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3rLm::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3sds: // global
           Sp = Sp + 16;
           call _s3rKn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3saS_info" {
     block_c3saS_info:
         const _c3saS;
         const 3;
         const 12884901918;
         const S3s6G_srt+8;
 },
 _s3rKn() //  []
         { []
         }
     {offset
       s3rKn: // global
           I64[Sp - 8] = block_c3s6Y_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3sdJ; else goto c3s6Z;
       u3sdJ: // global
           call _c3s6Y(R1) args: 0, res: 0, upd: 0;
       c3s6Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s6Y() //  [R1]
         { []
         }
     {offset
       c3s6Y: // global
           _s3rKl::P64 = P64[Sp + 8];
           if (R1 & 7 == 4) goto c3scT; else goto c3sby;
       c3scT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3scW; else goto c3scV;
       c3scW: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3scV: // global
           _s3rLg::P64 = P64[R1 + 4];
           _s3rLh::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3rLi_info;
           P64[Hp - 32] = _s3rKl::P64;
           P64[Hp - 24] = _s3rLh::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3rLg::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3sby: // global
           I64[Sp + 8] = block_c3s73_info;
           _s3rKp::P64 = R1;
           R1 = _s3rKl::P64;
           P64[Sp + 16] = _s3rKp::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3sdv; else goto c3s74;
       u3sdv: // global
           call _c3s73(R1) args: 0, res: 0, upd: 0;
       c3s74: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s6Y_info" {
     block_c3s6Y_info:
         const _c3s6Y;
         const 130;
         const 12884901918;
         const S3s6G_srt+8;
 },
 _c3s73() //  [R1]
         { []
         }
     {offset
       c3s73: // global
           _s3rKp::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto c3scR; else goto c3sbB;
       c3scR: // global
           R1 = _s3rKp::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3sbB: // global
           I64[Sp] = block_c3s78_info;
           _s3rKq::P64 = R1;
           R1 = _s3rKp::P64;
           P64[Sp + 8] = _s3rKq::P64;
           if (R1 & 7 != 0) goto u3sdw; else goto c3s79;
       u3sdw: // global
           call _c3s78(R1) args: 0, res: 0, upd: 0;
       c3s79: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s73_info" {
     block_c3s73_info:
         const _c3s73;
         const 1;
         const 12884901918;
         const S3s6G_srt+8;
 },
 _c3s78() //  [R1]
         { []
         }
     {offset
       c3s78: // global
           _s3rKq::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto c3scN; else goto c3scc;
       c3scN: // global
           R1 = _s3rKq::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3scc: // global
           I64[Sp - 8] = block_c3s8K_info;
           _s3rKr::P64 = R1;
           R1 = _s3rKq::P64;
           P64[Sp] = _s3rKr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3sdx; else goto c3s8L;
       u3sdx: // global
           call _c3s8K(R1) args: 0, res: 0, upd: 0;
       c3s8L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s78_info" {
     block_c3s78_info:
         const _c3s78;
         const 1;
         const 12884901918;
         const S3s6G_srt+8;
 },
 _c3s8K() //  [R1]
         { []
         }
     {offset
       c3s8K: // global
           _s3rKr::P64 = P64[Sp + 8];
           _c3sdh::P64 = R1 & 7;
           if (_c3sdh::P64 == 2) goto c3sci; else goto u3sdo;
       c3sci: // global
           I64[Sp - 8] = block_c3s8Q_info;
           _s3rKT::P64 = P64[R1 + 6];
           R1 = _s3rKr::P64;
           P64[Sp] = _s3rKT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3sdB; else goto c3s8R;
       u3sdB: // global
           call _c3s8Q(R1) args: 0, res: 0, upd: 0;
       c3s8R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3sdo: // global
           if (_c3sdh::P64 == 5) goto c3sct; else goto u3sdt;
       c3sct: // global
           I64[Sp + 8] = block_c3s9q_info;
           _s3rL1::P64 = P64[R1 + 3];
           R1 = _s3rKr::P64;
           P64[Sp + 16] = _s3rL1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3sdC; else goto c3s9r;
       u3sdC: // global
           call _c3s9q(R1) args: 0, res: 0, upd: 0;
       c3s9r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3sdt: // global
           Sp = Sp + 8;
           call _s3rKs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3s8K_info" {
     block_c3s8K_info:
         const _c3s8K;
         const 2;
         const 12884901918;
         const S3s6G_srt+8;
 },
 _c3s8Q() //  [R1]
         { []
         }
     {offset
       c3s8Q: // global
           if (R1 & 7 == 5) goto c3sco; else goto u3sdu;
       c3sco: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3scr; else goto c3scq;
       c3scr: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3scq: // global
           _s3rKV::P64 = P64[R1 + 3];
           I64[Hp - 32] = sat_s3rL0_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3rKV::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3sdu: // global
           Sp = Sp + 16;
           call _s3rKs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3s8Q_info" {
     block_c3s8Q_info:
         const _c3s8Q;
         const 3;
         const 12884901918;
         const S3s6G_srt+8;
 },
 _c3s9q() //  [R1]
         { []
         }
     {offset
       c3s9q: // global
           _s3rL1::P64 = P64[Sp + 8];
           _c3sdi::P64 = R1 & 7;
           if (_c3sdi::P64 < 5) goto u3sdp; else goto c3scG;
       u3sdp: // global
           if (_c3sdi::P64 < 2) goto c3scw; else goto c3scB;
       c3scw: // global
           Hp = Hp + 40;
           _s3rL2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3scE; else goto c3scy;
       c3scy: // global
           I64[Hp - 32] = sat_s3rL7_info;
           P64[Hp - 24] = _s3rL1::P64;
           P64[Hp - 16] = _s3rL2::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3scB: // global
           Hp = Hp + 40;
           _s3rL2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3scE; else goto c3scD;
       c3scE: // global
           HpAlloc = 40;
           R1 = _s3rL2::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3scD: // global
           _s3rL8::P64 = P64[_s3rL2::P64 + 6];
           I64[Hp - 32] = sat_s3rLd_info;
           P64[Hp - 24] = _s3rL1::P64;
           P64[Hp - 16] = _s3rL8::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3scG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3scJ; else goto c3scI;
       c3scJ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3scI: // global
           _s3rLe::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3rLf_info;
           P64[Hp - 24] = _s3rL1::P64;
           P64[Hp - 16] = _s3rLe::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s9q_info" {
     block_c3s9q_info:
         const _c3s9q;
         const 1;
         const 30;
 },
 _s3rKs() //  []
         { []
         }
     {offset
       s3rKs: // global
           _s3rKr::P64 = P64[Sp];
           I64[Sp] = block_c3s7i_info;
           R1 = _s3rKr::P64;
           if (R1 & 7 != 0) goto u3sdK; else goto c3s7j;
       u3sdK: // global
           call _c3s7i(R1) args: 0, res: 0, upd: 0;
       c3s7j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s7i() //  [R1]
         { []
         }
     {offset
       c3s7i: // global
           _s3rKq::P64 = P64[Sp + 8];
           if (R1 & 7 == 5) goto c3sc7; else goto c3sbG;
       c3sc7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sca; else goto c3sc9;
       c3sca: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sc9: // global
           _s3rKN::P64 = P64[R1 + 3];
           I64[Hp - 32] = sat_s3rKR_info;
           P64[Hp - 24] = _s3rKq::P64;
           P64[Hp - 16] = _s3rKN::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3sbG: // global
           I64[Sp] = block_c3s7n_info;
           _s3rKu::P64 = R1;
           R1 = _s3rKq::P64;
           P64[Sp + 8] = _s3rKu::P64;
           if (R1 & 7 != 0) goto u3sdy; else goto c3s7o;
       u3sdy: // global
           call _c3s7n(R1) args: 0, res: 0, upd: 0;
       c3s7o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s7i_info" {
     block_c3s7i_info:
         const _c3s7i;
         const 1;
         const 12884901918;
         const S3s6G_srt+8;
 },
 _c3s7n() //  [R1]
         { []
         }
     {offset
       c3s7n: // global
           _s3rKu::P64 = P64[Sp + 8];
           if (R1 & 7 == 2) goto c3sbU; else goto c3sbJ;
       c3sbU: // global
           I64[Sp] = block_c3s7L_info;
           _s3rKC::P64 = P64[R1 + 6];
           R1 = _s3rKu::P64;
           P64[Sp + 8] = _s3rKC::P64;
           if (R1 & 7 != 0) goto u3sdA; else goto c3s7M;
       u3sdA: // global
           call _c3s7L(R1) args: 0, res: 0, upd: 0;
       c3s7M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3sbJ: // global
           I64[Sp] = block_c3s7s_info;
           _s3rKv::P64 = R1;
           R1 = _s3rKu::P64;
           P64[Sp + 8] = _s3rKv::P64;
           if (R1 & 7 != 0) goto u3sdz; else goto c3s7t;
       u3sdz: // global
           call _c3s7s(R1) args: 0, res: 0, upd: 0;
       c3s7t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s7n_info" {
     block_c3s7n_info:
         const _c3s7n;
         const 1;
         const 12884901918;
         const S3s6G_srt+8;
 },
 _c3s7L() //  [R1]
         { []
         }
     {offset
       c3s7L: // global
           _s3rKC::P64 = P64[Sp + 8];
           if (R1 & 7 < 2) goto c3sbX; else goto c3sc2;
       c3sbX: // global
           Hp = Hp + 40;
           _s3rKD::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3sc5; else goto c3sbZ;
       c3sbZ: // global
           I64[Hp - 32] = sat_s3rKH_info;
           P64[Hp - 24] = _s3rKC::P64;
           P64[Hp - 16] = _s3rKD::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3sc2: // global
           Hp = Hp + 40;
           _s3rKD::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3sc5; else goto c3sc4;
       c3sc5: // global
           HpAlloc = 40;
           R1 = _s3rKD::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sc4: // global
           _s3rKI::P64 = P64[_s3rKD::P64 + 6];
           I64[Hp - 32] = sat_s3rKM_info;
           P64[Hp - 24] = _s3rKC::P64;
           P64[Hp - 16] = _s3rKI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s7L_info" {
     block_c3s7L_info:
         const _c3s7L;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 },
 _c3s7s() //  [R1]
         { []
         }
     {offset
       c3s7s: // global
           if (R1 & 7 < 2) goto c3sbN; else goto c3sbP;
       c3sbN: // global
           R1 = lvl1_r3oqF_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3sbP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sbS; else goto c3sbR;
       c3sbS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sbR: // global
           _s3rKy::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_s3rKB_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3rKy::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3s7s_info" {
     block_c3s7s_info:
         const _c3s7s;
         const 1;
         const 12884901918;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.945565059 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info;
         const 0;
 },
 sat_s3rLA_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sig: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sih; else goto c3sii;
       c3sih: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sii: // global
           I64[Sp - 16] = block_c3sie_info;
           R2 = R2;
           _s3rLv::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rLv::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rLA_info" {
     sat_s3rLA_info:
         const sat_s3rLA_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+24;
 },
 _c3sie() //  [R1]
         { []
         }
     {offset
       c3sie: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sie_info" {
     block_c3sie_info:
         const _c3sie;
         const 1;
         const 4294967326;
         const S3s6G_srt+24;
 },
 sat_s3rLE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3siv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3siw; else goto c3six;
       c3siw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3six: // global
           I64[Sp - 16] = block_c3sit_info;
           R2 = R2;
           _s3rLv::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rLv::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rLE_info" {
     sat_s3rLE_info:
         const sat_s3rLE_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+24;
 },
 _c3sit() //  [R1]
         { []
         }
     {offset
       c3sit: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sit_info" {
     block_c3sit_info:
         const _c3sit;
         const 1;
         const 4294967326;
         const S3s6G_srt+24;
 },
 sat_s3rLI_entry() //  [R1]
         { []
         }
     {offset
       c3siI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3siJ; else goto c3siK;
       c3siJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3siK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rLI_info" {
     sat_s3rLI_info:
         const sat_s3rLI_entry;
         const 2;
         const 4294967314;
         const S3s6G_srt+24;
 },
 sat_s3rLU_entry() //  [R1]
         { []
         }
     {offset
       c3sj7: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_s3rLK_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rLU_info" {
     sat_s3rLU_info:
         const sat_s3rLU_entry;
         const 2;
         const 18;
 },
 go_s3rLK_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sje: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3sjf; else goto c3sjg;
       c3sjf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sjg: // global
           I64[Sp - 24] = block_c3siS_info;
           _s3rLK::P64 = R1;
           _s3rLv::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3rLv::P64;
           P64[Sp - 8] = _s3rLK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3sjy; else goto c3siT;
       u3sjy: // global
           call _c3siS(R1) args: 0, res: 0, upd: 0;
       c3siT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s3rLK_info" {
     go_s3rLK_info:
         const go_s3rLK_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3siS() //  [R1]
         { []
         }
     {offset
       c3siS: // global
           if (R1 & 7 == 1) goto c3sjb; else goto c3sjc;
       c3sjb: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3sjc: // global
           I64[Sp - 8] = block_c3siY_info;
           _s3rLO::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3rLO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3sjx; else goto c3siZ;
       u3sjx: // global
           call _c3siY(R1) args: 0, res: 0, upd: 0;
       c3siZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3siS_info" {
     block_c3siS_info:
         const _c3siS;
         const 2;
         const 30;
 },
 _c3siY() //  [R1]
         { []
         }
     {offset
       c3siY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sjr; else goto c3sjq;
       c3sjr: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sjq: // global
           _s3rLQ::P64 = P64[R1 + 7];
           _s3rLR::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3rLU_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3sjj_info;
           R2 = _s3rLQ::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3rLR::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3siY_info" {
     block_c3siY_info:
         const _c3siY;
         const 3;
         const 30;
 },
 _c3sjj() //  [R1]
         { []
         }
     {offset
       c3sjj: // global
           _s3rLR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3sjn_info;
           R3 = _s3rLR::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sjj_info" {
     block_c3sjj_info:
         const _c3sjj;
         const 2;
         const 30;
 },
 _c3sjn() //  [R1]
         { []
         }
     {offset
       c3sjn: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sjn_info" {
     block_c3sjn_info:
         const _c3sjn;
         const 1;
         const 30;
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c3sjG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sjH; else goto c3sjI;
       c3sjH: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sjI: // global
           I64[Sp - 16] = block_c3si4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3skp; else goto c3si5;
       u3skp: // global
           call _c3si4(R1) args: 0, res: 0, upd: 0;
       c3si5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S3s6G_srt+8;
 },
 _c3si4() //  [R1]
         { []
         }
     {offset
       c3si4: // global
           _s3rLv::P64 = P64[Sp + 8];
           _c3sjF::P64 = R1 & 7;
           if (_c3sjF::P64 < 4) goto u3skj; else goto u3skl;
       u3skj: // global
           if (_c3sjF::P64 < 3) goto u3skk; else goto u3skm;
       u3skk: // global
           if (_c3sjF::P64 < 2) goto c3sjA; else goto c3sjB;
       c3sjA: // global
           Hp = Hp + 40;
           _s3rLw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3sjQ; else goto c3sjL;
       c3sjL: // global
           _s3rLx::P64 = P64[_s3rLw::P64 + 7];
           I64[Hp - 32] = sat_s3rLA_info;
           P64[Hp - 24] = _s3rLv::P64;
           P64[Hp - 16] = _s3rLx::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3sjB: // global
           Hp = Hp + 40;
           _s3rLw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3sjQ; else goto c3sjP;
       c3sjQ: // global
           HpAlloc = 40;
           R1 = _s3rLw::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sjP: // global
           _s3rLB::P64 = P64[_s3rLw::P64 + 6];
           I64[Hp - 32] = sat_s3rLE_info;
           P64[Hp - 24] = _s3rLv::P64;
           P64[Hp - 16] = _s3rLB::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3skm: // global
           Sp = Sp + 16;
           call _c3ska() args: 0, res: 0, upd: 0;
       u3skl: // global
           if (_c3sjF::P64 < 5) goto c3sjD; else goto c3sjE;
       c3sjD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sjW; else goto c3sjV;
       c3sjW: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sjV: // global
           _s3rLF::P64 = P64[R1 + 4];
           _s3rLG::P64 = P64[R1 + 12];
           I64[Hp - 24] = sat_s3rLI_info;
           P64[Hp - 8] = _s3rLv::P64;
           P64[Hp] = _s3rLG::P64;
           I64[Sp] = block_c3sjT_info;
           R2 = _s3rLF::P64;
           R1 = _s3rLv::P64;
           P64[Sp + 8] = Hp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3sjE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sk4; else goto c3sk3;
       c3sk4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sk3: // global
           _s3rLJ::P64 = P64[R1 + 3];
           I64[Hp - 8] = go_s3rLK_info;
           P64[Hp] = _s3rLv::P64;
           I64[Sp + 8] = block_c3sk1_info;
           R2 = _s3rLJ::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s3rLK_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3si4_info" {
     block_c3si4_info:
         const _c3si4;
         const 1;
         const 21474836510;
         const S3s6G_srt+8;
 },
 _c3sjT() //  [R1]
         { []
         }
     {offset
       c3sjT: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sjT_info" {
     block_c3sjT_info:
         const _c3sjT;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 },
 _c3sk1() //  [R1]
         { []
         }
     {offset
       c3sk1: // global
           if (R1 & 7 == 1) goto u3skn; else goto c3ske;
       u3skn: // global
           Sp = Sp + 8;
           call _c3ska() args: 0, res: 0, upd: 0;
       c3ske: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3skh; else goto c3skg;
       c3skh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3skg: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R1;
           R1 = Hp - 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sk1_info" {
     block_c3sk1_info:
         const _c3sk1;
         const 0;
         const 30;
 },
 _c3ska() //  []
         { []
         }
     {offset
       c3ska: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.976619769 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info;
         const 0;
 },
 sat_s3rM3_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sma: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sme; else goto c3smd;
       c3sme: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3smd: // global
           _s3rM0::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3rM0::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rM3_info" {
     sat_s3rM3_info:
         const sat_s3rM3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3rM4_entry() //  [R1, R2]
         { []
         }
     {offset
       c3smf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3smj; else goto c3smi;
       c3smj: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3smi: // global
           _s3rLZ::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s3rM3_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = _s3rLZ::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rM4_info" {
     sat_s3rM4_info:
         const sat_s3rM4_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3s6G_srt+24;
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c3smk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3smo; else goto c3smn;
       c3smo: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3smn: // global
           I64[Hp - 8] = sat_s3rM4_info;
           P64[Hp] = R3;
           R3 = Hp - 7;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3s6G_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.984772315 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info;
         const 0;
 },
 sat_s3rM7_entry() //  [R1]
         { []
         }
     {offset
       c3smO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3smP; else goto c3smQ;
       c3smP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3smQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rM7_info" {
     sat_s3rM7_info:
         const sat_s3rM7_entry;
         const 2;
         const 18;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       c3smR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3smV; else goto c3smU;
       c3smV: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3smU: // global
           I64[Hp - 24] = sat_s3rM7_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3s6G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.990731492 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP1_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP1_closure:
         const Text.ParserCombinators.ReadP.Result_con_info;
         const GHC.Types.[]_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:05.995269569 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info;
         const 0;
 },
 m2_s3rMa_entry() //  [R1]
         { []
         }
     {offset
       c3snj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3snk; else goto c3snl;
       c3snk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3snl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fAlternativeP1_closure+4;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m2_s3rMa_info" {
     m2_s3rMa_info:
         const m2_s3rMa_entry;
         const 1;
         const 4294967312;
         const S3s6G_srt+8;
 },
 sat_s3rMf_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sny: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3snC; else goto c3snB;
       c3snC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3snB: // global
           _s3rMc::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3rMc::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rMf_info" {
     sat_s3rMf_info:
         const sat_s3rMf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3rMg_entry() //  [R1, R2]
         { []
         }
     {offset
       c3snD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3snH; else goto c3snG;
       c3snH: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3snG: // global
           _s3rMa::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s3rMf_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = _s3rMa::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rMg_info" {
     sat_s3rMg_info:
         const sat_s3rMg_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3s6G_srt+24;
 },
 some_v_s3rM9_entry() //  [R1]
         { []
         }
     {offset
       c3snK: // global
           _s3rM9::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3snL; else goto c3snM;
       c3snM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3snO; else goto c3snN;
       c3snO: // global
           HpAlloc = 40;
           goto c3snL;
       c3snL: // global
           R1 = _s3rM9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3snN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rM9::P64;
           _s3rM8::P64 = P64[_s3rM9::P64 + 16];
           I64[Hp - 32] = m2_s3rMa_info;
           P64[Hp - 16] = _s3rM9::P64;
           I64[Hp - 8] = sat_s3rMg_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 32] = block_c3snI_info;
           R3 = _s3rM8::P64;
           R2 = GHC.Types.:_closure+2;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . some_v_s3rM9_info" {
     some_v_s3rM9_info:
         const some_v_s3rM9_entry;
         const 1;
         const 21474836496;
         const S3s6G_srt+8;
 },
 _c3snI() //  [R1]
         { []
         }
     {offset
       c3snI: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3snI_info" {
     block_c3snI_info:
         const _c3snI;
         const 1;
         const 4294967326;
         const S3s6G_srt+24;
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$csome_entry() //  [R2]
         { []
         }
     {offset
       c3snS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3snW; else goto c3snV;
       c3snW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3snV: // global
           I64[Hp - 16] = some_v_s3rM9_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_entry;
         const 0;
         const 158913789966;
         const 4294967301;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.008340252 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info;
         const 0;
 },
 sat_s3rMi_entry() //  [R1]
         { []
         }
     {offset
       c3soH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3soI; else goto c3soJ;
       c3soI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3soJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rMi_info" {
     sat_s3rMi_info:
         const sat_s3rMi_entry;
         const 1;
         const 16;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_entry() //  [R2]
         { []
         }
     {offset
       c3soK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3soO; else goto c3soN;
       c3soO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3soN: // global
           I64[Hp - 16] = sat_s3rMi_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S3s6G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.01441627 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c3sp6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sp7; else goto c3sp8;
       c3sp7: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sp8: // global
           I64[Sp - 16] = block_c3sp4_info;
           _s3rMk::P64 = R3;
           R3 = R2;
           R2 = GHC.Base.breakpoint_closure+1;
           P64[Sp - 8] = _s3rMk::P64;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S3s6G_srt+32;
 },
 _c3sp4() //  [R1]
         { []
         }
     {offset
       c3sp4: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sp4_info" {
     block_c3sp4_info:
         const _c3sp4;
         const 1;
         const 4294967326;
         const S3s6G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.021191469 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info;
         const 0;
 },
 many_v_s3rMn_entry() //  [R1]
         { []
         }
     {offset
       c3spw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3spA; else goto c3spB;
       c3spA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3spB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3spu_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Types.:_closure+2;
           P64[Sp - 24] = R1;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . many_v_s3rMn_info" {
     many_v_s3rMn_info:
         const many_v_s3rMn_entry;
         const 1;
         const 38654705680;
         const S3s6G_srt+8;
 },
 _c3spu() //  [R1]
         { []
         }
     {offset
       c3spu: // global
           _s3rMn::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3spz_info;
           R3 = _s3rMn::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3spu_info" {
     block_c3spu_info:
         const _c3spu;
         const 1;
         const 38654705694;
         const S3s6G_srt+8;
 },
 _c3spz() //  [R1]
         { []
         }
     {offset
       c3spz: // global
           R3 = Text.ParserCombinators.ReadP.$fAlternativeP1_closure+4;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3spz_info" {
     block_c3spz_info:
         const _c3spz;
         const 0;
         const 4294967326;
         const S3s6G_srt+8;
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_entry() //  [R2]
         { []
         }
     {offset
       c3spH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3spL; else goto c3spK;
       c3spL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3spK: // global
           I64[Hp - 16] = many_v_s3rMn_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_entry;
         const 0;
         const 1138166333454;
         const 4294967301;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.03166158 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure" {
     Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure:
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_info;
         const 0;
 },
 sat_s3rMt_entry() //  [R1]
         { []
         }
     {offset
       c3sqg: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rMt_info" {
     sat_s3rMt_info:
         const sat_s3rMt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fMonadP_$c>>_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sqj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sqn; else goto c3sqm;
       c3sqn: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sqm: // global
           I64[Hp - 8] = sat_s3rMt_info;
           P64[Hp] = R3;
           R3 = Hp - 7;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fMonadP_$c>>_info" {
     Text.ParserCombinators.ReadP.$fMonadP_$c>>_info:
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S3s6G_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.037409197 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorP_closure+1;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.039249195 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadP_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure+2;
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.041077221 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeP_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure+2;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.043941355 UTC

[section ""data" . Text.ParserCombinators.ReadP.readP_to_S_closure" {
     Text.ParserCombinators.ReadP.readP_to_S_closure:
         const Text.ParserCombinators.ReadP.readP_to_S_info;
 },
 sat_s3rMv_entry() //  [R1]
         { []
         }
     {offset
       c3sqJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sqK; else goto c3sqL;
       c3sqK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sqL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rMv_info" {
     sat_s3rMv_info:
         const sat_s3rMv_entry;
         const 1;
         const 16;
 },
 Text.ParserCombinators.ReadP.readP_to_S_entry() //  [R2]
         { []
         }
     {offset
       c3sqM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sqQ; else goto c3sqP;
       c3sqQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.readP_to_S_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sqP: // global
           I64[Hp - 16] = sat_s3rMv_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.readP_to_S_info" {
     Text.ParserCombinators.ReadP.readP_to_S_info:
         const Text.ParserCombinators.ReadP.readP_to_S_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.049175529 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailP_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailP_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadP.$fMonadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.051334992 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadPlusP_closure" {
     Text.ParserCombinators.ReadP.$fMonadPlusP_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadP_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.053715766 UTC

[section ""data" . Text.ParserCombinators.ReadP.get_closure" {
     Text.ParserCombinators.ReadP.get_closure:
         const Text.ParserCombinators.ReadP.get_info;
 },
 Text.ParserCombinators.ReadP.get_entry() //  [R2]
         { []
         }
     {offset
       c3sr8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3src; else goto c3srb;
       c3src: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.get_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3srb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.get_info" {
     Text.ParserCombinators.ReadP.get_info:
         const Text.ParserCombinators.ReadP.get_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.057799962 UTC

[section ""data" . Text.ParserCombinators.ReadP.look_closure" {
     Text.ParserCombinators.ReadP.look_closure:
         const Text.ParserCombinators.ReadP.look_info;
 },
 Text.ParserCombinators.ReadP.look_entry() //  [R2]
         { []
         }
     {offset
       c3sro: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3srs; else goto c3srr;
       c3srs: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.look_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3srr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.look_info" {
     Text.ParserCombinators.ReadP.look_info:
         const Text.ParserCombinators.ReadP.look_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.061924047 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_info;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry() //  []
         { []
         }
     {offset
       c3srD: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeReadP4_info" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP4_info:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.066093965 UTC

[section ""data" . Text.ParserCombinators.ReadP.pfail_closure" {
     Text.ParserCombinators.ReadP.pfail_closure:
         const Text.ParserCombinators.ReadP.pfail_info;
 },
 Text.ParserCombinators.ReadP.pfail_entry() //  [R2]
         { []
         }
     {offset
       c3srP: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.pfail_info" {
     Text.ParserCombinators.ReadP.pfail_info:
         const Text.ParserCombinators.ReadP.pfail_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.070368582 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       c3ss3: // global
           _s3rMz::P64 = R4;
           _s3rMy::P64 = R3;
           _s3rMx::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ss4; else goto c3ss5;
       c3ss5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ss7; else goto c3ss6;
       c3ss7: // global
           HpAlloc = 32;
           goto c3ss4;
       c3ss4: // global
           R4 = _s3rMz::P64;
           R3 = _s3rMy::P64;
           R2 = _s3rMx::P64;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ss6: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rMy::P64;
           P64[Hp] = _s3rMz::P64;
           I64[Sp - 16] = block_c3ss1_info;
           R2 = _s3rMz::P64;
           R1 = _s3rMx::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeReadP3_info" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP3_info:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry;
         const 0;
         const 4402341478414;
         const 12884901911;
         const S3s6G_srt+8;
 },
 _c3ss1() //  [R1]
         { []
         }
     {offset
       c3ss1: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ss1_info" {
     block_c3ss1_info:
         const _c3ss1;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.076662732 UTC

[section ""data" . Text.ParserCombinators.ReadP.+++_closure" {
     Text.ParserCombinators.ReadP.+++_closure:
         const Text.ParserCombinators.ReadP.+++_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.+++_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3ssq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.+++_info" {
     Text.ParserCombinators.ReadP.+++_info:
         const Text.ParserCombinators.ReadP.+++_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3s6G_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.082451909 UTC

[section ""data" . Text.ParserCombinators.ReadP.choice_closure" {
     Text.ParserCombinators.ReadP.choice_closure:
         const Text.ParserCombinators.ReadP.choice_info;
         const 0;
 },
 ds2_s3rMJ_entry() //  [R1]
         { []
         }
     {offset
       c3ssR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ssS; else goto c3ssT;
       c3ssS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ssT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.choice_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s3rMJ_info" {
     ds2_s3rMJ_info:
         const ds2_s3rMJ_entry;
         const 1;
         const 4294967312;
         const S3s6G_srt+96;
 },
 sat_s3rMN_entry() //  [R1, R2]
         { []
         }
     {offset
       c3st2: // global
           _s3rMK::P64 = R2;
           _s3rMN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3st3; else goto c3st4;
       c3st4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3st6; else goto c3st5;
       c3st6: // global
           HpAlloc = 32;
           goto c3st3;
       c3st3: // global
           R2 = _s3rMK::P64;
           R1 = _s3rMN::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3st5: // global
           _s3rME::P64 = P64[_s3rMN::P64 + 7];
           _s3rMJ::P64 = P64[_s3rMN::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rMJ::P64;
           P64[Hp] = _s3rMK::P64;
           I64[Sp - 16] = block_c3st0_info;
           R2 = _s3rMK::P64;
           R1 = _s3rME::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rMN_info" {
     sat_s3rMN_info:
         const sat_s3rMN_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+8;
 },
 _c3st0() //  [R1]
         { []
         }
     {offset
       c3st0: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3st0_info" {
     block_c3st0_info:
         const _c3st0;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 },
 Text.ParserCombinators.ReadP.choice_entry() //  [R2]
         { []
         }
     {offset
       c3ste: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3stf; else goto c3stg;
       c3stf: // global
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.choice_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3stg: // global
           I64[Sp - 8] = block_c3ssB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3stu; else goto c3ssC;
       u3stu: // global
           call _c3ssB(R1) args: 0, res: 0, upd: 0;
       c3ssC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.choice_info" {
     Text.ParserCombinators.ReadP.choice_info:
         const Text.ParserCombinators.ReadP.choice_entry;
         const 0;
         const 8800387989518;
         const 4294967301;
         const S3s6G_srt+8;
 },
 _c3ssB() //  [R1]
         { []
         }
     {offset
       c3ssB: // global
           if (R1 & 7 == 1) goto c3stb; else goto c3stc;
       c3stb: // global
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3stc: // global
           I64[Sp - 8] = block_c3ssH_info;
           _s3rME::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3rME::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3stt; else goto c3ssI;
       u3stt: // global
           call _c3ssH(R1) args: 0, res: 0, upd: 0;
       c3ssI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ssB_info" {
     block_c3ssB_info:
         const _c3ssB;
         const 0;
         const 8800387989534;
         const S3s6G_srt+8;
 },
 _c3ssH() //  [R1]
         { []
         }
     {offset
       c3ssH: // global
           _s3rME::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3stn; else goto c3sto;
       c3stn: // global
           R1 = _s3rME::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c3sto: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3str; else goto c3stq;
       c3str: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3stq: // global
           I64[Hp - 40] = ds2_s3rMJ_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s3rMN_info;
           P64[Hp - 8] = _s3rME::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ssH_info" {
     block_c3ssH_info:
         const _c3ssH;
         const 1;
         const 8800387989534;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.095042816 UTC

[section ""cstring" . lvl2_r3oqG_bytes" {
     lvl2_r3oqG_bytes:
         I8[] [100,111,32,110,111,116,32,117,115,101,32,114,101,97,100,83,95,116,111,95,80,32,105,110,32,103,97,116,104,101,114,33]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.098399285 UTC

[section ""data" . lvl3_r3oqH_closure" {
     lvl3_r3oqH_closure:
         const lvl3_r3oqH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r3oqH_entry() //  [R1]
         { []
         }
     {offset
       c3suh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3sui; else goto c3suj;
       c3sui: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3suj: // global
           (_c3suc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3suc::I64 == 0) goto c3sue; else goto c3sud;
       c3sue: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3sud: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3suc::I64;
           I64[Sp - 24] = block_c3suf_info;
           R2 = lvl2_r3oqG_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r3oqH_info" {
     lvl3_r3oqH_info:
         const lvl3_r3oqH_entry;
         const 0;
         const 4294967317;
         const S3s6G_srt+104;
 },
 _c3suf() //  [R1]
         { []
         }
     {offset
       c3suf: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3suf_info" {
     block_c3suf_info:
         const _c3suf;
         const 0;
         const 4294967326;
         const S3s6G_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.109756381 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather_gath_closure" {
     Text.ParserCombinators.ReadP.gather_gath_closure:
         const Text.ParserCombinators.ReadP.gather_gath_info;
         const 0;
 },
 sat_s3rMW_entry() //  [R1, R2]
         { []
         }
     {offset
       c3suX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sv1; else goto c3sv0;
       c3sv1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sv0: // global
           _s3rMP::P64 = P64[R1 + 7];
           _s3rMT::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rMT::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rMP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rMW_info" {
     sat_s3rMW_info:
         const sat_s3rMW_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rMY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sv2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3sv3; else goto c3sv4;
       c3sv3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sv4: // global
           I64[Sp - 24] = block_c3suN_info;
           _s3rMT::P64 = R2;
           R2 = R2;
           _s3rMP::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _s3rMP::P64;
           P64[Sp - 8] = _s3rMT::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rMY_info" {
     sat_s3rMY_info:
         const sat_s3rMY_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+112;
 },
 _c3suN() //  [R1]
         { []
         }
     {offset
       c3suN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sv7; else goto c3sv6;
       c3sv7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sv6: // global
           I64[Hp - 16] = sat_s3rMW_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R3 = R1;
           R2 = Hp - 15;
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3suN_info" {
     block_c3suN_info:
         const _c3suN;
         const 2;
         const 4294967326;
         const S3s6G_srt+112;
 },
 sat_s3rN2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3svh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3svi; else goto c3svj;
       c3svi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3svj: // global
           I64[Sp - 16] = block_c3svf_info;
           R2 = R2;
           _s3rMP::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rMP::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rN2_info" {
     sat_s3rN2_info:
         const sat_s3rN2_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+112;
 },
 _c3svf() //  [R1]
         { []
         }
     {offset
       c3svf: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3svf_info" {
     block_c3svf_info:
         const _c3svf;
         const 1;
         const 4294967326;
         const S3s6G_srt+112;
 },
 sat_s3rN7_entry() //  [R1]
         { []
         }
     {offset
       c3svu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3svv; else goto c3svw;
       c3svv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3svw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rN7_info" {
     sat_s3rN7_info:
         const sat_s3rN7_entry;
         const 2;
         const 4294967314;
         const S3s6G_srt+112;
 },
 sat_s3rN5_entry() //  [R1]
         { []
         }
     {offset
       c3svB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3svC; else goto c3svD;
       c3svC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3svD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rN5_info" {
     sat_s3rN5_info:
         const sat_s3rN5_entry;
         const 1;
         const 16;
 },
 Text.ParserCombinators.ReadP.gather_gath_entry() //  [R2, R3]
         { []
         }
     {offset
       c3svL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3svM; else goto c3svN;
       c3svM: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.gather_gath_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3svN: // global
           I64[Sp - 16] = block_c3suD_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3swc; else goto c3suE;
       u3swc: // global
           call _c3suD(R1) args: 0, res: 0, upd: 0;
       c3suE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.gather_gath_info" {
     Text.ParserCombinators.ReadP.gather_gath_info:
         const Text.ParserCombinators.ReadP.gather_gath_entry;
         const 0;
         const 105557411233806;
         const 8589934607;
         const S3s6G_srt+8;
 },
 _c3suD() //  [R1]
         { []
         }
     {offset
       c3suD: // global
           _s3rMP::P64 = P64[Sp + 8];
           _c3svK::P64 = R1 & 7;
           if (_c3svK::P64 < 4) goto u3sw9; else goto u3swb;
       u3sw9: // global
           if (_c3svK::P64 < 3) goto u3swa; else goto c3svH;
       u3swa: // global
           if (_c3svK::P64 < 2) goto c3svF; else goto c3svG;
       c3svF: // global
           Hp = Hp + 40;
           _s3rMR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3svV; else goto c3svQ;
       c3svQ: // global
           _s3rMS::P64 = P64[_s3rMR::P64 + 7];
           I64[Hp - 32] = sat_s3rMY_info;
           P64[Hp - 24] = _s3rMP::P64;
           P64[Hp - 16] = _s3rMS::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3svG: // global
           Hp = Hp + 40;
           _s3rMR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3svV; else goto c3svU;
       c3svV: // global
           HpAlloc = 40;
           R1 = _s3rMR::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3svU: // global
           _s3rMZ::P64 = P64[_s3rMR::P64 + 6];
           I64[Hp - 32] = sat_s3rN2_info;
           P64[Hp - 24] = _s3rMP::P64;
           P64[Hp - 16] = _s3rMZ::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3svH: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3swb: // global
           if (_c3svK::P64 < 5) goto c3svI; else goto c3svJ;
       c3svI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sw1; else goto c3sw0;
       c3sw1: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sw0: // global
           _s3rN3::P64 = P64[R1 + 4];
           _s3rN4::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3rN7_info;
           P64[Hp - 32] = _s3rMP::P64;
           P64[Hp - 24] = _s3rN4::P64;
           I64[Hp - 16] = sat_s3rN5_info;
           P64[Hp] = _s3rMP::P64;
           I64[Sp] = block_c3svY_info;
           R2 = Hp - 16;
           R1 = _s3rN3::P64;
           P64[Sp + 8] = Hp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3svJ: // global
           R1 = lvl3_r3oqH_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3suD_info" {
     block_c3suD_info:
         const _c3suD;
         const 1;
         const 105557411233822;
         const S3s6G_srt+8;
 },
 _c3svY() //  [R1]
         { []
         }
     {offset
       c3svY: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3svY_info" {
     block_c3svY_info:
         const _c3svY;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.131618911 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather1_closure" {
     Text.ParserCombinators.ReadP.gather1_closure:
         const Text.ParserCombinators.ReadP.gather1_info;
         const 0;
 },
 sat_s3rNe_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sxs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sxw; else goto c3sxv;
       c3sxw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sxv: // global
           _s3rNa::P64 = P64[R1 + 7];
           _s3rNb::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = _s3rNb::P64;
           R2 = Hp - 15;
           R1 = _s3rNa::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rNe_info" {
     sat_s3rNe_info:
         const sat_s3rNe_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rNf_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sxy: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sxC; else goto c3sxB;
       c3sxC: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sxB: // global
           _s3rNa::P64 = P64[R1 + 7];
           I64[Hp - 40] = sat_s3rNe_info;
           P64[Hp - 32] = _s3rNa::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rNf_info" {
     sat_s3rNf_info:
         const sat_s3rNf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.gather1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sxF: // global
           _s3rNa::P64 = R3;
           _s3rN9::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3sxG; else goto c3sxH;
       c3sxH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sxJ; else goto c3sxI;
       c3sxJ: // global
           HpAlloc = 16;
           goto c3sxG;
       c3sxG: // global
           R3 = _s3rNa::P64;
           R2 = _s3rN9::P64;
           R1 = Text.ParserCombinators.ReadP.gather1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sxI: // global
           I64[Hp - 8] = sat_s3rNf_info;
           P64[Hp] = _s3rNa::P64;
           I64[Sp - 8] = block_c3sxD_info;
           R2 = Hp - 7;
           R1 = _s3rN9::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.gather1_info" {
     Text.ParserCombinators.ReadP.gather1_info:
         const Text.ParserCombinators.ReadP.gather1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S3s6G_srt+112;
 },
 _c3sxD() //  [R1]
         { []
         }
     {offset
       c3sxD: // global
           R3 = R1;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sxD_info" {
     block_c3sxD_info:
         const _c3sxD;
         const 0;
         const 4294967326;
         const S3s6G_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.142166817 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather_closure" {
     Text.ParserCombinators.ReadP.gather_closure:
         const Text.ParserCombinators.ReadP.gather_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.gather_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sye: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.gather1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.gather_info" {
     Text.ParserCombinators.ReadP.gather_info:
         const Text.ParserCombinators.ReadP.gather_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3s6G_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.145600557 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$trModule4_bytes" {
     Text.ParserCombinators.ReadP.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.147937994 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule3_closure" {
     Text.ParserCombinators.ReadP.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.150009464 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$trModule2_bytes" {
     Text.ParserCombinators.ReadP.$trModule2_bytes:
         I8[] [84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.151681056 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule1_closure" {
     Text.ParserCombinators.ReadP.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.153437502 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule_closure" {
     Text.ParserCombinators.ReadP.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.ParserCombinators.ReadP.$trModule3_closure+1;
         const Text.ParserCombinators.ReadP.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.155220487 UTC

[section ""data" . $krep_r3oqI_closure" {
     $krep_r3oqI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.15698444 UTC

[section ""data" . $krep1_r3oqJ_closure" {
     $krep1_r3oqJ_closure:
         const :_con_info;
         const $krep_r3oqI_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.158866893 UTC

[section ""data" . $krep2_r3oqK_closure" {
     $krep2_r3oqK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r3oqJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.160597725 UTC

[section ""data" . $krep3_r3oqL_closure" {
     $krep3_r3oqL_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.162398515 UTC

[section ""data" . $krep4_r3oqM_closure" {
     $krep4_r3oqM_closure:
         const :_con_info;
         const $krep2_r3oqK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.164239307 UTC

[section ""data" . $krep5_r3oqN_closure" {
     $krep5_r3oqN_closure:
         const :_con_info;
         const $krep3_r3oqL_closure+2;
         const $krep4_r3oqM_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.166539389 UTC

[section ""data" . $krep6_r3oqO_closure" {
     $krep6_r3oqO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep5_r3oqN_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.168305938 UTC

[section ""data" . $krep7_r3oqP_closure" {
     $krep7_r3oqP_closure:
         const :_con_info;
         const $krep6_r3oqO_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.170132334 UTC

[section ""data" . $krep8_r3oqQ_closure" {
     $krep8_r3oqQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep7_r3oqP_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.171828255 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tcP2_bytes" {
     Text.ParserCombinators.ReadP.$tcP2_bytes:
         I8[] [80]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.174227493 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcP1_closure" {
     Text.ParserCombinators.ReadP.$tcP1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tcP2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.176040269 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcP_closure" {
     Text.ParserCombinators.ReadP.$tcP_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tcP1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 4287589432649596960;
         const 9029773818181158220;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.177911853 UTC

[section ""data" . $krep9_r3oqR_closure" {
     $krep9_r3oqR_closure:
         const :_con_info;
         const $krep3_r3oqL_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.179664119 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail1_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadP.$tcP_closure+1;
         const $krep9_r3oqR_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.181609599 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Fail3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Fail3_bytes:
         I8[] [39,70,97,105,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.183313028 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail2_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Fail3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.185115553 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 16564457091671581868;
         const 4540703186775139959;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.187340251 UTC

[section ""data" . $krep10_r3oqS_closure" {
     $krep10_r3oqS_closure:
         const GHC.Types.KindRepFun_con_info;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.18913575 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result1_closure" {
     Text.ParserCombinators.ReadP.$tc'Result1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3oqL_closure+2;
         const $krep10_r3oqS_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.190873928 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Result3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Result3_bytes:
         I8[] [39,82,101,115,117,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.192604673 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result2_closure" {
     Text.ParserCombinators.ReadP.$tc'Result2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Result3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.194430983 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result_closure" {
     Text.ParserCombinators.ReadP.$tc'Result_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Result2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Result1_closure+4;
         const 14629176799732153257;
         const 2029199220309899277;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.196292525 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final1_closure" {
     Text.ParserCombinators.ReadP.$tc'Final1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r3oqQ_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.198564809 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Final3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Final3_bytes:
         I8[] [39,70,105,110,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.200872108 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final2_closure" {
     Text.ParserCombinators.ReadP.$tc'Final2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Final3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.202694047 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final_closure" {
     Text.ParserCombinators.ReadP.$tc'Final_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Final2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Final1_closure+4;
         const 9825883373667767852;
         const 1277540149077833820;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.204491523 UTC

[section ""data" . $krep11_r3oqT_closure" {
     $krep11_r3oqT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3oqK_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.206226798 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look1_closure" {
     Text.ParserCombinators.ReadP.$tc'Look1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r3oqT_closure+4;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.207906886 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Look3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Look3_bytes:
         I8[] [39,76,111,111,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.209661436 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look2_closure" {
     Text.ParserCombinators.ReadP.$tc'Look2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Look3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.211430356 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look_closure" {
     Text.ParserCombinators.ReadP.$tc'Look_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Look2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Look1_closure+4;
         const 11302519862508684236;
         const 969530656846011597;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.214245982 UTC

[section ""data" . $krep12_r3oqU_closure" {
     $krep12_r3oqU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3oqI_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.215989353 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get1_closure" {
     Text.ParserCombinators.ReadP.$tc'Get1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r3oqU_closure+4;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.217839388 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Get3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Get3_bytes:
         I8[] [39,71,101,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.219553293 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get2_closure" {
     Text.ParserCombinators.ReadP.$tc'Get2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Get3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.221412964 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get_closure" {
     Text.ParserCombinators.ReadP.$tc'Get_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Get2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Get1_closure+4;
         const 10806119809527641225;
         const 14618661019746688366;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.223209807 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tcReadP2_bytes" {
     Text.ParserCombinators.ReadP.$tcReadP2_bytes:
         I8[] [82,101,97,100,80]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.224927578 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcReadP1_closure" {
     Text.ParserCombinators.ReadP.$tcReadP1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tcReadP2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.227321146 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcReadP_closure" {
     Text.ParserCombinators.ReadP.$tcReadP_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tcReadP1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15640243629783811470;
         const 8988027559298507146;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.230966142 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_info;
 },
 sat_s3rNn_entry() //  [R1, R2]
         { []
         }
     {offset
       c3szi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3szm; else goto c3szl;
       c3szm: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3szl: // global
           _s3rNj::P64 = P64[R1 + 7];
           _s3rNk::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rNk::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3rNj::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rNn_info" {
     sat_s3rNn_info:
         const sat_s3rNn_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rNo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3szn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3szr; else goto c3szq;
       c3szr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3szq: // global
           _s3rNi::P64 = P64[R1 + 7];
           _s3rNj::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rNn_info;
           P64[Hp - 8] = _s3rNj::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rNi::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rNo_info" {
     sat_s3rNo_info:
         const sat_s3rNo_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP4_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       c3szs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3szw; else goto c3szv;
       c3szw: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3szv: // global
           I64[Hp - 16] = sat_s3rNo_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3rNh::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3rNh::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeReadP4_info" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP4_info:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.240167318 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_info;
 },
 sat_s3rNu_entry() //  [R1, R2]
         { []
         }
     {offset
       c3szX: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rNu_info" {
     sat_s3rNu_info:
         const sat_s3rNu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl4_s3rNs_entry() //  [R1]
         { []
         }
     {offset
       c3sA0: // global
           _s3rNs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sA1; else goto c3sA2;
       c3sA2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sA4; else goto c3sA3;
       c3sA4: // global
           HpAlloc = 16;
           goto c3sA1;
       c3sA1: // global
           R1 = _s3rNs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sA3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rNs::P64;
           _s3rNq::P64 = P64[_s3rNs::P64 + 16];
           _s3rNr::P64 = P64[_s3rNs::P64 + 24];
           I64[Hp - 8] = sat_s3rNu_info;
           P64[Hp] = _s3rNr::P64;
           R2 = Hp - 7;
           R1 = _s3rNq::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rNs_info" {
     lvl4_s3rNs_info:
         const lvl4_s3rNs_entry;
         const 2;
         const 18;
 },
 sat_s3rNw_entry() //  [R1]
         { []
         }
     {offset
       c3sAa: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rNw_info" {
     sat_s3rNw_info:
         const sat_s3rNw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP2_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       c3sAd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sAh; else goto c3sAg;
       c3sAh: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sAg: // global
           I64[Hp - 40] = lvl4_s3rNs_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3rNw_info;
           P64[Hp] = Hp - 40;
           _s3rNp::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3rNp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeReadP2_info" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP2_info:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.250149926 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_info;
 },
 sat_s3rNF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sAT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sAX; else goto c3sAW;
       c3sAX: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sAW: // global
           _s3rNA::P64 = P64[R1 + 7];
           _s3rNC::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rNC::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3rNA::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rNF_info" {
     sat_s3rNF_info:
         const sat_s3rNF_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rNG_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sAY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sB2; else goto c3sB1;
       c3sB2: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sB1: // global
           _s3rNx::P64 = P64[R1 + 7];
           _s3rNz::P64 = P64[R1 + 15];
           _s3rNA::P64 = P64[R1 + 23];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3rNx::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3rNF_info;
           P64[Hp - 8] = _s3rNA::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 15;
           R1 = _s3rNz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rNG_info" {
     sat_s3rNG_info:
         const sat_s3rNG_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP3_entry() //  [R2,
                                                               R3, R4, R5]
         { []
         }
     {offset
       c3sB3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sB7; else goto c3sB6;
       c3sB7: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sB6: // global
           I64[Hp - 24] = sat_s3rNG_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 23;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeReadP3_info" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP3_info:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.258985551 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_info;
 },
 sat_s3rNN_entry() //  [R1]
         { []
         }
     {offset
       c3sBC: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rNN_info" {
     sat_s3rNN_info:
         const sat_s3rNN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3rNO_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sBF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sBJ; else goto c3sBI;
       c3sBJ: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sBI: // global
           _s3rNI::P64 = P64[R1 + 7];
           _s3rNJ::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3rNJ::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rNN_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3rNI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rNO_info" {
     sat_s3rNO_info:
         const sat_s3rNO_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP1_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       c3sBK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sBO; else goto c3sBN;
       c3sBO: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sBN: // global
           I64[Hp - 16] = sat_s3rNO_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3rNH::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3rNH::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fApplicativeReadP1_info" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP1_info:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.267197566 UTC

[section ""data" . $c>>_r3oqV_closure" {
     $c>>_r3oqV_closure:
         const $c>>_r3oqV_info;
 },
 sat_s3rNU_entry() //  [R1]
         { []
         }
     {offset
       c3sCf: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rNU_info" {
     sat_s3rNU_info:
         const sat_s3rNU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 $c>>_r3oqV_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sCi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sCm; else goto c3sCl;
       c3sCm: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $c>>_r3oqV_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sCl: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3rNU_info;
           P64[Hp] = Hp - 40;
           _s3rNP::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3rNP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $c>>_r3oqV_info" {
     $c>>_r3oqV_info:
         const $c>>_r3oqV_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.27430798 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure:
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info;
 },
 Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       c3sCD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $c>>_r3oqV_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info" {
     Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info:
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.277713689 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure+4;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.279641495 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadReadP1_closure+3;
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure+2;
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.283900267 UTC

[section ""data" . Text.ParserCombinators.ReadP.between1_closure" {
     Text.ParserCombinators.ReadP.between1_closure:
         const Text.ParserCombinators.ReadP.between1_info;
 },
 sat_s3rO3_entry() //  [R1]
         { []
         }
     {offset
       c3sD5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rO3_info" {
     sat_s3rO3_info:
         const sat_s3rO3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3rO4_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sD8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sDc; else goto c3sDb;
       c3sDc: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sDb: // global
           _s3rNW::P64 = P64[R1 + 7];
           _s3rNY::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3rNY::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rO3_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3rNW::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rO4_info" {
     sat_s3rO4_info:
         const sat_s3rO4_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 lvl4_s3rNZ_entry() //  [R1]
         { []
         }
     {offset
       c3sDd: // global
           _s3rNZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sDe; else goto c3sDf;
       c3sDf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sDh; else goto c3sDg;
       c3sDh: // global
           HpAlloc = 24;
           goto c3sDe;
       c3sDe: // global
           R1 = _s3rNZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sDg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rNZ::P64;
           _s3rNW::P64 = P64[_s3rNZ::P64 + 16];
           _s3rNX::P64 = P64[_s3rNZ::P64 + 24];
           _s3rNY::P64 = P64[_s3rNZ::P64 + 32];
           I64[Hp - 16] = sat_s3rO4_info;
           P64[Hp - 8] = _s3rNW::P64;
           P64[Hp] = _s3rNY::P64;
           R2 = Hp - 15;
           R1 = _s3rNX::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rNZ_info" {
     lvl4_s3rNZ_info:
         const lvl4_s3rNZ_entry;
         const 3;
         const 15;
 },
 sat_s3rO6_entry() //  [R1]
         { []
         }
     {offset
       c3sDn: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rO6_info" {
     sat_s3rO6_info:
         const sat_s3rO6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.between1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3sDq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sDu; else goto c3sDt;
       c3sDu: // global
           HpAlloc = 56;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.between1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sDt: // global
           I64[Hp - 48] = lvl4_s3rNZ_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = sat_s3rO6_info;
           P64[Hp] = Hp - 48;
           _s3rNV::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3rNV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.between1_info" {
     Text.ParserCombinators.ReadP.between1_info:
         const Text.ParserCombinators.ReadP.between1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.295042197 UTC

[section ""data" . Text.ParserCombinators.ReadP.between_closure" {
     Text.ParserCombinators.ReadP.between_closure:
         const Text.ParserCombinators.ReadP.between_info;
 },
 Text.ParserCombinators.ReadP.between_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3sE2: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.between1_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.between_info" {
     Text.ParserCombinators.ReadP.between_info:
         const Text.ParserCombinators.ReadP.between_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.301593969 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wcount_closure" {
     Text.ParserCombinators.ReadP.$wcount_closure:
         const Text.ParserCombinators.ReadP.$wcount_info;
 },
 sat_s3rOj_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sEC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sEG; else goto c3sEF;
       c3sEG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sEF: // global
           _s3rOd::P64 = P64[R1 + 7];
           _s3rOg::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rOg::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rOd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rOj_info" {
     sat_s3rOj_info:
         const sat_s3rOj_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rOk_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sEH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sEL; else goto c3sEK;
       c3sEL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sEK: // global
           _s3rOb::P64 = P64[R1 + 7];
           _s3rOd::P64 = P64[R1 + 15];
           _s3rOf::I64 = I64[R1 + 23];
           I64[Hp - 16] = sat_s3rOj_info;
           P64[Hp - 8] = _s3rOd::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3rOf::I64;
           R1 = _s3rOb::P64;
           call $wxs_s3rOb_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rOk_info" {
     sat_s3rOk_info:
         const sat_s3rOk_entry;
         const 4294967298;
         const 8;
         const 4294967301;
 },
 sat_s3rOn_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sET: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sEX; else goto c3sEW;
       c3sEX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sEW: // global
           _s3rOd::P64 = P64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3rOd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rOn_info" {
     sat_s3rOn_info:
         const sat_s3rOn_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 $wxs_s3rOb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3sF1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sF5; else goto c3sF4;
       c3sF5: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sF4: // global
           _s3rO8::P64 = P64[R1 + 6];
           if (R2 == 1) goto c3sF0; else goto c3sEZ;
       c3sF0: // global
           I64[Hp - 24] = sat_s3rOn_info;
           P64[Hp - 16] = R3;
           _c3sEN::P64 = Hp - 23;
           Hp = Hp - 16;
           R2 = _c3sEN::P64;
           R1 = _s3rO8::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3sEZ: // global
           I64[Hp - 24] = sat_s3rOk_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R3;
           I64[Hp] = R2 - 1;
           R2 = Hp - 23;
           R1 = _s3rO8::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs_s3rOb_info" {
     $wxs_s3rOb_info:
         const $wxs_s3rOb_entry;
         const 1;
         const 9;
         const 8589934605;
 },
 Text.ParserCombinators.ReadP.$wcount_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sF9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sFd; else goto c3sFc;
       c3sFd: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wcount_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sFc: // global
           if (%MO_S_Ge_W64(0, R2)) goto c3sF7; else goto c3sF8;
       c3sF7: // global
           Hp = Hp - 16;
           R2 = GHC.Types.[]_closure+1;
           R1 = R4;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3sF8: // global
           I64[Hp - 8] = $wxs_s3rOb_info;
           P64[Hp] = R3;
           R3 = R4;
           R2 = R2;
           R1 = Hp - 6;
           call $wxs_s3rOb_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$wcount_info" {
     Text.ParserCombinators.ReadP.$wcount_info:
         const Text.ParserCombinators.ReadP.$wcount_entry;
         const 0;
         const 14;
         const 12884901907;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.314697747 UTC

[section ""data" . Text.ParserCombinators.ReadP.count1_closure" {
     Text.ParserCombinators.ReadP.count1_closure:
         const Text.ParserCombinators.ReadP.count1_info;
 },
 Text.ParserCombinators.ReadP.count1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sFL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3sFM; else goto c3sFN;
       c3sFM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.count1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sFN: // global
           I64[Sp - 24] = block_c3sFI_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3sFR; else goto c3sFJ;
       u3sFR: // global
           call _c3sFI(R1) args: 0, res: 0, upd: 0;
       c3sFJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.count1_info" {
     Text.ParserCombinators.ReadP.count1_info:
         const Text.ParserCombinators.ReadP.count1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3sFI() //  [R1]
         { []
         }
     {offset
       c3sFI: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$wcount_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sFI_info" {
     block_c3sFI_info:
         const _c3sFI;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.320720019 UTC

[section ""data" . Text.ParserCombinators.ReadP.count_closure" {
     Text.ParserCombinators.ReadP.count_closure:
         const Text.ParserCombinators.ReadP.count_info;
 },
 Text.ParserCombinators.ReadP.count_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sG6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.count1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.count_info" {
     Text.ParserCombinators.ReadP.count_info:
         const Text.ParserCombinators.ReadP.count_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.324946876 UTC

[section ""data" . Text.ParserCombinators.ReadP.option1_closure" {
     Text.ParserCombinators.ReadP.option1_closure:
         const Text.ParserCombinators.ReadP.option1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.option1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sGk: // global
           _s3rOv::P64 = R4;
           _s3rOu::P64 = R3;
           _s3rOt::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sGl; else goto c3sGm;
       c3sGm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sGo; else goto c3sGn;
       c3sGo: // global
           HpAlloc = 32;
           goto c3sGl;
       c3sGl: // global
           R4 = _s3rOv::P64;
           R3 = _s3rOu::P64;
           R2 = _s3rOt::P64;
           R1 = Text.ParserCombinators.ReadP.option1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sGn: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rOv::P64;
           P64[Hp] = _s3rOt::P64;
           I64[Sp - 16] = block_c3sGi_info;
           R2 = _s3rOv::P64;
           R1 = _s3rOu::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.option1_info" {
     Text.ParserCombinators.ReadP.option1_info:
         const Text.ParserCombinators.ReadP.option1_entry;
         const 0;
         const 281479271677966;
         const 12884901911;
         const S3s6G_srt+8;
 },
 _c3sGi() //  [R1]
         { []
         }
     {offset
       c3sGi: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sGi_info" {
     block_c3sGi_info:
         const _c3sGi;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.33060589 UTC

[section ""data" . Text.ParserCombinators.ReadP.option_closure" {
     Text.ParserCombinators.ReadP.option_closure:
         const Text.ParserCombinators.ReadP.option_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.option_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sGH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.option1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.option_info" {
     Text.ParserCombinators.ReadP.option_info:
         const Text.ParserCombinators.ReadP.option_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3s6G_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.33568024 UTC

[section ""data" . Text.ParserCombinators.ReadP.optional1_closure" {
     Text.ParserCombinators.ReadP.optional1_closure:
         const Text.ParserCombinators.ReadP.optional1_info;
         const 0;
 },
 lvl4_s3rOA_entry() //  [R1]
         { []
         }
     {offset
       c3sGW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sGX; else goto c3sGY;
       c3sGX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sGY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rOA_info" {
     lvl4_s3rOA_info:
         const lvl4_s3rOA_entry;
         const 1;
         const 16;
 },
 sat_s3rOC_entry() //  [R1]
         { []
         }
     {offset
       c3sH4: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rOC_info" {
     sat_s3rOC_info:
         const sat_s3rOC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.optional1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sH9: // global
           _s3rOz::P64 = R3;
           _s3rOy::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sHa; else goto c3sHb;
       c3sHb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sHd; else goto c3sHc;
       c3sHd: // global
           HpAlloc = 40;
           goto c3sHa;
       c3sHa: // global
           R3 = _s3rOz::P64;
           R2 = _s3rOy::P64;
           R1 = Text.ParserCombinators.ReadP.optional1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sHc: // global
           I64[Hp - 32] = lvl4_s3rOA_info;
           P64[Hp - 16] = _s3rOz::P64;
           I64[Hp - 8] = sat_s3rOC_info;
           _c3sGS::P64 = Hp - 32;
           P64[Hp] = _c3sGS::P64;
           I64[Sp - 16] = block_c3sH7_info;
           R2 = Hp - 7;
           R1 = _s3rOy::P64;
           P64[Sp - 8] = _c3sGS::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.optional1_info" {
     Text.ParserCombinators.ReadP.optional1_info:
         const Text.ParserCombinators.ReadP.optional1_entry;
         const 0;
         const 562954248388622;
         const 8589934607;
         const S3s6G_srt+8;
 },
 _c3sH7() //  [R1]
         { []
         }
     {offset
       c3sH7: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sH7_info" {
     block_c3sH7_info:
         const _c3sH7;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.34484398 UTC

[section ""data" . Text.ParserCombinators.ReadP.optional_closure" {
     Text.ParserCombinators.ReadP.optional_closure:
         const Text.ParserCombinators.ReadP.optional_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.optional_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sHH: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.optional1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.optional_info" {
     Text.ParserCombinators.ReadP.optional_info:
         const Text.ParserCombinators.ReadP.optional_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3s6G_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.352229891 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy3_closure" {
     Text.ParserCombinators.ReadP.endBy3_closure:
         const Text.ParserCombinators.ReadP.endBy3_info;
         const 0;
 },
 sat_s3rOK_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sI7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sIb; else goto c3sIa;
       c3sIb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sIa: // global
           _s3rOF::P64 = P64[R1 + 7];
           _s3rOH::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rOH::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rOF::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rOK_info" {
     sat_s3rOK_info:
         const sat_s3rOK_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rOL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sIc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sIg; else goto c3sIf;
       c3sIg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sIf: // global
           _s3rOE::P64 = P64[R1 + 7];
           _s3rOF::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rOK_info;
           P64[Hp - 8] = _s3rOF::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3rOE::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rOL_info" {
     sat_s3rOL_info:
         const sat_s3rOL_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+152;
 },
 sat_s3rOM_entry() //  [R1]
         { []
         }
     {offset
       c3sIh: // global
           _s3rOM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sIi; else goto c3sIj;
       c3sIj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sIl; else goto c3sIk;
       c3sIl: // global
           HpAlloc = 24;
           goto c3sIi;
       c3sIi: // global
           R1 = _s3rOM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sIk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rOM::P64;
           _s3rOE::P64 = P64[_s3rOM::P64 + 16];
           _s3rOF::P64 = P64[_s3rOM::P64 + 24];
           I64[Hp - 16] = sat_s3rOL_info;
           P64[Hp - 8] = _s3rOE::P64;
           P64[Hp] = _s3rOF::P64;
           R2 = Hp - 15;
           R1 = _s3rOE::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rOM_info" {
     sat_s3rOM_info:
         const sat_s3rOM_entry;
         const 2;
         const 4294967314;
         const S3s6G_srt+152;
 },
 Text.ParserCombinators.ReadP.endBy3_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sIo: // global
           _s3rOF::P64 = R3;
           _s3rOE::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sIp; else goto c3sIq;
       c3sIq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sIs; else goto c3sIr;
       c3sIs: // global
           HpAlloc = 32;
           goto c3sIp;
       c3sIp: // global
           R3 = _s3rOF::P64;
           R2 = _s3rOE::P64;
           R1 = Text.ParserCombinators.ReadP.endBy3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sIr: // global
           I64[Hp - 24] = sat_s3rOM_info;
           P64[Hp - 8] = _s3rOE::P64;
           P64[Hp] = _s3rOF::P64;
           I64[Sp - 16] = block_c3sIm_info;
           R2 = GHC.Types.[]_closure+1;
           R1 = _s3rOF::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.endBy3_info" {
     Text.ParserCombinators.ReadP.endBy3_info:
         const Text.ParserCombinators.ReadP.endBy3_entry;
         const 0;
         const 1125904201809934;
         const 8589934607;
         const S3s6G_srt+8;
 },
 _c3sIm() //  [R1]
         { []
         }
     {offset
       c3sIm: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sIm_info" {
     block_c3sIm_info:
         const _c3sIm;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.364522248 UTC

[section ""data" . Text.ParserCombinators.ReadP.many_closure" {
     Text.ParserCombinators.ReadP.many_closure:
         const Text.ParserCombinators.ReadP.many_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.many_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sJ0: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.many_info" {
     Text.ParserCombinators.ReadP.many_info:
         const Text.ParserCombinators.ReadP.many_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3s6G_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.370484394 UTC

[section ""data" . Text.ParserCombinators.ReadP.many2_closure" {
     Text.ParserCombinators.ReadP.many2_closure:
         const Text.ParserCombinators.ReadP.many2_info;
         const 0;
 },
 sat_s3rOS_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sJm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sJq; else goto c3sJp;
       c3sJq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sJp: // global
           _s3rOO::P64 = P64[R1 + 7];
           _s3rOP::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rOP::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rOO::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rOS_info" {
     sat_s3rOS_info:
         const sat_s3rOS_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rOT_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sJr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sJv; else goto c3sJu;
       c3sJv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sJu: // global
           _s3rON::P64 = P64[R1 + 7];
           _s3rOO::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rOS_info;
           P64[Hp - 8] = _s3rOO::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3rON::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rOT_info" {
     sat_s3rOT_info:
         const sat_s3rOT_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+152;
 },
 Text.ParserCombinators.ReadP.many2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sJw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sJA; else goto c3sJz;
       c3sJA: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.many2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sJz: // global
           I64[Hp - 16] = sat_s3rOT_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s3rON::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3rON::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.many2_info" {
     Text.ParserCombinators.ReadP.many2_info:
         const Text.ParserCombinators.ReadP.many2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3s6G_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.378897506 UTC

[section ""data" . Text.ParserCombinators.ReadP.many1_closure" {
     Text.ParserCombinators.ReadP.many1_closure:
         const Text.ParserCombinators.ReadP.many1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.many1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sJS: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.many2_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.many1_info" {
     Text.ParserCombinators.ReadP.many1_info:
         const Text.ParserCombinators.ReadP.many1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3s6G_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.386888436 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy4_closure" {
     Text.ParserCombinators.ReadP.endBy4_closure:
         const Text.ParserCombinators.ReadP.endBy4_info;
         const 0;
 },
 sat_s3rP2_entry() //  [R1]
         { []
         }
     {offset
       c3sKj: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rP2_info" {
     sat_s3rP2_info:
         const sat_s3rP2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3rP3_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sKm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sKq; else goto c3sKp;
       c3sKq: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sKp: // global
           _s3rOV::P64 = P64[R1 + 7];
           _s3rOY::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3rOY::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rP2_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3rOV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rP3_info" {
     sat_s3rP3_info:
         const sat_s3rP3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 p1_s3rOX_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sKr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sKv; else goto c3sKu;
       c3sKv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sKu: // global
           _s3rOU::P64 = P64[R1 + 7];
           _s3rOV::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rP3_info;
           P64[Hp - 8] = _s3rOV::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rOU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p1_s3rOX_info" {
     p1_s3rOX_info:
         const p1_s3rOX_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rP8_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sKL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sKP; else goto c3sKO;
       c3sKP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sKO: // global
           _s3rOW::P64 = P64[R1 + 7];
           _s3rP4::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rP4::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rOW::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rP8_info" {
     sat_s3rP8_info:
         const sat_s3rP8_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 lvl4_s3rP5_entry() //  [R1]
         { []
         }
     {offset
       c3sKQ: // global
           _s3rP5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sKR; else goto c3sKS;
       c3sKS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sKU; else goto c3sKT;
       c3sKU: // global
           HpAlloc = 24;
           goto c3sKR;
       c3sKR: // global
           R1 = _s3rP5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sKT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rP5::P64;
           _s3rOW::P64 = P64[_s3rP5::P64 + 16];
           _s3rOX::P64 = P64[_s3rP5::P64 + 24];
           _s3rP4::P64 = P64[_s3rP5::P64 + 32];
           I64[Hp - 16] = sat_s3rP8_info;
           P64[Hp - 8] = _s3rOW::P64;
           P64[Hp] = _s3rP4::P64;
           R3 = Hp - 15;
           R2 = _s3rOX::P64;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rP5_info" {
     lvl4_s3rP5_info:
         const lvl4_s3rP5_entry;
         const 3;
         const 4294967311;
         const S3s6G_srt+152;
 },
 sat_s3rPa_entry() //  [R1]
         { []
         }
     {offset
       c3sL0: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rPa_info" {
     sat_s3rPa_info:
         const sat_s3rPa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3rPb_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sL3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sL7; else goto c3sL6;
       c3sL7: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sL6: // global
           _s3rOV::P64 = P64[R1 + 7];
           _s3rOW::P64 = P64[R1 + 15];
           _s3rOX::P64 = P64[R1 + 23];
           I64[Hp - 48] = lvl4_s3rP5_info;
           P64[Hp - 32] = _s3rOW::P64;
           P64[Hp - 24] = _s3rOX::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rPa_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3rOV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rPb_info" {
     sat_s3rPb_info:
         const sat_s3rPb_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3s6G_srt+152;
 },
 Text.ParserCombinators.ReadP.endBy4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sL8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sLc; else goto c3sLb;
       c3sLc: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.endBy4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sLb: // global
           I64[Hp - 48] = p1_s3rOX_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3rPb_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 47;
           _s3rOU::P64 = R2;
           R2 = Hp - 23;
           R1 = _s3rOU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.endBy4_info" {
     Text.ParserCombinators.ReadP.endBy4_info:
         const Text.ParserCombinators.ReadP.endBy4_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S3s6G_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.407131555 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy1_closure" {
     Text.ParserCombinators.ReadP.endBy1_closure:
         const Text.ParserCombinators.ReadP.endBy1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.endBy1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sLY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy4_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.endBy1_info" {
     Text.ParserCombinators.ReadP.endBy1_info:
         const Text.ParserCombinators.ReadP.endBy1_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3s6G_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.412576115 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany2_closure" {
     Text.ParserCombinators.ReadP.skipMany2_closure:
         const Text.ParserCombinators.ReadP.skipMany2_info;
         const 0;
 },
 sat_s3rPg_entry() //  [R1]
         { []
         }
     {offset
       c3sMi: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rPg_info" {
     sat_s3rPg_info:
         const sat_s3rPg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.skipMany2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sMl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sMm; else goto c3sMn;
       c3sMm: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipMany2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sMn: // global
           I64[Sp - 16] = block_c3sM9_info;
           _s3rPc::P64 = R2;
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           P64[Sp - 8] = _s3rPc::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipMany2_info" {
     Text.ParserCombinators.ReadP.skipMany2_info:
         const Text.ParserCombinators.ReadP.skipMany2_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S3s6G_srt+152;
 },
 _c3sM9() //  [R1]
         { []
         }
     {offset
       c3sM9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sMq; else goto c3sMp;
       c3sMq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sMp: // global
           I64[Hp - 8] = sat_s3rPg_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sM9_info" {
     block_c3sM9_info:
         const _c3sM9;
         const 1;
         const 4294967326;
         const S3s6G_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.421374275 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany_closure" {
     Text.ParserCombinators.ReadP.skipMany_closure:
         const Text.ParserCombinators.ReadP.skipMany_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.skipMany_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sML: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipMany2_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipMany_info" {
     Text.ParserCombinators.ReadP.skipMany_info:
         const Text.ParserCombinators.ReadP.skipMany_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3s6G_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.427204426 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany3_closure" {
     Text.ParserCombinators.ReadP.skipMany3_closure:
         const Text.ParserCombinators.ReadP.skipMany3_info;
         const 0;
 },
 sat_s3rPm_entry() //  [R1]
         { []
         }
     {offset
       c3sN9: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rPm_info" {
     sat_s3rPm_info:
         const sat_s3rPm_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl4_s3rPj_entry() //  [R1]
         { []
         }
     {offset
       c3sNc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3sNd; else goto c3sNe;
       c3sNd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sNe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3sN0_info;
           R2 = GHC.Tuple.()_closure+1;
           _s3rPh::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s3rPh::P64;
           Sp = Sp - 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rPj_info" {
     lvl4_s3rPj_info:
         const lvl4_s3rPj_entry;
         const 2;
         const 4294967314;
         const S3s6G_srt+152;
 },
 _c3sN0() //  [R1]
         { []
         }
     {offset
       c3sN0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sNh; else goto c3sNg;
       c3sNh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3sNg: // global
           I64[Hp - 8] = sat_s3rPm_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3sN0_info" {
     block_c3sN0_info:
         const _c3sN0;
         const 1;
         const 4294967326;
         const S3s6G_srt+152;
 },
 sat_s3rPo_entry() //  [R1]
         { []
         }
     {offset
       c3sNn: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rPo_info" {
     sat_s3rPo_info:
         const sat_s3rPo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.skipMany3_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sNq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sNu; else goto c3sNt;
       c3sNu: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipMany3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sNt: // global
           I64[Hp - 40] = lvl4_s3rPj_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s3rPo_info;
           P64[Hp] = Hp - 40;
           _s3rPh::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3rPh::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipMany3_info" {
     Text.ParserCombinators.ReadP.skipMany3_info:
         const Text.ParserCombinators.ReadP.skipMany3_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S3s6G_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.439133451 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany1_closure" {
     Text.ParserCombinators.ReadP.skipMany1_closure:
         const Text.ParserCombinators.ReadP.skipMany1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.skipMany1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sO1: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipMany3_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipMany1_info" {
     Text.ParserCombinators.ReadP.skipMany1_info:
         const Text.ParserCombinators.ReadP.skipMany1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3s6G_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.445021311 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy3_closure" {
     Text.ParserCombinators.ReadP.sepBy3_closure:
         const Text.ParserCombinators.ReadP.sepBy3_info;
         const 0;
 },
 sat_s3rPw_entry() //  [R1]
         { []
         }
     {offset
       c3sOn: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rPw_info" {
     sat_s3rPw_info:
         const sat_s3rPw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 m2_s3rPs_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sOq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sOu; else goto c3sOt;
       c3sOu: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sOt: // global
           _s3rPp::P64 = P64[R1 + 7];
           _s3rPq::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3rPp::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rPw_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3rPq::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . m2_s3rPs_info" {
     m2_s3rPs_info:
         const m2_s3rPs_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rPA_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sOG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sOK; else goto c3sOJ;
       c3sOK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sOJ: // global
           _s3rPr::P64 = P64[R1 + 7];
           _s3rPx::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rPx::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rPr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rPA_info" {
     sat_s3rPA_info:
         const sat_s3rPA_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rPB_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sOL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sOP; else goto c3sOO;
       c3sOP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sOO: // global
           _s3rPr::P64 = P64[R1 + 7];
           _s3rPs::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rPA_info;
           P64[Hp - 8] = _s3rPr::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3rPs::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rPB_info" {
     sat_s3rPB_info:
         const sat_s3rPB_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+152;
 },
 Text.ParserCombinators.ReadP.sepBy3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sOQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sOU; else goto c3sOT;
       c3sOU: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.sepBy3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sOT: // global
           I64[Hp - 40] = m2_s3rPs_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3rPB_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 39;
           _s3rPp::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3rPp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.sepBy3_info" {
     Text.ParserCombinators.ReadP.sepBy3_info:
         const Text.ParserCombinators.ReadP.sepBy3_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const S3s6G_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.456540425 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy1_closure" {
     Text.ParserCombinators.ReadP.sepBy1_closure:
         const Text.ParserCombinators.ReadP.sepBy1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.sepBy1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sPp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.sepBy3_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.sepBy1_info" {
     Text.ParserCombinators.ReadP.sepBy1_info:
         const Text.ParserCombinators.ReadP.sepBy1_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3s6G_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.462096827 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy2_closure" {
     Text.ParserCombinators.ReadP.endBy2_closure:
         const Text.ParserCombinators.ReadP.endBy2_info;
         const 0;
 },
 sat_s3rPJ_entry() //  [R1]
         { []
         }
     {offset
       c3sPQ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rPJ_info" {
     sat_s3rPJ_info:
         const sat_s3rPJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3rPK_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sPT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sPX; else goto c3sPW;
       c3sPX: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sPW: // global
           _s3rPD::P64 = P64[R1 + 7];
           _s3rPF::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3rPF::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rPJ_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3rPD::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rPK_info" {
     sat_s3rPK_info:
         const sat_s3rPK_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rPL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sPY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sQ2; else goto c3sQ1;
       c3sQ2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sQ1: // global
           _s3rPC::P64 = P64[R1 + 7];
           _s3rPD::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rPK_info;
           P64[Hp - 8] = _s3rPD::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rPC::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rPL_info" {
     sat_s3rPL_info:
         const sat_s3rPL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.endBy2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sQ3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sQ7; else goto c3sQ6;
       c3sQ7: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.endBy2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sQ6: // global
           I64[Hp - 16] = sat_s3rPL_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R4;
           R2 = Hp - 15;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.endBy2_info" {
     Text.ParserCombinators.ReadP.endBy2_info:
         const Text.ParserCombinators.ReadP.endBy2_entry;
         const 0;
         const 279172874254;
         const 12884901911;
         const S3s6G_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.471576831 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy_closure" {
     Text.ParserCombinators.ReadP.endBy_closure:
         const Text.ParserCombinators.ReadP.endBy_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.endBy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sQw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.endBy_info" {
     Text.ParserCombinators.ReadP.endBy_info:
         const Text.ParserCombinators.ReadP.endBy_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3s6G_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.476608616 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy2_closure" {
     Text.ParserCombinators.ReadP.sepBy2_closure:
         const Text.ParserCombinators.ReadP.sepBy2_info;
         const 0;
 },
 sat_s3rPQ_entry() //  [R1]
         { []
         }
     {offset
       c3sQL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sQM; else goto c3sQN;
       c3sQM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sQN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rPQ_info" {
     sat_s3rPQ_info:
         const sat_s3rPQ_entry;
         const 1;
         const 16;
 },
 Text.ParserCombinators.ReadP.sepBy2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sQQ: // global
           _s3rPO::P64 = R4;
           _s3rPN::P64 = R3;
           _s3rPM::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sQR; else goto c3sQS;
       c3sQS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sQU; else goto c3sQT;
       c3sQU: // global
           HpAlloc = 24;
           goto c3sQR;
       c3sQR: // global
           R4 = _s3rPO::P64;
           R3 = _s3rPN::P64;
           R2 = _s3rPM::P64;
           R1 = Text.ParserCombinators.ReadP.sepBy2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sQT: // global
           I64[Hp - 16] = sat_s3rPQ_info;
           P64[Hp] = _s3rPO::P64;
           I64[Sp - 16] = block_c3sQO_info;
           R4 = _s3rPO::P64;
           R3 = _s3rPN::P64;
           R2 = _s3rPM::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.sepBy3_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.sepBy2_info" {
     Text.ParserCombinators.ReadP.sepBy2_info:
         const Text.ParserCombinators.ReadP.sepBy2_entry;
         const 0;
         const 180143989389787150;
         const 12884901911;
         const S3s6G_srt+8;
 },
 _c3sQO() //  [R1]
         { []
         }
     {offset
       c3sQO: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sQO_info" {
     block_c3sQO_info:
         const _c3sQO;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.485872046 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy_closure" {
     Text.ParserCombinators.ReadP.sepBy_closure:
         const Text.ParserCombinators.ReadP.sepBy_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.sepBy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sRj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.sepBy2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.sepBy_info" {
     Text.ParserCombinators.ReadP.sepBy_info:
         const Text.ParserCombinators.ReadP.sepBy_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3s6G_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.490652936 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadP.$fMonadReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.498212436 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_info;
         const 0;
 },
 sat_s3rQ1_entry() //  [R1]
         { []
         }
     {offset
       c3sRK: // global
           _s3rQ1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sRL; else goto c3sRM;
       c3sRM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sRO; else goto c3sRN;
       c3sRO: // global
           HpAlloc = 24;
           goto c3sRL;
       c3sRL: // global
           R1 = _s3rQ1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sRN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rQ1::P64;
           _s3rPU::P64 = P64[_s3rQ1::P64 + 16];
           _s3rPV::P64 = P64[_s3rQ1::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rPV::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3rPU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rQ1_info" {
     sat_s3rQ1_info:
         const sat_s3rQ1_entry;
         const 2;
         const 18;
 },
 sat_s3rPY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sRV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sRZ; else goto c3sRY;
       c3sRZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sRY: // global
           _s3rPU::P64 = P64[R1 + 7];
           _s3rPV::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rPV::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rPU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rPY_info" {
     sat_s3rPY_info:
         const sat_s3rPY_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rQ2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sS2: // global
           _s3rPV::P64 = R2;
           _s3rQ2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sS3; else goto c3sS4;
       c3sS4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sS6; else goto c3sS5;
       c3sS6: // global
           HpAlloc = 56;
           goto c3sS3;
       c3sS3: // global
           R2 = _s3rPV::P64;
           R1 = _s3rQ2::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sS5: // global
           _s3rPT::P64 = P64[_s3rQ2::P64 + 7];
           _s3rPU::P64 = P64[_s3rQ2::P64 + 15];
           I64[Hp - 48] = sat_s3rQ1_info;
           P64[Hp - 32] = _s3rPU::P64;
           P64[Hp - 24] = _s3rPV::P64;
           I64[Hp - 16] = sat_s3rPY_info;
           P64[Hp - 8] = _s3rPU::P64;
           P64[Hp] = _s3rPV::P64;
           I64[Sp - 16] = block_c3sS0_info;
           R2 = Hp - 15;
           R1 = _s3rPT::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call some_v_s3rPT_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rQ2_info" {
     sat_s3rQ2_info:
         const sat_s3rQ2_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+8;
 },
 _c3sS0() //  [R1]
         { []
         }
     {offset
       c3sS0: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sS0_info" {
     block_c3sS0_info:
         const _c3sS0;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 },
 some_v_s3rPT_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sSa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sSe; else goto c3sSd;
       c3sSe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sSd: // global
           _s3rPR::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3rQ2_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rPR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . some_v_s3rPT_info" {
     some_v_s3rPT_info:
         const some_v_s3rPT_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3s6G_srt+8;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP2_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c3sSf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sSj; else goto c3sSi;
       c3sSj: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sSi: // global
           I64[Hp - 8] = some_v_s3rPT_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call some_v_s3rPT_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeReadP2_info" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP2_info:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_entry;
         const 0;
         const 288230380446679054;
         const 8589934607;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.520139343 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_info;
         const 0;
 },
 sat_s3rQd_entry() //  [R1]
         { []
         }
     {offset
       c3sT3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sT4; else goto c3sT5;
       c3sT4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sT5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3rQd_info" {
     sat_s3rQd_info:
         const sat_s3rQd_entry;
         const 1;
         const 16;
 },
 sat_s3rQa_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sTh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sTl; else goto c3sTk;
       c3sTl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sTk: // global
           _s3rQ6::P64 = P64[R1 + 7];
           _s3rQ7::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rQ7::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rQ6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rQa_info" {
     sat_s3rQa_info:
         const sat_s3rQa_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rQb_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sTm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sTq; else goto c3sTp;
       c3sTq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sTp: // global
           _s3rQ5::P64 = P64[R1 + 7];
           _s3rQ6::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rQa_info;
           P64[Hp - 8] = _s3rQ6::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rQ5::P64;
           call many_v_s3rQ5_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rQb_info" {
     sat_s3rQb_info:
         const sat_s3rQb_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+8;
 },
 many_v_s3rQ5_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sTt: // global
           _s3rQ6::P64 = R2;
           _s3rQ5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sTu; else goto c3sTv;
       c3sTv: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sTx; else goto c3sTw;
       c3sTx: // global
           HpAlloc = 48;
           goto c3sTu;
       c3sTu: // global
           R2 = _s3rQ6::P64;
           R1 = _s3rQ5::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sTw: // global
           _s3rQ3::P64 = P64[_s3rQ5::P64 + 7];
           I64[Hp - 40] = sat_s3rQd_info;
           P64[Hp - 24] = _s3rQ6::P64;
           I64[Hp - 16] = sat_s3rQb_info;
           P64[Hp - 8] = _s3rQ5::P64;
           P64[Hp] = _s3rQ6::P64;
           I64[Sp - 16] = block_c3sTr_info;
           R2 = Hp - 15;
           R1 = _s3rQ3::P64;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . many_v_s3rQ5_info" {
     many_v_s3rQ5_info:
         const many_v_s3rQ5_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3s6G_srt+8;
 },
 _c3sTr() //  [R1]
         { []
         }
     {offset
       c3sTr: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sTr_info" {
     block_c3sTr_info:
         const _c3sTr;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP1_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c3sTB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sTF; else goto c3sTE;
       c3sTF: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sTE: // global
           I64[Hp - 8] = many_v_s3rQ5_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call many_v_s3rQ5_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$fAlternativeReadP1_info" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP1_info:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_entry;
         const 0;
         const 576460756598390798;
         const 8589934607;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.534938801 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure+2;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.53701609 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadPlusReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadPlusReadP_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.542582836 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr3_closure" {
     Text.ParserCombinators.ReadP.chainr3_closure:
         const Text.ParserCombinators.ReadP.chainr3_info;
         const 0;
 },
 sat_s3rQn_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sUC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sUG; else goto c3sUF;
       c3sUG: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sUF: // global
           _s3rQi::P64 = P64[R1 + 7];
           _s3rQj::P64 = P64[R1 + 15];
           _s3rQk::P64 = P64[R1 + 23];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3rQk::P64;
           P64[Hp - 8] = _s3rQj::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3rQi::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rQn_info" {
     sat_s3rQn_info:
         const sat_s3rQn_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3rQo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sUH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sUL; else goto c3sUK;
       c3sUL: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sUK: // global
           _s3rQh::P64 = P64[R1 + 7];
           _s3rQi::P64 = P64[R1 + 15];
           _s3rQj::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3rQn_info;
           P64[Hp - 16] = _s3rQi::P64;
           P64[Hp - 8] = _s3rQj::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3rQh::P64;
           call scan_s3rQh_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rQo_info" {
     sat_s3rQo_info:
         const sat_s3rQo_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3s6G_srt+8;
 },
 sat_s3rQr_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sUO: // global
           _s3rQj::P64 = R2;
           _s3rQr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sUP; else goto c3sUQ;
       c3sUQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3sUS; else goto c3sUR;
       c3sUS: // global
           HpAlloc = 64;
           goto c3sUP;
       c3sUP: // global
           R2 = _s3rQj::P64;
           R1 = _s3rQr::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sUR: // global
           _s3rQf::P64 = P64[_s3rQr::P64 + 7];
           _s3rQh::P64 = P64[_s3rQr::P64 + 15];
           _s3rQi::P64 = P64[_s3rQr::P64 + 23];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3rQi::P64;
           P64[Hp - 32] = _s3rQj::P64;
           I64[Hp - 24] = sat_s3rQo_info;
           P64[Hp - 16] = _s3rQh::P64;
           P64[Hp - 8] = _s3rQi::P64;
           P64[Hp] = _s3rQj::P64;
           I64[Sp - 16] = block_c3sUM_info;
           R2 = Hp - 23;
           R1 = _s3rQf::P64;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rQr_info" {
     sat_s3rQr_info:
         const sat_s3rQr_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3s6G_srt+8;
 },
 _c3sUM() //  [R1]
         { []
         }
     {offset
       c3sUM: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sUM_info" {
     block_c3sUM_info:
         const _c3sUM;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 },
 scan_s3rQh_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sUW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sV0; else goto c3sUZ;
       c3sV0: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sUZ: // global
           _s3rQe::P64 = P64[R1 + 7];
           _s3rQf::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3rQr_info;
           P64[Hp - 16] = _s3rQf::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3rQe::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . scan_s3rQh_info" {
     scan_s3rQh_info:
         const scan_s3rQh_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+8;
 },
 Text.ParserCombinators.ReadP.chainr3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sV1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sV5; else goto c3sV4;
       c3sV5: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.chainr3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sV4: // global
           I64[Hp - 16] = scan_s3rQh_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = R4;
           R1 = Hp - 15;
           call scan_s3rQh_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainr3_info" {
     Text.ParserCombinators.ReadP.chainr3_info:
         const Text.ParserCombinators.ReadP.chainr3_entry;
         const 0;
         const 1152921508901814286;
         const 12884901911;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.556427261 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr1_closure" {
     Text.ParserCombinators.ReadP.chainr1_closure:
         const Text.ParserCombinators.ReadP.chainr1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sVC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainr3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainr1_info" {
     Text.ParserCombinators.ReadP.chainr1_info:
         const Text.ParserCombinators.ReadP.chainr1_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3s6G_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.560995504 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr2_closure" {
     Text.ParserCombinators.ReadP.chainr2_closure:
         const Text.ParserCombinators.ReadP.chainr2_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3sVQ: // global
           _s3rQv::P64 = R5;
           _s3rQu::P64 = R4;
           _s3rQt::P64 = R3;
           _s3rQs::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sVR; else goto c3sVS;
       c3sVS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sVU; else goto c3sVT;
       c3sVU: // global
           HpAlloc = 32;
           goto c3sVR;
       c3sVR: // global
           R5 = _s3rQv::P64;
           R4 = _s3rQu::P64;
           R3 = _s3rQt::P64;
           R2 = _s3rQs::P64;
           R1 = Text.ParserCombinators.ReadP.chainr2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sVT: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rQv::P64;
           P64[Hp] = _s3rQu::P64;
           I64[Sp - 16] = block_c3sVO_info;
           R4 = _s3rQv::P64;
           R3 = _s3rQt::P64;
           R2 = _s3rQs::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.chainr3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainr2_info" {
     Text.ParserCombinators.ReadP.chainr2_info:
         const Text.ParserCombinators.ReadP.chainr2_entry;
         const 0;
         const 3458764518115508238;
         const 17179869208;
         const S3s6G_srt+8;
 },
 _c3sVO() //  [R1]
         { []
         }
     {offset
       c3sVO: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sVO_info" {
     block_c3sVO_info:
         const _c3sVO;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.567261095 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr_closure" {
     Text.ParserCombinators.ReadP.chainr_closure:
         const Text.ParserCombinators.ReadP.chainr_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3sWd: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainr2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainr_info" {
     Text.ParserCombinators.ReadP.chainr_info:
         const Text.ParserCombinators.ReadP.chainr_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3s6G_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.575139806 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl3_closure" {
     Text.ParserCombinators.ReadP.chainl3_closure:
         const Text.ParserCombinators.ReadP.chainl3_info;
         const 0;
 },
 sat_s3rQH_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sWF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sWJ; else goto c3sWI;
       c3sWJ: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sWI: // global
           _s3rQB::P64 = P64[R1 + 7];
           _s3rQC::P64 = P64[R1 + 15];
           _s3rQD::P64 = P64[R1 + 23];
           _s3rQE::P64 = P64[R1 + 31];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3rQE::P64;
           P64[Hp - 8] = _s3rQC::P64;
           P64[Hp] = R2;
           R3 = _s3rQD::P64;
           R2 = Hp - 32;
           R1 = _s3rQB::P64;
           call rest_s3rQB_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rQH_info" {
     sat_s3rQH_info:
         const sat_s3rQH_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3s6G_srt+8;
 },
 sat_s3rQI_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sWK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sWO; else goto c3sWN;
       c3sWO: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sWN: // global
           _s3rQy::P64 = P64[R1 + 7];
           _s3rQB::P64 = P64[R1 + 15];
           _s3rQC::P64 = P64[R1 + 23];
           _s3rQD::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3rQH_info;
           P64[Hp - 24] = _s3rQB::P64;
           P64[Hp - 16] = _s3rQC::P64;
           P64[Hp - 8] = _s3rQD::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3rQy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rQI_info" {
     sat_s3rQI_info:
         const sat_s3rQI_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3s6G_srt+8;
 },
 rest_s3rQB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3sWR: // global
           _s3rQD::P64 = R3;
           _s3rQC::P64 = R2;
           _s3rQB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sWS; else goto c3sWT;
       c3sWT: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3sWV; else goto c3sWU;
       c3sWV: // global
           HpAlloc = 72;
           goto c3sWS;
       c3sWS: // global
           R3 = _s3rQD::P64;
           R2 = _s3rQC::P64;
           R1 = _s3rQB::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sWU: // global
           _s3rQy::P64 = P64[_s3rQB::P64 + 6];
           _s3rQz::P64 = P64[_s3rQB::P64 + 14];
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s3rQD::P64;
           P64[Hp - 40] = _s3rQC::P64;
           I64[Hp - 32] = sat_s3rQI_info;
           P64[Hp - 24] = _s3rQy::P64;
           P64[Hp - 16] = _s3rQB::P64;
           P64[Hp - 8] = _s3rQC::P64;
           P64[Hp] = _s3rQD::P64;
           I64[Sp - 16] = block_c3sWP_info;
           R2 = Hp - 31;
           R1 = _s3rQz::P64;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . rest_s3rQB_info" {
     rest_s3rQB_info:
         const rest_s3rQB_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3s6G_srt+8;
 },
 _c3sWP() //  [R1]
         { []
         }
     {offset
       c3sWP: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sWP_info" {
     block_c3sWP_info:
         const _c3sWP;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 },
 sat_s3rQM_entry() //  [R1, R2]
         { []
         }
     {offset
       c3sX4: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 15];
           call rest_s3rQB_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rQM_info" {
     sat_s3rQM_info:
         const sat_s3rQM_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+8;
 },
 Text.ParserCombinators.ReadP.chainl3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sX7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sXb; else goto c3sXa;
       c3sXb: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.chainl3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sXa: // global
           I64[Hp - 40] = rest_s3rQB_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3rQM_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 38;
           _s3rQy::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3rQy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainl3_info" {
     Text.ParserCombinators.ReadP.chainl3_info:
         const Text.ParserCombinators.ReadP.chainl3_entry;
         const 0;
         const 4611686022722355214;
         const 12884901911;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.596585296 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl1_closure" {
     Text.ParserCombinators.ReadP.chainl1_closure:
         const Text.ParserCombinators.ReadP.chainl1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3sXJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainl3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainl1_info" {
     Text.ParserCombinators.ReadP.chainl1_info:
         const Text.ParserCombinators.ReadP.chainl1_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3s6G_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.603399854 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl2_closure" {
     Text.ParserCombinators.ReadP.chainl2_closure:
         const Text.ParserCombinators.ReadP.chainl2_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3sXX: // global
           _s3rQQ::P64 = R5;
           _s3rQP::P64 = R4;
           _s3rQO::P64 = R3;
           _s3rQN::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sXY; else goto c3sXZ;
       c3sXZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sY1; else goto c3sY0;
       c3sY1: // global
           HpAlloc = 32;
           goto c3sXY;
       c3sXY: // global
           R5 = _s3rQQ::P64;
           R4 = _s3rQP::P64;
           R3 = _s3rQO::P64;
           R2 = _s3rQN::P64;
           R1 = Text.ParserCombinators.ReadP.chainl2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sY0: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rQQ::P64;
           P64[Hp] = _s3rQP::P64;
           I64[Sp - 16] = block_c3sXV_info;
           R4 = _s3rQQ::P64;
           R3 = _s3rQO::P64;
           R2 = _s3rQN::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.chainl3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainl2_info" {
     Text.ParserCombinators.ReadP.chainl2_info:
         const Text.ParserCombinators.ReadP.chainl2_entry;
         const 0;
         const 13835058059577131022;
         const 17179869208;
         const S3s6G_srt+8;
 },
 _c3sXV() //  [R1]
         { []
         }
     {offset
       c3sXV: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sXV_info" {
     block_c3sXV_info:
         const _c3sXV;
         const 1;
         const 4294967326;
         const S3s6G_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.612380654 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl_closure" {
     Text.ParserCombinators.ReadP.chainl_closure:
         const Text.ParserCombinators.ReadP.chainl_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3sYk: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainl2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.chainl_info" {
     Text.ParserCombinators.ReadP.chainl_info:
         const Text.ParserCombinators.ReadP.chainl_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3s6G_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.619431963 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++2_closure" {
     Text.ParserCombinators.ReadP.<++2_closure:
         const Text.ParserCombinators.ReadP.<++2_info;
 },
 lvl4_s3rQW_entry() //  [R1]
         { []
         }
     {offset
       c3sYD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sYE; else goto c3sYF;
       c3sYE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sYF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = I64[R1 + 24] - 1;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.<++2_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rQW_info" {
     lvl4_s3rQW_info:
         const lvl4_s3rQW_entry;
         const 4294967297;
         const 19;
 },
 sat_s3rQZ_entry() //  [R1]
         { []
         }
     {offset
       c3sYL: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rQZ_info" {
     sat_s3rQZ_info:
         const sat_s3rQZ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.<++2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3sYR: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3sYV; else goto c3sYU;
       c3sYV: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.<++2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sYU: // global
           if (R2 == 0) goto c3sYQ; else goto c3sYP;
       c3sYQ: // global
           Hp = Hp - 64;
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3sYP: // global
           I64[Hp - 56] = lvl4_s3rQW_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3rQZ_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.<++2_info" {
     Text.ParserCombinators.ReadP.<++2_info:
         const Text.ParserCombinators.ReadP.<++2_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.638205438 UTC

[section ""data" . Text.ParserCombinators.ReadP.$w<++_closure" {
     Text.ParserCombinators.ReadP.$w<++_closure:
         const Text.ParserCombinators.ReadP.$w<++_info;
         const 0;
 },
 lvl4_s3rR3_entry() //  [R1]
         { []
         }
     {offset
       c3sZr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sZs; else goto c3sZt;
       c3sZs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sZt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rR3_info" {
     lvl4_s3rR3_info:
         const lvl4_s3rR3_entry;
         const 1;
         const 16;
 },
 probe_s3rR4_slow() //  [R1]
         { []
         }
     {offset
       c3sZw: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call probe_s3rR4_entry(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rRl_entry() //  [R1]
         { []
         }
     {offset
       c3sZN: // global
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rRl_info" {
     sat_s3rRl_info:
         const sat_s3rRl_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+24;
 },
 probe_s3rR4_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c3sZX: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3sZY; else goto u3t0F;
       c3sZY: // global
           R1 = R1;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       u3t0F: // global
           P64[Sp - 40] = R1;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call _c3sZx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . probe_s3rR4_info" {
     probe_s3rR4_info:
         const probe_s3rR4_entry;
         const 1;
         const 4294967305;
         const 17179869184;
         const S3s6G_srt+24;
         const 260;
         const probe_s3rR4_slow;
 },
 _c3sZx() //  []
         { []
         }
     {offset
       c3sZx: // global
           _s3rR1::P64 = P64[P64[Sp] + 4];
           I64[Sp - 8] = block_c3sZA_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3rR1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3t0K; else goto c3sZB;
       u3t0K: // global
           call _c3sZA(R1) args: 0, res: 0, upd: 0;
       c3sZB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sZA() //  [R1]
         { []
         }
     {offset
       c3sZA: // global
           _c3sZW::P64 = R1 & 7;
           if (_c3sZW::P64 < 4) goto u3t0C; else goto u3t0E;
       u3t0C: // global
           if (_c3sZW::P64 < 3) goto u3t0D; else goto u3t0G;
       u3t0D: // global
           _s3rR6::P64 = P64[Sp + 24];
           if (_c3sZW::P64 < 2) goto c3sZR; else goto c3sZS;
       c3sZR: // global
           I64[Sp] = block_c3t01_info;
           _s3rRa::P64 = P64[R1 + 7];
           R1 = _s3rR6::P64;
           P64[Sp + 24] = _s3rRa::P64;
           if (R1 & 7 != 0) goto u3t0L; else goto c3t03;
       u3t0L: // global
           call _c3t01(R1) args: 0, res: 0, upd: 0;
       c3t03: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3sZS: // global
           I64[Sp] = block_c3t0n_info;
           R2 = _s3rR6::P64;
           R1 = P64[R1 + 6];
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3t0G: // global
           Sp = Sp + 16;
           call _c3sZT() args: 0, res: 0, upd: 0;
       u3t0E: // global
           _s3rR8::P64 = P64[Sp + 40];
           if (_c3sZW::P64 < 5) goto c3sZU; else goto c3sZV;
       c3sZU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3t0x; else goto c3t0w;
       c3t0x: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3t0w: // global
           I64[Hp - 16] = sat_s3rRl_info;
           P64[Hp - 8] = _s3rR8::P64;
           P64[Hp] = R1;
           R3 = Hp - 15;
           R2 = I64[Sp + 32];
           Sp = Sp + 48;
           call Text.ParserCombinators.ReadP.<++2_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
       c3sZV: // global
           R3 = _s3rR8::P64;
           R2 = R1;
           Sp = Sp + 48;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3sZA_info" {
     block_c3sZA_info:
         const _c3sZA;
         const 517;
         const 4294967326;
         const S3s6G_srt+24;
 },
 _c3t01() //  [R1]
         { []
         }
     {offset
       c3t01: // global
           if (R1 & 7 == 1) goto u3t0H; else goto c3t0h;
       u3t0H: // global
           Sp = Sp + 16;
           call _c3sZT() args: 0, res: 0, upd: 0;
       c3t0h: // global
           I64[Sp] = block_c3t0f_info;
           R2 = P64[R1 + 6];
           _s3rRd::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = I64[Sp + 32] + 1;
           P64[Sp + 32] = _s3rRd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3t01_info" {
     block_c3t01_info:
         const _c3t01;
         const 517;
         const 4294967326;
         const S3s6G_srt+24;
 },
 _c3t0f() //  [R1]
         { []
         }
     {offset
       c3t0f: // global
           P64[Sp + 16] = R1;
           _s3rR7::I64 = I64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 32];
           I64[Sp + 32] = _s3rR7::I64;
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c3sZx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3t0f_info" {
     block_c3t0f_info:
         const _c3t0f;
         const 389;
         const 4294967326;
         const S3s6G_srt+24;
 },
 _c3t0n() //  [R1]
         { []
         }
     {offset
       c3t0n: // global
           P64[Sp + 16] = R1;
           P64[Sp + 24] = P64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c3sZx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3t0n_info" {
     block_c3t0n_info:
         const _c3t0n;
         const 645;
         const 4294967326;
         const S3s6G_srt+24;
 },
 _c3sZT() //  []
         { []
         }
     {offset
       c3sZT: // global
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rRo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3t0W: // global
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = R2;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           call probe_s3rR4_entry(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rRo_info" {
     sat_s3rRo_info:
         const sat_s3rRo_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3s6G_srt+24;
 },
 Text.ParserCombinators.ReadP.$w<++_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3t0Z: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3t13; else goto c3t12;
       c3t13: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$w<++_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t12: // global
           I64[Hp - 64] = lvl4_s3rR3_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = probe_s3rR4_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3rRo_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 36;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$w<++_info" {
     Text.ParserCombinators.ReadP.$w<++_info:
         const Text.ParserCombinators.ReadP.$w<++_entry;
         const 0;
         const 4611686022722355214;
         const 12884901911;
         const S3s6G_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.668363083 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++1_closure" {
     Text.ParserCombinators.ReadP.<++1_closure:
         const Text.ParserCombinators.ReadP.<++1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.<++1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3t2a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3t2b; else goto c3t2c;
       c3t2b: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.<++1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t2c: // global
           I64[Sp - 8] = block_c3t27_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.<++1_info" {
     Text.ParserCombinators.ReadP.<++1_info:
         const Text.ParserCombinators.ReadP.<++1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S3s6G_srt+264;
 },
 _c3t27() //  [R1]
         { []
         }
     {offset
       c3t27: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3t2f; else goto c3t2e;
       c3t2f: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3t2e: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3t27_info" {
     block_c3t27_info:
         const _c3t27;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.67695635 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++_closure" {
     Text.ParserCombinators.ReadP.<++_closure:
         const Text.ParserCombinators.ReadP.<++_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.<++_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3t2v: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.<++1_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.<++_info" {
     Text.ParserCombinators.ReadP.<++_info:
         const Text.ParserCombinators.ReadP.<++_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3s6G_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.688790662 UTC

[section ""data" . Text.ParserCombinators.ReadP.manyTill1_closure" {
     Text.ParserCombinators.ReadP.manyTill1_closure:
         const Text.ParserCombinators.ReadP.manyTill1_info;
         const 0;
 },
 lvl4_s3rRz_entry() //  [R1]
         { []
         }
     {offset
       c3t2P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3t2Q; else goto c3t2R;
       c3t2Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3t2R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rRz_info" {
     lvl4_s3rRz_info:
         const lvl4_s3rRz_entry;
         const 1;
         const 16;
 },
 sat_s3rRB_entry() //  [R1]
         { []
         }
     {offset
       c3t2X: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rRB_info" {
     sat_s3rRB_info:
         const sat_s3rRB_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 scan_s3rRx_entry() //  [R1, R2]
         { []
         }
     {offset
       c3t30: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3t34; else goto c3t33;
       c3t34: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t33: // global
           _s3rRv::P64 = P64[R1 + 7];
           I64[Hp - 32] = lvl4_s3rRz_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rRB_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 7;
           R1 = _s3rRv::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . scan_s3rRx_info" {
     scan_s3rRx_info:
         const scan_s3rRx_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3rRI_entry() //  [R1, R2]
         { []
         }
     {offset
       c3t3m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3t3q; else goto c3t3p;
       c3t3q: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t3p: // global
           _s3rRE::P64 = P64[R1 + 7];
           _s3rRF::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rRF::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rRE::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rRI_info" {
     sat_s3rRI_info:
         const sat_s3rRI_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rRJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3t3r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3t3v; else goto c3t3u;
       c3t3v: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t3u: // global
           _s3rRD::P64 = P64[R1 + 7];
           _s3rRE::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rRI_info;
           P64[Hp - 8] = _s3rRE::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rRD::P64;
           call scan2_s3rRD_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rRJ_info" {
     sat_s3rRJ_info:
         const sat_s3rRJ_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+264;
 },
 scan1_s3rRC_entry() //  [R1, R2]
         { []
         }
     {offset
       c3t3w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3t3A; else goto c3t3z;
       c3t3A: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t3z: // global
           _s3rRu::P64 = P64[R1 + 7];
           _s3rRD::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rRJ_info;
           P64[Hp - 8] = _s3rRD::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rRu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . scan1_s3rRC_info" {
     scan1_s3rRC_info:
         const scan1_s3rRC_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+264;
 },
 scan2_s3rRD_entry() //  [R1, R2]
         { []
         }
     {offset
       c3t3I: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3t3J; else goto c3t3K;
       c3t3J: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t3K: // global
           I64[Sp - 8] = block_c3t3F_info;
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . scan2_s3rRD_info" {
     scan2_s3rRD_info:
         const scan2_s3rRD_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3s6G_srt+264;
 },
 _c3t3F() //  [R1]
         { []
         }
     {offset
       c3t3F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3t3N; else goto c3t3M;
       c3t3N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3t3M: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3t3F_info" {
     block_c3t3F_info:
         const _c3t3F;
         const 0;
         const 30;
 },
 Text.ParserCombinators.ReadP.manyTill1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3t3O: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3t3S; else goto c3t3R;
       c3t3S: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.manyTill1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t3R: // global
           I64[Hp - 56] = scan_s3rRx_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = scan1_s3rRC_info;
           P64[Hp - 32] = R2;
           _c3t36::P64 = Hp - 15;
           P64[Hp - 24] = _c3t36::P64;
           I64[Hp - 16] = scan2_s3rRD_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 39;
           R2 = R4;
           R1 = _c3t36::P64;
           call scan2_s3rRD_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.manyTill1_info" {
     Text.ParserCombinators.ReadP.manyTill1_info:
         const Text.ParserCombinators.ReadP.manyTill1_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S3s6G_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.708212532 UTC

[section ""data" . Text.ParserCombinators.ReadP.manyTill_closure" {
     Text.ParserCombinators.ReadP.manyTill_closure:
         const Text.ParserCombinators.ReadP.manyTill_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.manyTill_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3t4J: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.manyTill1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.manyTill_info" {
     Text.ParserCombinators.ReadP.manyTill_info:
         const Text.ParserCombinators.ReadP.manyTill_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3s6G_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.713385963 UTC

[section ""data" . Text.ParserCombinators.ReadP.eof1_closure" {
     Text.ParserCombinators.ReadP.eof1_closure:
         const Text.ParserCombinators.ReadP.eof1_info;
 },
 lvl4_s3rRO_entry() //  [R1]
         { []
         }
     {offset
       c3t4Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3t4Z; else goto c3t50;
       c3t4Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3t50: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rRO_info" {
     lvl4_s3rRO_info:
         const lvl4_s3rRO_entry;
         const 1;
         const 16;
 },
 sat_s3rRT_entry() //  [R1, R2]
         { []
         }
     {offset
       c3t5d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3t5e; else goto c3t5f;
       c3t5e: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t5f: // global
           I64[Sp - 16] = block_c3t56_info;
           _s3rRO::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3rRO::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3t5m; else goto c3t57;
       u3t5m: // global
           call _c3t56(R1) args: 0, res: 0, upd: 0;
       c3t57: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rRT_info" {
     sat_s3rRT_info:
         const sat_s3rRT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3t56() //  [R1]
         { []
         }
     {offset
       c3t56: // global
           if (R1 & 7 == 1) goto c3t5a; else goto c3t5b;
       c3t5a: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3t5b: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3t56_info" {
     block_c3t56_info:
         const _c3t56;
         const 1;
         const 30;
 },
 Text.ParserCombinators.ReadP.eof1_entry() //  [R2]
         { []
         }
     {offset
       c3t5o: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3t5s; else goto c3t5r;
       c3t5s: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.eof1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t5r: // global
           I64[Hp - 48] = lvl4_s3rRO_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3rRT_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.eof1_info" {
     Text.ParserCombinators.ReadP.eof1_info:
         const Text.ParserCombinators.ReadP.eof1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.722738487 UTC

[section ""data" . Text.ParserCombinators.ReadP.eof_closure" {
     Text.ParserCombinators.ReadP.eof_closure:
         const Text.ParserCombinators.ReadP.eof_info;
 },
 Text.ParserCombinators.ReadP.eof_entry() //  [R2]
         { []
         }
     {offset
       c3t61: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.eof1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.eof_info" {
     Text.ParserCombinators.ReadP.eof_info:
         const Text.ParserCombinators.ReadP.eof_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.727228686 UTC

[section ""data" . Text.ParserCombinators.ReadP.satisfy1_closure" {
     Text.ParserCombinators.ReadP.satisfy1_closure:
         const Text.ParserCombinators.ReadP.satisfy1_info;
 },
 sat_s3rRY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3t6n: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3t6o; else goto c3t6p;
       c3t6o: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t6p: // global
           I64[Sp - 24] = block_c3t6h_info;
           _s3rRW::P64 = R2;
           R2 = R2;
           _s3rRV::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s3rRV::P64;
           P64[Sp - 8] = _s3rRW::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rRY_info" {
     sat_s3rRY_info:
         const sat_s3rRY_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3t6h() //  [R1]
         { []
         }
     {offset
       c3t6h: // global
           if (R1 & 7 == 1) goto c3t6k; else goto c3t6l;
       c3t6k: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3t6l: // global
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3t6h_info" {
     block_c3t6h_info:
         const _c3t6h;
         const 2;
         const 30;
 },
 Text.ParserCombinators.ReadP.satisfy1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3t6x: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3t6B; else goto c3t6A;
       c3t6B: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.satisfy1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t6A: // global
           I64[Hp - 32] = sat_s3rRY_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.satisfy1_info" {
     Text.ParserCombinators.ReadP.satisfy1_info:
         const Text.ParserCombinators.ReadP.satisfy1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.734760139 UTC

[section ""data" . Text.ParserCombinators.ReadP.satisfy_closure" {
     Text.ParserCombinators.ReadP.satisfy_closure:
         const Text.ParserCombinators.ReadP.satisfy_info;
 },
 Text.ParserCombinators.ReadP.satisfy_entry() //  [R2, R3]
         { []
         }
     {offset
       c3t6Z: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.satisfy1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.satisfy_info" {
     Text.ParserCombinators.ReadP.satisfy_info:
         const Text.ParserCombinators.ReadP.satisfy_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.74053583 UTC

[section ""data" . Text.ParserCombinators.ReadP.char1_closure" {
     Text.ParserCombinators.ReadP.char1_closure:
         const Text.ParserCombinators.ReadP.char1_info;
 },
 sat_s3rS7_entry() //  [R1, R2]
         { []
         }
     {offset
       c3t7i: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3t7m; else goto c3t7n;
       c3t7m: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t7n: // global
           I64[Sp - 24] = block_c3t7f_info;
           _s3rS0::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s3rS0::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3t7A; else goto c3t7g;
       u3t7A: // global
           call _c3t7f(R1) args: 0, res: 0, upd: 0;
       c3t7g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rS7_info" {
     sat_s3rS7_info:
         const sat_s3rS7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3t7f() //  [R1]
         { []
         }
     {offset
       c3t7f: // global
           I64[Sp] = block_c3t7l_info;
           _s3rS3::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3rS3::I64;
           if (R1 & 7 != 0) goto u3t7z; else goto c3t7p;
       u3t7z: // global
           call _c3t7l(R1) args: 0, res: 0, upd: 0;
       c3t7p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3t7f_info" {
     block_c3t7f_info:
         const _c3t7f;
         const 2;
         const 30;
 },
 _c3t7l() //  [R1]
         { []
         }
     {offset
       c3t7l: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c3t7y; else goto c3t7x;
       c3t7y: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3t7x: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3t7l_info" {
     block_c3t7l_info:
         const _c3t7l;
         const 130;
         const 30;
 },
 Text.ParserCombinators.ReadP.char1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3t7C: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3t7G; else goto c3t7F;
       c3t7G: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.char1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t7F: // global
           I64[Hp - 32] = sat_s3rS7_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.char1_info" {
     Text.ParserCombinators.ReadP.char1_info:
         const Text.ParserCombinators.ReadP.char1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.749905038 UTC

[section ""data" . Text.ParserCombinators.ReadP.char_closure" {
     Text.ParserCombinators.ReadP.char_closure:
         const Text.ParserCombinators.ReadP.char_info;
 },
 Text.ParserCombinators.ReadP.char_entry() //  [R2, R3]
         { []
         }
     {offset
       c3t89: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.char1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.char_info" {
     Text.ParserCombinators.ReadP.char_info:
         const Text.ParserCombinators.ReadP.char_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.756740197 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wstring_closure" {
     Text.ParserCombinators.ReadP.$wstring_closure:
         const Text.ParserCombinators.ReadP.$wstring_info;
 },
 sat_s3rSr_entry() //  [R1]
         { []
         }
     {offset
       c3t8V: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rSr_info" {
     sat_s3rSr_info:
         const sat_s3rSr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 scan_s3rSa_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c3t92: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3t93; else goto c3t94;
       c3t93: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t94: // global
           I64[Sp - 40] = block_c3t8p_info;
           _s3rSa::P64 = R1;
           _s3rS8::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3rS8::P64;
           P64[Sp - 24] = _s3rSa::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3t9q; else goto c3t8q;
       u3t9q: // global
           call _c3t8p(R1) args: 0, res: 0, upd: 0;
       c3t8q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . scan_s3rSa_info" {
     scan_s3rSa_info:
         const scan_s3rSa_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c3t8p() //  [R1]
         { []
         }
     {offset
       c3t8p: // global
           if (R1 & 7 == 1) goto c3t8Z; else goto c3t90;
       c3t8Z: // global
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3t90: // global
           I64[Sp] = block_c3t8v_info;
           _s3rSf::P64 = P64[R1 + 6];
           _s3rSg::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 8] = _s3rSg::P64;
           P64[Sp + 24] = _s3rSf::P64;
           if (R1 & 7 != 0) goto u3t9n; else goto c3t8w;
       u3t9n: // global
           call _c3t8v(R1) args: 0, res: 0, upd: 0;
       c3t8w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3t8p_info" {
     block_c3t8p_info:
         const _c3t8p;
         const 4;
         const 30;
 },
 _c3t8v() //  [R1]
         { []
         }
     {offset
       c3t8v: // global
           if (R1 & 7 == 1) goto c3t9b; else goto c3t9d;
       c3t9b: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3t9d: // global
           I64[Sp - 8] = block_c3t8B_info;
           _s3rSi::P64 = P64[R1 + 6];
           _s3rSj::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _s3rSj::P64;
           P64[Sp + 24] = _s3rSi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3t9o; else goto c3t8C;
       u3t9o: // global
           call _c3t8B(R1) args: 0, res: 0, upd: 0;
       c3t8C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3t8v_info" {
     block_c3t8v_info:
         const _c3t8v;
         const 4;
         const 30;
 },
 _c3t8B() //  [R1]
         { []
         }
     {offset
       c3t8B: // global
           I64[Sp] = block_c3t8G_info;
           _s3rSl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3rSl::I64;
           if (R1 & 7 != 0) goto u3t9p; else goto c3t8H;
       u3t9p: // global
           call _c3t8G(R1) args: 0, res: 0, upd: 0;
       c3t8H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3t8B_info" {
     block_c3t8B_info:
         const _c3t8B;
         const 5;
         const 30;
 },
 _c3t8G() //  [R1]
         { []
         }
     {offset
       c3t8G: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3t9h; else goto c3t9g;
       c3t9h: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3t9g: // global
           if (I64[Sp + 32] == I64[R1 + 7]) goto c3t9l; else goto c3t9j;
       c3t9l: // global
           I64[Hp - 72] = stg_ap_4_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 40];
           I64[Hp - 24] = sat_s3rSr_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3t9j: // global
           Hp = Hp - 80;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3t8G_info" {
     block_c3t8G_info:
         const _c3t8G;
         const 517;
         const 30;
 },
 sat_s3rSt_entry() //  [R1, R2]
         { []
         }
     {offset
       c3t9w: // global
           R4 = P64[R1 + 15];
           R3 = R2;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 23];
           call scan_s3rSa_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rSt_info" {
     sat_s3rSt_info:
         const sat_s3rSt_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$wstring_entry() //  [R2, R3]
         { []
         }
     {offset
       c3t9z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3t9D; else goto c3t9C;
       c3t9D: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wstring_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t9C: // global
           I64[Hp - 40] = scan_s3rSa_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3rSt_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 37;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$wstring_info" {
     Text.ParserCombinators.ReadP.$wstring_info:
         const Text.ParserCombinators.ReadP.$wstring_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.774201533 UTC

[section ""data" . Text.ParserCombinators.ReadP.string1_closure" {
     Text.ParserCombinators.ReadP.string1_closure:
         const Text.ParserCombinators.ReadP.string1_info;
 },
 Text.ParserCombinators.ReadP.string1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3taG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3taH; else goto c3taI;
       c3taH: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.string1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3taI: // global
           I64[Sp - 8] = block_c3taD_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.string1_info" {
     Text.ParserCombinators.ReadP.string1_info:
         const Text.ParserCombinators.ReadP.string1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3taD() //  [R1]
         { []
         }
     {offset
       c3taD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3taL; else goto c3taK;
       c3taL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3taK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3taD_info" {
     block_c3taD_info:
         const _c3taD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.780938858 UTC

[section ""data" . Text.ParserCombinators.ReadP.string_closure" {
     Text.ParserCombinators.ReadP.string_closure:
         const Text.ParserCombinators.ReadP.string_info;
 },
 Text.ParserCombinators.ReadP.string_entry() //  [R2, R3]
         { []
         }
     {offset
       c3tb1: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.string1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.string_info" {
     Text.ParserCombinators.ReadP.string_info:
         const Text.ParserCombinators.ReadP.string_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.788412044 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wmunch_closure" {
     Text.ParserCombinators.ReadP.$wmunch_closure:
         const Text.ParserCombinators.ReadP.$wmunch_info;
 },
 sat_s3rSK_entry() //  [R1, R2]
         { []
         }
     {offset
       c3tbC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tbG; else goto c3tbF;
       c3tbG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tbF: // global
           _s3rSC::P64 = P64[R1 + 7];
           _s3rSE::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rSE::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rSC::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rSK_info" {
     sat_s3rSK_info:
         const sat_s3rSK_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 lvl4_s3rSH_entry() //  [R1]
         { []
         }
     {offset
       c3tbH: // global
           _s3rSH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3tbI; else goto c3tbJ;
       c3tbJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tbL; else goto c3tbK;
       c3tbL: // global
           HpAlloc = 24;
           goto c3tbI;
       c3tbI: // global
           R1 = _s3rSH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tbK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rSH::P64;
           _s3rSA::P64 = P64[_s3rSH::P64 + 16];
           _s3rSC::P64 = P64[_s3rSH::P64 + 24];
           _s3rSE::P64 = P64[_s3rSH::P64 + 32];
           _s3rSF::P64 = P64[_s3rSH::P64 + 40];
           I64[Hp - 16] = sat_s3rSK_info;
           P64[Hp - 8] = _s3rSC::P64;
           P64[Hp] = _s3rSE::P64;
           R3 = Hp - 15;
           R2 = _s3rSF::P64;
           R1 = _s3rSA::P64;
           Sp = Sp - 16;
           call scan_s3rSA_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rSH_info" {
     lvl4_s3rSH_info:
         const lvl4_s3rSH_entry;
         const 4;
         const 15;
 },
 sat_s3rSM_entry() //  [R1]
         { []
         }
     {offset
       c3tbR: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rSM_info" {
     sat_s3rSM_info:
         const sat_s3rSM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 scan_s3rSA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3tbY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3tbZ; else goto c3tc0;
       c3tbZ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tc0: // global
           I64[Sp - 32] = block_c3tbh_info;
           _s3rSA::P64 = R1;
           _s3rSy::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 24] = _s3rSy::P64;
           P64[Sp - 16] = _s3rSA::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3tci; else goto c3tbi;
       u3tci: // global
           call _c3tbh(R1) args: 0, res: 0, upd: 0;
       c3tbi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . scan_s3rSA_info" {
     scan_s3rSA_info:
         const scan_s3rSA_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3tbh() //  [R1]
         { []
         }
     {offset
       c3tbh: // global
           if (R1 & 7 == 1) goto u3tce; else goto c3tbW;
       u3tce: // global
           Sp = Sp + 24;
           call _c3tc7() args: 0, res: 0, upd: 0;
       c3tbW: // global
           I64[Sp - 8] = block_c3tbn_info;
           _s3rSE::P64 = P64[R1 + 6];
           R2 = _s3rSE::P64;
           _s3rSF::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s3rSF::P64;
           P64[Sp + 8] = _s3rSE::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3tbh_info" {
     block_c3tbh_info:
         const _c3tbh;
         const 3;
         const 30;
 },
 _c3tbn() //  [R1]
         { []
         }
     {offset
       c3tbn: // global
           if (R1 & 7 == 1) goto u3tcf; else goto c3tc9;
       u3tcf: // global
           Sp = Sp + 32;
           call _c3tc7() args: 0, res: 0, upd: 0;
       c3tc9: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3tcc; else goto c3tcb;
       c3tcc: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3tcb: // global
           I64[Hp - 72] = lvl4_s3rSH_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = sat_s3rSM_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3tbn_info" {
     block_c3tbn_info:
         const _c3tbn;
         const 4;
         const 30;
 },
 _c3tc7() //  []
         { []
         }
     {offset
       c3tc7: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rSO_entry() //  [R1, R2]
         { []
         }
     {offset
       c3tco: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 15];
           call scan_s3rSA_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rSO_info" {
     sat_s3rSO_info:
         const sat_s3rSO_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.$wmunch_entry() //  [R2, R3]
         { []
         }
     {offset
       c3tcr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3tcv; else goto c3tcu;
       c3tcv: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wmunch_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tcu: // global
           I64[Hp - 32] = scan_s3rSA_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3rSO_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 30;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$wmunch_info" {
     Text.ParserCombinators.ReadP.$wmunch_info:
         const Text.ParserCombinators.ReadP.$wmunch_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.806544792 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch2_closure" {
     Text.ParserCombinators.ReadP.munch2_closure:
         const Text.ParserCombinators.ReadP.munch2_info;
 },
 Text.ParserCombinators.ReadP.munch2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3tdx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3tdy; else goto c3tdz;
       c3tdy: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.munch2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tdz: // global
           I64[Sp - 8] = block_c3tdu_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.munch2_info" {
     Text.ParserCombinators.ReadP.munch2_info:
         const Text.ParserCombinators.ReadP.munch2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3tdu() //  [R1]
         { []
         }
     {offset
       c3tdu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tdC; else goto c3tdB;
       c3tdC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3tdB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3tdu_info" {
     block_c3tdu_info:
         const _c3tdu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.812144522 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch_closure" {
     Text.ParserCombinators.ReadP.munch_closure:
         const Text.ParserCombinators.ReadP.munch_info;
 },
 Text.ParserCombinators.ReadP.munch_entry() //  [R2, R3]
         { []
         }
     {offset
       c3tdS: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.munch2_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.munch_info" {
     Text.ParserCombinators.ReadP.munch_info:
         const Text.ParserCombinators.ReadP.munch_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.818188666 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wmunch1_closure" {
     Text.ParserCombinators.ReadP.$wmunch1_closure:
         const Text.ParserCombinators.ReadP.$wmunch1_info;
 },
 sat_s3rSZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3tej: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ten; else goto c3tem;
       c3ten: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tem: // global
           _s3rSU::P64 = P64[R1 + 7];
           _s3rSV::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rSV::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rSU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rSZ_info" {
     sat_s3rSZ_info:
         const sat_s3rSZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3rT2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3tes: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3tet; else goto c3teu;
       c3tet: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3teu: // global
           I64[Sp - 32] = block_c3te8_info;
           _s3rSV::P64 = R2;
           R2 = R2;
           _s3rST::P64 = P64[R1 + 7];
           _s3rSU::P64 = P64[R1 + 15];
           R1 = _s3rST::P64;
           P64[Sp - 24] = _s3rST::P64;
           P64[Sp - 16] = _s3rSU::P64;
           P64[Sp - 8] = _s3rSV::P64;
           Sp = Sp - 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rT2_info" {
     sat_s3rT2_info:
         const sat_s3rT2_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3te8() //  [R1]
         { []
         }
     {offset
       c3te8: // global
           if (R1 & 7 == 1) goto c3tep; else goto c3teq;
       c3tep: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3teq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3teC; else goto c3teB;
       c3teC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3teB: // global
           I64[Hp - 16] = sat_s3rSZ_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_c3tex_info;
           R3 = Hp - 15;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3te8_info" {
     block_c3te8_info:
         const _c3te8;
         const 3;
         const 30;
 },
 _c3tex() //  [R1]
         { []
         }
     {offset
       c3tex: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3teF; else goto c3teE;
       c3teF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3teE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3tex_info" {
     block_c3tex_info:
         const _c3tex;
         const 0;
         const 30;
 },
 Text.ParserCombinators.ReadP.$wmunch1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3teG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3teK; else goto c3teJ;
       c3teK: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wmunch1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3teJ: // global
           I64[Hp - 16] = sat_s3rT2_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.$wmunch1_info" {
     Text.ParserCombinators.ReadP.$wmunch1_info:
         const Text.ParserCombinators.ReadP.$wmunch1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.830790696 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch3_closure" {
     Text.ParserCombinators.ReadP.munch3_closure:
         const Text.ParserCombinators.ReadP.munch3_info;
 },
 Text.ParserCombinators.ReadP.munch3_entry() //  [R2, R3]
         { []
         }
     {offset
       c3tfm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3tfn; else goto c3tfo;
       c3tfn: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.munch3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tfo: // global
           I64[Sp - 8] = block_c3tfj_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch1_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.munch3_info" {
     Text.ParserCombinators.ReadP.munch3_info:
         const Text.ParserCombinators.ReadP.munch3_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3tfj() //  [R1]
         { []
         }
     {offset
       c3tfj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tfr; else goto c3tfq;
       c3tfr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3tfq: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3tfj_info" {
     block_c3tfj_info:
         const _c3tfj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.836279555 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch1_closure" {
     Text.ParserCombinators.ReadP.munch1_closure:
         const Text.ParserCombinators.ReadP.munch1_info;
 },
 Text.ParserCombinators.ReadP.munch1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3tfH: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.munch3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.munch1_info" {
     Text.ParserCombinators.ReadP.munch1_info:
         const Text.ParserCombinators.ReadP.munch1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.844546933 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces2_closure" {
     Text.ParserCombinators.ReadP.skipSpaces2_closure:
         const Text.ParserCombinators.ReadP.skipSpaces2_info;
 },
 lvl4_s3rTn_entry() //  [R1]
         { []
         }
     {offset
       c3tgn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3tgo; else goto c3tgp;
       c3tgo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tgp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rTn_info" {
     lvl4_s3rTn_info:
         const lvl4_s3rTn_entry;
         const 2;
         const 18;
 },
 sat_s3rTp_entry() //  [R1]
         { []
         }
     {offset
       c3tgv: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rTp_info" {
     sat_s3rTp_info:
         const sat_s3rTp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl4_s3rTu_entry() //  [R1]
         { []
         }
     {offset
       c3tgO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3tgP; else goto c3tgQ;
       c3tgP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tgQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rTu_info" {
     lvl4_s3rTu_info:
         const lvl4_s3rTu_entry;
         const 2;
         const 18;
 },
 sat_s3rTw_entry() //  [R1]
         { []
         }
     {offset
       c3tgW: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rTw_info" {
     sat_s3rTw_info:
         const sat_s3rTw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl4_s3rTx_entry() //  [R1]
         { []
         }
     {offset
       c3th4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3th5; else goto c3th6;
       c3th5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3th6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rTx_info" {
     lvl4_s3rTx_info:
         const lvl4_s3rTx_entry;
         const 2;
         const 18;
 },
 sat_s3rTz_entry() //  [R1]
         { []
         }
     {offset
       c3thc: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rTz_info" {
     sat_s3rTz_info:
         const sat_s3rTz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl4_s3rTA_entry() //  [R1]
         { []
         }
     {offset
       c3thk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3thl; else goto c3thm;
       c3thl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3thm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3rTA_info" {
     lvl4_s3rTA_info:
         const lvl4_s3rTA_entry;
         const 2;
         const 18;
 },
 sat_s3rTC_entry() //  [R1]
         { []
         }
     {offset
       c3ths: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rTC_info" {
     sat_s3rTC_info:
         const sat_s3rTC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.skipSpaces2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3thz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3thA; else goto c3thB;
       c3thA: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipSpaces2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3thB: // global
           I64[Sp - 16] = block_c3tfS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3ti2; else goto c3tfT;
       u3ti2: // global
           call _c3tfS(R1) args: 0, res: 0, upd: 0;
       c3tfT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipSpaces2_info" {
     Text.ParserCombinators.ReadP.skipSpaces2_info:
         const Text.ParserCombinators.ReadP.skipSpaces2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3tfS() //  [R1]
         { []
         }
     {offset
       c3tfS: // global
           if (R1 & 7 == 1) goto c3thw; else goto c3thx;
       c3thw: // global
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3thx: // global
           I64[Sp - 8] = block_c3tfY_info;
           _s3rTb::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3rTb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ti1; else goto c3tfZ;
       u3ti1: // global
           call _c3tfY(R1) args: 0, res: 0, upd: 0;
       c3tfZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3tfS_info" {
     block_c3tfS_info:
         const _c3tfS;
         const 1;
         const 30;
 },
 _c3tfY() //  [R1]
         { []
         }
     {offset
       c3tfY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3thH; else goto c3thG;
       c3thH: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3thG: // global
           _s3rT8::P64 = P64[Sp + 16];
           _s3rTb::P64 = P64[Sp + 8];
           _s3rTd::I64 = I64[R1 + 7];
           if (_s3rTd::I64 > 887) goto c3thN; else goto c3ti0;
       c3thN: // global
           (_s3rTl::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(_s3rTd::I64);
           if (_s3rTl::I64 == 0) goto c3thP; else goto c3thK;
       c3thK: // global
           I64[Hp - 56] = lvl4_s3rTn_info;
           P64[Hp - 40] = _s3rT8::P64;
           P64[Hp - 32] = _s3rTb::P64;
           I64[Hp - 24] = sat_s3rTp_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ti0: // global
           if (_s3rTd::I64 == 32) goto c3thZ; else goto c3thX;
       c3thZ: // global
           I64[Hp - 56] = lvl4_s3rTA_info;
           P64[Hp - 40] = _s3rT8::P64;
           P64[Hp - 32] = _s3rTb::P64;
           I64[Hp - 24] = sat_s3rTC_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3thX: // global
           if ((_s3rTd::I64 + -9) > 4) goto c3thT; else goto c3thV;
       c3thT: // global
           if (_s3rTd::I64 != 160) goto c3thP; else goto c3thR;
       c3thP: // global
           Hp = Hp - 64;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s3rT8::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3thR: // global
           I64[Hp - 56] = lvl4_s3rTu_info;
           P64[Hp - 40] = _s3rT8::P64;
           P64[Hp - 32] = _s3rTb::P64;
           I64[Hp - 24] = sat_s3rTw_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3thV: // global
           I64[Hp - 56] = lvl4_s3rTx_info;
           P64[Hp - 40] = _s3rT8::P64;
           P64[Hp - 32] = _s3rTb::P64;
           I64[Hp - 24] = sat_s3rTz_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3tfY_info" {
     block_c3tfY_info:
         const _c3tfY;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.868380888 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces1_closure" {
     Text.ParserCombinators.ReadP.skipSpaces1_closure:
         const Text.ParserCombinators.ReadP.skipSpaces1_info;
 },
 sat_s3rTF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3tjz: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3rTF_info" {
     sat_s3rTF_info:
         const sat_s3rTF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Text.ParserCombinators.ReadP.skipSpaces1_entry() //  [R2]
         { []
         }
     {offset
       c3tjD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tjH; else goto c3tjG;
       c3tjH: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipSpaces1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tjG: // global
           I64[Hp - 24] = sat_s3rTF_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipSpaces1_info" {
     Text.ParserCombinators.ReadP.skipSpaces1_info:
         const Text.ParserCombinators.ReadP.skipSpaces1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.874118257 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces_closure" {
     Text.ParserCombinators.ReadP.skipSpaces_closure:
         const Text.ParserCombinators.ReadP.skipSpaces_info;
 },
 Text.ParserCombinators.ReadP.skipSpaces_entry() //  [R2]
         { []
         }
     {offset
       c3tjX: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.skipSpaces_info" {
     Text.ParserCombinators.ReadP.skipSpaces_info:
         const Text.ParserCombinators.ReadP.skipSpaces_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.878388075 UTC

[section ""data" . Text.ParserCombinators.ReadP.Get_closure" {
     Text.ParserCombinators.ReadP.Get_closure:
         const Text.ParserCombinators.ReadP.Get_info;
 },
 Text.ParserCombinators.ReadP.Get_entry() //  [R2]
         { []
         }
     {offset
       c3tk9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tkd; else goto c3tkc;
       c3tkd: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Get_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tkc: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Get_info" {
     Text.ParserCombinators.ReadP.Get_info:
         const Text.ParserCombinators.ReadP.Get_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.882502343 UTC

[section ""data" . Text.ParserCombinators.ReadP.Look_closure" {
     Text.ParserCombinators.ReadP.Look_closure:
         const Text.ParserCombinators.ReadP.Look_info;
 },
 Text.ParserCombinators.ReadP.Look_entry() //  [R2]
         { []
         }
     {offset
       c3tkp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tkt; else goto c3tks;
       c3tkt: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Look_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tks: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Look_info" {
     Text.ParserCombinators.ReadP.Look_info:
         const Text.ParserCombinators.ReadP.Look_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.886158222 UTC

[section ""data" . Text.ParserCombinators.ReadP.Fail_closure" {
     Text.ParserCombinators.ReadP.Fail_closure:
         const Text.ParserCombinators.ReadP.Fail_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.888556583 UTC

[section ""data" . Text.ParserCombinators.ReadP.Result_closure" {
     Text.ParserCombinators.ReadP.Result_closure:
         const Text.ParserCombinators.ReadP.Result_info;
 },
 Text.ParserCombinators.ReadP.Result_entry() //  [R2, R3]
         { []
         }
     {offset
       c3tkG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tkK; else goto c3tkJ;
       c3tkK: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Result_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tkJ: // global
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Result_info" {
     Text.ParserCombinators.ReadP.Result_info:
         const Text.ParserCombinators.ReadP.Result_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.892708703 UTC

[section ""data" . Text.ParserCombinators.ReadP.Final_closure" {
     Text.ParserCombinators.ReadP.Final_closure:
         const Text.ParserCombinators.ReadP.Final_info;
 },
 Text.ParserCombinators.ReadP.Final_entry() //  [R2]
         { []
         }
     {offset
       c3tkW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tl0; else goto c3tkZ;
       c3tl0: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Final_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tkZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Final_info" {
     Text.ParserCombinators.ReadP.Final_info:
         const Text.ParserCombinators.ReadP.Final_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.897035388 UTC

[section ""cstring" . i3tl8_str" {
     i3tl8_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,71,101,116]
 },
 Text.ParserCombinators.ReadP.Get_con_entry() //  [R1]
         { []
         }
     {offset
       c3tl7: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Get_con_info" {
     Text.ParserCombinators.ReadP.Get_con_info:
         const Text.ParserCombinators.ReadP.Get_con_entry;
         const 1;
         const 2;
         const i3tl8_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.901166546 UTC

[section ""cstring" . i3tlf_str" {
     i3tlf_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,76,111,111,107]
 },
 Text.ParserCombinators.ReadP.Look_con_entry() //  [R1]
         { []
         }
     {offset
       c3tle: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Look_con_info" {
     Text.ParserCombinators.ReadP.Look_con_info:
         const Text.ParserCombinators.ReadP.Look_con_entry;
         const 1;
         const 4294967298;
         const i3tlf_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.904627449 UTC

[section ""cstring" . i3tlm_str" {
     i3tlm_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,70,97,105,108]
 },
 Text.ParserCombinators.ReadP.Fail_con_entry() //  [R1]
         { []
         }
     {offset
       c3tll: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Fail_con_info" {
     Text.ParserCombinators.ReadP.Fail_con_info:
         const Text.ParserCombinators.ReadP.Fail_con_entry;
         const 4294967296;
         const 8589934595;
         const i3tlm_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.908454569 UTC

[section ""cstring" . i3tlt_str" {
     i3tlt_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,82,101,115,117,108,116]
 },
 Text.ParserCombinators.ReadP.Result_con_entry() //  [R1]
         { []
         }
     {offset
       c3tls: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Result_con_info" {
     Text.ParserCombinators.ReadP.Result_con_info:
         const Text.ParserCombinators.ReadP.Result_con_entry;
         const 2;
         const 12884901892;
         const i3tlt_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.911948176 UTC

[section ""cstring" . i3tlA_str" {
     i3tlA_str:
         I8[] [98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,70,105,110,97,108]
 },
 Text.ParserCombinators.ReadP.Final_con_entry() //  [R1]
         { []
         }
     {offset
       c3tlz: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Text.ParserCombinators.ReadP.Final_con_info" {
     Text.ParserCombinators.ReadP.Final_con_info:
         const Text.ParserCombinators.ReadP.Final_con_entry;
         const 1;
         const 17179869186;
         const i3tlA_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:06.915440899 UTC

[section ""relreadonly" . S3s6G_srt" {
     S3s6G_srt:
         const Control.Exception.Base.patError_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const lvl1_r3oqF_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure;
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure;
         const Text.ParserCombinators.ReadP.choice_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const lvl3_r3oqH_closure;
         const Text.ParserCombinators.ReadP.gather1_closure;
         const Text.ParserCombinators.ReadP.option1_closure;
         const Text.ParserCombinators.ReadP.optional1_closure;
         const Text.ParserCombinators.ReadP.endBy3_closure;
         const Text.ParserCombinators.ReadP.many2_closure;
         const Text.ParserCombinators.ReadP.endBy4_closure;
         const Text.ParserCombinators.ReadP.skipMany2_closure;
         const Text.ParserCombinators.ReadP.skipMany3_closure;
         const Text.ParserCombinators.ReadP.sepBy3_closure;
         const Text.ParserCombinators.ReadP.endBy2_closure;
         const Text.ParserCombinators.ReadP.sepBy2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure;
         const Text.ParserCombinators.ReadP.chainr3_closure;
         const Text.ParserCombinators.ReadP.chainr2_closure;
         const Text.ParserCombinators.ReadP.chainl3_closure;
         const Text.ParserCombinators.ReadP.chainl2_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const Text.ParserCombinators.ReadP.<++1_closure;
         const Text.ParserCombinators.ReadP.manyTill1_closure;
 }]

