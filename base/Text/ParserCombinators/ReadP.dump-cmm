
==================== Output Cmm ====================
2018-03-16 15:58:00.663238677 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:58:00.664526836 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_entry() //  [R2]
         { info_tbl: [(c3oC2,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oC2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3oC6; else goto c3oC5;
       c3oC6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oC5: // global
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.666123337 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure:
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info;
 },
 Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_entry() //  []
         { info_tbl: [(c3oCb,
                       label: Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oCb: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.667697439 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP2_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP2_closure:
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_info;
 },
 sat_s3or2_entry() //  [R1, R2]
         { info_tbl: [(c3oCn,
                       label: sat_s3or2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oCn: // global
           R4 = R2;
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fFunctorReadP2_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(c3oCq,
                       label: Text.ParserCombinators.ReadP.$fFunctorReadP2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oCq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3oCu; else goto c3oCt;
       c3oCu: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fFunctorReadP2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oCt: // global
           I64[Hp - 16] = sat_s3or2_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 15;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.669843071 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP1_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP1_closure:
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_info;
 },
 sat_s3or8_entry() //  [R1]
         { info_tbl: [(c3oCF,
                       label: sat_s3or8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oCF: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fFunctorReadP1_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(c3oCI,
                       label: Text.ParserCombinators.ReadP.$fFunctorReadP1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oCI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3oCM; else goto c3oCL;
       c3oCM: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fFunctorReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oCL: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3or8_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.671512824 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_closure+3;
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.672544991 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_info;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP5_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3oCR,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oCR: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.673828773 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure:
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_info;
 },
 Text.ParserCombinators.ReadP.$fMonadFailReadP1_entry() //  []
         { info_tbl: [(c3oCY,
                       label: Text.ParserCombinators.ReadP.$fMonadFailReadP1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oCY: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.675335811 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP1_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP1_closure:
         const Text.ParserCombinators.ReadP.$fMonadReadP1_info;
 },
 sat_s3orh_entry() //  [R1, R2]
         { info_tbl: [(c3oDa,
                       label: sat_s3orh_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oDa: // global
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fMonadReadP1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3oDd,
                       label: Text.ParserCombinators.ReadP.$fMonadReadP1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oDd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3oDh; else goto c3oDg;
       c3oDh: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fMonadReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oDg: // global
           I64[Hp - 16] = sat_s3orh_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3ord::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ord::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.678976658 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info;
 },
 sat_s3oro_entry() //  [R1, R2]
         { info_tbl: [(c3oDy,
                       label: sat_s3oro_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oDy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oDz; else goto c3oDA;
       c3oDz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oDA: // global
           I64[Sp - 16] = block_c3oDw_info;
           R2 = R2;
           _s3ori::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3ori::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oDw() //  [R1]
         { info_tbl: [(c3oDw,
                       label: block_c3oDw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oDw: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ors_entry() //  [R1, R2]
         { info_tbl: [(c3oDN,
                       label: sat_s3ors_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oDN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oDO; else goto c3oDP;
       c3oDO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oDP: // global
           I64[Sp - 16] = block_c3oDL_info;
           R2 = R2;
           _s3ori::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3ori::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oDL() //  [R1]
         { info_tbl: [(c3oDL,
                       label: block_c3oDL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oDL: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orw_entry() //  [R1]
         { info_tbl: [(c3oE0,
                       label: sat_s3orw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oE0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oE1; else goto c3oE2;
       c3oE1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oE2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3orD_entry() //  [R1, R2]
         { info_tbl: [(c3oEh,
                       label: sat_s3orD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oEh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oEm; else goto c3oEn;
       c3oEm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oEn: // global
           I64[Sp - 16] = block_c3oEe_info;
           _s3ori::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ori::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3oEr; else goto c3oEf;
       u3oEr: // global
           call _c3oEe(R1) args: 0, res: 0, upd: 0;
       c3oEf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oEe() //  [R1]
         { info_tbl: [(c3oEe,
                       label: block_c3oEe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oEe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3oEq; else goto c3oEp;
       c3oEq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oEp: // global
           _s3orA::P64 = P64[R1 + 7];
           _s3orB::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s3orA::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _s3orB::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orE_entry() //  [R1]
         { info_tbl: [(c3oEs,
                       label: sat_s3orE_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oEs: // global
           _s3orE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3oEt; else goto c3oEu;
       c3oEu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3oEw; else goto c3oEv;
       c3oEw: // global
           HpAlloc = 16;
           goto c3oEt;
       c3oEt: // global
           R1 = _s3orE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oEv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3orE::P64;
           _s3ori::P64 = P64[_s3orE::P64 + 16];
           _s3orx::P64 = P64[_s3orE::P64 + 24];
           I64[Hp - 8] = sat_s3orD_info;
           P64[Hp] = _s3ori::P64;
           R3 = _s3orx::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry() //  [R2,
                                                                 R3]
         { info_tbl: [(c3oEE,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oEE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oEF; else goto c3oEG;
       c3oEF: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oEG: // global
           I64[Sp - 16] = block_c3oDm_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3oF3; else goto c3oDn;
       u3oF3: // global
           call _c3oDm(R1) args: 0, res: 0, upd: 0;
       c3oDn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oDm() //  [R1]
         { info_tbl: [(c3oDm,
                       label: block_c3oDm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oDm: // global
           _s3ori::P64 = P64[Sp + 8];
           _c3oED::P64 = R1 & 7;
           if (_c3oED::P64 < 4) goto u3oF0; else goto u3oF2;
       u3oF0: // global
           if (_c3oED::P64 < 3) goto u3oF1; else goto c3oEA;
       u3oF1: // global
           if (_c3oED::P64 < 2) goto c3oEy; else goto c3oEz;
       c3oEy: // global
           Hp = Hp + 40;
           _s3ork::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3oEO; else goto c3oEJ;
       c3oEJ: // global
           _s3orl::P64 = P64[_s3ork::P64 + 7];
           I64[Hp - 32] = sat_s3oro_info;
           P64[Hp - 24] = _s3ori::P64;
           P64[Hp - 16] = _s3orl::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oEz: // global
           Hp = Hp + 40;
           _s3ork::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3oEO; else goto c3oEN;
       c3oEO: // global
           HpAlloc = 40;
           R1 = _s3ork::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oEN: // global
           _s3orp::P64 = P64[_s3ork::P64 + 6];
           I64[Hp - 32] = sat_s3ors_info;
           P64[Hp - 24] = _s3ori::P64;
           P64[Hp - 16] = _s3orp::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oEA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3oF2: // global
           if (_c3oED::P64 < 5) goto c3oEB; else goto c3oEC;
       c3oEB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3oEV; else goto c3oEU;
       c3oEV: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oEU: // global
           _s3ort::P64 = P64[R1 + 4];
           _s3oru::P64 = P64[R1 + 12];
           I64[Hp - 80] = sat_s3orw_info;
           P64[Hp - 64] = _s3ori::P64;
           P64[Hp - 56] = _s3oru::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ori::P64;
           P64[Hp - 24] = _s3ort::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oEC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3oEZ; else goto c3oEY;
       c3oEZ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oEY: // global
           _s3orx::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3orE_info;
           P64[Hp - 24] = _s3ori::P64;
           P64[Hp - 16] = _s3orx::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.68510479 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info;
 },
 sat_s3orL_entry() //  [R1, R2]
         { info_tbl: [(c3oFk,
                       label: sat_s3orL_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oFk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oFl; else goto c3oFm;
       c3oFl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oFm: // global
           I64[Sp - 16] = block_c3oFi_info;
           R2 = R2;
           _s3orF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3orF::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oFi() //  [R1]
         { info_tbl: [(c3oFi,
                       label: block_c3oFi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oFi: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orP_entry() //  [R1, R2]
         { info_tbl: [(c3oFz,
                       label: sat_s3orP_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oFz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oFA; else goto c3oFB;
       c3oFA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oFB: // global
           I64[Sp - 16] = block_c3oFx_info;
           R2 = R2;
           _s3orF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3orF::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oFx() //  [R1]
         { info_tbl: [(c3oFx,
                       label: block_c3oFx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oFx: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orS_entry() //  [R1]
         { info_tbl: [(c3oFM,
                       label: sat_s3orS_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oFM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oFN; else goto c3oFO;
       c3oFN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oFO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3orY_entry() //  [R1, R2]
         { info_tbl: [(c3oG3,
                       label: sat_s3orY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oG3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oG7; else goto c3oG8;
       c3oG7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oG8: // global
           I64[Sp - 16] = block_c3oG0_info;
           _s3orF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3orF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3oGc; else goto c3oG1;
       u3oGc: // global
           call _c3oG0(R1) args: 0, res: 0, upd: 0;
       c3oG1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oG0() //  [R1]
         { info_tbl: [(c3oG0,
                       label: block_c3oG0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oG0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3oGb; else goto c3oGa;
       c3oGb: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oGa: // global
           _s3orX::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s3orX::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orZ_entry() //  [R1]
         { info_tbl: [(c3oGd,
                       label: sat_s3orZ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oGd: // global
           _s3orZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3oGe; else goto c3oGf;
       c3oGf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3oGh; else goto c3oGg;
       c3oGh: // global
           HpAlloc = 16;
           goto c3oGe;
       c3oGe: // global
           R1 = _s3orZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oGg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3orZ::P64;
           _s3orF::P64 = P64[_s3orZ::P64 + 16];
           _s3orT::P64 = P64[_s3orZ::P64 + 24];
           I64[Hp - 8] = sat_s3orY_info;
           P64[Hp] = _s3orF::P64;
           R3 = _s3orT::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3oGp,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oGp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oGq; else goto c3oGr;
       c3oGq: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oGr: // global
           I64[Sp - 16] = block_c3oF8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3oGN; else goto c3oF9;
       u3oGN: // global
           call _c3oF8(R1) args: 0, res: 0, upd: 0;
       c3oF9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oF8() //  [R1]
         { info_tbl: [(c3oF8,
                       label: block_c3oF8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oF8: // global
           _s3orF::P64 = P64[Sp + 8];
           _c3oGo::P64 = R1 & 7;
           if (_c3oGo::P64 < 4) goto u3oGK; else goto u3oGM;
       u3oGK: // global
           if (_c3oGo::P64 < 3) goto u3oGL; else goto c3oGl;
       u3oGL: // global
           if (_c3oGo::P64 < 2) goto c3oGj; else goto c3oGk;
       c3oGj: // global
           Hp = Hp + 40;
           _s3orH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3oGz; else goto c3oGu;
       c3oGu: // global
           _s3orI::P64 = P64[_s3orH::P64 + 7];
           I64[Hp - 32] = sat_s3orL_info;
           P64[Hp - 24] = _s3orF::P64;
           P64[Hp - 16] = _s3orI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oGk: // global
           Hp = Hp + 40;
           _s3orH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3oGz; else goto c3oGy;
       c3oGz: // global
           HpAlloc = 40;
           R1 = _s3orH::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oGy: // global
           _s3orM::P64 = P64[_s3orH::P64 + 6];
           I64[Hp - 32] = sat_s3orP_info;
           P64[Hp - 24] = _s3orF::P64;
           P64[Hp - 16] = _s3orM::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oGl: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3oGM: // global
           if (_c3oGo::P64 < 5) goto c3oGm; else goto c3oGn;
       c3oGm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3oGF; else goto c3oGE;
       c3oGF: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oGE: // global
           _s3orR::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3orS_info;
           P64[Hp - 32] = _s3orF::P64;
           P64[Hp - 24] = _s3orR::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3orF::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oGn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3oGJ; else goto c3oGI;
       c3oGJ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oGI: // global
           _s3orT::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3orZ_info;
           P64[Hp - 24] = _s3orF::P64;
           P64[Hp - 16] = _s3orT::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.694362062 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorP_closure" {
     Text.ParserCombinators.ReadP.$fFunctorP_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.696252096 UTC

[section ""data" . Text.ParserCombinators.ReadP.run_closure" {
     Text.ParserCombinators.ReadP.run_closure:
         const Text.ParserCombinators.ReadP.run_info;
 },
 sat_s3osd_entry() //  [R1]
         { info_tbl: [(c3oH4,
                       label: sat_s3osd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oH4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oH5; else goto c3oH6;
       c3oH5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oH6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.run_entry() //  [R2, R3]
         { info_tbl: [(c3oHe,
                       label: Text.ParserCombinators.ReadP.run_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oHe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oHf; else goto u3oHV;
       c3oHf: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.run_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u3oHV: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c3oGP() args: 0, res: 0, upd: 0;
     }
 },
 _c3oGP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oGP: // global
           _s3os0::P64 = P64[Sp];
           I64[Sp] = block_c3oGS_info;
           R1 = _s3os0::P64;
           if (R1 & 7 != 0) goto u3oI0; else goto c3oGT;
       u3oI0: // global
           call _c3oGS(R1) args: 0, res: 0, upd: 0;
       c3oGT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oGS() //  [R1]
         { info_tbl: [(c3oGS,
                       label: block_c3oGS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oGS: // global
           _s3os1::P64 = P64[Sp + 8];
           _c3oHd::P64 = R1 & 7;
           if (_c3oHd::P64 < 4) goto u3oHS; else goto u3oHU;
       u3oHS: // global
           if (_c3oHd::P64 < 3) goto u3oHT; else goto u3oHW;
       u3oHT: // global
           if (_c3oHd::P64 < 2) goto c3oH8; else goto c3oH9;
       c3oH8: // global
           I64[Sp] = block_c3oHi_info;
           _s3os3::P64 = P64[R1 + 7];
           R1 = _s3os1::P64;
           P64[Sp + 8] = _s3os3::P64;
           if (R1 & 7 != 0) goto u3oI1; else goto c3oHk;
       u3oI1: // global
           call _c3oHi(R1) args: 0, res: 0, upd: 0;
       c3oHk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3oH9: // global
           I64[Sp] = block_c3oHB_info;
           R2 = _s3os1::P64;
           R1 = P64[R1 + 6];
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3oHW: // global
           Sp = Sp + 16;
           call _c3oHa() args: 0, res: 0, upd: 0;
       u3oHU: // global
           if (_c3oHd::P64 < 5) goto c3oHb; else goto c3oHc;
       c3oHb: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3oHN; else goto c3oHM;
       c3oHN: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oHM: // global
           _s3osa::P64 = P64[R1 + 4];
           _s3osb::P64 = P64[R1 + 12];
           I64[Hp - 72] = sat_s3osd_info;
           P64[Hp - 56] = _s3os1::P64;
           P64[Hp - 48] = _s3osb::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s3osa::P64;
           P64[Hp - 24] = _s3os1::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oHc: // global
           R1 = P64[R1 + 3] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3oHi() //  [R1]
         { info_tbl: [(c3oHi,
                       label: block_c3oHi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oHi: // global
           if (R1 & 7 == 1) goto u3oHX; else goto c3oHv;
       u3oHX: // global
           Sp = Sp + 16;
           call _c3oHa() args: 0, res: 0, upd: 0;
       c3oHv: // global
           I64[Sp] = block_c3oHt_info;
           R2 = P64[R1 + 6];
           _s3os6::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3os6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oHt() //  [R1]
         { info_tbl: [(c3oHt,
                       label: block_c3oHt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oHt: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c3oGP() args: 0, res: 0, upd: 0;
     }
 },
 _c3oHB() //  [R1]
         { info_tbl: [(c3oHB,
                       label: block_c3oHB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oHB: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c3oGP() args: 0, res: 0, upd: 0;
     }
 },
 _c3oHa() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oHa: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.700327274 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wreadS_to_P_closure" {
     Text.ParserCombinators.ReadP.$wreadS_to_P_closure:
         const Text.ParserCombinators.ReadP.$wreadS_to_P_info;
 },
 sat_s3osr_entry() //  [R1]
         { info_tbl: [(c3oIv,
                       label: sat_s3osr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oIv: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_s3osh_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 go_s3osh_entry() //  [R1, R2]
         { info_tbl: [(c3oIC,
                       label: go_s3osh_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oIC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3oID; else goto c3oIE;
       c3oID: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oIE: // global
           I64[Sp - 24] = block_c3oIg_info;
           _s3osh::P64 = R1;
           _s3osg::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3osg::P64;
           P64[Sp - 8] = _s3osh::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3oIW; else goto c3oIh;
       u3oIW: // global
           call _c3oIg(R1) args: 0, res: 0, upd: 0;
       c3oIh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oIg() //  [R1]
         { info_tbl: [(c3oIg,
                       label: block_c3oIg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oIg: // global
           if (R1 & 7 == 1) goto c3oIz; else goto c3oIA;
       c3oIz: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oIA: // global
           I64[Sp - 8] = block_c3oIm_info;
           _s3osl::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3osl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3oIV; else goto c3oIn;
       u3oIV: // global
           call _c3oIm(R1) args: 0, res: 0, upd: 0;
       c3oIn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oIm() //  [R1]
         { info_tbl: [(c3oIm,
                       label: block_c3oIm_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oIm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3oIP; else goto c3oIO;
       c3oIP: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oIO: // global
           _s3osn::P64 = P64[R1 + 7];
           _s3oso::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3osr_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3oIH_info;
           R2 = _s3osn::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3oso::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oIH() //  [R1]
         { info_tbl: [(c3oIH,
                       label: block_c3oIH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oIH: // global
           _s3oso::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3oIL_info;
           R3 = _s3oso::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3oIL() //  [R1]
         { info_tbl: [(c3oIL,
                       label: block_c3oIL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oIL: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3osx_entry() //  [R1, R2]
         { info_tbl: [(c3oJ4,
                       label: sat_s3osx_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oJ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oJ5; else goto c3oJ6;
       c3oJ5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oJ6: // global
           I64[Sp - 16] = block_c3oJ2_info;
           R2 = R2;
           _s3osh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3osh::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oJ2() //  [R1]
         { info_tbl: [(c3oJ2,
                       label: block_c3oJ2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oJ2: // global
           _s3osh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3oJ9_info;
           R2 = R1;
           R1 = _s3osh::P64;
           Sp = Sp + 8;
           call go_s3osh_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oJ9() //  [R1]
         { info_tbl: [(c3oJ9,
                       label: block_c3oJ9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oJ9: // global
           if (R1 & 7 == 1) goto c3oJg; else goto c3oJk;
       c3oJg: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oJk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3oJn; else goto c3oJm;
       c3oJn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oJm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R1;
           R1 = Hp - 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wreadS_to_P_entry() //  [R2, R3]
         { info_tbl: [(c3oJp,
                       label: Text.ParserCombinators.ReadP.$wreadS_to_P_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oJp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3oJt; else goto c3oJs;
       c3oJt: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wreadS_to_P_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oJs: // global
           I64[Hp - 32] = go_s3osh_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3osx_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.70539561 UTC

[section ""data" . Text.ParserCombinators.ReadP.readS_to_P1_closure" {
     Text.ParserCombinators.ReadP.readS_to_P1_closure:
         const Text.ParserCombinators.ReadP.readS_to_P1_info;
 },
 Text.ParserCombinators.ReadP.readS_to_P1_entry() //  [R2, R3]
         { info_tbl: [(c3oJB,
                       label: Text.ParserCombinators.ReadP.readS_to_P1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oJB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3oJC; else goto c3oJD;
       c3oJC: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.readS_to_P1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oJD: // global
           I64[Sp - 8] = block_c3oJy_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3oJy() //  [R1]
         { info_tbl: [(c3oJy,
                       label: block_c3oJy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oJy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3oJG; else goto c3oJF;
       c3oJG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oJF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.707147865 UTC

[section ""data" . Text.ParserCombinators.ReadP.readS_to_P_closure" {
     Text.ParserCombinators.ReadP.readS_to_P_closure:
         const Text.ParserCombinators.ReadP.readS_to_P_info;
 },
 Text.ParserCombinators.ReadP.readS_to_P_entry() //  [R2, R3]
         { info_tbl: [(c3oJL,
                       label: Text.ParserCombinators.ReadP.readS_to_P_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oJL: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.readS_to_P1_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.708201413 UTC

[section ""cstring" . lvl_r3oqE_bytes" {
     lvl_r3oqE_bytes:
         I8[] [84,101,120,116,47,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,47,82,101,97,100,80,46,104,115,58,40,49,51,52,44,51,41,45,40,49,53,55,44,53,50,41,124,102,117,110,99,116,105,111,110,32,60,124,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.709354164 UTC

[section ""data" . lvl1_r3oqF_closure" {
     lvl1_r3oqF_closure:
         const lvl1_r3oqF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3oqF_entry() //  [R1]
         { info_tbl: [(c3oJU,
                       label: lvl1_r3oqF_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oJV; else goto c3oJW;
       c3oJV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oJW: // global
           (_c3oJR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3oJR::I64 == 0) goto c3oJT; else goto c3oJS;
       c3oJT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3oJS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3oJR::I64;
           R2 = lvl_r3oqE_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.719560495 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info;
         const 0;
 },
 sat_s3osS_entry() //  [R1, R2]
         { info_tbl: [(c3oKN,
                       label: sat_s3osS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oKN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3oKR; else goto c3oKQ;
       c3oKR: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oKQ: // global
           _s3osM::P64 = P64[R1 + 7];
           _s3osP::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3osP::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = _s3osM::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3osY_entry() //  [R1, R2]
         { info_tbl: [(c3oL6,
                       label: sat_s3osY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oL6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oL7; else goto c3oL8;
       c3oL7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oL8: // global
           I64[Sp - 16] = block_c3oL4_info;
           R2 = R2;
           _s3osU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3osU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oL4() //  [R1]
         { info_tbl: [(c3oL4,
                       label: block_c3oL4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oL4: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ot3_entry() //  [R1, R2]
         { info_tbl: [(c3oLm,
                       label: sat_s3ot3_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oLm: // global
           _s3ot0::P64 = R2;
           _s3ot3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3oLn; else goto c3oLo;
       c3oLo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3oLq; else goto c3oLp;
       c3oLq: // global
           HpAlloc = 32;
           goto c3oLn;
       c3oLn: // global
           R2 = _s3ot0::P64;
           R1 = _s3ot3::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oLp: // global
           _s3osT::P64 = P64[_s3ot3::P64 + 7];
           _s3osZ::P64 = P64[_s3ot3::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3osZ::P64;
           P64[Hp] = _s3ot0::P64;
           I64[Sp - 16] = block_c3oLk_info;
           R2 = _s3ot0::P64;
           R1 = _s3osT::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oLk() //  [R1]
         { info_tbl: [(c3oLk,
                       label: block_c3oLk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oLk: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ot7_entry() //  [R1]
         { info_tbl: [(c3oLH,
                       label: sat_s3ot7_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oLH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3oLI; else goto c3oLJ;
       c3oLI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oLJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3oLF_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3oLF() //  [R1]
         { info_tbl: [(c3oLF,
                       label: block_c3oLF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oLF: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ot8_entry() //  [R1, R2]
         { info_tbl: [(c3oLO,
                       label: sat_s3ot8_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oLO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3oLS; else goto c3oLR;
       c3oLS: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oLR: // global
           _s3osH::P64 = P64[R1 + 7];
           _s3ot4::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3ot7_info;
           P64[Hp - 32] = _s3osH::P64;
           P64[Hp - 24] = _s3ot4::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otg_entry() //  [R1]
         { info_tbl: [(c3oMg,
                       label: sat_s3otg_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oMg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3oMk; else goto c3oMl;
       c3oMk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oMl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3oMe_info;
           _s3otd::P64 = P64[R1 + 32];
           R2 = _s3otd::P64;
           _s3otc::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s3otc::P64;
           P64[Sp - 24] = _s3otd::P64;
           Sp = Sp - 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3oMe() //  [R1]
         { info_tbl: [(c3oMe,
                       label: block_c3oMe_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oMe: // global
           I64[Sp] = block_c3oMj_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3oMj() //  [R1]
         { info_tbl: [(c3oMj,
                       label: block_c3oMj_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oMj: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oth_entry() //  [R1, R2]
         { info_tbl: [(c3oMs,
                       label: sat_s3oth_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oMs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3oMw; else goto c3oMv;
       c3oMw: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oMv: // global
           _s3ota::P64 = P64[R1 + 7];
           _s3otc::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3otg_info;
           P64[Hp - 32] = _s3ota::P64;
           P64[Hp - 24] = _s3otc::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otm_entry() //  [R1]
         { info_tbl: [(c3oMR,
                       label: sat_s3otm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oMR: // global
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otn_entry() //  [R1]
         { info_tbl: [(c3oMU,
                       label: sat_s3otn_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oMU: // global
           _s3otn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3oMV; else goto c3oMW;
       c3oMW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3oMY; else goto c3oMX;
       c3oMY: // global
           HpAlloc = 32;
           goto c3oMV;
       c3oMV: // global
           R1 = _s3otn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oMX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3otn::P64;
           _s3oti::P64 = P64[_s3otn::P64 + 16];
           _s3otj::P64 = P64[_s3otn::P64 + 24];
           _s3otl::P64 = P64[_s3otn::P64 + 32];
           I64[Hp - 24] = sat_s3otm_info;
           P64[Hp - 8] = _s3otj::P64;
           P64[Hp] = _s3otl::P64;
           R3 = Hp - 24;
           R2 = _s3oti::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oto_entry() //  [R1, R2]
         { info_tbl: [(c3oN0,
                       label: sat_s3oto_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oN0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3oN4; else goto c3oN3;
       c3oN4: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oN3: // global
           _s3oti::P64 = P64[R1 + 7];
           _s3otj::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3otn_info;
           P64[Hp - 32] = _s3oti::P64;
           P64[Hp - 24] = _s3otj::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ots_entry() //  [R1]
         { info_tbl: [(c3oNm,
                       label: sat_s3ots_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oNm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oNn; else goto c3oNo;
       c3oNn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oNo: // global
           I64[Sp - 16] = block_c3oNk_info;
           _s3otq::P64 = P64[R1 + 24];
           R2 = _s3otq::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 8] = _s3otq::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oNk() //  [R1]
         { info_tbl: [(c3oNk,
                       label: block_c3oNk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oNk: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ott_entry() //  [R1]
         { info_tbl: [(c3oNs,
                       label: sat_s3ott_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oNs: // global
           _s3ott::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3oNt; else goto c3oNu;
       c3oNu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3oNw; else goto c3oNv;
       c3oNw: // global
           HpAlloc = 32;
           goto c3oNt;
       c3oNt: // global
           R1 = _s3ott::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oNv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ott::P64;
           _s3oti::P64 = P64[_s3ott::P64 + 16];
           _s3otp::P64 = P64[_s3ott::P64 + 24];
           _s3otq::P64 = P64[_s3ott::P64 + 32];
           I64[Hp - 24] = sat_s3ots_info;
           P64[Hp - 8] = _s3otp::P64;
           P64[Hp] = _s3otq::P64;
           R3 = Hp - 24;
           R2 = _s3oti::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3otu_entry() //  [R1, R2]
         { info_tbl: [(c3oNy,
                       label: sat_s3otu_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oNy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3oNC; else goto c3oNB;
       c3oNC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oNB: // global
           _s3oti::P64 = P64[R1 + 7];
           _s3otp::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3ott_info;
           P64[Hp - 32] = _s3oti::P64;
           P64[Hp - 24] = _s3otp::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otw_entry() //  [R1]
         { info_tbl: [(c3oNJ,
                       label: sat_s3otw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oNJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oNK; else goto c3oNL;
       c3oNK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oNL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3otz_entry() //  [R1]
         { info_tbl: [(c3oNS,
                       label: sat_s3otz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oNS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oNT; else goto c3oNU;
       c3oNT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oNU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3otH_entry() //  [R1, R2]
         { info_tbl: [(c3oOf,
                       label: sat_s3otH_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oOf: // global
           _s3otE::P64 = R2;
           _s3otH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3oOg; else goto c3oOh;
       c3oOh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3oOj; else goto c3oOi;
       c3oOj: // global
           HpAlloc = 32;
           goto c3oOg;
       c3oOg: // global
           R2 = _s3otE::P64;
           R1 = _s3otH::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oOi: // global
           _s3otB::P64 = P64[_s3otH::P64 + 7];
           _s3otD::P64 = P64[_s3otH::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3otD::P64;
           P64[Hp] = _s3otE::P64;
           I64[Sp - 16] = block_c3oOd_info;
           R2 = _s3otE::P64;
           R1 = _s3otB::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oOd() //  [R1]
         { info_tbl: [(c3oOd,
                       label: block_c3oOd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oOd: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otK_entry() //  [R1]
         { info_tbl: [(c3oOt,
                       label: sat_s3otK_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oOt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oOu; else goto c3oOv;
       c3oOu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oOv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c3oOB,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oOB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3oOC; else goto c3oOD;
       c3oOC: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oOD: // global
           I64[Sp - 24] = block_c3oNV_info;
           R1 = R2;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3oQR; else goto c3oNW;
       u3oQR: // global
           call _c3oNV(R1) args: 0, res: 0, upd: 0;
       c3oNW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oNV() //  [R1]
         { info_tbl: [(c3oNV,
                       label: block_c3oNV_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oNV: // global
           _s3osD::P64 = P64[Sp + 16];
           _c3oOA::P64 = R1 & 7;
           if (_c3oOA::P64 == 1) goto c3oOy; else goto u3oQz;
       c3oOy: // global
           I64[Sp - 8] = block_c3oO1_info;
           _s3otB::P64 = P64[R1 + 7];
           R1 = _s3osD::P64;
           P64[Sp] = _s3otB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3oQO; else goto c3oO2;
       u3oQO: // global
           call _c3oO1(R1) args: 0, res: 0, upd: 0;
       c3oO2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3oQz: // global
           if (_c3oOA::P64 == 4) goto c3oOz; else goto u3oQA;
       c3oOz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3oQl; else goto c3oQk;
       c3oQl: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oQk: // global
           _s3otI::P64 = P64[R1 + 4];
           _s3otJ::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3otK_info;
           P64[Hp - 32] = _s3osD::P64;
           P64[Hp - 24] = _s3otJ::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3otI::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3oQA: // global
           Sp = Sp + 8;
           call _s3osE() args: 0, res: 0, upd: 0;
     }
 },
 _c3oO1() //  [R1]
         { info_tbl: [(c3oO1,
                       label: block_c3oO1_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oO1: // global
           if (R1 & 7 == 1) goto c3oQe; else goto u3oQB;
       c3oQe: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3oQh; else goto c3oQg;
       c3oQh: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oQg: // global
           _s3otD::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_s3otH_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3otD::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3oQB: // global
           Sp = Sp + 16;
           call _s3osE() args: 0, res: 0, upd: 0;
     }
 },
 _s3osE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3osE: // global
           I64[Sp - 8] = block_c3oK7_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3oQS; else goto c3oK8;
       u3oQS: // global
           call _c3oK7(R1) args: 0, res: 0, upd: 0;
       c3oK8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oK7() //  [R1]
         { info_tbl: [(c3oK7,
                       label: block_c3oK7_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oK7: // global
           _s3osC::P64 = P64[Sp + 8];
           if (R1 & 7 == 4) goto c3oQ2; else goto c3oOH;
       c3oQ2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3oQ5; else goto c3oQ4;
       c3oQ5: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oQ4: // global
           _s3otx::P64 = P64[R1 + 4];
           _s3oty::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3otz_info;
           P64[Hp - 32] = _s3osC::P64;
           P64[Hp - 24] = _s3oty::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3otx::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oOH: // global
           I64[Sp + 8] = block_c3oKc_info;
           _s3osG::P64 = R1;
           R1 = _s3osC::P64;
           P64[Sp + 16] = _s3osG::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3oQE; else goto c3oKd;
       u3oQE: // global
           call _c3oKc(R1) args: 0, res: 0, upd: 0;
       c3oKd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oKc() //  [R1]
         { info_tbl: [(c3oKc,
                       label: block_c3oKc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oKc: // global
           _s3osG::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto c3oQ0; else goto c3oOK;
       c3oQ0: // global
           R1 = _s3osG::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3oOK: // global
           I64[Sp] = block_c3oKh_info;
           _s3osH::P64 = R1;
           R1 = _s3osG::P64;
           P64[Sp + 8] = _s3osH::P64;
           if (R1 & 7 != 0) goto u3oQF; else goto c3oKi;
       u3oQF: // global
           call _c3oKh(R1) args: 0, res: 0, upd: 0;
       c3oKi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oKh() //  [R1]
         { info_tbl: [(c3oKh,
                       label: block_c3oKh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oKh: // global
           _s3osH::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto c3oPW; else goto c3oPl;
       c3oPW: // global
           R1 = _s3osH::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3oPl: // global
           I64[Sp - 8] = block_c3oLT_info;
           _s3osI::P64 = R1;
           R1 = _s3osH::P64;
           P64[Sp] = _s3osI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3oQG; else goto c3oLU;
       u3oQG: // global
           call _c3oLT(R1) args: 0, res: 0, upd: 0;
       c3oLU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oLT() //  [R1]
         { info_tbl: [(c3oLT,
                       label: block_c3oLT_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oLT: // global
           _s3osI::P64 = P64[Sp + 8];
           _c3oQq::P64 = R1 & 7;
           if (_c3oQq::P64 == 2) goto c3oPr; else goto u3oQx;
       c3oPr: // global
           I64[Sp - 8] = block_c3oLZ_info;
           _s3ota::P64 = P64[R1 + 6];
           R1 = _s3osI::P64;
           P64[Sp] = _s3ota::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3oQK; else goto c3oM0;
       u3oQK: // global
           call _c3oLZ(R1) args: 0, res: 0, upd: 0;
       c3oM0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3oQx: // global
           if (_c3oQq::P64 == 5) goto c3oPC; else goto u3oQC;
       c3oPC: // global
           I64[Sp + 8] = block_c3oMz_info;
           _s3oti::P64 = P64[R1 + 3];
           R1 = _s3osI::P64;
           P64[Sp + 16] = _s3oti::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3oQL; else goto c3oMA;
       u3oQL: // global
           call _c3oMz(R1) args: 0, res: 0, upd: 0;
       c3oMA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3oQC: // global
           Sp = Sp + 8;
           call _s3osJ() args: 0, res: 0, upd: 0;
     }
 },
 _c3oLZ() //  [R1]
         { info_tbl: [(c3oLZ,
                       label: block_c3oLZ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oLZ: // global
           if (R1 & 7 == 5) goto c3oPx; else goto u3oQD;
       c3oPx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3oPA; else goto c3oPz;
       c3oPA: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oPz: // global
           _s3otc::P64 = P64[R1 + 3];
           I64[Hp - 32] = sat_s3oth_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3otc::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3oQD: // global
           Sp = Sp + 16;
           call _s3osJ() args: 0, res: 0, upd: 0;
     }
 },
 _c3oMz() //  [R1]
         { info_tbl: [(c3oMz,
                       label: block_c3oMz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oMz: // global
           _s3oti::P64 = P64[Sp + 8];
           _c3oQr::P64 = R1 & 7;
           if (_c3oQr::P64 < 5) goto u3oQy; else goto c3oPP;
       u3oQy: // global
           if (_c3oQr::P64 < 2) goto c3oPF; else goto c3oPK;
       c3oPF: // global
           Hp = Hp + 40;
           _s3otj::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3oPN; else goto c3oPH;
       c3oPH: // global
           I64[Hp - 32] = sat_s3oto_info;
           P64[Hp - 24] = _s3oti::P64;
           P64[Hp - 16] = _s3otj::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oPK: // global
           Hp = Hp + 40;
           _s3otj::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3oPN; else goto c3oPM;
       c3oPN: // global
           HpAlloc = 40;
           R1 = _s3otj::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oPM: // global
           _s3otp::P64 = P64[_s3otj::P64 + 6];
           I64[Hp - 32] = sat_s3otu_info;
           P64[Hp - 24] = _s3oti::P64;
           P64[Hp - 16] = _s3otp::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oPP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3oPS; else goto c3oPR;
       c3oPS: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oPR: // global
           _s3otv::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3otw_info;
           P64[Hp - 24] = _s3oti::P64;
           P64[Hp - 16] = _s3otv::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _s3osJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3osJ: // global
           _s3osI::P64 = P64[Sp];
           I64[Sp] = block_c3oKr_info;
           R1 = _s3osI::P64;
           if (R1 & 7 != 0) goto u3oQT; else goto c3oKs;
       u3oQT: // global
           call _c3oKr(R1) args: 0, res: 0, upd: 0;
       c3oKs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oKr() //  [R1]
         { info_tbl: [(c3oKr,
                       label: block_c3oKr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oKr: // global
           _s3osH::P64 = P64[Sp + 8];
           if (R1 & 7 == 5) goto c3oPg; else goto c3oOP;
       c3oPg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3oPj; else goto c3oPi;
       c3oPj: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oPi: // global
           _s3ot4::P64 = P64[R1 + 3];
           I64[Hp - 32] = sat_s3ot8_info;
           P64[Hp - 24] = _s3osH::P64;
           P64[Hp - 16] = _s3ot4::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oOP: // global
           I64[Sp] = block_c3oKw_info;
           _s3osL::P64 = R1;
           R1 = _s3osH::P64;
           P64[Sp + 8] = _s3osL::P64;
           if (R1 & 7 != 0) goto u3oQH; else goto c3oKx;
       u3oQH: // global
           call _c3oKw(R1) args: 0, res: 0, upd: 0;
       c3oKx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oKw() //  [R1]
         { info_tbl: [(c3oKw,
                       label: block_c3oKw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oKw: // global
           _s3osL::P64 = P64[Sp + 8];
           if (R1 & 7 == 2) goto c3oP3; else goto c3oOS;
       c3oP3: // global
           I64[Sp] = block_c3oKU_info;
           _s3osT::P64 = P64[R1 + 6];
           R1 = _s3osL::P64;
           P64[Sp + 8] = _s3osT::P64;
           if (R1 & 7 != 0) goto u3oQJ; else goto c3oKV;
       u3oQJ: // global
           call _c3oKU(R1) args: 0, res: 0, upd: 0;
       c3oKV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3oOS: // global
           I64[Sp] = block_c3oKB_info;
           _s3osM::P64 = R1;
           R1 = _s3osL::P64;
           P64[Sp + 8] = _s3osM::P64;
           if (R1 & 7 != 0) goto u3oQI; else goto c3oKC;
       u3oQI: // global
           call _c3oKB(R1) args: 0, res: 0, upd: 0;
       c3oKC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oKU() //  [R1]
         { info_tbl: [(c3oKU,
                       label: block_c3oKU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oKU: // global
           _s3osT::P64 = P64[Sp + 8];
           if (R1 & 7 < 2) goto c3oP6; else goto c3oPb;
       c3oP6: // global
           Hp = Hp + 40;
           _s3osU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3oPe; else goto c3oP8;
       c3oP8: // global
           I64[Hp - 32] = sat_s3osY_info;
           P64[Hp - 24] = _s3osT::P64;
           P64[Hp - 16] = _s3osU::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oPb: // global
           Hp = Hp + 40;
           _s3osU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3oPe; else goto c3oPd;
       c3oPe: // global
           HpAlloc = 40;
           R1 = _s3osU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oPd: // global
           _s3osZ::P64 = P64[_s3osU::P64 + 6];
           I64[Hp - 32] = sat_s3ot3_info;
           P64[Hp - 24] = _s3osT::P64;
           P64[Hp - 16] = _s3osZ::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3oKB() //  [R1]
         { info_tbl: [(c3oKB,
                       label: block_c3oKB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oKB: // global
           if (R1 & 7 < 2) goto c3oOW; else goto c3oOY;
       c3oOW: // global
           R1 = lvl1_r3oqF_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3oOY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3oP1; else goto c3oP0;
       c3oP1: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oP0: // global
           _s3osP::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_s3osS_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3osP::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.73654435 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info;
         const 0;
 },
 sat_s3otR_entry() //  [R1, R2]
         { info_tbl: [(c3oRa,
                       label: sat_s3otR_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oRa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oRb; else goto c3oRc;
       c3oRb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oRc: // global
           I64[Sp - 16] = block_c3oR8_info;
           R2 = R2;
           _s3otM::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3otM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oR8() //  [R1]
         { info_tbl: [(c3oR8,
                       label: block_c3oR8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oR8: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otV_entry() //  [R1, R2]
         { info_tbl: [(c3oRp,
                       label: sat_s3otV_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oRp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oRq; else goto c3oRr;
       c3oRq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oRr: // global
           I64[Sp - 16] = block_c3oRn_info;
           R2 = R2;
           _s3otM::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3otM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oRn() //  [R1]
         { info_tbl: [(c3oRn,
                       label: block_c3oRn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oRn: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otZ_entry() //  [R1]
         { info_tbl: [(c3oRC,
                       label: sat_s3otZ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oRC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oRD; else goto c3oRE;
       c3oRD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oRE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oub_entry() //  [R1]
         { info_tbl: [(c3oS1,
                       label: sat_s3oub_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oS1: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_s3ou1_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 go_s3ou1_entry() //  [R1, R2]
         { info_tbl: [(c3oS8,
                       label: go_s3ou1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oS8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3oS9; else goto c3oSa;
       c3oS9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oSa: // global
           I64[Sp - 24] = block_c3oRM_info;
           _s3ou1::P64 = R1;
           _s3otM::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3otM::P64;
           P64[Sp - 8] = _s3ou1::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3oSs; else goto c3oRN;
       u3oSs: // global
           call _c3oRM(R1) args: 0, res: 0, upd: 0;
       c3oRN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oRM() //  [R1]
         { info_tbl: [(c3oRM,
                       label: block_c3oRM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oRM: // global
           if (R1 & 7 == 1) goto c3oS5; else goto c3oS6;
       c3oS5: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oS6: // global
           I64[Sp - 8] = block_c3oRS_info;
           _s3ou5::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3ou5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3oSr; else goto c3oRT;
       u3oSr: // global
           call _c3oRS(R1) args: 0, res: 0, upd: 0;
       c3oRT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oRS() //  [R1]
         { info_tbl: [(c3oRS,
                       label: block_c3oRS_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oRS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3oSl; else goto c3oSk;
       c3oSl: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oSk: // global
           _s3ou7::P64 = P64[R1 + 7];
           _s3ou8::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3oub_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3oSd_info;
           R2 = _s3ou7::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3ou8::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oSd() //  [R1]
         { info_tbl: [(c3oSd,
                       label: block_c3oSd_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oSd: // global
           _s3ou8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3oSh_info;
           R3 = _s3ou8::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3oSh() //  [R1]
         { info_tbl: [(c3oSh,
                       label: block_c3oSh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oSh: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c3oSA,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oSA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oSB; else goto c3oSC;
       c3oSB: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oSC: // global
           I64[Sp - 16] = block_c3oQY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3oTj; else goto c3oQZ;
       u3oTj: // global
           call _c3oQY(R1) args: 0, res: 0, upd: 0;
       c3oQZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oQY() //  [R1]
         { info_tbl: [(c3oQY,
                       label: block_c3oQY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oQY: // global
           _s3otM::P64 = P64[Sp + 8];
           _c3oSz::P64 = R1 & 7;
           if (_c3oSz::P64 < 4) goto u3oTd; else goto u3oTf;
       u3oTd: // global
           if (_c3oSz::P64 < 3) goto u3oTe; else goto u3oTg;
       u3oTe: // global
           if (_c3oSz::P64 < 2) goto c3oSu; else goto c3oSv;
       c3oSu: // global
           Hp = Hp + 40;
           _s3otN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3oSK; else goto c3oSF;
       c3oSF: // global
           _s3otO::P64 = P64[_s3otN::P64 + 7];
           I64[Hp - 32] = sat_s3otR_info;
           P64[Hp - 24] = _s3otM::P64;
           P64[Hp - 16] = _s3otO::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oSv: // global
           Hp = Hp + 40;
           _s3otN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3oSK; else goto c3oSJ;
       c3oSK: // global
           HpAlloc = 40;
           R1 = _s3otN::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oSJ: // global
           _s3otS::P64 = P64[_s3otN::P64 + 6];
           I64[Hp - 32] = sat_s3otV_info;
           P64[Hp - 24] = _s3otM::P64;
           P64[Hp - 16] = _s3otS::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3oTg: // global
           Sp = Sp + 16;
           call _c3oT4() args: 0, res: 0, upd: 0;
       u3oTf: // global
           if (_c3oSz::P64 < 5) goto c3oSx; else goto c3oSy;
       c3oSx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3oSQ; else goto c3oSP;
       c3oSQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oSP: // global
           _s3otW::P64 = P64[R1 + 4];
           _s3otX::P64 = P64[R1 + 12];
           I64[Hp - 24] = sat_s3otZ_info;
           P64[Hp - 8] = _s3otM::P64;
           P64[Hp] = _s3otX::P64;
           I64[Sp] = block_c3oSN_info;
           R2 = _s3otW::P64;
           R1 = _s3otM::P64;
           P64[Sp + 8] = Hp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3oSy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3oSY; else goto c3oSX;
       c3oSY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oSX: // global
           _s3ou0::P64 = P64[R1 + 3];
           I64[Hp - 8] = go_s3ou1_info;
           P64[Hp] = _s3otM::P64;
           I64[Sp + 8] = block_c3oSV_info;
           R2 = _s3ou0::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s3ou1_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oSN() //  [R1]
         { info_tbl: [(c3oSN,
                       label: block_c3oSN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oSN: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3oSV() //  [R1]
         { info_tbl: [(c3oSV,
                       label: block_c3oSV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oSV: // global
           if (R1 & 7 == 1) goto u3oTh; else goto c3oT8;
       u3oTh: // global
           Sp = Sp + 8;
           call _c3oT4() args: 0, res: 0, upd: 0;
       c3oT8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3oTb; else goto c3oTa;
       c3oTb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oTa: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R1;
           R1 = Hp - 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3oT4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oT4: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.742389816 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info;
         const 0;
 },
 sat_s3ouk_entry() //  [R1, R2]
         { info_tbl: [(c3oTB,
                       label: sat_s3ouk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oTB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3oTF; else goto c3oTE;
       c3oTF: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oTE: // global
           _s3ouh::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ouh::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oul_entry() //  [R1, R2]
         { info_tbl: [(c3oTG,
                       label: sat_s3oul_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oTG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3oTK; else goto c3oTJ;
       c3oTK: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oTJ: // global
           _s3oug::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s3ouk_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = _s3oug::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c3oTL,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oTL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3oTP; else goto c3oTO;
       c3oTP: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oTO: // global
           I64[Hp - 8] = sat_s3oul_info;
           P64[Hp] = R3;
           R3 = Hp - 7;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.744394174 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info;
         const 0;
 },
 sat_s3ouo_entry() //  [R1]
         { info_tbl: [(c3oTY,
                       label: sat_s3ouo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oTY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oTZ; else goto c3oU0;
       c3oTZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oU0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_entry() //  [R2,
                                                                   R3]
         { info_tbl: [(c3oU1,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oU1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3oU5; else goto c3oU4;
       c3oU5: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oU4: // global
           I64[Hp - 24] = sat_s3ouo_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.746733227 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP1_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP1_closure:
         const Text.ParserCombinators.ReadP.Result_con_info;
         const GHC.Types.[]_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.748286636 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info;
         const 0;
 },
 m2_s3our_entry() //  [R1]
         { info_tbl: [(c3oUi,
                       label: m2_s3our_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oUi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oUj; else goto c3oUk;
       c3oUj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oUk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fAlternativeP1_closure+4;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ouw_entry() //  [R1, R2]
         { info_tbl: [(c3oUx,
                       label: sat_s3ouw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oUx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3oUB; else goto c3oUA;
       c3oUB: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oUA: // global
           _s3out::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3out::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oux_entry() //  [R1, R2]
         { info_tbl: [(c3oUC,
                       label: sat_s3oux_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oUC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3oUG; else goto c3oUF;
       c3oUG: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oUF: // global
           _s3our::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s3ouw_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = _s3our::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 some_v_s3ouq_entry() //  [R1]
         { info_tbl: [(c3oUJ,
                       label: some_v_s3ouq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oUJ: // global
           _s3ouq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3oUK; else goto c3oUL;
       c3oUL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3oUN; else goto c3oUM;
       c3oUN: // global
           HpAlloc = 40;
           goto c3oUK;
       c3oUK: // global
           R1 = _s3ouq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oUM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ouq::P64;
           _s3oup::P64 = P64[_s3ouq::P64 + 16];
           I64[Hp - 32] = m2_s3our_info;
           P64[Hp - 16] = _s3ouq::P64;
           I64[Hp - 8] = sat_s3oux_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 32] = block_c3oUH_info;
           R3 = _s3oup::P64;
           R2 = GHC.Types.:_closure+2;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3oUH() //  [R1]
         { info_tbl: [(c3oUH,
                       label: block_c3oUH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oUH: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$csome_entry() //  [R2]
         { info_tbl: [(c3oUR,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oUR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3oUV; else goto c3oUU;
       c3oUV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oUU: // global
           I64[Hp - 16] = some_v_s3ouq_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.750945651 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info;
         const 0;
 },
 sat_s3ouz_entry() //  [R1]
         { info_tbl: [(c3oV4,
                       label: sat_s3ouz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oV4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oV5; else goto c3oV6;
       c3oV5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oV6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_entry() //  [R2]
         { info_tbl: [(c3oV7,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oV7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3oVb; else goto c3oVa;
       c3oVb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oVa: // global
           I64[Hp - 16] = sat_s3ouz_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.752286947 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3oVi,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oVi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oVj; else goto c3oVk;
       c3oVj: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oVk: // global
           I64[Sp - 16] = block_c3oVg_info;
           _s3ouB::P64 = R3;
           R3 = R2;
           R2 = GHC.Base.breakpoint_closure+1;
           P64[Sp - 8] = _s3ouB::P64;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3oVg() //  [R1]
         { info_tbl: [(c3oVg,
                       label: block_c3oVg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oVg: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.753755666 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info;
         const 0;
 },
 many_v_s3ouE_entry() //  [R1]
         { info_tbl: [(c3oVy,
                       label: many_v_s3ouE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oVy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3oVC; else goto c3oVD;
       c3oVC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oVD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3oVw_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Types.:_closure+2;
           P64[Sp - 24] = R1;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3oVw() //  [R1]
         { info_tbl: [(c3oVw,
                       label: block_c3oVw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oVw: // global
           _s3ouE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3oVB_info;
           R3 = _s3ouE::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3oVB() //  [R1]
         { info_tbl: [(c3oVB,
                       label: block_c3oVB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oVB: // global
           R3 = Text.ParserCombinators.ReadP.$fAlternativeP1_closure+4;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_entry() //  [R2]
         { info_tbl: [(c3oVJ,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oVJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3oVN; else goto c3oVM;
       c3oVN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oVM: // global
           I64[Hp - 16] = many_v_s3ouE_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.755505921 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure" {
     Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure:
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_info;
         const 0;
 },
 sat_s3ouK_entry() //  [R1]
         { info_tbl: [(c3oVX,
                       label: sat_s3ouK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oVX: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fMonadP_$c>>_entry() //  [R2, R3]
         { info_tbl: [(c3oW0,
                       label: Text.ParserCombinators.ReadP.$fMonadP_$c>>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oW0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3oW4; else goto c3oW3;
       c3oW4: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oW3: // global
           I64[Hp - 8] = sat_s3ouK_info;
           P64[Hp] = R3;
           R3 = Hp - 7;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.756586656 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorP_closure+1;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.75720593 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadP_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure+2;
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.757973701 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeP_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure+2;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.758973422 UTC

[section ""data" . Text.ParserCombinators.ReadP.readP_to_S_closure" {
     Text.ParserCombinators.ReadP.readP_to_S_closure:
         const Text.ParserCombinators.ReadP.readP_to_S_info;
 },
 sat_s3ouM_entry() //  [R1]
         { info_tbl: [(c3oWd,
                       label: sat_s3ouM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oWd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oWe; else goto c3oWf;
       c3oWe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oWf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.readP_to_S_entry() //  [R2]
         { info_tbl: [(c3oWg,
                       label: Text.ParserCombinators.ReadP.readP_to_S_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oWg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3oWk; else goto c3oWj;
       c3oWk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.readP_to_S_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oWj: // global
           I64[Hp - 16] = sat_s3ouM_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.760115763 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailP_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailP_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadP.$fMonadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.76071595 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadPlusP_closure" {
     Text.ParserCombinators.ReadP.$fMonadPlusP_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadP_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.761584874 UTC

[section ""data" . Text.ParserCombinators.ReadP.get_closure" {
     Text.ParserCombinators.ReadP.get_closure:
         const Text.ParserCombinators.ReadP.get_info;
 },
 Text.ParserCombinators.ReadP.get_entry() //  [R2]
         { info_tbl: [(c3oWq,
                       label: Text.ParserCombinators.ReadP.get_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oWq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3oWu; else goto c3oWt;
       c3oWu: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.get_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oWt: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.76263157 UTC

[section ""data" . Text.ParserCombinators.ReadP.look_closure" {
     Text.ParserCombinators.ReadP.look_closure:
         const Text.ParserCombinators.ReadP.look_info;
 },
 Text.ParserCombinators.ReadP.look_entry() //  [R2]
         { info_tbl: [(c3oWA,
                       label: Text.ParserCombinators.ReadP.look_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oWA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3oWE; else goto c3oWD;
       c3oWE: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.look_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oWD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.763599691 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_info;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry() //  []
         { info_tbl: [(c3oWJ,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oWJ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.764498771 UTC

[section ""data" . Text.ParserCombinators.ReadP.pfail_closure" {
     Text.ParserCombinators.ReadP.pfail_closure:
         const Text.ParserCombinators.ReadP.pfail_info;
 },
 Text.ParserCombinators.ReadP.pfail_entry() //  [R2]
         { info_tbl: [(c3oWQ,
                       label: Text.ParserCombinators.ReadP.pfail_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oWQ: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.765595656 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3oX0,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oX0: // global
           _s3ouQ::P64 = R4;
           _s3ouP::P64 = R3;
           _s3ouO::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3oX1; else goto c3oX2;
       c3oX2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3oX4; else goto c3oX3;
       c3oX4: // global
           HpAlloc = 32;
           goto c3oX1;
       c3oX1: // global
           R4 = _s3ouQ::P64;
           R3 = _s3ouP::P64;
           R2 = _s3ouO::P64;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oX3: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ouP::P64;
           P64[Hp] = _s3ouQ::P64;
           I64[Sp - 16] = block_c3oWY_info;
           R2 = _s3ouQ::P64;
           R1 = _s3ouO::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oWY() //  [R1]
         { info_tbl: [(c3oWY,
                       label: block_c3oWY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oWY: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.76695241 UTC

[section ""data" . Text.ParserCombinators.ReadP.+++_closure" {
     Text.ParserCombinators.ReadP.+++_closure:
         const Text.ParserCombinators.ReadP.+++_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.+++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3oXc,
                       label: Text.ParserCombinators.ReadP.+++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oXc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.768696768 UTC

[section ""data" . Text.ParserCombinators.ReadP.choice_closure" {
     Text.ParserCombinators.ReadP.choice_closure:
         const Text.ParserCombinators.ReadP.choice_info;
         const 0;
 },
 ds2_s3ov0_entry() //  [R1]
         { info_tbl: [(c3oXz,
                       label: ds2_s3ov0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oXz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oXA; else goto c3oXB;
       c3oXA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oXB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.choice_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ov4_entry() //  [R1, R2]
         { info_tbl: [(c3oXK,
                       label: sat_s3ov4_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oXK: // global
           _s3ov1::P64 = R2;
           _s3ov4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3oXL; else goto c3oXM;
       c3oXM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3oXO; else goto c3oXN;
       c3oXO: // global
           HpAlloc = 32;
           goto c3oXL;
       c3oXL: // global
           R2 = _s3ov1::P64;
           R1 = _s3ov4::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oXN: // global
           _s3ouV::P64 = P64[_s3ov4::P64 + 7];
           _s3ov0::P64 = P64[_s3ov4::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ov0::P64;
           P64[Hp] = _s3ov1::P64;
           I64[Sp - 16] = block_c3oXI_info;
           R2 = _s3ov1::P64;
           R1 = _s3ouV::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oXI() //  [R1]
         { info_tbl: [(c3oXI,
                       label: block_c3oXI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oXI: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.choice_entry() //  [R2]
         { info_tbl: [(c3oXW,
                       label: Text.ParserCombinators.ReadP.choice_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oXW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oXX; else goto c3oXY;
       c3oXX: // global
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.choice_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oXY: // global
           I64[Sp - 8] = block_c3oXj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3oYc; else goto c3oXk;
       u3oYc: // global
           call _c3oXj(R1) args: 0, res: 0, upd: 0;
       c3oXk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oXj() //  [R1]
         { info_tbl: [(c3oXj,
                       label: block_c3oXj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oXj: // global
           if (R1 & 7 == 1) goto c3oXT; else goto c3oXU;
       c3oXT: // global
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oXU: // global
           I64[Sp - 8] = block_c3oXp_info;
           _s3ouV::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3ouV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3oYb; else goto c3oXq;
       u3oYb: // global
           call _c3oXp(R1) args: 0, res: 0, upd: 0;
       c3oXq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oXp() //  [R1]
         { info_tbl: [(c3oXp,
                       label: block_c3oXp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oXp: // global
           _s3ouV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3oY5; else goto c3oY6;
       c3oY5: // global
           R1 = _s3ouV::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c3oY6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3oY9; else goto c3oY8;
       c3oY9: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oY8: // global
           I64[Hp - 40] = ds2_s3ov0_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s3ov4_info;
           P64[Hp - 8] = _s3ouV::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.771939001 UTC

[section ""cstring" . lvl2_r3oqG_bytes" {
     lvl2_r3oqG_bytes:
         I8[] [100,111,32,110,111,116,32,117,115,101,32,114,101,97,100,83,95,116,111,95,80,32,105,110,32,103,97,116,104,101,114,33]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.772875805 UTC

[section ""data" . lvl3_r3oqH_closure" {
     lvl3_r3oqH_closure:
         const lvl3_r3oqH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r3oqH_entry() //  [R1]
         { info_tbl: [(c3oYl,
                       label: lvl3_r3oqH_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oYl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3oYm; else goto c3oYn;
       c3oYm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oYn: // global
           (_c3oYg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3oYg::I64 == 0) goto c3oYi; else goto c3oYh;
       c3oYi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3oYh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3oYg::I64;
           I64[Sp - 24] = block_c3oYj_info;
           R2 = lvl2_r3oqG_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3oYj() //  [R1]
         { info_tbl: [(c3oYj,
                       label: block_c3oYj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oYj: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.775628726 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather_gath_closure" {
     Text.ParserCombinators.ReadP.gather_gath_closure:
         const Text.ParserCombinators.ReadP.gather_gath_info;
         const 0;
 },
 sat_s3ovd_entry() //  [R1, R2]
         { info_tbl: [(c3oYP,
                       label: sat_s3ovd_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oYP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3oYT; else goto c3oYS;
       c3oYT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oYS: // global
           _s3ov6::P64 = P64[R1 + 7];
           _s3ova::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3ova::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3ov6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovf_entry() //  [R1, R2]
         { info_tbl: [(c3oYU,
                       label: sat_s3ovf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oYU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3oYV; else goto c3oYW;
       c3oYV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oYW: // global
           I64[Sp - 24] = block_c3oYF_info;
           _s3ova::P64 = R2;
           R2 = R2;
           _s3ov6::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _s3ov6::P64;
           P64[Sp - 8] = _s3ova::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oYF() //  [R1]
         { info_tbl: [(c3oYF,
                       label: block_c3oYF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oYF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3oYZ; else goto c3oYY;
       c3oYZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oYY: // global
           I64[Hp - 16] = sat_s3ovd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R3 = R1;
           R2 = Hp - 15;
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovj_entry() //  [R1, R2]
         { info_tbl: [(c3oZ9,
                       label: sat_s3ovj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oZ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oZa; else goto c3oZb;
       c3oZa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3oZb: // global
           I64[Sp - 16] = block_c3oZ7_info;
           R2 = R2;
           _s3ov6::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3ov6::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oZ7() //  [R1]
         { info_tbl: [(c3oZ7,
                       label: block_c3oZ7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oZ7: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovo_entry() //  [R1]
         { info_tbl: [(c3oZm,
                       label: sat_s3ovo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oZm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oZn; else goto c3oZo;
       c3oZn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oZo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ovm_entry() //  [R1]
         { info_tbl: [(c3oZt,
                       label: sat_s3ovm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oZt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oZu; else goto c3oZv;
       c3oZu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3oZv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.gather_gath_entry() //  [R2, R3]
         { info_tbl: [(c3oZD,
                       label: Text.ParserCombinators.ReadP.gather_gath_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oZD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3oZE; else goto c3oZF;
       c3oZE: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.gather_gath_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3oZF: // global
           I64[Sp - 16] = block_c3oYv_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3p04; else goto c3oYw;
       u3p04: // global
           call _c3oYv(R1) args: 0, res: 0, upd: 0;
       c3oYw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3oYv() //  [R1]
         { info_tbl: [(c3oYv,
                       label: block_c3oYv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oYv: // global
           _s3ov6::P64 = P64[Sp + 8];
           _c3oZC::P64 = R1 & 7;
           if (_c3oZC::P64 < 4) goto u3p01; else goto u3p03;
       u3p01: // global
           if (_c3oZC::P64 < 3) goto u3p02; else goto c3oZz;
       u3p02: // global
           if (_c3oZC::P64 < 2) goto c3oZx; else goto c3oZy;
       c3oZx: // global
           Hp = Hp + 40;
           _s3ov8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3oZN; else goto c3oZI;
       c3oZI: // global
           _s3ov9::P64 = P64[_s3ov8::P64 + 7];
           I64[Hp - 32] = sat_s3ovf_info;
           P64[Hp - 24] = _s3ov6::P64;
           P64[Hp - 16] = _s3ov9::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oZy: // global
           Hp = Hp + 40;
           _s3ov8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3oZN; else goto c3oZM;
       c3oZN: // global
           HpAlloc = 40;
           R1 = _s3ov8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oZM: // global
           _s3ovg::P64 = P64[_s3ov8::P64 + 6];
           I64[Hp - 32] = sat_s3ovj_info;
           P64[Hp - 24] = _s3ov6::P64;
           P64[Hp - 16] = _s3ovg::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3oZz: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3p03: // global
           if (_c3oZC::P64 < 5) goto c3oZA; else goto c3oZB;
       c3oZA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3oZT; else goto c3oZS;
       c3oZT: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3oZS: // global
           _s3ovk::P64 = P64[R1 + 4];
           _s3ovl::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3ovo_info;
           P64[Hp - 32] = _s3ov6::P64;
           P64[Hp - 24] = _s3ovl::P64;
           I64[Hp - 16] = sat_s3ovm_info;
           P64[Hp] = _s3ov6::P64;
           I64[Sp] = block_c3oZQ_info;
           R2 = Hp - 16;
           R1 = _s3ovk::P64;
           P64[Sp + 8] = Hp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3oZB: // global
           R1 = lvl3_r3oqH_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3oZQ() //  [R1]
         { info_tbl: [(c3oZQ,
                       label: block_c3oZQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3oZQ: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.780125496 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather1_closure" {
     Text.ParserCombinators.ReadP.gather1_closure:
         const Text.ParserCombinators.ReadP.gather1_info;
         const 0;
 },
 sat_s3ovv_entry() //  [R1, R2]
         { info_tbl: [(c3p0k,
                       label: sat_s3ovv_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p0k: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p0o; else goto c3p0n;
       c3p0o: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p0n: // global
           _s3ovr::P64 = P64[R1 + 7];
           _s3ovs::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = _s3ovs::P64;
           R2 = Hp - 15;
           R1 = _s3ovr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovw_entry() //  [R1, R2]
         { info_tbl: [(c3p0q,
                       label: sat_s3ovw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p0q: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3p0u; else goto c3p0t;
       c3p0u: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p0t: // global
           _s3ovr::P64 = P64[R1 + 7];
           I64[Hp - 40] = sat_s3ovv_info;
           P64[Hp - 32] = _s3ovr::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.gather1_entry() //  [R2, R3]
         { info_tbl: [(c3p0x,
                       label: Text.ParserCombinators.ReadP.gather1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p0x: // global
           _s3ovr::P64 = R3;
           _s3ovq::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3p0y; else goto c3p0z;
       c3p0z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3p0B; else goto c3p0A;
       c3p0B: // global
           HpAlloc = 16;
           goto c3p0y;
       c3p0y: // global
           R3 = _s3ovr::P64;
           R2 = _s3ovq::P64;
           R1 = Text.ParserCombinators.ReadP.gather1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p0A: // global
           I64[Hp - 8] = sat_s3ovw_info;
           P64[Hp] = _s3ovr::P64;
           I64[Sp - 8] = block_c3p0v_info;
           R2 = Hp - 7;
           R1 = _s3ovq::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3p0v() //  [R1]
         { info_tbl: [(c3p0v,
                       label: block_c3p0v_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p0v: // global
           R3 = R1;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.782824799 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather_closure" {
     Text.ParserCombinators.ReadP.gather_closure:
         const Text.ParserCombinators.ReadP.gather_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.gather_entry() //  [R2, R3]
         { info_tbl: [(c3p0J,
                       label: Text.ParserCombinators.ReadP.gather_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p0J: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.gather1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.784038043 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$trModule4_bytes" {
     Text.ParserCombinators.ReadP.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.784989092 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule3_closure" {
     Text.ParserCombinators.ReadP.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.785945858 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$trModule2_bytes" {
     Text.ParserCombinators.ReadP.$trModule2_bytes:
         I8[] [84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.786822381 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule1_closure" {
     Text.ParserCombinators.ReadP.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.787661002 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule_closure" {
     Text.ParserCombinators.ReadP.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.ParserCombinators.ReadP.$trModule3_closure+1;
         const Text.ParserCombinators.ReadP.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.788651073 UTC

[section ""data" . $krep_r3oqI_closure" {
     $krep_r3oqI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.789686367 UTC

[section ""data" . $krep1_r3oqJ_closure" {
     $krep1_r3oqJ_closure:
         const :_con_info;
         const $krep_r3oqI_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.790621549 UTC

[section ""data" . $krep2_r3oqK_closure" {
     $krep2_r3oqK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r3oqJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.791734927 UTC

[section ""data" . $krep3_r3oqL_closure" {
     $krep3_r3oqL_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.792772286 UTC

[section ""data" . $krep4_r3oqM_closure" {
     $krep4_r3oqM_closure:
         const :_con_info;
         const $krep2_r3oqK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.793838431 UTC

[section ""data" . $krep5_r3oqN_closure" {
     $krep5_r3oqN_closure:
         const :_con_info;
         const $krep3_r3oqL_closure+2;
         const $krep4_r3oqM_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.794831803 UTC

[section ""data" . $krep6_r3oqO_closure" {
     $krep6_r3oqO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep5_r3oqN_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.796487269 UTC

[section ""data" . $krep7_r3oqP_closure" {
     $krep7_r3oqP_closure:
         const :_con_info;
         const $krep6_r3oqO_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.797130911 UTC

[section ""data" . $krep8_r3oqQ_closure" {
     $krep8_r3oqQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep7_r3oqP_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.797744223 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tcP2_bytes" {
     Text.ParserCombinators.ReadP.$tcP2_bytes:
         I8[] [80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.798270917 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcP1_closure" {
     Text.ParserCombinators.ReadP.$tcP1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tcP2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.798833521 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcP_closure" {
     Text.ParserCombinators.ReadP.$tcP_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tcP1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 4287589432649596960;
         const 9029773818181158220;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.799452768 UTC

[section ""data" . $krep9_r3oqR_closure" {
     $krep9_r3oqR_closure:
         const :_con_info;
         const $krep3_r3oqL_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.800028206 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail1_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadP.$tcP_closure+1;
         const $krep9_r3oqR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.800556077 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Fail3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Fail3_bytes:
         I8[] [39,70,97,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.801193043 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail2_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Fail3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.801828502 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 16564457091671581868;
         const 4540703186775139959;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.802464662 UTC

[section ""data" . $krep10_r3oqS_closure" {
     $krep10_r3oqS_closure:
         const GHC.Types.KindRepFun_con_info;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.803013757 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result1_closure" {
     Text.ParserCombinators.ReadP.$tc'Result1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3oqL_closure+2;
         const $krep10_r3oqS_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.803615069 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Result3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Result3_bytes:
         I8[] [39,82,101,115,117,108,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.804301525 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result2_closure" {
     Text.ParserCombinators.ReadP.$tc'Result2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Result3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.805043995 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result_closure" {
     Text.ParserCombinators.ReadP.$tc'Result_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Result2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Result1_closure+4;
         const 14629176799732153257;
         const 2029199220309899277;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.805885365 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final1_closure" {
     Text.ParserCombinators.ReadP.$tc'Final1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r3oqQ_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.80648272 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Final3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Final3_bytes:
         I8[] [39,70,105,110,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.807002844 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final2_closure" {
     Text.ParserCombinators.ReadP.$tc'Final2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Final3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.807564784 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final_closure" {
     Text.ParserCombinators.ReadP.$tc'Final_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Final2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Final1_closure+4;
         const 9825883373667767852;
         const 1277540149077833820;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.808194807 UTC

[section ""data" . $krep11_r3oqT_closure" {
     $krep11_r3oqT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3oqK_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.809096102 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look1_closure" {
     Text.ParserCombinators.ReadP.$tc'Look1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r3oqT_closure+4;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.809907151 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Look3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Look3_bytes:
         I8[] [39,76,111,111,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.810474416 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look2_closure" {
     Text.ParserCombinators.ReadP.$tc'Look2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Look3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.811265681 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look_closure" {
     Text.ParserCombinators.ReadP.$tc'Look_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Look2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Look1_closure+4;
         const 11302519862508684236;
         const 969530656846011597;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.811929791 UTC

[section ""data" . $krep12_r3oqU_closure" {
     $krep12_r3oqU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3oqI_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.812522757 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get1_closure" {
     Text.ParserCombinators.ReadP.$tc'Get1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r3oqU_closure+4;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.813078141 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Get3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Get3_bytes:
         I8[] [39,71,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.813698059 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get2_closure" {
     Text.ParserCombinators.ReadP.$tc'Get2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Get3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.814328391 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get_closure" {
     Text.ParserCombinators.ReadP.$tc'Get_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Get2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Get1_closure+4;
         const 10806119809527641225;
         const 14618661019746688366;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.815014904 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tcReadP2_bytes" {
     Text.ParserCombinators.ReadP.$tcReadP2_bytes:
         I8[] [82,101,97,100,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.816274865 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcReadP1_closure" {
     Text.ParserCombinators.ReadP.$tcReadP1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tcReadP2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.816847916 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcReadP_closure" {
     Text.ParserCombinators.ReadP.$tcReadP_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tcReadP1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15640243629783811470;
         const 8988027559298507146;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.81828533 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_info;
 },
 sat_s3ovE_entry() //  [R1, R2]
         { info_tbl: [(c3p11,
                       label: sat_s3ovE_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p11: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3p15; else goto c3p14;
       c3p15: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p14: // global
           _s3ovA::P64 = P64[R1 + 7];
           _s3ovB::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ovB::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3ovA::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovF_entry() //  [R1, R2]
         { info_tbl: [(c3p16,
                       label: sat_s3ovF_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p16: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p1a; else goto c3p19;
       c3p1a: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p19: // global
           _s3ovz::P64 = P64[R1 + 7];
           _s3ovA::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ovE_info;
           P64[Hp - 8] = _s3ovA::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3ovz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP4_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3p1b,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p1b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p1f; else goto c3p1e;
       c3p1f: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p1e: // global
           I64[Hp - 16] = sat_s3ovF_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3ovy::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ovy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.820404554 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_info;
 },
 sat_s3ovL_entry() //  [R1, R2]
         { info_tbl: [(c3p1t,
                       label: sat_s3ovL_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p1t: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3ovJ_entry() //  [R1]
         { info_tbl: [(c3p1w,
                       label: lvl4_s3ovJ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p1w: // global
           _s3ovJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3p1x; else goto c3p1y;
       c3p1y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3p1A; else goto c3p1z;
       c3p1A: // global
           HpAlloc = 16;
           goto c3p1x;
       c3p1x: // global
           R1 = _s3ovJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3p1z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ovJ::P64;
           _s3ovH::P64 = P64[_s3ovJ::P64 + 16];
           _s3ovI::P64 = P64[_s3ovJ::P64 + 24];
           I64[Hp - 8] = sat_s3ovL_info;
           P64[Hp] = _s3ovI::P64;
           R2 = Hp - 7;
           R1 = _s3ovH::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ovN_entry() //  [R1]
         { info_tbl: [(c3p1G,
                       label: sat_s3ovN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p1G: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP2_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3p1J,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p1J: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3p1N; else goto c3p1M;
       c3p1N: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p1M: // global
           I64[Hp - 40] = lvl4_s3ovJ_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3ovN_info;
           P64[Hp] = Hp - 40;
           _s3ovG::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3ovG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.822954865 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_info;
 },
 sat_s3ovW_entry() //  [R1, R2]
         { info_tbl: [(c3p24,
                       label: sat_s3ovW_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p24: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3p28; else goto c3p27;
       c3p28: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p27: // global
           _s3ovR::P64 = P64[R1 + 7];
           _s3ovT::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ovT::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3ovR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovX_entry() //  [R1, R2]
         { info_tbl: [(c3p29,
                       label: sat_s3ovX_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p29: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3p2d; else goto c3p2c;
       c3p2d: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p2c: // global
           _s3ovO::P64 = P64[R1 + 7];
           _s3ovQ::P64 = P64[R1 + 15];
           _s3ovR::P64 = P64[R1 + 23];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ovO::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3ovW_info;
           P64[Hp - 8] = _s3ovR::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 15;
           R1 = _s3ovQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP3_entry() //  [R2,
                                                               R3, R4, R5]
         { info_tbl: [(c3p2e,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p2e: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3p2i; else goto c3p2h;
       c3p2i: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p2h: // global
           I64[Hp - 24] = sat_s3ovX_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 23;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.825219301 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_info;
 },
 sat_s3ow4_entry() //  [R1]
         { info_tbl: [(c3p2y,
                       label: sat_s3ow4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p2y: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ow5_entry() //  [R1, R2]
         { info_tbl: [(c3p2B,
                       label: sat_s3ow5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p2B: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3p2F; else goto c3p2E;
       c3p2F: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p2E: // global
           _s3ovZ::P64 = P64[R1 + 7];
           _s3ow0::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3ow0::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3ow4_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3ovZ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP1_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3p2G,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p2G: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p2K; else goto c3p2J;
       c3p2K: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p2J: // global
           I64[Hp - 16] = sat_s3ow5_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3ovY::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ovY::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.827042809 UTC

[section ""data" . $c>>_r3oqV_closure" {
     $c>>_r3oqV_closure:
         const $c>>_r3oqV_info;
 },
 sat_s3owb_entry() //  [R1]
         { info_tbl: [(c3p2V,
                       label: sat_s3owb_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p2V: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $c>>_r3oqV_entry() //  [R2, R3, R4]
         { info_tbl: [(c3p2Y,
                       label: $c>>_r3oqV_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p2Y: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3p32; else goto c3p31;
       c3p32: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $c>>_r3oqV_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p31: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3owb_info;
           P64[Hp] = Hp - 40;
           _s3ow6::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3ow6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.82827742 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure:
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info;
 },
 Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_entry() //  [R2, R3,
                                                             R4]
         { info_tbl: [(c3p37,
                       label: Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p37: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $c>>_r3oqV_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.829091348 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure+4;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.830082544 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadReadP1_closure+3;
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure+2;
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.831623349 UTC

[section ""data" . Text.ParserCombinators.ReadP.between1_closure" {
     Text.ParserCombinators.ReadP.between1_closure:
         const Text.ParserCombinators.ReadP.between1_info;
 },
 sat_s3owk_entry() //  [R1]
         { info_tbl: [(c3p3t,
                       label: sat_s3owk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p3t: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3owl_entry() //  [R1, R2]
         { info_tbl: [(c3p3w,
                       label: sat_s3owl_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p3w: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3p3A; else goto c3p3z;
       c3p3A: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p3z: // global
           _s3owd::P64 = P64[R1 + 7];
           _s3owf::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3owf::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3owk_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3owd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3owg_entry() //  [R1]
         { info_tbl: [(c3p3B,
                       label: lvl4_s3owg_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p3B: // global
           _s3owg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3p3C; else goto c3p3D;
       c3p3D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p3F; else goto c3p3E;
       c3p3F: // global
           HpAlloc = 24;
           goto c3p3C;
       c3p3C: // global
           R1 = _s3owg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3p3E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3owg::P64;
           _s3owd::P64 = P64[_s3owg::P64 + 16];
           _s3owe::P64 = P64[_s3owg::P64 + 24];
           _s3owf::P64 = P64[_s3owg::P64 + 32];
           I64[Hp - 16] = sat_s3owl_info;
           P64[Hp - 8] = _s3owd::P64;
           P64[Hp] = _s3owf::P64;
           R2 = Hp - 15;
           R1 = _s3owe::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3own_entry() //  [R1]
         { info_tbl: [(c3p3L,
                       label: sat_s3own_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p3L: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.between1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3p3O,
                       label: Text.ParserCombinators.ReadP.between1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p3O: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3p3S; else goto c3p3R;
       c3p3S: // global
           HpAlloc = 56;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.between1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p3R: // global
           I64[Hp - 48] = lvl4_s3owg_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = sat_s3own_info;
           P64[Hp] = Hp - 48;
           _s3owc::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3owc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.834410126 UTC

[section ""data" . Text.ParserCombinators.ReadP.between_closure" {
     Text.ParserCombinators.ReadP.between_closure:
         const Text.ParserCombinators.ReadP.between_info;
 },
 Text.ParserCombinators.ReadP.between_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3p3X,
                       label: Text.ParserCombinators.ReadP.between_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p3X: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.between1_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.836835754 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wcount_closure" {
     Text.ParserCombinators.ReadP.$wcount_closure:
         const Text.ParserCombinators.ReadP.$wcount_info;
 },
 sat_s3owA_entry() //  [R1, R2]
         { info_tbl: [(c3p4t,
                       label: sat_s3owA_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p4t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p4x; else goto c3p4w;
       c3p4x: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p4w: // global
           _s3owu::P64 = P64[R1 + 7];
           _s3owx::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3owx::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3owu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3owB_entry() //  [R1, R2]
         { info_tbl: [(c3p4y,
                       label: sat_s3owB_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p4y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p4C; else goto c3p4B;
       c3p4C: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p4B: // global
           _s3ows::P64 = P64[R1 + 7];
           _s3owu::P64 = P64[R1 + 15];
           _s3oww::I64 = I64[R1 + 23];
           I64[Hp - 16] = sat_s3owA_info;
           P64[Hp - 8] = _s3owu::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3oww::I64;
           R1 = _s3ows::P64;
           call $wxs_s3ows_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3owE_entry() //  [R1, R2]
         { info_tbl: [(c3p4K,
                       label: sat_s3owE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p4K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p4O; else goto c3p4N;
       c3p4O: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p4N: // global
           _s3owu::P64 = P64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3owu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 $wxs_s3ows_entry() //  [R1, R2, R3]
         { info_tbl: [(c3p4S,
                       label: $wxs_s3ows_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p4S: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3p4W; else goto c3p4V;
       c3p4W: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p4V: // global
           _s3owp::P64 = P64[R1 + 6];
           if (R2 == 1) goto c3p4R; else goto c3p4Q;
       c3p4R: // global
           I64[Hp - 24] = sat_s3owE_info;
           P64[Hp - 16] = R3;
           _c3p4E::P64 = Hp - 23;
           Hp = Hp - 16;
           R2 = _c3p4E::P64;
           R1 = _s3owp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3p4Q: // global
           I64[Hp - 24] = sat_s3owB_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R3;
           I64[Hp] = R2 - 1;
           R2 = Hp - 23;
           R1 = _s3owp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wcount_entry() //  [R2, R3, R4]
         { info_tbl: [(c3p50,
                       label: Text.ParserCombinators.ReadP.$wcount_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p50: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3p54; else goto c3p53;
       c3p54: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wcount_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p53: // global
           if (%MO_S_Ge_W64(0, R2)) goto c3p4Y; else goto c3p4Z;
       c3p4Y: // global
           Hp = Hp - 16;
           R2 = GHC.Types.[]_closure+1;
           R1 = R4;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3p4Z: // global
           I64[Hp - 8] = $wxs_s3ows_info;
           P64[Hp] = R3;
           R3 = R4;
           R2 = R2;
           R1 = Hp - 6;
           call $wxs_s3ows_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.841232602 UTC

[section ""data" . Text.ParserCombinators.ReadP.count1_closure" {
     Text.ParserCombinators.ReadP.count1_closure:
         const Text.ParserCombinators.ReadP.count1_info;
 },
 Text.ParserCombinators.ReadP.count1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3p5c,
                       label: Text.ParserCombinators.ReadP.count1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p5c: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3p5d; else goto c3p5e;
       c3p5d: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.count1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p5e: // global
           I64[Sp - 24] = block_c3p59_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3p5i; else goto c3p5a;
       u3p5i: // global
           call _c3p59(R1) args: 0, res: 0, upd: 0;
       c3p5a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3p59() //  [R1]
         { info_tbl: [(c3p59,
                       label: block_c3p59_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p59: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$wcount_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.843855325 UTC

[section ""data" . Text.ParserCombinators.ReadP.count_closure" {
     Text.ParserCombinators.ReadP.count_closure:
         const Text.ParserCombinators.ReadP.count_info;
 },
 Text.ParserCombinators.ReadP.count_entry() //  [R2, R3, R4]
         { info_tbl: [(c3p5n,
                       label: Text.ParserCombinators.ReadP.count_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p5n: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.count1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.845162437 UTC

[section ""data" . Text.ParserCombinators.ReadP.option1_closure" {
     Text.ParserCombinators.ReadP.option1_closure:
         const Text.ParserCombinators.ReadP.option1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.option1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3p5x,
                       label: Text.ParserCombinators.ReadP.option1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p5x: // global
           _s3owM::P64 = R4;
           _s3owL::P64 = R3;
           _s3owK::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3p5y; else goto c3p5z;
       c3p5z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3p5B; else goto c3p5A;
       c3p5B: // global
           HpAlloc = 32;
           goto c3p5y;
       c3p5y: // global
           R4 = _s3owM::P64;
           R3 = _s3owL::P64;
           R2 = _s3owK::P64;
           R1 = Text.ParserCombinators.ReadP.option1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p5A: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3owM::P64;
           P64[Hp] = _s3owK::P64;
           I64[Sp - 16] = block_c3p5v_info;
           R2 = _s3owM::P64;
           R1 = _s3owL::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3p5v() //  [R1]
         { info_tbl: [(c3p5v,
                       label: block_c3p5v_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p5v: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.846822056 UTC

[section ""data" . Text.ParserCombinators.ReadP.option_closure" {
     Text.ParserCombinators.ReadP.option_closure:
         const Text.ParserCombinators.ReadP.option_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.option_entry() //  [R2, R3, R4]
         { info_tbl: [(c3p5J,
                       label: Text.ParserCombinators.ReadP.option_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p5J: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.option1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.848378235 UTC

[section ""data" . Text.ParserCombinators.ReadP.optional1_closure" {
     Text.ParserCombinators.ReadP.optional1_closure:
         const Text.ParserCombinators.ReadP.optional1_info;
         const 0;
 },
 lvl4_s3owR_entry() //  [R1]
         { info_tbl: [(c3p5U,
                       label: lvl4_s3owR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p5U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3p5V; else goto c3p5W;
       c3p5V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3p5W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3owT_entry() //  [R1]
         { info_tbl: [(c3p62,
                       label: sat_s3owT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p62: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.optional1_entry() //  [R2, R3]
         { info_tbl: [(c3p67,
                       label: Text.ParserCombinators.ReadP.optional1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p67: // global
           _s3owQ::P64 = R3;
           _s3owP::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3p68; else goto c3p69;
       c3p69: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3p6b; else goto c3p6a;
       c3p6b: // global
           HpAlloc = 40;
           goto c3p68;
       c3p68: // global
           R3 = _s3owQ::P64;
           R2 = _s3owP::P64;
           R1 = Text.ParserCombinators.ReadP.optional1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p6a: // global
           I64[Hp - 32] = lvl4_s3owR_info;
           P64[Hp - 16] = _s3owQ::P64;
           I64[Hp - 8] = sat_s3owT_info;
           _c3p5Q::P64 = Hp - 32;
           P64[Hp] = _c3p5Q::P64;
           I64[Sp - 16] = block_c3p65_info;
           R2 = Hp - 7;
           R1 = _s3owP::P64;
           P64[Sp - 8] = _c3p5Q::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3p65() //  [R1]
         { info_tbl: [(c3p65,
                       label: block_c3p65_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p65: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.850300092 UTC

[section ""data" . Text.ParserCombinators.ReadP.optional_closure" {
     Text.ParserCombinators.ReadP.optional_closure:
         const Text.ParserCombinators.ReadP.optional_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.optional_entry() //  [R2, R3]
         { info_tbl: [(c3p6j,
                       label: Text.ParserCombinators.ReadP.optional_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p6j: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.optional1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.851792029 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy3_closure" {
     Text.ParserCombinators.ReadP.endBy3_closure:
         const Text.ParserCombinators.ReadP.endBy3_info;
         const 0;
 },
 sat_s3ox1_entry() //  [R1, R2]
         { info_tbl: [(c3p6F,
                       label: sat_s3ox1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p6F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p6J; else goto c3p6I;
       c3p6J: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p6I: // global
           _s3owW::P64 = P64[R1 + 7];
           _s3owY::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3owY::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3owW::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ox2_entry() //  [R1, R2]
         { info_tbl: [(c3p6K,
                       label: sat_s3ox2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p6K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p6O; else goto c3p6N;
       c3p6O: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p6N: // global
           _s3owV::P64 = P64[R1 + 7];
           _s3owW::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ox1_info;
           P64[Hp - 8] = _s3owW::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3owV::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ox3_entry() //  [R1]
         { info_tbl: [(c3p6P,
                       label: sat_s3ox3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p6P: // global
           _s3ox3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3p6Q; else goto c3p6R;
       c3p6R: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p6T; else goto c3p6S;
       c3p6T: // global
           HpAlloc = 24;
           goto c3p6Q;
       c3p6Q: // global
           R1 = _s3ox3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3p6S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ox3::P64;
           _s3owV::P64 = P64[_s3ox3::P64 + 16];
           _s3owW::P64 = P64[_s3ox3::P64 + 24];
           I64[Hp - 16] = sat_s3ox2_info;
           P64[Hp - 8] = _s3owV::P64;
           P64[Hp] = _s3owW::P64;
           R2 = Hp - 15;
           R1 = _s3owV::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.endBy3_entry() //  [R2, R3]
         { info_tbl: [(c3p6W,
                       label: Text.ParserCombinators.ReadP.endBy3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p6W: // global
           _s3owW::P64 = R3;
           _s3owV::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3p6X; else goto c3p6Y;
       c3p6Y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3p70; else goto c3p6Z;
       c3p70: // global
           HpAlloc = 32;
           goto c3p6X;
       c3p6X: // global
           R3 = _s3owW::P64;
           R2 = _s3owV::P64;
           R1 = Text.ParserCombinators.ReadP.endBy3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p6Z: // global
           I64[Hp - 24] = sat_s3ox3_info;
           P64[Hp - 8] = _s3owV::P64;
           P64[Hp] = _s3owW::P64;
           I64[Sp - 16] = block_c3p6U_info;
           R2 = GHC.Types.[]_closure+1;
           R1 = _s3owW::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3p6U() //  [R1]
         { info_tbl: [(c3p6U,
                       label: block_c3p6U_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p6U: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.854310974 UTC

[section ""data" . Text.ParserCombinators.ReadP.many_closure" {
     Text.ParserCombinators.ReadP.many_closure:
         const Text.ParserCombinators.ReadP.many_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.many_entry() //  [R2, R3]
         { info_tbl: [(c3p78,
                       label: Text.ParserCombinators.ReadP.many_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p78: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.855649424 UTC

[section ""data" . Text.ParserCombinators.ReadP.many2_closure" {
     Text.ParserCombinators.ReadP.many2_closure:
         const Text.ParserCombinators.ReadP.many2_info;
         const 0;
 },
 sat_s3ox9_entry() //  [R1, R2]
         { info_tbl: [(c3p7q,
                       label: sat_s3ox9_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p7q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p7u; else goto c3p7t;
       c3p7u: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p7t: // global
           _s3ox5::P64 = P64[R1 + 7];
           _s3ox6::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3ox6::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3ox5::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxa_entry() //  [R1, R2]
         { info_tbl: [(c3p7v,
                       label: sat_s3oxa_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p7v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p7z; else goto c3p7y;
       c3p7z: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p7y: // global
           _s3ox4::P64 = P64[R1 + 7];
           _s3ox5::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ox9_info;
           P64[Hp - 8] = _s3ox5::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3ox4::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.many2_entry() //  [R2, R3]
         { info_tbl: [(c3p7A,
                       label: Text.ParserCombinators.ReadP.many2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p7A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p7E; else goto c3p7D;
       c3p7E: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.many2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p7D: // global
           I64[Hp - 16] = sat_s3oxa_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s3ox4::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ox4::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.857302661 UTC

[section ""data" . Text.ParserCombinators.ReadP.many1_closure" {
     Text.ParserCombinators.ReadP.many1_closure:
         const Text.ParserCombinators.ReadP.many1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.many1_entry() //  [R2, R3]
         { info_tbl: [(c3p7J,
                       label: Text.ParserCombinators.ReadP.many1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p7J: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.many2_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.859324282 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy4_closure" {
     Text.ParserCombinators.ReadP.endBy4_closure:
         const Text.ParserCombinators.ReadP.endBy4_info;
         const 0;
 },
 sat_s3oxj_entry() //  [R1]
         { info_tbl: [(c3p86,
                       label: sat_s3oxj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p86: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxk_entry() //  [R1, R2]
         { info_tbl: [(c3p89,
                       label: sat_s3oxk_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p89: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3p8d; else goto c3p8c;
       c3p8d: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p8c: // global
           _s3oxc::P64 = P64[R1 + 7];
           _s3oxf::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3oxf::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oxj_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3oxc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 p1_s3oxe_entry() //  [R1, R2]
         { info_tbl: [(c3p8e,
                       label: p1_s3oxe_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p8e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p8i; else goto c3p8h;
       c3p8i: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p8h: // global
           _s3oxb::P64 = P64[R1 + 7];
           _s3oxc::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oxk_info;
           P64[Hp - 8] = _s3oxc::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oxb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxp_entry() //  [R1, R2]
         { info_tbl: [(c3p8y,
                       label: sat_s3oxp_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p8y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p8C; else goto c3p8B;
       c3p8C: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p8B: // global
           _s3oxd::P64 = P64[R1 + 7];
           _s3oxl::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oxl::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oxd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oxm_entry() //  [R1]
         { info_tbl: [(c3p8D,
                       label: lvl4_s3oxm_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p8D: // global
           _s3oxm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3p8E; else goto c3p8F;
       c3p8F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3p8H; else goto c3p8G;
       c3p8H: // global
           HpAlloc = 24;
           goto c3p8E;
       c3p8E: // global
           R1 = _s3oxm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3p8G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3oxm::P64;
           _s3oxd::P64 = P64[_s3oxm::P64 + 16];
           _s3oxe::P64 = P64[_s3oxm::P64 + 24];
           _s3oxl::P64 = P64[_s3oxm::P64 + 32];
           I64[Hp - 16] = sat_s3oxp_info;
           P64[Hp - 8] = _s3oxd::P64;
           P64[Hp] = _s3oxl::P64;
           R3 = Hp - 15;
           R2 = _s3oxe::P64;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oxr_entry() //  [R1]
         { info_tbl: [(c3p8N,
                       label: sat_s3oxr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p8N: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxs_entry() //  [R1, R2]
         { info_tbl: [(c3p8Q,
                       label: sat_s3oxs_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p8Q: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3p8U; else goto c3p8T;
       c3p8U: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3p8T: // global
           _s3oxc::P64 = P64[R1 + 7];
           _s3oxd::P64 = P64[R1 + 15];
           _s3oxe::P64 = P64[R1 + 23];
           I64[Hp - 48] = lvl4_s3oxm_info;
           P64[Hp - 32] = _s3oxd::P64;
           P64[Hp - 24] = _s3oxe::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oxr_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3oxc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.endBy4_entry() //  [R2, R3, R4]
         { info_tbl: [(c3p8V,
                       label: Text.ParserCombinators.ReadP.endBy4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p8V: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3p8Z; else goto c3p8Y;
       c3p8Z: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.endBy4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p8Y: // global
           I64[Hp - 48] = p1_s3oxe_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3oxs_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 47;
           _s3oxb::P64 = R2;
           R2 = Hp - 23;
           R1 = _s3oxb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.86245778 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy1_closure" {
     Text.ParserCombinators.ReadP.endBy1_closure:
         const Text.ParserCombinators.ReadP.endBy1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.endBy1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3p94,
                       label: Text.ParserCombinators.ReadP.endBy1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p94: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy4_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.863678764 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany2_closure" {
     Text.ParserCombinators.ReadP.skipMany2_closure:
         const Text.ParserCombinators.ReadP.skipMany2_info;
         const 0;
 },
 sat_s3oxx_entry() //  [R1]
         { info_tbl: [(c3p9k,
                       label: sat_s3oxx_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p9k: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipMany2_entry() //  [R2, R3]
         { info_tbl: [(c3p9n,
                       label: Text.ParserCombinators.ReadP.skipMany2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p9n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3p9o; else goto c3p9p;
       c3p9o: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipMany2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3p9p: // global
           I64[Sp - 16] = block_c3p9b_info;
           _s3oxt::P64 = R2;
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           P64[Sp - 8] = _s3oxt::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3p9b() //  [R1]
         { info_tbl: [(c3p9b,
                       label: block_c3p9b_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p9b: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3p9s; else goto c3p9r;
       c3p9s: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3p9r: // global
           I64[Hp - 8] = sat_s3oxx_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.865074801 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany_closure" {
     Text.ParserCombinators.ReadP.skipMany_closure:
         const Text.ParserCombinators.ReadP.skipMany_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.skipMany_entry() //  [R2, R3]
         { info_tbl: [(c3p9x,
                       label: Text.ParserCombinators.ReadP.skipMany_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p9x: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipMany2_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.866570263 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany3_closure" {
     Text.ParserCombinators.ReadP.skipMany3_closure:
         const Text.ParserCombinators.ReadP.skipMany3_info;
         const 0;
 },
 sat_s3oxD_entry() //  [R1]
         { info_tbl: [(c3p9R,
                       label: sat_s3oxD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p9R: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oxA_entry() //  [R1]
         { info_tbl: [(c3p9U,
                       label: lvl4_s3oxA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p9U: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3p9V; else goto c3p9W;
       c3p9V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3p9W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3p9I_info;
           R2 = GHC.Tuple.()_closure+1;
           _s3oxy::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s3oxy::P64;
           Sp = Sp - 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3p9I() //  [R1]
         { info_tbl: [(c3p9I,
                       label: block_c3p9I_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3p9I: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3p9Z; else goto c3p9Y;
       c3p9Z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3p9Y: // global
           I64[Hp - 8] = sat_s3oxD_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oxF_entry() //  [R1]
         { info_tbl: [(c3pa5,
                       label: sat_s3oxF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pa5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipMany3_entry() //  [R2, R3]
         { info_tbl: [(c3pa8,
                       label: Text.ParserCombinators.ReadP.skipMany3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pa8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pac; else goto c3pab;
       c3pac: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipMany3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pab: // global
           I64[Hp - 40] = lvl4_s3oxA_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s3oxF_info;
           P64[Hp] = Hp - 40;
           _s3oxy::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3oxy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.86947219 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany1_closure" {
     Text.ParserCombinators.ReadP.skipMany1_closure:
         const Text.ParserCombinators.ReadP.skipMany1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.skipMany1_entry() //  [R2, R3]
         { info_tbl: [(c3pah,
                       label: Text.ParserCombinators.ReadP.skipMany1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pah: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipMany3_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.871098496 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy3_closure" {
     Text.ParserCombinators.ReadP.sepBy3_closure:
         const Text.ParserCombinators.ReadP.sepBy3_info;
         const 0;
 },
 sat_s3oxN_entry() //  [R1]
         { info_tbl: [(c3paz,
                       label: sat_s3oxN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3paz: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 m2_s3oxJ_entry() //  [R1, R2]
         { info_tbl: [(c3paC,
                       label: m2_s3oxJ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3paC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3paG; else goto c3paF;
       c3paG: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3paF: // global
           _s3oxG::P64 = P64[R1 + 7];
           _s3oxH::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3oxG::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oxN_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3oxH::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxR_entry() //  [R1, R2]
         { info_tbl: [(c3paS,
                       label: sat_s3oxR_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3paS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3paW; else goto c3paV;
       c3paW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3paV: // global
           _s3oxI::P64 = P64[R1 + 7];
           _s3oxO::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oxO::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oxI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxS_entry() //  [R1, R2]
         { info_tbl: [(c3paX,
                       label: sat_s3oxS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3paX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pb1; else goto c3pb0;
       c3pb1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pb0: // global
           _s3oxI::P64 = P64[R1 + 7];
           _s3oxJ::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oxR_info;
           P64[Hp - 8] = _s3oxI::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3oxJ::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.sepBy3_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pb2,
                       label: Text.ParserCombinators.ReadP.sepBy3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pb2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pb6; else goto c3pb5;
       c3pb6: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.sepBy3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pb5: // global
           I64[Hp - 40] = m2_s3oxJ_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3oxS_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 39;
           _s3oxG::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3oxG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.873198775 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy1_closure" {
     Text.ParserCombinators.ReadP.sepBy1_closure:
         const Text.ParserCombinators.ReadP.sepBy1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.sepBy1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pbb,
                       label: Text.ParserCombinators.ReadP.sepBy1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pbb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.sepBy3_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.87479631 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy2_closure" {
     Text.ParserCombinators.ReadP.endBy2_closure:
         const Text.ParserCombinators.ReadP.endBy2_info;
         const 0;
 },
 sat_s3oy0_entry() //  [R1]
         { info_tbl: [(c3pby,
                       label: sat_s3oy0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pby: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oy1_entry() //  [R1, R2]
         { info_tbl: [(c3pbB,
                       label: sat_s3oy1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pbB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pbF; else goto c3pbE;
       c3pbF: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pbE: // global
           _s3oxU::P64 = P64[R1 + 7];
           _s3oxW::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3oxW::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oy0_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3oxU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oy2_entry() //  [R1, R2]
         { info_tbl: [(c3pbG,
                       label: sat_s3oy2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pbG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pbK; else goto c3pbJ;
       c3pbK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pbJ: // global
           _s3oxT::P64 = P64[R1 + 7];
           _s3oxU::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oy1_info;
           P64[Hp - 8] = _s3oxU::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oxT::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.endBy2_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pbL,
                       label: Text.ParserCombinators.ReadP.endBy2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pbL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pbP; else goto c3pbO;
       c3pbP: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.endBy2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pbO: // global
           I64[Hp - 16] = sat_s3oy2_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R4;
           R2 = Hp - 15;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.876521538 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy_closure" {
     Text.ParserCombinators.ReadP.endBy_closure:
         const Text.ParserCombinators.ReadP.endBy_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.endBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pbU,
                       label: Text.ParserCombinators.ReadP.endBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pbU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.877692369 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy2_closure" {
     Text.ParserCombinators.ReadP.sepBy2_closure:
         const Text.ParserCombinators.ReadP.sepBy2_info;
         const 0;
 },
 sat_s3oy7_entry() //  [R1]
         { info_tbl: [(c3pc5,
                       label: sat_s3oy7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pc5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pc6; else goto c3pc7;
       c3pc6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pc7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.sepBy2_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pca,
                       label: Text.ParserCombinators.ReadP.sepBy2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pca: // global
           _s3oy5::P64 = R4;
           _s3oy4::P64 = R3;
           _s3oy3::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pcb; else goto c3pcc;
       c3pcc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pce; else goto c3pcd;
       c3pce: // global
           HpAlloc = 24;
           goto c3pcb;
       c3pcb: // global
           R4 = _s3oy5::P64;
           R3 = _s3oy4::P64;
           R2 = _s3oy3::P64;
           R1 = Text.ParserCombinators.ReadP.sepBy2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pcd: // global
           I64[Hp - 16] = sat_s3oy7_info;
           P64[Hp] = _s3oy5::P64;
           I64[Sp - 16] = block_c3pc8_info;
           R4 = _s3oy5::P64;
           R3 = _s3oy4::P64;
           R2 = _s3oy3::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.sepBy3_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pc8() //  [R1]
         { info_tbl: [(c3pc8,
                       label: block_c3pc8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pc8: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.879146736 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy_closure" {
     Text.ParserCombinators.ReadP.sepBy_closure:
         const Text.ParserCombinators.ReadP.sepBy_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.sepBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pcm,
                       label: Text.ParserCombinators.ReadP.sepBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pcm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.sepBy2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.87988222 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadP.$fMonadReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.881414638 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_info;
         const 0;
 },
 sat_s3oyi_entry() //  [R1]
         { info_tbl: [(c3pcI,
                       label: sat_s3oyi_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pcI: // global
           _s3oyi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pcJ; else goto c3pcK;
       c3pcK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pcM; else goto c3pcL;
       c3pcM: // global
           HpAlloc = 24;
           goto c3pcJ;
       c3pcJ: // global
           R1 = _s3oyi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pcL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3oyi::P64;
           _s3oyb::P64 = P64[_s3oyi::P64 + 16];
           _s3oyc::P64 = P64[_s3oyi::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oyc::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3oyb::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oyf_entry() //  [R1, R2]
         { info_tbl: [(c3pcT,
                       label: sat_s3oyf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pcT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pcX; else goto c3pcW;
       c3pcX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pcW: // global
           _s3oyb::P64 = P64[R1 + 7];
           _s3oyc::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oyc::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oyb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oyj_entry() //  [R1, R2]
         { info_tbl: [(c3pd0,
                       label: sat_s3oyj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pd0: // global
           _s3oyc::P64 = R2;
           _s3oyj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pd1; else goto c3pd2;
       c3pd2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pd4; else goto c3pd3;
       c3pd4: // global
           HpAlloc = 56;
           goto c3pd1;
       c3pd1: // global
           R2 = _s3oyc::P64;
           R1 = _s3oyj::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pd3: // global
           _s3oya::P64 = P64[_s3oyj::P64 + 7];
           _s3oyb::P64 = P64[_s3oyj::P64 + 15];
           I64[Hp - 48] = sat_s3oyi_info;
           P64[Hp - 32] = _s3oyb::P64;
           P64[Hp - 24] = _s3oyc::P64;
           I64[Hp - 16] = sat_s3oyf_info;
           P64[Hp - 8] = _s3oyb::P64;
           P64[Hp] = _s3oyc::P64;
           I64[Sp - 16] = block_c3pcY_info;
           R2 = Hp - 15;
           R1 = _s3oya::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call some_v_s3oya_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pcY() //  [R1]
         { info_tbl: [(c3pcY,
                       label: block_c3pcY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pcY: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 some_v_s3oya_entry() //  [R1, R2]
         { info_tbl: [(c3pd8,
                       label: some_v_s3oya_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pd8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pdc; else goto c3pdb;
       c3pdc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pdb: // global
           _s3oy8::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3oyj_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oy8::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP2_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3pdd,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pdd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pdh; else goto c3pdg;
       c3pdh: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pdg: // global
           I64[Hp - 8] = some_v_s3oya_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call some_v_s3oya_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.884819608 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_info;
         const 0;
 },
 sat_s3oyu_entry() //  [R1]
         { info_tbl: [(c3pdv,
                       label: sat_s3oyu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pdv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pdw; else goto c3pdx;
       c3pdw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pdx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oyr_entry() //  [R1, R2]
         { info_tbl: [(c3pdJ,
                       label: sat_s3oyr_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pdJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pdN; else goto c3pdM;
       c3pdN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pdM: // global
           _s3oyn::P64 = P64[R1 + 7];
           _s3oyo::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oyo::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oyn::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oys_entry() //  [R1, R2]
         { info_tbl: [(c3pdO,
                       label: sat_s3oys_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pdO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pdS; else goto c3pdR;
       c3pdS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pdR: // global
           _s3oym::P64 = P64[R1 + 7];
           _s3oyn::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oyr_info;
           P64[Hp - 8] = _s3oyn::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oym::P64;
           call many_v_s3oym_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 many_v_s3oym_entry() //  [R1, R2]
         { info_tbl: [(c3pdV,
                       label: many_v_s3oym_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pdV: // global
           _s3oyn::P64 = R2;
           _s3oym::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pdW; else goto c3pdX;
       c3pdX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pdZ; else goto c3pdY;
       c3pdZ: // global
           HpAlloc = 48;
           goto c3pdW;
       c3pdW: // global
           R2 = _s3oyn::P64;
           R1 = _s3oym::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pdY: // global
           _s3oyk::P64 = P64[_s3oym::P64 + 7];
           I64[Hp - 40] = sat_s3oyu_info;
           P64[Hp - 24] = _s3oyn::P64;
           I64[Hp - 16] = sat_s3oys_info;
           P64[Hp - 8] = _s3oym::P64;
           P64[Hp] = _s3oyn::P64;
           I64[Sp - 16] = block_c3pdT_info;
           R2 = Hp - 15;
           R1 = _s3oyk::P64;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pdT() //  [R1]
         { info_tbl: [(c3pdT,
                       label: block_c3pdT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pdT: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP1_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3pe3,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pe3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pe7; else goto c3pe6;
       c3pe7: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pe6: // global
           I64[Hp - 8] = many_v_s3oym_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call many_v_s3oym_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.887261763 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure+2;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.887920647 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadPlusReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadPlusReadP_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.889735095 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr3_closure" {
     Text.ParserCombinators.ReadP.chainr3_closure:
         const Text.ParserCombinators.ReadP.chainr3_info;
         const 0;
 },
 sat_s3oyE_entry() //  [R1, R2]
         { info_tbl: [(c3pey,
                       label: sat_s3oyE_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pey: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3peC; else goto c3peB;
       c3peC: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3peB: // global
           _s3oyz::P64 = P64[R1 + 7];
           _s3oyA::P64 = P64[R1 + 15];
           _s3oyB::P64 = P64[R1 + 23];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3oyB::P64;
           P64[Hp - 8] = _s3oyA::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3oyz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oyF_entry() //  [R1, R2]
         { info_tbl: [(c3peD,
                       label: sat_s3oyF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3peD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3peH; else goto c3peG;
       c3peH: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3peG: // global
           _s3oyy::P64 = P64[R1 + 7];
           _s3oyz::P64 = P64[R1 + 15];
           _s3oyA::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3oyE_info;
           P64[Hp - 16] = _s3oyz::P64;
           P64[Hp - 8] = _s3oyA::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3oyy::P64;
           call scan_s3oyy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oyI_entry() //  [R1, R2]
         { info_tbl: [(c3peK,
                       label: sat_s3oyI_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3peK: // global
           _s3oyA::P64 = R2;
           _s3oyI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3peL; else goto c3peM;
       c3peM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3peO; else goto c3peN;
       c3peO: // global
           HpAlloc = 64;
           goto c3peL;
       c3peL: // global
           R2 = _s3oyA::P64;
           R1 = _s3oyI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3peN: // global
           _s3oyw::P64 = P64[_s3oyI::P64 + 7];
           _s3oyy::P64 = P64[_s3oyI::P64 + 15];
           _s3oyz::P64 = P64[_s3oyI::P64 + 23];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3oyz::P64;
           P64[Hp - 32] = _s3oyA::P64;
           I64[Hp - 24] = sat_s3oyF_info;
           P64[Hp - 16] = _s3oyy::P64;
           P64[Hp - 8] = _s3oyz::P64;
           P64[Hp] = _s3oyA::P64;
           I64[Sp - 16] = block_c3peI_info;
           R2 = Hp - 23;
           R1 = _s3oyw::P64;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3peI() //  [R1]
         { info_tbl: [(c3peI,
                       label: block_c3peI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3peI: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3oyy_entry() //  [R1, R2]
         { info_tbl: [(c3peS,
                       label: scan_s3oyy_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3peS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3peW; else goto c3peV;
       c3peW: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3peV: // global
           _s3oyv::P64 = P64[R1 + 7];
           _s3oyw::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3oyI_info;
           P64[Hp - 16] = _s3oyw::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3oyv::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.chainr3_entry() //  [R2, R3, R4]
         { info_tbl: [(c3peX,
                       label: Text.ParserCombinators.ReadP.chainr3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3peX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pf1; else goto c3pf0;
       c3pf1: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.chainr3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pf0: // global
           I64[Hp - 16] = scan_s3oyy_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = R4;
           R1 = Hp - 15;
           call scan_s3oyy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.893706685 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr1_closure" {
     Text.ParserCombinators.ReadP.chainr1_closure:
         const Text.ParserCombinators.ReadP.chainr1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pf6,
                       label: Text.ParserCombinators.ReadP.chainr1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pf6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainr3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.894790752 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr2_closure" {
     Text.ParserCombinators.ReadP.chainr2_closure:
         const Text.ParserCombinators.ReadP.chainr2_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr2_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3pfg,
                       label: Text.ParserCombinators.ReadP.chainr2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pfg: // global
           _s3oyM::P64 = R5;
           _s3oyL::P64 = R4;
           _s3oyK::P64 = R3;
           _s3oyJ::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pfh; else goto c3pfi;
       c3pfi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pfk; else goto c3pfj;
       c3pfk: // global
           HpAlloc = 32;
           goto c3pfh;
       c3pfh: // global
           R5 = _s3oyM::P64;
           R4 = _s3oyL::P64;
           R3 = _s3oyK::P64;
           R2 = _s3oyJ::P64;
           R1 = Text.ParserCombinators.ReadP.chainr2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pfj: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3oyM::P64;
           P64[Hp] = _s3oyL::P64;
           I64[Sp - 16] = block_c3pfe_info;
           R4 = _s3oyM::P64;
           R3 = _s3oyK::P64;
           R2 = _s3oyJ::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.chainr3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pfe() //  [R1]
         { info_tbl: [(c3pfe,
                       label: block_c3pfe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pfe: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.896013939 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr_closure" {
     Text.ParserCombinators.ReadP.chainr_closure:
         const Text.ParserCombinators.ReadP.chainr_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3pfs,
                       label: Text.ParserCombinators.ReadP.chainr_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pfs: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainr2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.898702882 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl3_closure" {
     Text.ParserCombinators.ReadP.chainl3_closure:
         const Text.ParserCombinators.ReadP.chainl3_info;
         const 0;
 },
 sat_s3oyY_entry() //  [R1, R2]
         { info_tbl: [(c3pfQ,
                       label: sat_s3oyY_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pfQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3pfU; else goto c3pfT;
       c3pfU: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pfT: // global
           _s3oyS::P64 = P64[R1 + 7];
           _s3oyT::P64 = P64[R1 + 15];
           _s3oyU::P64 = P64[R1 + 23];
           _s3oyV::P64 = P64[R1 + 31];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3oyV::P64;
           P64[Hp - 8] = _s3oyT::P64;
           P64[Hp] = R2;
           R3 = _s3oyU::P64;
           R2 = Hp - 32;
           R1 = _s3oyS::P64;
           call rest_s3oyS_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oyZ_entry() //  [R1, R2]
         { info_tbl: [(c3pfV,
                       label: sat_s3oyZ_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pfV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3pfZ; else goto c3pfY;
       c3pfZ: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pfY: // global
           _s3oyP::P64 = P64[R1 + 7];
           _s3oyS::P64 = P64[R1 + 15];
           _s3oyT::P64 = P64[R1 + 23];
           _s3oyU::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3oyY_info;
           P64[Hp - 24] = _s3oyS::P64;
           P64[Hp - 16] = _s3oyT::P64;
           P64[Hp - 8] = _s3oyU::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3oyP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 rest_s3oyS_entry() //  [R1, R2, R3]
         { info_tbl: [(c3pg2,
                       label: rest_s3oyS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pg2: // global
           _s3oyU::P64 = R3;
           _s3oyT::P64 = R2;
           _s3oyS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pg3; else goto c3pg4;
       c3pg4: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3pg6; else goto c3pg5;
       c3pg6: // global
           HpAlloc = 72;
           goto c3pg3;
       c3pg3: // global
           R3 = _s3oyU::P64;
           R2 = _s3oyT::P64;
           R1 = _s3oyS::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pg5: // global
           _s3oyP::P64 = P64[_s3oyS::P64 + 6];
           _s3oyQ::P64 = P64[_s3oyS::P64 + 14];
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s3oyU::P64;
           P64[Hp - 40] = _s3oyT::P64;
           I64[Hp - 32] = sat_s3oyZ_info;
           P64[Hp - 24] = _s3oyP::P64;
           P64[Hp - 16] = _s3oyS::P64;
           P64[Hp - 8] = _s3oyT::P64;
           P64[Hp] = _s3oyU::P64;
           I64[Sp - 16] = block_c3pg0_info;
           R2 = Hp - 31;
           R1 = _s3oyQ::P64;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pg0() //  [R1]
         { info_tbl: [(c3pg0,
                       label: block_c3pg0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pg0: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oz3_entry() //  [R1, R2]
         { info_tbl: [(c3pgf,
                       label: sat_s3oz3_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pgf: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 15];
           call rest_s3oyS_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.chainl3_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pgi,
                       label: Text.ParserCombinators.ReadP.chainl3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pgi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pgm; else goto c3pgl;
       c3pgm: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.chainl3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pgl: // global
           I64[Hp - 40] = rest_s3oyS_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3oz3_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 38;
           _s3oyP::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3oyP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.901755774 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl1_closure" {
     Text.ParserCombinators.ReadP.chainl1_closure:
         const Text.ParserCombinators.ReadP.chainl1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pgr,
                       label: Text.ParserCombinators.ReadP.chainl1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pgr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainl3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.902823718 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl2_closure" {
     Text.ParserCombinators.ReadP.chainl2_closure:
         const Text.ParserCombinators.ReadP.chainl2_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl2_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3pgB,
                       label: Text.ParserCombinators.ReadP.chainl2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pgB: // global
           _s3oz7::P64 = R5;
           _s3oz6::P64 = R4;
           _s3oz5::P64 = R3;
           _s3oz4::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pgC; else goto c3pgD;
       c3pgD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pgF; else goto c3pgE;
       c3pgF: // global
           HpAlloc = 32;
           goto c3pgC;
       c3pgC: // global
           R5 = _s3oz7::P64;
           R4 = _s3oz6::P64;
           R3 = _s3oz5::P64;
           R2 = _s3oz4::P64;
           R1 = Text.ParserCombinators.ReadP.chainl2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pgE: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3oz7::P64;
           P64[Hp] = _s3oz6::P64;
           I64[Sp - 16] = block_c3pgz_info;
           R4 = _s3oz7::P64;
           R3 = _s3oz5::P64;
           R2 = _s3oz4::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.chainl3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pgz() //  [R1]
         { info_tbl: [(c3pgz,
                       label: block_c3pgz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pgz: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.904141902 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl_closure" {
     Text.ParserCombinators.ReadP.chainl_closure:
         const Text.ParserCombinators.ReadP.chainl_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3pgN,
                       label: Text.ParserCombinators.ReadP.chainl_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pgN: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainl2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.905537906 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++2_closure" {
     Text.ParserCombinators.ReadP.<++2_closure:
         const Text.ParserCombinators.ReadP.<++2_info;
 },
 lvl4_s3ozd_entry() //  [R1]
         { info_tbl: [(c3ph2,
                       label: lvl4_s3ozd_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ph2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ph3; else goto c3ph4;
       c3ph3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ph4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = I64[R1 + 24] - 1;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.<++2_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ozg_entry() //  [R1]
         { info_tbl: [(c3pha,
                       label: sat_s3ozg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pha: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.<++2_entry() //  [R2, R3]
         { info_tbl: [(c3phg,
                       label: Text.ParserCombinators.ReadP.<++2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3phg: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3phk; else goto c3phj;
       c3phk: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.<++2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3phj: // global
           if (R2 == 0) goto c3phf; else goto c3phe;
       c3phf: // global
           Hp = Hp - 64;
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3phe: // global
           I64[Hp - 56] = lvl4_s3ozd_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3ozg_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.908676084 UTC

[section ""data" . Text.ParserCombinators.ReadP.$w<++_closure" {
     Text.ParserCombinators.ReadP.$w<++_closure:
         const Text.ParserCombinators.ReadP.$w<++_info;
         const 0;
 },
 lvl4_s3ozk_entry() //  [R1]
         { info_tbl: [(c3phu,
                       label: lvl4_s3ozk_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3phu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3phv; else goto c3phw;
       c3phv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3phw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 probe_s3ozl_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3phz: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call probe_s3ozl_entry(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ozC_entry() //  [R1]
         { info_tbl: [(c3phQ,
                       label: sat_s3ozC_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3phQ: // global
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 probe_s3ozl_entry() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c3pi0,
                       label: probe_s3ozl_info
                       rep:HeapRep 1 ptrs {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pi0: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3pi1; else goto u3piI;
       c3pi1: // global
           R1 = R1;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       u3piI: // global
           P64[Sp - 40] = R1;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call _c3phA() args: 0, res: 0, upd: 0;
     }
 },
 _c3phA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3phA: // global
           _s3ozi::P64 = P64[P64[Sp] + 4];
           I64[Sp - 8] = block_c3phD_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3ozi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3piN; else goto c3phE;
       u3piN: // global
           call _c3phD(R1) args: 0, res: 0, upd: 0;
       c3phE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3phD() //  [R1]
         { info_tbl: [(c3phD,
                       label: block_c3phD_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3phD: // global
           _c3phZ::P64 = R1 & 7;
           if (_c3phZ::P64 < 4) goto u3piF; else goto u3piH;
       u3piF: // global
           if (_c3phZ::P64 < 3) goto u3piG; else goto u3piJ;
       u3piG: // global
           _s3ozn::P64 = P64[Sp + 24];
           if (_c3phZ::P64 < 2) goto c3phU; else goto c3phV;
       c3phU: // global
           I64[Sp] = block_c3pi4_info;
           _s3ozr::P64 = P64[R1 + 7];
           R1 = _s3ozn::P64;
           P64[Sp + 24] = _s3ozr::P64;
           if (R1 & 7 != 0) goto u3piO; else goto c3pi6;
       u3piO: // global
           call _c3pi4(R1) args: 0, res: 0, upd: 0;
       c3pi6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3phV: // global
           I64[Sp] = block_c3piq_info;
           R2 = _s3ozn::P64;
           R1 = P64[R1 + 6];
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3piJ: // global
           Sp = Sp + 16;
           call _c3phW() args: 0, res: 0, upd: 0;
       u3piH: // global
           _s3ozp::P64 = P64[Sp + 40];
           if (_c3phZ::P64 < 5) goto c3phX; else goto c3phY;
       c3phX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3piA; else goto c3piz;
       c3piA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3piz: // global
           I64[Hp - 16] = sat_s3ozC_info;
           P64[Hp - 8] = _s3ozp::P64;
           P64[Hp] = R1;
           R3 = Hp - 15;
           R2 = I64[Sp + 32];
           Sp = Sp + 48;
           call Text.ParserCombinators.ReadP.<++2_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
       c3phY: // global
           R3 = _s3ozp::P64;
           R2 = R1;
           Sp = Sp + 48;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3pi4() //  [R1]
         { info_tbl: [(c3pi4,
                       label: block_c3pi4_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pi4: // global
           if (R1 & 7 == 1) goto u3piK; else goto c3pik;
       u3piK: // global
           Sp = Sp + 16;
           call _c3phW() args: 0, res: 0, upd: 0;
       c3pik: // global
           I64[Sp] = block_c3pii_info;
           R2 = P64[R1 + 6];
           _s3ozu::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = I64[Sp + 32] + 1;
           P64[Sp + 32] = _s3ozu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pii() //  [R1]
         { info_tbl: [(c3pii,
                       label: block_c3pii_info
                       rep:StackRep [False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pii: // global
           P64[Sp + 16] = R1;
           _s3ozo::I64 = I64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 32];
           I64[Sp + 32] = _s3ozo::I64;
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c3phA() args: 0, res: 0, upd: 0;
     }
 },
 _c3piq() //  [R1]
         { info_tbl: [(c3piq,
                       label: block_c3piq_info
                       rep:StackRep [False, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3piq: // global
           P64[Sp + 16] = R1;
           P64[Sp + 24] = P64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c3phA() args: 0, res: 0, upd: 0;
     }
 },
 _c3phW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3phW: // global
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ozF_entry() //  [R1, R2]
         { info_tbl: [(c3piZ,
                       label: sat_s3ozF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3piZ: // global
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = R2;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           call probe_s3ozl_entry(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$w<++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pj2,
                       label: Text.ParserCombinators.ReadP.$w<++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pj2: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3pj6; else goto c3pj5;
       c3pj6: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$w<++_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pj5: // global
           I64[Hp - 64] = lvl4_s3ozk_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = probe_s3ozl_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3ozF_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 36;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.912896083 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++1_closure" {
     Text.ParserCombinators.ReadP.<++1_closure:
         const Text.ParserCombinators.ReadP.<++1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.<++1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pje,
                       label: Text.ParserCombinators.ReadP.<++1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pje: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3pjf; else goto c3pjg;
       c3pjf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.<++1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pjg: // global
           I64[Sp - 8] = block_c3pjb_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pjb() //  [R1]
         { info_tbl: [(c3pjb,
                       label: block_c3pjb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pjb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pjj; else goto c3pji;
       c3pjj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pji: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.91429678 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++_closure" {
     Text.ParserCombinators.ReadP.<++_closure:
         const Text.ParserCombinators.ReadP.<++_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.<++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pjo,
                       label: Text.ParserCombinators.ReadP.<++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pjo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.<++1_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.916604348 UTC

[section ""data" . Text.ParserCombinators.ReadP.manyTill1_closure" {
     Text.ParserCombinators.ReadP.manyTill1_closure:
         const Text.ParserCombinators.ReadP.manyTill1_info;
         const 0;
 },
 lvl4_s3ozQ_entry() //  [R1]
         { info_tbl: [(c3pjE,
                       label: lvl4_s3ozQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pjE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pjF; else goto c3pjG;
       c3pjF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pjG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ozS_entry() //  [R1]
         { info_tbl: [(c3pjM,
                       label: sat_s3ozS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pjM: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3ozO_entry() //  [R1, R2]
         { info_tbl: [(c3pjP,
                       label: scan_s3ozO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pjP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3pjT; else goto c3pjS;
       c3pjT: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pjS: // global
           _s3ozM::P64 = P64[R1 + 7];
           I64[Hp - 32] = lvl4_s3ozQ_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3ozS_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 7;
           R1 = _s3ozM::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ozZ_entry() //  [R1, R2]
         { info_tbl: [(c3pkb,
                       label: sat_s3ozZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pkb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pkf; else goto c3pke;
       c3pkf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pke: // global
           _s3ozV::P64 = P64[R1 + 7];
           _s3ozW::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3ozW::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3ozV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oA0_entry() //  [R1, R2]
         { info_tbl: [(c3pkg,
                       label: sat_s3oA0_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pkg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pkk; else goto c3pkj;
       c3pkk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pkj: // global
           _s3ozU::P64 = P64[R1 + 7];
           _s3ozV::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ozZ_info;
           P64[Hp - 8] = _s3ozV::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3ozU::P64;
           call scan2_s3ozU_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 scan1_s3ozT_entry() //  [R1, R2]
         { info_tbl: [(c3pkl,
                       label: scan1_s3ozT_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pkl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pkp; else goto c3pko;
       c3pkp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pko: // global
           _s3ozL::P64 = P64[R1 + 7];
           _s3ozU::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oA0_info;
           P64[Hp - 8] = _s3ozU::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3ozL::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 scan2_s3ozU_entry() //  [R1, R2]
         { info_tbl: [(c3pkx,
                       label: scan2_s3ozU_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pkx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3pky; else goto c3pkz;
       c3pky: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pkz: // global
           I64[Sp - 8] = block_c3pku_info;
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pku() //  [R1]
         { info_tbl: [(c3pku,
                       label: block_c3pku_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pku: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pkC; else goto c3pkB;
       c3pkC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pkB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.manyTill1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pkD,
                       label: Text.ParserCombinators.ReadP.manyTill1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pkD: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3pkH; else goto c3pkG;
       c3pkH: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.manyTill1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pkG: // global
           I64[Hp - 56] = scan_s3ozO_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = scan1_s3ozT_info;
           P64[Hp - 32] = R2;
           _c3pjV::P64 = Hp - 15;
           P64[Hp - 24] = _c3pjV::P64;
           I64[Hp - 16] = scan2_s3ozU_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 39;
           R2 = R4;
           R1 = _c3pjV::P64;
           call scan2_s3ozU_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.921941875 UTC

[section ""data" . Text.ParserCombinators.ReadP.manyTill_closure" {
     Text.ParserCombinators.ReadP.manyTill_closure:
         const Text.ParserCombinators.ReadP.manyTill_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.manyTill_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pkM,
                       label: Text.ParserCombinators.ReadP.manyTill_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pkM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.manyTill1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.923371512 UTC

[section ""data" . Text.ParserCombinators.ReadP.eof1_closure" {
     Text.ParserCombinators.ReadP.eof1_closure:
         const Text.ParserCombinators.ReadP.eof1_info;
 },
 lvl4_s3oA5_entry() //  [R1]
         { info_tbl: [(c3pkX,
                       label: lvl4_s3oA5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pkX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pkY; else goto c3pkZ;
       c3pkY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pkZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oAa_entry() //  [R1, R2]
         { info_tbl: [(c3plc,
                       label: sat_s3oAa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3plc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pld; else goto c3ple;
       c3pld: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ple: // global
           I64[Sp - 16] = block_c3pl5_info;
           _s3oA5::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3oA5::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3pll; else goto c3pl6;
       u3pll: // global
           call _c3pl5(R1) args: 0, res: 0, upd: 0;
       c3pl6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pl5() //  [R1]
         { info_tbl: [(c3pl5,
                       label: block_c3pl5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pl5: // global
           if (R1 & 7 == 1) goto c3pl9; else goto c3pla;
       c3pl9: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3pla: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.eof1_entry() //  [R2]
         { info_tbl: [(c3pln,
                       label: Text.ParserCombinators.ReadP.eof1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pln: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3plr; else goto c3plq;
       c3plr: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.eof1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3plq: // global
           I64[Hp - 48] = lvl4_s3oA5_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3oAa_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.925061924 UTC

[section ""data" . Text.ParserCombinators.ReadP.eof_closure" {
     Text.ParserCombinators.ReadP.eof_closure:
         const Text.ParserCombinators.ReadP.eof_info;
 },
 Text.ParserCombinators.ReadP.eof_entry() //  [R2]
         { info_tbl: [(c3plw,
                       label: Text.ParserCombinators.ReadP.eof_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3plw: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.eof1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.926411851 UTC

[section ""data" . Text.ParserCombinators.ReadP.satisfy1_closure" {
     Text.ParserCombinators.ReadP.satisfy1_closure:
         const Text.ParserCombinators.ReadP.satisfy1_info;
 },
 sat_s3oAf_entry() //  [R1, R2]
         { info_tbl: [(c3plO,
                       label: sat_s3oAf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3plO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3plP; else goto c3plQ;
       c3plP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3plQ: // global
           I64[Sp - 24] = block_c3plI_info;
           _s3oAd::P64 = R2;
           R2 = R2;
           _s3oAc::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s3oAc::P64;
           P64[Sp - 8] = _s3oAd::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3plI() //  [R1]
         { info_tbl: [(c3plI,
                       label: block_c3plI_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3plI: // global
           if (R1 & 7 == 1) goto c3plL; else goto c3plM;
       c3plL: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3plM: // global
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.satisfy1_entry() //  [R2, R3]
         { info_tbl: [(c3plY,
                       label: Text.ParserCombinators.ReadP.satisfy1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3plY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3pm2; else goto c3pm1;
       c3pm2: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.satisfy1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pm1: // global
           I64[Hp - 32] = sat_s3oAf_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.927950517 UTC

[section ""data" . Text.ParserCombinators.ReadP.satisfy_closure" {
     Text.ParserCombinators.ReadP.satisfy_closure:
         const Text.ParserCombinators.ReadP.satisfy_info;
 },
 Text.ParserCombinators.ReadP.satisfy_entry() //  [R2, R3]
         { info_tbl: [(c3pm7,
                       label: Text.ParserCombinators.ReadP.satisfy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pm7: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.satisfy1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.929367995 UTC

[section ""data" . Text.ParserCombinators.ReadP.char1_closure" {
     Text.ParserCombinators.ReadP.char1_closure:
         const Text.ParserCombinators.ReadP.char1_info;
 },
 sat_s3oAo_entry() //  [R1, R2]
         { info_tbl: [(c3pmm,
                       label: sat_s3oAo_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pmm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3pmq; else goto c3pmr;
       c3pmq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pmr: // global
           I64[Sp - 24] = block_c3pmj_info;
           _s3oAh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s3oAh::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3pmE; else goto c3pmk;
       u3pmE: // global
           call _c3pmj(R1) args: 0, res: 0, upd: 0;
       c3pmk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pmj() //  [R1]
         { info_tbl: [(c3pmj,
                       label: block_c3pmj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pmj: // global
           I64[Sp] = block_c3pmp_info;
           _s3oAk::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3oAk::I64;
           if (R1 & 7 != 0) goto u3pmD; else goto c3pmt;
       u3pmD: // global
           call _c3pmp(R1) args: 0, res: 0, upd: 0;
       c3pmt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pmp() //  [R1]
         { info_tbl: [(c3pmp,
                       label: block_c3pmp_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pmp: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c3pmC; else goto c3pmB;
       c3pmC: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3pmB: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.char1_entry() //  [R2, R3]
         { info_tbl: [(c3pmG,
                       label: Text.ParserCombinators.ReadP.char1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pmG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3pmK; else goto c3pmJ;
       c3pmK: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.char1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pmJ: // global
           I64[Hp - 32] = sat_s3oAo_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.931136189 UTC

[section ""data" . Text.ParserCombinators.ReadP.char_closure" {
     Text.ParserCombinators.ReadP.char_closure:
         const Text.ParserCombinators.ReadP.char_info;
 },
 Text.ParserCombinators.ReadP.char_entry() //  [R2, R3]
         { info_tbl: [(c3pmP,
                       label: Text.ParserCombinators.ReadP.char_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pmP: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.char1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.933135312 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wstring_closure" {
     Text.ParserCombinators.ReadP.$wstring_closure:
         const Text.ParserCombinators.ReadP.$wstring_info;
 },
 sat_s3oAI_entry() //  [R1]
         { info_tbl: [(c3pnx,
                       label: sat_s3oAI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pnx: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3oAr_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c3pnE,
                       label: scan_s3oAr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pnE: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3pnF; else goto c3pnG;
       c3pnF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pnG: // global
           I64[Sp - 40] = block_c3pn1_info;
           _s3oAr::P64 = R1;
           _s3oAp::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3oAp::P64;
           P64[Sp - 24] = _s3oAr::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3po2; else goto c3pn2;
       u3po2: // global
           call _c3pn1(R1) args: 0, res: 0, upd: 0;
       c3pn2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pn1() //  [R1]
         { info_tbl: [(c3pn1,
                       label: block_c3pn1_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pn1: // global
           if (R1 & 7 == 1) goto c3pnB; else goto c3pnC;
       c3pnB: // global
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3pnC: // global
           I64[Sp] = block_c3pn7_info;
           _s3oAw::P64 = P64[R1 + 6];
           _s3oAx::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 8] = _s3oAx::P64;
           P64[Sp + 24] = _s3oAw::P64;
           if (R1 & 7 != 0) goto u3pnZ; else goto c3pn8;
       u3pnZ: // global
           call _c3pn7(R1) args: 0, res: 0, upd: 0;
       c3pn8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pn7() //  [R1]
         { info_tbl: [(c3pn7,
                       label: block_c3pn7_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pn7: // global
           if (R1 & 7 == 1) goto c3pnN; else goto c3pnP;
       c3pnN: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pnP: // global
           I64[Sp - 8] = block_c3pnd_info;
           _s3oAz::P64 = P64[R1 + 6];
           _s3oAA::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _s3oAA::P64;
           P64[Sp + 24] = _s3oAz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3po0; else goto c3pne;
       u3po0: // global
           call _c3pnd(R1) args: 0, res: 0, upd: 0;
       c3pne: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pnd() //  [R1]
         { info_tbl: [(c3pnd,
                       label: block_c3pnd_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pnd: // global
           I64[Sp] = block_c3pni_info;
           _s3oAC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3oAC::I64;
           if (R1 & 7 != 0) goto u3po1; else goto c3pnj;
       u3po1: // global
           call _c3pni(R1) args: 0, res: 0, upd: 0;
       c3pnj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pni() //  [R1]
         { info_tbl: [(c3pni,
                       label: block_c3pni_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pni: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3pnT; else goto c3pnS;
       c3pnT: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pnS: // global
           if (I64[Sp + 32] == I64[R1 + 7]) goto c3pnX; else goto c3pnV;
       c3pnX: // global
           I64[Hp - 72] = stg_ap_4_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 40];
           I64[Hp - 24] = sat_s3oAI_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pnV: // global
           Hp = Hp - 80;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oAK_entry() //  [R1, R2]
         { info_tbl: [(c3po8,
                       label: sat_s3oAK_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3po8: // global
           R4 = P64[R1 + 15];
           R3 = R2;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 23];
           call scan_s3oAr_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wstring_entry() //  [R2, R3]
         { info_tbl: [(c3pob,
                       label: Text.ParserCombinators.ReadP.$wstring_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pob: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pof; else goto c3poe;
       c3pof: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wstring_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3poe: // global
           I64[Hp - 40] = scan_s3oAr_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3oAK_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 37;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.93643351 UTC

[section ""data" . Text.ParserCombinators.ReadP.string1_closure" {
     Text.ParserCombinators.ReadP.string1_closure:
         const Text.ParserCombinators.ReadP.string1_info;
 },
 Text.ParserCombinators.ReadP.string1_entry() //  [R2, R3]
         { info_tbl: [(c3pon,
                       label: Text.ParserCombinators.ReadP.string1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pon: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3poo; else goto c3pop;
       c3poo: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.string1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pop: // global
           I64[Sp - 8] = block_c3pok_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pok() //  [R1]
         { info_tbl: [(c3pok,
                       label: block_c3pok_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pok: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pos; else goto c3por;
       c3pos: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3por: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.937904278 UTC

[section ""data" . Text.ParserCombinators.ReadP.string_closure" {
     Text.ParserCombinators.ReadP.string_closure:
         const Text.ParserCombinators.ReadP.string_info;
 },
 Text.ParserCombinators.ReadP.string_entry() //  [R2, R3]
         { info_tbl: [(c3pox,
                       label: Text.ParserCombinators.ReadP.string_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pox: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.string1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.940059204 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wmunch_closure" {
     Text.ParserCombinators.ReadP.$wmunch_closure:
         const Text.ParserCombinators.ReadP.$wmunch_info;
 },
 sat_s3oB1_entry() //  [R1, R2]
         { info_tbl: [(c3pp4,
                       label: sat_s3oB1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pp4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pp8; else goto c3pp7;
       c3pp8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pp7: // global
           _s3oAT::P64 = P64[R1 + 7];
           _s3oAV::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oAV::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oAT::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oAY_entry() //  [R1]
         { info_tbl: [(c3pp9,
                       label: lvl4_s3oAY_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pp9: // global
           _s3oAY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ppa; else goto c3ppb;
       c3ppb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ppd; else goto c3ppc;
       c3ppd: // global
           HpAlloc = 24;
           goto c3ppa;
       c3ppa: // global
           R1 = _s3oAY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ppc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3oAY::P64;
           _s3oAR::P64 = P64[_s3oAY::P64 + 16];
           _s3oAT::P64 = P64[_s3oAY::P64 + 24];
           _s3oAV::P64 = P64[_s3oAY::P64 + 32];
           _s3oAW::P64 = P64[_s3oAY::P64 + 40];
           I64[Hp - 16] = sat_s3oB1_info;
           P64[Hp - 8] = _s3oAT::P64;
           P64[Hp] = _s3oAV::P64;
           R3 = Hp - 15;
           R2 = _s3oAW::P64;
           R1 = _s3oAR::P64;
           Sp = Sp - 16;
           call scan_s3oAR_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oB3_entry() //  [R1]
         { info_tbl: [(c3ppj,
                       label: sat_s3oB3_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ppj: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3oAR_entry() //  [R1, R2, R3]
         { info_tbl: [(c3ppq,
                       label: scan_s3oAR_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ppq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3ppr; else goto c3pps;
       c3ppr: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pps: // global
           I64[Sp - 32] = block_c3poJ_info;
           _s3oAR::P64 = R1;
           _s3oAP::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 24] = _s3oAP::P64;
           P64[Sp - 16] = _s3oAR::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3ppK; else goto c3poK;
       u3ppK: // global
           call _c3poJ(R1) args: 0, res: 0, upd: 0;
       c3poK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3poJ() //  [R1]
         { info_tbl: [(c3poJ,
                       label: block_c3poJ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3poJ: // global
           if (R1 & 7 == 1) goto u3ppG; else goto c3ppo;
       u3ppG: // global
           Sp = Sp + 24;
           call _c3ppz() args: 0, res: 0, upd: 0;
       c3ppo: // global
           I64[Sp - 8] = block_c3poP_info;
           _s3oAV::P64 = P64[R1 + 6];
           R2 = _s3oAV::P64;
           _s3oAW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s3oAW::P64;
           P64[Sp + 8] = _s3oAV::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3poP() //  [R1]
         { info_tbl: [(c3poP,
                       label: block_c3poP_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3poP: // global
           if (R1 & 7 == 1) goto u3ppH; else goto c3ppB;
       u3ppH: // global
           Sp = Sp + 32;
           call _c3ppz() args: 0, res: 0, upd: 0;
       c3ppB: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3ppE; else goto c3ppD;
       c3ppE: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ppD: // global
           I64[Hp - 72] = lvl4_s3oAY_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = sat_s3oB3_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ppz() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ppz: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oB5_entry() //  [R1, R2]
         { info_tbl: [(c3ppQ,
                       label: sat_s3oB5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ppQ: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 15];
           call scan_s3oAR_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wmunch_entry() //  [R2, R3]
         { info_tbl: [(c3ppT,
                       label: Text.ParserCombinators.ReadP.$wmunch_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ppT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ppX; else goto c3ppW;
       c3ppX: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wmunch_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ppW: // global
           I64[Hp - 32] = scan_s3oAR_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3oB5_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 30;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.945006022 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch2_closure" {
     Text.ParserCombinators.ReadP.munch2_closure:
         const Text.ParserCombinators.ReadP.munch2_info;
 },
 Text.ParserCombinators.ReadP.munch2_entry() //  [R2, R3]
         { info_tbl: [(c3pq5,
                       label: Text.ParserCombinators.ReadP.munch2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pq5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3pq6; else goto c3pq7;
       c3pq6: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.munch2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pq7: // global
           I64[Sp - 8] = block_c3pq2_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pq2() //  [R1]
         { info_tbl: [(c3pq2,
                       label: block_c3pq2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pq2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pqa; else goto c3pq9;
       c3pqa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pq9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.946431003 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch_closure" {
     Text.ParserCombinators.ReadP.munch_closure:
         const Text.ParserCombinators.ReadP.munch_info;
 },
 Text.ParserCombinators.ReadP.munch_entry() //  [R2, R3]
         { info_tbl: [(c3pqf,
                       label: Text.ParserCombinators.ReadP.munch_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pqf: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.munch2_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.947966647 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wmunch1_closure" {
     Text.ParserCombinators.ReadP.$wmunch1_closure:
         const Text.ParserCombinators.ReadP.$wmunch1_info;
 },
 sat_s3oBg_entry() //  [R1, R2]
         { info_tbl: [(c3pqC,
                       label: sat_s3oBg_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pqC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pqG; else goto c3pqF;
       c3pqG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pqF: // global
           _s3oBb::P64 = P64[R1 + 7];
           _s3oBc::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oBc::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oBb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oBj_entry() //  [R1, R2]
         { info_tbl: [(c3pqL,
                       label: sat_s3oBj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pqL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3pqM; else goto c3pqN;
       c3pqM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pqN: // global
           I64[Sp - 32] = block_c3pqr_info;
           _s3oBc::P64 = R2;
           R2 = R2;
           _s3oBa::P64 = P64[R1 + 7];
           _s3oBb::P64 = P64[R1 + 15];
           R1 = _s3oBa::P64;
           P64[Sp - 24] = _s3oBa::P64;
           P64[Sp - 16] = _s3oBb::P64;
           P64[Sp - 8] = _s3oBc::P64;
           Sp = Sp - 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pqr() //  [R1]
         { info_tbl: [(c3pqr,
                       label: block_c3pqr_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pqr: // global
           if (R1 & 7 == 1) goto c3pqI; else goto c3pqJ;
       c3pqI: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pqJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pqV; else goto c3pqU;
       c3pqV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pqU: // global
           I64[Hp - 16] = sat_s3oBg_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_c3pqQ_info;
           R3 = Hp - 15;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pqQ() //  [R1]
         { info_tbl: [(c3pqQ,
                       label: block_c3pqQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pqQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pqY; else goto c3pqX;
       c3pqY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pqX: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wmunch1_entry() //  [R2, R3]
         { info_tbl: [(c3pqZ,
                       label: Text.ParserCombinators.ReadP.$wmunch1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pqZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pr3; else goto c3pr2;
       c3pr3: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wmunch1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pr2: // global
           I64[Hp - 16] = sat_s3oBj_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.95059083 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch3_closure" {
     Text.ParserCombinators.ReadP.munch3_closure:
         const Text.ParserCombinators.ReadP.munch3_info;
 },
 Text.ParserCombinators.ReadP.munch3_entry() //  [R2, R3]
         { info_tbl: [(c3prb,
                       label: Text.ParserCombinators.ReadP.munch3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3prb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3prc; else goto c3prd;
       c3prc: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.munch3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3prd: // global
           I64[Sp - 8] = block_c3pr8_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch1_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pr8() //  [R1]
         { info_tbl: [(c3pr8,
                       label: block_c3pr8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pr8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3prg; else goto c3prf;
       c3prg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3prf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.95174199 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch1_closure" {
     Text.ParserCombinators.ReadP.munch1_closure:
         const Text.ParserCombinators.ReadP.munch1_info;
 },
 Text.ParserCombinators.ReadP.munch1_entry() //  [R2, R3]
         { info_tbl: [(c3prl,
                       label: Text.ParserCombinators.ReadP.munch1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3prl: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.munch3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.954247454 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces2_closure" {
     Text.ParserCombinators.ReadP.skipSpaces2_closure:
         const Text.ParserCombinators.ReadP.skipSpaces2_info;
 },
 lvl4_s3oBE_entry() //  [R1]
         { info_tbl: [(c3prX,
                       label: lvl4_s3oBE_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3prX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3prY; else goto c3prZ;
       c3prY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3prZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oBG_entry() //  [R1]
         { info_tbl: [(c3ps5,
                       label: sat_s3oBG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ps5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oBL_entry() //  [R1]
         { info_tbl: [(c3pso,
                       label: lvl4_s3oBL_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pso: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3psp; else goto c3psq;
       c3psp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3psq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oBN_entry() //  [R1]
         { info_tbl: [(c3psw,
                       label: sat_s3oBN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3psw: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oBO_entry() //  [R1]
         { info_tbl: [(c3psE,
                       label: lvl4_s3oBO_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3psE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3psF; else goto c3psG;
       c3psF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3psG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oBQ_entry() //  [R1]
         { info_tbl: [(c3psM,
                       label: sat_s3oBQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3psM: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oBR_entry() //  [R1]
         { info_tbl: [(c3psU,
                       label: lvl4_s3oBR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3psU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3psV; else goto c3psW;
       c3psV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3psW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oBT_entry() //  [R1]
         { info_tbl: [(c3pt2,
                       label: sat_s3oBT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pt2: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipSpaces2_entry() //  [R2, R3]
         { info_tbl: [(c3pt9,
                       label: Text.ParserCombinators.ReadP.skipSpaces2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pt9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3pta; else goto c3ptb;
       c3pta: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipSpaces2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ptb: // global
           I64[Sp - 16] = block_c3prs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3ptC; else goto c3prt;
       u3ptC: // global
           call _c3prs(R1) args: 0, res: 0, upd: 0;
       c3prt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3prs() //  [R1]
         { info_tbl: [(c3prs,
                       label: block_c3prs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3prs: // global
           if (R1 & 7 == 1) goto c3pt6; else goto c3pt7;
       c3pt6: // global
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3pt7: // global
           I64[Sp - 8] = block_c3pry_info;
           _s3oBs::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3oBs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ptB; else goto c3prz;
       u3ptB: // global
           call _c3pry(R1) args: 0, res: 0, upd: 0;
       c3prz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pry() //  [R1]
         { info_tbl: [(c3pry,
                       label: block_c3pry_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pry: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3pth; else goto c3ptg;
       c3pth: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ptg: // global
           _s3oBp::P64 = P64[Sp + 16];
           _s3oBs::P64 = P64[Sp + 8];
           _s3oBu::I64 = I64[R1 + 7];
           if (_s3oBu::I64 > 887) goto c3ptn; else goto c3ptA;
       c3ptn: // global
           (_s3oBC::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(_s3oBu::I64);
           if (_s3oBC::I64 == 0) goto c3ptp; else goto c3ptk;
       c3ptk: // global
           I64[Hp - 56] = lvl4_s3oBE_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBG_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ptA: // global
           if (_s3oBu::I64 == 32) goto c3ptz; else goto c3ptx;
       c3ptz: // global
           I64[Hp - 56] = lvl4_s3oBR_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBT_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ptx: // global
           if ((_s3oBu::I64 + -9) > 4) goto c3ptt; else goto c3ptv;
       c3ptt: // global
           if (_s3oBu::I64 != 160) goto c3ptp; else goto c3ptr;
       c3ptp: // global
           Hp = Hp - 64;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s3oBp::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3ptr: // global
           I64[Hp - 56] = lvl4_s3oBL_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBN_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ptv: // global
           I64[Hp - 56] = lvl4_s3oBO_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBQ_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.958258199 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces1_closure" {
     Text.ParserCombinators.ReadP.skipSpaces1_closure:
         const Text.ParserCombinators.ReadP.skipSpaces1_info;
 },
 sat_s3oBW_entry() //  [R1, R2]
         { info_tbl: [(c3ptM,
                       label: sat_s3oBW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ptM: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipSpaces1_entry() //  [R2]
         { info_tbl: [(c3ptQ,
                       label: Text.ParserCombinators.ReadP.skipSpaces1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ptQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ptU; else goto c3ptT;
       c3ptU: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipSpaces1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ptT: // global
           I64[Hp - 24] = sat_s3oBW_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.959389183 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces_closure" {
     Text.ParserCombinators.ReadP.skipSpaces_closure:
         const Text.ParserCombinators.ReadP.skipSpaces_info;
 },
 Text.ParserCombinators.ReadP.skipSpaces_entry() //  [R2]
         { info_tbl: [(c3ptZ,
                       label: Text.ParserCombinators.ReadP.skipSpaces_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ptZ: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.960281648 UTC

[section ""data" . Text.ParserCombinators.ReadP.Get_closure" {
     Text.ParserCombinators.ReadP.Get_closure:
         const Text.ParserCombinators.ReadP.Get_info;
 },
 Text.ParserCombinators.ReadP.Get_entry() //  [R2]
         { info_tbl: [(c3pu7,
                       label: Text.ParserCombinators.ReadP.Get_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pu7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pub; else goto c3pua;
       c3pub: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Get_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pua: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.961317033 UTC

[section ""data" . Text.ParserCombinators.ReadP.Look_closure" {
     Text.ParserCombinators.ReadP.Look_closure:
         const Text.ParserCombinators.ReadP.Look_info;
 },
 Text.ParserCombinators.ReadP.Look_entry() //  [R2]
         { info_tbl: [(c3puh,
                       label: Text.ParserCombinators.ReadP.Look_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3puh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pul; else goto c3puk;
       c3pul: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Look_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3puk: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.962186577 UTC

[section ""data" . Text.ParserCombinators.ReadP.Fail_closure" {
     Text.ParserCombinators.ReadP.Fail_closure:
         const Text.ParserCombinators.ReadP.Fail_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.962939667 UTC

[section ""data" . Text.ParserCombinators.ReadP.Result_closure" {
     Text.ParserCombinators.ReadP.Result_closure:
         const Text.ParserCombinators.ReadP.Result_info;
 },
 Text.ParserCombinators.ReadP.Result_entry() //  [R2, R3]
         { info_tbl: [(c3pur,
                       label: Text.ParserCombinators.ReadP.Result_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pur: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3puv; else goto c3puu;
       c3puv: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Result_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3puu: // global
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.963982488 UTC

[section ""data" . Text.ParserCombinators.ReadP.Final_closure" {
     Text.ParserCombinators.ReadP.Final_closure:
         const Text.ParserCombinators.ReadP.Final_info;
 },
 Text.ParserCombinators.ReadP.Final_entry() //  [R2]
         { info_tbl: [(c3puB,
                       label: Text.ParserCombinators.ReadP.Final_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3puB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3puF; else goto c3puE;
       c3puF: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Final_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3puE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.964892184 UTC

[Text.ParserCombinators.ReadP.Get_con_entry() //  [R1]
         { info_tbl: [(c3puG,
                       label: Text.ParserCombinators.ReadP.Get_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,71,101,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3puG: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.965825009 UTC

[Text.ParserCombinators.ReadP.Look_con_entry() //  [R1]
         { info_tbl: [(c3puH,
                       label: Text.ParserCombinators.ReadP.Look_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,76,111,111,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3puH: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.967477026 UTC

[Text.ParserCombinators.ReadP.Fail_con_entry() //  [R1]
         { info_tbl: [(c3puI,
                       label: Text.ParserCombinators.ReadP.Fail_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,70,97,105,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3puI: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.968148642 UTC

[Text.ParserCombinators.ReadP.Result_con_entry() //  [R1]
         { info_tbl: [(c3puJ,
                       label: Text.ParserCombinators.ReadP.Result_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,82,101,115,117,108,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3puJ: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.96885205 UTC

[Text.ParserCombinators.ReadP.Final_con_entry() //  [R1]
         { info_tbl: [(c3puK,
                       label: Text.ParserCombinators.ReadP.Final_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,70,105,110,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3puK: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.969563937 UTC

[section ""relreadonly" . S3oJX_srt" {
     S3oJX_srt:
         const Control.Exception.Base.patError_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const lvl1_r3oqF_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure;
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure;
         const Text.ParserCombinators.ReadP.choice_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const lvl3_r3oqH_closure;
         const Text.ParserCombinators.ReadP.gather1_closure;
         const Text.ParserCombinators.ReadP.option1_closure;
         const Text.ParserCombinators.ReadP.optional1_closure;
         const Text.ParserCombinators.ReadP.endBy3_closure;
         const Text.ParserCombinators.ReadP.many2_closure;
         const Text.ParserCombinators.ReadP.endBy4_closure;
         const Text.ParserCombinators.ReadP.skipMany2_closure;
         const Text.ParserCombinators.ReadP.skipMany3_closure;
         const Text.ParserCombinators.ReadP.sepBy3_closure;
         const Text.ParserCombinators.ReadP.endBy2_closure;
         const Text.ParserCombinators.ReadP.sepBy2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure;
         const Text.ParserCombinators.ReadP.chainr3_closure;
         const Text.ParserCombinators.ReadP.chainr2_closure;
         const Text.ParserCombinators.ReadP.chainl3_closure;
         const Text.ParserCombinators.ReadP.chainl2_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const Text.ParserCombinators.ReadP.<++1_closure;
         const Text.ParserCombinators.ReadP.manyTill1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.970363305 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:58:00.97109469 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_entry() //  [R2]
         { info_tbl: [(c3puQ,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3puQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3puU; else goto c3puT;
       c3puU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3puT: // global
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.972046678 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure:
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info;
 },
 Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_entry() //  []
         { info_tbl: [(c3puZ,
                       label: Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3puZ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.97314404 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP2_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP2_closure:
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_info;
 },
 sat_s3or2_entry() //  [R1, R2]
         { info_tbl: [(c3pvb,
                       label: sat_s3or2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pvb: // global
           R4 = R2;
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fFunctorReadP2_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(c3pve,
                       label: Text.ParserCombinators.ReadP.$fFunctorReadP2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pve: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pvi; else goto c3pvh;
       c3pvi: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fFunctorReadP2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pvh: // global
           I64[Hp - 16] = sat_s3or2_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 15;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.974546229 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP1_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP1_closure:
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_info;
 },
 sat_s3or8_entry() //  [R1]
         { info_tbl: [(c3pvt,
                       label: sat_s3or8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pvt: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fFunctorReadP1_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(c3pvw,
                       label: Text.ParserCombinators.ReadP.$fFunctorReadP1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pvw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pvA; else goto c3pvz;
       c3pvA: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fFunctorReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pvz: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3or8_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.975570225 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_closure+3;
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.976251569 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_info;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP5_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3pvF,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pvF: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.977070798 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure:
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_info;
 },
 Text.ParserCombinators.ReadP.$fMonadFailReadP1_entry() //  []
         { info_tbl: [(c3pvM,
                       label: Text.ParserCombinators.ReadP.$fMonadFailReadP1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pvM: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.978182111 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP1_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP1_closure:
         const Text.ParserCombinators.ReadP.$fMonadReadP1_info;
 },
 sat_s3orh_entry() //  [R1, R2]
         { info_tbl: [(c3pvY,
                       label: sat_s3orh_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pvY: // global
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fMonadReadP1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pw1,
                       label: Text.ParserCombinators.ReadP.$fMonadReadP1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pw1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pw5; else goto c3pw4;
       c3pw5: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fMonadReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pw4: // global
           I64[Hp - 16] = sat_s3orh_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3ord::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ord::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.980908166 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info;
 },
 sat_s3oro_entry() //  [R1, R2]
         { info_tbl: [(c3pwm,
                       label: sat_s3oro_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pwm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pwn; else goto c3pwo;
       c3pwn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pwo: // global
           I64[Sp - 16] = block_c3pwk_info;
           R2 = R2;
           _s3ori::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3ori::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pwk() //  [R1]
         { info_tbl: [(c3pwk,
                       label: block_c3pwk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pwk: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ors_entry() //  [R1, R2]
         { info_tbl: [(c3pwB,
                       label: sat_s3ors_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pwB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pwC; else goto c3pwD;
       c3pwC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pwD: // global
           I64[Sp - 16] = block_c3pwz_info;
           R2 = R2;
           _s3ori::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3ori::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pwz() //  [R1]
         { info_tbl: [(c3pwz,
                       label: block_c3pwz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pwz: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orw_entry() //  [R1]
         { info_tbl: [(c3pwO,
                       label: sat_s3orw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pwO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pwP; else goto c3pwQ;
       c3pwP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pwQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3orD_entry() //  [R1, R2]
         { info_tbl: [(c3px5,
                       label: sat_s3orD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3px5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pxa; else goto c3pxb;
       c3pxa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pxb: // global
           I64[Sp - 16] = block_c3px2_info;
           _s3ori::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ori::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3pxf; else goto c3px3;
       u3pxf: // global
           call _c3px2(R1) args: 0, res: 0, upd: 0;
       c3px3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3px2() //  [R1]
         { info_tbl: [(c3px2,
                       label: block_c3px2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3px2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pxe; else goto c3pxd;
       c3pxe: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pxd: // global
           _s3orA::P64 = P64[R1 + 7];
           _s3orB::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s3orA::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _s3orB::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orE_entry() //  [R1]
         { info_tbl: [(c3pxg,
                       label: sat_s3orE_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pxg: // global
           _s3orE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pxh; else goto c3pxi;
       c3pxi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pxk; else goto c3pxj;
       c3pxk: // global
           HpAlloc = 16;
           goto c3pxh;
       c3pxh: // global
           R1 = _s3orE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pxj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3orE::P64;
           _s3ori::P64 = P64[_s3orE::P64 + 16];
           _s3orx::P64 = P64[_s3orE::P64 + 24];
           I64[Hp - 8] = sat_s3orD_info;
           P64[Hp] = _s3ori::P64;
           R3 = _s3orx::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry() //  [R2,
                                                                 R3]
         { info_tbl: [(c3pxs,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pxs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pxt; else goto c3pxu;
       c3pxt: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pxu: // global
           I64[Sp - 16] = block_c3pwa_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3pxR; else goto c3pwb;
       u3pxR: // global
           call _c3pwa(R1) args: 0, res: 0, upd: 0;
       c3pwb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pwa() //  [R1]
         { info_tbl: [(c3pwa,
                       label: block_c3pwa_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pwa: // global
           _s3ori::P64 = P64[Sp + 8];
           _c3pxr::P64 = R1 & 7;
           if (_c3pxr::P64 < 4) goto u3pxO; else goto u3pxQ;
       u3pxO: // global
           if (_c3pxr::P64 < 3) goto u3pxP; else goto c3pxo;
       u3pxP: // global
           if (_c3pxr::P64 < 2) goto c3pxm; else goto c3pxn;
       c3pxm: // global
           Hp = Hp + 40;
           _s3ork::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3pxC; else goto c3pxx;
       c3pxx: // global
           _s3orl::P64 = P64[_s3ork::P64 + 7];
           I64[Hp - 32] = sat_s3oro_info;
           P64[Hp - 24] = _s3ori::P64;
           P64[Hp - 16] = _s3orl::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pxn: // global
           Hp = Hp + 40;
           _s3ork::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3pxC; else goto c3pxB;
       c3pxC: // global
           HpAlloc = 40;
           R1 = _s3ork::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pxB: // global
           _s3orp::P64 = P64[_s3ork::P64 + 6];
           I64[Hp - 32] = sat_s3ors_info;
           P64[Hp - 24] = _s3ori::P64;
           P64[Hp - 16] = _s3orp::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pxo: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3pxQ: // global
           if (_c3pxr::P64 < 5) goto c3pxp; else goto c3pxq;
       c3pxp: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3pxJ; else goto c3pxI;
       c3pxJ: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pxI: // global
           _s3ort::P64 = P64[R1 + 4];
           _s3oru::P64 = P64[R1 + 12];
           I64[Hp - 80] = sat_s3orw_info;
           P64[Hp - 64] = _s3ori::P64;
           P64[Hp - 56] = _s3oru::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ori::P64;
           P64[Hp - 24] = _s3ort::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pxq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pxN; else goto c3pxM;
       c3pxN: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pxM: // global
           _s3orx::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3orE_info;
           P64[Hp - 24] = _s3ori::P64;
           P64[Hp - 16] = _s3orx::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.986925599 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info;
 },
 sat_s3orL_entry() //  [R1, R2]
         { info_tbl: [(c3py8,
                       label: sat_s3orL_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3py8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3py9; else goto c3pya;
       c3py9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pya: // global
           I64[Sp - 16] = block_c3py6_info;
           R2 = R2;
           _s3orF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3orF::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3py6() //  [R1]
         { info_tbl: [(c3py6,
                       label: block_c3py6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3py6: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orP_entry() //  [R1, R2]
         { info_tbl: [(c3pyn,
                       label: sat_s3orP_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pyn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pyo; else goto c3pyp;
       c3pyo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pyp: // global
           I64[Sp - 16] = block_c3pyl_info;
           R2 = R2;
           _s3orF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3orF::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pyl() //  [R1]
         { info_tbl: [(c3pyl,
                       label: block_c3pyl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pyl: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orS_entry() //  [R1]
         { info_tbl: [(c3pyA,
                       label: sat_s3orS_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pyA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pyB; else goto c3pyC;
       c3pyB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pyC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3orY_entry() //  [R1, R2]
         { info_tbl: [(c3pyR,
                       label: sat_s3orY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pyR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pyV; else goto c3pyW;
       c3pyV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pyW: // global
           I64[Sp - 16] = block_c3pyO_info;
           _s3orF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3orF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3pz0; else goto c3pyP;
       u3pz0: // global
           call _c3pyO(R1) args: 0, res: 0, upd: 0;
       c3pyP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pyO() //  [R1]
         { info_tbl: [(c3pyO,
                       label: block_c3pyO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pyO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pyZ; else goto c3pyY;
       c3pyZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pyY: // global
           _s3orX::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s3orX::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orZ_entry() //  [R1]
         { info_tbl: [(c3pz1,
                       label: sat_s3orZ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pz1: // global
           _s3orZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pz2; else goto c3pz3;
       c3pz3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pz5; else goto c3pz4;
       c3pz5: // global
           HpAlloc = 16;
           goto c3pz2;
       c3pz2: // global
           R1 = _s3orZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pz4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3orZ::P64;
           _s3orF::P64 = P64[_s3orZ::P64 + 16];
           _s3orT::P64 = P64[_s3orZ::P64 + 24];
           I64[Hp - 8] = sat_s3orY_info;
           P64[Hp] = _s3orF::P64;
           R3 = _s3orT::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3pzd,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pzd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pze; else goto c3pzf;
       c3pze: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pzf: // global
           I64[Sp - 16] = block_c3pxW_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3pzB; else goto c3pxX;
       u3pzB: // global
           call _c3pxW(R1) args: 0, res: 0, upd: 0;
       c3pxX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pxW() //  [R1]
         { info_tbl: [(c3pxW,
                       label: block_c3pxW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pxW: // global
           _s3orF::P64 = P64[Sp + 8];
           _c3pzc::P64 = R1 & 7;
           if (_c3pzc::P64 < 4) goto u3pzy; else goto u3pzA;
       u3pzy: // global
           if (_c3pzc::P64 < 3) goto u3pzz; else goto c3pz9;
       u3pzz: // global
           if (_c3pzc::P64 < 2) goto c3pz7; else goto c3pz8;
       c3pz7: // global
           Hp = Hp + 40;
           _s3orH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3pzn; else goto c3pzi;
       c3pzi: // global
           _s3orI::P64 = P64[_s3orH::P64 + 7];
           I64[Hp - 32] = sat_s3orL_info;
           P64[Hp - 24] = _s3orF::P64;
           P64[Hp - 16] = _s3orI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pz8: // global
           Hp = Hp + 40;
           _s3orH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3pzn; else goto c3pzm;
       c3pzn: // global
           HpAlloc = 40;
           R1 = _s3orH::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pzm: // global
           _s3orM::P64 = P64[_s3orH::P64 + 6];
           I64[Hp - 32] = sat_s3orP_info;
           P64[Hp - 24] = _s3orF::P64;
           P64[Hp - 16] = _s3orM::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pz9: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3pzA: // global
           if (_c3pzc::P64 < 5) goto c3pza; else goto c3pzb;
       c3pza: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pzt; else goto c3pzs;
       c3pzt: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pzs: // global
           _s3orR::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3orS_info;
           P64[Hp - 32] = _s3orF::P64;
           P64[Hp - 24] = _s3orR::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3orF::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pzb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pzx; else goto c3pzw;
       c3pzx: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pzw: // global
           _s3orT::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3orZ_info;
           P64[Hp - 24] = _s3orF::P64;
           P64[Hp - 16] = _s3orT::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.991937374 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorP_closure" {
     Text.ParserCombinators.ReadP.$fFunctorP_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.993919044 UTC

[section ""data" . Text.ParserCombinators.ReadP.run_closure" {
     Text.ParserCombinators.ReadP.run_closure:
         const Text.ParserCombinators.ReadP.run_info;
 },
 sat_s3osd_entry() //  [R1]
         { info_tbl: [(c3pzS,
                       label: sat_s3osd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pzS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pzT; else goto c3pzU;
       c3pzT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pzU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.run_entry() //  [R2, R3]
         { info_tbl: [(c3pA2,
                       label: Text.ParserCombinators.ReadP.run_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pA2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pA3; else goto u3pAJ;
       c3pA3: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.run_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u3pAJ: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c3pzD() args: 0, res: 0, upd: 0;
     }
 },
 _c3pzD() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pzD: // global
           _s3os0::P64 = P64[Sp];
           I64[Sp] = block_c3pzG_info;
           R1 = _s3os0::P64;
           if (R1 & 7 != 0) goto u3pAO; else goto c3pzH;
       u3pAO: // global
           call _c3pzG(R1) args: 0, res: 0, upd: 0;
       c3pzH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pzG() //  [R1]
         { info_tbl: [(c3pzG,
                       label: block_c3pzG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pzG: // global
           _s3os1::P64 = P64[Sp + 8];
           _c3pA1::P64 = R1 & 7;
           if (_c3pA1::P64 < 4) goto u3pAG; else goto u3pAI;
       u3pAG: // global
           if (_c3pA1::P64 < 3) goto u3pAH; else goto u3pAK;
       u3pAH: // global
           if (_c3pA1::P64 < 2) goto c3pzW; else goto c3pzX;
       c3pzW: // global
           I64[Sp] = block_c3pA6_info;
           _s3os3::P64 = P64[R1 + 7];
           R1 = _s3os1::P64;
           P64[Sp + 8] = _s3os3::P64;
           if (R1 & 7 != 0) goto u3pAP; else goto c3pA8;
       u3pAP: // global
           call _c3pA6(R1) args: 0, res: 0, upd: 0;
       c3pA8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3pzX: // global
           I64[Sp] = block_c3pAp_info;
           R2 = _s3os1::P64;
           R1 = P64[R1 + 6];
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3pAK: // global
           Sp = Sp + 16;
           call _c3pzY() args: 0, res: 0, upd: 0;
       u3pAI: // global
           if (_c3pA1::P64 < 5) goto c3pzZ; else goto c3pA0;
       c3pzZ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3pAB; else goto c3pAA;
       c3pAB: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pAA: // global
           _s3osa::P64 = P64[R1 + 4];
           _s3osb::P64 = P64[R1 + 12];
           I64[Hp - 72] = sat_s3osd_info;
           P64[Hp - 56] = _s3os1::P64;
           P64[Hp - 48] = _s3osb::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s3osa::P64;
           P64[Hp - 24] = _s3os1::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pA0: // global
           R1 = P64[R1 + 3] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3pA6() //  [R1]
         { info_tbl: [(c3pA6,
                       label: block_c3pA6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pA6: // global
           if (R1 & 7 == 1) goto u3pAL; else goto c3pAj;
       u3pAL: // global
           Sp = Sp + 16;
           call _c3pzY() args: 0, res: 0, upd: 0;
       c3pAj: // global
           I64[Sp] = block_c3pAh_info;
           R2 = P64[R1 + 6];
           _s3os6::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3os6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pAh() //  [R1]
         { info_tbl: [(c3pAh,
                       label: block_c3pAh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pAh: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c3pzD() args: 0, res: 0, upd: 0;
     }
 },
 _c3pAp() //  [R1]
         { info_tbl: [(c3pAp,
                       label: block_c3pAp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pAp: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c3pzD() args: 0, res: 0, upd: 0;
     }
 },
 _c3pzY() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pzY: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:00.997778843 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wreadS_to_P_closure" {
     Text.ParserCombinators.ReadP.$wreadS_to_P_closure:
         const Text.ParserCombinators.ReadP.$wreadS_to_P_info;
 },
 sat_s3osr_entry() //  [R1]
         { info_tbl: [(c3pBj,
                       label: sat_s3osr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pBj: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_s3osh_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 go_s3osh_entry() //  [R1, R2]
         { info_tbl: [(c3pBq,
                       label: go_s3osh_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pBq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3pBr; else goto c3pBs;
       c3pBr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pBs: // global
           I64[Sp - 24] = block_c3pB4_info;
           _s3osh::P64 = R1;
           _s3osg::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3osg::P64;
           P64[Sp - 8] = _s3osh::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3pBK; else goto c3pB5;
       u3pBK: // global
           call _c3pB4(R1) args: 0, res: 0, upd: 0;
       c3pB5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pB4() //  [R1]
         { info_tbl: [(c3pB4,
                       label: block_c3pB4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pB4: // global
           if (R1 & 7 == 1) goto c3pBn; else goto c3pBo;
       c3pBn: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pBo: // global
           I64[Sp - 8] = block_c3pBa_info;
           _s3osl::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3osl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3pBJ; else goto c3pBb;
       u3pBJ: // global
           call _c3pBa(R1) args: 0, res: 0, upd: 0;
       c3pBb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pBa() //  [R1]
         { info_tbl: [(c3pBa,
                       label: block_c3pBa_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pBa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pBD; else goto c3pBC;
       c3pBD: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pBC: // global
           _s3osn::P64 = P64[R1 + 7];
           _s3oso::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3osr_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3pBv_info;
           R2 = _s3osn::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3oso::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pBv() //  [R1]
         { info_tbl: [(c3pBv,
                       label: block_c3pBv_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pBv: // global
           _s3oso::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3pBz_info;
           R3 = _s3oso::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pBz() //  [R1]
         { info_tbl: [(c3pBz,
                       label: block_c3pBz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pBz: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3osx_entry() //  [R1, R2]
         { info_tbl: [(c3pBS,
                       label: sat_s3osx_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pBS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pBT; else goto c3pBU;
       c3pBT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pBU: // global
           I64[Sp - 16] = block_c3pBQ_info;
           R2 = R2;
           _s3osh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3osh::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pBQ() //  [R1]
         { info_tbl: [(c3pBQ,
                       label: block_c3pBQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pBQ: // global
           _s3osh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3pBX_info;
           R2 = R1;
           R1 = _s3osh::P64;
           Sp = Sp + 8;
           call go_s3osh_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pBX() //  [R1]
         { info_tbl: [(c3pBX,
                       label: block_c3pBX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pBX: // global
           if (R1 & 7 == 1) goto c3pC4; else goto c3pC8;
       c3pC4: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pC8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pCb; else goto c3pCa;
       c3pCb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pCa: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R1;
           R1 = Hp - 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wreadS_to_P_entry() //  [R2, R3]
         { info_tbl: [(c3pCd,
                       label: Text.ParserCombinators.ReadP.$wreadS_to_P_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pCd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3pCh; else goto c3pCg;
       c3pCh: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wreadS_to_P_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pCg: // global
           I64[Hp - 32] = go_s3osh_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3osx_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.001185797 UTC

[section ""data" . Text.ParserCombinators.ReadP.readS_to_P1_closure" {
     Text.ParserCombinators.ReadP.readS_to_P1_closure:
         const Text.ParserCombinators.ReadP.readS_to_P1_info;
 },
 Text.ParserCombinators.ReadP.readS_to_P1_entry() //  [R2, R3]
         { info_tbl: [(c3pCp,
                       label: Text.ParserCombinators.ReadP.readS_to_P1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pCp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3pCq; else goto c3pCr;
       c3pCq: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.readS_to_P1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pCr: // global
           I64[Sp - 8] = block_c3pCm_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pCm() //  [R1]
         { info_tbl: [(c3pCm,
                       label: block_c3pCm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pCm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pCu; else goto c3pCt;
       c3pCu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pCt: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.002444272 UTC

[section ""data" . Text.ParserCombinators.ReadP.readS_to_P_closure" {
     Text.ParserCombinators.ReadP.readS_to_P_closure:
         const Text.ParserCombinators.ReadP.readS_to_P_info;
 },
 Text.ParserCombinators.ReadP.readS_to_P_entry() //  [R2, R3]
         { info_tbl: [(c3pCz,
                       label: Text.ParserCombinators.ReadP.readS_to_P_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pCz: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.readS_to_P1_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.003181602 UTC

[section ""cstring" . lvl_r3oqE_bytes" {
     lvl_r3oqE_bytes:
         I8[] [84,101,120,116,47,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,47,82,101,97,100,80,46,104,115,58,40,49,51,52,44,51,41,45,40,49,53,55,44,53,50,41,124,102,117,110,99,116,105,111,110,32,60,124,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.003941727 UTC

[section ""data" . lvl1_r3oqF_closure" {
     lvl1_r3oqF_closure:
         const lvl1_r3oqF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3oqF_entry() //  [R1]
         { info_tbl: [(c3pCI,
                       label: lvl1_r3oqF_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pCI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pCJ; else goto c3pCK;
       c3pCJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pCK: // global
           (_c3pCF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3pCF::I64 == 0) goto c3pCH; else goto c3pCG;
       c3pCH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3pCG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3pCF::I64;
           R2 = lvl_r3oqE_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.010836934 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info;
         const 0;
 },
 sat_s3osS_entry() //  [R1, R2]
         { info_tbl: [(c3pDA,
                       label: sat_s3osS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pDA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pDE; else goto c3pDD;
       c3pDE: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pDD: // global
           _s3osM::P64 = P64[R1 + 7];
           _s3osP::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3osP::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = _s3osM::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3osY_entry() //  [R1, R2]
         { info_tbl: [(c3pDT,
                       label: sat_s3osY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pDT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pDU; else goto c3pDV;
       c3pDU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pDV: // global
           I64[Sp - 16] = block_c3pDR_info;
           R2 = R2;
           _s3osU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3osU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pDR() //  [R1]
         { info_tbl: [(c3pDR,
                       label: block_c3pDR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pDR: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ot3_entry() //  [R1, R2]
         { info_tbl: [(c3pE9,
                       label: sat_s3ot3_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pE9: // global
           _s3ot0::P64 = R2;
           _s3ot3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pEa; else goto c3pEb;
       c3pEb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pEd; else goto c3pEc;
       c3pEd: // global
           HpAlloc = 32;
           goto c3pEa;
       c3pEa: // global
           R2 = _s3ot0::P64;
           R1 = _s3ot3::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pEc: // global
           _s3osT::P64 = P64[_s3ot3::P64 + 7];
           _s3osZ::P64 = P64[_s3ot3::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3osZ::P64;
           P64[Hp] = _s3ot0::P64;
           I64[Sp - 16] = block_c3pE7_info;
           R2 = _s3ot0::P64;
           R1 = _s3osT::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pE7() //  [R1]
         { info_tbl: [(c3pE7,
                       label: block_c3pE7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pE7: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ot7_entry() //  [R1]
         { info_tbl: [(c3pEu,
                       label: sat_s3ot7_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pEu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3pEv; else goto c3pEw;
       c3pEv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pEw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3pEs_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3pEs() //  [R1]
         { info_tbl: [(c3pEs,
                       label: block_c3pEs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pEs: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ot8_entry() //  [R1, R2]
         { info_tbl: [(c3pEB,
                       label: sat_s3ot8_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pEB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pEF; else goto c3pEE;
       c3pEF: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pEE: // global
           _s3osH::P64 = P64[R1 + 7];
           _s3ot4::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3ot7_info;
           P64[Hp - 32] = _s3osH::P64;
           P64[Hp - 24] = _s3ot4::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otg_entry() //  [R1]
         { info_tbl: [(c3pF3,
                       label: sat_s3otg_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pF3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3pF7; else goto c3pF8;
       c3pF7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pF8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3pF1_info;
           _s3otd::P64 = P64[R1 + 32];
           R2 = _s3otd::P64;
           _s3otc::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s3otc::P64;
           P64[Sp - 24] = _s3otd::P64;
           Sp = Sp - 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3pF1() //  [R1]
         { info_tbl: [(c3pF1,
                       label: block_c3pF1_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pF1: // global
           I64[Sp] = block_c3pF6_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3pF6() //  [R1]
         { info_tbl: [(c3pF6,
                       label: block_c3pF6_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pF6: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oth_entry() //  [R1, R2]
         { info_tbl: [(c3pFf,
                       label: sat_s3oth_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pFf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pFj; else goto c3pFi;
       c3pFj: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pFi: // global
           _s3ota::P64 = P64[R1 + 7];
           _s3otc::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3otg_info;
           P64[Hp - 32] = _s3ota::P64;
           P64[Hp - 24] = _s3otc::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otm_entry() //  [R1]
         { info_tbl: [(c3pFE,
                       label: sat_s3otm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pFE: // global
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otn_entry() //  [R1]
         { info_tbl: [(c3pFH,
                       label: sat_s3otn_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pFH: // global
           _s3otn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pFI; else goto c3pFJ;
       c3pFJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pFL; else goto c3pFK;
       c3pFL: // global
           HpAlloc = 32;
           goto c3pFI;
       c3pFI: // global
           R1 = _s3otn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pFK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3otn::P64;
           _s3oti::P64 = P64[_s3otn::P64 + 16];
           _s3otj::P64 = P64[_s3otn::P64 + 24];
           _s3otl::P64 = P64[_s3otn::P64 + 32];
           I64[Hp - 24] = sat_s3otm_info;
           P64[Hp - 8] = _s3otj::P64;
           P64[Hp] = _s3otl::P64;
           R3 = Hp - 24;
           R2 = _s3oti::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oto_entry() //  [R1, R2]
         { info_tbl: [(c3pFN,
                       label: sat_s3oto_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pFN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pFR; else goto c3pFQ;
       c3pFR: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pFQ: // global
           _s3oti::P64 = P64[R1 + 7];
           _s3otj::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3otn_info;
           P64[Hp - 32] = _s3oti::P64;
           P64[Hp - 24] = _s3otj::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ots_entry() //  [R1]
         { info_tbl: [(c3pG9,
                       label: sat_s3ots_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pG9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pGa; else goto c3pGb;
       c3pGa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pGb: // global
           I64[Sp - 16] = block_c3pG7_info;
           _s3otq::P64 = P64[R1 + 24];
           R2 = _s3otq::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 8] = _s3otq::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pG7() //  [R1]
         { info_tbl: [(c3pG7,
                       label: block_c3pG7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pG7: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ott_entry() //  [R1]
         { info_tbl: [(c3pGf,
                       label: sat_s3ott_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pGf: // global
           _s3ott::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pGg; else goto c3pGh;
       c3pGh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pGj; else goto c3pGi;
       c3pGj: // global
           HpAlloc = 32;
           goto c3pGg;
       c3pGg: // global
           R1 = _s3ott::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pGi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ott::P64;
           _s3oti::P64 = P64[_s3ott::P64 + 16];
           _s3otp::P64 = P64[_s3ott::P64 + 24];
           _s3otq::P64 = P64[_s3ott::P64 + 32];
           I64[Hp - 24] = sat_s3ots_info;
           P64[Hp - 8] = _s3otp::P64;
           P64[Hp] = _s3otq::P64;
           R3 = Hp - 24;
           R2 = _s3oti::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3otu_entry() //  [R1, R2]
         { info_tbl: [(c3pGl,
                       label: sat_s3otu_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pGl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pGp; else goto c3pGo;
       c3pGp: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pGo: // global
           _s3oti::P64 = P64[R1 + 7];
           _s3otp::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3ott_info;
           P64[Hp - 32] = _s3oti::P64;
           P64[Hp - 24] = _s3otp::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otw_entry() //  [R1]
         { info_tbl: [(c3pGw,
                       label: sat_s3otw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pGw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pGx; else goto c3pGy;
       c3pGx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pGy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3otz_entry() //  [R1]
         { info_tbl: [(c3pGF,
                       label: sat_s3otz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pGF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pGG; else goto c3pGH;
       c3pGG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pGH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3otH_entry() //  [R1, R2]
         { info_tbl: [(c3pH2,
                       label: sat_s3otH_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pH2: // global
           _s3otE::P64 = R2;
           _s3otH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pH3; else goto c3pH4;
       c3pH4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pH6; else goto c3pH5;
       c3pH6: // global
           HpAlloc = 32;
           goto c3pH3;
       c3pH3: // global
           R2 = _s3otE::P64;
           R1 = _s3otH::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pH5: // global
           _s3otB::P64 = P64[_s3otH::P64 + 7];
           _s3otD::P64 = P64[_s3otH::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3otD::P64;
           P64[Hp] = _s3otE::P64;
           I64[Sp - 16] = block_c3pH0_info;
           R2 = _s3otE::P64;
           R1 = _s3otB::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pH0() //  [R1]
         { info_tbl: [(c3pH0,
                       label: block_c3pH0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pH0: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otK_entry() //  [R1]
         { info_tbl: [(c3pHg,
                       label: sat_s3otK_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pHg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pHh; else goto c3pHi;
       c3pHh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pHi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c3pHo,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pHo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3pHp; else goto c3pHq;
       c3pHp: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pHq: // global
           I64[Sp - 24] = block_c3pGI_info;
           R1 = R2;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3pJE; else goto c3pGJ;
       u3pJE: // global
           call _c3pGI(R1) args: 0, res: 0, upd: 0;
       c3pGJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pGI() //  [R1]
         { info_tbl: [(c3pGI,
                       label: block_c3pGI_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pGI: // global
           _s3osD::P64 = P64[Sp + 16];
           _c3pHn::P64 = R1 & 7;
           if (_c3pHn::P64 == 1) goto c3pHl; else goto u3pJm;
       c3pHl: // global
           I64[Sp - 8] = block_c3pGO_info;
           _s3otB::P64 = P64[R1 + 7];
           R1 = _s3osD::P64;
           P64[Sp] = _s3otB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3pJB; else goto c3pGP;
       u3pJB: // global
           call _c3pGO(R1) args: 0, res: 0, upd: 0;
       c3pGP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3pJm: // global
           if (_c3pHn::P64 == 4) goto c3pHm; else goto u3pJn;
       c3pHm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pJ8; else goto c3pJ7;
       c3pJ8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pJ7: // global
           _s3otI::P64 = P64[R1 + 4];
           _s3otJ::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3otK_info;
           P64[Hp - 32] = _s3osD::P64;
           P64[Hp - 24] = _s3otJ::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3otI::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3pJn: // global
           Sp = Sp + 8;
           call _s3osE() args: 0, res: 0, upd: 0;
     }
 },
 _c3pGO() //  [R1]
         { info_tbl: [(c3pGO,
                       label: block_c3pGO_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pGO: // global
           if (R1 & 7 == 1) goto c3pJ1; else goto u3pJo;
       c3pJ1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3pJ4; else goto c3pJ3;
       c3pJ4: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pJ3: // global
           _s3otD::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_s3otH_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3otD::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3pJo: // global
           Sp = Sp + 16;
           call _s3osE() args: 0, res: 0, upd: 0;
     }
 },
 _s3osE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3osE: // global
           I64[Sp - 8] = block_c3pCU_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3pJF; else goto c3pCV;
       u3pJF: // global
           call _c3pCU(R1) args: 0, res: 0, upd: 0;
       c3pCV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pCU() //  [R1]
         { info_tbl: [(c3pCU,
                       label: block_c3pCU_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pCU: // global
           _s3osC::P64 = P64[Sp + 8];
           if (R1 & 7 == 4) goto c3pIP; else goto c3pHu;
       c3pIP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pIS; else goto c3pIR;
       c3pIS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pIR: // global
           _s3otx::P64 = P64[R1 + 4];
           _s3oty::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3otz_info;
           P64[Hp - 32] = _s3osC::P64;
           P64[Hp - 24] = _s3oty::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3otx::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pHu: // global
           I64[Sp + 8] = block_c3pCZ_info;
           _s3osG::P64 = R1;
           R1 = _s3osC::P64;
           P64[Sp + 16] = _s3osG::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3pJr; else goto c3pD0;
       u3pJr: // global
           call _c3pCZ(R1) args: 0, res: 0, upd: 0;
       c3pD0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pCZ() //  [R1]
         { info_tbl: [(c3pCZ,
                       label: block_c3pCZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pCZ: // global
           _s3osG::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto c3pIN; else goto c3pHx;
       c3pIN: // global
           R1 = _s3osG::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3pHx: // global
           I64[Sp] = block_c3pD4_info;
           _s3osH::P64 = R1;
           R1 = _s3osG::P64;
           P64[Sp + 8] = _s3osH::P64;
           if (R1 & 7 != 0) goto u3pJs; else goto c3pD5;
       u3pJs: // global
           call _c3pD4(R1) args: 0, res: 0, upd: 0;
       c3pD5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pD4() //  [R1]
         { info_tbl: [(c3pD4,
                       label: block_c3pD4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pD4: // global
           _s3osH::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto c3pIJ; else goto c3pI8;
       c3pIJ: // global
           R1 = _s3osH::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3pI8: // global
           I64[Sp - 8] = block_c3pEG_info;
           _s3osI::P64 = R1;
           R1 = _s3osH::P64;
           P64[Sp] = _s3osI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3pJt; else goto c3pEH;
       u3pJt: // global
           call _c3pEG(R1) args: 0, res: 0, upd: 0;
       c3pEH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pEG() //  [R1]
         { info_tbl: [(c3pEG,
                       label: block_c3pEG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pEG: // global
           _s3osI::P64 = P64[Sp + 8];
           _c3pJd::P64 = R1 & 7;
           if (_c3pJd::P64 == 2) goto c3pIe; else goto u3pJk;
       c3pIe: // global
           I64[Sp - 8] = block_c3pEM_info;
           _s3ota::P64 = P64[R1 + 6];
           R1 = _s3osI::P64;
           P64[Sp] = _s3ota::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3pJx; else goto c3pEN;
       u3pJx: // global
           call _c3pEM(R1) args: 0, res: 0, upd: 0;
       c3pEN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3pJk: // global
           if (_c3pJd::P64 == 5) goto c3pIp; else goto u3pJp;
       c3pIp: // global
           I64[Sp + 8] = block_c3pFm_info;
           _s3oti::P64 = P64[R1 + 3];
           R1 = _s3osI::P64;
           P64[Sp + 16] = _s3oti::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3pJy; else goto c3pFn;
       u3pJy: // global
           call _c3pFm(R1) args: 0, res: 0, upd: 0;
       c3pFn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3pJp: // global
           Sp = Sp + 8;
           call _s3osJ() args: 0, res: 0, upd: 0;
     }
 },
 _c3pEM() //  [R1]
         { info_tbl: [(c3pEM,
                       label: block_c3pEM_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pEM: // global
           if (R1 & 7 == 5) goto c3pIk; else goto u3pJq;
       c3pIk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3pIn; else goto c3pIm;
       c3pIn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pIm: // global
           _s3otc::P64 = P64[R1 + 3];
           I64[Hp - 32] = sat_s3oth_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3otc::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3pJq: // global
           Sp = Sp + 16;
           call _s3osJ() args: 0, res: 0, upd: 0;
     }
 },
 _c3pFm() //  [R1]
         { info_tbl: [(c3pFm,
                       label: block_c3pFm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pFm: // global
           _s3oti::P64 = P64[Sp + 8];
           _c3pJe::P64 = R1 & 7;
           if (_c3pJe::P64 < 5) goto u3pJl; else goto c3pIC;
       u3pJl: // global
           if (_c3pJe::P64 < 2) goto c3pIs; else goto c3pIx;
       c3pIs: // global
           Hp = Hp + 40;
           _s3otj::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3pIA; else goto c3pIu;
       c3pIu: // global
           I64[Hp - 32] = sat_s3oto_info;
           P64[Hp - 24] = _s3oti::P64;
           P64[Hp - 16] = _s3otj::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pIx: // global
           Hp = Hp + 40;
           _s3otj::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3pIA; else goto c3pIz;
       c3pIA: // global
           HpAlloc = 40;
           R1 = _s3otj::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pIz: // global
           _s3otp::P64 = P64[_s3otj::P64 + 6];
           I64[Hp - 32] = sat_s3otu_info;
           P64[Hp - 24] = _s3oti::P64;
           P64[Hp - 16] = _s3otp::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pIC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pIF; else goto c3pIE;
       c3pIF: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pIE: // global
           _s3otv::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3otw_info;
           P64[Hp - 24] = _s3oti::P64;
           P64[Hp - 16] = _s3otv::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _s3osJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3osJ: // global
           _s3osI::P64 = P64[Sp];
           I64[Sp] = block_c3pDe_info;
           R1 = _s3osI::P64;
           if (R1 & 7 != 0) goto u3pJG; else goto c3pDf;
       u3pJG: // global
           call _c3pDe(R1) args: 0, res: 0, upd: 0;
       c3pDf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pDe() //  [R1]
         { info_tbl: [(c3pDe,
                       label: block_c3pDe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pDe: // global
           _s3osH::P64 = P64[Sp + 8];
           if (R1 & 7 == 5) goto c3pI3; else goto c3pHC;
       c3pI3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3pI6; else goto c3pI5;
       c3pI6: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pI5: // global
           _s3ot4::P64 = P64[R1 + 3];
           I64[Hp - 32] = sat_s3ot8_info;
           P64[Hp - 24] = _s3osH::P64;
           P64[Hp - 16] = _s3ot4::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pHC: // global
           I64[Sp] = block_c3pDj_info;
           _s3osL::P64 = R1;
           R1 = _s3osH::P64;
           P64[Sp + 8] = _s3osL::P64;
           if (R1 & 7 != 0) goto u3pJu; else goto c3pDk;
       u3pJu: // global
           call _c3pDj(R1) args: 0, res: 0, upd: 0;
       c3pDk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pDj() //  [R1]
         { info_tbl: [(c3pDj,
                       label: block_c3pDj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pDj: // global
           _s3osL::P64 = P64[Sp + 8];
           if (R1 & 7 == 2) goto c3pHQ; else goto c3pHF;
       c3pHQ: // global
           I64[Sp] = block_c3pDH_info;
           _s3osT::P64 = P64[R1 + 6];
           R1 = _s3osL::P64;
           P64[Sp + 8] = _s3osT::P64;
           if (R1 & 7 != 0) goto u3pJw; else goto c3pDI;
       u3pJw: // global
           call _c3pDH(R1) args: 0, res: 0, upd: 0;
       c3pDI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3pHF: // global
           I64[Sp] = block_c3pDo_info;
           _s3osM::P64 = R1;
           R1 = _s3osL::P64;
           P64[Sp + 8] = _s3osM::P64;
           if (R1 & 7 != 0) goto u3pJv; else goto c3pDp;
       u3pJv: // global
           call _c3pDo(R1) args: 0, res: 0, upd: 0;
       c3pDp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pDH() //  [R1]
         { info_tbl: [(c3pDH,
                       label: block_c3pDH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pDH: // global
           _s3osT::P64 = P64[Sp + 8];
           if (R1 & 7 < 2) goto c3pHT; else goto c3pHY;
       c3pHT: // global
           Hp = Hp + 40;
           _s3osU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3pI1; else goto c3pHV;
       c3pHV: // global
           I64[Hp - 32] = sat_s3osY_info;
           P64[Hp - 24] = _s3osT::P64;
           P64[Hp - 16] = _s3osU::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pHY: // global
           Hp = Hp + 40;
           _s3osU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3pI1; else goto c3pI0;
       c3pI1: // global
           HpAlloc = 40;
           R1 = _s3osU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pI0: // global
           _s3osZ::P64 = P64[_s3osU::P64 + 6];
           I64[Hp - 32] = sat_s3ot3_info;
           P64[Hp - 24] = _s3osT::P64;
           P64[Hp - 16] = _s3osZ::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3pDo() //  [R1]
         { info_tbl: [(c3pDo,
                       label: block_c3pDo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pDo: // global
           if (R1 & 7 < 2) goto c3pHJ; else goto c3pHL;
       c3pHJ: // global
           R1 = lvl1_r3oqF_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3pHL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3pHO; else goto c3pHN;
       c3pHO: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pHN: // global
           _s3osP::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_s3osS_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3osP::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.03122896 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info;
         const 0;
 },
 sat_s3otR_entry() //  [R1, R2]
         { info_tbl: [(c3pJX,
                       label: sat_s3otR_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pJX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pJY; else goto c3pJZ;
       c3pJY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pJZ: // global
           I64[Sp - 16] = block_c3pJV_info;
           R2 = R2;
           _s3otM::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3otM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pJV() //  [R1]
         { info_tbl: [(c3pJV,
                       label: block_c3pJV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pJV: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otV_entry() //  [R1, R2]
         { info_tbl: [(c3pKc,
                       label: sat_s3otV_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pKc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pKd; else goto c3pKe;
       c3pKd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pKe: // global
           I64[Sp - 16] = block_c3pKa_info;
           R2 = R2;
           _s3otM::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3otM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pKa() //  [R1]
         { info_tbl: [(c3pKa,
                       label: block_c3pKa_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pKa: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otZ_entry() //  [R1]
         { info_tbl: [(c3pKp,
                       label: sat_s3otZ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pKp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pKq; else goto c3pKr;
       c3pKq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pKr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oub_entry() //  [R1]
         { info_tbl: [(c3pKO,
                       label: sat_s3oub_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pKO: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_s3ou1_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 go_s3ou1_entry() //  [R1, R2]
         { info_tbl: [(c3pKV,
                       label: go_s3ou1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pKV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3pKW; else goto c3pKX;
       c3pKW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pKX: // global
           I64[Sp - 24] = block_c3pKz_info;
           _s3ou1::P64 = R1;
           _s3otM::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3otM::P64;
           P64[Sp - 8] = _s3ou1::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3pLf; else goto c3pKA;
       u3pLf: // global
           call _c3pKz(R1) args: 0, res: 0, upd: 0;
       c3pKA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pKz() //  [R1]
         { info_tbl: [(c3pKz,
                       label: block_c3pKz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pKz: // global
           if (R1 & 7 == 1) goto c3pKS; else goto c3pKT;
       c3pKS: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pKT: // global
           I64[Sp - 8] = block_c3pKF_info;
           _s3ou5::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3ou5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3pLe; else goto c3pKG;
       u3pLe: // global
           call _c3pKF(R1) args: 0, res: 0, upd: 0;
       c3pKG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pKF() //  [R1]
         { info_tbl: [(c3pKF,
                       label: block_c3pKF_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pKF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pL8; else goto c3pL7;
       c3pL8: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pL7: // global
           _s3ou7::P64 = P64[R1 + 7];
           _s3ou8::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3oub_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3pL0_info;
           R2 = _s3ou7::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3ou8::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pL0() //  [R1]
         { info_tbl: [(c3pL0,
                       label: block_c3pL0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pL0: // global
           _s3ou8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3pL4_info;
           R3 = _s3ou8::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pL4() //  [R1]
         { info_tbl: [(c3pL4,
                       label: block_c3pL4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pL4: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c3pLn,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pLn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pLo; else goto c3pLp;
       c3pLo: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pLp: // global
           I64[Sp - 16] = block_c3pJL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3pM6; else goto c3pJM;
       u3pM6: // global
           call _c3pJL(R1) args: 0, res: 0, upd: 0;
       c3pJM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pJL() //  [R1]
         { info_tbl: [(c3pJL,
                       label: block_c3pJL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pJL: // global
           _s3otM::P64 = P64[Sp + 8];
           _c3pLm::P64 = R1 & 7;
           if (_c3pLm::P64 < 4) goto u3pM0; else goto u3pM2;
       u3pM0: // global
           if (_c3pLm::P64 < 3) goto u3pM1; else goto u3pM3;
       u3pM1: // global
           if (_c3pLm::P64 < 2) goto c3pLh; else goto c3pLi;
       c3pLh: // global
           Hp = Hp + 40;
           _s3otN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3pLx; else goto c3pLs;
       c3pLs: // global
           _s3otO::P64 = P64[_s3otN::P64 + 7];
           I64[Hp - 32] = sat_s3otR_info;
           P64[Hp - 24] = _s3otM::P64;
           P64[Hp - 16] = _s3otO::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pLi: // global
           Hp = Hp + 40;
           _s3otN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3pLx; else goto c3pLw;
       c3pLx: // global
           HpAlloc = 40;
           R1 = _s3otN::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pLw: // global
           _s3otS::P64 = P64[_s3otN::P64 + 6];
           I64[Hp - 32] = sat_s3otV_info;
           P64[Hp - 24] = _s3otM::P64;
           P64[Hp - 16] = _s3otS::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3pM3: // global
           Sp = Sp + 16;
           call _c3pLR() args: 0, res: 0, upd: 0;
       u3pM2: // global
           if (_c3pLm::P64 < 5) goto c3pLk; else goto c3pLl;
       c3pLk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pLD; else goto c3pLC;
       c3pLD: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pLC: // global
           _s3otW::P64 = P64[R1 + 4];
           _s3otX::P64 = P64[R1 + 12];
           I64[Hp - 24] = sat_s3otZ_info;
           P64[Hp - 8] = _s3otM::P64;
           P64[Hp] = _s3otX::P64;
           I64[Sp] = block_c3pLA_info;
           R2 = _s3otW::P64;
           R1 = _s3otM::P64;
           P64[Sp + 8] = Hp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3pLl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pLL; else goto c3pLK;
       c3pLL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pLK: // global
           _s3ou0::P64 = P64[R1 + 3];
           I64[Hp - 8] = go_s3ou1_info;
           P64[Hp] = _s3otM::P64;
           I64[Sp + 8] = block_c3pLI_info;
           R2 = _s3ou0::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s3ou1_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pLA() //  [R1]
         { info_tbl: [(c3pLA,
                       label: block_c3pLA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pLA: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3pLI() //  [R1]
         { info_tbl: [(c3pLI,
                       label: block_c3pLI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pLI: // global
           if (R1 & 7 == 1) goto u3pM4; else goto c3pLV;
       u3pM4: // global
           Sp = Sp + 8;
           call _c3pLR() args: 0, res: 0, upd: 0;
       c3pLV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pLY; else goto c3pLX;
       c3pLY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pLX: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R1;
           R1 = Hp - 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3pLR() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pLR: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.040763952 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info;
         const 0;
 },
 sat_s3ouk_entry() //  [R1, R2]
         { info_tbl: [(c3pMo,
                       label: sat_s3ouk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pMo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pMs; else goto c3pMr;
       c3pMs: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pMr: // global
           _s3ouh::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ouh::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oul_entry() //  [R1, R2]
         { info_tbl: [(c3pMt,
                       label: sat_s3oul_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pMt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pMx; else goto c3pMw;
       c3pMx: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pMw: // global
           _s3oug::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s3ouk_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = _s3oug::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c3pMy,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pMy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pMC; else goto c3pMB;
       c3pMC: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pMB: // global
           I64[Hp - 8] = sat_s3oul_info;
           P64[Hp] = R3;
           R3 = Hp - 7;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.043979825 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info;
         const 0;
 },
 sat_s3ouo_entry() //  [R1]
         { info_tbl: [(c3pML,
                       label: sat_s3ouo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pML: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pMM; else goto c3pMN;
       c3pMM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pMN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_entry() //  [R2,
                                                                   R3]
         { info_tbl: [(c3pMO,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pMO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pMS; else goto c3pMR;
       c3pMS: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pMR: // global
           I64[Hp - 24] = sat_s3ouo_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.047546806 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP1_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP1_closure:
         const Text.ParserCombinators.ReadP.Result_con_info;
         const GHC.Types.[]_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.049864125 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info;
         const 0;
 },
 m2_s3our_entry() //  [R1]
         { info_tbl: [(c3pN5,
                       label: m2_s3our_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pN5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pN6; else goto c3pN7;
       c3pN6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pN7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fAlternativeP1_closure+4;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ouw_entry() //  [R1, R2]
         { info_tbl: [(c3pNk,
                       label: sat_s3ouw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pNk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pNo; else goto c3pNn;
       c3pNo: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pNn: // global
           _s3out::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3out::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oux_entry() //  [R1, R2]
         { info_tbl: [(c3pNp,
                       label: sat_s3oux_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pNp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pNt; else goto c3pNs;
       c3pNt: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pNs: // global
           _s3our::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s3ouw_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = _s3our::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 some_v_s3ouq_entry() //  [R1]
         { info_tbl: [(c3pNw,
                       label: some_v_s3ouq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pNw: // global
           _s3ouq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3pNx; else goto c3pNy;
       c3pNy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3pNA; else goto c3pNz;
       c3pNA: // global
           HpAlloc = 40;
           goto c3pNx;
       c3pNx: // global
           R1 = _s3ouq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pNz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ouq::P64;
           _s3oup::P64 = P64[_s3ouq::P64 + 16];
           I64[Hp - 32] = m2_s3our_info;
           P64[Hp - 16] = _s3ouq::P64;
           I64[Hp - 8] = sat_s3oux_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 32] = block_c3pNu_info;
           R3 = _s3oup::P64;
           R2 = GHC.Types.:_closure+2;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3pNu() //  [R1]
         { info_tbl: [(c3pNu,
                       label: block_c3pNu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pNu: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$csome_entry() //  [R2]
         { info_tbl: [(c3pNE,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pNE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pNI; else goto c3pNH;
       c3pNI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pNH: // global
           I64[Hp - 16] = some_v_s3ouq_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.05277296 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info;
         const 0;
 },
 sat_s3ouz_entry() //  [R1]
         { info_tbl: [(c3pNR,
                       label: sat_s3ouz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pNR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pNS; else goto c3pNT;
       c3pNS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pNT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_entry() //  [R2]
         { info_tbl: [(c3pNU,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pNU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pNY; else goto c3pNX;
       c3pNY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pNX: // global
           I64[Hp - 16] = sat_s3ouz_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.054217506 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3pO5,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pO5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pO6; else goto c3pO7;
       c3pO6: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pO7: // global
           I64[Sp - 16] = block_c3pO3_info;
           _s3ouB::P64 = R3;
           R3 = R2;
           R2 = GHC.Base.breakpoint_closure+1;
           P64[Sp - 8] = _s3ouB::P64;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3pO3() //  [R1]
         { info_tbl: [(c3pO3,
                       label: block_c3pO3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pO3: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.055641798 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info;
         const 0;
 },
 many_v_s3ouE_entry() //  [R1]
         { info_tbl: [(c3pOl,
                       label: many_v_s3ouE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pOl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3pOp; else goto c3pOq;
       c3pOp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pOq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3pOj_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Types.:_closure+2;
           P64[Sp - 24] = R1;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3pOj() //  [R1]
         { info_tbl: [(c3pOj,
                       label: block_c3pOj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pOj: // global
           _s3ouE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3pOo_info;
           R3 = _s3ouE::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3pOo() //  [R1]
         { info_tbl: [(c3pOo,
                       label: block_c3pOo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pOo: // global
           R3 = Text.ParserCombinators.ReadP.$fAlternativeP1_closure+4;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_entry() //  [R2]
         { info_tbl: [(c3pOw,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pOw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pOA; else goto c3pOz;
       c3pOA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pOz: // global
           I64[Hp - 16] = many_v_s3ouE_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.057382645 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure" {
     Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure:
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_info;
         const 0;
 },
 sat_s3ouK_entry() //  [R1]
         { info_tbl: [(c3pOK,
                       label: sat_s3ouK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pOK: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fMonadP_$c>>_entry() //  [R2, R3]
         { info_tbl: [(c3pON,
                       label: Text.ParserCombinators.ReadP.$fMonadP_$c>>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pON: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pOR; else goto c3pOQ;
       c3pOR: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pOQ: // global
           I64[Hp - 8] = sat_s3ouK_info;
           P64[Hp] = R3;
           R3 = Hp - 7;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.058421039 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorP_closure+1;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.059067471 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadP_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure+2;
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.059710526 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeP_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure+2;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.060695195 UTC

[section ""data" . Text.ParserCombinators.ReadP.readP_to_S_closure" {
     Text.ParserCombinators.ReadP.readP_to_S_closure:
         const Text.ParserCombinators.ReadP.readP_to_S_info;
 },
 sat_s3ouM_entry() //  [R1]
         { info_tbl: [(c3pP0,
                       label: sat_s3ouM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pP0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pP1; else goto c3pP2;
       c3pP1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pP2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.readP_to_S_entry() //  [R2]
         { info_tbl: [(c3pP3,
                       label: Text.ParserCombinators.ReadP.readP_to_S_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pP3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pP7; else goto c3pP6;
       c3pP7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.readP_to_S_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pP6: // global
           I64[Hp - 16] = sat_s3ouM_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.061947545 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailP_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailP_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadP.$fMonadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.06249326 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadPlusP_closure" {
     Text.ParserCombinators.ReadP.$fMonadPlusP_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadP_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.063333823 UTC

[section ""data" . Text.ParserCombinators.ReadP.get_closure" {
     Text.ParserCombinators.ReadP.get_closure:
         const Text.ParserCombinators.ReadP.get_info;
 },
 Text.ParserCombinators.ReadP.get_entry() //  [R2]
         { info_tbl: [(c3pPd,
                       label: Text.ParserCombinators.ReadP.get_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pPd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pPh; else goto c3pPg;
       c3pPh: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.get_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pPg: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.06471531 UTC

[section ""data" . Text.ParserCombinators.ReadP.look_closure" {
     Text.ParserCombinators.ReadP.look_closure:
         const Text.ParserCombinators.ReadP.look_info;
 },
 Text.ParserCombinators.ReadP.look_entry() //  [R2]
         { info_tbl: [(c3pPn,
                       label: Text.ParserCombinators.ReadP.look_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pPn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pPr; else goto c3pPq;
       c3pPr: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.look_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pPq: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.066053491 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_info;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry() //  []
         { info_tbl: [(c3pPw,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pPw: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.066924543 UTC

[section ""data" . Text.ParserCombinators.ReadP.pfail_closure" {
     Text.ParserCombinators.ReadP.pfail_closure:
         const Text.ParserCombinators.ReadP.pfail_info;
 },
 Text.ParserCombinators.ReadP.pfail_entry() //  [R2]
         { info_tbl: [(c3pPD,
                       label: Text.ParserCombinators.ReadP.pfail_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pPD: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.06794671 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3pPN,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pPN: // global
           _s3ouQ::P64 = R4;
           _s3ouP::P64 = R3;
           _s3ouO::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pPO; else goto c3pPP;
       c3pPP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pPR; else goto c3pPQ;
       c3pPR: // global
           HpAlloc = 32;
           goto c3pPO;
       c3pPO: // global
           R4 = _s3ouQ::P64;
           R3 = _s3ouP::P64;
           R2 = _s3ouO::P64;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pPQ: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ouP::P64;
           P64[Hp] = _s3ouQ::P64;
           I64[Sp - 16] = block_c3pPL_info;
           R2 = _s3ouQ::P64;
           R1 = _s3ouO::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pPL() //  [R1]
         { info_tbl: [(c3pPL,
                       label: block_c3pPL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pPL: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.069363075 UTC

[section ""data" . Text.ParserCombinators.ReadP.+++_closure" {
     Text.ParserCombinators.ReadP.+++_closure:
         const Text.ParserCombinators.ReadP.+++_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.+++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pPZ,
                       label: Text.ParserCombinators.ReadP.+++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pPZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.071009019 UTC

[section ""data" . Text.ParserCombinators.ReadP.choice_closure" {
     Text.ParserCombinators.ReadP.choice_closure:
         const Text.ParserCombinators.ReadP.choice_info;
         const 0;
 },
 ds2_s3ov0_entry() //  [R1]
         { info_tbl: [(c3pQm,
                       label: ds2_s3ov0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pQm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pQn; else goto c3pQo;
       c3pQn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pQo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.choice_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ov4_entry() //  [R1, R2]
         { info_tbl: [(c3pQx,
                       label: sat_s3ov4_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pQx: // global
           _s3ov1::P64 = R2;
           _s3ov4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pQy; else goto c3pQz;
       c3pQz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pQB; else goto c3pQA;
       c3pQB: // global
           HpAlloc = 32;
           goto c3pQy;
       c3pQy: // global
           R2 = _s3ov1::P64;
           R1 = _s3ov4::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pQA: // global
           _s3ouV::P64 = P64[_s3ov4::P64 + 7];
           _s3ov0::P64 = P64[_s3ov4::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ov0::P64;
           P64[Hp] = _s3ov1::P64;
           I64[Sp - 16] = block_c3pQv_info;
           R2 = _s3ov1::P64;
           R1 = _s3ouV::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pQv() //  [R1]
         { info_tbl: [(c3pQv,
                       label: block_c3pQv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pQv: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.choice_entry() //  [R2]
         { info_tbl: [(c3pQJ,
                       label: Text.ParserCombinators.ReadP.choice_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pQJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pQK; else goto c3pQL;
       c3pQK: // global
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.choice_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pQL: // global
           I64[Sp - 8] = block_c3pQ6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3pQZ; else goto c3pQ7;
       u3pQZ: // global
           call _c3pQ6(R1) args: 0, res: 0, upd: 0;
       c3pQ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pQ6() //  [R1]
         { info_tbl: [(c3pQ6,
                       label: block_c3pQ6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pQ6: // global
           if (R1 & 7 == 1) goto c3pQG; else goto c3pQH;
       c3pQG: // global
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pQH: // global
           I64[Sp - 8] = block_c3pQc_info;
           _s3ouV::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3ouV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3pQY; else goto c3pQd;
       u3pQY: // global
           call _c3pQc(R1) args: 0, res: 0, upd: 0;
       c3pQd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pQc() //  [R1]
         { info_tbl: [(c3pQc,
                       label: block_c3pQc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pQc: // global
           _s3ouV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3pQS; else goto c3pQT;
       c3pQS: // global
           R1 = _s3ouV::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c3pQT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pQW; else goto c3pQV;
       c3pQW: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pQV: // global
           I64[Hp - 40] = ds2_s3ov0_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s3ov4_info;
           P64[Hp - 8] = _s3ouV::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.074335427 UTC

[section ""cstring" . lvl2_r3oqG_bytes" {
     lvl2_r3oqG_bytes:
         I8[] [100,111,32,110,111,116,32,117,115,101,32,114,101,97,100,83,95,116,111,95,80,32,105,110,32,103,97,116,104,101,114,33]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.075244719 UTC

[section ""data" . lvl3_r3oqH_closure" {
     lvl3_r3oqH_closure:
         const lvl3_r3oqH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r3oqH_entry() //  [R1]
         { info_tbl: [(c3pR8,
                       label: lvl3_r3oqH_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pR8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3pR9; else goto c3pRa;
       c3pR9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pRa: // global
           (_c3pR3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3pR3::I64 == 0) goto c3pR5; else goto c3pR4;
       c3pR5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3pR4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3pR3::I64;
           I64[Sp - 24] = block_c3pR6_info;
           R2 = lvl2_r3oqG_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3pR6() //  [R1]
         { info_tbl: [(c3pR6,
                       label: block_c3pR6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pR6: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.078166068 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather_gath_closure" {
     Text.ParserCombinators.ReadP.gather_gath_closure:
         const Text.ParserCombinators.ReadP.gather_gath_info;
         const 0;
 },
 sat_s3ovd_entry() //  [R1, R2]
         { info_tbl: [(c3pRC,
                       label: sat_s3ovd_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pRC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pRG; else goto c3pRF;
       c3pRG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pRF: // global
           _s3ov6::P64 = P64[R1 + 7];
           _s3ova::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3ova::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3ov6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovf_entry() //  [R1, R2]
         { info_tbl: [(c3pRH,
                       label: sat_s3ovf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pRH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3pRI; else goto c3pRJ;
       c3pRI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pRJ: // global
           I64[Sp - 24] = block_c3pRs_info;
           _s3ova::P64 = R2;
           R2 = R2;
           _s3ov6::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _s3ov6::P64;
           P64[Sp - 8] = _s3ova::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pRs() //  [R1]
         { info_tbl: [(c3pRs,
                       label: block_c3pRs_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pRs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pRM; else goto c3pRL;
       c3pRM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pRL: // global
           I64[Hp - 16] = sat_s3ovd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R3 = R1;
           R2 = Hp - 15;
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovj_entry() //  [R1, R2]
         { info_tbl: [(c3pRW,
                       label: sat_s3ovj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pRW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pRX; else goto c3pRY;
       c3pRX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pRY: // global
           I64[Sp - 16] = block_c3pRU_info;
           R2 = R2;
           _s3ov6::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3ov6::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pRU() //  [R1]
         { info_tbl: [(c3pRU,
                       label: block_c3pRU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pRU: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovo_entry() //  [R1]
         { info_tbl: [(c3pS9,
                       label: sat_s3ovo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pS9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pSa; else goto c3pSb;
       c3pSa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pSb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ovm_entry() //  [R1]
         { info_tbl: [(c3pSg,
                       label: sat_s3ovm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pSg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pSh; else goto c3pSi;
       c3pSh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pSi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.gather_gath_entry() //  [R2, R3]
         { info_tbl: [(c3pSq,
                       label: Text.ParserCombinators.ReadP.gather_gath_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pSq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pSr; else goto c3pSs;
       c3pSr: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.gather_gath_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pSs: // global
           I64[Sp - 16] = block_c3pRi_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3pSR; else goto c3pRj;
       u3pSR: // global
           call _c3pRi(R1) args: 0, res: 0, upd: 0;
       c3pRj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pRi() //  [R1]
         { info_tbl: [(c3pRi,
                       label: block_c3pRi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pRi: // global
           _s3ov6::P64 = P64[Sp + 8];
           _c3pSp::P64 = R1 & 7;
           if (_c3pSp::P64 < 4) goto u3pSO; else goto u3pSQ;
       u3pSO: // global
           if (_c3pSp::P64 < 3) goto u3pSP; else goto c3pSm;
       u3pSP: // global
           if (_c3pSp::P64 < 2) goto c3pSk; else goto c3pSl;
       c3pSk: // global
           Hp = Hp + 40;
           _s3ov8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3pSA; else goto c3pSv;
       c3pSv: // global
           _s3ov9::P64 = P64[_s3ov8::P64 + 7];
           I64[Hp - 32] = sat_s3ovf_info;
           P64[Hp - 24] = _s3ov6::P64;
           P64[Hp - 16] = _s3ov9::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pSl: // global
           Hp = Hp + 40;
           _s3ov8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3pSA; else goto c3pSz;
       c3pSA: // global
           HpAlloc = 40;
           R1 = _s3ov8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pSz: // global
           _s3ovg::P64 = P64[_s3ov8::P64 + 6];
           I64[Hp - 32] = sat_s3ovj_info;
           P64[Hp - 24] = _s3ov6::P64;
           P64[Hp - 16] = _s3ovg::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3pSm: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3pSQ: // global
           if (_c3pSp::P64 < 5) goto c3pSn; else goto c3pSo;
       c3pSn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pSG; else goto c3pSF;
       c3pSG: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3pSF: // global
           _s3ovk::P64 = P64[R1 + 4];
           _s3ovl::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3ovo_info;
           P64[Hp - 32] = _s3ov6::P64;
           P64[Hp - 24] = _s3ovl::P64;
           I64[Hp - 16] = sat_s3ovm_info;
           P64[Hp] = _s3ov6::P64;
           I64[Sp] = block_c3pSD_info;
           R2 = Hp - 16;
           R1 = _s3ovk::P64;
           P64[Sp + 8] = Hp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3pSo: // global
           R1 = lvl3_r3oqH_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3pSD() //  [R1]
         { info_tbl: [(c3pSD,
                       label: block_c3pSD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pSD: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.083332436 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather1_closure" {
     Text.ParserCombinators.ReadP.gather1_closure:
         const Text.ParserCombinators.ReadP.gather1_info;
         const 0;
 },
 sat_s3ovv_entry() //  [R1, R2]
         { info_tbl: [(c3pT7,
                       label: sat_s3ovv_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pT7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pTb; else goto c3pTa;
       c3pTb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pTa: // global
           _s3ovr::P64 = P64[R1 + 7];
           _s3ovs::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = _s3ovs::P64;
           R2 = Hp - 15;
           R1 = _s3ovr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovw_entry() //  [R1, R2]
         { info_tbl: [(c3pTd,
                       label: sat_s3ovw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pTd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pTh; else goto c3pTg;
       c3pTh: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pTg: // global
           _s3ovr::P64 = P64[R1 + 7];
           I64[Hp - 40] = sat_s3ovv_info;
           P64[Hp - 32] = _s3ovr::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.gather1_entry() //  [R2, R3]
         { info_tbl: [(c3pTk,
                       label: Text.ParserCombinators.ReadP.gather1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pTk: // global
           _s3ovr::P64 = R3;
           _s3ovq::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3pTl; else goto c3pTm;
       c3pTm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pTo; else goto c3pTn;
       c3pTo: // global
           HpAlloc = 16;
           goto c3pTl;
       c3pTl: // global
           R3 = _s3ovr::P64;
           R2 = _s3ovq::P64;
           R1 = Text.ParserCombinators.ReadP.gather1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pTn: // global
           I64[Hp - 8] = sat_s3ovw_info;
           P64[Hp] = _s3ovr::P64;
           I64[Sp - 8] = block_c3pTi_info;
           R2 = Hp - 7;
           R1 = _s3ovq::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pTi() //  [R1]
         { info_tbl: [(c3pTi,
                       label: block_c3pTi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pTi: // global
           R3 = R1;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.085496687 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather_closure" {
     Text.ParserCombinators.ReadP.gather_closure:
         const Text.ParserCombinators.ReadP.gather_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.gather_entry() //  [R2, R3]
         { info_tbl: [(c3pTw,
                       label: Text.ParserCombinators.ReadP.gather_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pTw: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.gather1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.086324929 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$trModule4_bytes" {
     Text.ParserCombinators.ReadP.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.086913541 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule3_closure" {
     Text.ParserCombinators.ReadP.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.087523237 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$trModule2_bytes" {
     Text.ParserCombinators.ReadP.$trModule2_bytes:
         I8[] [84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.088094277 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule1_closure" {
     Text.ParserCombinators.ReadP.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.088676406 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule_closure" {
     Text.ParserCombinators.ReadP.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.ParserCombinators.ReadP.$trModule3_closure+1;
         const Text.ParserCombinators.ReadP.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.089778019 UTC

[section ""data" . $krep_r3oqI_closure" {
     $krep_r3oqI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.090388239 UTC

[section ""data" . $krep1_r3oqJ_closure" {
     $krep1_r3oqJ_closure:
         const :_con_info;
         const $krep_r3oqI_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.090954485 UTC

[section ""data" . $krep2_r3oqK_closure" {
     $krep2_r3oqK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r3oqJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.091528839 UTC

[section ""data" . $krep3_r3oqL_closure" {
     $krep3_r3oqL_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.092159156 UTC

[section ""data" . $krep4_r3oqM_closure" {
     $krep4_r3oqM_closure:
         const :_con_info;
         const $krep2_r3oqK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.092850724 UTC

[section ""data" . $krep5_r3oqN_closure" {
     $krep5_r3oqN_closure:
         const :_con_info;
         const $krep3_r3oqL_closure+2;
         const $krep4_r3oqM_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.09366433 UTC

[section ""data" . $krep6_r3oqO_closure" {
     $krep6_r3oqO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep5_r3oqN_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.094401114 UTC

[section ""data" . $krep7_r3oqP_closure" {
     $krep7_r3oqP_closure:
         const :_con_info;
         const $krep6_r3oqO_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.09585655 UTC

[section ""data" . $krep8_r3oqQ_closure" {
     $krep8_r3oqQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep7_r3oqP_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.09641168 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tcP2_bytes" {
     Text.ParserCombinators.ReadP.$tcP2_bytes:
         I8[] [80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.096954576 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcP1_closure" {
     Text.ParserCombinators.ReadP.$tcP1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tcP2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.097582018 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcP_closure" {
     Text.ParserCombinators.ReadP.$tcP_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tcP1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 4287589432649596960;
         const 9029773818181158220;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.098190391 UTC

[section ""data" . $krep9_r3oqR_closure" {
     $krep9_r3oqR_closure:
         const :_con_info;
         const $krep3_r3oqL_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.098787092 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail1_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadP.$tcP_closure+1;
         const $krep9_r3oqR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.099316146 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Fail3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Fail3_bytes:
         I8[] [39,70,97,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.099843683 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail2_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Fail3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.100424642 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 16564457091671581868;
         const 4540703186775139959;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.101026654 UTC

[section ""data" . $krep10_r3oqS_closure" {
     $krep10_r3oqS_closure:
         const GHC.Types.KindRepFun_con_info;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.101770259 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result1_closure" {
     Text.ParserCombinators.ReadP.$tc'Result1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3oqL_closure+2;
         const $krep10_r3oqS_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.102397226 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Result3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Result3_bytes:
         I8[] [39,82,101,115,117,108,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.102991976 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result2_closure" {
     Text.ParserCombinators.ReadP.$tc'Result2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Result3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.103582822 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result_closure" {
     Text.ParserCombinators.ReadP.$tc'Result_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Result2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Result1_closure+4;
         const 14629176799732153257;
         const 2029199220309899277;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.104192787 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final1_closure" {
     Text.ParserCombinators.ReadP.$tc'Final1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r3oqQ_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.104775344 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Final3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Final3_bytes:
         I8[] [39,70,105,110,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.105510495 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final2_closure" {
     Text.ParserCombinators.ReadP.$tc'Final2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Final3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.106074525 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final_closure" {
     Text.ParserCombinators.ReadP.$tc'Final_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Final2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Final1_closure+4;
         const 9825883373667767852;
         const 1277540149077833820;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.10664879 UTC

[section ""data" . $krep11_r3oqT_closure" {
     $krep11_r3oqT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3oqK_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.107214659 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look1_closure" {
     Text.ParserCombinators.ReadP.$tc'Look1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r3oqT_closure+4;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.107792662 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Look3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Look3_bytes:
         I8[] [39,76,111,111,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.108371588 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look2_closure" {
     Text.ParserCombinators.ReadP.$tc'Look2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Look3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.108911259 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look_closure" {
     Text.ParserCombinators.ReadP.$tc'Look_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Look2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Look1_closure+4;
         const 11302519862508684236;
         const 969530656846011597;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.109548924 UTC

[section ""data" . $krep12_r3oqU_closure" {
     $krep12_r3oqU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3oqI_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.110127227 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get1_closure" {
     Text.ParserCombinators.ReadP.$tc'Get1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r3oqU_closure+4;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.110650222 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Get3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Get3_bytes:
         I8[] [39,71,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.111240203 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get2_closure" {
     Text.ParserCombinators.ReadP.$tc'Get2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Get3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.111864745 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get_closure" {
     Text.ParserCombinators.ReadP.$tc'Get_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Get2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Get1_closure+4;
         const 10806119809527641225;
         const 14618661019746688366;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.112486637 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tcReadP2_bytes" {
     Text.ParserCombinators.ReadP.$tcReadP2_bytes:
         I8[] [82,101,97,100,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.114642736 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcReadP1_closure" {
     Text.ParserCombinators.ReadP.$tcReadP1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tcReadP2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.115502137 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcReadP_closure" {
     Text.ParserCombinators.ReadP.$tcReadP_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tcReadP1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15640243629783811470;
         const 8988027559298507146;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.117060689 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_info;
 },
 sat_s3ovE_entry() //  [R1, R2]
         { info_tbl: [(c3pTO,
                       label: sat_s3ovE_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pTO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pTS; else goto c3pTR;
       c3pTS: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pTR: // global
           _s3ovA::P64 = P64[R1 + 7];
           _s3ovB::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ovB::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3ovA::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovF_entry() //  [R1, R2]
         { info_tbl: [(c3pTT,
                       label: sat_s3ovF_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pTT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pTX; else goto c3pTW;
       c3pTX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pTW: // global
           _s3ovz::P64 = P64[R1 + 7];
           _s3ovA::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ovE_info;
           P64[Hp - 8] = _s3ovA::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3ovz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP4_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3pTY,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pTY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pU2; else goto c3pU1;
       c3pU2: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pU1: // global
           I64[Hp - 16] = sat_s3ovF_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3ovy::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ovy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.119384175 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_info;
 },
 sat_s3ovL_entry() //  [R1, R2]
         { info_tbl: [(c3pUg,
                       label: sat_s3ovL_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pUg: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3ovJ_entry() //  [R1]
         { info_tbl: [(c3pUj,
                       label: lvl4_s3ovJ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pUj: // global
           _s3ovJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pUk; else goto c3pUl;
       c3pUl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pUn; else goto c3pUm;
       c3pUn: // global
           HpAlloc = 16;
           goto c3pUk;
       c3pUk: // global
           R1 = _s3ovJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pUm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ovJ::P64;
           _s3ovH::P64 = P64[_s3ovJ::P64 + 16];
           _s3ovI::P64 = P64[_s3ovJ::P64 + 24];
           I64[Hp - 8] = sat_s3ovL_info;
           P64[Hp] = _s3ovI::P64;
           R2 = Hp - 7;
           R1 = _s3ovH::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ovN_entry() //  [R1]
         { info_tbl: [(c3pUt,
                       label: sat_s3ovN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pUt: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP2_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3pUw,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pUw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pUA; else goto c3pUz;
       c3pUA: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pUz: // global
           I64[Hp - 40] = lvl4_s3ovJ_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3ovN_info;
           P64[Hp] = Hp - 40;
           _s3ovG::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3ovG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.121815089 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_info;
 },
 sat_s3ovW_entry() //  [R1, R2]
         { info_tbl: [(c3pUR,
                       label: sat_s3ovW_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pUR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pUV; else goto c3pUU;
       c3pUV: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pUU: // global
           _s3ovR::P64 = P64[R1 + 7];
           _s3ovT::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ovT::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3ovR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovX_entry() //  [R1, R2]
         { info_tbl: [(c3pUW,
                       label: sat_s3ovX_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pUW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pV0; else goto c3pUZ;
       c3pV0: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pUZ: // global
           _s3ovO::P64 = P64[R1 + 7];
           _s3ovQ::P64 = P64[R1 + 15];
           _s3ovR::P64 = P64[R1 + 23];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ovO::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3ovW_info;
           P64[Hp - 8] = _s3ovR::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 15;
           R1 = _s3ovQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP3_entry() //  [R2,
                                                               R3, R4, R5]
         { info_tbl: [(c3pV1,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pV1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pV5; else goto c3pV4;
       c3pV5: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pV4: // global
           I64[Hp - 24] = sat_s3ovX_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 23;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.123917668 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_info;
 },
 sat_s3ow4_entry() //  [R1]
         { info_tbl: [(c3pVl,
                       label: sat_s3ow4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pVl: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ow5_entry() //  [R1, R2]
         { info_tbl: [(c3pVo,
                       label: sat_s3ow5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pVo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pVs; else goto c3pVr;
       c3pVs: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pVr: // global
           _s3ovZ::P64 = P64[R1 + 7];
           _s3ow0::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3ow0::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3ow4_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3ovZ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP1_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3pVt,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pVt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pVx; else goto c3pVw;
       c3pVx: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pVw: // global
           I64[Hp - 16] = sat_s3ow5_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3ovY::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ovY::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.125737846 UTC

[section ""data" . $c>>_r3oqV_closure" {
     $c>>_r3oqV_closure:
         const $c>>_r3oqV_info;
 },
 sat_s3owb_entry() //  [R1]
         { info_tbl: [(c3pVI,
                       label: sat_s3owb_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pVI: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $c>>_r3oqV_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pVL,
                       label: $c>>_r3oqV_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pVL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pVP; else goto c3pVO;
       c3pVP: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $c>>_r3oqV_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pVO: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3owb_info;
           P64[Hp] = Hp - 40;
           _s3ow6::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3ow6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.126920786 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure:
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info;
 },
 Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_entry() //  [R2, R3,
                                                             R4]
         { info_tbl: [(c3pVU,
                       label: Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pVU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $c>>_r3oqV_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.127649683 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure+4;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.128308321 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadReadP1_closure+3;
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure+2;
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.130618806 UTC

[section ""data" . Text.ParserCombinators.ReadP.between1_closure" {
     Text.ParserCombinators.ReadP.between1_closure:
         const Text.ParserCombinators.ReadP.between1_info;
 },
 sat_s3owk_entry() //  [R1]
         { info_tbl: [(c3pWg,
                       label: sat_s3owk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pWg: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3owl_entry() //  [R1, R2]
         { info_tbl: [(c3pWj,
                       label: sat_s3owl_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pWj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3pWn; else goto c3pWm;
       c3pWn: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pWm: // global
           _s3owd::P64 = P64[R1 + 7];
           _s3owf::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3owf::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3owk_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3owd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3owg_entry() //  [R1]
         { info_tbl: [(c3pWo,
                       label: lvl4_s3owg_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pWo: // global
           _s3owg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pWp; else goto c3pWq;
       c3pWq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pWs; else goto c3pWr;
       c3pWs: // global
           HpAlloc = 24;
           goto c3pWp;
       c3pWp: // global
           R1 = _s3owg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pWr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3owg::P64;
           _s3owd::P64 = P64[_s3owg::P64 + 16];
           _s3owe::P64 = P64[_s3owg::P64 + 24];
           _s3owf::P64 = P64[_s3owg::P64 + 32];
           I64[Hp - 16] = sat_s3owl_info;
           P64[Hp - 8] = _s3owd::P64;
           P64[Hp] = _s3owf::P64;
           R2 = Hp - 15;
           R1 = _s3owe::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3own_entry() //  [R1]
         { info_tbl: [(c3pWy,
                       label: sat_s3own_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pWy: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.between1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3pWB,
                       label: Text.ParserCombinators.ReadP.between1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pWB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3pWF; else goto c3pWE;
       c3pWF: // global
           HpAlloc = 56;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.between1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pWE: // global
           I64[Hp - 48] = lvl4_s3owg_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = sat_s3own_info;
           P64[Hp] = Hp - 48;
           _s3owc::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3owc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.133337466 UTC

[section ""data" . Text.ParserCombinators.ReadP.between_closure" {
     Text.ParserCombinators.ReadP.between_closure:
         const Text.ParserCombinators.ReadP.between_info;
 },
 Text.ParserCombinators.ReadP.between_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3pWK,
                       label: Text.ParserCombinators.ReadP.between_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pWK: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.between1_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.135375781 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wcount_closure" {
     Text.ParserCombinators.ReadP.$wcount_closure:
         const Text.ParserCombinators.ReadP.$wcount_info;
 },
 sat_s3owA_entry() //  [R1, R2]
         { info_tbl: [(c3pXg,
                       label: sat_s3owA_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pXg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pXk; else goto c3pXj;
       c3pXk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pXj: // global
           _s3owu::P64 = P64[R1 + 7];
           _s3owx::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3owx::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3owu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3owB_entry() //  [R1, R2]
         { info_tbl: [(c3pXl,
                       label: sat_s3owB_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pXl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pXp; else goto c3pXo;
       c3pXp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pXo: // global
           _s3ows::P64 = P64[R1 + 7];
           _s3owu::P64 = P64[R1 + 15];
           _s3oww::I64 = I64[R1 + 23];
           I64[Hp - 16] = sat_s3owA_info;
           P64[Hp - 8] = _s3owu::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3oww::I64;
           R1 = _s3ows::P64;
           call $wxs_s3ows_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3owE_entry() //  [R1, R2]
         { info_tbl: [(c3pXx,
                       label: sat_s3owE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pXx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pXB; else goto c3pXA;
       c3pXB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pXA: // global
           _s3owu::P64 = P64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3owu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 $wxs_s3ows_entry() //  [R1, R2, R3]
         { info_tbl: [(c3pXF,
                       label: $wxs_s3ows_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pXF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pXJ; else goto c3pXI;
       c3pXJ: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pXI: // global
           _s3owp::P64 = P64[R1 + 6];
           if (R2 == 1) goto c3pXE; else goto c3pXD;
       c3pXE: // global
           I64[Hp - 24] = sat_s3owE_info;
           P64[Hp - 16] = R3;
           _c3pXr::P64 = Hp - 23;
           Hp = Hp - 16;
           R2 = _c3pXr::P64;
           R1 = _s3owp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3pXD: // global
           I64[Hp - 24] = sat_s3owB_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R3;
           I64[Hp] = R2 - 1;
           R2 = Hp - 23;
           R1 = _s3owp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wcount_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pXN,
                       label: Text.ParserCombinators.ReadP.$wcount_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pXN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3pXR; else goto c3pXQ;
       c3pXR: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wcount_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pXQ: // global
           if (%MO_S_Ge_W64(0, R2)) goto c3pXL; else goto c3pXM;
       c3pXL: // global
           Hp = Hp - 16;
           R2 = GHC.Types.[]_closure+1;
           R1 = R4;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3pXM: // global
           I64[Hp - 8] = $wxs_s3ows_info;
           P64[Hp] = R3;
           R3 = R4;
           R2 = R2;
           R1 = Hp - 6;
           call $wxs_s3ows_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.138238703 UTC

[section ""data" . Text.ParserCombinators.ReadP.count1_closure" {
     Text.ParserCombinators.ReadP.count1_closure:
         const Text.ParserCombinators.ReadP.count1_info;
 },
 Text.ParserCombinators.ReadP.count1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pXZ,
                       label: Text.ParserCombinators.ReadP.count1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pXZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3pY0; else goto c3pY1;
       c3pY0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.count1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pY1: // global
           I64[Sp - 24] = block_c3pXW_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3pY5; else goto c3pXX;
       u3pY5: // global
           call _c3pXW(R1) args: 0, res: 0, upd: 0;
       c3pXX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pXW() //  [R1]
         { info_tbl: [(c3pXW,
                       label: block_c3pXW_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pXW: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$wcount_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.140257287 UTC

[section ""data" . Text.ParserCombinators.ReadP.count_closure" {
     Text.ParserCombinators.ReadP.count_closure:
         const Text.ParserCombinators.ReadP.count_info;
 },
 Text.ParserCombinators.ReadP.count_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pYa,
                       label: Text.ParserCombinators.ReadP.count_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pYa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.count1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.141823844 UTC

[section ""data" . Text.ParserCombinators.ReadP.option1_closure" {
     Text.ParserCombinators.ReadP.option1_closure:
         const Text.ParserCombinators.ReadP.option1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.option1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pYk,
                       label: Text.ParserCombinators.ReadP.option1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pYk: // global
           _s3owM::P64 = R4;
           _s3owL::P64 = R3;
           _s3owK::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pYl; else goto c3pYm;
       c3pYm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pYo; else goto c3pYn;
       c3pYo: // global
           HpAlloc = 32;
           goto c3pYl;
       c3pYl: // global
           R4 = _s3owM::P64;
           R3 = _s3owL::P64;
           R2 = _s3owK::P64;
           R1 = Text.ParserCombinators.ReadP.option1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pYn: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3owM::P64;
           P64[Hp] = _s3owK::P64;
           I64[Sp - 16] = block_c3pYi_info;
           R2 = _s3owM::P64;
           R1 = _s3owL::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pYi() //  [R1]
         { info_tbl: [(c3pYi,
                       label: block_c3pYi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pYi: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.14325721 UTC

[section ""data" . Text.ParserCombinators.ReadP.option_closure" {
     Text.ParserCombinators.ReadP.option_closure:
         const Text.ParserCombinators.ReadP.option_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.option_entry() //  [R2, R3, R4]
         { info_tbl: [(c3pYw,
                       label: Text.ParserCombinators.ReadP.option_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pYw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.option1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.144503049 UTC

[section ""data" . Text.ParserCombinators.ReadP.optional1_closure" {
     Text.ParserCombinators.ReadP.optional1_closure:
         const Text.ParserCombinators.ReadP.optional1_info;
         const 0;
 },
 lvl4_s3owR_entry() //  [R1]
         { info_tbl: [(c3pYH,
                       label: lvl4_s3owR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pYH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3pYI; else goto c3pYJ;
       c3pYI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pYJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3owT_entry() //  [R1]
         { info_tbl: [(c3pYP,
                       label: sat_s3owT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pYP: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.optional1_entry() //  [R2, R3]
         { info_tbl: [(c3pYU,
                       label: Text.ParserCombinators.ReadP.optional1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pYU: // global
           _s3owQ::P64 = R3;
           _s3owP::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pYV; else goto c3pYW;
       c3pYW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3pYY; else goto c3pYX;
       c3pYY: // global
           HpAlloc = 40;
           goto c3pYV;
       c3pYV: // global
           R3 = _s3owQ::P64;
           R2 = _s3owP::P64;
           R1 = Text.ParserCombinators.ReadP.optional1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pYX: // global
           I64[Hp - 32] = lvl4_s3owR_info;
           P64[Hp - 16] = _s3owQ::P64;
           I64[Hp - 8] = sat_s3owT_info;
           _c3pYD::P64 = Hp - 32;
           P64[Hp] = _c3pYD::P64;
           I64[Sp - 16] = block_c3pYS_info;
           R2 = Hp - 7;
           R1 = _s3owP::P64;
           P64[Sp - 8] = _c3pYD::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pYS() //  [R1]
         { info_tbl: [(c3pYS,
                       label: block_c3pYS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pYS: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.146171316 UTC

[section ""data" . Text.ParserCombinators.ReadP.optional_closure" {
     Text.ParserCombinators.ReadP.optional_closure:
         const Text.ParserCombinators.ReadP.optional_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.optional_entry() //  [R2, R3]
         { info_tbl: [(c3pZ6,
                       label: Text.ParserCombinators.ReadP.optional_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pZ6: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.optional1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.147650365 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy3_closure" {
     Text.ParserCombinators.ReadP.endBy3_closure:
         const Text.ParserCombinators.ReadP.endBy3_info;
         const 0;
 },
 sat_s3ox1_entry() //  [R1, R2]
         { info_tbl: [(c3pZs,
                       label: sat_s3ox1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pZs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pZw; else goto c3pZv;
       c3pZw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pZv: // global
           _s3owW::P64 = P64[R1 + 7];
           _s3owY::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3owY::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3owW::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ox2_entry() //  [R1, R2]
         { info_tbl: [(c3pZx,
                       label: sat_s3ox2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pZx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pZB; else goto c3pZA;
       c3pZB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3pZA: // global
           _s3owV::P64 = P64[R1 + 7];
           _s3owW::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ox1_info;
           P64[Hp - 8] = _s3owW::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3owV::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ox3_entry() //  [R1]
         { info_tbl: [(c3pZC,
                       label: sat_s3ox3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pZC: // global
           _s3ox3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pZD; else goto c3pZE;
       c3pZE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3pZG; else goto c3pZF;
       c3pZG: // global
           HpAlloc = 24;
           goto c3pZD;
       c3pZD: // global
           R1 = _s3ox3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3pZF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ox3::P64;
           _s3owV::P64 = P64[_s3ox3::P64 + 16];
           _s3owW::P64 = P64[_s3ox3::P64 + 24];
           I64[Hp - 16] = sat_s3ox2_info;
           P64[Hp - 8] = _s3owV::P64;
           P64[Hp] = _s3owW::P64;
           R2 = Hp - 15;
           R1 = _s3owV::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.endBy3_entry() //  [R2, R3]
         { info_tbl: [(c3pZJ,
                       label: Text.ParserCombinators.ReadP.endBy3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pZJ: // global
           _s3owW::P64 = R3;
           _s3owV::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3pZK; else goto c3pZL;
       c3pZL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3pZN; else goto c3pZM;
       c3pZN: // global
           HpAlloc = 32;
           goto c3pZK;
       c3pZK: // global
           R3 = _s3owW::P64;
           R2 = _s3owV::P64;
           R1 = Text.ParserCombinators.ReadP.endBy3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3pZM: // global
           I64[Hp - 24] = sat_s3ox3_info;
           P64[Hp - 8] = _s3owV::P64;
           P64[Hp] = _s3owW::P64;
           I64[Sp - 16] = block_c3pZH_info;
           R2 = GHC.Types.[]_closure+1;
           R1 = _s3owW::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3pZH() //  [R1]
         { info_tbl: [(c3pZH,
                       label: block_c3pZH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pZH: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.149832354 UTC

[section ""data" . Text.ParserCombinators.ReadP.many_closure" {
     Text.ParserCombinators.ReadP.many_closure:
         const Text.ParserCombinators.ReadP.many_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.many_entry() //  [R2, R3]
         { info_tbl: [(c3pZV,
                       label: Text.ParserCombinators.ReadP.many_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3pZV: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.151106614 UTC

[section ""data" . Text.ParserCombinators.ReadP.many2_closure" {
     Text.ParserCombinators.ReadP.many2_closure:
         const Text.ParserCombinators.ReadP.many2_info;
         const 0;
 },
 sat_s3ox9_entry() //  [R1, R2]
         { info_tbl: [(c3q0d,
                       label: sat_s3ox9_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q0d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q0h; else goto c3q0g;
       c3q0h: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q0g: // global
           _s3ox5::P64 = P64[R1 + 7];
           _s3ox6::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3ox6::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3ox5::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxa_entry() //  [R1, R2]
         { info_tbl: [(c3q0i,
                       label: sat_s3oxa_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q0i: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q0m; else goto c3q0l;
       c3q0m: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q0l: // global
           _s3ox4::P64 = P64[R1 + 7];
           _s3ox5::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ox9_info;
           P64[Hp - 8] = _s3ox5::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3ox4::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.many2_entry() //  [R2, R3]
         { info_tbl: [(c3q0n,
                       label: Text.ParserCombinators.ReadP.many2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q0n: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q0r; else goto c3q0q;
       c3q0r: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.many2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q0q: // global
           I64[Hp - 16] = sat_s3oxa_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s3ox4::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ox4::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.152753924 UTC

[section ""data" . Text.ParserCombinators.ReadP.many1_closure" {
     Text.ParserCombinators.ReadP.many1_closure:
         const Text.ParserCombinators.ReadP.many1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.many1_entry() //  [R2, R3]
         { info_tbl: [(c3q0w,
                       label: Text.ParserCombinators.ReadP.many1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q0w: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.many2_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.154860222 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy4_closure" {
     Text.ParserCombinators.ReadP.endBy4_closure:
         const Text.ParserCombinators.ReadP.endBy4_info;
         const 0;
 },
 sat_s3oxj_entry() //  [R1]
         { info_tbl: [(c3q0T,
                       label: sat_s3oxj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q0T: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxk_entry() //  [R1, R2]
         { info_tbl: [(c3q0W,
                       label: sat_s3oxk_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q0W: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3q10; else goto c3q0Z;
       c3q10: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q0Z: // global
           _s3oxc::P64 = P64[R1 + 7];
           _s3oxf::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3oxf::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oxj_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3oxc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 p1_s3oxe_entry() //  [R1, R2]
         { info_tbl: [(c3q11,
                       label: p1_s3oxe_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q11: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q15; else goto c3q14;
       c3q15: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q14: // global
           _s3oxb::P64 = P64[R1 + 7];
           _s3oxc::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oxk_info;
           P64[Hp - 8] = _s3oxc::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oxb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxp_entry() //  [R1, R2]
         { info_tbl: [(c3q1l,
                       label: sat_s3oxp_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q1l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q1p; else goto c3q1o;
       c3q1p: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q1o: // global
           _s3oxd::P64 = P64[R1 + 7];
           _s3oxl::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oxl::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oxd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oxm_entry() //  [R1]
         { info_tbl: [(c3q1q,
                       label: lvl4_s3oxm_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q1q: // global
           _s3oxm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3q1r; else goto c3q1s;
       c3q1s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q1u; else goto c3q1t;
       c3q1u: // global
           HpAlloc = 24;
           goto c3q1r;
       c3q1r: // global
           R1 = _s3oxm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3q1t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3oxm::P64;
           _s3oxd::P64 = P64[_s3oxm::P64 + 16];
           _s3oxe::P64 = P64[_s3oxm::P64 + 24];
           _s3oxl::P64 = P64[_s3oxm::P64 + 32];
           I64[Hp - 16] = sat_s3oxp_info;
           P64[Hp - 8] = _s3oxd::P64;
           P64[Hp] = _s3oxl::P64;
           R3 = Hp - 15;
           R2 = _s3oxe::P64;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oxr_entry() //  [R1]
         { info_tbl: [(c3q1A,
                       label: sat_s3oxr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q1A: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxs_entry() //  [R1, R2]
         { info_tbl: [(c3q1D,
                       label: sat_s3oxs_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q1D: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3q1H; else goto c3q1G;
       c3q1H: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q1G: // global
           _s3oxc::P64 = P64[R1 + 7];
           _s3oxd::P64 = P64[R1 + 15];
           _s3oxe::P64 = P64[R1 + 23];
           I64[Hp - 48] = lvl4_s3oxm_info;
           P64[Hp - 32] = _s3oxd::P64;
           P64[Hp - 24] = _s3oxe::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oxr_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3oxc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.endBy4_entry() //  [R2, R3, R4]
         { info_tbl: [(c3q1I,
                       label: Text.ParserCombinators.ReadP.endBy4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q1I: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3q1M; else goto c3q1L;
       c3q1M: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.endBy4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q1L: // global
           I64[Hp - 48] = p1_s3oxe_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3oxs_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 47;
           _s3oxb::P64 = R2;
           R2 = Hp - 23;
           R1 = _s3oxb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.158035002 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy1_closure" {
     Text.ParserCombinators.ReadP.endBy1_closure:
         const Text.ParserCombinators.ReadP.endBy1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.endBy1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3q1R,
                       label: Text.ParserCombinators.ReadP.endBy1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q1R: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy4_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.159276869 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany2_closure" {
     Text.ParserCombinators.ReadP.skipMany2_closure:
         const Text.ParserCombinators.ReadP.skipMany2_info;
         const 0;
 },
 sat_s3oxx_entry() //  [R1]
         { info_tbl: [(c3q27,
                       label: sat_s3oxx_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q27: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipMany2_entry() //  [R2, R3]
         { info_tbl: [(c3q2a,
                       label: Text.ParserCombinators.ReadP.skipMany2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q2a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3q2b; else goto c3q2c;
       c3q2b: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipMany2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q2c: // global
           I64[Sp - 16] = block_c3q1Y_info;
           _s3oxt::P64 = R2;
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           P64[Sp - 8] = _s3oxt::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3q1Y() //  [R1]
         { info_tbl: [(c3q1Y,
                       label: block_c3q1Y_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q1Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3q2f; else goto c3q2e;
       c3q2f: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3q2e: // global
           I64[Hp - 8] = sat_s3oxx_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.160730339 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany_closure" {
     Text.ParserCombinators.ReadP.skipMany_closure:
         const Text.ParserCombinators.ReadP.skipMany_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.skipMany_entry() //  [R2, R3]
         { info_tbl: [(c3q2k,
                       label: Text.ParserCombinators.ReadP.skipMany_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q2k: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipMany2_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.163777841 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany3_closure" {
     Text.ParserCombinators.ReadP.skipMany3_closure:
         const Text.ParserCombinators.ReadP.skipMany3_info;
         const 0;
 },
 sat_s3oxD_entry() //  [R1]
         { info_tbl: [(c3q2E,
                       label: sat_s3oxD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q2E: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oxA_entry() //  [R1]
         { info_tbl: [(c3q2H,
                       label: lvl4_s3oxA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q2H: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3q2I; else goto c3q2J;
       c3q2I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3q2J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3q2v_info;
           R2 = GHC.Tuple.()_closure+1;
           _s3oxy::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s3oxy::P64;
           Sp = Sp - 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3q2v() //  [R1]
         { info_tbl: [(c3q2v,
                       label: block_c3q2v_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q2v: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3q2M; else goto c3q2L;
       c3q2M: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3q2L: // global
           I64[Hp - 8] = sat_s3oxD_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oxF_entry() //  [R1]
         { info_tbl: [(c3q2S,
                       label: sat_s3oxF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q2S: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipMany3_entry() //  [R2, R3]
         { info_tbl: [(c3q2V,
                       label: Text.ParserCombinators.ReadP.skipMany3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q2V: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3q2Z; else goto c3q2Y;
       c3q2Z: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipMany3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q2Y: // global
           I64[Hp - 40] = lvl4_s3oxA_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s3oxF_info;
           P64[Hp] = Hp - 40;
           _s3oxy::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3oxy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.165720131 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany1_closure" {
     Text.ParserCombinators.ReadP.skipMany1_closure:
         const Text.ParserCombinators.ReadP.skipMany1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.skipMany1_entry() //  [R2, R3]
         { info_tbl: [(c3q34,
                       label: Text.ParserCombinators.ReadP.skipMany1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q34: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipMany3_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.167322271 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy3_closure" {
     Text.ParserCombinators.ReadP.sepBy3_closure:
         const Text.ParserCombinators.ReadP.sepBy3_info;
         const 0;
 },
 sat_s3oxN_entry() //  [R1]
         { info_tbl: [(c3q3m,
                       label: sat_s3oxN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q3m: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 m2_s3oxJ_entry() //  [R1, R2]
         { info_tbl: [(c3q3p,
                       label: m2_s3oxJ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q3p: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3q3t; else goto c3q3s;
       c3q3t: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q3s: // global
           _s3oxG::P64 = P64[R1 + 7];
           _s3oxH::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3oxG::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oxN_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3oxH::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxR_entry() //  [R1, R2]
         { info_tbl: [(c3q3F,
                       label: sat_s3oxR_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q3F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q3J; else goto c3q3I;
       c3q3J: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q3I: // global
           _s3oxI::P64 = P64[R1 + 7];
           _s3oxO::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oxO::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oxI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxS_entry() //  [R1, R2]
         { info_tbl: [(c3q3K,
                       label: sat_s3oxS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q3K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q3O; else goto c3q3N;
       c3q3O: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q3N: // global
           _s3oxI::P64 = P64[R1 + 7];
           _s3oxJ::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oxR_info;
           P64[Hp - 8] = _s3oxI::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3oxJ::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.sepBy3_entry() //  [R2, R3, R4]
         { info_tbl: [(c3q3P,
                       label: Text.ParserCombinators.ReadP.sepBy3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q3P: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3q3T; else goto c3q3S;
       c3q3T: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.sepBy3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q3S: // global
           I64[Hp - 40] = m2_s3oxJ_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3oxS_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 39;
           _s3oxG::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3oxG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.169436313 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy1_closure" {
     Text.ParserCombinators.ReadP.sepBy1_closure:
         const Text.ParserCombinators.ReadP.sepBy1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.sepBy1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3q3Y,
                       label: Text.ParserCombinators.ReadP.sepBy1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q3Y: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.sepBy3_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.170856795 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy2_closure" {
     Text.ParserCombinators.ReadP.endBy2_closure:
         const Text.ParserCombinators.ReadP.endBy2_info;
         const 0;
 },
 sat_s3oy0_entry() //  [R1]
         { info_tbl: [(c3q4l,
                       label: sat_s3oy0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q4l: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oy1_entry() //  [R1, R2]
         { info_tbl: [(c3q4o,
                       label: sat_s3oy1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q4o: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3q4s; else goto c3q4r;
       c3q4s: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q4r: // global
           _s3oxU::P64 = P64[R1 + 7];
           _s3oxW::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3oxW::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oy0_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3oxU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oy2_entry() //  [R1, R2]
         { info_tbl: [(c3q4t,
                       label: sat_s3oy2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q4t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q4x; else goto c3q4w;
       c3q4x: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q4w: // global
           _s3oxT::P64 = P64[R1 + 7];
           _s3oxU::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oy1_info;
           P64[Hp - 8] = _s3oxU::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oxT::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.endBy2_entry() //  [R2, R3, R4]
         { info_tbl: [(c3q4y,
                       label: Text.ParserCombinators.ReadP.endBy2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q4y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q4C; else goto c3q4B;
       c3q4C: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.endBy2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q4B: // global
           I64[Hp - 16] = sat_s3oy2_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R4;
           R2 = Hp - 15;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.172593258 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy_closure" {
     Text.ParserCombinators.ReadP.endBy_closure:
         const Text.ParserCombinators.ReadP.endBy_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.endBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c3q4H,
                       label: Text.ParserCombinators.ReadP.endBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q4H: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.173807659 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy2_closure" {
     Text.ParserCombinators.ReadP.sepBy2_closure:
         const Text.ParserCombinators.ReadP.sepBy2_info;
         const 0;
 },
 sat_s3oy7_entry() //  [R1]
         { info_tbl: [(c3q4S,
                       label: sat_s3oy7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q4S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3q4T; else goto c3q4U;
       c3q4T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3q4U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.sepBy2_entry() //  [R2, R3, R4]
         { info_tbl: [(c3q4X,
                       label: Text.ParserCombinators.ReadP.sepBy2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q4X: // global
           _s3oy5::P64 = R4;
           _s3oy4::P64 = R3;
           _s3oy3::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3q4Y; else goto c3q4Z;
       c3q4Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q51; else goto c3q50;
       c3q51: // global
           HpAlloc = 24;
           goto c3q4Y;
       c3q4Y: // global
           R4 = _s3oy5::P64;
           R3 = _s3oy4::P64;
           R2 = _s3oy3::P64;
           R1 = Text.ParserCombinators.ReadP.sepBy2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q50: // global
           I64[Hp - 16] = sat_s3oy7_info;
           P64[Hp] = _s3oy5::P64;
           I64[Sp - 16] = block_c3q4V_info;
           R4 = _s3oy5::P64;
           R3 = _s3oy4::P64;
           R2 = _s3oy3::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.sepBy3_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3q4V() //  [R1]
         { info_tbl: [(c3q4V,
                       label: block_c3q4V_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q4V: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.175343662 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy_closure" {
     Text.ParserCombinators.ReadP.sepBy_closure:
         const Text.ParserCombinators.ReadP.sepBy_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.sepBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c3q59,
                       label: Text.ParserCombinators.ReadP.sepBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q59: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.sepBy2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.176123043 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadP.$fMonadReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.177707203 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_info;
         const 0;
 },
 sat_s3oyi_entry() //  [R1]
         { info_tbl: [(c3q5v,
                       label: sat_s3oyi_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q5v: // global
           _s3oyi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3q5w; else goto c3q5x;
       c3q5x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q5z; else goto c3q5y;
       c3q5z: // global
           HpAlloc = 24;
           goto c3q5w;
       c3q5w: // global
           R1 = _s3oyi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3q5y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3oyi::P64;
           _s3oyb::P64 = P64[_s3oyi::P64 + 16];
           _s3oyc::P64 = P64[_s3oyi::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oyc::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3oyb::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oyf_entry() //  [R1, R2]
         { info_tbl: [(c3q5G,
                       label: sat_s3oyf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q5G: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q5K; else goto c3q5J;
       c3q5K: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q5J: // global
           _s3oyb::P64 = P64[R1 + 7];
           _s3oyc::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oyc::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oyb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oyj_entry() //  [R1, R2]
         { info_tbl: [(c3q5N,
                       label: sat_s3oyj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q5N: // global
           _s3oyc::P64 = R2;
           _s3oyj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3q5O; else goto c3q5P;
       c3q5P: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3q5R; else goto c3q5Q;
       c3q5R: // global
           HpAlloc = 56;
           goto c3q5O;
       c3q5O: // global
           R2 = _s3oyc::P64;
           R1 = _s3oyj::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q5Q: // global
           _s3oya::P64 = P64[_s3oyj::P64 + 7];
           _s3oyb::P64 = P64[_s3oyj::P64 + 15];
           I64[Hp - 48] = sat_s3oyi_info;
           P64[Hp - 32] = _s3oyb::P64;
           P64[Hp - 24] = _s3oyc::P64;
           I64[Hp - 16] = sat_s3oyf_info;
           P64[Hp - 8] = _s3oyb::P64;
           P64[Hp] = _s3oyc::P64;
           I64[Sp - 16] = block_c3q5L_info;
           R2 = Hp - 15;
           R1 = _s3oya::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call some_v_s3oya_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3q5L() //  [R1]
         { info_tbl: [(c3q5L,
                       label: block_c3q5L_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q5L: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 some_v_s3oya_entry() //  [R1, R2]
         { info_tbl: [(c3q5V,
                       label: some_v_s3oya_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q5V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q5Z; else goto c3q5Y;
       c3q5Z: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q5Y: // global
           _s3oy8::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3oyj_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oy8::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP2_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3q60,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q60: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3q64; else goto c3q63;
       c3q64: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q63: // global
           I64[Hp - 8] = some_v_s3oya_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call some_v_s3oya_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.181010994 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_info;
         const 0;
 },
 sat_s3oyu_entry() //  [R1]
         { info_tbl: [(c3q6i,
                       label: sat_s3oyu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q6i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3q6j; else goto c3q6k;
       c3q6j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3q6k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oyr_entry() //  [R1, R2]
         { info_tbl: [(c3q6w,
                       label: sat_s3oyr_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q6w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q6A; else goto c3q6z;
       c3q6A: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q6z: // global
           _s3oyn::P64 = P64[R1 + 7];
           _s3oyo::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oyo::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oyn::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oys_entry() //  [R1, R2]
         { info_tbl: [(c3q6B,
                       label: sat_s3oys_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q6B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q6F; else goto c3q6E;
       c3q6F: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q6E: // global
           _s3oym::P64 = P64[R1 + 7];
           _s3oyn::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oyr_info;
           P64[Hp - 8] = _s3oyn::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oym::P64;
           call many_v_s3oym_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 many_v_s3oym_entry() //  [R1, R2]
         { info_tbl: [(c3q6I,
                       label: many_v_s3oym_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q6I: // global
           _s3oyn::P64 = R2;
           _s3oym::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3q6J; else goto c3q6K;
       c3q6K: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3q6M; else goto c3q6L;
       c3q6M: // global
           HpAlloc = 48;
           goto c3q6J;
       c3q6J: // global
           R2 = _s3oyn::P64;
           R1 = _s3oym::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q6L: // global
           _s3oyk::P64 = P64[_s3oym::P64 + 7];
           I64[Hp - 40] = sat_s3oyu_info;
           P64[Hp - 24] = _s3oyn::P64;
           I64[Hp - 16] = sat_s3oys_info;
           P64[Hp - 8] = _s3oym::P64;
           P64[Hp] = _s3oyn::P64;
           I64[Sp - 16] = block_c3q6G_info;
           R2 = Hp - 15;
           R1 = _s3oyk::P64;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3q6G() //  [R1]
         { info_tbl: [(c3q6G,
                       label: block_c3q6G_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q6G: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP1_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3q6Q,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q6Q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3q6U; else goto c3q6T;
       c3q6U: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q6T: // global
           I64[Hp - 8] = many_v_s3oym_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call many_v_s3oym_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.183394346 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure+2;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.184067737 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadPlusReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadPlusReadP_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.186797616 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr3_closure" {
     Text.ParserCombinators.ReadP.chainr3_closure:
         const Text.ParserCombinators.ReadP.chainr3_info;
         const 0;
 },
 sat_s3oyE_entry() //  [R1, R2]
         { info_tbl: [(c3q7l,
                       label: sat_s3oyE_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q7l: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3q7p; else goto c3q7o;
       c3q7p: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q7o: // global
           _s3oyz::P64 = P64[R1 + 7];
           _s3oyA::P64 = P64[R1 + 15];
           _s3oyB::P64 = P64[R1 + 23];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3oyB::P64;
           P64[Hp - 8] = _s3oyA::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3oyz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oyF_entry() //  [R1, R2]
         { info_tbl: [(c3q7q,
                       label: sat_s3oyF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q7q: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3q7u; else goto c3q7t;
       c3q7u: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q7t: // global
           _s3oyy::P64 = P64[R1 + 7];
           _s3oyz::P64 = P64[R1 + 15];
           _s3oyA::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3oyE_info;
           P64[Hp - 16] = _s3oyz::P64;
           P64[Hp - 8] = _s3oyA::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3oyy::P64;
           call scan_s3oyy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oyI_entry() //  [R1, R2]
         { info_tbl: [(c3q7x,
                       label: sat_s3oyI_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q7x: // global
           _s3oyA::P64 = R2;
           _s3oyI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3q7y; else goto c3q7z;
       c3q7z: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3q7B; else goto c3q7A;
       c3q7B: // global
           HpAlloc = 64;
           goto c3q7y;
       c3q7y: // global
           R2 = _s3oyA::P64;
           R1 = _s3oyI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q7A: // global
           _s3oyw::P64 = P64[_s3oyI::P64 + 7];
           _s3oyy::P64 = P64[_s3oyI::P64 + 15];
           _s3oyz::P64 = P64[_s3oyI::P64 + 23];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3oyz::P64;
           P64[Hp - 32] = _s3oyA::P64;
           I64[Hp - 24] = sat_s3oyF_info;
           P64[Hp - 16] = _s3oyy::P64;
           P64[Hp - 8] = _s3oyz::P64;
           P64[Hp] = _s3oyA::P64;
           I64[Sp - 16] = block_c3q7v_info;
           R2 = Hp - 23;
           R1 = _s3oyw::P64;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3q7v() //  [R1]
         { info_tbl: [(c3q7v,
                       label: block_c3q7v_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q7v: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3oyy_entry() //  [R1, R2]
         { info_tbl: [(c3q7F,
                       label: scan_s3oyy_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q7F: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3q7J; else goto c3q7I;
       c3q7J: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q7I: // global
           _s3oyv::P64 = P64[R1 + 7];
           _s3oyw::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3oyI_info;
           P64[Hp - 16] = _s3oyw::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3oyv::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.chainr3_entry() //  [R2, R3, R4]
         { info_tbl: [(c3q7K,
                       label: Text.ParserCombinators.ReadP.chainr3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q7K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3q7O; else goto c3q7N;
       c3q7O: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.chainr3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q7N: // global
           I64[Hp - 16] = scan_s3oyy_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = R4;
           R1 = Hp - 15;
           call scan_s3oyy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.189525647 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr1_closure" {
     Text.ParserCombinators.ReadP.chainr1_closure:
         const Text.ParserCombinators.ReadP.chainr1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3q7T,
                       label: Text.ParserCombinators.ReadP.chainr1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q7T: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainr3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.190674351 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr2_closure" {
     Text.ParserCombinators.ReadP.chainr2_closure:
         const Text.ParserCombinators.ReadP.chainr2_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr2_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3q83,
                       label: Text.ParserCombinators.ReadP.chainr2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q83: // global
           _s3oyM::P64 = R5;
           _s3oyL::P64 = R4;
           _s3oyK::P64 = R3;
           _s3oyJ::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3q84; else goto c3q85;
       c3q85: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3q87; else goto c3q86;
       c3q87: // global
           HpAlloc = 32;
           goto c3q84;
       c3q84: // global
           R5 = _s3oyM::P64;
           R4 = _s3oyL::P64;
           R3 = _s3oyK::P64;
           R2 = _s3oyJ::P64;
           R1 = Text.ParserCombinators.ReadP.chainr2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q86: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3oyM::P64;
           P64[Hp] = _s3oyL::P64;
           I64[Sp - 16] = block_c3q81_info;
           R4 = _s3oyM::P64;
           R3 = _s3oyK::P64;
           R2 = _s3oyJ::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.chainr3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3q81() //  [R1]
         { info_tbl: [(c3q81,
                       label: block_c3q81_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q81: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.191969236 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr_closure" {
     Text.ParserCombinators.ReadP.chainr_closure:
         const Text.ParserCombinators.ReadP.chainr_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3q8f,
                       label: Text.ParserCombinators.ReadP.chainr_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q8f: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainr2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.193731862 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl3_closure" {
     Text.ParserCombinators.ReadP.chainl3_closure:
         const Text.ParserCombinators.ReadP.chainl3_info;
         const 0;
 },
 sat_s3oyY_entry() //  [R1, R2]
         { info_tbl: [(c3q8D,
                       label: sat_s3oyY_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q8D: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3q8H; else goto c3q8G;
       c3q8H: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q8G: // global
           _s3oyS::P64 = P64[R1 + 7];
           _s3oyT::P64 = P64[R1 + 15];
           _s3oyU::P64 = P64[R1 + 23];
           _s3oyV::P64 = P64[R1 + 31];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3oyV::P64;
           P64[Hp - 8] = _s3oyT::P64;
           P64[Hp] = R2;
           R3 = _s3oyU::P64;
           R2 = Hp - 32;
           R1 = _s3oyS::P64;
           call rest_s3oyS_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oyZ_entry() //  [R1, R2]
         { info_tbl: [(c3q8I,
                       label: sat_s3oyZ_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q8I: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3q8M; else goto c3q8L;
       c3q8M: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3q8L: // global
           _s3oyP::P64 = P64[R1 + 7];
           _s3oyS::P64 = P64[R1 + 15];
           _s3oyT::P64 = P64[R1 + 23];
           _s3oyU::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3oyY_info;
           P64[Hp - 24] = _s3oyS::P64;
           P64[Hp - 16] = _s3oyT::P64;
           P64[Hp - 8] = _s3oyU::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3oyP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 rest_s3oyS_entry() //  [R1, R2, R3]
         { info_tbl: [(c3q8P,
                       label: rest_s3oyS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q8P: // global
           _s3oyU::P64 = R3;
           _s3oyT::P64 = R2;
           _s3oyS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3q8Q; else goto c3q8R;
       c3q8R: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3q8T; else goto c3q8S;
       c3q8T: // global
           HpAlloc = 72;
           goto c3q8Q;
       c3q8Q: // global
           R3 = _s3oyU::P64;
           R2 = _s3oyT::P64;
           R1 = _s3oyS::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q8S: // global
           _s3oyP::P64 = P64[_s3oyS::P64 + 6];
           _s3oyQ::P64 = P64[_s3oyS::P64 + 14];
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s3oyU::P64;
           P64[Hp - 40] = _s3oyT::P64;
           I64[Hp - 32] = sat_s3oyZ_info;
           P64[Hp - 24] = _s3oyP::P64;
           P64[Hp - 16] = _s3oyS::P64;
           P64[Hp - 8] = _s3oyT::P64;
           P64[Hp] = _s3oyU::P64;
           I64[Sp - 16] = block_c3q8N_info;
           R2 = Hp - 31;
           R1 = _s3oyQ::P64;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3q8N() //  [R1]
         { info_tbl: [(c3q8N,
                       label: block_c3q8N_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q8N: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oz3_entry() //  [R1, R2]
         { info_tbl: [(c3q92,
                       label: sat_s3oz3_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q92: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 15];
           call rest_s3oyS_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.chainl3_entry() //  [R2, R3, R4]
         { info_tbl: [(c3q95,
                       label: Text.ParserCombinators.ReadP.chainl3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q95: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3q99; else goto c3q98;
       c3q99: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.chainl3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q98: // global
           I64[Hp - 40] = rest_s3oyS_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3oz3_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 38;
           _s3oyP::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3oyP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.196276984 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl1_closure" {
     Text.ParserCombinators.ReadP.chainl1_closure:
         const Text.ParserCombinators.ReadP.chainl1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3q9e,
                       label: Text.ParserCombinators.ReadP.chainl1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q9e: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainl3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.197402473 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl2_closure" {
     Text.ParserCombinators.ReadP.chainl2_closure:
         const Text.ParserCombinators.ReadP.chainl2_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl2_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3q9o,
                       label: Text.ParserCombinators.ReadP.chainl2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q9o: // global
           _s3oz7::P64 = R5;
           _s3oz6::P64 = R4;
           _s3oz5::P64 = R3;
           _s3oz4::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3q9p; else goto c3q9q;
       c3q9q: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3q9s; else goto c3q9r;
       c3q9s: // global
           HpAlloc = 32;
           goto c3q9p;
       c3q9p: // global
           R5 = _s3oz7::P64;
           R4 = _s3oz6::P64;
           R3 = _s3oz5::P64;
           R2 = _s3oz4::P64;
           R1 = Text.ParserCombinators.ReadP.chainl2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3q9r: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3oz7::P64;
           P64[Hp] = _s3oz6::P64;
           I64[Sp - 16] = block_c3q9m_info;
           R4 = _s3oz7::P64;
           R3 = _s3oz5::P64;
           R2 = _s3oz4::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.chainl3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3q9m() //  [R1]
         { info_tbl: [(c3q9m,
                       label: block_c3q9m_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q9m: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.198715034 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl_closure" {
     Text.ParserCombinators.ReadP.chainl_closure:
         const Text.ParserCombinators.ReadP.chainl_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3q9A,
                       label: Text.ParserCombinators.ReadP.chainl_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q9A: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainl2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.200009503 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++2_closure" {
     Text.ParserCombinators.ReadP.<++2_closure:
         const Text.ParserCombinators.ReadP.<++2_info;
 },
 lvl4_s3ozd_entry() //  [R1]
         { info_tbl: [(c3q9P,
                       label: lvl4_s3ozd_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q9P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3q9Q; else goto c3q9R;
       c3q9Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3q9R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = I64[R1 + 24] - 1;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.<++2_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ozg_entry() //  [R1]
         { info_tbl: [(c3q9X,
                       label: sat_s3ozg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3q9X: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.<++2_entry() //  [R2, R3]
         { info_tbl: [(c3qa3,
                       label: Text.ParserCombinators.ReadP.<++2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qa3: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3qa7; else goto c3qa6;
       c3qa7: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.<++2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qa6: // global
           if (R2 == 0) goto c3qa2; else goto c3qa1;
       c3qa2: // global
           Hp = Hp - 64;
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3qa1: // global
           I64[Hp - 56] = lvl4_s3ozd_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3ozg_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.203182013 UTC

[section ""data" . Text.ParserCombinators.ReadP.$w<++_closure" {
     Text.ParserCombinators.ReadP.$w<++_closure:
         const Text.ParserCombinators.ReadP.$w<++_info;
         const 0;
 },
 lvl4_s3ozk_entry() //  [R1]
         { info_tbl: [(c3qah,
                       label: lvl4_s3ozk_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qah: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qai; else goto c3qaj;
       c3qai: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qaj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 probe_s3ozl_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qam: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call probe_s3ozl_entry(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ozC_entry() //  [R1]
         { info_tbl: [(c3qaD,
                       label: sat_s3ozC_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qaD: // global
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 probe_s3ozl_entry() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c3qaN,
                       label: probe_s3ozl_info
                       rep:HeapRep 1 ptrs {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qaN: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3qaO; else goto u3qbv;
       c3qaO: // global
           R1 = R1;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       u3qbv: // global
           P64[Sp - 40] = R1;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call _c3qan() args: 0, res: 0, upd: 0;
     }
 },
 _c3qan() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qan: // global
           _s3ozi::P64 = P64[P64[Sp] + 4];
           I64[Sp - 8] = block_c3qaq_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3ozi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qbA; else goto c3qar;
       u3qbA: // global
           call _c3qaq(R1) args: 0, res: 0, upd: 0;
       c3qar: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qaq() //  [R1]
         { info_tbl: [(c3qaq,
                       label: block_c3qaq_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qaq: // global
           _c3qaM::P64 = R1 & 7;
           if (_c3qaM::P64 < 4) goto u3qbs; else goto u3qbu;
       u3qbs: // global
           if (_c3qaM::P64 < 3) goto u3qbt; else goto u3qbw;
       u3qbt: // global
           _s3ozn::P64 = P64[Sp + 24];
           if (_c3qaM::P64 < 2) goto c3qaH; else goto c3qaI;
       c3qaH: // global
           I64[Sp] = block_c3qaR_info;
           _s3ozr::P64 = P64[R1 + 7];
           R1 = _s3ozn::P64;
           P64[Sp + 24] = _s3ozr::P64;
           if (R1 & 7 != 0) goto u3qbB; else goto c3qaT;
       u3qbB: // global
           call _c3qaR(R1) args: 0, res: 0, upd: 0;
       c3qaT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3qaI: // global
           I64[Sp] = block_c3qbd_info;
           R2 = _s3ozn::P64;
           R1 = P64[R1 + 6];
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3qbw: // global
           Sp = Sp + 16;
           call _c3qaJ() args: 0, res: 0, upd: 0;
       u3qbu: // global
           _s3ozp::P64 = P64[Sp + 40];
           if (_c3qaM::P64 < 5) goto c3qaK; else goto c3qaL;
       c3qaK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qbn; else goto c3qbm;
       c3qbn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qbm: // global
           I64[Hp - 16] = sat_s3ozC_info;
           P64[Hp - 8] = _s3ozp::P64;
           P64[Hp] = R1;
           R3 = Hp - 15;
           R2 = I64[Sp + 32];
           Sp = Sp + 48;
           call Text.ParserCombinators.ReadP.<++2_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
       c3qaL: // global
           R3 = _s3ozp::P64;
           R2 = R1;
           Sp = Sp + 48;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3qaR() //  [R1]
         { info_tbl: [(c3qaR,
                       label: block_c3qaR_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qaR: // global
           if (R1 & 7 == 1) goto u3qbx; else goto c3qb7;
       u3qbx: // global
           Sp = Sp + 16;
           call _c3qaJ() args: 0, res: 0, upd: 0;
       c3qb7: // global
           I64[Sp] = block_c3qb5_info;
           R2 = P64[R1 + 6];
           _s3ozu::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = I64[Sp + 32] + 1;
           P64[Sp + 32] = _s3ozu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qb5() //  [R1]
         { info_tbl: [(c3qb5,
                       label: block_c3qb5_info
                       rep:StackRep [False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qb5: // global
           P64[Sp + 16] = R1;
           _s3ozo::I64 = I64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 32];
           I64[Sp + 32] = _s3ozo::I64;
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c3qan() args: 0, res: 0, upd: 0;
     }
 },
 _c3qbd() //  [R1]
         { info_tbl: [(c3qbd,
                       label: block_c3qbd_info
                       rep:StackRep [False, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qbd: // global
           P64[Sp + 16] = R1;
           P64[Sp + 24] = P64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c3qan() args: 0, res: 0, upd: 0;
     }
 },
 _c3qaJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qaJ: // global
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ozF_entry() //  [R1, R2]
         { info_tbl: [(c3qbM,
                       label: sat_s3ozF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qbM: // global
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = R2;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           call probe_s3ozl_entry(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$w<++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3qbP,
                       label: Text.ParserCombinators.ReadP.$w<++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qbP: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3qbT; else goto c3qbS;
       c3qbT: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$w<++_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qbS: // global
           I64[Hp - 64] = lvl4_s3ozk_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = probe_s3ozl_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3ozF_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 36;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.20736885 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++1_closure" {
     Text.ParserCombinators.ReadP.<++1_closure:
         const Text.ParserCombinators.ReadP.<++1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.<++1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3qc1,
                       label: Text.ParserCombinators.ReadP.<++1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qc1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3qc2; else goto c3qc3;
       c3qc2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.<++1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qc3: // global
           I64[Sp - 8] = block_c3qbY_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3qbY() //  [R1]
         { info_tbl: [(c3qbY,
                       label: block_c3qbY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qbY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qc6; else goto c3qc5;
       c3qc6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qc5: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.209756635 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++_closure" {
     Text.ParserCombinators.ReadP.<++_closure:
         const Text.ParserCombinators.ReadP.<++_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.<++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3qcb,
                       label: Text.ParserCombinators.ReadP.<++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qcb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.<++1_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.211917966 UTC

[section ""data" . Text.ParserCombinators.ReadP.manyTill1_closure" {
     Text.ParserCombinators.ReadP.manyTill1_closure:
         const Text.ParserCombinators.ReadP.manyTill1_info;
         const 0;
 },
 lvl4_s3ozQ_entry() //  [R1]
         { info_tbl: [(c3qcr,
                       label: lvl4_s3ozQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qcr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qcs; else goto c3qct;
       c3qcs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qct: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ozS_entry() //  [R1]
         { info_tbl: [(c3qcz,
                       label: sat_s3ozS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qcz: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3ozO_entry() //  [R1, R2]
         { info_tbl: [(c3qcC,
                       label: scan_s3ozO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qcC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qcG; else goto c3qcF;
       c3qcG: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qcF: // global
           _s3ozM::P64 = P64[R1 + 7];
           I64[Hp - 32] = lvl4_s3ozQ_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3ozS_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 7;
           R1 = _s3ozM::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ozZ_entry() //  [R1, R2]
         { info_tbl: [(c3qcY,
                       label: sat_s3ozZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qcY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qd2; else goto c3qd1;
       c3qd2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qd1: // global
           _s3ozV::P64 = P64[R1 + 7];
           _s3ozW::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3ozW::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3ozV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oA0_entry() //  [R1, R2]
         { info_tbl: [(c3qd3,
                       label: sat_s3oA0_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qd3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qd7; else goto c3qd6;
       c3qd7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qd6: // global
           _s3ozU::P64 = P64[R1 + 7];
           _s3ozV::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ozZ_info;
           P64[Hp - 8] = _s3ozV::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3ozU::P64;
           call scan2_s3ozU_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 scan1_s3ozT_entry() //  [R1, R2]
         { info_tbl: [(c3qd8,
                       label: scan1_s3ozT_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qd8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qdc; else goto c3qdb;
       c3qdc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qdb: // global
           _s3ozL::P64 = P64[R1 + 7];
           _s3ozU::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oA0_info;
           P64[Hp - 8] = _s3ozU::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3ozL::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 scan2_s3ozU_entry() //  [R1, R2]
         { info_tbl: [(c3qdk,
                       label: scan2_s3ozU_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qdk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3qdl; else goto c3qdm;
       c3qdl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qdm: // global
           I64[Sp - 8] = block_c3qdh_info;
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3qdh() //  [R1]
         { info_tbl: [(c3qdh,
                       label: block_c3qdh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qdh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qdp; else goto c3qdo;
       c3qdp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qdo: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.manyTill1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3qdq,
                       label: Text.ParserCombinators.ReadP.manyTill1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qdq: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3qdu; else goto c3qdt;
       c3qdu: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.manyTill1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qdt: // global
           I64[Hp - 56] = scan_s3ozO_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = scan1_s3ozT_info;
           P64[Hp - 32] = R2;
           _c3qcI::P64 = Hp - 15;
           P64[Hp - 24] = _c3qcI::P64;
           I64[Hp - 16] = scan2_s3ozU_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 39;
           R2 = R4;
           R1 = _c3qcI::P64;
           call scan2_s3ozU_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.215438936 UTC

[section ""data" . Text.ParserCombinators.ReadP.manyTill_closure" {
     Text.ParserCombinators.ReadP.manyTill_closure:
         const Text.ParserCombinators.ReadP.manyTill_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.manyTill_entry() //  [R2, R3, R4]
         { info_tbl: [(c3qdz,
                       label: Text.ParserCombinators.ReadP.manyTill_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qdz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.manyTill1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.216896369 UTC

[section ""data" . Text.ParserCombinators.ReadP.eof1_closure" {
     Text.ParserCombinators.ReadP.eof1_closure:
         const Text.ParserCombinators.ReadP.eof1_info;
 },
 lvl4_s3oA5_entry() //  [R1]
         { info_tbl: [(c3qdK,
                       label: lvl4_s3oA5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qdK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qdL; else goto c3qdM;
       c3qdL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qdM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oAa_entry() //  [R1, R2]
         { info_tbl: [(c3qdZ,
                       label: sat_s3oAa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qdZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qe0; else goto c3qe1;
       c3qe0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qe1: // global
           I64[Sp - 16] = block_c3qdS_info;
           _s3oA5::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3oA5::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qe8; else goto c3qdT;
       u3qe8: // global
           call _c3qdS(R1) args: 0, res: 0, upd: 0;
       c3qdT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qdS() //  [R1]
         { info_tbl: [(c3qdS,
                       label: block_c3qdS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qdS: // global
           if (R1 & 7 == 1) goto c3qdW; else goto c3qdX;
       c3qdW: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3qdX: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.eof1_entry() //  [R2]
         { info_tbl: [(c3qea,
                       label: Text.ParserCombinators.ReadP.eof1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qea: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qee; else goto c3qed;
       c3qee: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.eof1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qed: // global
           I64[Hp - 48] = lvl4_s3oA5_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3oAa_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.218710095 UTC

[section ""data" . Text.ParserCombinators.ReadP.eof_closure" {
     Text.ParserCombinators.ReadP.eof_closure:
         const Text.ParserCombinators.ReadP.eof_info;
 },
 Text.ParserCombinators.ReadP.eof_entry() //  [R2]
         { info_tbl: [(c3qej,
                       label: Text.ParserCombinators.ReadP.eof_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qej: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.eof1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.219862526 UTC

[section ""data" . Text.ParserCombinators.ReadP.satisfy1_closure" {
     Text.ParserCombinators.ReadP.satisfy1_closure:
         const Text.ParserCombinators.ReadP.satisfy1_info;
 },
 sat_s3oAf_entry() //  [R1, R2]
         { info_tbl: [(c3qeB,
                       label: sat_s3oAf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qeB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3qeC; else goto c3qeD;
       c3qeC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qeD: // global
           I64[Sp - 24] = block_c3qev_info;
           _s3oAd::P64 = R2;
           R2 = R2;
           _s3oAc::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s3oAc::P64;
           P64[Sp - 8] = _s3oAd::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qev() //  [R1]
         { info_tbl: [(c3qev,
                       label: block_c3qev_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qev: // global
           if (R1 & 7 == 1) goto c3qey; else goto c3qez;
       c3qey: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qez: // global
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.satisfy1_entry() //  [R2, R3]
         { info_tbl: [(c3qeL,
                       label: Text.ParserCombinators.ReadP.satisfy1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qeL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qeP; else goto c3qeO;
       c3qeP: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.satisfy1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qeO: // global
           I64[Hp - 32] = sat_s3oAf_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.221409768 UTC

[section ""data" . Text.ParserCombinators.ReadP.satisfy_closure" {
     Text.ParserCombinators.ReadP.satisfy_closure:
         const Text.ParserCombinators.ReadP.satisfy_info;
 },
 Text.ParserCombinators.ReadP.satisfy_entry() //  [R2, R3]
         { info_tbl: [(c3qeU,
                       label: Text.ParserCombinators.ReadP.satisfy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qeU: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.satisfy1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.222721692 UTC

[section ""data" . Text.ParserCombinators.ReadP.char1_closure" {
     Text.ParserCombinators.ReadP.char1_closure:
         const Text.ParserCombinators.ReadP.char1_info;
 },
 sat_s3oAo_entry() //  [R1, R2]
         { info_tbl: [(c3qf9,
                       label: sat_s3oAo_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qf9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3qfd; else goto c3qfe;
       c3qfd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qfe: // global
           I64[Sp - 24] = block_c3qf6_info;
           _s3oAh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s3oAh::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3qfr; else goto c3qf7;
       u3qfr: // global
           call _c3qf6(R1) args: 0, res: 0, upd: 0;
       c3qf7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qf6() //  [R1]
         { info_tbl: [(c3qf6,
                       label: block_c3qf6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qf6: // global
           I64[Sp] = block_c3qfc_info;
           _s3oAk::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3oAk::I64;
           if (R1 & 7 != 0) goto u3qfq; else goto c3qfg;
       u3qfq: // global
           call _c3qfc(R1) args: 0, res: 0, upd: 0;
       c3qfg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qfc() //  [R1]
         { info_tbl: [(c3qfc,
                       label: block_c3qfc_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qfc: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c3qfp; else goto c3qfo;
       c3qfp: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3qfo: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.char1_entry() //  [R2, R3]
         { info_tbl: [(c3qft,
                       label: Text.ParserCombinators.ReadP.char1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qft: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qfx; else goto c3qfw;
       c3qfx: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.char1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qfw: // global
           I64[Hp - 32] = sat_s3oAo_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.2244257 UTC

[section ""data" . Text.ParserCombinators.ReadP.char_closure" {
     Text.ParserCombinators.ReadP.char_closure:
         const Text.ParserCombinators.ReadP.char_info;
 },
 Text.ParserCombinators.ReadP.char_entry() //  [R2, R3]
         { info_tbl: [(c3qfC,
                       label: Text.ParserCombinators.ReadP.char_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qfC: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.char1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.226654502 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wstring_closure" {
     Text.ParserCombinators.ReadP.$wstring_closure:
         const Text.ParserCombinators.ReadP.$wstring_info;
 },
 sat_s3oAI_entry() //  [R1]
         { info_tbl: [(c3qgk,
                       label: sat_s3oAI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qgk: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3oAr_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c3qgr,
                       label: scan_s3oAr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qgr: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3qgs; else goto c3qgt;
       c3qgs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qgt: // global
           I64[Sp - 40] = block_c3qfO_info;
           _s3oAr::P64 = R1;
           _s3oAp::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3oAp::P64;
           P64[Sp - 24] = _s3oAr::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3qgP; else goto c3qfP;
       u3qgP: // global
           call _c3qfO(R1) args: 0, res: 0, upd: 0;
       c3qfP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qfO() //  [R1]
         { info_tbl: [(c3qfO,
                       label: block_c3qfO_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qfO: // global
           if (R1 & 7 == 1) goto c3qgo; else goto c3qgp;
       c3qgo: // global
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3qgp: // global
           I64[Sp] = block_c3qfU_info;
           _s3oAw::P64 = P64[R1 + 6];
           _s3oAx::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 8] = _s3oAx::P64;
           P64[Sp + 24] = _s3oAw::P64;
           if (R1 & 7 != 0) goto u3qgM; else goto c3qfV;
       u3qgM: // global
           call _c3qfU(R1) args: 0, res: 0, upd: 0;
       c3qfV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qfU() //  [R1]
         { info_tbl: [(c3qfU,
                       label: block_c3qfU_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qfU: // global
           if (R1 & 7 == 1) goto c3qgA; else goto c3qgC;
       c3qgA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qgC: // global
           I64[Sp - 8] = block_c3qg0_info;
           _s3oAz::P64 = P64[R1 + 6];
           _s3oAA::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _s3oAA::P64;
           P64[Sp + 24] = _s3oAz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qgN; else goto c3qg1;
       u3qgN: // global
           call _c3qg0(R1) args: 0, res: 0, upd: 0;
       c3qg1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qg0() //  [R1]
         { info_tbl: [(c3qg0,
                       label: block_c3qg0_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qg0: // global
           I64[Sp] = block_c3qg5_info;
           _s3oAC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3oAC::I64;
           if (R1 & 7 != 0) goto u3qgO; else goto c3qg6;
       u3qgO: // global
           call _c3qg5(R1) args: 0, res: 0, upd: 0;
       c3qg6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qg5() //  [R1]
         { info_tbl: [(c3qg5,
                       label: block_c3qg5_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qg5: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3qgG; else goto c3qgF;
       c3qgG: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qgF: // global
           if (I64[Sp + 32] == I64[R1 + 7]) goto c3qgK; else goto c3qgI;
       c3qgK: // global
           I64[Hp - 72] = stg_ap_4_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 40];
           I64[Hp - 24] = sat_s3oAI_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qgI: // global
           Hp = Hp - 80;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oAK_entry() //  [R1, R2]
         { info_tbl: [(c3qgV,
                       label: sat_s3oAK_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qgV: // global
           R4 = P64[R1 + 15];
           R3 = R2;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 23];
           call scan_s3oAr_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wstring_entry() //  [R2, R3]
         { info_tbl: [(c3qgY,
                       label: Text.ParserCombinators.ReadP.$wstring_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qgY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qh2; else goto c3qh1;
       c3qh2: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wstring_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qh1: // global
           I64[Hp - 40] = scan_s3oAr_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3oAK_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 37;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.23022419 UTC

[section ""data" . Text.ParserCombinators.ReadP.string1_closure" {
     Text.ParserCombinators.ReadP.string1_closure:
         const Text.ParserCombinators.ReadP.string1_info;
 },
 Text.ParserCombinators.ReadP.string1_entry() //  [R2, R3]
         { info_tbl: [(c3qha,
                       label: Text.ParserCombinators.ReadP.string1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qha: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3qhb; else goto c3qhc;
       c3qhb: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.string1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qhc: // global
           I64[Sp - 8] = block_c3qh7_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3qh7() //  [R1]
         { info_tbl: [(c3qh7,
                       label: block_c3qh7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qh7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qhf; else goto c3qhe;
       c3qhf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qhe: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.232750614 UTC

[section ""data" . Text.ParserCombinators.ReadP.string_closure" {
     Text.ParserCombinators.ReadP.string_closure:
         const Text.ParserCombinators.ReadP.string_info;
 },
 Text.ParserCombinators.ReadP.string_entry() //  [R2, R3]
         { info_tbl: [(c3qhk,
                       label: Text.ParserCombinators.ReadP.string_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qhk: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.string1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.23498014 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wmunch_closure" {
     Text.ParserCombinators.ReadP.$wmunch_closure:
         const Text.ParserCombinators.ReadP.$wmunch_info;
 },
 sat_s3oB1_entry() //  [R1, R2]
         { info_tbl: [(c3qhR,
                       label: sat_s3oB1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qhR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qhV; else goto c3qhU;
       c3qhV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qhU: // global
           _s3oAT::P64 = P64[R1 + 7];
           _s3oAV::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oAV::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oAT::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oAY_entry() //  [R1]
         { info_tbl: [(c3qhW,
                       label: lvl4_s3oAY_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qhW: // global
           _s3oAY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qhX; else goto c3qhY;
       c3qhY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qi0; else goto c3qhZ;
       c3qi0: // global
           HpAlloc = 24;
           goto c3qhX;
       c3qhX: // global
           R1 = _s3oAY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qhZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3oAY::P64;
           _s3oAR::P64 = P64[_s3oAY::P64 + 16];
           _s3oAT::P64 = P64[_s3oAY::P64 + 24];
           _s3oAV::P64 = P64[_s3oAY::P64 + 32];
           _s3oAW::P64 = P64[_s3oAY::P64 + 40];
           I64[Hp - 16] = sat_s3oB1_info;
           P64[Hp - 8] = _s3oAT::P64;
           P64[Hp] = _s3oAV::P64;
           R3 = Hp - 15;
           R2 = _s3oAW::P64;
           R1 = _s3oAR::P64;
           Sp = Sp - 16;
           call scan_s3oAR_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oB3_entry() //  [R1]
         { info_tbl: [(c3qi6,
                       label: sat_s3oB3_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qi6: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3oAR_entry() //  [R1, R2, R3]
         { info_tbl: [(c3qid,
                       label: scan_s3oAR_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qid: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3qie; else goto c3qif;
       c3qie: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qif: // global
           I64[Sp - 32] = block_c3qhw_info;
           _s3oAR::P64 = R1;
           _s3oAP::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 24] = _s3oAP::P64;
           P64[Sp - 16] = _s3oAR::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3qix; else goto c3qhx;
       u3qix: // global
           call _c3qhw(R1) args: 0, res: 0, upd: 0;
       c3qhx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qhw() //  [R1]
         { info_tbl: [(c3qhw,
                       label: block_c3qhw_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qhw: // global
           if (R1 & 7 == 1) goto u3qit; else goto c3qib;
       u3qit: // global
           Sp = Sp + 24;
           call _c3qim() args: 0, res: 0, upd: 0;
       c3qib: // global
           I64[Sp - 8] = block_c3qhC_info;
           _s3oAV::P64 = P64[R1 + 6];
           R2 = _s3oAV::P64;
           _s3oAW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s3oAW::P64;
           P64[Sp + 8] = _s3oAV::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qhC() //  [R1]
         { info_tbl: [(c3qhC,
                       label: block_c3qhC_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qhC: // global
           if (R1 & 7 == 1) goto u3qiu; else goto c3qio;
       u3qiu: // global
           Sp = Sp + 32;
           call _c3qim() args: 0, res: 0, upd: 0;
       c3qio: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3qir; else goto c3qiq;
       c3qir: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qiq: // global
           I64[Hp - 72] = lvl4_s3oAY_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = sat_s3oB3_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3qim() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qim: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oB5_entry() //  [R1, R2]
         { info_tbl: [(c3qiD,
                       label: sat_s3oB5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qiD: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 15];
           call scan_s3oAR_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wmunch_entry() //  [R2, R3]
         { info_tbl: [(c3qiG,
                       label: Text.ParserCombinators.ReadP.$wmunch_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qiG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qiK; else goto c3qiJ;
       c3qiK: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wmunch_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qiJ: // global
           I64[Hp - 32] = scan_s3oAR_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3oB5_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 30;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.238843204 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch2_closure" {
     Text.ParserCombinators.ReadP.munch2_closure:
         const Text.ParserCombinators.ReadP.munch2_info;
 },
 Text.ParserCombinators.ReadP.munch2_entry() //  [R2, R3]
         { info_tbl: [(c3qiS,
                       label: Text.ParserCombinators.ReadP.munch2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qiS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3qiT; else goto c3qiU;
       c3qiT: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.munch2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qiU: // global
           I64[Sp - 8] = block_c3qiP_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3qiP() //  [R1]
         { info_tbl: [(c3qiP,
                       label: block_c3qiP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qiP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qiX; else goto c3qiW;
       c3qiX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qiW: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.240046498 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch_closure" {
     Text.ParserCombinators.ReadP.munch_closure:
         const Text.ParserCombinators.ReadP.munch_info;
 },
 Text.ParserCombinators.ReadP.munch_entry() //  [R2, R3]
         { info_tbl: [(c3qj2,
                       label: Text.ParserCombinators.ReadP.munch_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qj2: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.munch2_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.241611011 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wmunch1_closure" {
     Text.ParserCombinators.ReadP.$wmunch1_closure:
         const Text.ParserCombinators.ReadP.$wmunch1_info;
 },
 sat_s3oBg_entry() //  [R1, R2]
         { info_tbl: [(c3qjp,
                       label: sat_s3oBg_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qjp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qjt; else goto c3qjs;
       c3qjt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qjs: // global
           _s3oBb::P64 = P64[R1 + 7];
           _s3oBc::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oBc::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oBb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oBj_entry() //  [R1, R2]
         { info_tbl: [(c3qjy,
                       label: sat_s3oBj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qjy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3qjz; else goto c3qjA;
       c3qjz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qjA: // global
           I64[Sp - 32] = block_c3qje_info;
           _s3oBc::P64 = R2;
           R2 = R2;
           _s3oBa::P64 = P64[R1 + 7];
           _s3oBb::P64 = P64[R1 + 15];
           R1 = _s3oBa::P64;
           P64[Sp - 24] = _s3oBa::P64;
           P64[Sp - 16] = _s3oBb::P64;
           P64[Sp - 8] = _s3oBc::P64;
           Sp = Sp - 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qje() //  [R1]
         { info_tbl: [(c3qje,
                       label: block_c3qje_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qje: // global
           if (R1 & 7 == 1) goto c3qjv; else goto c3qjw;
       c3qjv: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qjw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qjI; else goto c3qjH;
       c3qjI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qjH: // global
           I64[Hp - 16] = sat_s3oBg_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_c3qjD_info;
           R3 = Hp - 15;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3qjD() //  [R1]
         { info_tbl: [(c3qjD,
                       label: block_c3qjD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qjD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qjL; else goto c3qjK;
       c3qjL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qjK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wmunch1_entry() //  [R2, R3]
         { info_tbl: [(c3qjM,
                       label: Text.ParserCombinators.ReadP.$wmunch1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qjM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qjQ; else goto c3qjP;
       c3qjQ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wmunch1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qjP: // global
           I64[Hp - 16] = sat_s3oBj_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.243869248 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch3_closure" {
     Text.ParserCombinators.ReadP.munch3_closure:
         const Text.ParserCombinators.ReadP.munch3_info;
 },
 Text.ParserCombinators.ReadP.munch3_entry() //  [R2, R3]
         { info_tbl: [(c3qjY,
                       label: Text.ParserCombinators.ReadP.munch3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qjY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3qjZ; else goto c3qk0;
       c3qjZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.munch3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qk0: // global
           I64[Sp - 8] = block_c3qjV_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch1_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3qjV() //  [R1]
         { info_tbl: [(c3qjV,
                       label: block_c3qjV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qjV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qk3; else goto c3qk2;
       c3qk3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qk2: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.244995936 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch1_closure" {
     Text.ParserCombinators.ReadP.munch1_closure:
         const Text.ParserCombinators.ReadP.munch1_info;
 },
 Text.ParserCombinators.ReadP.munch1_entry() //  [R2, R3]
         { info_tbl: [(c3qk8,
                       label: Text.ParserCombinators.ReadP.munch1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qk8: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.munch3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.247554042 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces2_closure" {
     Text.ParserCombinators.ReadP.skipSpaces2_closure:
         const Text.ParserCombinators.ReadP.skipSpaces2_info;
 },
 lvl4_s3oBE_entry() //  [R1]
         { info_tbl: [(c3qkK,
                       label: lvl4_s3oBE_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qkK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qkL; else goto c3qkM;
       c3qkL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qkM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oBG_entry() //  [R1]
         { info_tbl: [(c3qkS,
                       label: sat_s3oBG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qkS: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oBL_entry() //  [R1]
         { info_tbl: [(c3qlb,
                       label: lvl4_s3oBL_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qlb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qlc; else goto c3qld;
       c3qlc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qld: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oBN_entry() //  [R1]
         { info_tbl: [(c3qlj,
                       label: sat_s3oBN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qlj: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oBO_entry() //  [R1]
         { info_tbl: [(c3qlr,
                       label: lvl4_s3oBO_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qlr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qls; else goto c3qlt;
       c3qls: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qlt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oBQ_entry() //  [R1]
         { info_tbl: [(c3qlz,
                       label: sat_s3oBQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qlz: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oBR_entry() //  [R1]
         { info_tbl: [(c3qlH,
                       label: lvl4_s3oBR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qlH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qlI; else goto c3qlJ;
       c3qlI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qlJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oBT_entry() //  [R1]
         { info_tbl: [(c3qlP,
                       label: sat_s3oBT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qlP: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipSpaces2_entry() //  [R2, R3]
         { info_tbl: [(c3qlW,
                       label: Text.ParserCombinators.ReadP.skipSpaces2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qlW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3qlX; else goto c3qlY;
       c3qlX: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipSpaces2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qlY: // global
           I64[Sp - 16] = block_c3qkf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qmp; else goto c3qkg;
       u3qmp: // global
           call _c3qkf(R1) args: 0, res: 0, upd: 0;
       c3qkg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qkf() //  [R1]
         { info_tbl: [(c3qkf,
                       label: block_c3qkf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qkf: // global
           if (R1 & 7 == 1) goto c3qlT; else goto c3qlU;
       c3qlT: // global
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3qlU: // global
           I64[Sp - 8] = block_c3qkl_info;
           _s3oBs::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3oBs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qmo; else goto c3qkm;
       u3qmo: // global
           call _c3qkl(R1) args: 0, res: 0, upd: 0;
       c3qkm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qkl() //  [R1]
         { info_tbl: [(c3qkl,
                       label: block_c3qkl_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qkl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3qm4; else goto c3qm3;
       c3qm4: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qm3: // global
           _s3oBp::P64 = P64[Sp + 16];
           _s3oBs::P64 = P64[Sp + 8];
           _s3oBu::I64 = I64[R1 + 7];
           if (_s3oBu::I64 > 887) goto c3qma; else goto c3qmn;
       c3qma: // global
           (_s3oBC::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(_s3oBu::I64);
           if (_s3oBC::I64 == 0) goto c3qmc; else goto c3qm7;
       c3qm7: // global
           I64[Hp - 56] = lvl4_s3oBE_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBG_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qmn: // global
           if (_s3oBu::I64 == 32) goto c3qmm; else goto c3qmk;
       c3qmm: // global
           I64[Hp - 56] = lvl4_s3oBR_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBT_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qmk: // global
           if ((_s3oBu::I64 + -9) > 4) goto c3qmg; else goto c3qmi;
       c3qmg: // global
           if (_s3oBu::I64 != 160) goto c3qmc; else goto c3qme;
       c3qmc: // global
           Hp = Hp - 64;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s3oBp::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3qme: // global
           I64[Hp - 56] = lvl4_s3oBL_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBN_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qmi: // global
           I64[Hp - 56] = lvl4_s3oBO_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBQ_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.252028741 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces1_closure" {
     Text.ParserCombinators.ReadP.skipSpaces1_closure:
         const Text.ParserCombinators.ReadP.skipSpaces1_info;
 },
 sat_s3oBW_entry() //  [R1, R2]
         { info_tbl: [(c3qmz,
                       label: sat_s3oBW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qmz: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipSpaces1_entry() //  [R2]
         { info_tbl: [(c3qmD,
                       label: Text.ParserCombinators.ReadP.skipSpaces1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qmD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qmH; else goto c3qmG;
       c3qmH: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipSpaces1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qmG: // global
           I64[Hp - 24] = sat_s3oBW_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.253214336 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces_closure" {
     Text.ParserCombinators.ReadP.skipSpaces_closure:
         const Text.ParserCombinators.ReadP.skipSpaces_info;
 },
 Text.ParserCombinators.ReadP.skipSpaces_entry() //  [R2]
         { info_tbl: [(c3qmM,
                       label: Text.ParserCombinators.ReadP.skipSpaces_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qmM: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.254171169 UTC

[section ""data" . Text.ParserCombinators.ReadP.Get_closure" {
     Text.ParserCombinators.ReadP.Get_closure:
         const Text.ParserCombinators.ReadP.Get_info;
 },
 Text.ParserCombinators.ReadP.Get_entry() //  [R2]
         { info_tbl: [(c3qmU,
                       label: Text.ParserCombinators.ReadP.Get_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qmU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qmY; else goto c3qmX;
       c3qmY: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Get_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qmX: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.25522397 UTC

[section ""data" . Text.ParserCombinators.ReadP.Look_closure" {
     Text.ParserCombinators.ReadP.Look_closure:
         const Text.ParserCombinators.ReadP.Look_info;
 },
 Text.ParserCombinators.ReadP.Look_entry() //  [R2]
         { info_tbl: [(c3qn4,
                       label: Text.ParserCombinators.ReadP.Look_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qn4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qn8; else goto c3qn7;
       c3qn8: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Look_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qn7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.257028433 UTC

[section ""data" . Text.ParserCombinators.ReadP.Fail_closure" {
     Text.ParserCombinators.ReadP.Fail_closure:
         const Text.ParserCombinators.ReadP.Fail_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.257864189 UTC

[section ""data" . Text.ParserCombinators.ReadP.Result_closure" {
     Text.ParserCombinators.ReadP.Result_closure:
         const Text.ParserCombinators.ReadP.Result_info;
 },
 Text.ParserCombinators.ReadP.Result_entry() //  [R2, R3]
         { info_tbl: [(c3qne,
                       label: Text.ParserCombinators.ReadP.Result_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qne: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qni; else goto c3qnh;
       c3qni: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Result_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qnh: // global
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.258853472 UTC

[section ""data" . Text.ParserCombinators.ReadP.Final_closure" {
     Text.ParserCombinators.ReadP.Final_closure:
         const Text.ParserCombinators.ReadP.Final_info;
 },
 Text.ParserCombinators.ReadP.Final_entry() //  [R2]
         { info_tbl: [(c3qno,
                       label: Text.ParserCombinators.ReadP.Final_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qno: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qns; else goto c3qnr;
       c3qns: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Final_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qnr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.25971356 UTC

[Text.ParserCombinators.ReadP.Get_con_entry() //  [R1]
         { info_tbl: [(c3qnt,
                       label: Text.ParserCombinators.ReadP.Get_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,71,101,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qnt: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.260453234 UTC

[Text.ParserCombinators.ReadP.Look_con_entry() //  [R1]
         { info_tbl: [(c3qnv,
                       label: Text.ParserCombinators.ReadP.Look_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,76,111,111,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qnv: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.261189437 UTC

[Text.ParserCombinators.ReadP.Fail_con_entry() //  [R1]
         { info_tbl: [(c3qnx,
                       label: Text.ParserCombinators.ReadP.Fail_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,70,97,105,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qnx: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.262004494 UTC

[Text.ParserCombinators.ReadP.Result_con_entry() //  [R1]
         { info_tbl: [(c3qnz,
                       label: Text.ParserCombinators.ReadP.Result_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,82,101,115,117,108,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qnz: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.262737545 UTC

[Text.ParserCombinators.ReadP.Final_con_entry() //  [R1]
         { info_tbl: [(c3qnB,
                       label: Text.ParserCombinators.ReadP.Final_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,70,105,110,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qnB: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.263439252 UTC

[section ""relreadonly" . S3oJX_srt" {
     S3oJX_srt:
         const Control.Exception.Base.patError_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const lvl1_r3oqF_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure;
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure;
         const Text.ParserCombinators.ReadP.choice_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const lvl3_r3oqH_closure;
         const Text.ParserCombinators.ReadP.gather1_closure;
         const Text.ParserCombinators.ReadP.option1_closure;
         const Text.ParserCombinators.ReadP.optional1_closure;
         const Text.ParserCombinators.ReadP.endBy3_closure;
         const Text.ParserCombinators.ReadP.many2_closure;
         const Text.ParserCombinators.ReadP.endBy4_closure;
         const Text.ParserCombinators.ReadP.skipMany2_closure;
         const Text.ParserCombinators.ReadP.skipMany3_closure;
         const Text.ParserCombinators.ReadP.sepBy3_closure;
         const Text.ParserCombinators.ReadP.endBy2_closure;
         const Text.ParserCombinators.ReadP.sepBy2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure;
         const Text.ParserCombinators.ReadP.chainr3_closure;
         const Text.ParserCombinators.ReadP.chainr2_closure;
         const Text.ParserCombinators.ReadP.chainl3_closure;
         const Text.ParserCombinators.ReadP.chainl2_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const Text.ParserCombinators.ReadP.<++1_closure;
         const Text.ParserCombinators.ReadP.manyTill1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.264483657 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:58:01.266156914 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_entry() //  [R2]
         { info_tbl: [(c3qnI,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qnI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qnM; else goto c3qnL;
       c3qnM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qnL: // global
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.270306524 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure:
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info;
 },
 Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_entry() //  []
         { info_tbl: [(c3qnW,
                       label: Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qnW: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.27430813 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP2_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP2_closure:
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_info;
 },
 sat_s3or2_entry() //  [R1, R2]
         { info_tbl: [(c3qod,
                       label: sat_s3or2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qod: // global
           R4 = R2;
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fFunctorReadP2_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(c3qog,
                       label: Text.ParserCombinators.ReadP.$fFunctorReadP2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qog: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qok; else goto c3qoj;
       c3qok: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fFunctorReadP2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qoj: // global
           I64[Hp - 16] = sat_s3or2_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 15;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.282705406 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP1_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP1_closure:
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_info;
 },
 sat_s3or8_entry() //  [R1]
         { info_tbl: [(c3qoC,
                       label: sat_s3or8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qoC: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fFunctorReadP1_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(c3qoF,
                       label: Text.ParserCombinators.ReadP.$fFunctorReadP1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qoF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qoJ; else goto c3qoI;
       c3qoJ: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fFunctorReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qoI: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3or8_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.288299818 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_closure+3;
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.290826219 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_info;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP5_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3qoZ,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qoZ: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.294435166 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure:
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_info;
 },
 Text.ParserCombinators.ReadP.$fMonadFailReadP1_entry() //  []
         { info_tbl: [(c3qpa,
                       label: Text.ParserCombinators.ReadP.$fMonadFailReadP1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qpa: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.298792603 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP1_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP1_closure:
         const Text.ParserCombinators.ReadP.$fMonadReadP1_info;
 },
 sat_s3orh_entry() //  [R1, R2]
         { info_tbl: [(c3qpr,
                       label: sat_s3orh_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qpr: // global
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fMonadReadP1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3qpu,
                       label: Text.ParserCombinators.ReadP.$fMonadReadP1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qpu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qpy; else goto c3qpx;
       c3qpy: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fMonadReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qpx: // global
           I64[Hp - 16] = sat_s3orh_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3ord::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ord::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.3065861 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info;
 },
 sat_s3oro_entry() //  [R1, R2]
         { info_tbl: [(c3qpW,
                       label: sat_s3oro_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qpW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qpX; else goto c3qpY;
       c3qpX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qpY: // global
           I64[Sp - 16] = block_c3qpU_info;
           R2 = R2;
           _s3ori::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3ori::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qpU() //  [R1]
         { info_tbl: [(c3qpU,
                       label: block_c3qpU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qpU: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ors_entry() //  [R1, R2]
         { info_tbl: [(c3qqb,
                       label: sat_s3ors_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qqb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qqc; else goto c3qqd;
       c3qqc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qqd: // global
           I64[Sp - 16] = block_c3qq9_info;
           R2 = R2;
           _s3ori::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3ori::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qq9() //  [R1]
         { info_tbl: [(c3qq9,
                       label: block_c3qq9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qq9: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orw_entry() //  [R1]
         { info_tbl: [(c3qqo,
                       label: sat_s3orw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qqo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qqp; else goto c3qqq;
       c3qqp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qqq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3orD_entry() //  [R1, R2]
         { info_tbl: [(c3qqF,
                       label: sat_s3orD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qqF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qqK; else goto c3qqL;
       c3qqK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qqL: // global
           I64[Sp - 16] = block_c3qqC_info;
           _s3ori::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3ori::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qqP; else goto c3qqD;
       u3qqP: // global
           call _c3qqC(R1) args: 0, res: 0, upd: 0;
       c3qqD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qqC() //  [R1]
         { info_tbl: [(c3qqC,
                       label: block_c3qqC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qqC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qqO; else goto c3qqN;
       c3qqO: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qqN: // global
           _s3orA::P64 = P64[R1 + 7];
           _s3orB::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s3orA::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _s3orB::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orE_entry() //  [R1]
         { info_tbl: [(c3qqQ,
                       label: sat_s3orE_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qqQ: // global
           _s3orE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qqR; else goto c3qqS;
       c3qqS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qqU; else goto c3qqT;
       c3qqU: // global
           HpAlloc = 16;
           goto c3qqR;
       c3qqR: // global
           R1 = _s3orE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qqT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3orE::P64;
           _s3ori::P64 = P64[_s3orE::P64 + 16];
           _s3orx::P64 = P64[_s3orE::P64 + 24];
           I64[Hp - 8] = sat_s3orD_info;
           P64[Hp] = _s3ori::P64;
           R3 = _s3orx::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry() //  [R2,
                                                                 R3]
         { info_tbl: [(c3qr2,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qr2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qr3; else goto c3qr4;
       c3qr3: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qr4: // global
           I64[Sp - 16] = block_c3qpK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qrr; else goto c3qpL;
       u3qrr: // global
           call _c3qpK(R1) args: 0, res: 0, upd: 0;
       c3qpL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qpK() //  [R1]
         { info_tbl: [(c3qpK,
                       label: block_c3qpK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qpK: // global
           _s3ori::P64 = P64[Sp + 8];
           _c3qr1::P64 = R1 & 7;
           if (_c3qr1::P64 < 4) goto u3qro; else goto u3qrq;
       u3qro: // global
           if (_c3qr1::P64 < 3) goto u3qrp; else goto c3qqY;
       u3qrp: // global
           if (_c3qr1::P64 < 2) goto c3qqW; else goto c3qqX;
       c3qqW: // global
           Hp = Hp + 40;
           _s3ork::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qrc; else goto c3qr7;
       c3qr7: // global
           _s3orl::P64 = P64[_s3ork::P64 + 7];
           I64[Hp - 32] = sat_s3oro_info;
           P64[Hp - 24] = _s3ori::P64;
           P64[Hp - 16] = _s3orl::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qqX: // global
           Hp = Hp + 40;
           _s3ork::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qrc; else goto c3qrb;
       c3qrc: // global
           HpAlloc = 40;
           R1 = _s3ork::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qrb: // global
           _s3orp::P64 = P64[_s3ork::P64 + 6];
           I64[Hp - 32] = sat_s3ors_info;
           P64[Hp - 24] = _s3ori::P64;
           P64[Hp - 16] = _s3orp::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qqY: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qrq: // global
           if (_c3qr1::P64 < 5) goto c3qqZ; else goto c3qr0;
       c3qqZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3qrj; else goto c3qri;
       c3qrj: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qri: // global
           _s3ort::P64 = P64[R1 + 4];
           _s3oru::P64 = P64[R1 + 12];
           I64[Hp - 80] = sat_s3orw_info;
           P64[Hp - 64] = _s3ori::P64;
           P64[Hp - 56] = _s3oru::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ori::P64;
           P64[Hp - 24] = _s3ort::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qr0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qrn; else goto c3qrm;
       c3qrn: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qrm: // global
           _s3orx::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3orE_info;
           P64[Hp - 24] = _s3ori::P64;
           P64[Hp - 16] = _s3orx::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.332505483 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info;
 },
 sat_s3orL_entry() //  [R1, R2]
         { info_tbl: [(c3qsz,
                       label: sat_s3orL_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qsz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qsA; else goto c3qsB;
       c3qsA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qsB: // global
           I64[Sp - 16] = block_c3qsx_info;
           R2 = R2;
           _s3orF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3orF::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qsx() //  [R1]
         { info_tbl: [(c3qsx,
                       label: block_c3qsx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qsx: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orP_entry() //  [R1, R2]
         { info_tbl: [(c3qsO,
                       label: sat_s3orP_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qsO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qsP; else goto c3qsQ;
       c3qsP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qsQ: // global
           I64[Sp - 16] = block_c3qsM_info;
           R2 = R2;
           _s3orF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3orF::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qsM() //  [R1]
         { info_tbl: [(c3qsM,
                       label: block_c3qsM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qsM: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orS_entry() //  [R1]
         { info_tbl: [(c3qt1,
                       label: sat_s3orS_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qt1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qt2; else goto c3qt3;
       c3qt2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qt3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3orY_entry() //  [R1, R2]
         { info_tbl: [(c3qti,
                       label: sat_s3orY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qti: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qtm; else goto c3qtn;
       c3qtm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qtn: // global
           I64[Sp - 16] = block_c3qtf_info;
           _s3orF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3orF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qtr; else goto c3qtg;
       u3qtr: // global
           call _c3qtf(R1) args: 0, res: 0, upd: 0;
       c3qtg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qtf() //  [R1]
         { info_tbl: [(c3qtf,
                       label: block_c3qtf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qtf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qtq; else goto c3qtp;
       c3qtq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qtp: // global
           _s3orX::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s3orX::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3orZ_entry() //  [R1]
         { info_tbl: [(c3qts,
                       label: sat_s3orZ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qts: // global
           _s3orZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qtt; else goto c3qtu;
       c3qtu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qtw; else goto c3qtv;
       c3qtw: // global
           HpAlloc = 16;
           goto c3qtt;
       c3qtt: // global
           R1 = _s3orZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qtv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3orZ::P64;
           _s3orF::P64 = P64[_s3orZ::P64 + 16];
           _s3orT::P64 = P64[_s3orZ::P64 + 24];
           I64[Hp - 8] = sat_s3orY_info;
           P64[Hp] = _s3orF::P64;
           R3 = _s3orT::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3qtE,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qtE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qtF; else goto c3qtG;
       c3qtF: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qtG: // global
           I64[Sp - 16] = block_c3qsn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qu2; else goto c3qso;
       u3qu2: // global
           call _c3qsn(R1) args: 0, res: 0, upd: 0;
       c3qso: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qsn() //  [R1]
         { info_tbl: [(c3qsn,
                       label: block_c3qsn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qsn: // global
           _s3orF::P64 = P64[Sp + 8];
           _c3qtD::P64 = R1 & 7;
           if (_c3qtD::P64 < 4) goto u3qtZ; else goto u3qu1;
       u3qtZ: // global
           if (_c3qtD::P64 < 3) goto u3qu0; else goto c3qtA;
       u3qu0: // global
           if (_c3qtD::P64 < 2) goto c3qty; else goto c3qtz;
       c3qty: // global
           Hp = Hp + 40;
           _s3orH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qtO; else goto c3qtJ;
       c3qtJ: // global
           _s3orI::P64 = P64[_s3orH::P64 + 7];
           I64[Hp - 32] = sat_s3orL_info;
           P64[Hp - 24] = _s3orF::P64;
           P64[Hp - 16] = _s3orI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qtz: // global
           Hp = Hp + 40;
           _s3orH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qtO; else goto c3qtN;
       c3qtO: // global
           HpAlloc = 40;
           R1 = _s3orH::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qtN: // global
           _s3orM::P64 = P64[_s3orH::P64 + 6];
           I64[Hp - 32] = sat_s3orP_info;
           P64[Hp - 24] = _s3orF::P64;
           P64[Hp - 16] = _s3orM::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qtA: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qu1: // global
           if (_c3qtD::P64 < 5) goto c3qtB; else goto c3qtC;
       c3qtB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qtU; else goto c3qtT;
       c3qtU: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qtT: // global
           _s3orR::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3orS_info;
           P64[Hp - 32] = _s3orF::P64;
           P64[Hp - 24] = _s3orR::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3orF::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qtC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qtY; else goto c3qtX;
       c3qtY: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qtX: // global
           _s3orT::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3orZ_info;
           P64[Hp - 24] = _s3orF::P64;
           P64[Hp - 16] = _s3orT::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.363546842 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorP_closure" {
     Text.ParserCombinators.ReadP.$fFunctorP_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.368020508 UTC

[section ""data" . Text.ParserCombinators.ReadP.run_closure" {
     Text.ParserCombinators.ReadP.run_closure:
         const Text.ParserCombinators.ReadP.run_info;
 },
 sat_s3osd_entry() //  [R1]
         { info_tbl: [(c3qv9,
                       label: sat_s3osd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qv9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qva; else goto c3qvb;
       c3qva: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qvb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.run_entry() //  [R2, R3]
         { info_tbl: [(c3qvj,
                       label: Text.ParserCombinators.ReadP.run_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qvj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qvk; else goto u3qw0;
       c3qvk: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.run_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u3qw0: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c3quU() args: 0, res: 0, upd: 0;
     }
 },
 _c3quU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3quU: // global
           _s3os0::P64 = P64[Sp];
           I64[Sp] = block_c3quX_info;
           R1 = _s3os0::P64;
           if (R1 & 7 != 0) goto u3qw5; else goto c3quY;
       u3qw5: // global
           call _c3quX(R1) args: 0, res: 0, upd: 0;
       c3quY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3quX() //  [R1]
         { info_tbl: [(c3quX,
                       label: block_c3quX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3quX: // global
           _s3os1::P64 = P64[Sp + 8];
           _c3qvi::P64 = R1 & 7;
           if (_c3qvi::P64 < 4) goto u3qvX; else goto u3qvZ;
       u3qvX: // global
           if (_c3qvi::P64 < 3) goto u3qvY; else goto u3qw1;
       u3qvY: // global
           if (_c3qvi::P64 < 2) goto c3qvd; else goto c3qve;
       c3qvd: // global
           I64[Sp] = block_c3qvn_info;
           _s3os3::P64 = P64[R1 + 7];
           R1 = _s3os1::P64;
           P64[Sp + 8] = _s3os3::P64;
           if (R1 & 7 != 0) goto u3qw6; else goto c3qvp;
       u3qw6: // global
           call _c3qvn(R1) args: 0, res: 0, upd: 0;
       c3qvp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3qve: // global
           I64[Sp] = block_c3qvG_info;
           R2 = _s3os1::P64;
           R1 = P64[R1 + 6];
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3qw1: // global
           Sp = Sp + 16;
           call _c3qvf() args: 0, res: 0, upd: 0;
       u3qvZ: // global
           if (_c3qvi::P64 < 5) goto c3qvg; else goto c3qvh;
       c3qvg: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3qvS; else goto c3qvR;
       c3qvS: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qvR: // global
           _s3osa::P64 = P64[R1 + 4];
           _s3osb::P64 = P64[R1 + 12];
           I64[Hp - 72] = sat_s3osd_info;
           P64[Hp - 56] = _s3os1::P64;
           P64[Hp - 48] = _s3osb::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s3osa::P64;
           P64[Hp - 24] = _s3os1::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qvh: // global
           R1 = P64[R1 + 3] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3qvn() //  [R1]
         { info_tbl: [(c3qvn,
                       label: block_c3qvn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qvn: // global
           if (R1 & 7 == 1) goto u3qw2; else goto c3qvA;
       u3qw2: // global
           Sp = Sp + 16;
           call _c3qvf() args: 0, res: 0, upd: 0;
       c3qvA: // global
           I64[Sp] = block_c3qvy_info;
           R2 = P64[R1 + 6];
           _s3os6::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3os6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qvy() //  [R1]
         { info_tbl: [(c3qvy,
                       label: block_c3qvy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qvy: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c3quU() args: 0, res: 0, upd: 0;
     }
 },
 _c3qvG() //  [R1]
         { info_tbl: [(c3qvG,
                       label: block_c3qvG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qvG: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c3quU() args: 0, res: 0, upd: 0;
     }
 },
 _c3qvf() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qvf: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.389565648 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wreadS_to_P_closure" {
     Text.ParserCombinators.ReadP.$wreadS_to_P_closure:
         const Text.ParserCombinators.ReadP.$wreadS_to_P_info;
 },
 sat_s3osr_entry() //  [R1]
         { info_tbl: [(c3qxc,
                       label: sat_s3osr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qxc: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_s3osh_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 go_s3osh_entry() //  [R1, R2]
         { info_tbl: [(c3qxj,
                       label: go_s3osh_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qxj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3qxk; else goto c3qxl;
       c3qxk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qxl: // global
           I64[Sp - 24] = block_c3qwX_info;
           _s3osh::P64 = R1;
           _s3osg::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3osg::P64;
           P64[Sp - 8] = _s3osh::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3qxD; else goto c3qwY;
       u3qxD: // global
           call _c3qwX(R1) args: 0, res: 0, upd: 0;
       c3qwY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qwX() //  [R1]
         { info_tbl: [(c3qwX,
                       label: block_c3qwX_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qwX: // global
           if (R1 & 7 == 1) goto c3qxg; else goto c3qxh;
       c3qxg: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qxh: // global
           I64[Sp - 8] = block_c3qx3_info;
           _s3osl::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3osl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qxC; else goto c3qx4;
       u3qxC: // global
           call _c3qx3(R1) args: 0, res: 0, upd: 0;
       c3qx4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qx3() //  [R1]
         { info_tbl: [(c3qx3,
                       label: block_c3qx3_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qx3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qxw; else goto c3qxv;
       c3qxw: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qxv: // global
           _s3osn::P64 = P64[R1 + 7];
           _s3oso::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3osr_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3qxo_info;
           R2 = _s3osn::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3oso::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qxo() //  [R1]
         { info_tbl: [(c3qxo,
                       label: block_c3qxo_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qxo: // global
           _s3oso::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3qxs_info;
           R3 = _s3oso::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3qxs() //  [R1]
         { info_tbl: [(c3qxs,
                       label: block_c3qxs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qxs: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3osx_entry() //  [R1, R2]
         { info_tbl: [(c3qxL,
                       label: sat_s3osx_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qxL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qxM; else goto c3qxN;
       c3qxM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qxN: // global
           I64[Sp - 16] = block_c3qxJ_info;
           R2 = R2;
           _s3osh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3osh::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qxJ() //  [R1]
         { info_tbl: [(c3qxJ,
                       label: block_c3qxJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qxJ: // global
           _s3osh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3qxQ_info;
           R2 = R1;
           R1 = _s3osh::P64;
           Sp = Sp + 8;
           call go_s3osh_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qxQ() //  [R1]
         { info_tbl: [(c3qxQ,
                       label: block_c3qxQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qxQ: // global
           if (R1 & 7 == 1) goto c3qxX; else goto c3qy1;
       c3qxX: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qy1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qy4; else goto c3qy3;
       c3qy4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qy3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R1;
           R1 = Hp - 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wreadS_to_P_entry() //  [R2, R3]
         { info_tbl: [(c3qy6,
                       label: Text.ParserCombinators.ReadP.$wreadS_to_P_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qy6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qya; else goto c3qy9;
       c3qya: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wreadS_to_P_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qy9: // global
           I64[Hp - 32] = go_s3osh_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3osx_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.412282516 UTC

[section ""data" . Text.ParserCombinators.ReadP.readS_to_P1_closure" {
     Text.ParserCombinators.ReadP.readS_to_P1_closure:
         const Text.ParserCombinators.ReadP.readS_to_P1_info;
 },
 Text.ParserCombinators.ReadP.readS_to_P1_entry() //  [R2, R3]
         { info_tbl: [(c3qz3,
                       label: Text.ParserCombinators.ReadP.readS_to_P1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qz3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3qz4; else goto c3qz5;
       c3qz4: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.readS_to_P1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qz5: // global
           I64[Sp - 8] = block_c3qz0_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3qz0() //  [R1]
         { info_tbl: [(c3qz0,
                       label: block_c3qz0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qz0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qz8; else goto c3qz7;
       c3qz8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qz7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.418396893 UTC

[section ""data" . Text.ParserCombinators.ReadP.readS_to_P_closure" {
     Text.ParserCombinators.ReadP.readS_to_P_closure:
         const Text.ParserCombinators.ReadP.readS_to_P_info;
 },
 Text.ParserCombinators.ReadP.readS_to_P_entry() //  [R2, R3]
         { info_tbl: [(c3qzm,
                       label: Text.ParserCombinators.ReadP.readS_to_P_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qzm: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.readS_to_P1_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.424020678 UTC

[section ""cstring" . lvl_r3oqE_bytes" {
     lvl_r3oqE_bytes:
         I8[] [84,101,120,116,47,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,47,82,101,97,100,80,46,104,115,58,40,49,51,52,44,51,41,45,40,49,53,55,44,53,50,41,124,102,117,110,99,116,105,111,110,32,60,124,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.42628733 UTC

[section ""data" . lvl1_r3oqF_closure" {
     lvl1_r3oqF_closure:
         const lvl1_r3oqF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3oqF_entry() //  [R1]
         { info_tbl: [(c3qzA,
                       label: lvl1_r3oqF_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qzA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qzB; else goto c3qzC;
       c3qzB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qzC: // global
           (_c3qzx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3qzx::I64 == 0) goto c3qzz; else goto c3qzy;
       c3qzz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3qzy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3qzx::I64;
           R2 = lvl_r3oqE_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.438012657 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info;
         const 0;
 },
 sat_s3osS_entry() //  [R1, R2]
         { info_tbl: [(c3qAz,
                       label: sat_s3osS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qAz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qAD; else goto c3qAC;
       c3qAD: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qAC: // global
           _s3osM::P64 = P64[R1 + 7];
           _s3osP::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3osP::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = _s3osM::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3osY_entry() //  [R1, R2]
         { info_tbl: [(c3qAS,
                       label: sat_s3osY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qAS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qAT; else goto c3qAU;
       c3qAT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qAU: // global
           I64[Sp - 16] = block_c3qAQ_info;
           R2 = R2;
           _s3osU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3osU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qAQ() //  [R1]
         { info_tbl: [(c3qAQ,
                       label: block_c3qAQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qAQ: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ot3_entry() //  [R1, R2]
         { info_tbl: [(c3qB8,
                       label: sat_s3ot3_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qB8: // global
           _s3ot0::P64 = R2;
           _s3ot3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qB9; else goto c3qBa;
       c3qBa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qBc; else goto c3qBb;
       c3qBc: // global
           HpAlloc = 32;
           goto c3qB9;
       c3qB9: // global
           R2 = _s3ot0::P64;
           R1 = _s3ot3::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qBb: // global
           _s3osT::P64 = P64[_s3ot3::P64 + 7];
           _s3osZ::P64 = P64[_s3ot3::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3osZ::P64;
           P64[Hp] = _s3ot0::P64;
           I64[Sp - 16] = block_c3qB6_info;
           R2 = _s3ot0::P64;
           R1 = _s3osT::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qB6() //  [R1]
         { info_tbl: [(c3qB6,
                       label: block_c3qB6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qB6: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ot7_entry() //  [R1]
         { info_tbl: [(c3qBt,
                       label: sat_s3ot7_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qBt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3qBu; else goto c3qBv;
       c3qBu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qBv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3qBr_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3qBr() //  [R1]
         { info_tbl: [(c3qBr,
                       label: block_c3qBr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qBr: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ot8_entry() //  [R1, R2]
         { info_tbl: [(c3qBA,
                       label: sat_s3ot8_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qBA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qBE; else goto c3qBD;
       c3qBE: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qBD: // global
           _s3osH::P64 = P64[R1 + 7];
           _s3ot4::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3ot7_info;
           P64[Hp - 32] = _s3osH::P64;
           P64[Hp - 24] = _s3ot4::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otg_entry() //  [R1]
         { info_tbl: [(c3qC2,
                       label: sat_s3otg_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qC2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3qC6; else goto c3qC7;
       c3qC6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qC7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3qC0_info;
           _s3otd::P64 = P64[R1 + 32];
           R2 = _s3otd::P64;
           _s3otc::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s3otc::P64;
           P64[Sp - 24] = _s3otd::P64;
           Sp = Sp - 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3qC0() //  [R1]
         { info_tbl: [(c3qC0,
                       label: block_c3qC0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qC0: // global
           I64[Sp] = block_c3qC5_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3qC5() //  [R1]
         { info_tbl: [(c3qC5,
                       label: block_c3qC5_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qC5: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oth_entry() //  [R1, R2]
         { info_tbl: [(c3qCe,
                       label: sat_s3oth_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qCe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qCi; else goto c3qCh;
       c3qCi: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qCh: // global
           _s3ota::P64 = P64[R1 + 7];
           _s3otc::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3otg_info;
           P64[Hp - 32] = _s3ota::P64;
           P64[Hp - 24] = _s3otc::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otm_entry() //  [R1]
         { info_tbl: [(c3qCD,
                       label: sat_s3otm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qCD: // global
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otn_entry() //  [R1]
         { info_tbl: [(c3qCG,
                       label: sat_s3otn_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qCG: // global
           _s3otn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qCH; else goto c3qCI;
       c3qCI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qCK; else goto c3qCJ;
       c3qCK: // global
           HpAlloc = 32;
           goto c3qCH;
       c3qCH: // global
           R1 = _s3otn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qCJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3otn::P64;
           _s3oti::P64 = P64[_s3otn::P64 + 16];
           _s3otj::P64 = P64[_s3otn::P64 + 24];
           _s3otl::P64 = P64[_s3otn::P64 + 32];
           I64[Hp - 24] = sat_s3otm_info;
           P64[Hp - 8] = _s3otj::P64;
           P64[Hp] = _s3otl::P64;
           R3 = Hp - 24;
           R2 = _s3oti::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oto_entry() //  [R1, R2]
         { info_tbl: [(c3qCM,
                       label: sat_s3oto_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qCM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qCQ; else goto c3qCP;
       c3qCQ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qCP: // global
           _s3oti::P64 = P64[R1 + 7];
           _s3otj::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3otn_info;
           P64[Hp - 32] = _s3oti::P64;
           P64[Hp - 24] = _s3otj::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ots_entry() //  [R1]
         { info_tbl: [(c3qD8,
                       label: sat_s3ots_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qD8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qD9; else goto c3qDa;
       c3qD9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qDa: // global
           I64[Sp - 16] = block_c3qD6_info;
           _s3otq::P64 = P64[R1 + 24];
           R2 = _s3otq::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 8] = _s3otq::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qD6() //  [R1]
         { info_tbl: [(c3qD6,
                       label: block_c3qD6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qD6: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ott_entry() //  [R1]
         { info_tbl: [(c3qDe,
                       label: sat_s3ott_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qDe: // global
           _s3ott::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qDf; else goto c3qDg;
       c3qDg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qDi; else goto c3qDh;
       c3qDi: // global
           HpAlloc = 32;
           goto c3qDf;
       c3qDf: // global
           R1 = _s3ott::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qDh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ott::P64;
           _s3oti::P64 = P64[_s3ott::P64 + 16];
           _s3otp::P64 = P64[_s3ott::P64 + 24];
           _s3otq::P64 = P64[_s3ott::P64 + 32];
           I64[Hp - 24] = sat_s3ots_info;
           P64[Hp - 8] = _s3otp::P64;
           P64[Hp] = _s3otq::P64;
           R3 = Hp - 24;
           R2 = _s3oti::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3otu_entry() //  [R1, R2]
         { info_tbl: [(c3qDk,
                       label: sat_s3otu_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qDk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qDo; else goto c3qDn;
       c3qDo: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qDn: // global
           _s3oti::P64 = P64[R1 + 7];
           _s3otp::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3ott_info;
           P64[Hp - 32] = _s3oti::P64;
           P64[Hp - 24] = _s3otp::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otw_entry() //  [R1]
         { info_tbl: [(c3qDv,
                       label: sat_s3otw_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qDv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qDw; else goto c3qDx;
       c3qDw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qDx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3otz_entry() //  [R1]
         { info_tbl: [(c3qDE,
                       label: sat_s3otz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qDE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qDF; else goto c3qDG;
       c3qDF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qDG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3otH_entry() //  [R1, R2]
         { info_tbl: [(c3qE1,
                       label: sat_s3otH_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qE1: // global
           _s3otE::P64 = R2;
           _s3otH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qE2; else goto c3qE3;
       c3qE3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qE5; else goto c3qE4;
       c3qE5: // global
           HpAlloc = 32;
           goto c3qE2;
       c3qE2: // global
           R2 = _s3otE::P64;
           R1 = _s3otH::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qE4: // global
           _s3otB::P64 = P64[_s3otH::P64 + 7];
           _s3otD::P64 = P64[_s3otH::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3otD::P64;
           P64[Hp] = _s3otE::P64;
           I64[Sp - 16] = block_c3qDZ_info;
           R2 = _s3otE::P64;
           R1 = _s3otB::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qDZ() //  [R1]
         { info_tbl: [(c3qDZ,
                       label: block_c3qDZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qDZ: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otK_entry() //  [R1]
         { info_tbl: [(c3qEf,
                       label: sat_s3otK_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qEf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qEg; else goto c3qEh;
       c3qEg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qEh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c3qEn,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qEn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3qEo; else goto c3qEp;
       c3qEo: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qEp: // global
           I64[Sp - 24] = block_c3qDH_info;
           R1 = R2;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3qGD; else goto c3qDI;
       u3qGD: // global
           call _c3qDH(R1) args: 0, res: 0, upd: 0;
       c3qDI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qDH() //  [R1]
         { info_tbl: [(c3qDH,
                       label: block_c3qDH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qDH: // global
           _s3osD::P64 = P64[Sp + 16];
           _c3qEm::P64 = R1 & 7;
           if (_c3qEm::P64 == 1) goto c3qEk; else goto u3qGl;
       c3qEk: // global
           I64[Sp - 8] = block_c3qDN_info;
           _s3otB::P64 = P64[R1 + 7];
           R1 = _s3osD::P64;
           P64[Sp] = _s3otB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qGA; else goto c3qDO;
       u3qGA: // global
           call _c3qDN(R1) args: 0, res: 0, upd: 0;
       c3qDO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3qGl: // global
           if (_c3qEm::P64 == 4) goto c3qEl; else goto u3qGm;
       c3qEl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qG7; else goto c3qG6;
       c3qG7: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qG6: // global
           _s3otI::P64 = P64[R1 + 4];
           _s3otJ::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3otK_info;
           P64[Hp - 32] = _s3osD::P64;
           P64[Hp - 24] = _s3otJ::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3otI::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qGm: // global
           Sp = Sp + 8;
           call _s3osE() args: 0, res: 0, upd: 0;
     }
 },
 _c3qDN() //  [R1]
         { info_tbl: [(c3qDN,
                       label: block_c3qDN_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qDN: // global
           if (R1 & 7 == 1) goto c3qG0; else goto u3qGn;
       c3qG0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qG3; else goto c3qG2;
       c3qG3: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qG2: // global
           _s3otD::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_s3otH_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3otD::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qGn: // global
           Sp = Sp + 16;
           call _s3osE() args: 0, res: 0, upd: 0;
     }
 },
 _s3osE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3osE: // global
           I64[Sp - 8] = block_c3qzT_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qGE; else goto c3qzU;
       u3qGE: // global
           call _c3qzT(R1) args: 0, res: 0, upd: 0;
       c3qzU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qzT() //  [R1]
         { info_tbl: [(c3qzT,
                       label: block_c3qzT_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qzT: // global
           _s3osC::P64 = P64[Sp + 8];
           if (R1 & 7 == 4) goto c3qFO; else goto c3qEt;
       c3qFO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qFR; else goto c3qFQ;
       c3qFR: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qFQ: // global
           _s3otx::P64 = P64[R1 + 4];
           _s3oty::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3otz_info;
           P64[Hp - 32] = _s3osC::P64;
           P64[Hp - 24] = _s3oty::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3otx::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qEt: // global
           I64[Sp + 8] = block_c3qzY_info;
           _s3osG::P64 = R1;
           R1 = _s3osC::P64;
           P64[Sp + 16] = _s3osG::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3qGq; else goto c3qzZ;
       u3qGq: // global
           call _c3qzY(R1) args: 0, res: 0, upd: 0;
       c3qzZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qzY() //  [R1]
         { info_tbl: [(c3qzY,
                       label: block_c3qzY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qzY: // global
           _s3osG::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto c3qFM; else goto c3qEw;
       c3qFM: // global
           R1 = _s3osG::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3qEw: // global
           I64[Sp] = block_c3qA3_info;
           _s3osH::P64 = R1;
           R1 = _s3osG::P64;
           P64[Sp + 8] = _s3osH::P64;
           if (R1 & 7 != 0) goto u3qGr; else goto c3qA4;
       u3qGr: // global
           call _c3qA3(R1) args: 0, res: 0, upd: 0;
       c3qA4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qA3() //  [R1]
         { info_tbl: [(c3qA3,
                       label: block_c3qA3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qA3: // global
           _s3osH::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto c3qFI; else goto c3qF7;
       c3qFI: // global
           R1 = _s3osH::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3qF7: // global
           I64[Sp - 8] = block_c3qBF_info;
           _s3osI::P64 = R1;
           R1 = _s3osH::P64;
           P64[Sp] = _s3osI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qGs; else goto c3qBG;
       u3qGs: // global
           call _c3qBF(R1) args: 0, res: 0, upd: 0;
       c3qBG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qBF() //  [R1]
         { info_tbl: [(c3qBF,
                       label: block_c3qBF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qBF: // global
           _s3osI::P64 = P64[Sp + 8];
           _c3qGc::P64 = R1 & 7;
           if (_c3qGc::P64 == 2) goto c3qFd; else goto u3qGj;
       c3qFd: // global
           I64[Sp - 8] = block_c3qBL_info;
           _s3ota::P64 = P64[R1 + 6];
           R1 = _s3osI::P64;
           P64[Sp] = _s3ota::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qGw; else goto c3qBM;
       u3qGw: // global
           call _c3qBL(R1) args: 0, res: 0, upd: 0;
       c3qBM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3qGj: // global
           if (_c3qGc::P64 == 5) goto c3qFo; else goto u3qGo;
       c3qFo: // global
           I64[Sp + 8] = block_c3qCl_info;
           _s3oti::P64 = P64[R1 + 3];
           R1 = _s3osI::P64;
           P64[Sp + 16] = _s3oti::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3qGx; else goto c3qCm;
       u3qGx: // global
           call _c3qCl(R1) args: 0, res: 0, upd: 0;
       c3qCm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3qGo: // global
           Sp = Sp + 8;
           call _s3osJ() args: 0, res: 0, upd: 0;
     }
 },
 _c3qBL() //  [R1]
         { info_tbl: [(c3qBL,
                       label: block_c3qBL_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qBL: // global
           if (R1 & 7 == 5) goto c3qFj; else goto u3qGp;
       c3qFj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qFm; else goto c3qFl;
       c3qFm: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qFl: // global
           _s3otc::P64 = P64[R1 + 3];
           I64[Hp - 32] = sat_s3oth_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3otc::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qGp: // global
           Sp = Sp + 16;
           call _s3osJ() args: 0, res: 0, upd: 0;
     }
 },
 _c3qCl() //  [R1]
         { info_tbl: [(c3qCl,
                       label: block_c3qCl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qCl: // global
           _s3oti::P64 = P64[Sp + 8];
           _c3qGd::P64 = R1 & 7;
           if (_c3qGd::P64 < 5) goto u3qGk; else goto c3qFB;
       u3qGk: // global
           if (_c3qGd::P64 < 2) goto c3qFr; else goto c3qFw;
       c3qFr: // global
           Hp = Hp + 40;
           _s3otj::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qFz; else goto c3qFt;
       c3qFt: // global
           I64[Hp - 32] = sat_s3oto_info;
           P64[Hp - 24] = _s3oti::P64;
           P64[Hp - 16] = _s3otj::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qFw: // global
           Hp = Hp + 40;
           _s3otj::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qFz; else goto c3qFy;
       c3qFz: // global
           HpAlloc = 40;
           R1 = _s3otj::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qFy: // global
           _s3otp::P64 = P64[_s3otj::P64 + 6];
           I64[Hp - 32] = sat_s3otu_info;
           P64[Hp - 24] = _s3oti::P64;
           P64[Hp - 16] = _s3otp::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qFB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qFE; else goto c3qFD;
       c3qFE: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qFD: // global
           _s3otv::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3otw_info;
           P64[Hp - 24] = _s3oti::P64;
           P64[Hp - 16] = _s3otv::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _s3osJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3osJ: // global
           _s3osI::P64 = P64[Sp];
           I64[Sp] = block_c3qAd_info;
           R1 = _s3osI::P64;
           if (R1 & 7 != 0) goto u3qGF; else goto c3qAe;
       u3qGF: // global
           call _c3qAd(R1) args: 0, res: 0, upd: 0;
       c3qAe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qAd() //  [R1]
         { info_tbl: [(c3qAd,
                       label: block_c3qAd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qAd: // global
           _s3osH::P64 = P64[Sp + 8];
           if (R1 & 7 == 5) goto c3qF2; else goto c3qEB;
       c3qF2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qF5; else goto c3qF4;
       c3qF5: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qF4: // global
           _s3ot4::P64 = P64[R1 + 3];
           I64[Hp - 32] = sat_s3ot8_info;
           P64[Hp - 24] = _s3osH::P64;
           P64[Hp - 16] = _s3ot4::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qEB: // global
           I64[Sp] = block_c3qAi_info;
           _s3osL::P64 = R1;
           R1 = _s3osH::P64;
           P64[Sp + 8] = _s3osL::P64;
           if (R1 & 7 != 0) goto u3qGt; else goto c3qAj;
       u3qGt: // global
           call _c3qAi(R1) args: 0, res: 0, upd: 0;
       c3qAj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qAi() //  [R1]
         { info_tbl: [(c3qAi,
                       label: block_c3qAi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qAi: // global
           _s3osL::P64 = P64[Sp + 8];
           if (R1 & 7 == 2) goto c3qEP; else goto c3qEE;
       c3qEP: // global
           I64[Sp] = block_c3qAG_info;
           _s3osT::P64 = P64[R1 + 6];
           R1 = _s3osL::P64;
           P64[Sp + 8] = _s3osT::P64;
           if (R1 & 7 != 0) goto u3qGv; else goto c3qAH;
       u3qGv: // global
           call _c3qAG(R1) args: 0, res: 0, upd: 0;
       c3qAH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3qEE: // global
           I64[Sp] = block_c3qAn_info;
           _s3osM::P64 = R1;
           R1 = _s3osL::P64;
           P64[Sp + 8] = _s3osM::P64;
           if (R1 & 7 != 0) goto u3qGu; else goto c3qAo;
       u3qGu: // global
           call _c3qAn(R1) args: 0, res: 0, upd: 0;
       c3qAo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qAG() //  [R1]
         { info_tbl: [(c3qAG,
                       label: block_c3qAG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qAG: // global
           _s3osT::P64 = P64[Sp + 8];
           if (R1 & 7 < 2) goto c3qES; else goto c3qEX;
       c3qES: // global
           Hp = Hp + 40;
           _s3osU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qF0; else goto c3qEU;
       c3qEU: // global
           I64[Hp - 32] = sat_s3osY_info;
           P64[Hp - 24] = _s3osT::P64;
           P64[Hp - 16] = _s3osU::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qEX: // global
           Hp = Hp + 40;
           _s3osU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qF0; else goto c3qEZ;
       c3qF0: // global
           HpAlloc = 40;
           R1 = _s3osU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qEZ: // global
           _s3osZ::P64 = P64[_s3osU::P64 + 6];
           I64[Hp - 32] = sat_s3ot3_info;
           P64[Hp - 24] = _s3osT::P64;
           P64[Hp - 16] = _s3osZ::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3qAn() //  [R1]
         { info_tbl: [(c3qAn,
                       label: block_c3qAn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qAn: // global
           if (R1 & 7 < 2) goto c3qEI; else goto c3qEK;
       c3qEI: // global
           R1 = lvl1_r3oqF_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3qEK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qEN; else goto c3qEM;
       c3qEN: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qEM: // global
           _s3osP::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_s3osS_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3osP::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.53743582 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info;
         const 0;
 },
 sat_s3otR_entry() //  [R1, R2]
         { info_tbl: [(c3qKc,
                       label: sat_s3otR_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qKc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qKd; else goto c3qKe;
       c3qKd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qKe: // global
           I64[Sp - 16] = block_c3qKa_info;
           R2 = R2;
           _s3otM::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3otM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qKa() //  [R1]
         { info_tbl: [(c3qKa,
                       label: block_c3qKa_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qKa: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otV_entry() //  [R1, R2]
         { info_tbl: [(c3qKr,
                       label: sat_s3otV_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qKr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qKs; else goto c3qKt;
       c3qKs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qKt: // global
           I64[Sp - 16] = block_c3qKp_info;
           R2 = R2;
           _s3otM::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3otM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qKp() //  [R1]
         { info_tbl: [(c3qKp,
                       label: block_c3qKp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qKp: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3otZ_entry() //  [R1]
         { info_tbl: [(c3qKE,
                       label: sat_s3otZ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qKE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qKF; else goto c3qKG;
       c3qKF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qKG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oub_entry() //  [R1]
         { info_tbl: [(c3qL3,
                       label: sat_s3oub_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qL3: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_s3ou1_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 go_s3ou1_entry() //  [R1, R2]
         { info_tbl: [(c3qLa,
                       label: go_s3ou1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qLa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3qLb; else goto c3qLc;
       c3qLb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qLc: // global
           I64[Sp - 24] = block_c3qKO_info;
           _s3ou1::P64 = R1;
           _s3otM::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3otM::P64;
           P64[Sp - 8] = _s3ou1::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3qLu; else goto c3qKP;
       u3qLu: // global
           call _c3qKO(R1) args: 0, res: 0, upd: 0;
       c3qKP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qKO() //  [R1]
         { info_tbl: [(c3qKO,
                       label: block_c3qKO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qKO: // global
           if (R1 & 7 == 1) goto c3qL7; else goto c3qL8;
       c3qL7: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qL8: // global
           I64[Sp - 8] = block_c3qKU_info;
           _s3ou5::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3ou5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qLt; else goto c3qKV;
       u3qLt: // global
           call _c3qKU(R1) args: 0, res: 0, upd: 0;
       c3qKV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qKU() //  [R1]
         { info_tbl: [(c3qKU,
                       label: block_c3qKU_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qKU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qLn; else goto c3qLm;
       c3qLn: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qLm: // global
           _s3ou7::P64 = P64[R1 + 7];
           _s3ou8::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3oub_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3qLf_info;
           R2 = _s3ou7::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3ou8::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qLf() //  [R1]
         { info_tbl: [(c3qLf,
                       label: block_c3qLf_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qLf: // global
           _s3ou8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3qLj_info;
           R3 = _s3ou8::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3qLj() //  [R1]
         { info_tbl: [(c3qLj,
                       label: block_c3qLj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qLj: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c3qLC,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qLC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qLD; else goto c3qLE;
       c3qLD: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qLE: // global
           I64[Sp - 16] = block_c3qK0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qMl; else goto c3qK1;
       u3qMl: // global
           call _c3qK0(R1) args: 0, res: 0, upd: 0;
       c3qK1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qK0() //  [R1]
         { info_tbl: [(c3qK0,
                       label: block_c3qK0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qK0: // global
           _s3otM::P64 = P64[Sp + 8];
           _c3qLB::P64 = R1 & 7;
           if (_c3qLB::P64 < 4) goto u3qMf; else goto u3qMh;
       u3qMf: // global
           if (_c3qLB::P64 < 3) goto u3qMg; else goto u3qMi;
       u3qMg: // global
           if (_c3qLB::P64 < 2) goto c3qLw; else goto c3qLx;
       c3qLw: // global
           Hp = Hp + 40;
           _s3otN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qLM; else goto c3qLH;
       c3qLH: // global
           _s3otO::P64 = P64[_s3otN::P64 + 7];
           I64[Hp - 32] = sat_s3otR_info;
           P64[Hp - 24] = _s3otM::P64;
           P64[Hp - 16] = _s3otO::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qLx: // global
           Hp = Hp + 40;
           _s3otN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qLM; else goto c3qLL;
       c3qLM: // global
           HpAlloc = 40;
           R1 = _s3otN::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qLL: // global
           _s3otS::P64 = P64[_s3otN::P64 + 6];
           I64[Hp - 32] = sat_s3otV_info;
           P64[Hp - 24] = _s3otM::P64;
           P64[Hp - 16] = _s3otS::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qMi: // global
           Sp = Sp + 16;
           call _c3qM6() args: 0, res: 0, upd: 0;
       u3qMh: // global
           if (_c3qLB::P64 < 5) goto c3qLz; else goto c3qLA;
       c3qLz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qLS; else goto c3qLR;
       c3qLS: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qLR: // global
           _s3otW::P64 = P64[R1 + 4];
           _s3otX::P64 = P64[R1 + 12];
           I64[Hp - 24] = sat_s3otZ_info;
           P64[Hp - 8] = _s3otM::P64;
           P64[Hp] = _s3otX::P64;
           I64[Sp] = block_c3qLP_info;
           R2 = _s3otW::P64;
           R1 = _s3otM::P64;
           P64[Sp + 8] = Hp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3qLA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qM0; else goto c3qLZ;
       c3qM0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qLZ: // global
           _s3ou0::P64 = P64[R1 + 3];
           I64[Hp - 8] = go_s3ou1_info;
           P64[Hp] = _s3otM::P64;
           I64[Sp + 8] = block_c3qLX_info;
           R2 = _s3ou0::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s3ou1_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qLP() //  [R1]
         { info_tbl: [(c3qLP,
                       label: block_c3qLP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qLP: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3qLX() //  [R1]
         { info_tbl: [(c3qLX,
                       label: block_c3qLX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qLX: // global
           if (R1 & 7 == 1) goto u3qMj; else goto c3qMa;
       u3qMj: // global
           Sp = Sp + 8;
           call _c3qM6() args: 0, res: 0, upd: 0;
       c3qMa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qMd; else goto c3qMc;
       c3qMd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qMc: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R1;
           R1 = Hp - 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3qM6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qM6: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.586038707 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info;
         const 0;
 },
 sat_s3ouk_entry() //  [R1, R2]
         { info_tbl: [(c3qNN,
                       label: sat_s3ouk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qNN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qNR; else goto c3qNQ;
       c3qNR: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qNQ: // global
           _s3ouh::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ouh::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oul_entry() //  [R1, R2]
         { info_tbl: [(c3qNS,
                       label: sat_s3oul_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qNS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qNW; else goto c3qNV;
       c3qNW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qNV: // global
           _s3oug::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s3ouk_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = _s3oug::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c3qNX,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qNX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qO1; else goto c3qO0;
       c3qO1: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qO0: // global
           I64[Hp - 8] = sat_s3oul_info;
           P64[Hp] = R3;
           R3 = Hp - 7;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.595474803 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info;
         const 0;
 },
 sat_s3ouo_entry() //  [R1]
         { info_tbl: [(c3qOm,
                       label: sat_s3ouo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qOm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qOn; else goto c3qOo;
       c3qOn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qOo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_entry() //  [R2,
                                                                   R3]
         { info_tbl: [(c3qOp,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qOp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qOt; else goto c3qOs;
       c3qOt: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qOs: // global
           I64[Hp - 24] = sat_s3ouo_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.60294267 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP1_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP1_closure:
         const Text.ParserCombinators.ReadP.Result_con_info;
         const GHC.Types.[]_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.605803116 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info;
         const 0;
 },
 m2_s3our_entry() //  [R1]
         { info_tbl: [(c3qOP,
                       label: m2_s3our_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qOP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qOQ; else goto c3qOR;
       c3qOQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qOR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fAlternativeP1_closure+4;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ouw_entry() //  [R1, R2]
         { info_tbl: [(c3qP4,
                       label: sat_s3ouw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qP4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qP8; else goto c3qP7;
       c3qP8: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qP7: // global
           _s3out::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3out::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oux_entry() //  [R1, R2]
         { info_tbl: [(c3qP9,
                       label: sat_s3oux_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qP9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qPd; else goto c3qPc;
       c3qPd: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qPc: // global
           _s3our::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s3ouw_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = _s3our::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 some_v_s3ouq_entry() //  [R1]
         { info_tbl: [(c3qPg,
                       label: some_v_s3ouq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qPg: // global
           _s3ouq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3qPh; else goto c3qPi;
       c3qPi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3qPk; else goto c3qPj;
       c3qPk: // global
           HpAlloc = 40;
           goto c3qPh;
       c3qPh: // global
           R1 = _s3ouq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qPj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ouq::P64;
           _s3oup::P64 = P64[_s3ouq::P64 + 16];
           I64[Hp - 32] = m2_s3our_info;
           P64[Hp - 16] = _s3ouq::P64;
           I64[Hp - 8] = sat_s3oux_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 32] = block_c3qPe_info;
           R3 = _s3oup::P64;
           R2 = GHC.Types.:_closure+2;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3qPe() //  [R1]
         { info_tbl: [(c3qPe,
                       label: block_c3qPe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qPe: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$csome_entry() //  [R2]
         { info_tbl: [(c3qPo,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qPo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qPs; else goto c3qPr;
       c3qPs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qPr: // global
           I64[Hp - 16] = some_v_s3ouq_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.622157638 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info;
         const 0;
 },
 sat_s3ouz_entry() //  [R1]
         { info_tbl: [(c3qQ2,
                       label: sat_s3ouz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qQ2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qQ3; else goto c3qQ4;
       c3qQ3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qQ4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_entry() //  [R2]
         { info_tbl: [(c3qQ5,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qQ5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qQ9; else goto c3qQ8;
       c3qQ9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qQ8: // global
           I64[Hp - 16] = sat_s3ouz_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.628341377 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3qQo,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qQo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qQp; else goto c3qQq;
       c3qQp: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qQq: // global
           I64[Sp - 16] = block_c3qQm_info;
           _s3ouB::P64 = R3;
           R3 = R2;
           R2 = GHC.Base.breakpoint_closure+1;
           P64[Sp - 8] = _s3ouB::P64;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3qQm() //  [R1]
         { info_tbl: [(c3qQm,
                       label: block_c3qQm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qQm: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.635695399 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info;
         const 0;
 },
 many_v_s3ouE_entry() //  [R1]
         { info_tbl: [(c3qQM,
                       label: many_v_s3ouE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qQM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3qQQ; else goto c3qQR;
       c3qQQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qQR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3qQK_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Types.:_closure+2;
           P64[Sp - 24] = R1;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3qQK() //  [R1]
         { info_tbl: [(c3qQK,
                       label: block_c3qQK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qQK: // global
           _s3ouE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3qQP_info;
           R3 = _s3ouE::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3qQP() //  [R1]
         { info_tbl: [(c3qQP,
                       label: block_c3qQP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qQP: // global
           R3 = Text.ParserCombinators.ReadP.$fAlternativeP1_closure+4;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_entry() //  [R2]
         { info_tbl: [(c3qQX,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qQX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qR1; else goto c3qR0;
       c3qR1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qR0: // global
           I64[Hp - 16] = many_v_s3ouE_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.647155069 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure" {
     Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure:
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_info;
         const 0;
 },
 sat_s3ouK_entry() //  [R1]
         { info_tbl: [(c3qRr,
                       label: sat_s3ouK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qRr: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fMonadP_$c>>_entry() //  [R2, R3]
         { info_tbl: [(c3qRu,
                       label: Text.ParserCombinators.ReadP.$fMonadP_$c>>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qRu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qRy; else goto c3qRx;
       c3qRy: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qRx: // global
           I64[Hp - 8] = sat_s3ouK_info;
           P64[Hp] = R3;
           R3 = Hp - 7;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.652741946 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorP_closure+1;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.654811224 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadP_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure+2;
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.657428696 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeP_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure+2;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.660558038 UTC

[section ""data" . Text.ParserCombinators.ReadP.readP_to_S_closure" {
     Text.ParserCombinators.ReadP.readP_to_S_closure:
         const Text.ParserCombinators.ReadP.readP_to_S_info;
 },
 sat_s3ouM_entry() //  [R1]
         { info_tbl: [(c3qRT,
                       label: sat_s3ouM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qRT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qRU; else goto c3qRV;
       c3qRU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qRV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.readP_to_S_entry() //  [R2]
         { info_tbl: [(c3qRW,
                       label: Text.ParserCombinators.ReadP.readP_to_S_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qRW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qS0; else goto c3qRZ;
       c3qS0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.readP_to_S_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qRZ: // global
           I64[Hp - 16] = sat_s3ouM_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.667910001 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailP_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailP_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadP.$fMonadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.669751411 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadPlusP_closure" {
     Text.ParserCombinators.ReadP.$fMonadPlusP_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadP_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.671842415 UTC

[section ""data" . Text.ParserCombinators.ReadP.get_closure" {
     Text.ParserCombinators.ReadP.get_closure:
         const Text.ParserCombinators.ReadP.get_info;
 },
 Text.ParserCombinators.ReadP.get_entry() //  [R2]
         { info_tbl: [(c3qSg,
                       label: Text.ParserCombinators.ReadP.get_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qSg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qSk; else goto c3qSj;
       c3qSk: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.get_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qSj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.675867439 UTC

[section ""data" . Text.ParserCombinators.ReadP.look_closure" {
     Text.ParserCombinators.ReadP.look_closure:
         const Text.ParserCombinators.ReadP.look_info;
 },
 Text.ParserCombinators.ReadP.look_entry() //  [R2]
         { info_tbl: [(c3qSv,
                       label: Text.ParserCombinators.ReadP.look_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qSv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qSz; else goto c3qSy;
       c3qSz: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.look_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qSy: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.679965644 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_info;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry() //  []
         { info_tbl: [(c3qSJ,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qSJ: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.684724154 UTC

[section ""data" . Text.ParserCombinators.ReadP.pfail_closure" {
     Text.ParserCombinators.ReadP.pfail_closure:
         const Text.ParserCombinators.ReadP.pfail_info;
 },
 Text.ParserCombinators.ReadP.pfail_entry() //  [R2]
         { info_tbl: [(c3qSV,
                       label: Text.ParserCombinators.ReadP.pfail_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qSV: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.688561269 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3qT9,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qT9: // global
           _s3ouQ::P64 = R4;
           _s3ouP::P64 = R3;
           _s3ouO::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qTa; else goto c3qTb;
       c3qTb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qTd; else goto c3qTc;
       c3qTd: // global
           HpAlloc = 32;
           goto c3qTa;
       c3qTa: // global
           R4 = _s3ouQ::P64;
           R3 = _s3ouP::P64;
           R2 = _s3ouO::P64;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qTc: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ouP::P64;
           P64[Hp] = _s3ouQ::P64;
           I64[Sp - 16] = block_c3qT7_info;
           R2 = _s3ouQ::P64;
           R1 = _s3ouO::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qT7() //  [R1]
         { info_tbl: [(c3qT7,
                       label: block_c3qT7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qT7: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.695018395 UTC

[section ""data" . Text.ParserCombinators.ReadP.+++_closure" {
     Text.ParserCombinators.ReadP.+++_closure:
         const Text.ParserCombinators.ReadP.+++_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.+++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3qTu,
                       label: Text.ParserCombinators.ReadP.+++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qTu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.701336307 UTC

[section ""data" . Text.ParserCombinators.ReadP.choice_closure" {
     Text.ParserCombinators.ReadP.choice_closure:
         const Text.ParserCombinators.ReadP.choice_info;
         const 0;
 },
 ds2_s3ov0_entry() //  [R1]
         { info_tbl: [(c3qTV,
                       label: ds2_s3ov0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qTV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qTW; else goto c3qTX;
       c3qTW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qTX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.choice_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ov4_entry() //  [R1, R2]
         { info_tbl: [(c3qU6,
                       label: sat_s3ov4_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qU6: // global
           _s3ov1::P64 = R2;
           _s3ov4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3qU7; else goto c3qU8;
       c3qU8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qUa; else goto c3qU9;
       c3qUa: // global
           HpAlloc = 32;
           goto c3qU7;
       c3qU7: // global
           R2 = _s3ov1::P64;
           R1 = _s3ov4::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qU9: // global
           _s3ouV::P64 = P64[_s3ov4::P64 + 7];
           _s3ov0::P64 = P64[_s3ov4::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ov0::P64;
           P64[Hp] = _s3ov1::P64;
           I64[Sp - 16] = block_c3qU4_info;
           R2 = _s3ov1::P64;
           R1 = _s3ouV::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qU4() //  [R1]
         { info_tbl: [(c3qU4,
                       label: block_c3qU4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qU4: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.choice_entry() //  [R2]
         { info_tbl: [(c3qUi,
                       label: Text.ParserCombinators.ReadP.choice_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qUi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qUj; else goto c3qUk;
       c3qUj: // global
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.choice_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qUk: // global
           I64[Sp - 8] = block_c3qTF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qUy; else goto c3qTG;
       u3qUy: // global
           call _c3qTF(R1) args: 0, res: 0, upd: 0;
       c3qTG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qTF() //  [R1]
         { info_tbl: [(c3qTF,
                       label: block_c3qTF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qTF: // global
           if (R1 & 7 == 1) goto c3qUf; else goto c3qUg;
       c3qUf: // global
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qUg: // global
           I64[Sp - 8] = block_c3qTL_info;
           _s3ouV::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3ouV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3qUx; else goto c3qTM;
       u3qUx: // global
           call _c3qTL(R1) args: 0, res: 0, upd: 0;
       c3qTM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qTL() //  [R1]
         { info_tbl: [(c3qTL,
                       label: block_c3qTL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qTL: // global
           _s3ouV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3qUr; else goto c3qUs;
       c3qUr: // global
           R1 = _s3ouV::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c3qUs: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qUv; else goto c3qUu;
       c3qUv: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qUu: // global
           I64[Hp - 40] = ds2_s3ov0_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s3ov4_info;
           P64[Hp - 8] = _s3ouV::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.719110758 UTC

[section ""cstring" . lvl2_r3oqG_bytes" {
     lvl2_r3oqG_bytes:
         I8[] [100,111,32,110,111,116,32,117,115,101,32,114,101,97,100,83,95,116,111,95,80,32,105,110,32,103,97,116,104,101,114,33]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.721288463 UTC

[section ""data" . lvl3_r3oqH_closure" {
     lvl3_r3oqH_closure:
         const lvl3_r3oqH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r3oqH_entry() //  [R1]
         { info_tbl: [(c3qVe,
                       label: lvl3_r3oqH_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qVe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3qVf; else goto c3qVg;
       c3qVf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qVg: // global
           (_c3qV9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3qV9::I64 == 0) goto c3qVb; else goto c3qVa;
       c3qVb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3qVa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3qV9::I64;
           I64[Sp - 24] = block_c3qVc_info;
           R2 = lvl2_r3oqG_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3qVc() //  [R1]
         { info_tbl: [(c3qVc,
                       label: block_c3qVc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qVc: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.729830682 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather_gath_closure" {
     Text.ParserCombinators.ReadP.gather_gath_closure:
         const Text.ParserCombinators.ReadP.gather_gath_info;
         const 0;
 },
 sat_s3ovd_entry() //  [R1, R2]
         { info_tbl: [(c3qVS,
                       label: sat_s3ovd_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qVS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qVW; else goto c3qVV;
       c3qVW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qVV: // global
           _s3ov6::P64 = P64[R1 + 7];
           _s3ova::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3ova::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3ov6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovf_entry() //  [R1, R2]
         { info_tbl: [(c3qVX,
                       label: sat_s3ovf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qVX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3qVY; else goto c3qVZ;
       c3qVY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qVZ: // global
           I64[Sp - 24] = block_c3qVI_info;
           _s3ova::P64 = R2;
           R2 = R2;
           _s3ov6::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _s3ov6::P64;
           P64[Sp - 8] = _s3ova::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qVI() //  [R1]
         { info_tbl: [(c3qVI,
                       label: block_c3qVI_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qVI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qW2; else goto c3qW1;
       c3qW2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qW1: // global
           I64[Hp - 16] = sat_s3ovd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R3 = R1;
           R2 = Hp - 15;
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovj_entry() //  [R1, R2]
         { info_tbl: [(c3qWc,
                       label: sat_s3ovj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qWc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qWd; else goto c3qWe;
       c3qWd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qWe: // global
           I64[Sp - 16] = block_c3qWa_info;
           R2 = R2;
           _s3ov6::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3ov6::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qWa() //  [R1]
         { info_tbl: [(c3qWa,
                       label: block_c3qWa_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qWa: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovo_entry() //  [R1]
         { info_tbl: [(c3qWp,
                       label: sat_s3ovo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qWp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qWq; else goto c3qWr;
       c3qWq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qWr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ovm_entry() //  [R1]
         { info_tbl: [(c3qWw,
                       label: sat_s3ovm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qWw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qWx; else goto c3qWy;
       c3qWx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3qWy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.gather_gath_entry() //  [R2, R3]
         { info_tbl: [(c3qWG,
                       label: Text.ParserCombinators.ReadP.gather_gath_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qWG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3qWH; else goto c3qWI;
       c3qWH: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.gather_gath_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qWI: // global
           I64[Sp - 16] = block_c3qVy_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3qX7; else goto c3qVz;
       u3qX7: // global
           call _c3qVy(R1) args: 0, res: 0, upd: 0;
       c3qVz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qVy() //  [R1]
         { info_tbl: [(c3qVy,
                       label: block_c3qVy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qVy: // global
           _s3ov6::P64 = P64[Sp + 8];
           _c3qWF::P64 = R1 & 7;
           if (_c3qWF::P64 < 4) goto u3qX4; else goto u3qX6;
       u3qX4: // global
           if (_c3qWF::P64 < 3) goto u3qX5; else goto c3qWC;
       u3qX5: // global
           if (_c3qWF::P64 < 2) goto c3qWA; else goto c3qWB;
       c3qWA: // global
           Hp = Hp + 40;
           _s3ov8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qWQ; else goto c3qWL;
       c3qWL: // global
           _s3ov9::P64 = P64[_s3ov8::P64 + 7];
           I64[Hp - 32] = sat_s3ovf_info;
           P64[Hp - 24] = _s3ov6::P64;
           P64[Hp - 16] = _s3ov9::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qWB: // global
           Hp = Hp + 40;
           _s3ov8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3qWQ; else goto c3qWP;
       c3qWQ: // global
           HpAlloc = 40;
           R1 = _s3ov8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qWP: // global
           _s3ovg::P64 = P64[_s3ov8::P64 + 6];
           I64[Hp - 32] = sat_s3ovj_info;
           P64[Hp - 24] = _s3ov6::P64;
           P64[Hp - 16] = _s3ovg::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3qWC: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3qX6: // global
           if (_c3qWF::P64 < 5) goto c3qWD; else goto c3qWE;
       c3qWD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3qWW; else goto c3qWV;
       c3qWW: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3qWV: // global
           _s3ovk::P64 = P64[R1 + 4];
           _s3ovl::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3ovo_info;
           P64[Hp - 32] = _s3ov6::P64;
           P64[Hp - 24] = _s3ovl::P64;
           I64[Hp - 16] = sat_s3ovm_info;
           P64[Hp] = _s3ov6::P64;
           I64[Sp] = block_c3qWT_info;
           R2 = Hp - 16;
           R1 = _s3ovk::P64;
           P64[Sp + 8] = Hp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3qWE: // global
           R1 = lvl3_r3oqH_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3qWT() //  [R1]
         { info_tbl: [(c3qWT,
                       label: block_c3qWT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qWT: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.754961082 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather1_closure" {
     Text.ParserCombinators.ReadP.gather1_closure:
         const Text.ParserCombinators.ReadP.gather1_info;
         const 0;
 },
 sat_s3ovv_entry() //  [R1, R2]
         { info_tbl: [(c3qY8,
                       label: sat_s3ovv_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qY8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3qYc; else goto c3qYb;
       c3qYc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qYb: // global
           _s3ovr::P64 = P64[R1 + 7];
           _s3ovs::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = _s3ovs::P64;
           R2 = Hp - 15;
           R1 = _s3ovr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovw_entry() //  [R1, R2]
         { info_tbl: [(c3qYe,
                       label: sat_s3ovw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qYe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3qYi; else goto c3qYh;
       c3qYi: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qYh: // global
           _s3ovr::P64 = P64[R1 + 7];
           I64[Hp - 40] = sat_s3ovv_info;
           P64[Hp - 32] = _s3ovr::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.gather1_entry() //  [R2, R3]
         { info_tbl: [(c3qYl,
                       label: Text.ParserCombinators.ReadP.gather1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qYl: // global
           _s3ovr::P64 = R3;
           _s3ovq::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3qYm; else goto c3qYn;
       c3qYn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3qYp; else goto c3qYo;
       c3qYp: // global
           HpAlloc = 16;
           goto c3qYm;
       c3qYm: // global
           R3 = _s3ovr::P64;
           R2 = _s3ovq::P64;
           R1 = Text.ParserCombinators.ReadP.gather1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3qYo: // global
           I64[Hp - 8] = sat_s3ovw_info;
           P64[Hp] = _s3ovr::P64;
           I64[Sp - 8] = block_c3qYj_info;
           R2 = Hp - 7;
           R1 = _s3ovq::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3qYj() //  [R1]
         { info_tbl: [(c3qYj,
                       label: block_c3qYj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qYj: // global
           R3 = R1;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.765023592 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather_closure" {
     Text.ParserCombinators.ReadP.gather_closure:
         const Text.ParserCombinators.ReadP.gather_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.gather_entry() //  [R2, R3]
         { info_tbl: [(c3qYN,
                       label: Text.ParserCombinators.ReadP.gather_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qYN: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.gather1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.769105825 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$trModule4_bytes" {
     Text.ParserCombinators.ReadP.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.771226535 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule3_closure" {
     Text.ParserCombinators.ReadP.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.772967952 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$trModule2_bytes" {
     Text.ParserCombinators.ReadP.$trModule2_bytes:
         I8[] [84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.774715552 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule1_closure" {
     Text.ParserCombinators.ReadP.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.77640983 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule_closure" {
     Text.ParserCombinators.ReadP.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.ParserCombinators.ReadP.$trModule3_closure+1;
         const Text.ParserCombinators.ReadP.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.778258841 UTC

[section ""data" . $krep_r3oqI_closure" {
     $krep_r3oqI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.780017635 UTC

[section ""data" . $krep1_r3oqJ_closure" {
     $krep1_r3oqJ_closure:
         const :_con_info;
         const $krep_r3oqI_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.781888022 UTC

[section ""data" . $krep2_r3oqK_closure" {
     $krep2_r3oqK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r3oqJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.783662443 UTC

[section ""data" . $krep3_r3oqL_closure" {
     $krep3_r3oqL_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.786040215 UTC

[section ""data" . $krep4_r3oqM_closure" {
     $krep4_r3oqM_closure:
         const :_con_info;
         const $krep2_r3oqK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.787799529 UTC

[section ""data" . $krep5_r3oqN_closure" {
     $krep5_r3oqN_closure:
         const :_con_info;
         const $krep3_r3oqL_closure+2;
         const $krep4_r3oqM_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.790086805 UTC

[section ""data" . $krep6_r3oqO_closure" {
     $krep6_r3oqO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep5_r3oqN_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.791883201 UTC

[section ""data" . $krep7_r3oqP_closure" {
     $krep7_r3oqP_closure:
         const :_con_info;
         const $krep6_r3oqO_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.793661287 UTC

[section ""data" . $krep8_r3oqQ_closure" {
     $krep8_r3oqQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep7_r3oqP_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.795424278 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tcP2_bytes" {
     Text.ParserCombinators.ReadP.$tcP2_bytes:
         I8[] [80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.797097115 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcP1_closure" {
     Text.ParserCombinators.ReadP.$tcP1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tcP2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.798951381 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcP_closure" {
     Text.ParserCombinators.ReadP.$tcP_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tcP1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 4287589432649596960;
         const 9029773818181158220;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.800798428 UTC

[section ""data" . $krep9_r3oqR_closure" {
     $krep9_r3oqR_closure:
         const :_con_info;
         const $krep3_r3oqL_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.803139815 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail1_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadP.$tcP_closure+1;
         const $krep9_r3oqR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.805199807 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Fail3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Fail3_bytes:
         I8[] [39,70,97,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.808224887 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail2_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Fail3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.810152816 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 16564457091671581868;
         const 4540703186775139959;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.812017749 UTC

[section ""data" . $krep10_r3oqS_closure" {
     $krep10_r3oqS_closure:
         const GHC.Types.KindRepFun_con_info;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.813819341 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result1_closure" {
     Text.ParserCombinators.ReadP.$tc'Result1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3oqL_closure+2;
         const $krep10_r3oqS_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.816158334 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Result3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Result3_bytes:
         I8[] [39,82,101,115,117,108,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.818365762 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result2_closure" {
     Text.ParserCombinators.ReadP.$tc'Result2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Result3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.820244556 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result_closure" {
     Text.ParserCombinators.ReadP.$tc'Result_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Result2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Result1_closure+4;
         const 14629176799732153257;
         const 2029199220309899277;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.822690362 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final1_closure" {
     Text.ParserCombinators.ReadP.$tc'Final1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r3oqQ_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.824829903 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Final3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Final3_bytes:
         I8[] [39,70,105,110,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.826596853 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final2_closure" {
     Text.ParserCombinators.ReadP.$tc'Final2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Final3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.828386445 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final_closure" {
     Text.ParserCombinators.ReadP.$tc'Final_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Final2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Final1_closure+4;
         const 9825883373667767852;
         const 1277540149077833820;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.830431176 UTC

[section ""data" . $krep11_r3oqT_closure" {
     $krep11_r3oqT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3oqK_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.832179731 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look1_closure" {
     Text.ParserCombinators.ReadP.$tc'Look1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r3oqT_closure+4;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.833951435 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Look3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Look3_bytes:
         I8[] [39,76,111,111,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.835685184 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look2_closure" {
     Text.ParserCombinators.ReadP.$tc'Look2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Look3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.837674924 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look_closure" {
     Text.ParserCombinators.ReadP.$tc'Look_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Look2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Look1_closure+4;
         const 11302519862508684236;
         const 969530656846011597;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.840086733 UTC

[section ""data" . $krep12_r3oqU_closure" {
     $krep12_r3oqU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3oqI_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.841880334 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get1_closure" {
     Text.ParserCombinators.ReadP.$tc'Get1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r3oqU_closure+4;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.84358825 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Get3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Get3_bytes:
         I8[] [39,71,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.845335396 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get2_closure" {
     Text.ParserCombinators.ReadP.$tc'Get2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Get3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.847065909 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get_closure" {
     Text.ParserCombinators.ReadP.$tc'Get_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Get2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Get1_closure+4;
         const 10806119809527641225;
         const 14618661019746688366;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.848940922 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tcReadP2_bytes" {
     Text.ParserCombinators.ReadP.$tcReadP2_bytes:
         I8[] [82,101,97,100,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.850704082 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcReadP1_closure" {
     Text.ParserCombinators.ReadP.$tcReadP1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tcReadP2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.852640204 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcReadP_closure" {
     Text.ParserCombinators.ReadP.$tcReadP_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tcReadP1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15640243629783811470;
         const 8988027559298507146;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.855732224 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_info;
 },
 sat_s3ovE_entry() //  [R1, R2]
         { info_tbl: [(c3qZR,
                       label: sat_s3ovE_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qZR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3qZV; else goto c3qZU;
       c3qZV: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qZU: // global
           _s3ovA::P64 = P64[R1 + 7];
           _s3ovB::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ovB::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3ovA::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovF_entry() //  [R1, R2]
         { info_tbl: [(c3qZW,
                       label: sat_s3ovF_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3qZW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r00; else goto c3qZZ;
       c3r00: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3qZZ: // global
           _s3ovz::P64 = P64[R1 + 7];
           _s3ovA::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ovE_info;
           P64[Hp - 8] = _s3ovA::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3ovz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP4_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3r01,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r01: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r05; else goto c3r04;
       c3r05: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r04: // global
           I64[Hp - 16] = sat_s3ovF_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3ovy::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ovy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.864792282 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_info;
 },
 sat_s3ovL_entry() //  [R1, R2]
         { info_tbl: [(c3r0t,
                       label: sat_s3ovL_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r0t: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3ovJ_entry() //  [R1]
         { info_tbl: [(c3r0w,
                       label: lvl4_s3ovJ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r0w: // global
           _s3ovJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3r0x; else goto c3r0y;
       c3r0y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3r0A; else goto c3r0z;
       c3r0A: // global
           HpAlloc = 16;
           goto c3r0x;
       c3r0x: // global
           R1 = _s3ovJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3r0z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ovJ::P64;
           _s3ovH::P64 = P64[_s3ovJ::P64 + 16];
           _s3ovI::P64 = P64[_s3ovJ::P64 + 24];
           I64[Hp - 8] = sat_s3ovL_info;
           P64[Hp] = _s3ovI::P64;
           R2 = Hp - 7;
           R1 = _s3ovH::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ovN_entry() //  [R1]
         { info_tbl: [(c3r0G,
                       label: sat_s3ovN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r0G: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP2_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3r0J,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r0J: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3r0N; else goto c3r0M;
       c3r0N: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r0M: // global
           I64[Hp - 40] = lvl4_s3ovJ_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3ovN_info;
           P64[Hp] = Hp - 40;
           _s3ovG::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3ovG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.875554942 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_info;
 },
 sat_s3ovW_entry() //  [R1, R2]
         { info_tbl: [(c3r1l,
                       label: sat_s3ovW_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r1l: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3r1p; else goto c3r1o;
       c3r1p: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r1o: // global
           _s3ovR::P64 = P64[R1 + 7];
           _s3ovT::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3ovT::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3ovR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ovX_entry() //  [R1, R2]
         { info_tbl: [(c3r1q,
                       label: sat_s3ovX_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r1q: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3r1u; else goto c3r1t;
       c3r1u: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r1t: // global
           _s3ovO::P64 = P64[R1 + 7];
           _s3ovQ::P64 = P64[R1 + 15];
           _s3ovR::P64 = P64[R1 + 23];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3ovO::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3ovW_info;
           P64[Hp - 8] = _s3ovR::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 15;
           R1 = _s3ovQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP3_entry() //  [R2,
                                                               R3, R4, R5]
         { info_tbl: [(c3r1v,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r1v: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3r1z; else goto c3r1y;
       c3r1z: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r1y: // global
           I64[Hp - 24] = sat_s3ovX_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 23;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.884969042 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_info;
 },
 sat_s3ow4_entry() //  [R1]
         { info_tbl: [(c3r20,
                       label: sat_s3ow4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r20: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ow5_entry() //  [R1, R2]
         { info_tbl: [(c3r23,
                       label: sat_s3ow5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r23: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3r27; else goto c3r26;
       c3r27: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r26: // global
           _s3ovZ::P64 = P64[R1 + 7];
           _s3ow0::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3ow0::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3ow4_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3ovZ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP1_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3r28,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r28: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r2c; else goto c3r2b;
       c3r2c: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r2b: // global
           I64[Hp - 16] = sat_s3ow5_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3ovY::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ovY::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.893091722 UTC

[section ""data" . $c>>_r3oqV_closure" {
     $c>>_r3oqV_closure:
         const $c>>_r3oqV_info;
 },
 sat_s3owb_entry() //  [R1]
         { info_tbl: [(c3r2A,
                       label: sat_s3owb_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r2A: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $c>>_r3oqV_entry() //  [R2, R3, R4]
         { info_tbl: [(c3r2D,
                       label: $c>>_r3oqV_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r2D: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3r2H; else goto c3r2G;
       c3r2H: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $c>>_r3oqV_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r2G: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3owb_info;
           P64[Hp] = Hp - 40;
           _s3ow6::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3ow6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.899860948 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure:
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info;
 },
 Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_entry() //  [R2, R3,
                                                             R4]
         { info_tbl: [(c3r2W,
                       label: Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r2W: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $c>>_r3oqV_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.903345659 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure+4;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.905204517 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadReadP1_closure+3;
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure+2;
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.908057042 UTC

[section ""data" . Text.ParserCombinators.ReadP.between1_closure" {
     Text.ParserCombinators.ReadP.between1_closure:
         const Text.ParserCombinators.ReadP.between1_info;
 },
 sat_s3owk_entry() //  [R1]
         { info_tbl: [(c3r3o,
                       label: sat_s3owk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r3o: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3owl_entry() //  [R1, R2]
         { info_tbl: [(c3r3r,
                       label: sat_s3owl_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r3r: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3r3v; else goto c3r3u;
       c3r3v: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r3u: // global
           _s3owd::P64 = P64[R1 + 7];
           _s3owf::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3owf::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3owk_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3owd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3owg_entry() //  [R1]
         { info_tbl: [(c3r3w,
                       label: lvl4_s3owg_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r3w: // global
           _s3owg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3r3x; else goto c3r3y;
       c3r3y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r3A; else goto c3r3z;
       c3r3A: // global
           HpAlloc = 24;
           goto c3r3x;
       c3r3x: // global
           R1 = _s3owg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3r3z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3owg::P64;
           _s3owd::P64 = P64[_s3owg::P64 + 16];
           _s3owe::P64 = P64[_s3owg::P64 + 24];
           _s3owf::P64 = P64[_s3owg::P64 + 32];
           I64[Hp - 16] = sat_s3owl_info;
           P64[Hp - 8] = _s3owd::P64;
           P64[Hp] = _s3owf::P64;
           R2 = Hp - 15;
           R1 = _s3owe::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3own_entry() //  [R1]
         { info_tbl: [(c3r3G,
                       label: sat_s3own_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r3G: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.between1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3r3J,
                       label: Text.ParserCombinators.ReadP.between1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r3J: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3r3N; else goto c3r3M;
       c3r3N: // global
           HpAlloc = 56;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.between1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r3M: // global
           I64[Hp - 48] = lvl4_s3owg_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = sat_s3own_info;
           P64[Hp] = Hp - 48;
           _s3owc::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3owc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.920675708 UTC

[section ""data" . Text.ParserCombinators.ReadP.between_closure" {
     Text.ParserCombinators.ReadP.between_closure:
         const Text.ParserCombinators.ReadP.between_info;
 },
 Text.ParserCombinators.ReadP.between_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3r4f,
                       label: Text.ParserCombinators.ReadP.between_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r4f: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.between1_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.925369241 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wcount_closure" {
     Text.ParserCombinators.ReadP.$wcount_closure:
         const Text.ParserCombinators.ReadP.$wcount_info;
 },
 sat_s3owA_entry() //  [R1, R2]
         { info_tbl: [(c3r4P,
                       label: sat_s3owA_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r4P: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r4T; else goto c3r4S;
       c3r4T: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r4S: // global
           _s3owu::P64 = P64[R1 + 7];
           _s3owx::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3owx::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3owu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3owB_entry() //  [R1, R2]
         { info_tbl: [(c3r4U,
                       label: sat_s3owB_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r4U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r4Y; else goto c3r4X;
       c3r4Y: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r4X: // global
           _s3ows::P64 = P64[R1 + 7];
           _s3owu::P64 = P64[R1 + 15];
           _s3oww::I64 = I64[R1 + 23];
           I64[Hp - 16] = sat_s3owA_info;
           P64[Hp - 8] = _s3owu::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3oww::I64;
           R1 = _s3ows::P64;
           call $wxs_s3ows_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3owE_entry() //  [R1, R2]
         { info_tbl: [(c3r56,
                       label: sat_s3owE_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r56: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r5a; else goto c3r59;
       c3r5a: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r59: // global
           _s3owu::P64 = P64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3owu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 $wxs_s3ows_entry() //  [R1, R2, R3]
         { info_tbl: [(c3r5e,
                       label: $wxs_s3ows_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r5e: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3r5i; else goto c3r5h;
       c3r5i: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r5h: // global
           _s3owp::P64 = P64[R1 + 6];
           if (R2 == 1) goto c3r5d; else goto c3r5c;
       c3r5d: // global
           I64[Hp - 24] = sat_s3owE_info;
           P64[Hp - 16] = R3;
           _c3r50::P64 = Hp - 23;
           Hp = Hp - 16;
           R2 = _c3r50::P64;
           R1 = _s3owp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3r5c: // global
           I64[Hp - 24] = sat_s3owB_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R3;
           I64[Hp] = R2 - 1;
           R2 = Hp - 23;
           R1 = _s3owp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wcount_entry() //  [R2, R3, R4]
         { info_tbl: [(c3r5m,
                       label: Text.ParserCombinators.ReadP.$wcount_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r5m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3r5q; else goto c3r5p;
       c3r5q: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wcount_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r5p: // global
           if (%MO_S_Ge_W64(0, R2)) goto c3r5k; else goto c3r5l;
       c3r5k: // global
           Hp = Hp - 16;
           R2 = GHC.Types.[]_closure+1;
           R1 = R4;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3r5l: // global
           I64[Hp - 8] = $wxs_s3ows_info;
           P64[Hp] = R3;
           R3 = R4;
           R2 = R2;
           R1 = Hp - 6;
           call $wxs_s3ows_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.939419666 UTC

[section ""data" . Text.ParserCombinators.ReadP.count1_closure" {
     Text.ParserCombinators.ReadP.count1_closure:
         const Text.ParserCombinators.ReadP.count1_info;
 },
 Text.ParserCombinators.ReadP.count1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3r5P,
                       label: Text.ParserCombinators.ReadP.count1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r5P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3r5Q; else goto c3r5R;
       c3r5Q: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.count1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r5R: // global
           I64[Sp - 24] = block_c3r5M_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3r5V; else goto c3r5N;
       u3r5V: // global
           call _c3r5M(R1) args: 0, res: 0, upd: 0;
       c3r5N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3r5M() //  [R1]
         { info_tbl: [(c3r5M,
                       label: block_c3r5M_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r5M: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$wcount_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.945440422 UTC

[section ""data" . Text.ParserCombinators.ReadP.count_closure" {
     Text.ParserCombinators.ReadP.count_closure:
         const Text.ParserCombinators.ReadP.count_info;
 },
 Text.ParserCombinators.ReadP.count_entry() //  [R2, R3, R4]
         { info_tbl: [(c3r69,
                       label: Text.ParserCombinators.ReadP.count_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r69: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.count1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.949109271 UTC

[section ""data" . Text.ParserCombinators.ReadP.option1_closure" {
     Text.ParserCombinators.ReadP.option1_closure:
         const Text.ParserCombinators.ReadP.option1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.option1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3r6n,
                       label: Text.ParserCombinators.ReadP.option1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r6n: // global
           _s3owM::P64 = R4;
           _s3owL::P64 = R3;
           _s3owK::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3r6o; else goto c3r6p;
       c3r6p: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3r6r; else goto c3r6q;
       c3r6r: // global
           HpAlloc = 32;
           goto c3r6o;
       c3r6o: // global
           R4 = _s3owM::P64;
           R3 = _s3owL::P64;
           R2 = _s3owK::P64;
           R1 = Text.ParserCombinators.ReadP.option1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r6q: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3owM::P64;
           P64[Hp] = _s3owK::P64;
           I64[Sp - 16] = block_c3r6l_info;
           R2 = _s3owM::P64;
           R1 = _s3owL::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3r6l() //  [R1]
         { info_tbl: [(c3r6l,
                       label: block_c3r6l_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r6l: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.955323338 UTC

[section ""data" . Text.ParserCombinators.ReadP.option_closure" {
     Text.ParserCombinators.ReadP.option_closure:
         const Text.ParserCombinators.ReadP.option_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.option_entry() //  [R2, R3, R4]
         { info_tbl: [(c3r6I,
                       label: Text.ParserCombinators.ReadP.option_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r6I: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.option1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.960348173 UTC

[section ""data" . Text.ParserCombinators.ReadP.optional1_closure" {
     Text.ParserCombinators.ReadP.optional1_closure:
         const Text.ParserCombinators.ReadP.optional1_info;
         const 0;
 },
 lvl4_s3owR_entry() //  [R1]
         { info_tbl: [(c3r6X,
                       label: lvl4_s3owR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r6X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3r6Y; else goto c3r6Z;
       c3r6Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3r6Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3owT_entry() //  [R1]
         { info_tbl: [(c3r75,
                       label: sat_s3owT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r75: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.optional1_entry() //  [R2, R3]
         { info_tbl: [(c3r7a,
                       label: Text.ParserCombinators.ReadP.optional1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r7a: // global
           _s3owQ::P64 = R3;
           _s3owP::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3r7b; else goto c3r7c;
       c3r7c: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3r7e; else goto c3r7d;
       c3r7e: // global
           HpAlloc = 40;
           goto c3r7b;
       c3r7b: // global
           R3 = _s3owQ::P64;
           R2 = _s3owP::P64;
           R1 = Text.ParserCombinators.ReadP.optional1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r7d: // global
           I64[Hp - 32] = lvl4_s3owR_info;
           P64[Hp - 16] = _s3owQ::P64;
           I64[Hp - 8] = sat_s3owT_info;
           _c3r6T::P64 = Hp - 32;
           P64[Hp] = _c3r6T::P64;
           I64[Sp - 16] = block_c3r78_info;
           R2 = Hp - 7;
           R1 = _s3owP::P64;
           P64[Sp - 8] = _c3r6T::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3r78() //  [R1]
         { info_tbl: [(c3r78,
                       label: block_c3r78_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r78: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.970256622 UTC

[section ""data" . Text.ParserCombinators.ReadP.optional_closure" {
     Text.ParserCombinators.ReadP.optional_closure:
         const Text.ParserCombinators.ReadP.optional_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.optional_entry() //  [R2, R3]
         { info_tbl: [(c3r7D,
                       label: Text.ParserCombinators.ReadP.optional_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r7D: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.optional1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.975123695 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy3_closure" {
     Text.ParserCombinators.ReadP.endBy3_closure:
         const Text.ParserCombinators.ReadP.endBy3_info;
         const 0;
 },
 sat_s3ox1_entry() //  [R1, R2]
         { info_tbl: [(c3r83,
                       label: sat_s3ox1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r83: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r87; else goto c3r86;
       c3r87: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r86: // global
           _s3owW::P64 = P64[R1 + 7];
           _s3owY::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3owY::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3owW::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ox2_entry() //  [R1, R2]
         { info_tbl: [(c3r88,
                       label: sat_s3ox2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r88: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r8c; else goto c3r8b;
       c3r8c: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r8b: // global
           _s3owV::P64 = P64[R1 + 7];
           _s3owW::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ox1_info;
           P64[Hp - 8] = _s3owW::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3owV::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ox3_entry() //  [R1]
         { info_tbl: [(c3r8d,
                       label: sat_s3ox3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r8d: // global
           _s3ox3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3r8e; else goto c3r8f;
       c3r8f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r8h; else goto c3r8g;
       c3r8h: // global
           HpAlloc = 24;
           goto c3r8e;
       c3r8e: // global
           R1 = _s3ox3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3r8g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ox3::P64;
           _s3owV::P64 = P64[_s3ox3::P64 + 16];
           _s3owW::P64 = P64[_s3ox3::P64 + 24];
           I64[Hp - 16] = sat_s3ox2_info;
           P64[Hp - 8] = _s3owV::P64;
           P64[Hp] = _s3owW::P64;
           R2 = Hp - 15;
           R1 = _s3owV::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.endBy3_entry() //  [R2, R3]
         { info_tbl: [(c3r8k,
                       label: Text.ParserCombinators.ReadP.endBy3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r8k: // global
           _s3owW::P64 = R3;
           _s3owV::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3r8l; else goto c3r8m;
       c3r8m: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3r8o; else goto c3r8n;
       c3r8o: // global
           HpAlloc = 32;
           goto c3r8l;
       c3r8l: // global
           R3 = _s3owW::P64;
           R2 = _s3owV::P64;
           R1 = Text.ParserCombinators.ReadP.endBy3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r8n: // global
           I64[Hp - 24] = sat_s3ox3_info;
           P64[Hp - 8] = _s3owV::P64;
           P64[Hp] = _s3owW::P64;
           I64[Sp - 16] = block_c3r8i_info;
           R2 = GHC.Types.[]_closure+1;
           R1 = _s3owW::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3r8i() //  [R1]
         { info_tbl: [(c3r8i,
                       label: block_c3r8i_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r8i: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.987953613 UTC

[section ""data" . Text.ParserCombinators.ReadP.many_closure" {
     Text.ParserCombinators.ReadP.many_closure:
         const Text.ParserCombinators.ReadP.many_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.many_entry() //  [R2, R3]
         { info_tbl: [(c3r8P,
                       label: Text.ParserCombinators.ReadP.many_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r8P: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:01.992335949 UTC

[section ""data" . Text.ParserCombinators.ReadP.many2_closure" {
     Text.ParserCombinators.ReadP.many2_closure:
         const Text.ParserCombinators.ReadP.many2_info;
         const 0;
 },
 sat_s3ox9_entry() //  [R1, R2]
         { info_tbl: [(c3r9b,
                       label: sat_s3ox9_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r9b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r9f; else goto c3r9e;
       c3r9f: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r9e: // global
           _s3ox5::P64 = P64[R1 + 7];
           _s3ox6::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3ox6::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3ox5::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxa_entry() //  [R1, R2]
         { info_tbl: [(c3r9g,
                       label: sat_s3oxa_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r9g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r9k; else goto c3r9j;
       c3r9k: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3r9j: // global
           _s3ox4::P64 = P64[R1 + 7];
           _s3ox5::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ox9_info;
           P64[Hp - 8] = _s3ox5::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3ox4::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.many2_entry() //  [R2, R3]
         { info_tbl: [(c3r9l,
                       label: Text.ParserCombinators.ReadP.many2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r9l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3r9p; else goto c3r9o;
       c3r9p: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.many2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3r9o: // global
           I64[Hp - 16] = sat_s3oxa_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s3ox4::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3ox4::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.001226405 UTC

[section ""data" . Text.ParserCombinators.ReadP.many1_closure" {
     Text.ParserCombinators.ReadP.many1_closure:
         const Text.ParserCombinators.ReadP.many1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.many1_entry() //  [R2, R3]
         { info_tbl: [(c3r9E,
                       label: Text.ParserCombinators.ReadP.many1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3r9E: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.many2_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.006067148 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy4_closure" {
     Text.ParserCombinators.ReadP.endBy4_closure:
         const Text.ParserCombinators.ReadP.endBy4_info;
         const 0;
 },
 sat_s3oxj_entry() //  [R1]
         { info_tbl: [(c3ra5,
                       label: sat_s3oxj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ra5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxk_entry() //  [R1, R2]
         { info_tbl: [(c3ra8,
                       label: sat_s3oxk_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ra8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rac; else goto c3rab;
       c3rac: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rab: // global
           _s3oxc::P64 = P64[R1 + 7];
           _s3oxf::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3oxf::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oxj_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3oxc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 p1_s3oxe_entry() //  [R1, R2]
         { info_tbl: [(c3rad,
                       label: p1_s3oxe_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rad: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rah; else goto c3rag;
       c3rah: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rag: // global
           _s3oxb::P64 = P64[R1 + 7];
           _s3oxc::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oxk_info;
           P64[Hp - 8] = _s3oxc::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oxb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxp_entry() //  [R1, R2]
         { info_tbl: [(c3rax,
                       label: sat_s3oxp_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rax: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3raB; else goto c3raA;
       c3raB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3raA: // global
           _s3oxd::P64 = P64[R1 + 7];
           _s3oxl::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oxl::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oxd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oxm_entry() //  [R1]
         { info_tbl: [(c3raC,
                       label: lvl4_s3oxm_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3raC: // global
           _s3oxm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3raD; else goto c3raE;
       c3raE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3raG; else goto c3raF;
       c3raG: // global
           HpAlloc = 24;
           goto c3raD;
       c3raD: // global
           R1 = _s3oxm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3raF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3oxm::P64;
           _s3oxd::P64 = P64[_s3oxm::P64 + 16];
           _s3oxe::P64 = P64[_s3oxm::P64 + 24];
           _s3oxl::P64 = P64[_s3oxm::P64 + 32];
           I64[Hp - 16] = sat_s3oxp_info;
           P64[Hp - 8] = _s3oxd::P64;
           P64[Hp] = _s3oxl::P64;
           R3 = Hp - 15;
           R2 = _s3oxe::P64;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oxr_entry() //  [R1]
         { info_tbl: [(c3raM,
                       label: sat_s3oxr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3raM: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxs_entry() //  [R1, R2]
         { info_tbl: [(c3raP,
                       label: sat_s3oxs_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3raP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3raT; else goto c3raS;
       c3raT: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3raS: // global
           _s3oxc::P64 = P64[R1 + 7];
           _s3oxd::P64 = P64[R1 + 15];
           _s3oxe::P64 = P64[R1 + 23];
           I64[Hp - 48] = lvl4_s3oxm_info;
           P64[Hp - 32] = _s3oxd::P64;
           P64[Hp - 24] = _s3oxe::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oxr_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3oxc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.endBy4_entry() //  [R2, R3, R4]
         { info_tbl: [(c3raU,
                       label: Text.ParserCombinators.ReadP.endBy4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3raU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3raY; else goto c3raX;
       c3raY: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.endBy4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3raX: // global
           I64[Hp - 48] = p1_s3oxe_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3oxs_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 47;
           _s3oxb::P64 = R2;
           R2 = Hp - 23;
           R1 = _s3oxb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.024934232 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy1_closure" {
     Text.ParserCombinators.ReadP.endBy1_closure:
         const Text.ParserCombinators.ReadP.endBy1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.endBy1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rbA,
                       label: Text.ParserCombinators.ReadP.endBy1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rbA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy4_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.029081132 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany2_closure" {
     Text.ParserCombinators.ReadP.skipMany2_closure:
         const Text.ParserCombinators.ReadP.skipMany2_info;
         const 0;
 },
 sat_s3oxx_entry() //  [R1]
         { info_tbl: [(c3rbU,
                       label: sat_s3oxx_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rbU: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipMany2_entry() //  [R2, R3]
         { info_tbl: [(c3rbX,
                       label: Text.ParserCombinators.ReadP.skipMany2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rbX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rbY; else goto c3rbZ;
       c3rbY: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipMany2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rbZ: // global
           I64[Sp - 16] = block_c3rbL_info;
           _s3oxt::P64 = R2;
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           P64[Sp - 8] = _s3oxt::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rbL() //  [R1]
         { info_tbl: [(c3rbL,
                       label: block_c3rbL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rbL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rc2; else goto c3rc1;
       c3rc2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rc1: // global
           I64[Hp - 8] = sat_s3oxx_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.036669309 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany_closure" {
     Text.ParserCombinators.ReadP.skipMany_closure:
         const Text.ParserCombinators.ReadP.skipMany_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.skipMany_entry() //  [R2, R3]
         { info_tbl: [(c3rck,
                       label: Text.ParserCombinators.ReadP.skipMany_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rck: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipMany2_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.04170171 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany3_closure" {
     Text.ParserCombinators.ReadP.skipMany3_closure:
         const Text.ParserCombinators.ReadP.skipMany3_info;
         const 0;
 },
 sat_s3oxD_entry() //  [R1]
         { info_tbl: [(c3rcI,
                       label: sat_s3oxD_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rcI: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oxA_entry() //  [R1]
         { info_tbl: [(c3rcL,
                       label: lvl4_s3oxA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rcL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3rcM; else goto c3rcN;
       c3rcM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rcN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3rcz_info;
           R2 = GHC.Tuple.()_closure+1;
           _s3oxy::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s3oxy::P64;
           Sp = Sp - 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3rcz() //  [R1]
         { info_tbl: [(c3rcz,
                       label: block_c3rcz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rcz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rcQ; else goto c3rcP;
       c3rcQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3rcP: // global
           I64[Hp - 8] = sat_s3oxD_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oxF_entry() //  [R1]
         { info_tbl: [(c3rcW,
                       label: sat_s3oxF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rcW: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipMany3_entry() //  [R2, R3]
         { info_tbl: [(c3rcZ,
                       label: Text.ParserCombinators.ReadP.skipMany3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rcZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rd3; else goto c3rd2;
       c3rd3: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipMany3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rd2: // global
           I64[Hp - 40] = lvl4_s3oxA_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s3oxF_info;
           P64[Hp] = Hp - 40;
           _s3oxy::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3oxy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.052978611 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany1_closure" {
     Text.ParserCombinators.ReadP.skipMany1_closure:
         const Text.ParserCombinators.ReadP.skipMany1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.skipMany1_entry() //  [R2, R3]
         { info_tbl: [(c3rdu,
                       label: Text.ParserCombinators.ReadP.skipMany1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rdu: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipMany3_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.058046623 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy3_closure" {
     Text.ParserCombinators.ReadP.sepBy3_closure:
         const Text.ParserCombinators.ReadP.sepBy3_info;
         const 0;
 },
 sat_s3oxN_entry() //  [R1]
         { info_tbl: [(c3rdQ,
                       label: sat_s3oxN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rdQ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 m2_s3oxJ_entry() //  [R1, R2]
         { info_tbl: [(c3rdT,
                       label: m2_s3oxJ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rdT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rdX; else goto c3rdW;
       c3rdX: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rdW: // global
           _s3oxG::P64 = P64[R1 + 7];
           _s3oxH::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3oxG::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oxN_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3oxH::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxR_entry() //  [R1, R2]
         { info_tbl: [(c3re9,
                       label: sat_s3oxR_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3re9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3red; else goto c3rec;
       c3red: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rec: // global
           _s3oxI::P64 = P64[R1 + 7];
           _s3oxO::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oxO::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oxI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oxS_entry() //  [R1, R2]
         { info_tbl: [(c3ree,
                       label: sat_s3oxS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ree: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rei; else goto c3reh;
       c3rei: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3reh: // global
           _s3oxI::P64 = P64[R1 + 7];
           _s3oxJ::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oxR_info;
           P64[Hp - 8] = _s3oxI::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3oxJ::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.sepBy3_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rej,
                       label: Text.ParserCombinators.ReadP.sepBy3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rej: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3ren; else goto c3rem;
       c3ren: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.sepBy3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rem: // global
           I64[Hp - 40] = m2_s3oxJ_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3oxS_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 39;
           _s3oxG::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3oxG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.070593241 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy1_closure" {
     Text.ParserCombinators.ReadP.sepBy1_closure:
         const Text.ParserCombinators.ReadP.sepBy1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.sepBy1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3reM,
                       label: Text.ParserCombinators.ReadP.sepBy1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3reM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.sepBy3_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.074915572 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy2_closure" {
     Text.ParserCombinators.ReadP.endBy2_closure:
         const Text.ParserCombinators.ReadP.endBy2_info;
         const 0;
 },
 sat_s3oy0_entry() //  [R1]
         { info_tbl: [(c3rfd,
                       label: sat_s3oy0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rfd: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oy1_entry() //  [R1, R2]
         { info_tbl: [(c3rfg,
                       label: sat_s3oy1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rfg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rfk; else goto c3rfj;
       c3rfk: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rfj: // global
           _s3oxU::P64 = P64[R1 + 7];
           _s3oxW::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3oxW::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3oy0_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3oxU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oy2_entry() //  [R1, R2]
         { info_tbl: [(c3rfl,
                       label: sat_s3oy2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rfl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rfp; else goto c3rfo;
       c3rfp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rfo: // global
           _s3oxT::P64 = P64[R1 + 7];
           _s3oxU::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oy1_info;
           P64[Hp - 8] = _s3oxU::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oxT::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.endBy2_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rfq,
                       label: Text.ParserCombinators.ReadP.endBy2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rfq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rfu; else goto c3rft;
       c3rfu: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.endBy2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rft: // global
           I64[Hp - 16] = sat_s3oy2_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R4;
           R2 = Hp - 15;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.085558299 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy_closure" {
     Text.ParserCombinators.ReadP.endBy_closure:
         const Text.ParserCombinators.ReadP.endBy_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.endBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rfP,
                       label: Text.ParserCombinators.ReadP.endBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rfP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.089671069 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy2_closure" {
     Text.ParserCombinators.ReadP.sepBy2_closure:
         const Text.ParserCombinators.ReadP.sepBy2_info;
         const 0;
 },
 sat_s3oy7_entry() //  [R1]
         { info_tbl: [(c3rg4,
                       label: sat_s3oy7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rg4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rg5; else goto c3rg6;
       c3rg5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rg6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.sepBy2_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rg9,
                       label: Text.ParserCombinators.ReadP.sepBy2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rg9: // global
           _s3oy5::P64 = R4;
           _s3oy4::P64 = R3;
           _s3oy3::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rga; else goto c3rgb;
       c3rgb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rgd; else goto c3rgc;
       c3rgd: // global
           HpAlloc = 24;
           goto c3rga;
       c3rga: // global
           R4 = _s3oy5::P64;
           R3 = _s3oy4::P64;
           R2 = _s3oy3::P64;
           R1 = Text.ParserCombinators.ReadP.sepBy2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rgc: // global
           I64[Hp - 16] = sat_s3oy7_info;
           P64[Hp] = _s3oy5::P64;
           I64[Sp - 16] = block_c3rg7_info;
           R4 = _s3oy5::P64;
           R3 = _s3oy4::P64;
           R2 = _s3oy3::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.sepBy3_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3rg7() //  [R1]
         { info_tbl: [(c3rg7,
                       label: block_c3rg7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rg7: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.098434641 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy_closure" {
     Text.ParserCombinators.ReadP.sepBy_closure:
         const Text.ParserCombinators.ReadP.sepBy_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.sepBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rgy,
                       label: Text.ParserCombinators.ReadP.sepBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rgy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.sepBy2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.102176463 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadP.$fMonadReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.105024849 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_info;
         const 0;
 },
 sat_s3oyi_entry() //  [R1]
         { info_tbl: [(c3rgZ,
                       label: sat_s3oyi_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rgZ: // global
           _s3oyi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rh0; else goto c3rh1;
       c3rh1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rh3; else goto c3rh2;
       c3rh3: // global
           HpAlloc = 24;
           goto c3rh0;
       c3rh0: // global
           R1 = _s3oyi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rh2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3oyi::P64;
           _s3oyb::P64 = P64[_s3oyi::P64 + 16];
           _s3oyc::P64 = P64[_s3oyi::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oyc::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3oyb::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oyf_entry() //  [R1, R2]
         { info_tbl: [(c3rha,
                       label: sat_s3oyf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rha: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rhe; else goto c3rhd;
       c3rhe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rhd: // global
           _s3oyb::P64 = P64[R1 + 7];
           _s3oyc::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oyc::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oyb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oyj_entry() //  [R1, R2]
         { info_tbl: [(c3rhh,
                       label: sat_s3oyj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rhh: // global
           _s3oyc::P64 = R2;
           _s3oyj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rhi; else goto c3rhj;
       c3rhj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3rhl; else goto c3rhk;
       c3rhl: // global
           HpAlloc = 56;
           goto c3rhi;
       c3rhi: // global
           R2 = _s3oyc::P64;
           R1 = _s3oyj::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rhk: // global
           _s3oya::P64 = P64[_s3oyj::P64 + 7];
           _s3oyb::P64 = P64[_s3oyj::P64 + 15];
           I64[Hp - 48] = sat_s3oyi_info;
           P64[Hp - 32] = _s3oyb::P64;
           P64[Hp - 24] = _s3oyc::P64;
           I64[Hp - 16] = sat_s3oyf_info;
           P64[Hp - 8] = _s3oyb::P64;
           P64[Hp] = _s3oyc::P64;
           I64[Sp - 16] = block_c3rhf_info;
           R2 = Hp - 15;
           R1 = _s3oya::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call some_v_s3oya_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rhf() //  [R1]
         { info_tbl: [(c3rhf,
                       label: block_c3rhf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rhf: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 some_v_s3oya_entry() //  [R1, R2]
         { info_tbl: [(c3rhp,
                       label: some_v_s3oya_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rhp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rht; else goto c3rhs;
       c3rht: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rhs: // global
           _s3oy8::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3oyj_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oy8::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP2_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3rhu,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rhu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rhy; else goto c3rhx;
       c3rhy: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rhx: // global
           I64[Hp - 8] = some_v_s3oya_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call some_v_s3oya_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.121684292 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_info;
         const 0;
 },
 sat_s3oyu_entry() //  [R1]
         { info_tbl: [(c3ri8,
                       label: sat_s3oyu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ri8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ri9; else goto c3ria;
       c3ri9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ria: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oyr_entry() //  [R1, R2]
         { info_tbl: [(c3rim,
                       label: sat_s3oyr_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rim: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3riq; else goto c3rip;
       c3riq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rip: // global
           _s3oyn::P64 = P64[R1 + 7];
           _s3oyo::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oyo::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oyn::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oys_entry() //  [R1, R2]
         { info_tbl: [(c3rir,
                       label: sat_s3oys_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rir: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3riv; else goto c3riu;
       c3riv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3riu: // global
           _s3oym::P64 = P64[R1 + 7];
           _s3oyn::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oyr_info;
           P64[Hp - 8] = _s3oyn::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3oym::P64;
           call many_v_s3oym_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 many_v_s3oym_entry() //  [R1, R2]
         { info_tbl: [(c3riy,
                       label: many_v_s3oym_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3riy: // global
           _s3oyn::P64 = R2;
           _s3oym::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3riz; else goto c3riA;
       c3riA: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3riC; else goto c3riB;
       c3riC: // global
           HpAlloc = 48;
           goto c3riz;
       c3riz: // global
           R2 = _s3oyn::P64;
           R1 = _s3oym::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3riB: // global
           _s3oyk::P64 = P64[_s3oym::P64 + 7];
           I64[Hp - 40] = sat_s3oyu_info;
           P64[Hp - 24] = _s3oyn::P64;
           I64[Hp - 16] = sat_s3oys_info;
           P64[Hp - 8] = _s3oym::P64;
           P64[Hp] = _s3oyn::P64;
           I64[Sp - 16] = block_c3riw_info;
           R2 = Hp - 15;
           R1 = _s3oyk::P64;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3riw() //  [R1]
         { info_tbl: [(c3riw,
                       label: block_c3riw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3riw: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP1_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3riG,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3riG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3riK; else goto c3riJ;
       c3riK: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3riJ: // global
           I64[Hp - 8] = many_v_s3oym_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call many_v_s3oym_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.136173649 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure+2;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.138622445 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadPlusReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadPlusReadP_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.141617325 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr3_closure" {
     Text.ParserCombinators.ReadP.chainr3_closure:
         const Text.ParserCombinators.ReadP.chainr3_info;
         const 0;
 },
 sat_s3oyE_entry() //  [R1, R2]
         { info_tbl: [(c3rjz,
                       label: sat_s3oyE_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rjz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3rjD; else goto c3rjC;
       c3rjD: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rjC: // global
           _s3oyz::P64 = P64[R1 + 7];
           _s3oyA::P64 = P64[R1 + 15];
           _s3oyB::P64 = P64[R1 + 23];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3oyB::P64;
           P64[Hp - 8] = _s3oyA::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3oyz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oyF_entry() //  [R1, R2]
         { info_tbl: [(c3rjE,
                       label: sat_s3oyF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rjE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3rjI; else goto c3rjH;
       c3rjI: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rjH: // global
           _s3oyy::P64 = P64[R1 + 7];
           _s3oyz::P64 = P64[R1 + 15];
           _s3oyA::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3oyE_info;
           P64[Hp - 16] = _s3oyz::P64;
           P64[Hp - 8] = _s3oyA::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3oyy::P64;
           call scan_s3oyy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oyI_entry() //  [R1, R2]
         { info_tbl: [(c3rjL,
                       label: sat_s3oyI_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rjL: // global
           _s3oyA::P64 = R2;
           _s3oyI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rjM; else goto c3rjN;
       c3rjN: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3rjP; else goto c3rjO;
       c3rjP: // global
           HpAlloc = 64;
           goto c3rjM;
       c3rjM: // global
           R2 = _s3oyA::P64;
           R1 = _s3oyI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rjO: // global
           _s3oyw::P64 = P64[_s3oyI::P64 + 7];
           _s3oyy::P64 = P64[_s3oyI::P64 + 15];
           _s3oyz::P64 = P64[_s3oyI::P64 + 23];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3oyz::P64;
           P64[Hp - 32] = _s3oyA::P64;
           I64[Hp - 24] = sat_s3oyF_info;
           P64[Hp - 16] = _s3oyy::P64;
           P64[Hp - 8] = _s3oyz::P64;
           P64[Hp] = _s3oyA::P64;
           I64[Sp - 16] = block_c3rjJ_info;
           R2 = Hp - 23;
           R1 = _s3oyw::P64;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rjJ() //  [R1]
         { info_tbl: [(c3rjJ,
                       label: block_c3rjJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rjJ: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3oyy_entry() //  [R1, R2]
         { info_tbl: [(c3rjT,
                       label: scan_s3oyy_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rjT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3rjX; else goto c3rjW;
       c3rjX: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rjW: // global
           _s3oyv::P64 = P64[R1 + 7];
           _s3oyw::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3oyI_info;
           P64[Hp - 16] = _s3oyw::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3oyv::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.chainr3_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rjY,
                       label: Text.ParserCombinators.ReadP.chainr3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rjY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rk2; else goto c3rk1;
       c3rk2: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.chainr3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rk1: // global
           I64[Hp - 16] = scan_s3oyy_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = R4;
           R1 = Hp - 15;
           call scan_s3oyy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.156540269 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr1_closure" {
     Text.ParserCombinators.ReadP.chainr1_closure:
         const Text.ParserCombinators.ReadP.chainr1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rks,
                       label: Text.ParserCombinators.ReadP.chainr1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rks: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainr3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.161332391 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr2_closure" {
     Text.ParserCombinators.ReadP.chainr2_closure:
         const Text.ParserCombinators.ReadP.chainr2_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr2_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3rkG,
                       label: Text.ParserCombinators.ReadP.chainr2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rkG: // global
           _s3oyM::P64 = R5;
           _s3oyL::P64 = R4;
           _s3oyK::P64 = R3;
           _s3oyJ::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rkH; else goto c3rkI;
       c3rkI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3rkK; else goto c3rkJ;
       c3rkK: // global
           HpAlloc = 32;
           goto c3rkH;
       c3rkH: // global
           R5 = _s3oyM::P64;
           R4 = _s3oyL::P64;
           R3 = _s3oyK::P64;
           R2 = _s3oyJ::P64;
           R1 = Text.ParserCombinators.ReadP.chainr2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rkJ: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3oyM::P64;
           P64[Hp] = _s3oyL::P64;
           I64[Sp - 16] = block_c3rkE_info;
           R4 = _s3oyM::P64;
           R3 = _s3oyK::P64;
           R2 = _s3oyJ::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.chainr3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3rkE() //  [R1]
         { info_tbl: [(c3rkE,
                       label: block_c3rkE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rkE: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.167569171 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr_closure" {
     Text.ParserCombinators.ReadP.chainr_closure:
         const Text.ParserCombinators.ReadP.chainr_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3rl1,
                       label: Text.ParserCombinators.ReadP.chainr_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rl1: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainr2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.172185571 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl3_closure" {
     Text.ParserCombinators.ReadP.chainl3_closure:
         const Text.ParserCombinators.ReadP.chainl3_info;
         const 0;
 },
 sat_s3oyY_entry() //  [R1, R2]
         { info_tbl: [(c3rlt,
                       label: sat_s3oyY_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rlt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3rlx; else goto c3rlw;
       c3rlx: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rlw: // global
           _s3oyS::P64 = P64[R1 + 7];
           _s3oyT::P64 = P64[R1 + 15];
           _s3oyU::P64 = P64[R1 + 23];
           _s3oyV::P64 = P64[R1 + 31];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3oyV::P64;
           P64[Hp - 8] = _s3oyT::P64;
           P64[Hp] = R2;
           R3 = _s3oyU::P64;
           R2 = Hp - 32;
           R1 = _s3oyS::P64;
           call rest_s3oyS_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oyZ_entry() //  [R1, R2]
         { info_tbl: [(c3rly,
                       label: sat_s3oyZ_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rly: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3rlC; else goto c3rlB;
       c3rlC: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rlB: // global
           _s3oyP::P64 = P64[R1 + 7];
           _s3oyS::P64 = P64[R1 + 15];
           _s3oyT::P64 = P64[R1 + 23];
           _s3oyU::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3oyY_info;
           P64[Hp - 24] = _s3oyS::P64;
           P64[Hp - 16] = _s3oyT::P64;
           P64[Hp - 8] = _s3oyU::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3oyP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 rest_s3oyS_entry() //  [R1, R2, R3]
         { info_tbl: [(c3rlF,
                       label: rest_s3oyS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rlF: // global
           _s3oyU::P64 = R3;
           _s3oyT::P64 = R2;
           _s3oyS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rlG; else goto c3rlH;
       c3rlH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3rlJ; else goto c3rlI;
       c3rlJ: // global
           HpAlloc = 72;
           goto c3rlG;
       c3rlG: // global
           R3 = _s3oyU::P64;
           R2 = _s3oyT::P64;
           R1 = _s3oyS::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rlI: // global
           _s3oyP::P64 = P64[_s3oyS::P64 + 6];
           _s3oyQ::P64 = P64[_s3oyS::P64 + 14];
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s3oyU::P64;
           P64[Hp - 40] = _s3oyT::P64;
           I64[Hp - 32] = sat_s3oyZ_info;
           P64[Hp - 24] = _s3oyP::P64;
           P64[Hp - 16] = _s3oyS::P64;
           P64[Hp - 8] = _s3oyT::P64;
           P64[Hp] = _s3oyU::P64;
           I64[Sp - 16] = block_c3rlD_info;
           R2 = Hp - 31;
           R1 = _s3oyQ::P64;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rlD() //  [R1]
         { info_tbl: [(c3rlD,
                       label: block_c3rlD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rlD: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oz3_entry() //  [R1, R2]
         { info_tbl: [(c3rlS,
                       label: sat_s3oz3_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rlS: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 15];
           call rest_s3oyS_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.chainl3_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rlV,
                       label: Text.ParserCombinators.ReadP.chainl3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rlV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rlZ; else goto c3rlY;
       c3rlZ: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.chainl3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rlY: // global
           I64[Hp - 40] = rest_s3oyS_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3oz3_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 38;
           _s3oyP::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3oyP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.187706948 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl1_closure" {
     Text.ParserCombinators.ReadP.chainl1_closure:
         const Text.ParserCombinators.ReadP.chainl1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rmq,
                       label: Text.ParserCombinators.ReadP.chainl1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rmq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainl3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.191412642 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl2_closure" {
     Text.ParserCombinators.ReadP.chainl2_closure:
         const Text.ParserCombinators.ReadP.chainl2_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl2_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3rmE,
                       label: Text.ParserCombinators.ReadP.chainl2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rmE: // global
           _s3oz7::P64 = R5;
           _s3oz6::P64 = R4;
           _s3oz5::P64 = R3;
           _s3oz4::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rmF; else goto c3rmG;
       c3rmG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3rmI; else goto c3rmH;
       c3rmI: // global
           HpAlloc = 32;
           goto c3rmF;
       c3rmF: // global
           R5 = _s3oz7::P64;
           R4 = _s3oz6::P64;
           R3 = _s3oz5::P64;
           R2 = _s3oz4::P64;
           R1 = Text.ParserCombinators.ReadP.chainl2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rmH: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3oz7::P64;
           P64[Hp] = _s3oz6::P64;
           I64[Sp - 16] = block_c3rmC_info;
           R4 = _s3oz7::P64;
           R3 = _s3oz5::P64;
           R2 = _s3oz4::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.chainl3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3rmC() //  [R1]
         { info_tbl: [(c3rmC,
                       label: block_c3rmC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rmC: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.198139067 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl_closure" {
     Text.ParserCombinators.ReadP.chainl_closure:
         const Text.ParserCombinators.ReadP.chainl_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3rmZ,
                       label: Text.ParserCombinators.ReadP.chainl_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rmZ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainl2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.20213348 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++2_closure" {
     Text.ParserCombinators.ReadP.<++2_closure:
         const Text.ParserCombinators.ReadP.<++2_info;
 },
 lvl4_s3ozd_entry() //  [R1]
         { info_tbl: [(c3rni,
                       label: lvl4_s3ozd_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rni: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rnj; else goto c3rnk;
       c3rnj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rnk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = I64[R1 + 24] - 1;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.<++2_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ozg_entry() //  [R1]
         { info_tbl: [(c3rnq,
                       label: sat_s3ozg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rnq: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.<++2_entry() //  [R2, R3]
         { info_tbl: [(c3rnw,
                       label: Text.ParserCombinators.ReadP.<++2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rnw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3rnA; else goto c3rnz;
       c3rnA: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.<++2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rnz: // global
           if (R2 == 0) goto c3rnv; else goto c3rnu;
       c3rnv: // global
           Hp = Hp - 64;
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3rnu: // global
           I64[Hp - 56] = lvl4_s3ozd_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3ozg_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.211738756 UTC

[section ""data" . Text.ParserCombinators.ReadP.$w<++_closure" {
     Text.ParserCombinators.ReadP.$w<++_closure:
         const Text.ParserCombinators.ReadP.$w<++_info;
         const 0;
 },
 lvl4_s3ozk_entry() //  [R1]
         { info_tbl: [(c3ro1,
                       label: lvl4_s3ozk_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ro1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ro2; else goto c3ro3;
       c3ro2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ro3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 probe_s3ozl_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ro6: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call probe_s3ozl_entry(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ozC_entry() //  [R1]
         { info_tbl: [(c3ron,
                       label: sat_s3ozC_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ron: // global
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 probe_s3ozl_entry() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c3rox,
                       label: probe_s3ozl_info
                       rep:HeapRep 1 ptrs {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rox: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3roy; else goto u3rpf;
       c3roy: // global
           R1 = R1;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       u3rpf: // global
           P64[Sp - 40] = R1;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call _c3ro7() args: 0, res: 0, upd: 0;
     }
 },
 _c3ro7() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ro7: // global
           _s3ozi::P64 = P64[P64[Sp] + 4];
           I64[Sp - 8] = block_c3roa_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3ozi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3rpk; else goto c3rob;
       u3rpk: // global
           call _c3roa(R1) args: 0, res: 0, upd: 0;
       c3rob: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3roa() //  [R1]
         { info_tbl: [(c3roa,
                       label: block_c3roa_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3roa: // global
           _c3row::P64 = R1 & 7;
           if (_c3row::P64 < 4) goto u3rpc; else goto u3rpe;
       u3rpc: // global
           if (_c3row::P64 < 3) goto u3rpd; else goto u3rpg;
       u3rpd: // global
           _s3ozn::P64 = P64[Sp + 24];
           if (_c3row::P64 < 2) goto c3ror; else goto c3ros;
       c3ror: // global
           I64[Sp] = block_c3roB_info;
           _s3ozr::P64 = P64[R1 + 7];
           R1 = _s3ozn::P64;
           P64[Sp + 24] = _s3ozr::P64;
           if (R1 & 7 != 0) goto u3rpl; else goto c3roD;
       u3rpl: // global
           call _c3roB(R1) args: 0, res: 0, upd: 0;
       c3roD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ros: // global
           I64[Sp] = block_c3roX_info;
           R2 = _s3ozn::P64;
           R1 = P64[R1 + 6];
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3rpg: // global
           Sp = Sp + 16;
           call _c3rot() args: 0, res: 0, upd: 0;
       u3rpe: // global
           _s3ozp::P64 = P64[Sp + 40];
           if (_c3row::P64 < 5) goto c3rou; else goto c3rov;
       c3rou: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rp7; else goto c3rp6;
       c3rp7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rp6: // global
           I64[Hp - 16] = sat_s3ozC_info;
           P64[Hp - 8] = _s3ozp::P64;
           P64[Hp] = R1;
           R3 = Hp - 15;
           R2 = I64[Sp + 32];
           Sp = Sp + 48;
           call Text.ParserCombinators.ReadP.<++2_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
       c3rov: // global
           R3 = _s3ozp::P64;
           R2 = R1;
           Sp = Sp + 48;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3roB() //  [R1]
         { info_tbl: [(c3roB,
                       label: block_c3roB_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3roB: // global
           if (R1 & 7 == 1) goto u3rph; else goto c3roR;
       u3rph: // global
           Sp = Sp + 16;
           call _c3rot() args: 0, res: 0, upd: 0;
       c3roR: // global
           I64[Sp] = block_c3roP_info;
           R2 = P64[R1 + 6];
           _s3ozu::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = I64[Sp + 32] + 1;
           P64[Sp + 32] = _s3ozu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3roP() //  [R1]
         { info_tbl: [(c3roP,
                       label: block_c3roP_info
                       rep:StackRep [False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3roP: // global
           P64[Sp + 16] = R1;
           _s3ozo::I64 = I64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 32];
           I64[Sp + 32] = _s3ozo::I64;
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c3ro7() args: 0, res: 0, upd: 0;
     }
 },
 _c3roX() //  [R1]
         { info_tbl: [(c3roX,
                       label: block_c3roX_info
                       rep:StackRep [False, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3roX: // global
           P64[Sp + 16] = R1;
           P64[Sp + 24] = P64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c3ro7() args: 0, res: 0, upd: 0;
     }
 },
 _c3rot() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rot: // global
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ozF_entry() //  [R1, R2]
         { info_tbl: [(c3rpw,
                       label: sat_s3ozF_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rpw: // global
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = R2;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           call probe_s3ozl_entry(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$w<++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rpz,
                       label: Text.ParserCombinators.ReadP.$w<++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rpz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3rpD; else goto c3rpC;
       c3rpD: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$w<++_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rpC: // global
           I64[Hp - 64] = lvl4_s3ozk_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = probe_s3ozl_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3ozF_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 36;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.236652066 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++1_closure" {
     Text.ParserCombinators.ReadP.<++1_closure:
         const Text.ParserCombinators.ReadP.<++1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.<++1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rqB,
                       label: Text.ParserCombinators.ReadP.<++1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rqB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3rqC; else goto c3rqD;
       c3rqC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.<++1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rqD: // global
           I64[Sp - 8] = block_c3rqy_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3rqy() //  [R1]
         { info_tbl: [(c3rqy,
                       label: block_c3rqy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rqy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rqG; else goto c3rqF;
       c3rqG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rqF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.242724173 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++_closure" {
     Text.ParserCombinators.ReadP.<++_closure:
         const Text.ParserCombinators.ReadP.<++_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.<++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rqU,
                       label: Text.ParserCombinators.ReadP.<++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rqU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.<++1_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.24814767 UTC

[section ""data" . Text.ParserCombinators.ReadP.manyTill1_closure" {
     Text.ParserCombinators.ReadP.manyTill1_closure:
         const Text.ParserCombinators.ReadP.manyTill1_info;
         const 0;
 },
 lvl4_s3ozQ_entry() //  [R1]
         { info_tbl: [(c3rre,
                       label: lvl4_s3ozQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rre: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rrf; else goto c3rrg;
       c3rrf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rrg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3ozS_entry() //  [R1]
         { info_tbl: [(c3rrm,
                       label: sat_s3ozS_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rrm: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3ozO_entry() //  [R1, R2]
         { info_tbl: [(c3rrp,
                       label: scan_s3ozO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rrp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3rrt; else goto c3rrs;
       c3rrt: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rrs: // global
           _s3ozM::P64 = P64[R1 + 7];
           I64[Hp - 32] = lvl4_s3ozQ_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3ozS_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 7;
           R1 = _s3ozM::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3ozZ_entry() //  [R1, R2]
         { info_tbl: [(c3rrL,
                       label: sat_s3ozZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rrL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rrP; else goto c3rrO;
       c3rrP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rrO: // global
           _s3ozV::P64 = P64[R1 + 7];
           _s3ozW::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3ozW::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3ozV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oA0_entry() //  [R1, R2]
         { info_tbl: [(c3rrQ,
                       label: sat_s3oA0_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rrQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rrU; else goto c3rrT;
       c3rrU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rrT: // global
           _s3ozU::P64 = P64[R1 + 7];
           _s3ozV::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3ozZ_info;
           P64[Hp - 8] = _s3ozV::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3ozU::P64;
           call scan2_s3ozU_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 scan1_s3ozT_entry() //  [R1, R2]
         { info_tbl: [(c3rrV,
                       label: scan1_s3ozT_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rrV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rrZ; else goto c3rrY;
       c3rrZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rrY: // global
           _s3ozL::P64 = P64[R1 + 7];
           _s3ozU::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3oA0_info;
           P64[Hp - 8] = _s3ozU::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3ozL::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 scan2_s3ozU_entry() //  [R1, R2]
         { info_tbl: [(c3rs7,
                       label: scan2_s3ozU_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rs7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3rs8; else goto c3rs9;
       c3rs8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rs9: // global
           I64[Sp - 8] = block_c3rs4_info;
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3rs4() //  [R1]
         { info_tbl: [(c3rs4,
                       label: block_c3rs4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rs4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rsc; else goto c3rsb;
       c3rsc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rsb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.manyTill1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rsd,
                       label: Text.ParserCombinators.ReadP.manyTill1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rsd: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3rsh; else goto c3rsg;
       c3rsh: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.manyTill1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rsg: // global
           I64[Hp - 56] = scan_s3ozO_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = scan1_s3ozT_info;
           P64[Hp - 32] = R2;
           _c3rrv::P64 = Hp - 15;
           P64[Hp - 24] = _c3rrv::P64;
           I64[Hp - 16] = scan2_s3ozU_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 39;
           R2 = R4;
           R1 = _c3rrv::P64;
           call scan2_s3ozU_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.268286343 UTC

[section ""data" . Text.ParserCombinators.ReadP.manyTill_closure" {
     Text.ParserCombinators.ReadP.manyTill_closure:
         const Text.ParserCombinators.ReadP.manyTill_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.manyTill_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rsW,
                       label: Text.ParserCombinators.ReadP.manyTill_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rsW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.manyTill1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.27245838 UTC

[section ""data" . Text.ParserCombinators.ReadP.eof1_closure" {
     Text.ParserCombinators.ReadP.eof1_closure:
         const Text.ParserCombinators.ReadP.eof1_info;
 },
 lvl4_s3oA5_entry() //  [R1]
         { info_tbl: [(c3rtb,
                       label: lvl4_s3oA5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rtb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rtc; else goto c3rtd;
       c3rtc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rtd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oAa_entry() //  [R1, R2]
         { info_tbl: [(c3rtq,
                       label: sat_s3oAa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rtq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rtr; else goto c3rts;
       c3rtr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rts: // global
           I64[Sp - 16] = block_c3rtj_info;
           _s3oA5::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3oA5::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3rtz; else goto c3rtk;
       u3rtz: // global
           call _c3rtj(R1) args: 0, res: 0, upd: 0;
       c3rtk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rtj() //  [R1]
         { info_tbl: [(c3rtj,
                       label: block_c3rtj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rtj: // global
           if (R1 & 7 == 1) goto c3rtn; else goto c3rto;
       c3rtn: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3rto: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.eof1_entry() //  [R2]
         { info_tbl: [(c3rtB,
                       label: Text.ParserCombinators.ReadP.eof1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rtB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3rtF; else goto c3rtE;
       c3rtF: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.eof1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rtE: // global
           I64[Hp - 48] = lvl4_s3oA5_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3oAa_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.282637795 UTC

[section ""data" . Text.ParserCombinators.ReadP.eof_closure" {
     Text.ParserCombinators.ReadP.eof_closure:
         const Text.ParserCombinators.ReadP.eof_info;
 },
 Text.ParserCombinators.ReadP.eof_entry() //  [R2]
         { info_tbl: [(c3ru8,
                       label: Text.ParserCombinators.ReadP.eof_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ru8: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.eof1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.286413616 UTC

[section ""data" . Text.ParserCombinators.ReadP.satisfy1_closure" {
     Text.ParserCombinators.ReadP.satisfy1_closure:
         const Text.ParserCombinators.ReadP.satisfy1_info;
 },
 sat_s3oAf_entry() //  [R1, R2]
         { info_tbl: [(c3ruu,
                       label: sat_s3oAf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ruu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3ruv; else goto c3ruw;
       c3ruv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ruw: // global
           I64[Sp - 24] = block_c3ruo_info;
           _s3oAd::P64 = R2;
           R2 = R2;
           _s3oAc::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s3oAc::P64;
           P64[Sp - 8] = _s3oAd::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ruo() //  [R1]
         { info_tbl: [(c3ruo,
                       label: block_c3ruo_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ruo: // global
           if (R1 & 7 == 1) goto c3rur; else goto c3rus;
       c3rur: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rus: // global
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.satisfy1_entry() //  [R2, R3]
         { info_tbl: [(c3ruE,
                       label: Text.ParserCombinators.ReadP.satisfy1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ruE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ruI; else goto c3ruH;
       c3ruI: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.satisfy1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ruH: // global
           I64[Hp - 32] = sat_s3oAf_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.295309103 UTC

[section ""data" . Text.ParserCombinators.ReadP.satisfy_closure" {
     Text.ParserCombinators.ReadP.satisfy_closure:
         const Text.ParserCombinators.ReadP.satisfy_info;
 },
 Text.ParserCombinators.ReadP.satisfy_entry() //  [R2, R3]
         { info_tbl: [(c3rv3,
                       label: Text.ParserCombinators.ReadP.satisfy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rv3: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.satisfy1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.299285505 UTC

[section ""data" . Text.ParserCombinators.ReadP.char1_closure" {
     Text.ParserCombinators.ReadP.char1_closure:
         const Text.ParserCombinators.ReadP.char1_info;
 },
 sat_s3oAo_entry() //  [R1, R2]
         { info_tbl: [(c3rvm,
                       label: sat_s3oAo_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rvm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3rvq; else goto c3rvr;
       c3rvq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rvr: // global
           I64[Sp - 24] = block_c3rvj_info;
           _s3oAh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s3oAh::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3rvE; else goto c3rvk;
       u3rvE: // global
           call _c3rvj(R1) args: 0, res: 0, upd: 0;
       c3rvk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rvj() //  [R1]
         { info_tbl: [(c3rvj,
                       label: block_c3rvj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rvj: // global
           I64[Sp] = block_c3rvp_info;
           _s3oAk::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3oAk::I64;
           if (R1 & 7 != 0) goto u3rvD; else goto c3rvt;
       u3rvD: // global
           call _c3rvp(R1) args: 0, res: 0, upd: 0;
       c3rvt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rvp() //  [R1]
         { info_tbl: [(c3rvp,
                       label: block_c3rvp_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rvp: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c3rvC; else goto c3rvB;
       c3rvC: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3rvB: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.char1_entry() //  [R2, R3]
         { info_tbl: [(c3rvG,
                       label: Text.ParserCombinators.ReadP.char1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rvG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3rvK; else goto c3rvJ;
       c3rvK: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.char1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rvJ: // global
           I64[Hp - 32] = sat_s3oAo_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.3089869 UTC

[section ""data" . Text.ParserCombinators.ReadP.char_closure" {
     Text.ParserCombinators.ReadP.char_closure:
         const Text.ParserCombinators.ReadP.char_info;
 },
 Text.ParserCombinators.ReadP.char_entry() //  [R2, R3]
         { info_tbl: [(c3rw9,
                       label: Text.ParserCombinators.ReadP.char_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rw9: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.char1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.314935665 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wstring_closure" {
     Text.ParserCombinators.ReadP.$wstring_closure:
         const Text.ParserCombinators.ReadP.$wstring_info;
 },
 sat_s3oAI_entry() //  [R1]
         { info_tbl: [(c3rwV,
                       label: sat_s3oAI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rwV: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3oAr_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c3rx2,
                       label: scan_s3oAr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rx2: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3rx3; else goto c3rx4;
       c3rx3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rx4: // global
           I64[Sp - 40] = block_c3rwp_info;
           _s3oAr::P64 = R1;
           _s3oAp::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3oAp::P64;
           P64[Sp - 24] = _s3oAr::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3rxq; else goto c3rwq;
       u3rxq: // global
           call _c3rwp(R1) args: 0, res: 0, upd: 0;
       c3rwq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rwp() //  [R1]
         { info_tbl: [(c3rwp,
                       label: block_c3rwp_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rwp: // global
           if (R1 & 7 == 1) goto c3rwZ; else goto c3rx0;
       c3rwZ: // global
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3rx0: // global
           I64[Sp] = block_c3rwv_info;
           _s3oAw::P64 = P64[R1 + 6];
           _s3oAx::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 8] = _s3oAx::P64;
           P64[Sp + 24] = _s3oAw::P64;
           if (R1 & 7 != 0) goto u3rxn; else goto c3rww;
       u3rxn: // global
           call _c3rwv(R1) args: 0, res: 0, upd: 0;
       c3rww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rwv() //  [R1]
         { info_tbl: [(c3rwv,
                       label: block_c3rwv_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rwv: // global
           if (R1 & 7 == 1) goto c3rxb; else goto c3rxd;
       c3rxb: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rxd: // global
           I64[Sp - 8] = block_c3rwB_info;
           _s3oAz::P64 = P64[R1 + 6];
           _s3oAA::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _s3oAA::P64;
           P64[Sp + 24] = _s3oAz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3rxo; else goto c3rwC;
       u3rxo: // global
           call _c3rwB(R1) args: 0, res: 0, upd: 0;
       c3rwC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rwB() //  [R1]
         { info_tbl: [(c3rwB,
                       label: block_c3rwB_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rwB: // global
           I64[Sp] = block_c3rwG_info;
           _s3oAC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3oAC::I64;
           if (R1 & 7 != 0) goto u3rxp; else goto c3rwH;
       u3rxp: // global
           call _c3rwG(R1) args: 0, res: 0, upd: 0;
       c3rwH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rwG() //  [R1]
         { info_tbl: [(c3rwG,
                       label: block_c3rwG_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rwG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3rxh; else goto c3rxg;
       c3rxh: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rxg: // global
           if (I64[Sp + 32] == I64[R1 + 7]) goto c3rxl; else goto c3rxj;
       c3rxl: // global
           I64[Hp - 72] = stg_ap_4_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 40];
           I64[Hp - 24] = sat_s3oAI_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rxj: // global
           Hp = Hp - 80;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oAK_entry() //  [R1, R2]
         { info_tbl: [(c3rxw,
                       label: sat_s3oAK_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rxw: // global
           R4 = P64[R1 + 15];
           R3 = R2;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 23];
           call scan_s3oAr_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wstring_entry() //  [R2, R3]
         { info_tbl: [(c3rxz,
                       label: Text.ParserCombinators.ReadP.$wstring_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rxz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rxD; else goto c3rxC;
       c3rxD: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wstring_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rxC: // global
           I64[Hp - 40] = scan_s3oAr_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3oAK_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 37;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.33375716 UTC

[section ""data" . Text.ParserCombinators.ReadP.string1_closure" {
     Text.ParserCombinators.ReadP.string1_closure:
         const Text.ParserCombinators.ReadP.string1_info;
 },
 Text.ParserCombinators.ReadP.string1_entry() //  [R2, R3]
         { info_tbl: [(c3ryx,
                       label: Text.ParserCombinators.ReadP.string1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ryx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ryy; else goto c3ryz;
       c3ryy: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.string1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ryz: // global
           I64[Sp - 8] = block_c3ryu_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ryu() //  [R1]
         { info_tbl: [(c3ryu,
                       label: block_c3ryu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ryu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ryC; else goto c3ryB;
       c3ryC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ryB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.339313543 UTC

[section ""data" . Text.ParserCombinators.ReadP.string_closure" {
     Text.ParserCombinators.ReadP.string_closure:
         const Text.ParserCombinators.ReadP.string_info;
 },
 Text.ParserCombinators.ReadP.string_entry() //  [R2, R3]
         { info_tbl: [(c3ryQ,
                       label: Text.ParserCombinators.ReadP.string_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ryQ: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.string1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.344096912 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wmunch_closure" {
     Text.ParserCombinators.ReadP.$wmunch_closure:
         const Text.ParserCombinators.ReadP.$wmunch_info;
 },
 sat_s3oB1_entry() //  [R1, R2]
         { info_tbl: [(c3rzr,
                       label: sat_s3oB1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rzr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rzv; else goto c3rzu;
       c3rzv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rzu: // global
           _s3oAT::P64 = P64[R1 + 7];
           _s3oAV::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oAV::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oAT::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oAY_entry() //  [R1]
         { info_tbl: [(c3rzw,
                       label: lvl4_s3oAY_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rzw: // global
           _s3oAY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rzx; else goto c3rzy;
       c3rzy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rzA; else goto c3rzz;
       c3rzA: // global
           HpAlloc = 24;
           goto c3rzx;
       c3rzx: // global
           R1 = _s3oAY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rzz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3oAY::P64;
           _s3oAR::P64 = P64[_s3oAY::P64 + 16];
           _s3oAT::P64 = P64[_s3oAY::P64 + 24];
           _s3oAV::P64 = P64[_s3oAY::P64 + 32];
           _s3oAW::P64 = P64[_s3oAY::P64 + 40];
           I64[Hp - 16] = sat_s3oB1_info;
           P64[Hp - 8] = _s3oAT::P64;
           P64[Hp] = _s3oAV::P64;
           R3 = Hp - 15;
           R2 = _s3oAW::P64;
           R1 = _s3oAR::P64;
           Sp = Sp - 16;
           call scan_s3oAR_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oB3_entry() //  [R1]
         { info_tbl: [(c3rzG,
                       label: sat_s3oB3_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rzG: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3oAR_entry() //  [R1, R2, R3]
         { info_tbl: [(c3rzN,
                       label: scan_s3oAR_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rzN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3rzO; else goto c3rzP;
       c3rzO: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rzP: // global
           I64[Sp - 32] = block_c3rz6_info;
           _s3oAR::P64 = R1;
           _s3oAP::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 24] = _s3oAP::P64;
           P64[Sp - 16] = _s3oAR::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3rA7; else goto c3rz7;
       u3rA7: // global
           call _c3rz6(R1) args: 0, res: 0, upd: 0;
       c3rz7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rz6() //  [R1]
         { info_tbl: [(c3rz6,
                       label: block_c3rz6_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rz6: // global
           if (R1 & 7 == 1) goto u3rA3; else goto c3rzL;
       u3rA3: // global
           Sp = Sp + 24;
           call _c3rzW() args: 0, res: 0, upd: 0;
       c3rzL: // global
           I64[Sp - 8] = block_c3rzc_info;
           _s3oAV::P64 = P64[R1 + 6];
           R2 = _s3oAV::P64;
           _s3oAW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s3oAW::P64;
           P64[Sp + 8] = _s3oAV::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rzc() //  [R1]
         { info_tbl: [(c3rzc,
                       label: block_c3rzc_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rzc: // global
           if (R1 & 7 == 1) goto u3rA4; else goto c3rzY;
       u3rA4: // global
           Sp = Sp + 32;
           call _c3rzW() args: 0, res: 0, upd: 0;
       c3rzY: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3rA1; else goto c3rA0;
       c3rA1: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rA0: // global
           I64[Hp - 72] = lvl4_s3oAY_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = sat_s3oB3_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3rzW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rzW: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oB5_entry() //  [R1, R2]
         { info_tbl: [(c3rAd,
                       label: sat_s3oB5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rAd: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 15];
           call scan_s3oAR_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wmunch_entry() //  [R2, R3]
         { info_tbl: [(c3rAg,
                       label: Text.ParserCombinators.ReadP.$wmunch_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rAg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3rAk; else goto c3rAj;
       c3rAk: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wmunch_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rAj: // global
           I64[Hp - 32] = scan_s3oAR_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3oB5_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 30;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.363866656 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch2_closure" {
     Text.ParserCombinators.ReadP.munch2_closure:
         const Text.ParserCombinators.ReadP.munch2_info;
 },
 Text.ParserCombinators.ReadP.munch2_entry() //  [R2, R3]
         { info_tbl: [(c3rBb,
                       label: Text.ParserCombinators.ReadP.munch2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rBb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3rBc; else goto c3rBd;
       c3rBc: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.munch2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rBd: // global
           I64[Sp - 8] = block_c3rB8_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3rB8() //  [R1]
         { info_tbl: [(c3rB8,
                       label: block_c3rB8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rB8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rBg; else goto c3rBf;
       c3rBg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rBf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.370476707 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch_closure" {
     Text.ParserCombinators.ReadP.munch_closure:
         const Text.ParserCombinators.ReadP.munch_info;
 },
 Text.ParserCombinators.ReadP.munch_entry() //  [R2, R3]
         { info_tbl: [(c3rBu,
                       label: Text.ParserCombinators.ReadP.munch_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rBu: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.munch2_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.374869299 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wmunch1_closure" {
     Text.ParserCombinators.ReadP.$wmunch1_closure:
         const Text.ParserCombinators.ReadP.$wmunch1_info;
 },
 sat_s3oBg_entry() //  [R1, R2]
         { info_tbl: [(c3rBV,
                       label: sat_s3oBg_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rBV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rBZ; else goto c3rBY;
       c3rBZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rBY: // global
           _s3oBb::P64 = P64[R1 + 7];
           _s3oBc::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3oBc::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3oBb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3oBj_entry() //  [R1, R2]
         { info_tbl: [(c3rC4,
                       label: sat_s3oBj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rC4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3rC5; else goto c3rC6;
       c3rC5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rC6: // global
           I64[Sp - 32] = block_c3rBK_info;
           _s3oBc::P64 = R2;
           R2 = R2;
           _s3oBa::P64 = P64[R1 + 7];
           _s3oBb::P64 = P64[R1 + 15];
           R1 = _s3oBa::P64;
           P64[Sp - 24] = _s3oBa::P64;
           P64[Sp - 16] = _s3oBb::P64;
           P64[Sp - 8] = _s3oBc::P64;
           Sp = Sp - 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rBK() //  [R1]
         { info_tbl: [(c3rBK,
                       label: block_c3rBK_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rBK: // global
           if (R1 & 7 == 1) goto c3rC1; else goto c3rC2;
       c3rC1: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rC2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rCe; else goto c3rCd;
       c3rCe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rCd: // global
           I64[Hp - 16] = sat_s3oBg_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_c3rC9_info;
           R3 = Hp - 15;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3rC9() //  [R1]
         { info_tbl: [(c3rC9,
                       label: block_c3rC9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rC9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rCh; else goto c3rCg;
       c3rCh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rCg: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wmunch1_entry() //  [R2, R3]
         { info_tbl: [(c3rCi,
                       label: Text.ParserCombinators.ReadP.$wmunch1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rCi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rCm; else goto c3rCl;
       c3rCm: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wmunch1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rCl: // global
           I64[Hp - 16] = sat_s3oBj_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.387305725 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch3_closure" {
     Text.ParserCombinators.ReadP.munch3_closure:
         const Text.ParserCombinators.ReadP.munch3_info;
 },
 Text.ParserCombinators.ReadP.munch3_entry() //  [R2, R3]
         { info_tbl: [(c3rCS,
                       label: Text.ParserCombinators.ReadP.munch3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rCS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3rCT; else goto c3rCU;
       c3rCT: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.munch3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rCU: // global
           I64[Sp - 8] = block_c3rCP_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch1_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3rCP() //  [R1]
         { info_tbl: [(c3rCP,
                       label: block_c3rCP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rCP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rCX; else goto c3rCW;
       c3rCX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rCW: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.393967359 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch1_closure" {
     Text.ParserCombinators.ReadP.munch1_closure:
         const Text.ParserCombinators.ReadP.munch1_info;
 },
 Text.ParserCombinators.ReadP.munch1_entry() //  [R2, R3]
         { info_tbl: [(c3rDb,
                       label: Text.ParserCombinators.ReadP.munch1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rDb: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.munch3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.399297738 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces2_closure" {
     Text.ParserCombinators.ReadP.skipSpaces2_closure:
         const Text.ParserCombinators.ReadP.skipSpaces2_info;
 },
 lvl4_s3oBE_entry() //  [R1]
         { info_tbl: [(c3rDR,
                       label: lvl4_s3oBE_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rDR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rDS; else goto c3rDT;
       c3rDS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rDT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oBG_entry() //  [R1]
         { info_tbl: [(c3rDZ,
                       label: sat_s3oBG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rDZ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oBL_entry() //  [R1]
         { info_tbl: [(c3rEi,
                       label: lvl4_s3oBL_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rEi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rEj; else goto c3rEk;
       c3rEj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rEk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oBN_entry() //  [R1]
         { info_tbl: [(c3rEq,
                       label: sat_s3oBN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rEq: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oBO_entry() //  [R1]
         { info_tbl: [(c3rEy,
                       label: lvl4_s3oBO_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rEy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rEz; else goto c3rEA;
       c3rEz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rEA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oBQ_entry() //  [R1]
         { info_tbl: [(c3rEG,
                       label: sat_s3oBQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rEG: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3oBR_entry() //  [R1]
         { info_tbl: [(c3rEO,
                       label: lvl4_s3oBR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rEO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rEP; else goto c3rEQ;
       c3rEP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rEQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3oBT_entry() //  [R1]
         { info_tbl: [(c3rEW,
                       label: sat_s3oBT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rEW: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipSpaces2_entry() //  [R2, R3]
         { info_tbl: [(c3rF3,
                       label: Text.ParserCombinators.ReadP.skipSpaces2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rF3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3rF4; else goto c3rF5;
       c3rF4: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipSpaces2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rF5: // global
           I64[Sp - 16] = block_c3rDm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3rFw; else goto c3rDn;
       u3rFw: // global
           call _c3rDm(R1) args: 0, res: 0, upd: 0;
       c3rDn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rDm() //  [R1]
         { info_tbl: [(c3rDm,
                       label: block_c3rDm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rDm: // global
           if (R1 & 7 == 1) goto c3rF0; else goto c3rF1;
       c3rF0: // global
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3rF1: // global
           I64[Sp - 8] = block_c3rDs_info;
           _s3oBs::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3oBs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3rFv; else goto c3rDt;
       u3rFv: // global
           call _c3rDs(R1) args: 0, res: 0, upd: 0;
       c3rDt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rDs() //  [R1]
         { info_tbl: [(c3rDs,
                       label: block_c3rDs_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rDs: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3rFb; else goto c3rFa;
       c3rFb: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rFa: // global
           _s3oBp::P64 = P64[Sp + 16];
           _s3oBs::P64 = P64[Sp + 8];
           _s3oBu::I64 = I64[R1 + 7];
           if (_s3oBu::I64 > 887) goto c3rFh; else goto c3rFu;
       c3rFh: // global
           (_s3oBC::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(_s3oBu::I64);
           if (_s3oBC::I64 == 0) goto c3rFj; else goto c3rFe;
       c3rFe: // global
           I64[Hp - 56] = lvl4_s3oBE_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBG_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rFu: // global
           if (_s3oBu::I64 == 32) goto c3rFt; else goto c3rFr;
       c3rFt: // global
           I64[Hp - 56] = lvl4_s3oBR_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBT_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rFr: // global
           if ((_s3oBu::I64 + -9) > 4) goto c3rFn; else goto c3rFp;
       c3rFn: // global
           if (_s3oBu::I64 != 160) goto c3rFj; else goto c3rFl;
       c3rFj: // global
           Hp = Hp - 64;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s3oBp::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3rFl: // global
           I64[Hp - 56] = lvl4_s3oBL_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBN_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rFp: // global
           I64[Hp - 56] = lvl4_s3oBO_info;
           P64[Hp - 40] = _s3oBp::P64;
           P64[Hp - 32] = _s3oBs::P64;
           I64[Hp - 24] = sat_s3oBQ_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.424176928 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces1_closure" {
     Text.ParserCombinators.ReadP.skipSpaces1_closure:
         const Text.ParserCombinators.ReadP.skipSpaces1_info;
 },
 sat_s3oBW_entry() //  [R1, R2]
         { info_tbl: [(c3rGJ,
                       label: sat_s3oBW_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rGJ: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipSpaces1_entry() //  [R2]
         { info_tbl: [(c3rGN,
                       label: Text.ParserCombinators.ReadP.skipSpaces1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rGN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3rGR; else goto c3rGQ;
       c3rGR: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipSpaces1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rGQ: // global
           I64[Hp - 24] = sat_s3oBW_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.431535544 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces_closure" {
     Text.ParserCombinators.ReadP.skipSpaces_closure:
         const Text.ParserCombinators.ReadP.skipSpaces_info;
 },
 Text.ParserCombinators.ReadP.skipSpaces_entry() //  [R2]
         { info_tbl: [(c3rH5,
                       label: Text.ParserCombinators.ReadP.skipSpaces_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rH5: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.435065597 UTC

[section ""data" . Text.ParserCombinators.ReadP.Get_closure" {
     Text.ParserCombinators.ReadP.Get_closure:
         const Text.ParserCombinators.ReadP.Get_info;
 },
 Text.ParserCombinators.ReadP.Get_entry() //  [R2]
         { info_tbl: [(c3rHh,
                       label: Text.ParserCombinators.ReadP.Get_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rHh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rHl; else goto c3rHk;
       c3rHl: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Get_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rHk: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.439123259 UTC

[section ""data" . Text.ParserCombinators.ReadP.Look_closure" {
     Text.ParserCombinators.ReadP.Look_closure:
         const Text.ParserCombinators.ReadP.Look_info;
 },
 Text.ParserCombinators.ReadP.Look_entry() //  [R2]
         { info_tbl: [(c3rHw,
                       label: Text.ParserCombinators.ReadP.Look_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rHw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rHA; else goto c3rHz;
       c3rHA: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Look_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rHz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.442899963 UTC

[section ""data" . Text.ParserCombinators.ReadP.Fail_closure" {
     Text.ParserCombinators.ReadP.Fail_closure:
         const Text.ParserCombinators.ReadP.Fail_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.444976715 UTC

[section ""data" . Text.ParserCombinators.ReadP.Result_closure" {
     Text.ParserCombinators.ReadP.Result_closure:
         const Text.ParserCombinators.ReadP.Result_info;
 },
 Text.ParserCombinators.ReadP.Result_entry() //  [R2, R3]
         { info_tbl: [(c3rHM,
                       label: Text.ParserCombinators.ReadP.Result_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rHM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rHQ; else goto c3rHP;
       c3rHQ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Result_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rHP: // global
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.449668952 UTC

[section ""data" . Text.ParserCombinators.ReadP.Final_closure" {
     Text.ParserCombinators.ReadP.Final_closure:
         const Text.ParserCombinators.ReadP.Final_info;
 },
 Text.ParserCombinators.ReadP.Final_entry() //  [R2]
         { info_tbl: [(c3rI1,
                       label: Text.ParserCombinators.ReadP.Final_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rI1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rI5; else goto c3rI4;
       c3rI5: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Final_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rI4: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.453410847 UTC

[Text.ParserCombinators.ReadP.Get_con_entry() //  [R1]
         { info_tbl: [(c3rIb,
                       label: Text.ParserCombinators.ReadP.Get_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,71,101,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rIb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.456724909 UTC

[Text.ParserCombinators.ReadP.Look_con_entry() //  [R1]
         { info_tbl: [(c3rIh,
                       label: Text.ParserCombinators.ReadP.Look_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,76,111,111,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rIh: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.460532486 UTC

[Text.ParserCombinators.ReadP.Fail_con_entry() //  [R1]
         { info_tbl: [(c3rIn,
                       label: Text.ParserCombinators.ReadP.Fail_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,70,97,105,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rIn: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.46395303 UTC

[Text.ParserCombinators.ReadP.Result_con_entry() //  [R1]
         { info_tbl: [(c3rIt,
                       label: Text.ParserCombinators.ReadP.Result_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,82,101,115,117,108,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rIt: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.467727568 UTC

[Text.ParserCombinators.ReadP.Final_con_entry() //  [R1]
         { info_tbl: [(c3rIz,
                       label: Text.ParserCombinators.ReadP.Final_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,70,105,110,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rIz: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:02.470815122 UTC

[section ""relreadonly" . S3oJX_srt" {
     S3oJX_srt:
         const Control.Exception.Base.patError_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const lvl1_r3oqF_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure;
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure;
         const Text.ParserCombinators.ReadP.choice_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const lvl3_r3oqH_closure;
         const Text.ParserCombinators.ReadP.gather1_closure;
         const Text.ParserCombinators.ReadP.option1_closure;
         const Text.ParserCombinators.ReadP.optional1_closure;
         const Text.ParserCombinators.ReadP.endBy3_closure;
         const Text.ParserCombinators.ReadP.many2_closure;
         const Text.ParserCombinators.ReadP.endBy4_closure;
         const Text.ParserCombinators.ReadP.skipMany2_closure;
         const Text.ParserCombinators.ReadP.skipMany3_closure;
         const Text.ParserCombinators.ReadP.sepBy3_closure;
         const Text.ParserCombinators.ReadP.endBy2_closure;
         const Text.ParserCombinators.ReadP.sepBy2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure;
         const Text.ParserCombinators.ReadP.chainr3_closure;
         const Text.ParserCombinators.ReadP.chainr2_closure;
         const Text.ParserCombinators.ReadP.chainl3_closure;
         const Text.ParserCombinators.ReadP.chainl2_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const Text.ParserCombinators.ReadP.<++1_closure;
         const Text.ParserCombinators.ReadP.manyTill1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.658525883 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:58:05.66003641 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_entry() //  [R2]
         { info_tbl: [(c3rTL,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rTL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rTP; else goto c3rTO;
       c3rTP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rTO: // global
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.664340303 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure:
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info;
 },
 Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_entry() //  []
         { info_tbl: [(c3rU1,
                       label: Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rU1: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.668266218 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP2_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP2_closure:
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_info;
 },
 sat_s3rIL_entry() //  [R1, R2]
         { info_tbl: [(c3rUi,
                       label: sat_s3rIL_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rUi: // global
           R4 = R2;
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fFunctorReadP2_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(c3rUl,
                       label: Text.ParserCombinators.ReadP.$fFunctorReadP2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rUl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rUp; else goto c3rUo;
       c3rUp: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fFunctorReadP2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rUo: // global
           I64[Hp - 16] = sat_s3rIL_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 15;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.678059463 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP1_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP1_closure:
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_info;
 },
 sat_s3rIR_entry() //  [R1]
         { info_tbl: [(c3rUI,
                       label: sat_s3rIR_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rUI: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fFunctorReadP1_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(c3rUL,
                       label: Text.ParserCombinators.ReadP.$fFunctorReadP1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rUL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rUP; else goto c3rUO;
       c3rUP: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fFunctorReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rUO: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rIR_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.683909487 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorReadP_closure" {
     Text.ParserCombinators.ReadP.$fFunctorReadP_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorReadP2_closure+3;
         const Text.ParserCombinators.ReadP.$fFunctorReadP1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.686062042 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_info;
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP5_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3rV7,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP5_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rV7: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.689692673 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure:
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_info;
 },
 Text.ParserCombinators.ReadP.$fMonadFailReadP1_entry() //  []
         { info_tbl: [(c3rVi,
                       label: Text.ParserCombinators.ReadP.$fMonadFailReadP1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rVi: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.693587536 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP1_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP1_closure:
         const Text.ParserCombinators.ReadP.$fMonadReadP1_info;
 },
 sat_s3rJ0_entry() //  [R1, R2]
         { info_tbl: [(c3rVz,
                       label: sat_s3rJ0_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rVz: // global
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fMonadReadP1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3rVC,
                       label: Text.ParserCombinators.ReadP.$fMonadReadP1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rVC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rVG; else goto c3rVF;
       c3rVG: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fMonadReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rVF: // global
           I64[Hp - 16] = sat_s3rJ0_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3rIW::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3rIW::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.701382774 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info;
 },
 sat_s3rJ7_entry() //  [R1, R2]
         { info_tbl: [(c3rW5,
                       label: sat_s3rJ7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rW5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rW6; else goto c3rW7;
       c3rW6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rW7: // global
           I64[Sp - 16] = block_c3rW3_info;
           R2 = R2;
           _s3rJ1::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rJ1::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rW3() //  [R1]
         { info_tbl: [(c3rW3,
                       label: block_c3rW3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rW3: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rJb_entry() //  [R1, R2]
         { info_tbl: [(c3rWk,
                       label: sat_s3rJb_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rWk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rWl; else goto c3rWm;
       c3rWl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rWm: // global
           I64[Sp - 16] = block_c3rWi_info;
           R2 = R2;
           _s3rJ1::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rJ1::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rWi() //  [R1]
         { info_tbl: [(c3rWi,
                       label: block_c3rWi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rWi: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rJf_entry() //  [R1]
         { info_tbl: [(c3rWx,
                       label: sat_s3rJf_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rWx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rWy; else goto c3rWz;
       c3rWy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rWz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rJm_entry() //  [R1, R2]
         { info_tbl: [(c3rWO,
                       label: sat_s3rJm_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rWO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rWT; else goto c3rWU;
       c3rWT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rWU: // global
           I64[Sp - 16] = block_c3rWL_info;
           _s3rJ1::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3rJ1::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3rWY; else goto c3rWM;
       u3rWY: // global
           call _c3rWL(R1) args: 0, res: 0, upd: 0;
       c3rWM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rWL() //  [R1]
         { info_tbl: [(c3rWL,
                       label: block_c3rWL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rWL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3rWX; else goto c3rWW;
       c3rWX: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rWW: // global
           _s3rJj::P64 = P64[R1 + 7];
           _s3rJk::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s3rJj::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _s3rJk::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rJn_entry() //  [R1]
         { info_tbl: [(c3rWZ,
                       label: sat_s3rJn_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rWZ: // global
           _s3rJn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rX0; else goto c3rX1;
       c3rX1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rX3; else goto c3rX2;
       c3rX3: // global
           HpAlloc = 16;
           goto c3rX0;
       c3rX0: // global
           R1 = _s3rJn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rX2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rJn::P64;
           _s3rJ1::P64 = P64[_s3rJn::P64 + 16];
           _s3rJg::P64 = P64[_s3rJn::P64 + 24];
           I64[Hp - 8] = sat_s3rJm_info;
           P64[Hp] = _s3rJ1::P64;
           R3 = _s3rJg::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry() //  [R2,
                                                                 R3]
         { info_tbl: [(c3rXb,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rXb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rXc; else goto c3rXd;
       c3rXc: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3rXd: // global
           I64[Sp - 16] = block_c3rVT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3rXA; else goto c3rVU;
       u3rXA: // global
           call _c3rVT(R1) args: 0, res: 0, upd: 0;
       c3rVU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rVT() //  [R1]
         { info_tbl: [(c3rVT,
                       label: block_c3rVT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rVT: // global
           _s3rJ1::P64 = P64[Sp + 8];
           _c3rXa::P64 = R1 & 7;
           if (_c3rXa::P64 < 4) goto u3rXx; else goto u3rXz;
       u3rXx: // global
           if (_c3rXa::P64 < 3) goto u3rXy; else goto c3rX7;
       u3rXy: // global
           if (_c3rXa::P64 < 2) goto c3rX5; else goto c3rX6;
       c3rX5: // global
           Hp = Hp + 40;
           _s3rJ3::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3rXl; else goto c3rXg;
       c3rXg: // global
           _s3rJ4::P64 = P64[_s3rJ3::P64 + 7];
           I64[Hp - 32] = sat_s3rJ7_info;
           P64[Hp - 24] = _s3rJ1::P64;
           P64[Hp - 16] = _s3rJ4::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rX6: // global
           Hp = Hp + 40;
           _s3rJ3::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3rXl; else goto c3rXk;
       c3rXl: // global
           HpAlloc = 40;
           R1 = _s3rJ3::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rXk: // global
           _s3rJ8::P64 = P64[_s3rJ3::P64 + 6];
           I64[Hp - 32] = sat_s3rJb_info;
           P64[Hp - 24] = _s3rJ1::P64;
           P64[Hp - 16] = _s3rJ8::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rX7: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3rXz: // global
           if (_c3rXa::P64 < 5) goto c3rX8; else goto c3rX9;
       c3rX8: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3rXs; else goto c3rXr;
       c3rXs: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rXr: // global
           _s3rJc::P64 = P64[R1 + 4];
           _s3rJd::P64 = P64[R1 + 12];
           I64[Hp - 80] = sat_s3rJf_info;
           P64[Hp - 64] = _s3rJ1::P64;
           P64[Hp - 56] = _s3rJd::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3rJ1::P64;
           P64[Hp - 24] = _s3rJc::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3rX9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3rXw; else goto c3rXv;
       c3rXw: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rXv: // global
           _s3rJg::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3rJn_info;
           P64[Hp - 24] = _s3rJ1::P64;
           P64[Hp - 16] = _s3rJg::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.735077393 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info;
 },
 sat_s3rJu_entry() //  [R1, R2]
         { info_tbl: [(c3rZ0,
                       label: sat_s3rJu_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rZ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rZ1; else goto c3rZ2;
       c3rZ1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rZ2: // global
           I64[Sp - 16] = block_c3rYY_info;
           R2 = R2;
           _s3rJo::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rJo::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rYY() //  [R1]
         { info_tbl: [(c3rYY,
                       label: block_c3rYY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rYY: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rJy_entry() //  [R1, R2]
         { info_tbl: [(c3rZf,
                       label: sat_s3rJy_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rZf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rZg; else goto c3rZh;
       c3rZg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rZh: // global
           I64[Sp - 16] = block_c3rZd_info;
           R2 = R2;
           _s3rJo::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rJo::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rZd() //  [R1]
         { info_tbl: [(c3rZd,
                       label: block_c3rZd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rZd: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rJB_entry() //  [R1]
         { info_tbl: [(c3rZs,
                       label: sat_s3rJB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rZs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rZt; else goto c3rZu;
       c3rZt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rZu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rJH_entry() //  [R1, R2]
         { info_tbl: [(c3rZJ,
                       label: sat_s3rJH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rZJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3rZN; else goto c3rZO;
       c3rZN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3rZO: // global
           I64[Sp - 16] = block_c3rZG_info;
           _s3rJo::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3rJo::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3rZS; else goto c3rZH;
       u3rZS: // global
           call _c3rZG(R1) args: 0, res: 0, upd: 0;
       c3rZH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rZG() //  [R1]
         { info_tbl: [(c3rZG,
                       label: block_c3rZG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rZG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3rZR; else goto c3rZQ;
       c3rZR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3rZQ: // global
           _s3rJG::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s3rJG::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rJI_entry() //  [R1]
         { info_tbl: [(c3rZT,
                       label: sat_s3rJI_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rZT: // global
           _s3rJI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3rZU; else goto c3rZV;
       c3rZV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3rZX; else goto c3rZW;
       c3rZX: // global
           HpAlloc = 16;
           goto c3rZU;
       c3rZU: // global
           R1 = _s3rJI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3rZW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rJI::P64;
           _s3rJo::P64 = P64[_s3rJI::P64 + 16];
           _s3rJC::P64 = P64[_s3rJI::P64 + 24];
           I64[Hp - 8] = sat_s3rJH_info;
           P64[Hp] = _s3rJo::P64;
           R3 = _s3rJC::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3s05,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s05: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3s06; else goto c3s07;
       c3s06: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3s07: // global
           I64[Sp - 16] = block_c3rYO_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3s0t; else goto c3rYP;
       u3s0t: // global
           call _c3rYO(R1) args: 0, res: 0, upd: 0;
       c3rYP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3rYO() //  [R1]
         { info_tbl: [(c3rYO,
                       label: block_c3rYO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3rYO: // global
           _s3rJo::P64 = P64[Sp + 8];
           _c3s04::P64 = R1 & 7;
           if (_c3s04::P64 < 4) goto u3s0q; else goto u3s0s;
       u3s0q: // global
           if (_c3s04::P64 < 3) goto u3s0r; else goto c3s01;
       u3s0r: // global
           if (_c3s04::P64 < 2) goto c3rZZ; else goto c3s00;
       c3rZZ: // global
           Hp = Hp + 40;
           _s3rJq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3s0f; else goto c3s0a;
       c3s0a: // global
           _s3rJr::P64 = P64[_s3rJq::P64 + 7];
           I64[Hp - 32] = sat_s3rJu_info;
           P64[Hp - 24] = _s3rJo::P64;
           P64[Hp - 16] = _s3rJr::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3s00: // global
           Hp = Hp + 40;
           _s3rJq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3s0f; else goto c3s0e;
       c3s0f: // global
           HpAlloc = 40;
           R1 = _s3rJq::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s0e: // global
           _s3rJv::P64 = P64[_s3rJq::P64 + 6];
           I64[Hp - 32] = sat_s3rJy_info;
           P64[Hp - 24] = _s3rJo::P64;
           P64[Hp - 16] = _s3rJv::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3s01: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3s0s: // global
           if (_c3s04::P64 < 5) goto c3s02; else goto c3s03;
       c3s02: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3s0l; else goto c3s0k;
       c3s0l: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s0k: // global
           _s3rJA::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3rJB_info;
           P64[Hp - 32] = _s3rJo::P64;
           P64[Hp - 24] = _s3rJA::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3rJo::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3s03: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3s0p; else goto c3s0o;
       c3s0p: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s0o: // global
           _s3rJC::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3rJI_info;
           P64[Hp - 24] = _s3rJo::P64;
           P64[Hp - 16] = _s3rJC::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.774003944 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fFunctorP_closure" {
     Text.ParserCombinators.ReadP.$fFunctorP_closure:
         const GHC.Base.C:Functor_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.779583956 UTC

[section ""data" . Text.ParserCombinators.ReadP.run_closure" {
     Text.ParserCombinators.ReadP.run_closure:
         const Text.ParserCombinators.ReadP.run_info;
 },
 sat_s3rJW_entry() //  [R1]
         { info_tbl: [(c3s1Q,
                       label: sat_s3rJW_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s1Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3s1R; else goto c3s1S;
       c3s1R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3s1S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.run_entry() //  [R2, R3]
         { info_tbl: [(c3s20,
                       label: Text.ParserCombinators.ReadP.run_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s20: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3s21; else goto u3s2H;
       c3s21: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.run_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u3s2H: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c3s1B() args: 0, res: 0, upd: 0;
     }
 },
 _c3s1B() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s1B: // global
           _s3rJJ::P64 = P64[Sp];
           I64[Sp] = block_c3s1E_info;
           R1 = _s3rJJ::P64;
           if (R1 & 7 != 0) goto u3s2M; else goto c3s1F;
       u3s2M: // global
           call _c3s1E(R1) args: 0, res: 0, upd: 0;
       c3s1F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s1E() //  [R1]
         { info_tbl: [(c3s1E,
                       label: block_c3s1E_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s1E: // global
           _s3rJK::P64 = P64[Sp + 8];
           _c3s1Z::P64 = R1 & 7;
           if (_c3s1Z::P64 < 4) goto u3s2E; else goto u3s2G;
       u3s2E: // global
           if (_c3s1Z::P64 < 3) goto u3s2F; else goto u3s2I;
       u3s2F: // global
           if (_c3s1Z::P64 < 2) goto c3s1U; else goto c3s1V;
       c3s1U: // global
           I64[Sp] = block_c3s24_info;
           _s3rJM::P64 = P64[R1 + 7];
           R1 = _s3rJK::P64;
           P64[Sp + 8] = _s3rJM::P64;
           if (R1 & 7 != 0) goto u3s2N; else goto c3s26;
       u3s2N: // global
           call _c3s24(R1) args: 0, res: 0, upd: 0;
       c3s26: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3s1V: // global
           I64[Sp] = block_c3s2n_info;
           R2 = _s3rJK::P64;
           R1 = P64[R1 + 6];
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3s2I: // global
           Sp = Sp + 16;
           call _c3s1W() args: 0, res: 0, upd: 0;
       u3s2G: // global
           if (_c3s1Z::P64 < 5) goto c3s1X; else goto c3s1Y;
       c3s1X: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3s2z; else goto c3s2y;
       c3s2z: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s2y: // global
           _s3rJT::P64 = P64[R1 + 4];
           _s3rJU::P64 = P64[R1 + 12];
           I64[Hp - 72] = sat_s3rJW_info;
           P64[Hp - 56] = _s3rJK::P64;
           P64[Hp - 48] = _s3rJU::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s3rJT::P64;
           P64[Hp - 24] = _s3rJK::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3s1Y: // global
           R1 = P64[R1 + 3] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3s24() //  [R1]
         { info_tbl: [(c3s24,
                       label: block_c3s24_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s24: // global
           if (R1 & 7 == 1) goto u3s2J; else goto c3s2h;
       u3s2J: // global
           Sp = Sp + 16;
           call _c3s1W() args: 0, res: 0, upd: 0;
       c3s2h: // global
           I64[Sp] = block_c3s2f_info;
           R2 = P64[R1 + 6];
           _s3rJP::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3rJP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s2f() //  [R1]
         { info_tbl: [(c3s2f,
                       label: block_c3s2f_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s2f: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c3s1B() args: 0, res: 0, upd: 0;
     }
 },
 _c3s2n() //  [R1]
         { info_tbl: [(c3s2n,
                       label: block_c3s2n_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s2n: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c3s1B() args: 0, res: 0, upd: 0;
     }
 },
 _c3s1W() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s1W: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.798433478 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wreadS_to_P_closure" {
     Text.ParserCombinators.ReadP.$wreadS_to_P_closure:
         const Text.ParserCombinators.ReadP.$wreadS_to_P_info;
 },
 sat_s3rKa_entry() //  [R1]
         { info_tbl: [(c3s42,
                       label: sat_s3rKa_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s42: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_s3rK0_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 go_s3rK0_entry() //  [R1, R2]
         { info_tbl: [(c3s49,
                       label: go_s3rK0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s49: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3s4a; else goto c3s4b;
       c3s4a: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s4b: // global
           I64[Sp - 24] = block_c3s3N_info;
           _s3rK0::P64 = R1;
           _s3rJZ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3rJZ::P64;
           P64[Sp - 8] = _s3rK0::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3s4t; else goto c3s3O;
       u3s4t: // global
           call _c3s3N(R1) args: 0, res: 0, upd: 0;
       c3s3O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s3N() //  [R1]
         { info_tbl: [(c3s3N,
                       label: block_c3s3N_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s3N: // global
           if (R1 & 7 == 1) goto c3s46; else goto c3s47;
       c3s46: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3s47: // global
           I64[Sp - 8] = block_c3s3T_info;
           _s3rK4::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3rK4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3s4s; else goto c3s3U;
       u3s4s: // global
           call _c3s3T(R1) args: 0, res: 0, upd: 0;
       c3s3U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s3T() //  [R1]
         { info_tbl: [(c3s3T,
                       label: block_c3s3T_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s3T: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3s4m; else goto c3s4l;
       c3s4m: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s4l: // global
           _s3rK6::P64 = P64[R1 + 7];
           _s3rK7::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3rKa_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3s4e_info;
           R2 = _s3rK6::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3rK7::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s4e() //  [R1]
         { info_tbl: [(c3s4e,
                       label: block_c3s4e_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s4e: // global
           _s3rK7::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3s4i_info;
           R3 = _s3rK7::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3s4i() //  [R1]
         { info_tbl: [(c3s4i,
                       label: block_c3s4i_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s4i: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rKg_entry() //  [R1, R2]
         { info_tbl: [(c3s4B,
                       label: sat_s3rKg_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s4B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3s4C; else goto c3s4D;
       c3s4C: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s4D: // global
           I64[Sp - 16] = block_c3s4z_info;
           R2 = R2;
           _s3rK0::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3rK0::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s4z() //  [R1]
         { info_tbl: [(c3s4z,
                       label: block_c3s4z_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s4z: // global
           _s3rK0::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3s4G_info;
           R2 = R1;
           R1 = _s3rK0::P64;
           Sp = Sp + 8;
           call go_s3rK0_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s4G() //  [R1]
         { info_tbl: [(c3s4G,
                       label: block_c3s4G_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s4G: // global
           if (R1 & 7 == 1) goto c3s4N; else goto c3s4R;
       c3s4N: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3s4R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3s4U; else goto c3s4T;
       c3s4U: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s4T: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R1;
           R1 = Hp - 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wreadS_to_P_entry() //  [R2, R3]
         { info_tbl: [(c3s4W,
                       label: Text.ParserCombinators.ReadP.$wreadS_to_P_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s4W: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3s50; else goto c3s4Z;
       c3s50: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wreadS_to_P_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3s4Z: // global
           I64[Hp - 32] = go_s3rK0_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3rKg_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.829966553 UTC

[section ""data" . Text.ParserCombinators.ReadP.readS_to_P1_closure" {
     Text.ParserCombinators.ReadP.readS_to_P1_closure:
         const Text.ParserCombinators.ReadP.readS_to_P1_info;
 },
 Text.ParserCombinators.ReadP.readS_to_P1_entry() //  [R2, R3]
         { info_tbl: [(c3s64,
                       label: Text.ParserCombinators.ReadP.readS_to_P1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s64: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3s65; else goto c3s66;
       c3s65: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.readS_to_P1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3s66: // global
           I64[Sp - 8] = block_c3s61_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3s61() //  [R1]
         { info_tbl: [(c3s61,
                       label: block_c3s61_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s61: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3s69; else goto c3s68;
       c3s69: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3s68: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.837911362 UTC

[section ""data" . Text.ParserCombinators.ReadP.readS_to_P_closure" {
     Text.ParserCombinators.ReadP.readS_to_P_closure:
         const Text.ParserCombinators.ReadP.readS_to_P_info;
 },
 Text.ParserCombinators.ReadP.readS_to_P_entry() //  [R2, R3]
         { info_tbl: [(c3s6p,
                       label: Text.ParserCombinators.ReadP.readS_to_P_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s6p: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.readS_to_P1_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.841378593 UTC

[section ""cstring" . lvl_r3oqE_bytes" {
     lvl_r3oqE_bytes:
         I8[] [84,101,120,116,47,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,47,82,101,97,100,80,46,104,115,58,40,49,51,52,44,51,41,45,40,49,53,55,44,53,50,41,124,102,117,110,99,116,105,111,110,32,60,124,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.8434785 UTC

[section ""data" . lvl1_r3oqF_closure" {
     lvl1_r3oqF_closure:
         const lvl1_r3oqF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3oqF_entry() //  [R1]
         { info_tbl: [(c3s6D,
                       label: lvl1_r3oqF_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s6D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3s6E; else goto c3s6F;
       c3s6E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3s6F: // global
           (_c3s6A::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3s6A::I64 == 0) goto c3s6C; else goto c3s6B;
       c3s6C: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3s6B: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3s6A::I64;
           R2 = lvl_r3oqE_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.853748051 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info;
         const 0;
 },
 sat_s3rKB_entry() //  [R1, R2]
         { info_tbl: [(c3s7E,
                       label: sat_s3rKB_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s7E: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3s7I; else goto c3s7H;
       c3s7I: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s7H: // global
           _s3rKv::P64 = P64[R1 + 7];
           _s3rKy::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rKy::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = _s3rKv::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rKH_entry() //  [R1, R2]
         { info_tbl: [(c3s7X,
                       label: sat_s3rKH_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s7X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3s7Y; else goto c3s7Z;
       c3s7Y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s7Z: // global
           I64[Sp - 16] = block_c3s7V_info;
           R2 = R2;
           _s3rKD::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3rKD::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s7V() //  [R1]
         { info_tbl: [(c3s7V,
                       label: block_c3s7V_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s7V: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rKM_entry() //  [R1, R2]
         { info_tbl: [(c3s8d,
                       label: sat_s3rKM_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s8d: // global
           _s3rKJ::P64 = R2;
           _s3rKM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3s8e; else goto c3s8f;
       c3s8f: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3s8h; else goto c3s8g;
       c3s8h: // global
           HpAlloc = 32;
           goto c3s8e;
       c3s8e: // global
           R2 = _s3rKJ::P64;
           R1 = _s3rKM::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s8g: // global
           _s3rKC::P64 = P64[_s3rKM::P64 + 7];
           _s3rKI::P64 = P64[_s3rKM::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rKI::P64;
           P64[Hp] = _s3rKJ::P64;
           I64[Sp - 16] = block_c3s8b_info;
           R2 = _s3rKJ::P64;
           R1 = _s3rKC::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s8b() //  [R1]
         { info_tbl: [(c3s8b,
                       label: block_c3s8b_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s8b: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rKQ_entry() //  [R1]
         { info_tbl: [(c3s8y,
                       label: sat_s3rKQ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s8y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3s8z; else goto c3s8A;
       c3s8z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3s8A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3s8w_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3s8w() //  [R1]
         { info_tbl: [(c3s8w,
                       label: block_c3s8w_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s8w: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rKR_entry() //  [R1, R2]
         { info_tbl: [(c3s8F,
                       label: sat_s3rKR_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s8F: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3s8J; else goto c3s8I;
       c3s8J: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s8I: // global
           _s3rKq::P64 = P64[R1 + 7];
           _s3rKN::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3rKQ_info;
           P64[Hp - 32] = _s3rKq::P64;
           P64[Hp - 24] = _s3rKN::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rKZ_entry() //  [R1]
         { info_tbl: [(c3s97,
                       label: sat_s3rKZ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s97: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3s9b; else goto c3s9c;
       c3s9b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3s9c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3s95_info;
           _s3rKW::P64 = P64[R1 + 32];
           R2 = _s3rKW::P64;
           _s3rKV::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s3rKV::P64;
           P64[Sp - 24] = _s3rKW::P64;
           Sp = Sp - 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3s95() //  [R1]
         { info_tbl: [(c3s95,
                       label: block_c3s95_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s95: // global
           I64[Sp] = block_c3s9a_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3s9a() //  [R1]
         { info_tbl: [(c3s9a,
                       label: block_c3s9a_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s9a: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rL0_entry() //  [R1, R2]
         { info_tbl: [(c3s9j,
                       label: sat_s3rL0_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s9j: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3s9n; else goto c3s9m;
       c3s9n: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s9m: // global
           _s3rKT::P64 = P64[R1 + 7];
           _s3rKV::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3rKZ_info;
           P64[Hp - 32] = _s3rKT::P64;
           P64[Hp - 24] = _s3rKV::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rL5_entry() //  [R1]
         { info_tbl: [(c3s9I,
                       label: sat_s3rL5_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s9I: // global
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rL6_entry() //  [R1]
         { info_tbl: [(c3s9L,
                       label: sat_s3rL6_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s9L: // global
           _s3rL6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3s9M; else goto c3s9N;
       c3s9N: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3s9P; else goto c3s9O;
       c3s9P: // global
           HpAlloc = 32;
           goto c3s9M;
       c3s9M: // global
           R1 = _s3rL6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3s9O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rL6::P64;
           _s3rL1::P64 = P64[_s3rL6::P64 + 16];
           _s3rL2::P64 = P64[_s3rL6::P64 + 24];
           _s3rL4::P64 = P64[_s3rL6::P64 + 32];
           I64[Hp - 24] = sat_s3rL5_info;
           P64[Hp - 8] = _s3rL2::P64;
           P64[Hp] = _s3rL4::P64;
           R3 = Hp - 24;
           R2 = _s3rL1::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rL7_entry() //  [R1, R2]
         { info_tbl: [(c3s9R,
                       label: sat_s3rL7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s9R: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3s9V; else goto c3s9U;
       c3s9V: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3s9U: // global
           _s3rL1::P64 = P64[R1 + 7];
           _s3rL2::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3rL6_info;
           P64[Hp - 32] = _s3rL1::P64;
           P64[Hp - 24] = _s3rL2::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rLb_entry() //  [R1]
         { info_tbl: [(c3sad,
                       label: sat_s3rLb_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sad: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sae; else goto c3saf;
       c3sae: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3saf: // global
           I64[Sp - 16] = block_c3sab_info;
           _s3rL9::P64 = P64[R1 + 24];
           R2 = _s3rL9::P64;
           R1 = P64[R1 + 16];
           P64[Sp - 8] = _s3rL9::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sab() //  [R1]
         { info_tbl: [(c3sab,
                       label: block_c3sab_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sab: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rLc_entry() //  [R1]
         { info_tbl: [(c3saj,
                       label: sat_s3rLc_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3saj: // global
           _s3rLc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sak; else goto c3sal;
       c3sal: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3san; else goto c3sam;
       c3san: // global
           HpAlloc = 32;
           goto c3sak;
       c3sak: // global
           R1 = _s3rLc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sam: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rLc::P64;
           _s3rL1::P64 = P64[_s3rLc::P64 + 16];
           _s3rL8::P64 = P64[_s3rLc::P64 + 24];
           _s3rL9::P64 = P64[_s3rLc::P64 + 32];
           I64[Hp - 24] = sat_s3rLb_info;
           P64[Hp - 8] = _s3rL8::P64;
           P64[Hp] = _s3rL9::P64;
           R3 = Hp - 24;
           R2 = _s3rL1::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rLd_entry() //  [R1, R2]
         { info_tbl: [(c3sap,
                       label: sat_s3rLd_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sap: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sat; else goto c3sas;
       c3sat: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sas: // global
           _s3rL1::P64 = P64[R1 + 7];
           _s3rL8::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3rLc_info;
           P64[Hp - 32] = _s3rL1::P64;
           P64[Hp - 24] = _s3rL8::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rLf_entry() //  [R1]
         { info_tbl: [(c3saA,
                       label: sat_s3rLf_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3saA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3saB; else goto c3saC;
       c3saB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3saC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rLi_entry() //  [R1]
         { info_tbl: [(c3saJ,
                       label: sat_s3rLi_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3saJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3saK; else goto c3saL;
       c3saK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3saL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rLq_entry() //  [R1, R2]
         { info_tbl: [(c3sb6,
                       label: sat_s3rLq_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sb6: // global
           _s3rLn::P64 = R2;
           _s3rLq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sb7; else goto c3sb8;
       c3sb8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sba; else goto c3sb9;
       c3sba: // global
           HpAlloc = 32;
           goto c3sb7;
       c3sb7: // global
           R2 = _s3rLn::P64;
           R1 = _s3rLq::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sb9: // global
           _s3rLk::P64 = P64[_s3rLq::P64 + 7];
           _s3rLm::P64 = P64[_s3rLq::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rLm::P64;
           P64[Hp] = _s3rLn::P64;
           I64[Sp - 16] = block_c3sb4_info;
           R2 = _s3rLn::P64;
           R1 = _s3rLk::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sb4() //  [R1]
         { info_tbl: [(c3sb4,
                       label: block_c3sb4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sb4: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rLt_entry() //  [R1]
         { info_tbl: [(c3sbk,
                       label: sat_s3rLt_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sbk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sbl; else goto c3sbm;
       c3sbl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sbm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c3sbs,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sbs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3sbt; else goto c3sbu;
       c3sbt: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sbu: // global
           I64[Sp - 24] = block_c3saM_info;
           R1 = R2;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3sdI; else goto c3saN;
       u3sdI: // global
           call _c3saM(R1) args: 0, res: 0, upd: 0;
       c3saN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3saM() //  [R1]
         { info_tbl: [(c3saM,
                       label: block_c3saM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3saM: // global
           _s3rKm::P64 = P64[Sp + 16];
           _c3sbr::P64 = R1 & 7;
           if (_c3sbr::P64 == 1) goto c3sbp; else goto u3sdq;
       c3sbp: // global
           I64[Sp - 8] = block_c3saS_info;
           _s3rLk::P64 = P64[R1 + 7];
           R1 = _s3rKm::P64;
           P64[Sp] = _s3rLk::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3sdF; else goto c3saT;
       u3sdF: // global
           call _c3saS(R1) args: 0, res: 0, upd: 0;
       c3saT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3sdq: // global
           if (_c3sbr::P64 == 4) goto c3sbq; else goto u3sdr;
       c3sbq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sdc; else goto c3sdb;
       c3sdc: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sdb: // global
           _s3rLr::P64 = P64[R1 + 4];
           _s3rLs::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3rLt_info;
           P64[Hp - 32] = _s3rKm::P64;
           P64[Hp - 24] = _s3rLs::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3rLr::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3sdr: // global
           Sp = Sp + 8;
           call _s3rKn() args: 0, res: 0, upd: 0;
     }
 },
 _c3saS() //  [R1]
         { info_tbl: [(c3saS,
                       label: block_c3saS_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3saS: // global
           if (R1 & 7 == 1) goto c3sd5; else goto u3sds;
       c3sd5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sd8; else goto c3sd7;
       c3sd8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sd7: // global
           _s3rLm::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_s3rLq_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3rLm::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3sds: // global
           Sp = Sp + 16;
           call _s3rKn() args: 0, res: 0, upd: 0;
     }
 },
 _s3rKn() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3rKn: // global
           I64[Sp - 8] = block_c3s6Y_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3sdJ; else goto c3s6Z;
       u3sdJ: // global
           call _c3s6Y(R1) args: 0, res: 0, upd: 0;
       c3s6Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s6Y() //  [R1]
         { info_tbl: [(c3s6Y,
                       label: block_c3s6Y_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s6Y: // global
           _s3rKl::P64 = P64[Sp + 8];
           if (R1 & 7 == 4) goto c3scT; else goto c3sby;
       c3scT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3scW; else goto c3scV;
       c3scW: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3scV: // global
           _s3rLg::P64 = P64[R1 + 4];
           _s3rLh::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3rLi_info;
           P64[Hp - 32] = _s3rKl::P64;
           P64[Hp - 24] = _s3rLh::P64;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = _s3rLg::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 12;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3sby: // global
           I64[Sp + 8] = block_c3s73_info;
           _s3rKp::P64 = R1;
           R1 = _s3rKl::P64;
           P64[Sp + 16] = _s3rKp::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3sdv; else goto c3s74;
       u3sdv: // global
           call _c3s73(R1) args: 0, res: 0, upd: 0;
       c3s74: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s73() //  [R1]
         { info_tbl: [(c3s73,
                       label: block_c3s73_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s73: // global
           _s3rKp::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto c3scR; else goto c3sbB;
       c3scR: // global
           R1 = _s3rKp::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3sbB: // global
           I64[Sp] = block_c3s78_info;
           _s3rKq::P64 = R1;
           R1 = _s3rKp::P64;
           P64[Sp + 8] = _s3rKq::P64;
           if (R1 & 7 != 0) goto u3sdw; else goto c3s79;
       u3sdw: // global
           call _c3s78(R1) args: 0, res: 0, upd: 0;
       c3s79: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s78() //  [R1]
         { info_tbl: [(c3s78,
                       label: block_c3s78_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s78: // global
           _s3rKq::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto c3scN; else goto c3scc;
       c3scN: // global
           R1 = _s3rKq::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3scc: // global
           I64[Sp - 8] = block_c3s8K_info;
           _s3rKr::P64 = R1;
           R1 = _s3rKq::P64;
           P64[Sp] = _s3rKr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3sdx; else goto c3s8L;
       u3sdx: // global
           call _c3s8K(R1) args: 0, res: 0, upd: 0;
       c3s8L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s8K() //  [R1]
         { info_tbl: [(c3s8K,
                       label: block_c3s8K_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s8K: // global
           _s3rKr::P64 = P64[Sp + 8];
           _c3sdh::P64 = R1 & 7;
           if (_c3sdh::P64 == 2) goto c3sci; else goto u3sdo;
       c3sci: // global
           I64[Sp - 8] = block_c3s8Q_info;
           _s3rKT::P64 = P64[R1 + 6];
           R1 = _s3rKr::P64;
           P64[Sp] = _s3rKT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3sdB; else goto c3s8R;
       u3sdB: // global
           call _c3s8Q(R1) args: 0, res: 0, upd: 0;
       c3s8R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3sdo: // global
           if (_c3sdh::P64 == 5) goto c3sct; else goto u3sdt;
       c3sct: // global
           I64[Sp + 8] = block_c3s9q_info;
           _s3rL1::P64 = P64[R1 + 3];
           R1 = _s3rKr::P64;
           P64[Sp + 16] = _s3rL1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3sdC; else goto c3s9r;
       u3sdC: // global
           call _c3s9q(R1) args: 0, res: 0, upd: 0;
       c3s9r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3sdt: // global
           Sp = Sp + 8;
           call _s3rKs() args: 0, res: 0, upd: 0;
     }
 },
 _c3s8Q() //  [R1]
         { info_tbl: [(c3s8Q,
                       label: block_c3s8Q_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s8Q: // global
           if (R1 & 7 == 5) goto c3sco; else goto u3sdu;
       c3sco: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3scr; else goto c3scq;
       c3scr: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3scq: // global
           _s3rKV::P64 = P64[R1 + 3];
           I64[Hp - 32] = sat_s3rL0_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3rKV::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3sdu: // global
           Sp = Sp + 16;
           call _s3rKs() args: 0, res: 0, upd: 0;
     }
 },
 _c3s9q() //  [R1]
         { info_tbl: [(c3s9q,
                       label: block_c3s9q_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s9q: // global
           _s3rL1::P64 = P64[Sp + 8];
           _c3sdi::P64 = R1 & 7;
           if (_c3sdi::P64 < 5) goto u3sdp; else goto c3scG;
       u3sdp: // global
           if (_c3sdi::P64 < 2) goto c3scw; else goto c3scB;
       c3scw: // global
           Hp = Hp + 40;
           _s3rL2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3scE; else goto c3scy;
       c3scy: // global
           I64[Hp - 32] = sat_s3rL7_info;
           P64[Hp - 24] = _s3rL1::P64;
           P64[Hp - 16] = _s3rL2::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3scB: // global
           Hp = Hp + 40;
           _s3rL2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3scE; else goto c3scD;
       c3scE: // global
           HpAlloc = 40;
           R1 = _s3rL2::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3scD: // global
           _s3rL8::P64 = P64[_s3rL2::P64 + 6];
           I64[Hp - 32] = sat_s3rLd_info;
           P64[Hp - 24] = _s3rL1::P64;
           P64[Hp - 16] = _s3rL8::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3scG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3scJ; else goto c3scI;
       c3scJ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3scI: // global
           _s3rLe::P64 = P64[R1 + 3];
           I64[Hp - 40] = sat_s3rLf_info;
           P64[Hp - 24] = _s3rL1::P64;
           P64[Hp - 16] = _s3rLe::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _s3rKs() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s3rKs: // global
           _s3rKr::P64 = P64[Sp];
           I64[Sp] = block_c3s7i_info;
           R1 = _s3rKr::P64;
           if (R1 & 7 != 0) goto u3sdK; else goto c3s7j;
       u3sdK: // global
           call _c3s7i(R1) args: 0, res: 0, upd: 0;
       c3s7j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s7i() //  [R1]
         { info_tbl: [(c3s7i,
                       label: block_c3s7i_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s7i: // global
           _s3rKq::P64 = P64[Sp + 8];
           if (R1 & 7 == 5) goto c3sc7; else goto c3sbG;
       c3sc7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sca; else goto c3sc9;
       c3sca: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sc9: // global
           _s3rKN::P64 = P64[R1 + 3];
           I64[Hp - 32] = sat_s3rKR_info;
           P64[Hp - 24] = _s3rKq::P64;
           P64[Hp - 16] = _s3rKN::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3sbG: // global
           I64[Sp] = block_c3s7n_info;
           _s3rKu::P64 = R1;
           R1 = _s3rKq::P64;
           P64[Sp + 8] = _s3rKu::P64;
           if (R1 & 7 != 0) goto u3sdy; else goto c3s7o;
       u3sdy: // global
           call _c3s7n(R1) args: 0, res: 0, upd: 0;
       c3s7o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s7n() //  [R1]
         { info_tbl: [(c3s7n,
                       label: block_c3s7n_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s7n: // global
           _s3rKu::P64 = P64[Sp + 8];
           if (R1 & 7 == 2) goto c3sbU; else goto c3sbJ;
       c3sbU: // global
           I64[Sp] = block_c3s7L_info;
           _s3rKC::P64 = P64[R1 + 6];
           R1 = _s3rKu::P64;
           P64[Sp + 8] = _s3rKC::P64;
           if (R1 & 7 != 0) goto u3sdA; else goto c3s7M;
       u3sdA: // global
           call _c3s7L(R1) args: 0, res: 0, upd: 0;
       c3s7M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3sbJ: // global
           I64[Sp] = block_c3s7s_info;
           _s3rKv::P64 = R1;
           R1 = _s3rKu::P64;
           P64[Sp + 8] = _s3rKv::P64;
           if (R1 & 7 != 0) goto u3sdz; else goto c3s7t;
       u3sdz: // global
           call _c3s7s(R1) args: 0, res: 0, upd: 0;
       c3s7t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3s7L() //  [R1]
         { info_tbl: [(c3s7L,
                       label: block_c3s7L_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s7L: // global
           _s3rKC::P64 = P64[Sp + 8];
           if (R1 & 7 < 2) goto c3sbX; else goto c3sc2;
       c3sbX: // global
           Hp = Hp + 40;
           _s3rKD::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3sc5; else goto c3sbZ;
       c3sbZ: // global
           I64[Hp - 32] = sat_s3rKH_info;
           P64[Hp - 24] = _s3rKC::P64;
           P64[Hp - 16] = _s3rKD::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3sc2: // global
           Hp = Hp + 40;
           _s3rKD::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3sc5; else goto c3sc4;
       c3sc5: // global
           HpAlloc = 40;
           R1 = _s3rKD::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sc4: // global
           _s3rKI::P64 = P64[_s3rKD::P64 + 6];
           I64[Hp - 32] = sat_s3rKM_info;
           P64[Hp - 24] = _s3rKC::P64;
           P64[Hp - 16] = _s3rKI::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3s7s() //  [R1]
         { info_tbl: [(c3s7s,
                       label: block_c3s7s_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3s7s: // global
           if (R1 & 7 < 2) goto c3sbN; else goto c3sbP;
       c3sbN: // global
           R1 = lvl1_r3oqF_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3sbP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sbS; else goto c3sbR;
       c3sbS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sbR: // global
           _s3rKy::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_s3rKB_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _s3rKy::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.940547182 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info;
         const 0;
 },
 sat_s3rLA_entry() //  [R1, R2]
         { info_tbl: [(c3sig,
                       label: sat_s3rLA_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sig: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sih; else goto c3sii;
       c3sih: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sii: // global
           I64[Sp - 16] = block_c3sie_info;
           R2 = R2;
           _s3rLv::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rLv::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sie() //  [R1]
         { info_tbl: [(c3sie,
                       label: block_c3sie_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sie: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rLE_entry() //  [R1, R2]
         { info_tbl: [(c3siv,
                       label: sat_s3rLE_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3siv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3siw; else goto c3six;
       c3siw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3six: // global
           I64[Sp - 16] = block_c3sit_info;
           R2 = R2;
           _s3rLv::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rLv::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sit() //  [R1]
         { info_tbl: [(c3sit,
                       label: block_c3sit_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sit: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rLI_entry() //  [R1]
         { info_tbl: [(c3siI,
                       label: sat_s3rLI_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3siI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3siJ; else goto c3siK;
       c3siJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3siK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rLU_entry() //  [R1]
         { info_tbl: [(c3sj7,
                       label: sat_s3rLU_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sj7: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_s3rLK_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 go_s3rLK_entry() //  [R1, R2]
         { info_tbl: [(c3sje,
                       label: go_s3rLK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sje: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3sjf; else goto c3sjg;
       c3sjf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sjg: // global
           I64[Sp - 24] = block_c3siS_info;
           _s3rLK::P64 = R1;
           _s3rLv::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3rLv::P64;
           P64[Sp - 8] = _s3rLK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3sjy; else goto c3siT;
       u3sjy: // global
           call _c3siS(R1) args: 0, res: 0, upd: 0;
       c3siT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3siS() //  [R1]
         { info_tbl: [(c3siS,
                       label: block_c3siS_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3siS: // global
           if (R1 & 7 == 1) goto c3sjb; else goto c3sjc;
       c3sjb: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3sjc: // global
           I64[Sp - 8] = block_c3siY_info;
           _s3rLO::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3rLO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3sjx; else goto c3siZ;
       u3sjx: // global
           call _c3siY(R1) args: 0, res: 0, upd: 0;
       c3siZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3siY() //  [R1]
         { info_tbl: [(c3siY,
                       label: block_c3siY_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3siY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sjr; else goto c3sjq;
       c3sjr: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sjq: // global
           _s3rLQ::P64 = P64[R1 + 7];
           _s3rLR::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3rLU_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3sjj_info;
           R2 = _s3rLQ::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3rLR::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sjj() //  [R1]
         { info_tbl: [(c3sjj,
                       label: block_c3sjj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sjj: // global
           _s3rLR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3sjn_info;
           R3 = _s3rLR::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3sjn() //  [R1]
         { info_tbl: [(c3sjn,
                       label: block_c3sjn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sjn: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c3sjG,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sjG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sjH; else goto c3sjI;
       c3sjH: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sjI: // global
           I64[Sp - 16] = block_c3si4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3skp; else goto c3si5;
       u3skp: // global
           call _c3si4(R1) args: 0, res: 0, upd: 0;
       c3si5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3si4() //  [R1]
         { info_tbl: [(c3si4,
                       label: block_c3si4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3si4: // global
           _s3rLv::P64 = P64[Sp + 8];
           _c3sjF::P64 = R1 & 7;
           if (_c3sjF::P64 < 4) goto u3skj; else goto u3skl;
       u3skj: // global
           if (_c3sjF::P64 < 3) goto u3skk; else goto u3skm;
       u3skk: // global
           if (_c3sjF::P64 < 2) goto c3sjA; else goto c3sjB;
       c3sjA: // global
           Hp = Hp + 40;
           _s3rLw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3sjQ; else goto c3sjL;
       c3sjL: // global
           _s3rLx::P64 = P64[_s3rLw::P64 + 7];
           I64[Hp - 32] = sat_s3rLA_info;
           P64[Hp - 24] = _s3rLv::P64;
           P64[Hp - 16] = _s3rLx::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3sjB: // global
           Hp = Hp + 40;
           _s3rLw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3sjQ; else goto c3sjP;
       c3sjQ: // global
           HpAlloc = 40;
           R1 = _s3rLw::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sjP: // global
           _s3rLB::P64 = P64[_s3rLw::P64 + 6];
           I64[Hp - 32] = sat_s3rLE_info;
           P64[Hp - 24] = _s3rLv::P64;
           P64[Hp - 16] = _s3rLB::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3skm: // global
           Sp = Sp + 16;
           call _c3ska() args: 0, res: 0, upd: 0;
       u3skl: // global
           if (_c3sjF::P64 < 5) goto c3sjD; else goto c3sjE;
       c3sjD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sjW; else goto c3sjV;
       c3sjW: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sjV: // global
           _s3rLF::P64 = P64[R1 + 4];
           _s3rLG::P64 = P64[R1 + 12];
           I64[Hp - 24] = sat_s3rLI_info;
           P64[Hp - 8] = _s3rLv::P64;
           P64[Hp] = _s3rLG::P64;
           I64[Sp] = block_c3sjT_info;
           R2 = _s3rLF::P64;
           R1 = _s3rLv::P64;
           P64[Sp + 8] = Hp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3sjE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sk4; else goto c3sk3;
       c3sk4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sk3: // global
           _s3rLJ::P64 = P64[R1 + 3];
           I64[Hp - 8] = go_s3rLK_info;
           P64[Hp] = _s3rLv::P64;
           I64[Sp + 8] = block_c3sk1_info;
           R2 = _s3rLJ::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s3rLK_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sjT() //  [R1]
         { info_tbl: [(c3sjT,
                       label: block_c3sjT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sjT: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3sk1() //  [R1]
         { info_tbl: [(c3sk1,
                       label: block_c3sk1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sk1: // global
           if (R1 & 7 == 1) goto u3skn; else goto c3ske;
       u3skn: // global
           Sp = Sp + 8;
           call _c3ska() args: 0, res: 0, upd: 0;
       c3ske: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3skh; else goto c3skg;
       c3skh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3skg: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R1;
           R1 = Hp - 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ska() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ska: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.975102927 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info;
         const 0;
 },
 sat_s3rM3_entry() //  [R1, R2]
         { info_tbl: [(c3sma,
                       label: sat_s3rM3_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sma: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sme; else goto c3smd;
       c3sme: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3smd: // global
           _s3rM0::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3rM0::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rM4_entry() //  [R1, R2]
         { info_tbl: [(c3smf,
                       label: sat_s3rM4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3smf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3smj; else goto c3smi;
       c3smj: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3smi: // global
           _s3rLZ::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s3rM3_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = _s3rLZ::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c3smk,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3smk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3smo; else goto c3smn;
       c3smo: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3smn: // global
           I64[Hp - 8] = sat_s3rM4_info;
           P64[Hp] = R3;
           R3 = Hp - 7;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.983613215 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info;
         const 0;
 },
 sat_s3rM7_entry() //  [R1]
         { info_tbl: [(c3smO,
                       label: sat_s3rM7_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3smO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3smP; else goto c3smQ;
       c3smP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3smQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_entry() //  [R2,
                                                                   R3]
         { info_tbl: [(c3smR,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3smR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3smV; else goto c3smU;
       c3smV: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3smU: // global
           I64[Hp - 24] = sat_s3rM7_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.990117863 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP1_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP1_closure:
         const Text.ParserCombinators.ReadP.Result_con_info;
         const GHC.Types.[]_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:05.992889087 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info;
         const 0;
 },
 m2_s3rMa_entry() //  [R1]
         { info_tbl: [(c3snj,
                       label: m2_s3rMa_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3snj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3snk; else goto c3snl;
       c3snk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3snl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fAlternativeP1_closure+4;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rMf_entry() //  [R1, R2]
         { info_tbl: [(c3sny,
                       label: sat_s3rMf_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sny: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3snC; else goto c3snB;
       c3snC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3snB: // global
           _s3rMc::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3rMc::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rMg_entry() //  [R1, R2]
         { info_tbl: [(c3snD,
                       label: sat_s3rMg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3snD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3snH; else goto c3snG;
       c3snH: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3snG: // global
           _s3rMa::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s3rMf_info;
           P64[Hp] = R2;
           R3 = Hp - 7;
           R2 = _s3rMa::P64;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 some_v_s3rM9_entry() //  [R1]
         { info_tbl: [(c3snK,
                       label: some_v_s3rM9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3snK: // global
           _s3rM9::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3snL; else goto c3snM;
       c3snM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3snO; else goto c3snN;
       c3snO: // global
           HpAlloc = 40;
           goto c3snL;
       c3snL: // global
           R1 = _s3rM9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3snN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rM9::P64;
           _s3rM8::P64 = P64[_s3rM9::P64 + 16];
           I64[Hp - 32] = m2_s3rMa_info;
           P64[Hp - 16] = _s3rM9::P64;
           I64[Hp - 8] = sat_s3rMg_info;
           P64[Hp] = Hp - 32;
           I64[Sp - 32] = block_c3snI_info;
           R3 = _s3rM8::P64;
           R2 = GHC.Types.:_closure+2;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3snI() //  [R1]
         { info_tbl: [(c3snI,
                       label: block_c3snI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3snI: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$csome_entry() //  [R2]
         { info_tbl: [(c3snS,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$csome_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3snS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3snW; else goto c3snV;
       c3snW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3snV: // global
           I64[Hp - 16] = some_v_s3rM9_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.007191543 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info;
         const 0;
 },
 sat_s3rMi_entry() //  [R1]
         { info_tbl: [(c3soH,
                       label: sat_s3rMi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3soH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3soI; else goto c3soJ;
       c3soI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3soJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_entry() //  [R2]
         { info_tbl: [(c3soK,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3soK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3soO; else goto c3soN;
       c3soO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3soN: // global
           I64[Hp - 16] = sat_s3rMi_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.013299203 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3sp6,
                       label: Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sp6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sp7; else goto c3sp8;
       c3sp7: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sp8: // global
           I64[Sp - 16] = block_c3sp4_info;
           _s3rMk::P64 = R3;
           R3 = R2;
           R2 = GHC.Base.breakpoint_closure+1;
           P64[Sp - 8] = _s3rMk::P64;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fApplicativeP_$c<$_entry(R3,
                                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3sp4() //  [R1]
         { info_tbl: [(c3sp4,
                       label: block_c3sp4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sp4: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.019659099 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info;
         const 0;
 },
 many_v_s3rMn_entry() //  [R1]
         { info_tbl: [(c3spw,
                       label: many_v_s3rMn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3spw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3spA; else goto c3spB;
       c3spA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3spB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3spu_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Types.:_closure+2;
           P64[Sp - 24] = R1;
           Sp = Sp - 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$cfmap_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3spu() //  [R1]
         { info_tbl: [(c3spu,
                       label: block_c3spu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3spu: // global
           _s3rMn::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3spz_info;
           R3 = _s3rMn::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_entry(R3,
                                                                        R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3spz() //  [R1]
         { info_tbl: [(c3spz,
                       label: block_c3spz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3spz: // global
           R3 = Text.ParserCombinators.ReadP.$fAlternativeP1_closure+4;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_entry() //  [R2]
         { info_tbl: [(c3spH,
                       label: Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3spH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3spL; else goto c3spK;
       c3spL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3spK: // global
           I64[Hp - 16] = many_v_s3rMn_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.03058979 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure" {
     Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure:
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_info;
         const 0;
 },
 sat_s3rMt_entry() //  [R1]
         { info_tbl: [(c3sqg,
                       label: sat_s3rMt_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sqg: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fMonadP_$c>>_entry() //  [R2, R3]
         { info_tbl: [(c3sqj,
                       label: Text.ParserCombinators.ReadP.$fMonadP_$c>>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sqj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sqn; else goto c3sqm;
       c3sqn: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sqm: // global
           I64[Hp - 8] = sat_s3rMt_info;
           P64[Hp] = R3;
           R3 = Hp - 7;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.036690969 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeP_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeP_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorP_closure+1;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.038676114 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadP_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure+2;
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.040472738 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeP_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeP_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeP_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure+2;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.04287845 UTC

[section ""data" . Text.ParserCombinators.ReadP.readP_to_S_closure" {
     Text.ParserCombinators.ReadP.readP_to_S_closure:
         const Text.ParserCombinators.ReadP.readP_to_S_info;
 },
 sat_s3rMv_entry() //  [R1]
         { info_tbl: [(c3sqJ,
                       label: sat_s3rMv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sqJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sqK; else goto c3sqL;
       c3sqK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sqL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.readP_to_S_entry() //  [R2]
         { info_tbl: [(c3sqM,
                       label: Text.ParserCombinators.ReadP.readP_to_S_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sqM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sqQ; else goto c3sqP;
       c3sqQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.readP_to_S_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sqP: // global
           I64[Hp - 16] = sat_s3rMv_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.048550668 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailP_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailP_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadP.$fMonadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailP_$cfail_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.050747562 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadPlusP_closure" {
     Text.ParserCombinators.ReadP.$fMonadPlusP_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadP_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.052795975 UTC

[section ""data" . Text.ParserCombinators.ReadP.get_closure" {
     Text.ParserCombinators.ReadP.get_closure:
         const Text.ParserCombinators.ReadP.get_info;
 },
 Text.ParserCombinators.ReadP.get_entry() //  [R2]
         { info_tbl: [(c3sr8,
                       label: Text.ParserCombinators.ReadP.get_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sr8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3src; else goto c3srb;
       c3src: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.get_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3srb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.056857338 UTC

[section ""data" . Text.ParserCombinators.ReadP.look_closure" {
     Text.ParserCombinators.ReadP.look_closure:
         const Text.ParserCombinators.ReadP.look_info;
 },
 Text.ParserCombinators.ReadP.look_entry() //  [R2]
         { info_tbl: [(c3sro,
                       label: Text.ParserCombinators.ReadP.look_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sro: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3srs; else goto c3srr;
       c3srs: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.look_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3srr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.060843255 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_info;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry() //  []
         { info_tbl: [(c3srD,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3srD: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.065368225 UTC

[section ""data" . Text.ParserCombinators.ReadP.pfail_closure" {
     Text.ParserCombinators.ReadP.pfail_closure:
         const Text.ParserCombinators.ReadP.pfail_info;
 },
 Text.ParserCombinators.ReadP.pfail_entry() //  [R2]
         { info_tbl: [(c3srP,
                       label: Text.ParserCombinators.ReadP.pfail_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3srP: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeReadP4_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.069100133 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3ss3,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ss3: // global
           _s3rMz::P64 = R4;
           _s3rMy::P64 = R3;
           _s3rMx::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ss4; else goto c3ss5;
       c3ss5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ss7; else goto c3ss6;
       c3ss7: // global
           HpAlloc = 32;
           goto c3ss4;
       c3ss4: // global
           R4 = _s3rMz::P64;
           R3 = _s3rMy::P64;
           R2 = _s3rMx::P64;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ss6: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rMy::P64;
           P64[Hp] = _s3rMz::P64;
           I64[Sp - 16] = block_c3ss1_info;
           R2 = _s3rMz::P64;
           R1 = _s3rMx::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ss1() //  [R1]
         { info_tbl: [(c3ss1,
                       label: block_c3ss1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ss1: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.075855977 UTC

[section ""data" . Text.ParserCombinators.ReadP.+++_closure" {
     Text.ParserCombinators.ReadP.+++_closure:
         const Text.ParserCombinators.ReadP.+++_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.+++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3ssq,
                       label: Text.ParserCombinators.ReadP.+++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ssq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.$fAlternativeReadP3_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.080176101 UTC

[section ""data" . Text.ParserCombinators.ReadP.choice_closure" {
     Text.ParserCombinators.ReadP.choice_closure:
         const Text.ParserCombinators.ReadP.choice_info;
         const 0;
 },
 ds2_s3rMJ_entry() //  [R1]
         { info_tbl: [(c3ssR,
                       label: ds2_s3rMJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ssR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ssS; else goto c3ssT;
       c3ssS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ssT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.choice_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rMN_entry() //  [R1, R2]
         { info_tbl: [(c3st2,
                       label: sat_s3rMN_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3st2: // global
           _s3rMK::P64 = R2;
           _s3rMN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3st3; else goto c3st4;
       c3st4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3st6; else goto c3st5;
       c3st6: // global
           HpAlloc = 32;
           goto c3st3;
       c3st3: // global
           R2 = _s3rMK::P64;
           R1 = _s3rMN::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3st5: // global
           _s3rME::P64 = P64[_s3rMN::P64 + 7];
           _s3rMJ::P64 = P64[_s3rMN::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rMJ::P64;
           P64[Hp] = _s3rMK::P64;
           I64[Sp - 16] = block_c3st0_info;
           R2 = _s3rMK::P64;
           R1 = _s3rME::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3st0() //  [R1]
         { info_tbl: [(c3st0,
                       label: block_c3st0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3st0: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.choice_entry() //  [R2]
         { info_tbl: [(c3ste,
                       label: Text.ParserCombinators.ReadP.choice_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ste: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3stf; else goto c3stg;
       c3stf: // global
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.choice_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3stg: // global
           I64[Sp - 8] = block_c3ssB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3stu; else goto c3ssC;
       u3stu: // global
           call _c3ssB(R1) args: 0, res: 0, upd: 0;
       c3ssC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ssB() //  [R1]
         { info_tbl: [(c3ssB,
                       label: block_c3ssB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ssB: // global
           if (R1 & 7 == 1) goto c3stb; else goto c3stc;
       c3stb: // global
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3stc: // global
           I64[Sp - 8] = block_c3ssH_info;
           _s3rME::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _s3rME::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3stt; else goto c3ssI;
       u3stt: // global
           call _c3ssH(R1) args: 0, res: 0, upd: 0;
       c3ssI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ssH() //  [R1]
         { info_tbl: [(c3ssH,
                       label: block_c3ssH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ssH: // global
           _s3rME::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3stn; else goto c3sto;
       c3stn: // global
           R1 = _s3rME::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c3sto: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3str; else goto c3stq;
       c3str: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3stq: // global
           I64[Hp - 40] = ds2_s3rMJ_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s3rMN_info;
           P64[Hp - 8] = _s3rME::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.094442005 UTC

[section ""cstring" . lvl2_r3oqG_bytes" {
     lvl2_r3oqG_bytes:
         I8[] [100,111,32,110,111,116,32,117,115,101,32,114,101,97,100,83,95,116,111,95,80,32,105,110,32,103,97,116,104,101,114,33]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.096586264 UTC

[section ""data" . lvl3_r3oqH_closure" {
     lvl3_r3oqH_closure:
         const lvl3_r3oqH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r3oqH_entry() //  [R1]
         { info_tbl: [(c3suh,
                       label: lvl3_r3oqH_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3suh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3sui; else goto c3suj;
       c3sui: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3suj: // global
           (_c3suc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3suc::I64 == 0) goto c3sue; else goto c3sud;
       c3sue: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3sud: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3suc::I64;
           I64[Sp - 24] = block_c3suf_info;
           R2 = lvl2_r3oqG_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3suf() //  [R1]
         { info_tbl: [(c3suf,
                       label: block_c3suf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3suf: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.105880393 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather_gath_closure" {
     Text.ParserCombinators.ReadP.gather_gath_closure:
         const Text.ParserCombinators.ReadP.gather_gath_info;
         const 0;
 },
 sat_s3rMW_entry() //  [R1, R2]
         { info_tbl: [(c3suX,
                       label: sat_s3rMW_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3suX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sv1; else goto c3sv0;
       c3sv1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sv0: // global
           _s3rMP::P64 = P64[R1 + 7];
           _s3rMT::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rMT::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rMP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rMY_entry() //  [R1, R2]
         { info_tbl: [(c3sv2,
                       label: sat_s3rMY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sv2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3sv3; else goto c3sv4;
       c3sv3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sv4: // global
           I64[Sp - 24] = block_c3suN_info;
           _s3rMT::P64 = R2;
           R2 = R2;
           _s3rMP::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _s3rMP::P64;
           P64[Sp - 8] = _s3rMT::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3suN() //  [R1]
         { info_tbl: [(c3suN,
                       label: block_c3suN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3suN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sv7; else goto c3sv6;
       c3sv7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sv6: // global
           I64[Hp - 16] = sat_s3rMW_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R3 = R1;
           R2 = Hp - 15;
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rN2_entry() //  [R1, R2]
         { info_tbl: [(c3svh,
                       label: sat_s3rN2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3svh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3svi; else goto c3svj;
       c3svi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3svj: // global
           I64[Sp - 16] = block_c3svf_info;
           R2 = R2;
           _s3rMP::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3rMP::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3svf() //  [R1]
         { info_tbl: [(c3svf,
                       label: block_c3svf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3svf: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rN7_entry() //  [R1]
         { info_tbl: [(c3svu,
                       label: sat_s3rN7_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3svu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3svv; else goto c3svw;
       c3svv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3svw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rN5_entry() //  [R1]
         { info_tbl: [(c3svB,
                       label: sat_s3rN5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3svB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3svC; else goto c3svD;
       c3svC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3svD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.gather_gath_entry() //  [R2, R3]
         { info_tbl: [(c3svL,
                       label: Text.ParserCombinators.ReadP.gather_gath_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3svL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3svM; else goto c3svN;
       c3svM: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.gather_gath_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3svN: // global
           I64[Sp - 16] = block_c3suD_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3swc; else goto c3suE;
       u3swc: // global
           call _c3suD(R1) args: 0, res: 0, upd: 0;
       c3suE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3suD() //  [R1]
         { info_tbl: [(c3suD,
                       label: block_c3suD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3suD: // global
           _s3rMP::P64 = P64[Sp + 8];
           _c3svK::P64 = R1 & 7;
           if (_c3svK::P64 < 4) goto u3sw9; else goto u3swb;
       u3sw9: // global
           if (_c3svK::P64 < 3) goto u3swa; else goto c3svH;
       u3swa: // global
           if (_c3svK::P64 < 2) goto c3svF; else goto c3svG;
       c3svF: // global
           Hp = Hp + 40;
           _s3rMR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3svV; else goto c3svQ;
       c3svQ: // global
           _s3rMS::P64 = P64[_s3rMR::P64 + 7];
           I64[Hp - 32] = sat_s3rMY_info;
           P64[Hp - 24] = _s3rMP::P64;
           P64[Hp - 16] = _s3rMS::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3svG: // global
           Hp = Hp + 40;
           _s3rMR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3svV; else goto c3svU;
       c3svV: // global
           HpAlloc = 40;
           R1 = _s3rMR::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3svU: // global
           _s3rMZ::P64 = P64[_s3rMR::P64 + 6];
           I64[Hp - 32] = sat_s3rN2_info;
           P64[Hp - 24] = _s3rMP::P64;
           P64[Hp - 16] = _s3rMZ::P64;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3svH: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3swb: // global
           if (_c3svK::P64 < 5) goto c3svI; else goto c3svJ;
       c3svI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sw1; else goto c3sw0;
       c3sw1: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sw0: // global
           _s3rN3::P64 = P64[R1 + 4];
           _s3rN4::P64 = P64[R1 + 12];
           I64[Hp - 48] = sat_s3rN7_info;
           P64[Hp - 32] = _s3rMP::P64;
           P64[Hp - 24] = _s3rN4::P64;
           I64[Hp - 16] = sat_s3rN5_info;
           P64[Hp] = _s3rMP::P64;
           I64[Sp] = block_c3svY_info;
           R2 = Hp - 16;
           R1 = _s3rN3::P64;
           P64[Sp + 8] = Hp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3svJ: // global
           R1 = lvl3_r3oqH_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3svY() //  [R1]
         { info_tbl: [(c3svY,
                       label: block_c3svY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3svY: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.129803115 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather1_closure" {
     Text.ParserCombinators.ReadP.gather1_closure:
         const Text.ParserCombinators.ReadP.gather1_info;
         const 0;
 },
 sat_s3rNe_entry() //  [R1, R2]
         { info_tbl: [(c3sxs,
                       label: sat_s3rNe_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sxs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sxw; else goto c3sxv;
       c3sxw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sxv: // global
           _s3rNa::P64 = P64[R1 + 7];
           _s3rNb::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = _s3rNb::P64;
           R2 = Hp - 15;
           R1 = _s3rNa::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rNf_entry() //  [R1, R2]
         { info_tbl: [(c3sxy,
                       label: sat_s3rNf_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sxy: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sxC; else goto c3sxB;
       c3sxC: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sxB: // global
           _s3rNa::P64 = P64[R1 + 7];
           I64[Hp - 40] = sat_s3rNe_info;
           P64[Hp - 32] = _s3rNa::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.gather1_entry() //  [R2, R3]
         { info_tbl: [(c3sxF,
                       label: Text.ParserCombinators.ReadP.gather1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sxF: // global
           _s3rNa::P64 = R3;
           _s3rN9::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3sxG; else goto c3sxH;
       c3sxH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sxJ; else goto c3sxI;
       c3sxJ: // global
           HpAlloc = 16;
           goto c3sxG;
       c3sxG: // global
           R3 = _s3rNa::P64;
           R2 = _s3rN9::P64;
           R1 = Text.ParserCombinators.ReadP.gather1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sxI: // global
           I64[Hp - 8] = sat_s3rNf_info;
           P64[Hp] = _s3rNa::P64;
           I64[Sp - 8] = block_c3sxD_info;
           R2 = Hp - 7;
           R1 = _s3rN9::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sxD() //  [R1]
         { info_tbl: [(c3sxD,
                       label: block_c3sxD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sxD: // global
           R3 = R1;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.141148559 UTC

[section ""data" . Text.ParserCombinators.ReadP.gather_closure" {
     Text.ParserCombinators.ReadP.gather_closure:
         const Text.ParserCombinators.ReadP.gather_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.gather_entry() //  [R2, R3]
         { info_tbl: [(c3sye,
                       label: Text.ParserCombinators.ReadP.gather_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sye: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.gather1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.144927036 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$trModule4_bytes" {
     Text.ParserCombinators.ReadP.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.147366751 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule3_closure" {
     Text.ParserCombinators.ReadP.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.149106138 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$trModule2_bytes" {
     Text.ParserCombinators.ReadP.$trModule2_bytes:
         I8[] [84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.151116016 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule1_closure" {
     Text.ParserCombinators.ReadP.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.15280772 UTC

[section ""data" . Text.ParserCombinators.ReadP.$trModule_closure" {
     Text.ParserCombinators.ReadP.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Text.ParserCombinators.ReadP.$trModule3_closure+1;
         const Text.ParserCombinators.ReadP.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.154593847 UTC

[section ""data" . $krep_r3oqI_closure" {
     $krep_r3oqI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.156405781 UTC

[section ""data" . $krep1_r3oqJ_closure" {
     $krep1_r3oqJ_closure:
         const :_con_info;
         const $krep_r3oqI_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.158245798 UTC

[section ""data" . $krep2_r3oqK_closure" {
     $krep2_r3oqK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r3oqJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.160049941 UTC

[section ""data" . $krep3_r3oqL_closure" {
     $krep3_r3oqL_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.161819289 UTC

[section ""data" . $krep4_r3oqM_closure" {
     $krep4_r3oqM_closure:
         const :_con_info;
         const $krep2_r3oqK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.163601849 UTC

[section ""data" . $krep5_r3oqN_closure" {
     $krep5_r3oqN_closure:
         const :_con_info;
         const $krep3_r3oqL_closure+2;
         const $krep4_r3oqM_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.165952429 UTC

[section ""data" . $krep6_r3oqO_closure" {
     $krep6_r3oqO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep5_r3oqN_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.167686164 UTC

[section ""data" . $krep7_r3oqP_closure" {
     $krep7_r3oqP_closure:
         const :_con_info;
         const $krep6_r3oqO_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.169548459 UTC

[section ""data" . $krep8_r3oqQ_closure" {
     $krep8_r3oqQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep7_r3oqP_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.171252029 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tcP2_bytes" {
     Text.ParserCombinators.ReadP.$tcP2_bytes:
         I8[] [80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.173623942 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcP1_closure" {
     Text.ParserCombinators.ReadP.$tcP1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tcP2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.175442659 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcP_closure" {
     Text.ParserCombinators.ReadP.$tcP_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tcP1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 4287589432649596960;
         const 9029773818181158220;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.177315232 UTC

[section ""data" . $krep9_r3oqR_closure" {
     $krep9_r3oqR_closure:
         const :_con_info;
         const $krep3_r3oqL_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.17910602 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail1_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadP.$tcP_closure+1;
         const $krep9_r3oqR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.180924619 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Fail3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Fail3_bytes:
         I8[] [39,70,97,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.182720476 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail2_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Fail3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.184488842 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Fail_closure" {
     Text.ParserCombinators.ReadP.$tc'Fail_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 16564457091671581868;
         const 4540703186775139959;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.186748186 UTC

[section ""data" . $krep10_r3oqS_closure" {
     $krep10_r3oqS_closure:
         const GHC.Types.KindRepFun_con_info;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.188572468 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result1_closure" {
     Text.ParserCombinators.ReadP.$tc'Result1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3oqL_closure+2;
         const $krep10_r3oqS_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.190322558 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Result3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Result3_bytes:
         I8[] [39,82,101,115,117,108,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.192030486 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result2_closure" {
     Text.ParserCombinators.ReadP.$tc'Result2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Result3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.193835301 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Result_closure" {
     Text.ParserCombinators.ReadP.$tc'Result_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Result2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Result1_closure+4;
         const 14629176799732153257;
         const 2029199220309899277;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.195708759 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final1_closure" {
     Text.ParserCombinators.ReadP.$tc'Final1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r3oqQ_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.1980624 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Final3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Final3_bytes:
         I8[] [39,70,105,110,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.200172939 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final2_closure" {
     Text.ParserCombinators.ReadP.$tc'Final2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Final3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.202069791 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Final_closure" {
     Text.ParserCombinators.ReadP.$tc'Final_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Final2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Final1_closure+4;
         const 9825883373667767852;
         const 1277540149077833820;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.203931472 UTC

[section ""data" . $krep11_r3oqT_closure" {
     $krep11_r3oqT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3oqK_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.205650263 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look1_closure" {
     Text.ParserCombinators.ReadP.$tc'Look1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r3oqT_closure+4;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.207345185 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Look3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Look3_bytes:
         I8[] [39,76,111,111,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.209011818 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look2_closure" {
     Text.ParserCombinators.ReadP.$tc'Look2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Look3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.210812049 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Look_closure" {
     Text.ParserCombinators.ReadP.$tc'Look_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Look2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Look1_closure+4;
         const 11302519862508684236;
         const 969530656846011597;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.212632013 UTC

[section ""data" . $krep12_r3oqU_closure" {
     $krep12_r3oqU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3oqI_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.215400444 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get1_closure" {
     Text.ParserCombinators.ReadP.$tc'Get1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r3oqU_closure+4;
         const Text.ParserCombinators.ReadP.$tc'Fail1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.217208072 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tc'Get3_bytes" {
     Text.ParserCombinators.ReadP.$tc'Get3_bytes:
         I8[] [39,71,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.219008794 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get2_closure" {
     Text.ParserCombinators.ReadP.$tc'Get2_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tc'Get3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.220747284 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tc'Get_closure" {
     Text.ParserCombinators.ReadP.$tc'Get_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Get2_closure+1;
         const Text.ParserCombinators.ReadP.$tc'Get1_closure+4;
         const 10806119809527641225;
         const 14618661019746688366;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.222658435 UTC

[section ""cstring" . Text.ParserCombinators.ReadP.$tcReadP2_bytes" {
     Text.ParserCombinators.ReadP.$tcReadP2_bytes:
         I8[] [82,101,97,100,80]
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.224339971 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcReadP1_closure" {
     Text.ParserCombinators.ReadP.$tcReadP1_closure:
         const GHC.Types.TrNameS_con_info;
         const Text.ParserCombinators.ReadP.$tcReadP2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.226139894 UTC

[section ""data" . Text.ParserCombinators.ReadP.$tcReadP_closure" {
     Text.ParserCombinators.ReadP.$tcReadP_closure:
         const GHC.Types.TyCon_con_info;
         const Text.ParserCombinators.ReadP.$trModule_closure+1;
         const Text.ParserCombinators.ReadP.$tcReadP1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15640243629783811470;
         const 8988027559298507146;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.229463002 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_info;
 },
 sat_s3rNn_entry() //  [R1, R2]
         { info_tbl: [(c3szi,
                       label: sat_s3rNn_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3szi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3szm; else goto c3szl;
       c3szm: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3szl: // global
           _s3rNj::P64 = P64[R1 + 7];
           _s3rNk::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rNk::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3rNj::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rNo_entry() //  [R1, R2]
         { info_tbl: [(c3szn,
                       label: sat_s3rNo_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3szn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3szr; else goto c3szq;
       c3szr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3szq: // global
           _s3rNi::P64 = P64[R1 + 7];
           _s3rNj::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rNn_info;
           P64[Hp - 8] = _s3rNj::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rNi::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP4_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3szs,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3szs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3szw; else goto c3szv;
       c3szw: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3szv: // global
           I64[Hp - 16] = sat_s3rNo_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3rNh::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3rNh::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.238562998 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_info;
 },
 sat_s3rNu_entry() //  [R1, R2]
         { info_tbl: [(c3szX,
                       label: sat_s3rNu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3szX: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3rNs_entry() //  [R1]
         { info_tbl: [(c3sA0,
                       label: lvl4_s3rNs_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sA0: // global
           _s3rNs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sA1; else goto c3sA2;
       c3sA2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sA4; else goto c3sA3;
       c3sA4: // global
           HpAlloc = 16;
           goto c3sA1;
       c3sA1: // global
           R1 = _s3rNs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sA3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rNs::P64;
           _s3rNq::P64 = P64[_s3rNs::P64 + 16];
           _s3rNr::P64 = P64[_s3rNs::P64 + 24];
           I64[Hp - 8] = sat_s3rNu_info;
           P64[Hp] = _s3rNr::P64;
           R2 = Hp - 7;
           R1 = _s3rNq::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rNw_entry() //  [R1]
         { info_tbl: [(c3sAa,
                       label: sat_s3rNw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sAa: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP2_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3sAd,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sAd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sAh; else goto c3sAg;
       c3sAh: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sAg: // global
           I64[Hp - 40] = lvl4_s3rNs_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3rNw_info;
           P64[Hp] = Hp - 40;
           _s3rNp::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3rNp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.248560851 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_info;
 },
 sat_s3rNF_entry() //  [R1, R2]
         { info_tbl: [(c3sAT,
                       label: sat_s3rNF_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sAT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sAX; else goto c3sAW;
       c3sAX: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sAW: // global
           _s3rNA::P64 = P64[R1 + 7];
           _s3rNC::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rNC::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3rNA::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rNG_entry() //  [R1, R2]
         { info_tbl: [(c3sAY,
                       label: sat_s3rNG_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sAY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sB2; else goto c3sB1;
       c3sB2: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sB1: // global
           _s3rNx::P64 = P64[R1 + 7];
           _s3rNz::P64 = P64[R1 + 15];
           _s3rNA::P64 = P64[R1 + 23];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3rNx::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3rNF_info;
           P64[Hp - 8] = _s3rNA::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 15;
           R1 = _s3rNz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP3_entry() //  [R2,
                                                               R3, R4, R5]
         { info_tbl: [(c3sB3,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sB3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sB7; else goto c3sB6;
       c3sB7: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sB6: // global
           I64[Hp - 24] = sat_s3rNG_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 23;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.257562788 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure:
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_info;
 },
 sat_s3rNN_entry() //  [R1]
         { info_tbl: [(c3sBC,
                       label: sat_s3rNN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sBC: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rNO_entry() //  [R1, R2]
         { info_tbl: [(c3sBF,
                       label: sat_s3rNO_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sBF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sBJ; else goto c3sBI;
       c3sBJ: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sBI: // global
           _s3rNI::P64 = P64[R1 + 7];
           _s3rNJ::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3rNJ::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rNN_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3rNI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fApplicativeReadP1_entry() //  [R2,
                                                               R3, R4]
         { info_tbl: [(c3sBK,
                       label: Text.ParserCombinators.ReadP.$fApplicativeReadP1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sBK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sBO; else goto c3sBN;
       c3sBO: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sBN: // global
           I64[Hp - 16] = sat_s3rNO_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           _s3rNH::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3rNH::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.266024154 UTC

[section ""data" . $c>>_r3oqV_closure" {
     $c>>_r3oqV_closure:
         const $c>>_r3oqV_info;
 },
 sat_s3rNU_entry() //  [R1]
         { info_tbl: [(c3sCf,
                       label: sat_s3rNU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sCf: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $c>>_r3oqV_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sCi,
                       label: $c>>_r3oqV_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sCi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sCm; else goto c3sCl;
       c3sCm: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $c>>_r3oqV_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sCl: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3rNU_info;
           P64[Hp] = Hp - 40;
           _s3rNP::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3rNP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.273531509 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure:
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info;
 },
 Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_entry() //  [R2, R3,
                                                             R4]
         { info_tbl: [(c3sCD,
                       label: Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sCD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $c>>_r3oqV_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.27699044 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fApplicativeReadP_closure" {
     Text.ParserCombinators.ReadP.$fApplicativeReadP_closure:
         const GHC.Base.C:Applicative_con_info;
         const Text.ParserCombinators.ReadP.$fFunctorReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure+2;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP4_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP3_closure+4;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP2_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.279022717 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadReadP_closure:
         const GHC.Base.C:Monad_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadReadP1_closure+3;
         const Text.ParserCombinators.ReadP.$fMonadReadP_$c>>_closure+3;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP5_closure+2;
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.28192168 UTC

[section ""data" . Text.ParserCombinators.ReadP.between1_closure" {
     Text.ParserCombinators.ReadP.between1_closure:
         const Text.ParserCombinators.ReadP.between1_info;
 },
 sat_s3rO3_entry() //  [R1]
         { info_tbl: [(c3sD5,
                       label: sat_s3rO3_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sD5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rO4_entry() //  [R1, R2]
         { info_tbl: [(c3sD8,
                       label: sat_s3rO4_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sD8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sDc; else goto c3sDb;
       c3sDc: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sDb: // global
           _s3rNW::P64 = P64[R1 + 7];
           _s3rNY::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3rNY::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rO3_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3rNW::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3rNZ_entry() //  [R1]
         { info_tbl: [(c3sDd,
                       label: lvl4_s3rNZ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sDd: // global
           _s3rNZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sDe; else goto c3sDf;
       c3sDf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sDh; else goto c3sDg;
       c3sDh: // global
           HpAlloc = 24;
           goto c3sDe;
       c3sDe: // global
           R1 = _s3rNZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sDg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rNZ::P64;
           _s3rNW::P64 = P64[_s3rNZ::P64 + 16];
           _s3rNX::P64 = P64[_s3rNZ::P64 + 24];
           _s3rNY::P64 = P64[_s3rNZ::P64 + 32];
           I64[Hp - 16] = sat_s3rO4_info;
           P64[Hp - 8] = _s3rNW::P64;
           P64[Hp] = _s3rNY::P64;
           R2 = Hp - 15;
           R1 = _s3rNX::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rO6_entry() //  [R1]
         { info_tbl: [(c3sDn,
                       label: sat_s3rO6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sDn: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.between1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3sDq,
                       label: Text.ParserCombinators.ReadP.between1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sDq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sDu; else goto c3sDt;
       c3sDu: // global
           HpAlloc = 56;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.between1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sDt: // global
           I64[Hp - 48] = lvl4_s3rNZ_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = sat_s3rO6_info;
           P64[Hp] = Hp - 48;
           _s3rNV::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3rNV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.294277003 UTC

[section ""data" . Text.ParserCombinators.ReadP.between_closure" {
     Text.ParserCombinators.ReadP.between_closure:
         const Text.ParserCombinators.ReadP.between_info;
 },
 Text.ParserCombinators.ReadP.between_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3sE2,
                       label: Text.ParserCombinators.ReadP.between_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sE2: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.between1_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.299093922 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wcount_closure" {
     Text.ParserCombinators.ReadP.$wcount_closure:
         const Text.ParserCombinators.ReadP.$wcount_info;
 },
 sat_s3rOj_entry() //  [R1, R2]
         { info_tbl: [(c3sEC,
                       label: sat_s3rOj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sEC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sEG; else goto c3sEF;
       c3sEG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sEF: // global
           _s3rOd::P64 = P64[R1 + 7];
           _s3rOg::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rOg::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rOd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rOk_entry() //  [R1, R2]
         { info_tbl: [(c3sEH,
                       label: sat_s3rOk_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sEH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sEL; else goto c3sEK;
       c3sEL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sEK: // global
           _s3rOb::P64 = P64[R1 + 7];
           _s3rOd::P64 = P64[R1 + 15];
           _s3rOf::I64 = I64[R1 + 23];
           I64[Hp - 16] = sat_s3rOj_info;
           P64[Hp - 8] = _s3rOd::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3rOf::I64;
           R1 = _s3rOb::P64;
           call $wxs_s3rOb_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rOn_entry() //  [R1, R2]
         { info_tbl: [(c3sET,
                       label: sat_s3rOn_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sET: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sEX; else goto c3sEW;
       c3sEX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sEW: // global
           _s3rOd::P64 = P64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3rOd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 $wxs_s3rOb_entry() //  [R1, R2, R3]
         { info_tbl: [(c3sF1,
                       label: $wxs_s3rOb_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sF1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sF5; else goto c3sF4;
       c3sF5: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sF4: // global
           _s3rO8::P64 = P64[R1 + 6];
           if (R2 == 1) goto c3sF0; else goto c3sEZ;
       c3sF0: // global
           I64[Hp - 24] = sat_s3rOn_info;
           P64[Hp - 16] = R3;
           _c3sEN::P64 = Hp - 23;
           Hp = Hp - 16;
           R2 = _c3sEN::P64;
           R1 = _s3rO8::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3sEZ: // global
           I64[Hp - 24] = sat_s3rOk_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R3;
           I64[Hp] = R2 - 1;
           R2 = Hp - 23;
           R1 = _s3rO8::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wcount_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sF9,
                       label: Text.ParserCombinators.ReadP.$wcount_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sF9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sFd; else goto c3sFc;
       c3sFd: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wcount_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sFc: // global
           if (%MO_S_Ge_W64(0, R2)) goto c3sF7; else goto c3sF8;
       c3sF7: // global
           Hp = Hp - 16;
           R2 = GHC.Types.[]_closure+1;
           R1 = R4;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3sF8: // global
           I64[Hp - 8] = $wxs_s3rOb_info;
           P64[Hp] = R3;
           R3 = R4;
           R2 = R2;
           R1 = Hp - 6;
           call $wxs_s3rOb_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.313543446 UTC

[section ""data" . Text.ParserCombinators.ReadP.count1_closure" {
     Text.ParserCombinators.ReadP.count1_closure:
         const Text.ParserCombinators.ReadP.count1_info;
 },
 Text.ParserCombinators.ReadP.count1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sFL,
                       label: Text.ParserCombinators.ReadP.count1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sFL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3sFM; else goto c3sFN;
       c3sFM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.count1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sFN: // global
           I64[Sp - 24] = block_c3sFI_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3sFR; else goto c3sFJ;
       u3sFR: // global
           call _c3sFI(R1) args: 0, res: 0, upd: 0;
       c3sFJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sFI() //  [R1]
         { info_tbl: [(c3sFI,
                       label: block_c3sFI_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sFI: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$wcount_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.319893742 UTC

[section ""data" . Text.ParserCombinators.ReadP.count_closure" {
     Text.ParserCombinators.ReadP.count_closure:
         const Text.ParserCombinators.ReadP.count_info;
 },
 Text.ParserCombinators.ReadP.count_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sG6,
                       label: Text.ParserCombinators.ReadP.count_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sG6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.count1_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.323788809 UTC

[section ""data" . Text.ParserCombinators.ReadP.option1_closure" {
     Text.ParserCombinators.ReadP.option1_closure:
         const Text.ParserCombinators.ReadP.option1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.option1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sGk,
                       label: Text.ParserCombinators.ReadP.option1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sGk: // global
           _s3rOv::P64 = R4;
           _s3rOu::P64 = R3;
           _s3rOt::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sGl; else goto c3sGm;
       c3sGm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sGo; else goto c3sGn;
       c3sGo: // global
           HpAlloc = 32;
           goto c3sGl;
       c3sGl: // global
           R4 = _s3rOv::P64;
           R3 = _s3rOu::P64;
           R2 = _s3rOt::P64;
           R1 = Text.ParserCombinators.ReadP.option1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sGn: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rOv::P64;
           P64[Hp] = _s3rOt::P64;
           I64[Sp - 16] = block_c3sGi_info;
           R2 = _s3rOv::P64;
           R1 = _s3rOu::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sGi() //  [R1]
         { info_tbl: [(c3sGi,
                       label: block_c3sGi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sGi: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.329799638 UTC

[section ""data" . Text.ParserCombinators.ReadP.option_closure" {
     Text.ParserCombinators.ReadP.option_closure:
         const Text.ParserCombinators.ReadP.option_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.option_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sGH,
                       label: Text.ParserCombinators.ReadP.option_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sGH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.option1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.334061762 UTC

[section ""data" . Text.ParserCombinators.ReadP.optional1_closure" {
     Text.ParserCombinators.ReadP.optional1_closure:
         const Text.ParserCombinators.ReadP.optional1_info;
         const 0;
 },
 lvl4_s3rOA_entry() //  [R1]
         { info_tbl: [(c3sGW,
                       label: lvl4_s3rOA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sGW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sGX; else goto c3sGY;
       c3sGX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sGY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rOC_entry() //  [R1]
         { info_tbl: [(c3sH4,
                       label: sat_s3rOC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sH4: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.optional1_entry() //  [R2, R3]
         { info_tbl: [(c3sH9,
                       label: Text.ParserCombinators.ReadP.optional1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sH9: // global
           _s3rOz::P64 = R3;
           _s3rOy::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sHa; else goto c3sHb;
       c3sHb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sHd; else goto c3sHc;
       c3sHd: // global
           HpAlloc = 40;
           goto c3sHa;
       c3sHa: // global
           R3 = _s3rOz::P64;
           R2 = _s3rOy::P64;
           R1 = Text.ParserCombinators.ReadP.optional1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sHc: // global
           I64[Hp - 32] = lvl4_s3rOA_info;
           P64[Hp - 16] = _s3rOz::P64;
           I64[Hp - 8] = sat_s3rOC_info;
           _c3sGS::P64 = Hp - 32;
           P64[Hp] = _c3sGS::P64;
           I64[Sp - 16] = block_c3sH7_info;
           R2 = Hp - 7;
           R1 = _s3rOy::P64;
           P64[Sp - 8] = _c3sGS::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sH7() //  [R1]
         { info_tbl: [(c3sH7,
                       label: block_c3sH7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sH7: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.344010503 UTC

[section ""data" . Text.ParserCombinators.ReadP.optional_closure" {
     Text.ParserCombinators.ReadP.optional_closure:
         const Text.ParserCombinators.ReadP.optional_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.optional_entry() //  [R2, R3]
         { info_tbl: [(c3sHH,
                       label: Text.ParserCombinators.ReadP.optional_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sHH: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.optional1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.34979494 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy3_closure" {
     Text.ParserCombinators.ReadP.endBy3_closure:
         const Text.ParserCombinators.ReadP.endBy3_info;
         const 0;
 },
 sat_s3rOK_entry() //  [R1, R2]
         { info_tbl: [(c3sI7,
                       label: sat_s3rOK_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sI7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sIb; else goto c3sIa;
       c3sIb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sIa: // global
           _s3rOF::P64 = P64[R1 + 7];
           _s3rOH::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rOH::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rOF::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rOL_entry() //  [R1, R2]
         { info_tbl: [(c3sIc,
                       label: sat_s3rOL_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sIc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sIg; else goto c3sIf;
       c3sIg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sIf: // global
           _s3rOE::P64 = P64[R1 + 7];
           _s3rOF::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rOK_info;
           P64[Hp - 8] = _s3rOF::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3rOE::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rOM_entry() //  [R1]
         { info_tbl: [(c3sIh,
                       label: sat_s3rOM_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sIh: // global
           _s3rOM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sIi; else goto c3sIj;
       c3sIj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sIl; else goto c3sIk;
       c3sIl: // global
           HpAlloc = 24;
           goto c3sIi;
       c3sIi: // global
           R1 = _s3rOM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sIk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rOM::P64;
           _s3rOE::P64 = P64[_s3rOM::P64 + 16];
           _s3rOF::P64 = P64[_s3rOM::P64 + 24];
           I64[Hp - 16] = sat_s3rOL_info;
           P64[Hp - 8] = _s3rOE::P64;
           P64[Hp] = _s3rOF::P64;
           R2 = Hp - 15;
           R1 = _s3rOE::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.endBy3_entry() //  [R2, R3]
         { info_tbl: [(c3sIo,
                       label: Text.ParserCombinators.ReadP.endBy3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sIo: // global
           _s3rOF::P64 = R3;
           _s3rOE::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sIp; else goto c3sIq;
       c3sIq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sIs; else goto c3sIr;
       c3sIs: // global
           HpAlloc = 32;
           goto c3sIp;
       c3sIp: // global
           R3 = _s3rOF::P64;
           R2 = _s3rOE::P64;
           R1 = Text.ParserCombinators.ReadP.endBy3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sIr: // global
           I64[Hp - 24] = sat_s3rOM_info;
           P64[Hp - 8] = _s3rOE::P64;
           P64[Hp] = _s3rOF::P64;
           I64[Sp - 16] = block_c3sIm_info;
           R2 = GHC.Types.[]_closure+1;
           R1 = _s3rOF::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sIm() //  [R1]
         { info_tbl: [(c3sIm,
                       label: block_c3sIm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sIm: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.363703985 UTC

[section ""data" . Text.ParserCombinators.ReadP.many_closure" {
     Text.ParserCombinators.ReadP.many_closure:
         const Text.ParserCombinators.ReadP.many_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.many_entry() //  [R2, R3]
         { info_tbl: [(c3sJ0,
                       label: Text.ParserCombinators.ReadP.many_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sJ0: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.368037702 UTC

[section ""data" . Text.ParserCombinators.ReadP.many2_closure" {
     Text.ParserCombinators.ReadP.many2_closure:
         const Text.ParserCombinators.ReadP.many2_info;
         const 0;
 },
 sat_s3rOS_entry() //  [R1, R2]
         { info_tbl: [(c3sJm,
                       label: sat_s3rOS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sJm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sJq; else goto c3sJp;
       c3sJq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sJp: // global
           _s3rOO::P64 = P64[R1 + 7];
           _s3rOP::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rOP::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rOO::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rOT_entry() //  [R1, R2]
         { info_tbl: [(c3sJr,
                       label: sat_s3rOT_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sJr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sJv; else goto c3sJu;
       c3sJv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sJu: // global
           _s3rON::P64 = P64[R1 + 7];
           _s3rOO::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rOS_info;
           P64[Hp - 8] = _s3rOO::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3rON::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.many2_entry() //  [R2, R3]
         { info_tbl: [(c3sJw,
                       label: Text.ParserCombinators.ReadP.many2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sJw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sJA; else goto c3sJz;
       c3sJA: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.many2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sJz: // global
           I64[Hp - 16] = sat_s3rOT_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s3rON::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3rON::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.377932245 UTC

[section ""data" . Text.ParserCombinators.ReadP.many1_closure" {
     Text.ParserCombinators.ReadP.many1_closure:
         const Text.ParserCombinators.ReadP.many1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.many1_entry() //  [R2, R3]
         { info_tbl: [(c3sJS,
                       label: Text.ParserCombinators.ReadP.many1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sJS: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.many2_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.383663516 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy4_closure" {
     Text.ParserCombinators.ReadP.endBy4_closure:
         const Text.ParserCombinators.ReadP.endBy4_info;
         const 0;
 },
 sat_s3rP2_entry() //  [R1]
         { info_tbl: [(c3sKj,
                       label: sat_s3rP2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sKj: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rP3_entry() //  [R1, R2]
         { info_tbl: [(c3sKm,
                       label: sat_s3rP3_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sKm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sKq; else goto c3sKp;
       c3sKq: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sKp: // global
           _s3rOV::P64 = P64[R1 + 7];
           _s3rOY::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3rOY::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rP2_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3rOV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 p1_s3rOX_entry() //  [R1, R2]
         { info_tbl: [(c3sKr,
                       label: p1_s3rOX_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sKr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sKv; else goto c3sKu;
       c3sKv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sKu: // global
           _s3rOU::P64 = P64[R1 + 7];
           _s3rOV::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rP3_info;
           P64[Hp - 8] = _s3rOV::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rOU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rP8_entry() //  [R1, R2]
         { info_tbl: [(c3sKL,
                       label: sat_s3rP8_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sKL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sKP; else goto c3sKO;
       c3sKP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sKO: // global
           _s3rOW::P64 = P64[R1 + 7];
           _s3rP4::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rP4::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rOW::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3rP5_entry() //  [R1]
         { info_tbl: [(c3sKQ,
                       label: lvl4_s3rP5_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sKQ: // global
           _s3rP5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sKR; else goto c3sKS;
       c3sKS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sKU; else goto c3sKT;
       c3sKU: // global
           HpAlloc = 24;
           goto c3sKR;
       c3sKR: // global
           R1 = _s3rP5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sKT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rP5::P64;
           _s3rOW::P64 = P64[_s3rP5::P64 + 16];
           _s3rOX::P64 = P64[_s3rP5::P64 + 24];
           _s3rP4::P64 = P64[_s3rP5::P64 + 32];
           I64[Hp - 16] = sat_s3rP8_info;
           P64[Hp - 8] = _s3rOW::P64;
           P64[Hp] = _s3rP4::P64;
           R3 = Hp - 15;
           R2 = _s3rOX::P64;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rPa_entry() //  [R1]
         { info_tbl: [(c3sL0,
                       label: sat_s3rPa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sL0: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rPb_entry() //  [R1, R2]
         { info_tbl: [(c3sL3,
                       label: sat_s3rPb_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sL3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sL7; else goto c3sL6;
       c3sL7: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sL6: // global
           _s3rOV::P64 = P64[R1 + 7];
           _s3rOW::P64 = P64[R1 + 15];
           _s3rOX::P64 = P64[R1 + 23];
           I64[Hp - 48] = lvl4_s3rP5_info;
           P64[Hp - 32] = _s3rOW::P64;
           P64[Hp - 24] = _s3rOX::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rPa_info;
           P64[Hp] = Hp - 48;
           R2 = Hp - 7;
           R1 = _s3rOV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.endBy4_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sL8,
                       label: Text.ParserCombinators.ReadP.endBy4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sL8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sLc; else goto c3sLb;
       c3sLc: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.endBy4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sLb: // global
           I64[Hp - 48] = p1_s3rOX_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3rPb_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 47;
           _s3rOU::P64 = R2;
           R2 = Hp - 23;
           R1 = _s3rOU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.406143196 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy1_closure" {
     Text.ParserCombinators.ReadP.endBy1_closure:
         const Text.ParserCombinators.ReadP.endBy1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.endBy1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sLY,
                       label: Text.ParserCombinators.ReadP.endBy1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sLY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy4_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.41093511 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany2_closure" {
     Text.ParserCombinators.ReadP.skipMany2_closure:
         const Text.ParserCombinators.ReadP.skipMany2_info;
         const 0;
 },
 sat_s3rPg_entry() //  [R1]
         { info_tbl: [(c3sMi,
                       label: sat_s3rPg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sMi: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipMany2_entry() //  [R2, R3]
         { info_tbl: [(c3sMl,
                       label: Text.ParserCombinators.ReadP.skipMany2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sMl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sMm; else goto c3sMn;
       c3sMm: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipMany2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sMn: // global
           I64[Sp - 16] = block_c3sM9_info;
           _s3rPc::P64 = R2;
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           P64[Sp - 8] = _s3rPc::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sM9() //  [R1]
         { info_tbl: [(c3sM9,
                       label: block_c3sM9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sM9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sMq; else goto c3sMp;
       c3sMq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3sMp: // global
           I64[Hp - 8] = sat_s3rPg_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.420425418 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany_closure" {
     Text.ParserCombinators.ReadP.skipMany_closure:
         const Text.ParserCombinators.ReadP.skipMany_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.skipMany_entry() //  [R2, R3]
         { info_tbl: [(c3sML,
                       label: Text.ParserCombinators.ReadP.skipMany_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sML: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipMany2_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.425018565 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany3_closure" {
     Text.ParserCombinators.ReadP.skipMany3_closure:
         const Text.ParserCombinators.ReadP.skipMany3_info;
         const 0;
 },
 sat_s3rPm_entry() //  [R1]
         { info_tbl: [(c3sN9,
                       label: sat_s3rPm_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sN9: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3rPj_entry() //  [R1]
         { info_tbl: [(c3sNc,
                       label: lvl4_s3rPj_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sNc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3sNd; else goto c3sNe;
       c3sNd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sNe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3sN0_info;
           R2 = GHC.Tuple.()_closure+1;
           _s3rPh::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s3rPh::P64;
           Sp = Sp - 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3sN0() //  [R1]
         { info_tbl: [(c3sN0,
                       label: block_c3sN0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sN0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sNh; else goto c3sNg;
       c3sNh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3sNg: // global
           I64[Hp - 8] = sat_s3rPm_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rPo_entry() //  [R1]
         { info_tbl: [(c3sNn,
                       label: sat_s3rPo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sNn: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipMany3_entry() //  [R2, R3]
         { info_tbl: [(c3sNq,
                       label: Text.ParserCombinators.ReadP.skipMany3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sNq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sNu; else goto c3sNt;
       c3sNu: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipMany3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sNt: // global
           I64[Hp - 40] = lvl4_s3rPj_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s3rPo_info;
           P64[Hp] = Hp - 40;
           _s3rPh::P64 = R2;
           R2 = Hp - 7;
           R1 = _s3rPh::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.438233672 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipMany1_closure" {
     Text.ParserCombinators.ReadP.skipMany1_closure:
         const Text.ParserCombinators.ReadP.skipMany1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.skipMany1_entry() //  [R2, R3]
         { info_tbl: [(c3sO1,
                       label: Text.ParserCombinators.ReadP.skipMany1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sO1: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipMany3_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.442905637 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy3_closure" {
     Text.ParserCombinators.ReadP.sepBy3_closure:
         const Text.ParserCombinators.ReadP.sepBy3_info;
         const 0;
 },
 sat_s3rPw_entry() //  [R1]
         { info_tbl: [(c3sOn,
                       label: sat_s3rPw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sOn: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 m2_s3rPs_entry() //  [R1, R2]
         { info_tbl: [(c3sOq,
                       label: m2_s3rPs_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sOq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sOu; else goto c3sOt;
       c3sOu: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sOt: // global
           _s3rPp::P64 = P64[R1 + 7];
           _s3rPq::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3rPp::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rPw_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3rPq::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rPA_entry() //  [R1, R2]
         { info_tbl: [(c3sOG,
                       label: sat_s3rPA_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sOG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sOK; else goto c3sOJ;
       c3sOK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sOJ: // global
           _s3rPr::P64 = P64[R1 + 7];
           _s3rPx::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rPx::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rPr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rPB_entry() //  [R1, R2]
         { info_tbl: [(c3sOL,
                       label: sat_s3rPB_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sOL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sOP; else goto c3sOO;
       c3sOP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sOO: // global
           _s3rPr::P64 = P64[R1 + 7];
           _s3rPs::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rPA_info;
           P64[Hp - 8] = _s3rPr::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = _s3rPs::P64;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.sepBy3_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sOQ,
                       label: Text.ParserCombinators.ReadP.sepBy3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sOQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sOU; else goto c3sOT;
       c3sOU: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.sepBy3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sOT: // global
           I64[Hp - 40] = m2_s3rPs_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3rPB_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 39;
           _s3rPp::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3rPp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.455737437 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy1_closure" {
     Text.ParserCombinators.ReadP.sepBy1_closure:
         const Text.ParserCombinators.ReadP.sepBy1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.sepBy1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sPp,
                       label: Text.ParserCombinators.ReadP.sepBy1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sPp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.sepBy3_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.460108819 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy2_closure" {
     Text.ParserCombinators.ReadP.endBy2_closure:
         const Text.ParserCombinators.ReadP.endBy2_info;
         const 0;
 },
 sat_s3rPJ_entry() //  [R1]
         { info_tbl: [(c3sPQ,
                       label: sat_s3rPJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sPQ: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rPK_entry() //  [R1, R2]
         { info_tbl: [(c3sPT,
                       label: sat_s3rPK_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sPT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sPX; else goto c3sPW;
       c3sPX: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sPW: // global
           _s3rPD::P64 = P64[R1 + 7];
           _s3rPF::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3rPF::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rPJ_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 7;
           R1 = _s3rPD::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rPL_entry() //  [R1, R2]
         { info_tbl: [(c3sPY,
                       label: sat_s3rPL_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sPY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sQ2; else goto c3sQ1;
       c3sQ2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sQ1: // global
           _s3rPC::P64 = P64[R1 + 7];
           _s3rPD::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rPK_info;
           P64[Hp - 8] = _s3rPD::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rPC::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.endBy2_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sQ3,
                       label: Text.ParserCombinators.ReadP.endBy2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sQ3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sQ7; else goto c3sQ6;
       c3sQ7: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.endBy2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sQ6: // global
           I64[Hp - 16] = sat_s3rPL_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R4;
           R2 = Hp - 15;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.470761925 UTC

[section ""data" . Text.ParserCombinators.ReadP.endBy_closure" {
     Text.ParserCombinators.ReadP.endBy_closure:
         const Text.ParserCombinators.ReadP.endBy_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.endBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sQw,
                       label: Text.ParserCombinators.ReadP.endBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sQw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.endBy2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.474909548 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy2_closure" {
     Text.ParserCombinators.ReadP.sepBy2_closure:
         const Text.ParserCombinators.ReadP.sepBy2_info;
         const 0;
 },
 sat_s3rPQ_entry() //  [R1]
         { info_tbl: [(c3sQL,
                       label: sat_s3rPQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sQL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sQM; else goto c3sQN;
       c3sQM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sQN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 Text.ParserCombinators.ReadP.sepBy2_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sQQ,
                       label: Text.ParserCombinators.ReadP.sepBy2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sQQ: // global
           _s3rPO::P64 = R4;
           _s3rPN::P64 = R3;
           _s3rPM::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sQR; else goto c3sQS;
       c3sQS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sQU; else goto c3sQT;
       c3sQU: // global
           HpAlloc = 24;
           goto c3sQR;
       c3sQR: // global
           R4 = _s3rPO::P64;
           R3 = _s3rPN::P64;
           R2 = _s3rPM::P64;
           R1 = Text.ParserCombinators.ReadP.sepBy2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sQT: // global
           I64[Hp - 16] = sat_s3rPQ_info;
           P64[Hp] = _s3rPO::P64;
           I64[Sp - 16] = block_c3sQO_info;
           R4 = _s3rPO::P64;
           R3 = _s3rPN::P64;
           R2 = _s3rPM::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.sepBy3_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3sQO() //  [R1]
         { info_tbl: [(c3sQO,
                       label: block_c3sQO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sQO: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.484778716 UTC

[section ""data" . Text.ParserCombinators.ReadP.sepBy_closure" {
     Text.ParserCombinators.ReadP.sepBy_closure:
         const Text.ParserCombinators.ReadP.sepBy_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.sepBy_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sRj,
                       label: Text.ParserCombinators.ReadP.sepBy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sRj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.sepBy2_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.489779561 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadFailReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadFailReadP_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const Text.ParserCombinators.ReadP.$fMonadReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadFailReadP1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.494346354 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_info;
         const 0;
 },
 sat_s3rQ1_entry() //  [R1]
         { info_tbl: [(c3sRK,
                       label: sat_s3rQ1_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sRK: // global
           _s3rQ1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sRL; else goto c3sRM;
       c3sRM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sRO; else goto c3sRN;
       c3sRO: // global
           HpAlloc = 24;
           goto c3sRL;
       c3sRL: // global
           R1 = _s3rQ1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sRN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rQ1::P64;
           _s3rPU::P64 = P64[_s3rQ1::P64 + 16];
           _s3rPV::P64 = P64[_s3rQ1::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rPV::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = _s3rPU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rPY_entry() //  [R1, R2]
         { info_tbl: [(c3sRV,
                       label: sat_s3rPY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sRV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sRZ; else goto c3sRY;
       c3sRZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sRY: // global
           _s3rPU::P64 = P64[R1 + 7];
           _s3rPV::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rPV::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rPU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rQ2_entry() //  [R1, R2]
         { info_tbl: [(c3sS2,
                       label: sat_s3rQ2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sS2: // global
           _s3rPV::P64 = R2;
           _s3rQ2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sS3; else goto c3sS4;
       c3sS4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3sS6; else goto c3sS5;
       c3sS6: // global
           HpAlloc = 56;
           goto c3sS3;
       c3sS3: // global
           R2 = _s3rPV::P64;
           R1 = _s3rQ2::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sS5: // global
           _s3rPT::P64 = P64[_s3rQ2::P64 + 7];
           _s3rPU::P64 = P64[_s3rQ2::P64 + 15];
           I64[Hp - 48] = sat_s3rQ1_info;
           P64[Hp - 32] = _s3rPU::P64;
           P64[Hp - 24] = _s3rPV::P64;
           I64[Hp - 16] = sat_s3rPY_info;
           P64[Hp - 8] = _s3rPU::P64;
           P64[Hp] = _s3rPV::P64;
           I64[Sp - 16] = block_c3sS0_info;
           R2 = Hp - 15;
           R1 = _s3rPT::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call some_v_s3rPT_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sS0() //  [R1]
         { info_tbl: [(c3sS0,
                       label: block_c3sS0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sS0: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 some_v_s3rPT_entry() //  [R1, R2]
         { info_tbl: [(c3sSa,
                       label: some_v_s3rPT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sSa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sSe; else goto c3sSd;
       c3sSe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sSd: // global
           _s3rPR::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3rQ2_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rPR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP2_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3sSf,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sSf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sSj; else goto c3sSi;
       c3sSj: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sSi: // global
           I64[Hp - 8] = some_v_s3rPT_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call some_v_s3rPT_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.517895541 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure:
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_info;
         const 0;
 },
 sat_s3rQd_entry() //  [R1]
         { info_tbl: [(c3sT3,
                       label: sat_s3rQd_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sT3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sT4; else goto c3sT5;
       c3sT4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sT5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rQa_entry() //  [R1, R2]
         { info_tbl: [(c3sTh,
                       label: sat_s3rQa_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sTh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sTl; else goto c3sTk;
       c3sTl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sTk: // global
           _s3rQ6::P64 = P64[R1 + 7];
           _s3rQ7::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rQ7::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rQ6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rQb_entry() //  [R1, R2]
         { info_tbl: [(c3sTm,
                       label: sat_s3rQb_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sTm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sTq; else goto c3sTp;
       c3sTq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sTp: // global
           _s3rQ5::P64 = P64[R1 + 7];
           _s3rQ6::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rQa_info;
           P64[Hp - 8] = _s3rQ6::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rQ5::P64;
           call many_v_s3rQ5_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 many_v_s3rQ5_entry() //  [R1, R2]
         { info_tbl: [(c3sTt,
                       label: many_v_s3rQ5_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sTt: // global
           _s3rQ6::P64 = R2;
           _s3rQ5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sTu; else goto c3sTv;
       c3sTv: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sTx; else goto c3sTw;
       c3sTx: // global
           HpAlloc = 48;
           goto c3sTu;
       c3sTu: // global
           R2 = _s3rQ6::P64;
           R1 = _s3rQ5::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sTw: // global
           _s3rQ3::P64 = P64[_s3rQ5::P64 + 7];
           I64[Hp - 40] = sat_s3rQd_info;
           P64[Hp - 24] = _s3rQ6::P64;
           I64[Hp - 16] = sat_s3rQb_info;
           P64[Hp - 8] = _s3rQ5::P64;
           P64[Hp] = _s3rQ6::P64;
           I64[Sp - 16] = block_c3sTr_info;
           R2 = Hp - 15;
           R1 = _s3rQ3::P64;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sTr() //  [R1]
         { info_tbl: [(c3sTr,
                       label: block_c3sTr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sTr: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$fAlternativeReadP1_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c3sTB,
                       label: Text.ParserCombinators.ReadP.$fAlternativeReadP1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sTB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3sTF; else goto c3sTE;
       c3sTF: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sTE: // global
           I64[Hp - 8] = many_v_s3rQ5_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call many_v_s3rQ5_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.533918696 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fAlternativeReadP_closure" {
     Text.ParserCombinators.ReadP.$fAlternativeReadP_closure:
         const GHC.Base.C:Alternative_con_info;
         const Text.ParserCombinators.ReadP.$fApplicativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure+3;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure+2;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.536402923 UTC

[section ""data" . Text.ParserCombinators.ReadP.$fMonadPlusReadP_closure" {
     Text.ParserCombinators.ReadP.$fMonadPlusReadP_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fMonadReadP_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.539663738 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr3_closure" {
     Text.ParserCombinators.ReadP.chainr3_closure:
         const Text.ParserCombinators.ReadP.chainr3_info;
         const 0;
 },
 sat_s3rQn_entry() //  [R1, R2]
         { info_tbl: [(c3sUC,
                       label: sat_s3rQn_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sUC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sUG; else goto c3sUF;
       c3sUG: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sUF: // global
           _s3rQi::P64 = P64[R1 + 7];
           _s3rQj::P64 = P64[R1 + 15];
           _s3rQk::P64 = P64[R1 + 23];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3rQk::P64;
           P64[Hp - 8] = _s3rQj::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3rQi::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rQo_entry() //  [R1, R2]
         { info_tbl: [(c3sUH,
                       label: sat_s3rQo_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sUH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sUL; else goto c3sUK;
       c3sUL: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sUK: // global
           _s3rQh::P64 = P64[R1 + 7];
           _s3rQi::P64 = P64[R1 + 15];
           _s3rQj::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3rQn_info;
           P64[Hp - 16] = _s3rQi::P64;
           P64[Hp - 8] = _s3rQj::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3rQh::P64;
           call scan_s3rQh_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rQr_entry() //  [R1, R2]
         { info_tbl: [(c3sUO,
                       label: sat_s3rQr_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sUO: // global
           _s3rQj::P64 = R2;
           _s3rQr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sUP; else goto c3sUQ;
       c3sUQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3sUS; else goto c3sUR;
       c3sUS: // global
           HpAlloc = 64;
           goto c3sUP;
       c3sUP: // global
           R2 = _s3rQj::P64;
           R1 = _s3rQr::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sUR: // global
           _s3rQf::P64 = P64[_s3rQr::P64 + 7];
           _s3rQh::P64 = P64[_s3rQr::P64 + 15];
           _s3rQi::P64 = P64[_s3rQr::P64 + 23];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3rQi::P64;
           P64[Hp - 32] = _s3rQj::P64;
           I64[Hp - 24] = sat_s3rQo_info;
           P64[Hp - 16] = _s3rQh::P64;
           P64[Hp - 8] = _s3rQi::P64;
           P64[Hp] = _s3rQj::P64;
           I64[Sp - 16] = block_c3sUM_info;
           R2 = Hp - 23;
           R1 = _s3rQf::P64;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sUM() //  [R1]
         { info_tbl: [(c3sUM,
                       label: block_c3sUM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sUM: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3rQh_entry() //  [R1, R2]
         { info_tbl: [(c3sUW,
                       label: scan_s3rQh_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sUW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sV0; else goto c3sUZ;
       c3sV0: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sUZ: // global
           _s3rQe::P64 = P64[R1 + 7];
           _s3rQf::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3rQr_info;
           P64[Hp - 16] = _s3rQf::P64;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3rQe::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.chainr3_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sV1,
                       label: Text.ParserCombinators.ReadP.chainr3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sV1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3sV5; else goto c3sV4;
       c3sV5: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.chainr3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sV4: // global
           I64[Hp - 16] = scan_s3rQh_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = R4;
           R1 = Hp - 15;
           call scan_s3rQh_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.555635075 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr1_closure" {
     Text.ParserCombinators.ReadP.chainr1_closure:
         const Text.ParserCombinators.ReadP.chainr1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sVC,
                       label: Text.ParserCombinators.ReadP.chainr1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sVC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainr3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.559607652 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr2_closure" {
     Text.ParserCombinators.ReadP.chainr2_closure:
         const Text.ParserCombinators.ReadP.chainr2_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr2_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3sVQ,
                       label: Text.ParserCombinators.ReadP.chainr2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sVQ: // global
           _s3rQv::P64 = R5;
           _s3rQu::P64 = R4;
           _s3rQt::P64 = R3;
           _s3rQs::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sVR; else goto c3sVS;
       c3sVS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sVU; else goto c3sVT;
       c3sVU: // global
           HpAlloc = 32;
           goto c3sVR;
       c3sVR: // global
           R5 = _s3rQv::P64;
           R4 = _s3rQu::P64;
           R3 = _s3rQt::P64;
           R2 = _s3rQs::P64;
           R1 = Text.ParserCombinators.ReadP.chainr2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sVT: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rQv::P64;
           P64[Hp] = _s3rQu::P64;
           I64[Sp - 16] = block_c3sVO_info;
           R4 = _s3rQv::P64;
           R3 = _s3rQt::P64;
           R2 = _s3rQs::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.chainr3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3sVO() //  [R1]
         { info_tbl: [(c3sVO,
                       label: block_c3sVO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sVO: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.566170174 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainr_closure" {
     Text.ParserCombinators.ReadP.chainr_closure:
         const Text.ParserCombinators.ReadP.chainr_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainr_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3sWd,
                       label: Text.ParserCombinators.ReadP.chainr_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sWd: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainr2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.572352556 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl3_closure" {
     Text.ParserCombinators.ReadP.chainl3_closure:
         const Text.ParserCombinators.ReadP.chainl3_info;
         const 0;
 },
 sat_s3rQH_entry() //  [R1, R2]
         { info_tbl: [(c3sWF,
                       label: sat_s3rQH_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sWF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sWJ; else goto c3sWI;
       c3sWJ: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sWI: // global
           _s3rQB::P64 = P64[R1 + 7];
           _s3rQC::P64 = P64[R1 + 15];
           _s3rQD::P64 = P64[R1 + 23];
           _s3rQE::P64 = P64[R1 + 31];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _s3rQE::P64;
           P64[Hp - 8] = _s3rQC::P64;
           P64[Hp] = R2;
           R3 = _s3rQD::P64;
           R2 = Hp - 32;
           R1 = _s3rQB::P64;
           call rest_s3rQB_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rQI_entry() //  [R1, R2]
         { info_tbl: [(c3sWK,
                       label: sat_s3rQI_info
                       rep:HeapRep 4 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sWK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3sWO; else goto c3sWN;
       c3sWO: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3sWN: // global
           _s3rQy::P64 = P64[R1 + 7];
           _s3rQB::P64 = P64[R1 + 15];
           _s3rQC::P64 = P64[R1 + 23];
           _s3rQD::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3rQH_info;
           P64[Hp - 24] = _s3rQB::P64;
           P64[Hp - 16] = _s3rQC::P64;
           P64[Hp - 8] = _s3rQD::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3rQy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 rest_s3rQB_entry() //  [R1, R2, R3]
         { info_tbl: [(c3sWR,
                       label: rest_s3rQB_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sWR: // global
           _s3rQD::P64 = R3;
           _s3rQC::P64 = R2;
           _s3rQB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sWS; else goto c3sWT;
       c3sWT: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3sWV; else goto c3sWU;
       c3sWV: // global
           HpAlloc = 72;
           goto c3sWS;
       c3sWS: // global
           R3 = _s3rQD::P64;
           R2 = _s3rQC::P64;
           R1 = _s3rQB::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sWU: // global
           _s3rQy::P64 = P64[_s3rQB::P64 + 6];
           _s3rQz::P64 = P64[_s3rQB::P64 + 14];
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _s3rQD::P64;
           P64[Hp - 40] = _s3rQC::P64;
           I64[Hp - 32] = sat_s3rQI_info;
           P64[Hp - 24] = _s3rQy::P64;
           P64[Hp - 16] = _s3rQB::P64;
           P64[Hp - 8] = _s3rQC::P64;
           P64[Hp] = _s3rQD::P64;
           I64[Sp - 16] = block_c3sWP_info;
           R2 = Hp - 31;
           R1 = _s3rQz::P64;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sWP() //  [R1]
         { info_tbl: [(c3sWP,
                       label: block_c3sWP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sWP: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rQM_entry() //  [R1, R2]
         { info_tbl: [(c3sX4,
                       label: sat_s3rQM_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sX4: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 15];
           call rest_s3rQB_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.chainl3_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sX7,
                       label: Text.ParserCombinators.ReadP.chainl3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sX7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3sXb; else goto c3sXa;
       c3sXb: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.chainl3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sXa: // global
           I64[Hp - 40] = rest_s3rQB_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3rQM_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 38;
           _s3rQy::P64 = R2;
           R2 = Hp - 15;
           R1 = _s3rQy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.595298215 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl1_closure" {
     Text.ParserCombinators.ReadP.chainl1_closure:
         const Text.ParserCombinators.ReadP.chainl1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3sXJ,
                       label: Text.ParserCombinators.ReadP.chainl1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sXJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainl3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.601222587 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl2_closure" {
     Text.ParserCombinators.ReadP.chainl2_closure:
         const Text.ParserCombinators.ReadP.chainl2_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl2_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3sXX,
                       label: Text.ParserCombinators.ReadP.chainl2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sXX: // global
           _s3rQQ::P64 = R5;
           _s3rQP::P64 = R4;
           _s3rQO::P64 = R3;
           _s3rQN::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3sXY; else goto c3sXZ;
       c3sXZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3sY1; else goto c3sY0;
       c3sY1: // global
           HpAlloc = 32;
           goto c3sXY;
       c3sXY: // global
           R5 = _s3rQQ::P64;
           R4 = _s3rQP::P64;
           R3 = _s3rQO::P64;
           R2 = _s3rQN::P64;
           R1 = Text.ParserCombinators.ReadP.chainl2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sY0: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s3rQQ::P64;
           P64[Hp] = _s3rQP::P64;
           I64[Sp - 16] = block_c3sXV_info;
           R4 = _s3rQQ::P64;
           R3 = _s3rQO::P64;
           R2 = _s3rQN::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.chainl3_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3sXV() //  [R1]
         { info_tbl: [(c3sXV,
                       label: block_c3sXV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sXV: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.611169793 UTC

[section ""data" . Text.ParserCombinators.ReadP.chainl_closure" {
     Text.ParserCombinators.ReadP.chainl_closure:
         const Text.ParserCombinators.ReadP.chainl_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.chainl_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3sYk,
                       label: Text.ParserCombinators.ReadP.chainl_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sYk: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.chainl2_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.617182745 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++2_closure" {
     Text.ParserCombinators.ReadP.<++2_closure:
         const Text.ParserCombinators.ReadP.<++2_info;
 },
 lvl4_s3rQW_entry() //  [R1]
         { info_tbl: [(c3sYD,
                       label: lvl4_s3rQW_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sYD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sYE; else goto c3sYF;
       c3sYE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sYF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = I64[R1 + 24] - 1;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.<++2_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rQZ_entry() //  [R1]
         { info_tbl: [(c3sYL,
                       label: sat_s3rQZ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sYL: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.<++2_entry() //  [R2, R3]
         { info_tbl: [(c3sYR,
                       label: Text.ParserCombinators.ReadP.<++2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sYR: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3sYV; else goto c3sYU;
       c3sYV: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.<++2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3sYU: // global
           if (R2 == 0) goto c3sYQ; else goto c3sYP;
       c3sYQ: // global
           Hp = Hp - 64;
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3sYP: // global
           I64[Hp - 56] = lvl4_s3rQW_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3rQZ_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.632036148 UTC

[section ""data" . Text.ParserCombinators.ReadP.$w<++_closure" {
     Text.ParserCombinators.ReadP.$w<++_closure:
         const Text.ParserCombinators.ReadP.$w<++_info;
         const 0;
 },
 lvl4_s3rR3_entry() //  [R1]
         { info_tbl: [(c3sZr,
                       label: lvl4_s3rR3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sZr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3sZs; else goto c3sZt;
       c3sZs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3sZt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 probe_s3rR4_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sZw: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call probe_s3rR4_entry(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rRl_entry() //  [R1]
         { info_tbl: [(c3sZN,
                       label: sat_s3rRl_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sZN: // global
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 probe_s3rR4_entry() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c3sZX,
                       label: probe_s3rR4_info
                       rep:HeapRep 1 ptrs {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sZX: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3sZY; else goto u3t0F;
       c3sZY: // global
           R1 = R1;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       u3t0F: // global
           P64[Sp - 40] = R1;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call _c3sZx() args: 0, res: 0, upd: 0;
     }
 },
 _c3sZx() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sZx: // global
           _s3rR1::P64 = P64[P64[Sp] + 4];
           I64[Sp - 8] = block_c3sZA_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3rR1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3t0K; else goto c3sZB;
       u3t0K: // global
           call _c3sZA(R1) args: 0, res: 0, upd: 0;
       c3sZB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3sZA() //  [R1]
         { info_tbl: [(c3sZA,
                       label: block_c3sZA_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sZA: // global
           _c3sZW::P64 = R1 & 7;
           if (_c3sZW::P64 < 4) goto u3t0C; else goto u3t0E;
       u3t0C: // global
           if (_c3sZW::P64 < 3) goto u3t0D; else goto u3t0G;
       u3t0D: // global
           _s3rR6::P64 = P64[Sp + 24];
           if (_c3sZW::P64 < 2) goto c3sZR; else goto c3sZS;
       c3sZR: // global
           I64[Sp] = block_c3t01_info;
           _s3rRa::P64 = P64[R1 + 7];
           R1 = _s3rR6::P64;
           P64[Sp + 24] = _s3rRa::P64;
           if (R1 & 7 != 0) goto u3t0L; else goto c3t03;
       u3t0L: // global
           call _c3t01(R1) args: 0, res: 0, upd: 0;
       c3t03: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3sZS: // global
           I64[Sp] = block_c3t0n_info;
           R2 = _s3rR6::P64;
           R1 = P64[R1 + 6];
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3t0G: // global
           Sp = Sp + 16;
           call _c3sZT() args: 0, res: 0, upd: 0;
       u3t0E: // global
           _s3rR8::P64 = P64[Sp + 40];
           if (_c3sZW::P64 < 5) goto c3sZU; else goto c3sZV;
       c3sZU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3t0x; else goto c3t0w;
       c3t0x: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3t0w: // global
           I64[Hp - 16] = sat_s3rRl_info;
           P64[Hp - 8] = _s3rR8::P64;
           P64[Hp] = R1;
           R3 = Hp - 15;
           R2 = I64[Sp + 32];
           Sp = Sp + 48;
           call Text.ParserCombinators.ReadP.<++2_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
       c3sZV: // global
           R3 = _s3rR8::P64;
           R2 = R1;
           Sp = Sp + 48;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3t01() //  [R1]
         { info_tbl: [(c3t01,
                       label: block_c3t01_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t01: // global
           if (R1 & 7 == 1) goto u3t0H; else goto c3t0h;
       u3t0H: // global
           Sp = Sp + 16;
           call _c3sZT() args: 0, res: 0, upd: 0;
       c3t0h: // global
           I64[Sp] = block_c3t0f_info;
           R2 = P64[R1 + 6];
           _s3rRd::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = I64[Sp + 32] + 1;
           P64[Sp + 32] = _s3rRd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3t0f() //  [R1]
         { info_tbl: [(c3t0f,
                       label: block_c3t0f_info
                       rep:StackRep [False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t0f: // global
           P64[Sp + 16] = R1;
           _s3rR7::I64 = I64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 32];
           I64[Sp + 32] = _s3rR7::I64;
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c3sZx() args: 0, res: 0, upd: 0;
     }
 },
 _c3t0n() //  [R1]
         { info_tbl: [(c3t0n,
                       label: block_c3t0n_info
                       rep:StackRep [False, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t0n: // global
           P64[Sp + 16] = R1;
           P64[Sp + 24] = P64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c3sZx() args: 0, res: 0, upd: 0;
     }
 },
 _c3sZT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3sZT: // global
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rRo_entry() //  [R1, R2]
         { info_tbl: [(c3t0W,
                       label: sat_s3rRo_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t0W: // global
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = R2;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           call probe_s3rR4_entry(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$w<++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3t0Z,
                       label: Text.ParserCombinators.ReadP.$w<++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t0Z: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3t13; else goto c3t12;
       c3t13: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$w<++_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t12: // global
           I64[Hp - 64] = lvl4_s3rR3_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = probe_s3rR4_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_s3rRo_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 36;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.666498567 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++1_closure" {
     Text.ParserCombinators.ReadP.<++1_closure:
         const Text.ParserCombinators.ReadP.<++1_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.<++1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3t2a,
                       label: Text.ParserCombinators.ReadP.<++1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t2a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3t2b; else goto c3t2c;
       c3t2b: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.<++1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t2c: // global
           I64[Sp - 8] = block_c3t27_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3t27() //  [R1]
         { info_tbl: [(c3t27,
                       label: block_c3t27_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t27: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3t2f; else goto c3t2e;
       c3t2f: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3t2e: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.675747549 UTC

[section ""data" . Text.ParserCombinators.ReadP.<++_closure" {
     Text.ParserCombinators.ReadP.<++_closure:
         const Text.ParserCombinators.ReadP.<++_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.<++_entry() //  [R2, R3, R4]
         { info_tbl: [(c3t2v,
                       label: Text.ParserCombinators.ReadP.<++_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t2v: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.<++1_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.683403519 UTC

[section ""data" . Text.ParserCombinators.ReadP.manyTill1_closure" {
     Text.ParserCombinators.ReadP.manyTill1_closure:
         const Text.ParserCombinators.ReadP.manyTill1_info;
         const 0;
 },
 lvl4_s3rRz_entry() //  [R1]
         { info_tbl: [(c3t2P,
                       label: lvl4_s3rRz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t2P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3t2Q; else goto c3t2R;
       c3t2Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3t2R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rRB_entry() //  [R1]
         { info_tbl: [(c3t2X,
                       label: sat_s3rRB_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t2X: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3rRx_entry() //  [R1, R2]
         { info_tbl: [(c3t30,
                       label: scan_s3rRx_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t30: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3t34; else goto c3t33;
       c3t34: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t33: // global
           _s3rRv::P64 = P64[R1 + 7];
           I64[Hp - 32] = lvl4_s3rRz_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3rRB_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 7;
           R1 = _s3rRv::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rRI_entry() //  [R1, R2]
         { info_tbl: [(c3t3m,
                       label: sat_s3rRI_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t3m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3t3q; else goto c3t3p;
       c3t3q: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t3p: // global
           _s3rRE::P64 = P64[R1 + 7];
           _s3rRF::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rRF::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rRE::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rRJ_entry() //  [R1, R2]
         { info_tbl: [(c3t3r,
                       label: sat_s3rRJ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t3r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3t3v; else goto c3t3u;
       c3t3v: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t3u: // global
           _s3rRD::P64 = P64[R1 + 7];
           _s3rRE::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rRI_info;
           P64[Hp - 8] = _s3rRE::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rRD::P64;
           call scan2_s3rRD_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 scan1_s3rRC_entry() //  [R1, R2]
         { info_tbl: [(c3t3w,
                       label: scan1_s3rRC_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t3w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3t3A; else goto c3t3z;
       c3t3A: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t3z: // global
           _s3rRu::P64 = P64[R1 + 7];
           _s3rRD::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3rRJ_info;
           P64[Hp - 8] = _s3rRD::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3rRu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 scan2_s3rRD_entry() //  [R1, R2]
         { info_tbl: [(c3t3I,
                       label: scan2_s3rRD_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t3I: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3t3J; else goto c3t3K;
       c3t3J: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t3K: // global
           I64[Sp - 8] = block_c3t3F_info;
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$w<++_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3t3F() //  [R1]
         { info_tbl: [(c3t3F,
                       label: block_c3t3F_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t3F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3t3N; else goto c3t3M;
       c3t3N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3t3M: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.manyTill1_entry() //  [R2, R3, R4]
         { info_tbl: [(c3t3O,
                       label: Text.ParserCombinators.ReadP.manyTill1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t3O: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3t3S; else goto c3t3R;
       c3t3S: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.manyTill1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t3R: // global
           I64[Hp - 56] = scan_s3rRx_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = scan1_s3rRC_info;
           P64[Hp - 32] = R2;
           _c3t36::P64 = Hp - 15;
           P64[Hp - 24] = _c3t36::P64;
           I64[Hp - 16] = scan2_s3rRD_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 39;
           R2 = R4;
           R1 = _c3t36::P64;
           call scan2_s3rRD_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.707410281 UTC

[section ""data" . Text.ParserCombinators.ReadP.manyTill_closure" {
     Text.ParserCombinators.ReadP.manyTill_closure:
         const Text.ParserCombinators.ReadP.manyTill_info;
         const 0;
 },
 Text.ParserCombinators.ReadP.manyTill_entry() //  [R2, R3, R4]
         { info_tbl: [(c3t4J,
                       label: Text.ParserCombinators.ReadP.manyTill_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t4J: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.manyTill1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.711614206 UTC

[section ""data" . Text.ParserCombinators.ReadP.eof1_closure" {
     Text.ParserCombinators.ReadP.eof1_closure:
         const Text.ParserCombinators.ReadP.eof1_info;
 },
 lvl4_s3rRO_entry() //  [R1]
         { info_tbl: [(c3t4Y,
                       label: lvl4_s3rRO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t4Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3t4Z; else goto c3t50;
       c3t4Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3t50: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rRT_entry() //  [R1, R2]
         { info_tbl: [(c3t5d,
                       label: sat_s3rRT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t5d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3t5e; else goto c3t5f;
       c3t5e: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t5f: // global
           I64[Sp - 16] = block_c3t56_info;
           _s3rRO::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3rRO::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3t5m; else goto c3t57;
       u3t5m: // global
           call _c3t56(R1) args: 0, res: 0, upd: 0;
       c3t57: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3t56() //  [R1]
         { info_tbl: [(c3t56,
                       label: block_c3t56_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t56: // global
           if (R1 & 7 == 1) goto c3t5a; else goto c3t5b;
       c3t5a: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3t5b: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.eof1_entry() //  [R2]
         { info_tbl: [(c3t5o,
                       label: Text.ParserCombinators.ReadP.eof1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t5o: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3t5s; else goto c3t5r;
       c3t5s: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.eof1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t5r: // global
           I64[Hp - 48] = lvl4_s3rRO_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3rRT_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.721980389 UTC

[section ""data" . Text.ParserCombinators.ReadP.eof_closure" {
     Text.ParserCombinators.ReadP.eof_closure:
         const Text.ParserCombinators.ReadP.eof_info;
 },
 Text.ParserCombinators.ReadP.eof_entry() //  [R2]
         { info_tbl: [(c3t61,
                       label: Text.ParserCombinators.ReadP.eof_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t61: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.eof1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.725842849 UTC

[section ""data" . Text.ParserCombinators.ReadP.satisfy1_closure" {
     Text.ParserCombinators.ReadP.satisfy1_closure:
         const Text.ParserCombinators.ReadP.satisfy1_info;
 },
 sat_s3rRY_entry() //  [R1, R2]
         { info_tbl: [(c3t6n,
                       label: sat_s3rRY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t6n: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3t6o; else goto c3t6p;
       c3t6o: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t6p: // global
           I64[Sp - 24] = block_c3t6h_info;
           _s3rRW::P64 = R2;
           R2 = R2;
           _s3rRV::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s3rRV::P64;
           P64[Sp - 8] = _s3rRW::P64;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3t6h() //  [R1]
         { info_tbl: [(c3t6h,
                       label: block_c3t6h_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t6h: // global
           if (R1 & 7 == 1) goto c3t6k; else goto c3t6l;
       c3t6k: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3t6l: // global
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.satisfy1_entry() //  [R2, R3]
         { info_tbl: [(c3t6x,
                       label: Text.ParserCombinators.ReadP.satisfy1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t6x: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3t6B; else goto c3t6A;
       c3t6B: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.satisfy1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t6A: // global
           I64[Hp - 32] = sat_s3rRY_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.733987429 UTC

[section ""data" . Text.ParserCombinators.ReadP.satisfy_closure" {
     Text.ParserCombinators.ReadP.satisfy_closure:
         const Text.ParserCombinators.ReadP.satisfy_info;
 },
 Text.ParserCombinators.ReadP.satisfy_entry() //  [R2, R3]
         { info_tbl: [(c3t6Z,
                       label: Text.ParserCombinators.ReadP.satisfy_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t6Z: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.satisfy1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.738864201 UTC

[section ""data" . Text.ParserCombinators.ReadP.char1_closure" {
     Text.ParserCombinators.ReadP.char1_closure:
         const Text.ParserCombinators.ReadP.char1_info;
 },
 sat_s3rS7_entry() //  [R1, R2]
         { info_tbl: [(c3t7i,
                       label: sat_s3rS7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t7i: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3t7m; else goto c3t7n;
       c3t7m: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3t7n: // global
           I64[Sp - 24] = block_c3t7f_info;
           _s3rS0::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s3rS0::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3t7A; else goto c3t7g;
       u3t7A: // global
           call _c3t7f(R1) args: 0, res: 0, upd: 0;
       c3t7g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3t7f() //  [R1]
         { info_tbl: [(c3t7f,
                       label: block_c3t7f_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t7f: // global
           I64[Sp] = block_c3t7l_info;
           _s3rS3::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3rS3::I64;
           if (R1 & 7 != 0) goto u3t7z; else goto c3t7p;
       u3t7z: // global
           call _c3t7l(R1) args: 0, res: 0, upd: 0;
       c3t7p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3t7l() //  [R1]
         { info_tbl: [(c3t7l,
                       label: block_c3t7l_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t7l: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c3t7y; else goto c3t7x;
       c3t7y: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3t7x: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.char1_entry() //  [R2, R3]
         { info_tbl: [(c3t7C,
                       label: Text.ParserCombinators.ReadP.char1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t7C: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3t7G; else goto c3t7F;
       c3t7G: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.char1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t7F: // global
           I64[Hp - 32] = sat_s3rS7_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.74908716 UTC

[section ""data" . Text.ParserCombinators.ReadP.char_closure" {
     Text.ParserCombinators.ReadP.char_closure:
         const Text.ParserCombinators.ReadP.char_info;
 },
 Text.ParserCombinators.ReadP.char_entry() //  [R2, R3]
         { info_tbl: [(c3t89,
                       label: Text.ParserCombinators.ReadP.char_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t89: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.char1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.753839177 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wstring_closure" {
     Text.ParserCombinators.ReadP.$wstring_closure:
         const Text.ParserCombinators.ReadP.$wstring_info;
 },
 sat_s3rSr_entry() //  [R1]
         { info_tbl: [(c3t8V,
                       label: sat_s3rSr_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t8V: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3rSa_entry() //  [R1, R2, R3, R4]
         { info_tbl: [(c3t92,
                       label: scan_s3rSa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t92: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3t93; else goto c3t94;
       c3t93: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t94: // global
           I64[Sp - 40] = block_c3t8p_info;
           _s3rSa::P64 = R1;
           _s3rS8::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3rS8::P64;
           P64[Sp - 24] = _s3rSa::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3t9q; else goto c3t8q;
       u3t9q: // global
           call _c3t8p(R1) args: 0, res: 0, upd: 0;
       c3t8q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3t8p() //  [R1]
         { info_tbl: [(c3t8p,
                       label: block_c3t8p_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t8p: // global
           if (R1 & 7 == 1) goto c3t8Z; else goto c3t90;
       c3t8Z: // global
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3t90: // global
           I64[Sp] = block_c3t8v_info;
           _s3rSf::P64 = P64[R1 + 6];
           _s3rSg::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp + 8] = _s3rSg::P64;
           P64[Sp + 24] = _s3rSf::P64;
           if (R1 & 7 != 0) goto u3t9n; else goto c3t8w;
       u3t9n: // global
           call _c3t8v(R1) args: 0, res: 0, upd: 0;
       c3t8w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3t8v() //  [R1]
         { info_tbl: [(c3t8v,
                       label: block_c3t8v_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t8v: // global
           if (R1 & 7 == 1) goto c3t9b; else goto c3t9d;
       c3t9b: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3t9d: // global
           I64[Sp - 8] = block_c3t8B_info;
           _s3rSi::P64 = P64[R1 + 6];
           _s3rSj::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _s3rSj::P64;
           P64[Sp + 24] = _s3rSi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3t9o; else goto c3t8C;
       u3t9o: // global
           call _c3t8B(R1) args: 0, res: 0, upd: 0;
       c3t8C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3t8B() //  [R1]
         { info_tbl: [(c3t8B,
                       label: block_c3t8B_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t8B: // global
           I64[Sp] = block_c3t8G_info;
           _s3rSl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3rSl::I64;
           if (R1 & 7 != 0) goto u3t9p; else goto c3t8H;
       u3t9p: // global
           call _c3t8G(R1) args: 0, res: 0, upd: 0;
       c3t8H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3t8G() //  [R1]
         { info_tbl: [(c3t8G,
                       label: block_c3t8G_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t8G: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3t9h; else goto c3t9g;
       c3t9h: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3t9g: // global
           if (I64[Sp + 32] == I64[R1 + 7]) goto c3t9l; else goto c3t9j;
       c3t9l: // global
           I64[Hp - 72] = stg_ap_4_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 40];
           I64[Hp - 24] = sat_s3rSr_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3t9j: // global
           Hp = Hp - 80;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rSt_entry() //  [R1, R2]
         { info_tbl: [(c3t9w,
                       label: sat_s3rSt_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t9w: // global
           R4 = P64[R1 + 15];
           R3 = R2;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 23];
           call scan_s3rSa_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wstring_entry() //  [R2, R3]
         { info_tbl: [(c3t9z,
                       label: Text.ParserCombinators.ReadP.$wstring_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3t9z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3t9D; else goto c3t9C;
       c3t9D: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wstring_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3t9C: // global
           I64[Hp - 40] = scan_s3rSa_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3rSt_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 37;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.77293673 UTC

[section ""data" . Text.ParserCombinators.ReadP.string1_closure" {
     Text.ParserCombinators.ReadP.string1_closure:
         const Text.ParserCombinators.ReadP.string1_info;
 },
 Text.ParserCombinators.ReadP.string1_entry() //  [R2, R3]
         { info_tbl: [(c3taG,
                       label: Text.ParserCombinators.ReadP.string1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3taG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3taH; else goto c3taI;
       c3taH: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.string1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3taI: // global
           I64[Sp - 8] = block_c3taD_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wstring_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3taD() //  [R1]
         { info_tbl: [(c3taD,
                       label: block_c3taD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3taD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3taL; else goto c3taK;
       c3taL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3taK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.780012937 UTC

[section ""data" . Text.ParserCombinators.ReadP.string_closure" {
     Text.ParserCombinators.ReadP.string_closure:
         const Text.ParserCombinators.ReadP.string_info;
 },
 Text.ParserCombinators.ReadP.string_entry() //  [R2, R3]
         { info_tbl: [(c3tb1,
                       label: Text.ParserCombinators.ReadP.string_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tb1: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.string1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.785294273 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wmunch_closure" {
     Text.ParserCombinators.ReadP.$wmunch_closure:
         const Text.ParserCombinators.ReadP.$wmunch_info;
 },
 sat_s3rSK_entry() //  [R1, R2]
         { info_tbl: [(c3tbC,
                       label: sat_s3rSK_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tbC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tbG; else goto c3tbF;
       c3tbG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tbF: // global
           _s3rSC::P64 = P64[R1 + 7];
           _s3rSE::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rSE::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rSC::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3rSH_entry() //  [R1]
         { info_tbl: [(c3tbH,
                       label: lvl4_s3rSH_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tbH: // global
           _s3rSH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3tbI; else goto c3tbJ;
       c3tbJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tbL; else goto c3tbK;
       c3tbL: // global
           HpAlloc = 24;
           goto c3tbI;
       c3tbI: // global
           R1 = _s3rSH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tbK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3rSH::P64;
           _s3rSA::P64 = P64[_s3rSH::P64 + 16];
           _s3rSC::P64 = P64[_s3rSH::P64 + 24];
           _s3rSE::P64 = P64[_s3rSH::P64 + 32];
           _s3rSF::P64 = P64[_s3rSH::P64 + 40];
           I64[Hp - 16] = sat_s3rSK_info;
           P64[Hp - 8] = _s3rSC::P64;
           P64[Hp] = _s3rSE::P64;
           R3 = Hp - 15;
           R2 = _s3rSF::P64;
           R1 = _s3rSA::P64;
           Sp = Sp - 16;
           call scan_s3rSA_entry(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rSM_entry() //  [R1]
         { info_tbl: [(c3tbR,
                       label: sat_s3rSM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tbR: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 scan_s3rSA_entry() //  [R1, R2, R3]
         { info_tbl: [(c3tbY,
                       label: scan_s3rSA_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tbY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3tbZ; else goto c3tc0;
       c3tbZ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tc0: // global
           I64[Sp - 32] = block_c3tbh_info;
           _s3rSA::P64 = R1;
           _s3rSy::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 24] = _s3rSy::P64;
           P64[Sp - 16] = _s3rSA::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3tci; else goto c3tbi;
       u3tci: // global
           call _c3tbh(R1) args: 0, res: 0, upd: 0;
       c3tbi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tbh() //  [R1]
         { info_tbl: [(c3tbh,
                       label: block_c3tbh_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tbh: // global
           if (R1 & 7 == 1) goto u3tce; else goto c3tbW;
       u3tce: // global
           Sp = Sp + 24;
           call _c3tc7() args: 0, res: 0, upd: 0;
       c3tbW: // global
           I64[Sp - 8] = block_c3tbn_info;
           _s3rSE::P64 = P64[R1 + 6];
           R2 = _s3rSE::P64;
           _s3rSF::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _s3rSF::P64;
           P64[Sp + 8] = _s3rSE::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tbn() //  [R1]
         { info_tbl: [(c3tbn,
                       label: block_c3tbn_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tbn: // global
           if (R1 & 7 == 1) goto u3tcf; else goto c3tc9;
       u3tcf: // global
           Sp = Sp + 32;
           call _c3tc7() args: 0, res: 0, upd: 0;
       c3tc9: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3tcc; else goto c3tcb;
       c3tcc: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3tcb: // global
           I64[Hp - 72] = lvl4_s3rSH_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = sat_s3rSM_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3tc7() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tc7: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rSO_entry() //  [R1, R2]
         { info_tbl: [(c3tco,
                       label: sat_s3rSO_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tco: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 15];
           call scan_s3rSA_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wmunch_entry() //  [R2, R3]
         { info_tbl: [(c3tcr,
                       label: Text.ParserCombinators.ReadP.$wmunch_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tcr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3tcv; else goto c3tcu;
       c3tcv: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wmunch_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tcu: // global
           I64[Hp - 32] = scan_s3rSA_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3rSO_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 30;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.80542256 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch2_closure" {
     Text.ParserCombinators.ReadP.munch2_closure:
         const Text.ParserCombinators.ReadP.munch2_info;
 },
 Text.ParserCombinators.ReadP.munch2_entry() //  [R2, R3]
         { info_tbl: [(c3tdx,
                       label: Text.ParserCombinators.ReadP.munch2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tdx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3tdy; else goto c3tdz;
       c3tdy: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.munch2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tdz: // global
           I64[Sp - 8] = block_c3tdu_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3tdu() //  [R1]
         { info_tbl: [(c3tdu,
                       label: block_c3tdu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tdu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tdC; else goto c3tdB;
       c3tdC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3tdB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.811369671 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch_closure" {
     Text.ParserCombinators.ReadP.munch_closure:
         const Text.ParserCombinators.ReadP.munch_info;
 },
 Text.ParserCombinators.ReadP.munch_entry() //  [R2, R3]
         { info_tbl: [(c3tdS,
                       label: Text.ParserCombinators.ReadP.munch_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tdS: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.munch2_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.815768951 UTC

[section ""data" . Text.ParserCombinators.ReadP.$wmunch1_closure" {
     Text.ParserCombinators.ReadP.$wmunch1_closure:
         const Text.ParserCombinators.ReadP.$wmunch1_info;
 },
 sat_s3rSZ_entry() //  [R1, R2]
         { info_tbl: [(c3tej,
                       label: sat_s3rSZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tej: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ten; else goto c3tem;
       c3ten: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tem: // global
           _s3rSU::P64 = P64[R1 + 7];
           _s3rSV::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3rSV::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3rSU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3rT2_entry() //  [R1, R2]
         { info_tbl: [(c3tes,
                       label: sat_s3rT2_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tes: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3tet; else goto c3teu;
       c3tet: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3teu: // global
           I64[Sp - 32] = block_c3te8_info;
           _s3rSV::P64 = R2;
           R2 = R2;
           _s3rST::P64 = P64[R1 + 7];
           _s3rSU::P64 = P64[R1 + 15];
           R1 = _s3rST::P64;
           P64[Sp - 24] = _s3rST::P64;
           P64[Sp - 16] = _s3rSU::P64;
           P64[Sp - 8] = _s3rSV::P64;
           Sp = Sp - 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3te8() //  [R1]
         { info_tbl: [(c3te8,
                       label: block_c3te8_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3te8: // global
           if (R1 & 7 == 1) goto c3tep; else goto c3teq;
       c3tep: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3teq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3teC; else goto c3teB;
       c3teC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3teB: // global
           I64[Hp - 16] = sat_s3rSZ_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_c3tex_info;
           R3 = Hp - 15;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3tex() //  [R1]
         { info_tbl: [(c3tex,
                       label: block_c3tex_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tex: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3teF; else goto c3teE;
       c3teF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3teE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.$wmunch1_entry() //  [R2, R3]
         { info_tbl: [(c3teG,
                       label: Text.ParserCombinators.ReadP.$wmunch1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3teG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3teK; else goto c3teJ;
       c3teK: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.$wmunch1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3teJ: // global
           I64[Hp - 16] = sat_s3rT2_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.829676803 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch3_closure" {
     Text.ParserCombinators.ReadP.munch3_closure:
         const Text.ParserCombinators.ReadP.munch3_info;
 },
 Text.ParserCombinators.ReadP.munch3_entry() //  [R2, R3]
         { info_tbl: [(c3tfm,
                       label: Text.ParserCombinators.ReadP.munch3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tfm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3tfn; else goto c3tfo;
       c3tfn: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.munch3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tfo: // global
           I64[Sp - 8] = block_c3tfj_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch1_entry(R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3tfj() //  [R1]
         { info_tbl: [(c3tfj,
                       label: block_c3tfj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tfj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tfr; else goto c3tfq;
       c3tfr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3tfq: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.83553139 UTC

[section ""data" . Text.ParserCombinators.ReadP.munch1_closure" {
     Text.ParserCombinators.ReadP.munch1_closure:
         const Text.ParserCombinators.ReadP.munch1_info;
 },
 Text.ParserCombinators.ReadP.munch1_entry() //  [R2, R3]
         { info_tbl: [(c3tfH,
                       label: Text.ParserCombinators.ReadP.munch1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tfH: // global
           R3 = R3;
           R2 = R2;
           call Text.ParserCombinators.ReadP.munch3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.840699248 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces2_closure" {
     Text.ParserCombinators.ReadP.skipSpaces2_closure:
         const Text.ParserCombinators.ReadP.skipSpaces2_info;
 },
 lvl4_s3rTn_entry() //  [R1]
         { info_tbl: [(c3tgn,
                       label: lvl4_s3rTn_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tgn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3tgo; else goto c3tgp;
       c3tgo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tgp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rTp_entry() //  [R1]
         { info_tbl: [(c3tgv,
                       label: sat_s3rTp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tgv: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3rTu_entry() //  [R1]
         { info_tbl: [(c3tgO,
                       label: lvl4_s3rTu_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tgO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3tgP; else goto c3tgQ;
       c3tgP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3tgQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rTw_entry() //  [R1]
         { info_tbl: [(c3tgW,
                       label: sat_s3rTw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tgW: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3rTx_entry() //  [R1]
         { info_tbl: [(c3th4,
                       label: lvl4_s3rTx_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3th4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3th5; else goto c3th6;
       c3th5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3th6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rTz_entry() //  [R1]
         { info_tbl: [(c3thc,
                       label: sat_s3rTz_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3thc: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl4_s3rTA_entry() //  [R1]
         { info_tbl: [(c3thk,
                       label: lvl4_s3rTA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3thk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3thl; else goto c3thm;
       c3thl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3thm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3rTC_entry() //  [R1]
         { info_tbl: [(c3ths,
                       label: sat_s3rTC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ths: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipSpaces2_entry() //  [R2, R3]
         { info_tbl: [(c3thz,
                       label: Text.ParserCombinators.ReadP.skipSpaces2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3thz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3thA; else goto c3thB;
       c3thA: // global
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipSpaces2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3thB: // global
           I64[Sp - 16] = block_c3tfS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3ti2; else goto c3tfT;
       u3ti2: // global
           call _c3tfS(R1) args: 0, res: 0, upd: 0;
       c3tfT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tfS() //  [R1]
         { info_tbl: [(c3tfS,
                       label: block_c3tfS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tfS: // global
           if (R1 & 7 == 1) goto c3thw; else goto c3thx;
       c3thw: // global
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3thx: // global
           I64[Sp - 8] = block_c3tfY_info;
           _s3rTb::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3rTb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ti1; else goto c3tfZ;
       u3ti1: // global
           call _c3tfY(R1) args: 0, res: 0, upd: 0;
       c3tfZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3tfY() //  [R1]
         { info_tbl: [(c3tfY,
                       label: block_c3tfY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tfY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3thH; else goto c3thG;
       c3thH: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3thG: // global
           _s3rT8::P64 = P64[Sp + 16];
           _s3rTb::P64 = P64[Sp + 8];
           _s3rTd::I64 = I64[R1 + 7];
           if (_s3rTd::I64 > 887) goto c3thN; else goto c3ti0;
       c3thN: // global
           (_s3rTl::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(_s3rTd::I64);
           if (_s3rTl::I64 == 0) goto c3thP; else goto c3thK;
       c3thK: // global
           I64[Hp - 56] = lvl4_s3rTn_info;
           P64[Hp - 40] = _s3rT8::P64;
           P64[Hp - 32] = _s3rTb::P64;
           I64[Hp - 24] = sat_s3rTp_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ti0: // global
           if (_s3rTd::I64 == 32) goto c3thZ; else goto c3thX;
       c3thZ: // global
           I64[Hp - 56] = lvl4_s3rTA_info;
           P64[Hp - 40] = _s3rT8::P64;
           P64[Hp - 32] = _s3rTb::P64;
           I64[Hp - 24] = sat_s3rTC_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3thX: // global
           if ((_s3rTd::I64 + -9) > 4) goto c3thT; else goto c3thV;
       c3thT: // global
           if (_s3rTd::I64 != 160) goto c3thP; else goto c3thR;
       c3thP: // global
           Hp = Hp - 64;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s3rT8::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3thR: // global
           I64[Hp - 56] = lvl4_s3rTu_info;
           P64[Hp - 40] = _s3rT8::P64;
           P64[Hp - 32] = _s3rTb::P64;
           I64[Hp - 24] = sat_s3rTw_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3thV: // global
           I64[Hp - 56] = lvl4_s3rTx_info;
           P64[Hp - 40] = _s3rT8::P64;
           P64[Hp - 32] = _s3rTb::P64;
           I64[Hp - 24] = sat_s3rTz_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.867225276 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces1_closure" {
     Text.ParserCombinators.ReadP.skipSpaces1_closure:
         const Text.ParserCombinators.ReadP.skipSpaces1_info;
 },
 sat_s3rTF_entry() //  [R1, R2]
         { info_tbl: [(c3tjz,
                       label: sat_s3rTF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tjz: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 Text.ParserCombinators.ReadP.skipSpaces1_entry() //  [R2]
         { info_tbl: [(c3tjD,
                       label: Text.ParserCombinators.ReadP.skipSpaces1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tjD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3tjH; else goto c3tjG;
       c3tjH: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.skipSpaces1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tjG: // global
           I64[Hp - 24] = sat_s3rTF_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.873212143 UTC

[section ""data" . Text.ParserCombinators.ReadP.skipSpaces_closure" {
     Text.ParserCombinators.ReadP.skipSpaces_closure:
         const Text.ParserCombinators.ReadP.skipSpaces_info;
 },
 Text.ParserCombinators.ReadP.skipSpaces_entry() //  [R2]
         { info_tbl: [(c3tjX,
                       label: Text.ParserCombinators.ReadP.skipSpaces_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tjX: // global
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.877075813 UTC

[section ""data" . Text.ParserCombinators.ReadP.Get_closure" {
     Text.ParserCombinators.ReadP.Get_closure:
         const Text.ParserCombinators.ReadP.Get_info;
 },
 Text.ParserCombinators.ReadP.Get_entry() //  [R2]
         { info_tbl: [(c3tk9,
                       label: Text.ParserCombinators.ReadP.Get_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tk9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tkd; else goto c3tkc;
       c3tkd: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Get_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tkc: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.881655897 UTC

[section ""data" . Text.ParserCombinators.ReadP.Look_closure" {
     Text.ParserCombinators.ReadP.Look_closure:
         const Text.ParserCombinators.ReadP.Look_info;
 },
 Text.ParserCombinators.ReadP.Look_entry() //  [R2]
         { info_tbl: [(c3tkp,
                       label: Text.ParserCombinators.ReadP.Look_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tkp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tkt; else goto c3tks;
       c3tkt: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Look_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tks: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.885589416 UTC

[section ""data" . Text.ParserCombinators.ReadP.Fail_closure" {
     Text.ParserCombinators.ReadP.Fail_closure:
         const Text.ParserCombinators.ReadP.Fail_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.887653133 UTC

[section ""data" . Text.ParserCombinators.ReadP.Result_closure" {
     Text.ParserCombinators.ReadP.Result_closure:
         const Text.ParserCombinators.ReadP.Result_info;
 },
 Text.ParserCombinators.ReadP.Result_entry() //  [R2, R3]
         { info_tbl: [(c3tkG,
                       label: Text.ParserCombinators.ReadP.Result_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tkG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3tkK; else goto c3tkJ;
       c3tkK: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Result_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3tkJ: // global
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.89186073 UTC

[section ""data" . Text.ParserCombinators.ReadP.Final_closure" {
     Text.ParserCombinators.ReadP.Final_closure:
         const Text.ParserCombinators.ReadP.Final_info;
 },
 Text.ParserCombinators.ReadP.Final_entry() //  [R2]
         { info_tbl: [(c3tkW,
                       label: Text.ParserCombinators.ReadP.Final_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tkW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3tl0; else goto c3tkZ;
       c3tl0: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Text.ParserCombinators.ReadP.Final_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3tkZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Final_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.896265732 UTC

[Text.ParserCombinators.ReadP.Get_con_entry() //  [R1]
         { info_tbl: [(c3tl7,
                       label: Text.ParserCombinators.ReadP.Get_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,71,101,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tl7: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.8998203 UTC

[Text.ParserCombinators.ReadP.Look_con_entry() //  [R1]
         { info_tbl: [(c3tle,
                       label: Text.ParserCombinators.ReadP.Look_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,76,111,111,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tle: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.903927506 UTC

[Text.ParserCombinators.ReadP.Fail_con_entry() //  [R1]
         { info_tbl: [(c3tll,
                       label: Text.ParserCombinators.ReadP.Fail_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,70,97,105,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tll: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.907694269 UTC

[Text.ParserCombinators.ReadP.Result_con_entry() //  [R1]
         { info_tbl: [(c3tls,
                       label: Text.ParserCombinators.ReadP.Result_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,82,101,115,117,108,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tls: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.911194441 UTC

[Text.ParserCombinators.ReadP.Final_con_entry() //  [R1]
         { info_tbl: [(c3tlz,
                       label: Text.ParserCombinators.ReadP.Final_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,84,101,120,116,46,80,97,114,115,101,114,67,111,109,98,105,110,97,116,111,114,115,46,82,101,97,100,80,46,70,105,110,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3tlz: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:58:06.914640952 UTC

[section ""relreadonly" . S3s6G_srt" {
     S3s6G_srt:
         const Control.Exception.Base.patError_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const lvl1_r3oqF_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c>>=_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<*>_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$cliftA2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$csome_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c<*_closure;
         const Text.ParserCombinators.ReadP.$fApplicativeP_$c*>_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$cmany_closure;
         const Text.ParserCombinators.ReadP.$fMonadP_$c>>_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP3_closure;
         const Text.ParserCombinators.ReadP.choice_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const lvl3_r3oqH_closure;
         const Text.ParserCombinators.ReadP.gather1_closure;
         const Text.ParserCombinators.ReadP.option1_closure;
         const Text.ParserCombinators.ReadP.optional1_closure;
         const Text.ParserCombinators.ReadP.endBy3_closure;
         const Text.ParserCombinators.ReadP.many2_closure;
         const Text.ParserCombinators.ReadP.endBy4_closure;
         const Text.ParserCombinators.ReadP.skipMany2_closure;
         const Text.ParserCombinators.ReadP.skipMany3_closure;
         const Text.ParserCombinators.ReadP.sepBy3_closure;
         const Text.ParserCombinators.ReadP.endBy2_closure;
         const Text.ParserCombinators.ReadP.sepBy2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeReadP1_closure;
         const Text.ParserCombinators.ReadP.chainr3_closure;
         const Text.ParserCombinators.ReadP.chainr2_closure;
         const Text.ParserCombinators.ReadP.chainl3_closure;
         const Text.ParserCombinators.ReadP.chainl2_closure;
         const Text.ParserCombinators.ReadP.$w<++_closure;
         const Text.ParserCombinators.ReadP.<++1_closure;
         const Text.ParserCombinators.ReadP.manyTill1_closure;
 }]

