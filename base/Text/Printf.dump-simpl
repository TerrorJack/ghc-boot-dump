
==================== Tidy Core ====================
2018-03-16 16:07:03.403506625 UTC

Result size of Tidy Core
  = {terms: 4,789, types: 4,318, coercions: 103, joins: 16/46}

-- RHS size: {terms: 6, types: 10, coercions: 0, joins: 0/0}
toChar :: forall c. IsChar c => c -> Char
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),U(U,A)>,
 RULES: Built in rule for toChar: "Class op toChar"]
toChar
  = \ (@ c_ac8qv) (v_B1 :: IsChar c_ac8qv) ->
      case v_B1 of v_B1 { Text.Printf.C:IsChar v_B2 v_B3 -> v_B2 }

-- RHS size: {terms: 6, types: 10, coercions: 0, joins: 0/0}
fromChar :: forall c. IsChar c => Char -> c
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),U(A,U)>,
 RULES: Built in rule for fromChar: "Class op fromChar"]
fromChar
  = \ (@ c_ac8qv) (v_B1 :: IsChar c_ac8qv) ->
      case v_B1 of v_B1 { Text.Printf.C:IsChar v_B2 v_B3 -> v_B3 }

-- RHS size: {terms: 6, types: 10, coercions: 0, joins: 0/0}
formatArg :: forall a. PrintfArg a => a -> FieldFormatter
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),U(U,A)>,
 RULES: Built in rule for formatArg: "Class op formatArg"]
formatArg
  = \ (@ a_ac8qw) (v_B1 :: PrintfArg a_ac8qw) ->
      case v_B1 of v_B1 { Text.Printf.C:PrintfArg v_B2 v_B3 -> v_B2 }

-- RHS size: {terms: 6, types: 10, coercions: 0, joins: 0/0}
parseFormat :: forall a. PrintfArg a => a -> ModifierParser
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),U(A,U)>,
 RULES: Built in rule for parseFormat: "Class op parseFormat"]
parseFormat
  = \ (@ a_ac8qw) (v_B1 :: PrintfArg a_ac8qw) ->
      case v_B1 of v_B1 { Text.Printf.C:PrintfArg v_B2 v_B3 -> v_B3 }

-- RHS size: {terms: 3, types: 4, coercions: 2, joins: 0/0}
hspr [InlPrag=INLINE]
  :: forall t. HPrintfType t => Handle -> String -> [UPrintf] -> t
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ t_ac8qz) (v_B1 [Occ=Once] :: HPrintfType t_ac8qz) ->
                 v_B1
                 `cast` (Text.Printf.N:HPrintfType[0] <t_ac8qz>_N
                         :: (HPrintfType t_ac8qz :: Constraint)
                            ~R# (Handle -> String -> [UPrintf] -> t_ac8qz :: *))}]
hspr
  = \ (@ t_ac8qz) (v_B1 :: HPrintfType t_ac8qz) ->
      v_B1
      `cast` (Text.Printf.N:HPrintfType[0] <t_ac8qz>_N
              :: (HPrintfType t_ac8qz :: Constraint)
                 ~R# (Handle -> String -> [UPrintf] -> t_ac8qz :: *))

-- RHS size: {terms: 3, types: 4, coercions: 2, joins: 0/0}
spr [InlPrag=INLINE]
  :: forall t. PrintfType t => String -> [UPrintf] -> t
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ t_ac8qA) (v_B1 [Occ=Once] :: PrintfType t_ac8qA) ->
                 v_B1
                 `cast` (Text.Printf.N:PrintfType[0] <t_ac8qA>_N
                         :: (PrintfType t_ac8qA :: Constraint)
                            ~R# (String -> [UPrintf] -> t_ac8qA :: *))}]
spr
  = \ (@ t_ac8qA) (v_B1 :: PrintfType t_ac8qA) ->
      v_B1
      `cast` (Text.Printf.N:PrintfType[0] <t_ac8qA>_N
              :: (PrintfType t_ac8qA :: Constraint)
                 ~R# (String -> [UPrintf] -> t_ac8qA :: *))

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Text.Printf.$fIsCharChar_$cfromChar :: Char -> Char
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (c_ac8qC [Occ=Once] :: Char) -> c_ac8qC}]
Text.Printf.$fIsCharChar_$cfromChar
  = \ (c_ac8qC :: Char) -> c_ac8qC

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Text.Printf.$fIsCharChar [InlPrag=NOUSERINLINE CONLIKE]
  :: IsChar Char
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:IsChar TYPE: Char
                            Text.Printf.$fIsCharChar_$cfromChar
                            Text.Printf.$fIsCharChar_$cfromChar]
Text.Printf.$fIsCharChar
  = Text.Printf.C:IsChar
      @ Char
      Text.Printf.$fIsCharChar_$cfromChar
      Text.Printf.$fIsCharChar_$cfromChar

-- RHS size: {terms: 20, types: 20, coercions: 2, joins: 0/0}
Text.Printf.$fHPrintfType(->)_$chspr
  :: forall a r.
     (PrintfArg a, HPrintfType r) =>
     Handle -> String -> [UPrintf] -> a -> r
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_ac8VI)
                 (@ r_ac8VJ)
                 ($dPrintfArg_ac8VK :: PrintfArg a_ac8VI)
                 ($dHPrintfType_ac8VL [Occ=Once] :: HPrintfType r_ac8VJ)
                 (hdl_ac8qH [Occ=Once] :: Handle)
                 (fmts_ac8qI [Occ=Once] :: String)
                 (args_ac8qJ [Occ=Once] :: [UPrintf])
                 (a1_ac8qK :: a_ac8VI) ->
                 ($dHPrintfType_ac8VL
                  `cast` (Text.Printf.N:HPrintfType[0] <r_ac8VJ>_N
                          :: (HPrintfType r_ac8VJ :: Constraint)
                             ~R# (Handle -> String -> [UPrintf] -> r_ac8VJ :: *)))
                   hdl_ac8qH
                   fmts_ac8qI
                   (GHC.Types.:
                      @ (ModifierParser, FieldFormatter)
                      (parseFormat @ a_ac8VI $dPrintfArg_ac8VK a1_ac8qK,
                       formatArg @ a_ac8VI $dPrintfArg_ac8VK a1_ac8qK)
                      args_ac8qJ)}]
Text.Printf.$fHPrintfType(->)_$chspr
  = \ (@ a_ac8VI)
      (@ r_ac8VJ)
      ($dPrintfArg_ac8VK :: PrintfArg a_ac8VI)
      ($dHPrintfType_ac8VL :: HPrintfType r_ac8VJ)
      (hdl_ac8qH :: Handle)
      (fmts_ac8qI :: String)
      (args_ac8qJ :: [UPrintf])
      (a1_ac8qK :: a_ac8VI) ->
      ($dHPrintfType_ac8VL
       `cast` (Text.Printf.N:HPrintfType[0] <r_ac8VJ>_N
               :: (HPrintfType r_ac8VJ :: Constraint)
                  ~R# (Handle -> String -> [UPrintf] -> r_ac8VJ :: *)))
        hdl_ac8qH
        fmts_ac8qI
        (GHC.Types.:
           @ (ModifierParser, FieldFormatter)
           (parseFormat @ a_ac8VI $dPrintfArg_ac8VK a1_ac8qK,
            formatArg @ a_ac8VI $dPrintfArg_ac8VK a1_ac8qK)
           args_ac8qJ)

-- RHS size: {terms: 1, types: 0, coercions: 16, joins: 0/0}
Text.Printf.$fHPrintfType(->) [InlPrag=INLINE (sat-args=0)]
  :: forall a r. (PrintfArg a, HPrintfType r) => HPrintfType (a -> r)
[GblId[DFunId(nt)],
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= Text.Printf.$fHPrintfType(->)_$chspr
               `cast` (forall (a :: <*>_N) (r :: <*>_N).
                       <PrintfArg a>_R
                       ->_R <HPrintfType r>_R
                       ->_R Sym (Text.Printf.N:HPrintfType[0] <a -> r>_N)
                       :: (forall a r.
                           (PrintfArg a, HPrintfType r) =>
                           Handle -> String -> [UPrintf] -> a -> r :: *)
                          ~R# (forall a r.
                               (PrintfArg a, HPrintfType r) =>
                               HPrintfType (a -> r) :: *))}]
Text.Printf.$fHPrintfType(->)
  = Text.Printf.$fHPrintfType(->)_$chspr
    `cast` (forall (a :: <*>_N) (r :: <*>_N).
            <PrintfArg a>_R
            ->_R <HPrintfType r>_R
            ->_R Sym (Text.Printf.N:HPrintfType[0] <a -> r>_N)
            :: (forall a r.
                (PrintfArg a, HPrintfType r) =>
                Handle -> String -> [UPrintf] -> a -> r :: *)
               ~R# (forall a r.
                    (PrintfArg a, HPrintfType r) =>
                    HPrintfType (a -> r) :: *))

-- RHS size: {terms: 18, types: 19, coercions: 2, joins: 0/0}
Text.Printf.$fPrintfType(->)_$cspr
  :: forall a r.
     (PrintfArg a, PrintfType r) =>
     String -> [UPrintf] -> a -> r
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(S)),1*C1(C1(U))><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_ac8UR)
                 (@ r_ac8US)
                 ($dPrintfArg_ac8UT :: PrintfArg a_ac8UR)
                 ($dPrintfType_ac8UU [Occ=Once] :: PrintfType r_ac8US)
                 (fmts_ac8qN [Occ=Once] :: String)
                 (args_ac8qO [Occ=Once] :: [UPrintf])
                 (a1_ac8qP :: a_ac8UR) ->
                 ($dPrintfType_ac8UU
                  `cast` (Text.Printf.N:PrintfType[0] <r_ac8US>_N
                          :: (PrintfType r_ac8US :: Constraint)
                             ~R# (String -> [UPrintf] -> r_ac8US :: *)))
                   fmts_ac8qN
                   (GHC.Types.:
                      @ (ModifierParser, FieldFormatter)
                      (parseFormat @ a_ac8UR $dPrintfArg_ac8UT a1_ac8qP,
                       formatArg @ a_ac8UR $dPrintfArg_ac8UT a1_ac8qP)
                      args_ac8qO)}]
Text.Printf.$fPrintfType(->)_$cspr
  = \ (@ a_ac8UR)
      (@ r_ac8US)
      ($dPrintfArg_ac8UT :: PrintfArg a_ac8UR)
      ($dPrintfType_ac8UU :: PrintfType r_ac8US)
      (fmts_ac8qN :: String)
      (args_ac8qO :: [UPrintf])
      (a1_ac8qP :: a_ac8UR) ->
      ($dPrintfType_ac8UU
       `cast` (Text.Printf.N:PrintfType[0] <r_ac8US>_N
               :: (PrintfType r_ac8US :: Constraint)
                  ~R# (String -> [UPrintf] -> r_ac8US :: *)))
        fmts_ac8qN
        (GHC.Types.:
           @ (ModifierParser, FieldFormatter)
           (parseFormat @ a_ac8UR $dPrintfArg_ac8UT a1_ac8qP,
            formatArg @ a_ac8UR $dPrintfArg_ac8UT a1_ac8qP)
           args_ac8qO)

-- RHS size: {terms: 1, types: 0, coercions: 16, joins: 0/0}
Text.Printf.$fPrintfType(->) [InlPrag=INLINE (sat-args=0)]
  :: forall a r. (PrintfArg a, PrintfType r) => PrintfType (a -> r)
[GblId[DFunId(nt)],
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(S)),1*C1(C1(U))><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= Text.Printf.$fPrintfType(->)_$cspr
               `cast` (forall (a :: <*>_N) (r :: <*>_N).
                       <PrintfArg a>_R
                       ->_R <PrintfType r>_R
                       ->_R Sym (Text.Printf.N:PrintfType[0] <a -> r>_N)
                       :: (forall a r.
                           (PrintfArg a, PrintfType r) =>
                           String -> [UPrintf] -> a -> r :: *)
                          ~R# (forall a r.
                               (PrintfArg a, PrintfType r) =>
                               PrintfType (a -> r) :: *))}]
Text.Printf.$fPrintfType(->)
  = Text.Printf.$fPrintfType(->)_$cspr
    `cast` (forall (a :: <*>_N) (r :: <*>_N).
            <PrintfArg a>_R
            ->_R <PrintfType r>_R
            ->_R Sym (Text.Printf.N:PrintfType[0] <a -> r>_N)
            :: (forall a r.
                (PrintfArg a, PrintfType r) =>
                String -> [UPrintf] -> a -> r :: *)
               ~R# (forall a r.
                    (PrintfArg a, PrintfType r) =>
                    PrintfType (a -> r) :: *))

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
fmtChar :: FieldFormat -> Char
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLS),1*U(A,A,A,A,A,A,1*U(U))>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dc9lN [Occ=Once!] :: FieldFormat) ->
                 case ds_dc9lN of
                 { FieldFormat _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                               _ [Occ=Dead] _ [Occ=Dead] ds7_dc9lU [Occ=Once] ->
                 ds7_dc9lU
                 }}]
fmtChar
  = \ (ds_dc9lN :: FieldFormat) ->
      case ds_dc9lN of
      { FieldFormat ds1_dc9lO ds2_dc9lP ds3_dc9lQ ds4_dc9lR ds5_dc9lS
                    ds6_dc9lT ds7_dc9lU ->
      ds7_dc9lU
      }

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
fmtModifiers :: FieldFormat -> String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dc9lF [Occ=Once!] :: FieldFormat) ->
                 case ds_dc9lF of
                 { FieldFormat _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                               _ [Occ=Dead] ds6_dc9lL [Occ=Once] _ [Occ=Dead] ->
                 ds6_dc9lL
                 }}]
fmtModifiers
  = \ (ds_dc9lF :: FieldFormat) ->
      case ds_dc9lF of
      { FieldFormat ds1_dc9lG ds2_dc9lH ds3_dc9lI ds4_dc9lJ ds5_dc9lK
                    ds6_dc9lL ds7_dc9lM ->
      ds6_dc9lL
      }

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
fmtAlternate :: FieldFormat -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dc9lx [Occ=Once!] :: FieldFormat) ->
                 case ds_dc9lx of
                 { FieldFormat _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                               ds5_dc9lC [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds5_dc9lC
                 }}]
fmtAlternate
  = \ (ds_dc9lx :: FieldFormat) ->
      case ds_dc9lx of
      { FieldFormat ds1_dc9ly ds2_dc9lz ds3_dc9lA ds4_dc9lB ds5_dc9lC
                    ds6_dc9lD ds7_dc9lE ->
      ds5_dc9lC
      }

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
fmtSign :: FieldFormat -> Maybe FormatSign
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dc9lp [Occ=Once!] :: FieldFormat) ->
                 case ds_dc9lp of
                 { FieldFormat _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                               ds4_dc9lt [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds4_dc9lt
                 }}]
fmtSign
  = \ (ds_dc9lp :: FieldFormat) ->
      case ds_dc9lp of
      { FieldFormat ds1_dc9lq ds2_dc9lr ds3_dc9ls ds4_dc9lt ds5_dc9lu
                    ds6_dc9lv ds7_dc9lw ->
      ds4_dc9lt
      }

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
fmtAdjust :: FieldFormat -> Maybe FormatAdjustment
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dc9lh [Occ=Once!] :: FieldFormat) ->
                 case ds_dc9lh of
                 { FieldFormat _ [Occ=Dead] _ [Occ=Dead] ds3_dc9lk [Occ=Once]
                               _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds3_dc9lk
                 }}]
fmtAdjust
  = \ (ds_dc9lh :: FieldFormat) ->
      case ds_dc9lh of
      { FieldFormat ds1_dc9li ds2_dc9lj ds3_dc9lk ds4_dc9ll ds5_dc9lm
                    ds6_dc9ln ds7_dc9lo ->
      ds3_dc9lk
      }

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
fmtPrecision :: FieldFormat -> Maybe Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dc9l9 [Occ=Once!] :: FieldFormat) ->
                 case ds_dc9l9 of
                 { FieldFormat _ [Occ=Dead] ds2_dc9lb [Occ=Once] _ [Occ=Dead]
                               _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds2_dc9lb
                 }}]
fmtPrecision
  = \ (ds_dc9l9 :: FieldFormat) ->
      case ds_dc9l9 of
      { FieldFormat ds1_dc9la ds2_dc9lb ds3_dc9lc ds4_dc9ld ds5_dc9le
                    ds6_dc9lf ds7_dc9lg ->
      ds2_dc9lb
      }

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
fmtWidth :: FieldFormat -> Maybe Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dc9l1 [Occ=Once!] :: FieldFormat) ->
                 case ds_dc9l1 of
                 { FieldFormat ds1_dc9l2 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                               _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds1_dc9l2
                 }}]
fmtWidth
  = \ (ds_dc9l1 :: FieldFormat) ->
      case ds_dc9l1 of
      { FieldFormat ds1_dc9l2 ds2_dc9l3 ds3_dc9l4 ds4_dc9l5 ds5_dc9l6
                    ds6_dc9l7 ds7_dc9l8 ->
      ds1_dc9l2
      }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
fpRest :: FormatParse -> String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dc9kX [Occ=Once!] :: FormatParse) ->
                 case ds_dc9kX of
                 { FormatParse _ [Occ=Dead] _ [Occ=Dead] ds3_dc9l0 [Occ=Once] ->
                 ds3_dc9l0
                 }}]
fpRest
  = \ (ds_dc9kX :: FormatParse) ->
      case ds_dc9kX of { FormatParse ds1_dc9kY ds2_dc9kZ ds3_dc9l0 ->
      ds3_dc9l0
      }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
fpChar :: FormatParse -> Char
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,1*U(U),A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dc9kT [Occ=Once!] :: FormatParse) ->
                 case ds_dc9kT of
                 { FormatParse _ [Occ=Dead] ds2_dc9kV [Occ=Once] _ [Occ=Dead] ->
                 ds2_dc9kV
                 }}]
fpChar
  = \ (ds_dc9kT :: FormatParse) ->
      case ds_dc9kT of { FormatParse ds1_dc9kU ds2_dc9kV ds3_dc9kW ->
      ds2_dc9kV
      }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
fpModifiers :: FormatParse -> String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(1*U,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dc9kP [Occ=Once!] :: FormatParse) ->
                 case ds_dc9kP of
                 { FormatParse ds1_dc9kQ [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds1_dc9kQ
                 }}]
fpModifiers
  = \ (ds_dc9kP :: FormatParse) ->
      case ds_dc9kP of { FormatParse ds1_dc9kQ ds2_dc9kR ds3_dc9kS ->
      ds1_dc9kQ
      }

-- RHS size: {terms: 6, types: 6, coercions: 2, joins: 0/0}
printf :: forall r. PrintfType r => String -> r
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(C(S)),1*C1(C1(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ r_ac8UD)
                 ($dPrintfType_ac8UF [Occ=Once] :: PrintfType r_ac8UD)
                 (fmts_ac8rb [Occ=Once] :: String) ->
                 ($dPrintfType_ac8UF
                  `cast` (Text.Printf.N:PrintfType[0] <r_ac8UD>_N
                          :: (PrintfType r_ac8UD :: Constraint)
                             ~R# (String -> [UPrintf] -> r_ac8UD :: *)))
                   fmts_ac8rb (GHC.Types.[] @ UPrintf)}]
printf
  = \ (@ r_ac8UD)
      ($dPrintfType_ac8UF :: PrintfType r_ac8UD)
      (fmts_ac8rb :: String) ->
      ($dPrintfType_ac8UF
       `cast` (Text.Printf.N:PrintfType[0] <r_ac8UD>_N
               :: (PrintfType r_ac8UD :: Constraint)
                  ~R# (String -> [UPrintf] -> r_ac8UD :: *)))
        fmts_ac8rb (GHC.Types.[] @ UPrintf)

-- RHS size: {terms: 8, types: 7, coercions: 2, joins: 0/0}
hPrintf :: forall r. HPrintfType r => Handle -> String -> r
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ r_ac8Ux)
                 ($dHPrintfType_ac8Uz [Occ=Once] :: HPrintfType r_ac8Ux)
                 (hdl_ac8rc [Occ=Once] :: Handle)
                 (fmts_ac8rd [Occ=Once] :: String) ->
                 ($dHPrintfType_ac8Uz
                  `cast` (Text.Printf.N:HPrintfType[0] <r_ac8Ux>_N
                          :: (HPrintfType r_ac8Ux :: Constraint)
                             ~R# (Handle -> String -> [UPrintf] -> r_ac8Ux :: *)))
                   hdl_ac8rc fmts_ac8rd (GHC.Types.[] @ UPrintf)}]
hPrintf
  = \ (@ r_ac8Ux)
      ($dHPrintfType_ac8Uz :: HPrintfType r_ac8Ux)
      (hdl_ac8rc :: Handle)
      (fmts_ac8rd :: String) ->
      ($dHPrintfType_ac8Uz
       `cast` (Text.Printf.N:HPrintfType[0] <r_ac8Ux>_N
               :: (HPrintfType r_ac8Ux :: Constraint)
                  ~R# (Handle -> String -> [UPrintf] -> r_ac8Ux :: *)))
        hdl_ac8rc fmts_ac8rd (GHC.Types.[] @ UPrintf)

-- RHS size: {terms: 21, types: 17, coercions: 0, joins: 0/0}
vFmt :: Char -> FieldFormat -> FieldFormat
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S(LLLLLLS(S)),1*U(U,U,U,U,U,U,U(U))>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (c_ac8rt [Occ=Once] :: Char)
                 (ufmt_ac8ru [Occ=Once!] :: FieldFormat) ->
                 case ufmt_ac8ru of wild_X2Q
                 { FieldFormat ds_dc9fN [Occ=Once] ds1_dc9fO [Occ=Once]
                               ds2_dc9fP [Occ=Once] ds3_dc9fQ [Occ=Once] ds4_dc9fR [Occ=Once]
                               ds5_dc9fS [Occ=Once] ds6_dc9fT [Occ=Once!] ->
                 case ds6_dc9fT of { GHC.Types.C# ds7_dc9fU [Occ=Once!] ->
                 case ds7_dc9fU of {
                   __DEFAULT -> wild_X2Q;
                   'v'# ->
                     Text.Printf.FieldFormat
                       ds_dc9fN ds1_dc9fO ds2_dc9fP ds3_dc9fQ ds4_dc9fR ds5_dc9fS c_ac8rt
                 }
                 }
                 }}]
vFmt
  = \ (c_ac8rt :: Char) (ufmt_ac8ru :: FieldFormat) ->
      case ufmt_ac8ru of wild_X2Q
      { FieldFormat ds_dc9fN ds1_dc9fO ds2_dc9fP ds3_dc9fQ ds4_dc9fR
                    ds5_dc9fS ds6_dc9fT ->
      case ds6_dc9fT of { GHC.Types.C# ds7_dc9fU ->
      case ds7_dc9fU of {
        __DEFAULT -> wild_X2Q;
        'v'# ->
          Text.Printf.FieldFormat
            ds_dc9fN ds1_dc9fO ds2_dc9fP ds3_dc9fQ ds4_dc9fR ds5_dc9fS c_ac8rt
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rccbg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_rccbg = "printf: "#

-- RHS size: {terms: 6, types: 5, coercions: 0, joins: 0/0}
perror :: forall a. String -> a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
perror
  = \ (@ a_ac8H6) (s_ac8uR :: String) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_ac8H6
        (GHC.CString.unpackAppendCString# lvl_rccbg s_ac8uR)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl1_rccbh :: [Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
lvl1_rccbh
  = GHC.Types.: @ Char GHC.Show.$fShowChar3 (GHC.Types.[] @ Char)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_rccbi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_rccbi = "bad formatting char "#

-- RHS size: {terms: 17, types: 7, coercions: 0, joins: 0/0}
Text.Printf.$werrorBadFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Prim.Char# -> a
[GblId, Arity=1, Str=<B,1*U>x, Unf=OtherCon []]
Text.Printf.$werrorBadFormat
  = \ (@ a_scb6r) (ww_scb6v :: GHC.Prim.Char#) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_scb6r
        (GHC.CString.unpackAppendCString#
           lvl_rccbg
           (GHC.CString.unpackAppendCString#
              lvl2_rccbi
              (case ww_scb6v of ds1_ic9ne {
                 __DEFAULT ->
                   GHC.Types.:
                     @ Char
                     GHC.Show.$fShowChar3
                     (GHC.Show.$wshowLitChar ds1_ic9ne lvl1_rccbh);
                 '\''# -> GHC.Show.$fShowChar1
               })))

-- RHS size: {terms: 7, types: 6, coercions: 0, joins: 0/0}
errorBadFormat [InlPrag=NOUSERINLINE[0]] :: forall a. Char -> a
[GblId,
 Arity=1,
 Str=<B,1*U(1*U)>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_scb6r) (w_scb6s [Occ=Once!] :: Char) ->
                 case w_scb6s of { GHC.Types.C# ww1_scb6v [Occ=Once] ->
                 Text.Printf.$werrorBadFormat @ a_scb6r ww1_scb6v
                 }}]
errorBadFormat
  = \ (@ a_scb6r) (w_scb6s :: Char) ->
      case w_scb6s of { GHC.Types.C# ww1_scb6v ->
      Text.Printf.$werrorBadFormat @ a_scb6r ww1_scb6v
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl3_rccbj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl3_rccbj = "printf: formatting string ended prematurely"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
errorShortFormat :: forall a. a
[GblId, Str=x]
errorShortFormat
  = \ (@ a_ac8Hm) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_ac8Hm
        (GHC.CString.unpackCString# lvl3_rccbj)

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
Text.Printf.$dmparseFormat
  :: forall a. PrintfArg a => a -> ModifierParser
[GblId,
 Arity=3,
 Str=<L,A><L,A><S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_ac8qw)
                 _ [Occ=Dead]
                 _ [Occ=Dead]
                 (ds1_dc9lW [Occ=Once!] :: [Char]) ->
                 case ds1_dc9lW of {
                   [] -> errorShortFormat @ FormatParse;
                   : c_ac8qx [Occ=Once] cs_ac8qy [Occ=Once] ->
                     Text.Printf.FormatParse (GHC.Types.[] @ Char) c_ac8qx cs_ac8qy
                 }}]
Text.Printf.$dmparseFormat
  = \ (@ a_ac8qw) _ [Occ=Dead] _ [Occ=Dead] (ds1_dc9lW :: [Char]) ->
      case ds1_dc9lW of {
        [] -> errorShortFormat @ FormatParse;
        : c_ac8qx cs_ac8qy ->
          Text.Printf.FormatParse (GHC.Types.[] @ Char) c_ac8qx cs_ac8qy
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_rccbk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl4_rccbk = "printf: argument list ended prematurely"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
errorMissingArgument :: forall a. a
[GblId, Str=x]
errorMissingArgument
  = \ (@ a_ac8Hp) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_ac8Hp
        (GHC.CString.unpackCString# lvl4_rccbk)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl5_rccbl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl5_rccbl = "printf: bad argument"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
errorBadArgument :: forall a. a
[GblId, Str=x]
errorBadArgument
  = \ (@ a_ac8Hs) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ a_ac8Hs
        (GHC.CString.unpackCString# lvl5_rccbl)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgDouble9 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgDouble9 = "-"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgDouble8 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgDouble8
  = GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl6_rccbm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl6_rccbm = "printf: internal error: impossible dfmt"#

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgDouble7 :: Maybe Int -> Double -> ShowS
[GblId, Str=x]
Text.Printf.$fPrintfArgDouble7
  = errorWithoutStackTrace
      @ 'GHC.Types.LiftedRep
      @ (Maybe Int -> Double -> ShowS)
      (GHC.CString.unpackCString# lvl6_rccbm)

-- RHS size: {terms: 136, types: 104, coercions: 0, joins: 1/1}
Text.Printf.$w$sdfmt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char#
     -> Maybe Int -> Bool -> Double -> (# String, String #)
[GblId,
 Arity=4,
 Str=<S,U><L,U><L,1*U><L,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 188 100] 631 0}]
Text.Printf.$w$sdfmt
  = \ (ww_scb6E :: GHC.Prim.Char#)
      (w_scb6z :: Maybe Int)
      (w1_scb6A :: Bool)
      (w2_scb6B :: Double) ->
      case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_ic925
             (GHC.Prim.ord# ww_scb6E) GHC.Prim.realWorld#
      of
      { (# ds_ic92a, ds1_ic92b #) ->
      case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_ic92s
             (GHC.Prim.ord# ww_scb6E) GHC.Prim.realWorld#
      of
      { (# ds2_ic92x, ds3_ic92y #) ->
      case GHC.Prim.leWord# (GHC.Prim.int2Word# ds3_ic92y) 1114111## of {
        __DEFAULT -> case GHC.Char.$wlvl ds3_ic92y of wild2_00 { };
        1# ->
          join {
            $j_scbfk [Dmd=<C(S),1*C1(U(U,U))>]
              :: [Char] -> (# String, String #)
            [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []]
            $j_scbfk (karg_sc9R2 [OS=OneShot] :: [Char])
              = case ds1_ic92b of {
                  __DEFAULT ->
                    case map @ Char @ Char toUpper karg_sc9R2 of wild4_X35 {
                      [] -> (# GHC.Types.[] @ Char, GHC.Types.[] @ Char #);
                      : ds4_dc91N cs_ac8uP ->
                        case ds4_dc91N of { GHC.Types.C# ds5_dc91O ->
                        case ds5_dc91O of {
                          __DEFAULT -> (# GHC.Types.[] @ Char, wild4_X35 #);
                          '-'# -> (# Text.Printf.$fPrintfArgDouble8, cs_ac8uP #)
                        }
                        }
                    };
                  0# ->
                    case karg_sc9R2 of wild4_X35 {
                      [] -> (# GHC.Types.[] @ Char, GHC.Types.[] @ Char #);
                      : ds4_dc91N cs_ac8uP ->
                        case ds4_dc91N of { GHC.Types.C# ds5_dc91O ->
                        case ds5_dc91O of {
                          __DEFAULT -> (# GHC.Types.[] @ Char, wild4_X35 #);
                          '-'# -> (# Text.Printf.$fPrintfArgDouble8, cs_ac8uP #)
                        }
                        }
                    }
                } } in
          case GHC.Prim.chr# ds3_ic92y of {
            __DEFAULT -> case Text.Printf.$fPrintfArgDouble7 of wild2_00 { };
            'e'# ->
              case w2_scb6B of { GHC.Types.D# ww2_ic9Qy ->
              jump $j_scbfk
                (GHC.Float.$w$sformatRealFloatAlt
                   GHC.Float.FFExponent w_scb6z GHC.Types.False ww2_ic9Qy)
              };
            'f'# ->
              case w1_scb6A of {
                False ->
                  case w2_scb6B of { GHC.Types.D# ww2_ic9Qy ->
                  jump $j_scbfk
                    (GHC.Float.$w$sformatRealFloatAlt
                       GHC.Float.FFFixed w_scb6z GHC.Types.False ww2_ic9Qy)
                  };
                True ->
                  case w2_scb6B of { GHC.Types.D# ww2_ic9Qy ->
                  jump $j_scbfk
                    (GHC.Float.$w$sformatRealFloatAlt
                       GHC.Float.FFFixed w_scb6z GHC.Types.True ww2_ic9Qy)
                  }
              };
            'g'# ->
              case w1_scb6A of {
                False ->
                  case w2_scb6B of { GHC.Types.D# ww2_ic9Qy ->
                  jump $j_scbfk
                    (GHC.Float.$w$sformatRealFloatAlt
                       GHC.Float.FFGeneric w_scb6z GHC.Types.False ww2_ic9Qy)
                  };
                True ->
                  case w2_scb6B of { GHC.Types.D# ww2_ic9Qy ->
                  jump $j_scbfk
                    (GHC.Float.$w$sformatRealFloatAlt
                       GHC.Float.FFGeneric w_scb6z GHC.Types.True ww2_ic9Qy)
                  }
              }
          }
      }
      }
      }

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgFloat1 :: Maybe Int -> Float -> ShowS
[GblId, Str=x]
Text.Printf.$fPrintfArgFloat1
  = errorWithoutStackTrace
      @ 'GHC.Types.LiftedRep
      @ (Maybe Int -> Float -> ShowS)
      (GHC.CString.unpackCString# lvl6_rccbm)

-- RHS size: {terms: 136, types: 104, coercions: 0, joins: 1/1}
Text.Printf.$w$sdfmt1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char#
     -> Maybe Int -> Bool -> Float -> (# String, String #)
[GblId,
 Arity=4,
 Str=<S,U><L,U><L,1*U><L,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 188 100] 631 0}]
Text.Printf.$w$sdfmt1
  = \ (ww_scb6Q :: GHC.Prim.Char#)
      (w_scb6L :: Maybe Int)
      (w1_scb6M :: Bool)
      (w2_scb6N :: Float) ->
      case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_ic925
             (GHC.Prim.ord# ww_scb6Q) GHC.Prim.realWorld#
      of
      { (# ds_ic92a, ds1_ic92b #) ->
      case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_ic92s
             (GHC.Prim.ord# ww_scb6Q) GHC.Prim.realWorld#
      of
      { (# ds2_ic92x, ds3_ic92y #) ->
      case GHC.Prim.leWord# (GHC.Prim.int2Word# ds3_ic92y) 1114111## of {
        __DEFAULT -> case GHC.Char.$wlvl ds3_ic92y of wild2_00 { };
        1# ->
          join {
            $j_scbfH [Dmd=<C(S),1*C1(U(U,U))>]
              :: [Char] -> (# String, String #)
            [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []]
            $j_scbfH (karg_sc9Rh [OS=OneShot] :: [Char])
              = case ds1_ic92b of {
                  __DEFAULT ->
                    case map @ Char @ Char toUpper karg_sc9Rh of wild4_X35 {
                      [] -> (# GHC.Types.[] @ Char, GHC.Types.[] @ Char #);
                      : ds4_dc91N cs_ac8uP ->
                        case ds4_dc91N of { GHC.Types.C# ds5_dc91O ->
                        case ds5_dc91O of {
                          __DEFAULT -> (# GHC.Types.[] @ Char, wild4_X35 #);
                          '-'# -> (# Text.Printf.$fPrintfArgDouble8, cs_ac8uP #)
                        }
                        }
                    };
                  0# ->
                    case karg_sc9Rh of wild4_X35 {
                      [] -> (# GHC.Types.[] @ Char, GHC.Types.[] @ Char #);
                      : ds4_dc91N cs_ac8uP ->
                        case ds4_dc91N of { GHC.Types.C# ds5_dc91O ->
                        case ds5_dc91O of {
                          __DEFAULT -> (# GHC.Types.[] @ Char, wild4_X35 #);
                          '-'# -> (# Text.Printf.$fPrintfArgDouble8, cs_ac8uP #)
                        }
                        }
                    }
                } } in
          case GHC.Prim.chr# ds3_ic92y of {
            __DEFAULT -> case Text.Printf.$fPrintfArgFloat1 of wild2_00 { };
            'e'# ->
              case w2_scb6N of { GHC.Types.F# ww2_ic9Qq ->
              jump $j_scbfH
                (GHC.Float.$w$sformatRealFloatAlt1
                   GHC.Float.FFExponent w_scb6L GHC.Types.False ww2_ic9Qq)
              };
            'f'# ->
              case w1_scb6M of {
                False ->
                  case w2_scb6N of { GHC.Types.F# ww2_ic9Qq ->
                  jump $j_scbfH
                    (GHC.Float.$w$sformatRealFloatAlt1
                       GHC.Float.FFFixed w_scb6L GHC.Types.False ww2_ic9Qq)
                  };
                True ->
                  case w2_scb6N of { GHC.Types.F# ww2_ic9Qq ->
                  jump $j_scbfH
                    (GHC.Float.$w$sformatRealFloatAlt1
                       GHC.Float.FFFixed w_scb6L GHC.Types.True ww2_ic9Qq)
                  }
              };
            'g'# ->
              case w1_scb6M of {
                False ->
                  case w2_scb6N of { GHC.Types.F# ww2_ic9Qq ->
                  jump $j_scbfH
                    (GHC.Float.$w$sformatRealFloatAlt1
                       GHC.Float.FFGeneric w_scb6L GHC.Types.False ww2_ic9Qq)
                  };
                True ->
                  case w2_scb6N of { GHC.Types.F# ww2_ic9Qq ->
                  jump $j_scbfH
                    (GHC.Float.$w$sformatRealFloatAlt1
                       GHC.Float.FFGeneric w_scb6L GHC.Types.True ww2_ic9Qq)
                  }
              }
          }
      }
      }
      }

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
Text.Printf.formatRealFloat1 :: forall a. Maybe Int -> a -> ShowS
[GblId, Str=x]
Text.Printf.formatRealFloat1
  = \ (@ a_ac8Hv) ->
      errorWithoutStackTrace
        @ 'GHC.Types.LiftedRep
        @ (Maybe Int -> a_ac8Hv -> ShowS)
        (GHC.CString.unpackCString# lvl6_rccbm)

-- RHS size: {terms: 128, types: 105, coercions: 0, joins: 1/1}
Text.Printf.$wdfmt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     RealFloat a =>
     GHC.Prim.Char# -> Maybe Int -> Bool -> a -> (# String, String #)
[GblId,
 Arity=5,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><S,U><L,U><L,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 188 0] 631 0}]
Text.Printf.$wdfmt
  = \ (@ a_scb6W)
      (w_scb6X :: RealFloat a_scb6W)
      (ww_scb74 :: GHC.Prim.Char#)
      (w1_scb6Z :: Maybe Int)
      (w2_scb70 :: Bool)
      (w3_scb71 :: a_scb6W) ->
      case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_ic925
             (GHC.Prim.ord# ww_scb74) GHC.Prim.realWorld#
      of
      { (# ds_ic92a, ds1_ic92b #) ->
      case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_ic92s
             (GHC.Prim.ord# ww_scb74) GHC.Prim.realWorld#
      of
      { (# ds2_ic92x, ds3_ic92y #) ->
      case GHC.Prim.leWord# (GHC.Prim.int2Word# ds3_ic92y) 1114111## of {
        __DEFAULT -> case GHC.Char.$wlvl ds3_ic92y of wild2_00 { };
        1# ->
          join {
            $j_scbg4 [Dmd=<C(S),1*C1(U(U,U))>]
              :: [Char] -> (# String, String #)
            [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []]
            $j_scbg4 (karg_sc9Rw [OS=OneShot] :: [Char])
              = case ds1_ic92b of {
                  __DEFAULT ->
                    case map @ Char @ Char toUpper karg_sc9Rw of wild4_X35 {
                      [] -> (# GHC.Types.[] @ Char, GHC.Types.[] @ Char #);
                      : ds4_dc91N cs_ac8uP ->
                        case ds4_dc91N of { GHC.Types.C# ds5_dc91O ->
                        case ds5_dc91O of {
                          __DEFAULT -> (# GHC.Types.[] @ Char, wild4_X35 #);
                          '-'# -> (# Text.Printf.$fPrintfArgDouble8, cs_ac8uP #)
                        }
                        }
                    };
                  0# ->
                    case karg_sc9Rw of wild4_X35 {
                      [] -> (# GHC.Types.[] @ Char, GHC.Types.[] @ Char #);
                      : ds4_dc91N cs_ac8uP ->
                        case ds4_dc91N of { GHC.Types.C# ds5_dc91O ->
                        case ds5_dc91O of {
                          __DEFAULT -> (# GHC.Types.[] @ Char, wild4_X35 #);
                          '-'# -> (# Text.Printf.$fPrintfArgDouble8, cs_ac8uP #)
                        }
                        }
                    }
                } } in
          case GHC.Prim.chr# ds3_ic92y of {
            __DEFAULT -> case Text.Printf.formatRealFloat1 of wild2_00 { };
            'e'# ->
              jump $j_scbg4
                (GHC.Float.formatRealFloatAlt
                   @ a_scb6W
                   w_scb6X
                   GHC.Float.FFExponent
                   w1_scb6Z
                   GHC.Types.False
                   w3_scb71);
            'f'# ->
              case w2_scb70 of {
                False ->
                  jump $j_scbg4
                    (GHC.Float.formatRealFloatAlt
                       @ a_scb6W
                       w_scb6X
                       GHC.Float.FFFixed
                       w1_scb6Z
                       GHC.Types.False
                       w3_scb71);
                True ->
                  jump $j_scbg4
                    (GHC.Float.formatRealFloatAlt
                       @ a_scb6W
                       w_scb6X
                       GHC.Float.FFFixed
                       w1_scb6Z
                       GHC.Types.True
                       w3_scb71)
              };
            'g'# ->
              case w2_scb70 of {
                False ->
                  jump $j_scbg4
                    (GHC.Float.formatRealFloatAlt
                       @ a_scb6W
                       w_scb6X
                       GHC.Float.FFGeneric
                       w1_scb6Z
                       GHC.Types.False
                       w3_scb71);
                True ->
                  jump $j_scbg4
                    (GHC.Float.formatRealFloatAlt
                       @ a_scb6W
                       w_scb6X
                       GHC.Float.FFGeneric
                       w1_scb6Z
                       GHC.Types.True
                       w3_scb71)
              }
          }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$trModule3 = GHC.Types.TrNameS Text.Printf.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$trModule2 = "Text.Printf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$trModule1 = GHC.Types.TrNameS Text.Printf.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Printf.$trModule
  = GHC.Types.Module Text.Printf.$trModule3 Text.Printf.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rccbn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_rccbn
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcBool (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rccbo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_rccbo
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rccbp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_rccbp
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.Types.$tcHandle (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_rccbq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_rccbq
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_rccbr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_rccbr
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcConstraint (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep5_rccbs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep5_rccbs
  = GHC.Types.:
      @ GHC.Types.KindRep $krep1_rccbo (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_rccbt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep6_rccbt
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep5_rccbs

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7_rccbu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep7_rccbu
  = GHC.Types.:
      @ GHC.Types.KindRep $krep3_rccbq (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_rccbv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep8_rccbv
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep7_rccbu

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_rccbw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep9_rccbw = GHC.Types.KindRepFun $krep8_rccbv $krep8_rccbv

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcHPrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.Printf.$tcHPrintfType1
  = GHC.Types.KindRepFun GHC.Types.krep$* $krep4_rccbr

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep10_rccbx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep10_rccbx = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_rccby :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep11_rccby = GHC.Types.KindRepFun $krep10_rccbx $krep3_rccbq

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_rccbz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep12_rccbz = GHC.Types.KindRepFun $krep3_rccbq $krep10_rccbx

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcIsChar2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Printf.$tcIsChar2 = "IsChar"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcIsChar1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tcIsChar1 = GHC.Types.TrNameS Text.Printf.$tcIsChar2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcIsChar :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tcIsChar
  = GHC.Types.TyCon
      660225335504909605##
      5800397900948792736##
      Text.Printf.$trModule
      Text.Printf.$tcIsChar1
      0#
      Text.Printf.$tcHPrintfType1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep13_rccbA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep13_rccbA
  = GHC.Types.:
      @ GHC.Types.KindRep
      $krep10_rccbx
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_rccbB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep14_rccbB
  = GHC.Types.KindRepTyConApp Text.Printf.$tcIsChar $krep13_rccbA

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_rccbC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep15_rccbC = GHC.Types.KindRepFun $krep12_rccbz $krep14_rccbB

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:IsChar1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.Printf.$tc'C:IsChar1
  = GHC.Types.KindRepFun $krep11_rccby $krep15_rccbC

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:IsChar3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tc'C:IsChar3 = "'C:IsChar"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:IsChar2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tc'C:IsChar2
  = GHC.Types.TrNameS Text.Printf.$tc'C:IsChar3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:IsChar :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tc'C:IsChar
  = GHC.Types.TyCon
      15586488259906363003##
      17643381548147423706##
      Text.Printf.$trModule
      Text.Printf.$tc'C:IsChar2
      1#
      Text.Printf.$tc'C:IsChar1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcFormatAdjustment2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
Text.Printf.$tcFormatAdjustment2 = "FormatAdjustment"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcFormatAdjustment1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tcFormatAdjustment1
  = GHC.Types.TrNameS Text.Printf.$tcFormatAdjustment2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcFormatAdjustment :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tcFormatAdjustment
  = GHC.Types.TyCon
      7532892403054408380##
      17299592949916286280##
      Text.Printf.$trModule
      Text.Printf.$tcFormatAdjustment1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Text.Printf.$tc'LeftAdjust1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
Text.Printf.$tc'LeftAdjust1
  = GHC.Types.KindRepTyConApp
      Text.Printf.$tcFormatAdjustment (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'LeftAdjust3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tc'LeftAdjust3 = "'LeftAdjust"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'LeftAdjust2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tc'LeftAdjust2
  = GHC.Types.TrNameS Text.Printf.$tc'LeftAdjust3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'LeftAdjust :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tc'LeftAdjust
  = GHC.Types.TyCon
      3724221440131574524##
      12430068224974793646##
      Text.Printf.$trModule
      Text.Printf.$tc'LeftAdjust2
      0#
      Text.Printf.$tc'LeftAdjust1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'ZeroPad2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Text.Printf.$tc'ZeroPad2 = "'ZeroPad"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'ZeroPad1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tc'ZeroPad1
  = GHC.Types.TrNameS Text.Printf.$tc'ZeroPad2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'ZeroPad :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tc'ZeroPad
  = GHC.Types.TyCon
      4688343247861108158##
      7307113320833774212##
      Text.Printf.$trModule
      Text.Printf.$tc'ZeroPad1
      0#
      Text.Printf.$tc'LeftAdjust1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep16_rccbD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep16_rccbD
  = GHC.Types.:
      @ GHC.Types.KindRep
      Text.Printf.$tc'LeftAdjust1
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_rccbE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep17_rccbE
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep16_rccbD

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcFormatSign2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tcFormatSign2 = "FormatSign"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcFormatSign1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tcFormatSign1
  = GHC.Types.TrNameS Text.Printf.$tcFormatSign2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcFormatSign :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tcFormatSign
  = GHC.Types.TyCon
      35986971025498593##
      9833165860459639351##
      Text.Printf.$trModule
      Text.Printf.$tcFormatSign1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Text.Printf.$tc'SignPlus1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
Text.Printf.$tc'SignPlus1
  = GHC.Types.KindRepTyConApp
      Text.Printf.$tcFormatSign (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'SignPlus3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tc'SignPlus3 = "'SignPlus"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'SignPlus2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tc'SignPlus2
  = GHC.Types.TrNameS Text.Printf.$tc'SignPlus3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'SignPlus :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tc'SignPlus
  = GHC.Types.TyCon
      18302065795158432479##
      11830941225366619964##
      Text.Printf.$trModule
      Text.Printf.$tc'SignPlus2
      0#
      Text.Printf.$tc'SignPlus1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'SignSpace2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tc'SignSpace2 = "'SignSpace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'SignSpace1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tc'SignSpace1
  = GHC.Types.TrNameS Text.Printf.$tc'SignSpace2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'SignSpace :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tc'SignSpace
  = GHC.Types.TyCon
      111286303843533919##
      13624428119758319457##
      Text.Printf.$trModule
      Text.Printf.$tc'SignSpace1
      0#
      Text.Printf.$tc'SignPlus1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep18_rccbF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep18_rccbF
  = GHC.Types.:
      @ GHC.Types.KindRep
      Text.Printf.$tc'SignPlus1
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep19_rccbG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep19_rccbG
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep18_rccbF

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcFieldFormat2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tcFieldFormat2 = "FieldFormat"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcFieldFormat1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tcFieldFormat1
  = GHC.Types.TrNameS Text.Printf.$tcFieldFormat2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcFieldFormat :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tcFieldFormat
  = GHC.Types.TyCon
      12330325036165183082##
      5846211506648458401##
      Text.Printf.$trModule
      Text.Printf.$tcFieldFormat1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep20_rccbH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep20_rccbH
  = GHC.Types.KindRepTyConApp
      Text.Printf.$tcFieldFormat (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_rccbI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep21_rccbI = GHC.Types.KindRepFun $krep20_rccbH $krep9_rccbw

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep22_rccbJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep22_rccbJ = GHC.Types.KindRepFun $krep10_rccbx $krep21_rccbI

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep23_rccbK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep23_rccbK = GHC.Types.KindRepFun $krep3_rccbq $krep20_rccbH

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep24_rccbL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep24_rccbL = GHC.Types.KindRepFun $krep8_rccbv $krep23_rccbK

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep25_rccbM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep25_rccbM = GHC.Types.KindRepFun $krep_rccbn $krep24_rccbL

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep26_rccbN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep26_rccbN = GHC.Types.KindRepFun $krep19_rccbG $krep25_rccbM

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep27_rccbO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep27_rccbO = GHC.Types.KindRepFun $krep17_rccbE $krep26_rccbN

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep28_rccbP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep28_rccbP = GHC.Types.KindRepFun $krep6_rccbt $krep27_rccbO

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'FieldFormat1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.Printf.$tc'FieldFormat1
  = GHC.Types.KindRepFun $krep6_rccbt $krep28_rccbP

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'FieldFormat3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tc'FieldFormat3 = "'FieldFormat"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'FieldFormat2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tc'FieldFormat2
  = GHC.Types.TrNameS Text.Printf.$tc'FieldFormat3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'FieldFormat :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tc'FieldFormat
  = GHC.Types.TyCon
      11348432599023007686##
      6814357301696130957##
      Text.Printf.$trModule
      Text.Printf.$tc'FieldFormat2
      0#
      Text.Printf.$tc'FieldFormat1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcFormatParse2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tcFormatParse2 = "FormatParse"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcFormatParse1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tcFormatParse1
  = GHC.Types.TrNameS Text.Printf.$tcFormatParse2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcFormatParse :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tcFormatParse
  = GHC.Types.TyCon
      5517048358589873764##
      8326725038359313810##
      Text.Printf.$trModule
      Text.Printf.$tcFormatParse1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep29_rccbQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep29_rccbQ
  = GHC.Types.KindRepTyConApp
      Text.Printf.$tcFormatParse (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep30_rccbR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep30_rccbR = GHC.Types.KindRepFun $krep8_rccbv $krep29_rccbQ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep31_rccbS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep31_rccbS = GHC.Types.KindRepFun $krep10_rccbx $krep30_rccbR

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep32_rccbT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep32_rccbT = GHC.Types.KindRepFun $krep3_rccbq $krep30_rccbR

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'FormatParse1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.Printf.$tc'FormatParse1
  = GHC.Types.KindRepFun $krep8_rccbv $krep32_rccbT

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'FormatParse3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tc'FormatParse3 = "'FormatParse"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'FormatParse2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tc'FormatParse2
  = GHC.Types.TrNameS Text.Printf.$tc'FormatParse3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'FormatParse :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tc'FormatParse
  = GHC.Types.TyCon
      549767054447046648##
      1116614444935710689##
      Text.Printf.$trModule
      Text.Printf.$tc'FormatParse2
      0#
      Text.Printf.$tc'FormatParse1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep33_rccbU :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep33_rccbU
  = GHC.Types.:
      @ GHC.Types.KindRep
      $krep21_rccbI
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep34_rccbV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep34_rccbV
  = GHC.Types.: @ GHC.Types.KindRep $krep30_rccbR $krep33_rccbU

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep35_rccbW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep35_rccbW
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,) $krep34_rccbV

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep36_rccbX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep36_rccbX
  = GHC.Types.:
      @ GHC.Types.KindRep
      $krep35_rccbW
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep37_rccbY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep37_rccbY
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep36_rccbX

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep38_rccbZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep38_rccbZ = GHC.Types.KindRepFun $krep37_rccbY $krep10_rccbx

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep39_rccc0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep39_rccc0 = GHC.Types.KindRepFun $krep8_rccbv $krep38_rccbZ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep40_rccc1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep40_rccc1 = GHC.Types.KindRepFun $krep2_rccbp $krep39_rccc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcPrintfArg2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tcPrintfArg2 = "PrintfArg"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcPrintfArg1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tcPrintfArg1
  = GHC.Types.TrNameS Text.Printf.$tcPrintfArg2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcPrintfArg :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tcPrintfArg
  = GHC.Types.TyCon
      14684532792197610005##
      5760551473172190061##
      Text.Printf.$trModule
      Text.Printf.$tcPrintfArg1
      0#
      Text.Printf.$tcHPrintfType1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep41_rccc2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep41_rccc2
  = GHC.Types.KindRepTyConApp Text.Printf.$tcPrintfArg $krep13_rccbA

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep42_rccc3 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep42_rccc3 = GHC.Types.KindRepFun $krep31_rccbS $krep41_rccc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:PrintfArg1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.Printf.$tc'C:PrintfArg1
  = GHC.Types.KindRepFun $krep22_rccbJ $krep42_rccc3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:PrintfArg3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tc'C:PrintfArg3 = "'C:PrintfArg"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:PrintfArg2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tc'C:PrintfArg2
  = GHC.Types.TrNameS Text.Printf.$tc'C:PrintfArg3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:PrintfArg :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tc'C:PrintfArg
  = GHC.Types.TyCon
      11923342243699112506##
      8346787778082712340##
      Text.Printf.$trModule
      Text.Printf.$tc'C:PrintfArg2
      1#
      Text.Printf.$tc'C:PrintfArg1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcHPrintfType3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tcHPrintfType3 = "HPrintfType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcHPrintfType2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tcHPrintfType2
  = GHC.Types.TrNameS Text.Printf.$tcHPrintfType3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcHPrintfType :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tcHPrintfType
  = GHC.Types.TyCon
      13104883804062546050##
      15477829653093370802##
      Text.Printf.$trModule
      Text.Printf.$tcHPrintfType2
      0#
      Text.Printf.$tcHPrintfType1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep43_rccc4 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep43_rccc4
  = GHC.Types.KindRepTyConApp
      Text.Printf.$tcHPrintfType $krep13_rccbA

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:HPrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.Printf.$tc'C:HPrintfType1
  = GHC.Types.KindRepFun $krep40_rccc1 $krep43_rccc4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:HPrintfType3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
Text.Printf.$tc'C:HPrintfType3 = "'C:HPrintfType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:HPrintfType2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tc'C:HPrintfType2
  = GHC.Types.TrNameS Text.Printf.$tc'C:HPrintfType3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:HPrintfType :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tc'C:HPrintfType
  = GHC.Types.TyCon
      16716104921226462095##
      4043378586122981700##
      Text.Printf.$trModule
      Text.Printf.$tc'C:HPrintfType2
      1#
      Text.Printf.$tc'C:HPrintfType1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcPrintfType2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Printf.$tcPrintfType2 = "PrintfType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcPrintfType1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tcPrintfType1
  = GHC.Types.TrNameS Text.Printf.$tcPrintfType2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tcPrintfType :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tcPrintfType
  = GHC.Types.TyCon
      16100185319445667829##
      10371264040433388740##
      Text.Printf.$trModule
      Text.Printf.$tcPrintfType1
      0#
      Text.Printf.$tcHPrintfType1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep44_rccc5 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep44_rccc5
  = GHC.Types.KindRepTyConApp Text.Printf.$tcPrintfType $krep13_rccbA

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:PrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Text.Printf.$tc'C:PrintfType1
  = GHC.Types.KindRepFun $krep39_rccc0 $krep44_rccc5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:PrintfType3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
Text.Printf.$tc'C:PrintfType3 = "'C:PrintfType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:PrintfType2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$tc'C:PrintfType2
  = GHC.Types.TrNameS Text.Printf.$tc'C:PrintfType3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$tc'C:PrintfType :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Text.Printf.$tc'C:PrintfType
  = GHC.Types.TyCon
      6199067271817529220##
      10070277982064886839##
      Text.Printf.$trModule
      Text.Printf.$tc'C:PrintfType2
      1#
      Text.Printf.$tc'C:PrintfType1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar24 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgChar24 = "hh"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar23 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgChar23
  = GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar24

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar22 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Text.Printf.$fPrintfArgChar22 = -128

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar21 :: ([Char], Integer)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Printf.$fPrintfArgChar21
  = (Text.Printf.$fPrintfArgChar23, Text.Printf.$fPrintfArgChar22)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar20 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgChar20 = "h"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar19 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgChar19
  = GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar20

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar18 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Text.Printf.$fPrintfArgChar18 = -32768

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar17 :: ([Char], Integer)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Printf.$fPrintfArgChar17
  = (Text.Printf.$fPrintfArgChar19, Text.Printf.$fPrintfArgChar18)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar16 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgChar16 = "l"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar15 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgChar15
  = GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar16

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar14 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Text.Printf.$fPrintfArgChar14 = -2147483648

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar13 :: ([Char], Integer)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Printf.$fPrintfArgChar13
  = (Text.Printf.$fPrintfArgChar15, Text.Printf.$fPrintfArgChar14)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar12 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgChar12 = "ll"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar11 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgChar11
  = GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar7 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Text.Printf.$fPrintfArgChar7 = -9223372036854775808

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar10 :: ([Char], Integer)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Printf.$fPrintfArgChar10
  = (Text.Printf.$fPrintfArgChar11, Text.Printf.$fPrintfArgChar7)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar9 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgChar9 = "L"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar8 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgChar8
  = GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar9

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar6 :: ([Char], Integer)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Printf.$fPrintfArgChar6
  = (Text.Printf.$fPrintfArgChar8, Text.Printf.$fPrintfArgChar7)

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar5 :: [(String, Integer)]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Printf.$fPrintfArgChar5
  = GHC.Types.:
      @ (String, Integer)
      Text.Printf.$fPrintfArgChar6
      (GHC.Types.[] @ (String, Integer))

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar4 :: [(String, Integer)]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Printf.$fPrintfArgChar4
  = GHC.Types.:
      @ (String, Integer)
      Text.Printf.$fPrintfArgChar10
      Text.Printf.$fPrintfArgChar5

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar3 :: [(String, Integer)]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Printf.$fPrintfArgChar3
  = GHC.Types.:
      @ (String, Integer)
      Text.Printf.$fPrintfArgChar13
      Text.Printf.$fPrintfArgChar4

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar2 :: [(String, Integer)]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Printf.$fPrintfArgChar2
  = GHC.Types.:
      @ (String, Integer)
      Text.Printf.$fPrintfArgChar17
      Text.Printf.$fPrintfArgChar3

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
intModifierMap :: [(String, Integer)]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
intModifierMap
  = GHC.Types.:
      @ (String, Integer)
      Text.Printf.$fPrintfArgChar21
      Text.Printf.$fPrintfArgChar2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl7_rccc6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl7_rccc6 = "printf: unknown format modifier"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt2 :: Maybe Integer
[GblId, Str=x]
Text.Printf.$fPrintfArgInt2
  = errorWithoutStackTrace
      @ 'GHC.Types.LiftedRep
      @ (Maybe Integer)
      (GHC.CString.unpackCString# lvl7_rccc6)

-- RHS size: {terms: 16, types: 13, coercions: 0, joins: 0/0}
Text.Printf.$wfixupMods [InlPrag=NOUSERINLINE[0]]
  :: String -> Maybe Integer -> Maybe Integer
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0] 80 0}]
Text.Printf.$wfixupMods
  = \ (ww_scb7j :: String) (w_scb7b :: Maybe Integer) ->
      case ww_scb7j of wild_X4S {
        [] -> w_scb7b;
        : ipv_sc9p3 ipv1_sc9p4 ->
          case lookup
                 @ String
                 @ Integer
                 GHC.Classes.$fEq[]_$s$fEq[]1
                 wild_X4S
                 intModifierMap
          of wild1_X1B {
            Nothing -> Text.Printf.$fPrintfArgInt2;
            Just m0_ac8rH -> wild1_X1B
          }
      }

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
fixupMods [InlPrag=NOUSERINLINE[0]]
  :: FieldFormat -> Maybe Integer -> Maybe Integer
[GblId,
 Arity=2,
 Str=<S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scb7a [Occ=Once!] :: FieldFormat)
                 (w1_scb7b [Occ=Once] :: Maybe Integer) ->
                 case w_scb7a of
                 { FieldFormat _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                               _ [Occ=Dead] ww6_scb7j [Occ=Once] _ [Occ=Dead] ->
                 Text.Printf.$wfixupMods ww6_scb7j w1_scb7b
                 }}]
fixupMods
  = \ (w_scb7a :: FieldFormat) (w1_scb7b :: Maybe Integer) ->
      case w_scb7a of
      { FieldFormat ww1_scb7e ww2_scb7f ww3_scb7g ww4_scb7h ww5_scb7i
                    ww6_scb7j ww7_scb7k ->
      Text.Printf.$wfixupMods ww6_scb7j w1_scb7b
      }

-- RHS size: {terms: 89, types: 89, coercions: 0, joins: 0/1}
Text.Printf.$wparseIntFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. String -> FormatParse
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 471 40}]
Text.Printf.$wparseIntFormat
  = \ (@ a_scb7o) (w_scb7q :: String) ->
      letrec {
        go_i7Jcj [Occ=LoopBreaker]
          :: [([Char], Integer)] -> Maybe FormatParse
        [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        go_i7Jcj
          = \ (ds_i7Jck :: [([Char], Integer)]) ->
              case ds_i7Jck of {
                [] -> GHC.Base.Nothing @ FormatParse;
                : y_i7Jcp ys_i7Jcq ->
                  case y_i7Jcp of { (p_ac8rh, ds1_dc9jH) ->
                  case go_i7Jcj ys_i7Jcq of wild2_X1I {
                    Nothing ->
                      case stripPrefix @ Char GHC.Classes.$fEqChar p_ac8rh w_scb7q of {
                        Nothing -> GHC.Base.Nothing @ FormatParse;
                        Just x_i8hBy ->
                          case x_i8hBy of {
                            [] -> errorShortFormat @ (Maybe FormatParse);
                            : c_ac8ro cs_ac8rp ->
                              GHC.Base.Just
                                @ FormatParse (Text.Printf.FormatParse p_ac8rh c_ac8ro cs_ac8rp)
                          }
                      };
                    Just ds2_dc9jI ->
                      case ds2_dc9jI of { FormatParse p0_ac8rj ds3_dc9jJ ds4_dc9jK ->
                      case GHC.List.$wlenAcc @ Char p0_ac8rj 0# of ww2_i8PwI
                      { __DEFAULT ->
                      case GHC.List.$wlenAcc @ Char p_ac8rh 0# of ww1_X8PG0
                      { __DEFAULT ->
                      case GHC.Prim.>=# ww2_i8PwI ww1_X8PG0 of {
                        __DEFAULT ->
                          case stripPrefix @ Char GHC.Classes.$fEqChar p_ac8rh w_scb7q of {
                            Nothing -> wild2_X1I;
                            Just x_i8hBy ->
                              case x_i8hBy of {
                                [] -> case errorShortFormat of wild6_00 { };
                                : c_ac8ro cs_ac8rp ->
                                  GHC.Base.Just
                                    @ FormatParse (Text.Printf.FormatParse p_ac8rh c_ac8ro cs_ac8rp)
                              }
                          };
                        1# -> wild2_X1I
                      }
                      }
                      }
                      }
                  }
                  }
              }; } in
      case go_i7Jcj intModifierMap of {
        Nothing ->
          case w_scb7q of {
            [] -> errorShortFormat @ FormatParse;
            : c_ac8rr cs_ac8rs ->
              Text.Printf.FormatParse (GHC.Types.[] @ Char) c_ac8rr cs_ac8rs
          };
        Just m_ac8rq -> m_ac8rq
      }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
parseIntFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. a -> String -> FormatParse
[GblId,
 Arity=2,
 Str=<L,A><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_scb7o) _ [Occ=Dead] (w1_scb7q [Occ=Once] :: String) ->
                 Text.Printf.$wparseIntFormat @ a_scb7o w1_scb7q}]
parseIntFormat
  = \ (@ a_scb7o) _ [Occ=Dead] (w1_scb7q :: String) ->
      Text.Printf.$wparseIntFormat @ a_scb7o w1_scb7q

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl8_rccc7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl8_rccc7 = "undefined"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl9_rccc8 :: [Char]
[GblId]
lvl9_rccc8 = GHC.CString.unpackCString# lvl8_rccc7

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl10_rccc9 :: [Char]
[GblId]
lvl10_rccc9 = GHC.CString.unpackCString# Text.Printf.$trModule4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl11_rccca :: [Char]
[GblId]
lvl11_rccca = GHC.CString.unpackCString# Text.Printf.$trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl12_rcccb :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl12_rcccb = "./Text/Printf.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl13_rcccc :: [Char]
[GblId]
lvl13_rcccc = GHC.CString.unpackCString# lvl12_rcccb

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl14_rcccd :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl14_rcccd = GHC.Types.I# 323#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl15_rccce :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl15_rccce = GHC.Types.I# 40#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl16_rcccf :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl16_rcccf = GHC.Types.I# 49#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl17_rcccg :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []]
lvl17_rcccg
  = GHC.Stack.Types.SrcLoc
      lvl10_rccc9
      lvl11_rccca
      lvl13_rcccc
      lvl14_rcccd
      lvl15_rccce
      lvl14_rcccd
      lvl16_rcccf

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl18_rccch :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []]
lvl18_rccch
  = GHC.Stack.Types.PushCallStack
      lvl9_rccc8 lvl17_rcccg GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 2, types: 2, coercions: 4, joins: 0/0}
Text.Printf.$fPrintfArgChar1 :: Int
[GblId, Str=x]
Text.Printf.$fPrintfArgChar1
  = undefined
      @ 'GHC.Types.LiftedRep
      @ Int
      (lvl18_rccch
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: (GHC.Stack.Types.CallStack :: *)
                  ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))

-- RHS size: {terms: 4, types: 3, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar_$cparseFormat :: Char -> ModifierParser
[GblId,
 Arity=2,
 Str=<L,A><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead] (cf_ac8qE [Occ=Once] :: String) ->
                 parseIntFormat @ Int Text.Printf.$fPrintfArgChar1 cf_ac8qE}]
Text.Printf.$fPrintfArgChar_$cparseFormat
  = \ _ [Occ=Dead] (cf_ac8qE :: String) ->
      Text.Printf.$wparseIntFormat @ Int cf_ac8qE

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgDouble5 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$fPrintfArgDouble5 = GHC.Types.C# '0'#

-- RHS size: {terms: 75, types: 38, coercions: 0, joins: 1/4}
integral_prec_rc8qj :: Maybe Int -> String -> String
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,1*U><S,U>, Unf=OtherCon []]
integral_prec_rc8qj
  = \ (ds_dc9a1 :: Maybe Int) (integral_ac8sU :: String) ->
      case ds_dc9a1 of {
        Nothing -> integral_ac8sU;
        Just ds1_dc9ae ->
          case ds1_dc9ae of { GHC.Types.I# ds2_dc9af ->
          join {
            fail_sc9Ll [Dmd=<L,1*C1(U)>] :: GHC.Prim.Void# -> String
            [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []]
            fail_sc9Ll _ [Occ=Dead, OS=OneShot]
              = case GHC.List.$wlenAcc @ Char integral_ac8sU 0# of ww2_i8PwI
                { __DEFAULT ->
                let {
                  y_alNd [Dmd=<S,U>] :: GHC.Prim.Int#
                  [LclId]
                  y_alNd = GHC.Prim.-# ds2_dc9af ww2_i8PwI } in
                case GHC.Prim.<# 0# y_alNd of {
                  __DEFAULT -> integral_ac8sU;
                  1# ->
                    let {
                      lvl55_scbKe :: [Char]
                      [LclId, Unf=OtherCon []]
                      lvl55_scbKe
                        = GHC.Types.:
                            @ Char Text.Printf.$fPrintfArgDouble5 integral_ac8sU } in
                    letrec {
                      $wxs_scb7x [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                        :: GHC.Prim.Int# -> [Char]
                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                      $wxs_scb7x
                        = \ (ww_scb7v :: GHC.Prim.Int#) ->
                            case ww_scb7v of ds4_iax4j {
                              __DEFAULT ->
                                GHC.Types.:
                                  @ Char
                                  Text.Printf.$fPrintfArgDouble5
                                  ($wxs_scb7x (GHC.Prim.-# ds4_iax4j 1#));
                              1# -> lvl55_scbKe
                            }; } in
                    $wxs_scb7x y_alNd
                }
                } } in
          case ds2_dc9af of {
            __DEFAULT -> jump fail_sc9Ll GHC.Prim.void#;
            0# ->
              case integral_ac8sU of {
                [] -> jump fail_sc9Ll GHC.Prim.void#;
                : ds4_dc9ag ds5_dc9ah ->
                  case ds4_dc9ag of { GHC.Types.C# ds6_dc9ai ->
                  case ds6_dc9ai of {
                    __DEFAULT -> jump fail_sc9Ll GHC.Prim.void#;
                    '0'# ->
                      case ds5_dc9ah of {
                        [] -> GHC.Types.[] @ Char;
                        : ipv_sc9pT ipv1_sc9pU -> jump fail_sc9Ll GHC.Prim.void#
                      }
                  }
                  }
              }
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl19_rccci :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl19_rccci = "Text/Printf.hs:714:7-39|(\"\", s)"#

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
lvl20_rcccj :: (String)
[GblId, Str=x]
lvl20_rcccj
  = Control.Exception.Base.patError
      @ 'GHC.Types.LiftedRep @ (String) lvl19_rccci

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.formatChar2 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Text.Printf.formatChar2 = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl21_rccck :: Integer
[GblId, Unf=OtherCon []]
lvl21_rccck = 2

Rec {
-- RHS size: {terms: 148, types: 124, coercions: 0, joins: 1/3}
$wfmtu_rcccl
  :: Integer
     -> Maybe String
     -> Maybe Int
     -> Maybe Integer
     -> Integer
     -> (# String, String #)
[GblId,
 Arity=5,
 Str=<L,U><S,1*U><L,1*U><L,1*U><L,U>,
 Unf=OtherCon []]
$wfmtu_rcccl
  = \ (w_scb7F :: Integer)
      (w1_scb7G :: Maybe String)
      (w2_scb7H :: Maybe Int)
      (w3_scb7I :: Maybe Integer)
      (w4_scb7J :: Integer) ->
      case w1_scb7G of {
        Nothing ->
          letrec {
            fmtu'_sc9Lf [Occ=LoopBreaker]
              :: Maybe Int -> Maybe Integer -> Integer -> Maybe String
            [LclId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []]
            fmtu'_sc9Lf
              = \ (prec_ac8sN :: Maybe Int)
                  (ds_dc9bf :: Maybe Integer)
                  (i_ac8sP :: Integer) ->
                  join {
                    fail_sc9Lh [Dmd=<L,1*C1(U)>] :: GHC.Prim.Void# -> Maybe String
                    [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []]
                    fail_sc9Lh _ [Occ=Dead, OS=OneShot]
                      = case prec_ac8sN of wild1_X1Q {
                          Nothing ->
                            case integer-simple-0.1.1.1:GHC.Integer.Type.geInteger#
                                   i_ac8sP Text.Printf.formatChar2
                            of {
                              __DEFAULT -> GHC.Base.Nothing @ String;
                              1# ->
                                GHC.Base.Just
                                  @ String
                                  (showIntAtBase
                                     @ Integer
                                     GHC.Real.$fIntegralInteger
                                     GHC.Show.$fShowInteger
                                     w_scb7F
                                     intToDigit
                                     i_ac8sP
                                     (GHC.Types.[] @ Char))
                            };
                          Just prec1_ac8sQ ->
                            case integer-simple-0.1.1.1:GHC.Integer.Type.geInteger#
                                   i_ac8sP Text.Printf.formatChar2
                            of {
                              __DEFAULT -> GHC.Base.Nothing @ String;
                              1# ->
                                case fmtu'_sc9Lf
                                       (GHC.Base.Nothing @ Int) (GHC.Base.Nothing @ Integer) i_ac8sP
                                of {
                                  Nothing -> GHC.Base.Nothing @ String;
                                  Just a1_iaIvW ->
                                    GHC.Base.Just @ String (integral_prec_rc8qj wild1_X1Q a1_iaIvW)
                                }
                            }
                        } } in
                  case ds_dc9bf of {
                    Nothing -> jump fail_sc9Lh GHC.Prim.void#;
                    Just m_ac8sO ->
                      case integer-simple-0.1.1.1:GHC.Integer.Type.ltInteger#
                             i_ac8sP Text.Printf.formatChar2
                      of {
                        __DEFAULT -> jump fail_sc9Lh GHC.Prim.void#;
                        1# ->
                          fmtu'_sc9Lf
                            prec_ac8sN
                            (GHC.Base.Nothing @ Integer)
                            (integer-simple-0.1.1.1:GHC.Integer.Type.plusInteger
                               (integer-simple-0.1.1.1:GHC.Integer.Type.negateInteger
                                  (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                                     lvl21_rccck m_ac8sO))
                               i_ac8sP)
                      }
                  }; } in
          case fmtu'_sc9Lf w2_scb7H w3_scb7I w4_scb7J of {
            Nothing -> case errorBadArgument of wild2_00 { };
            Just s_ac8sT -> (# GHC.Types.[] @ Char, s_ac8sT #)
          };
        Just pre_ac8sD ->
          let {
            s_sc9Lj :: String
            [LclId]
            s_sc9Lj
              = case $wfmtu_rcccl
                       w_scb7F (GHC.Base.Nothing @ String) w2_scb7H w3_scb7I w4_scb7J
                of
                { (# ww1_scbej, ww2_scbek #) ->
                case ww1_scbej of {
                  [] -> ww2_scbek;
                  : ipv_sc9qa ipv1_sc9qb -> case lvl20_rcccj of wild2_00 { }
                }
                } } in
          case pre_ac8sD of wild1_X1N {
            [] -> (# GHC.Types.[] @ Char, s_sc9Lj #);
            : ds_dc9aN ds1_dc9aO ->
              case ds_dc9aN of { GHC.Types.C# ds2_dc9aP ->
              case ds2_dc9aP of {
                __DEFAULT -> (# wild1_X1N, s_sc9Lj #);
                '0'# ->
                  case ds1_dc9aO of {
                    [] ->
                      case s_sc9Lj of wild4_X1V {
                        [] -> (# wild1_X1N, GHC.Types.[] @ Char #);
                        : ds4_dc9ax ds5_dc9ay ->
                          case ds4_dc9ax of { GHC.Types.C# ds6_dc9az ->
                          case ds6_dc9az of {
                            __DEFAULT -> (# wild1_X1N, wild4_X1V #);
                            '0'# -> (# GHC.Types.[] @ Char, wild4_X1V #)
                          }
                          }
                      };
                    : ipv_sc9qj ipv1_sc9qo -> (# wild1_X1N, s_sc9Lj #)
                  }
              }
              }
          }
      }
end Rec }

-- RHS size: {terms: 35, types: 35, coercions: 0, joins: 0/0}
$wfmti_rcccm :: Maybe Int -> Integer -> (# String, String #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []]
$wfmti_rcccm
  = \ (w_scb7O :: Maybe Int) (w1_scb7P :: Integer) ->
      case integer-simple-0.1.1.1:GHC.Integer.Type.ltInteger#
             w1_scb7P Text.Printf.formatChar2
      of {
        __DEFAULT ->
          (# GHC.Types.[] @ Char,
             case GHC.Show.$w$cshowsPrec4 0# w1_scb7P (GHC.Types.[] @ Char) of
             { (# ww3_ibkxp, ww4_ibkxq #) ->
             integral_prec_rc8qj
               w_scb7O (GHC.Types.: @ Char ww3_ibkxp ww4_ibkxq)
             } #);
        1# ->
          (# Text.Printf.$fPrintfArgDouble8,
             case GHC.Show.$w$cshowsPrec4
                    0#
                    (integer-simple-0.1.1.1:GHC.Integer.Type.negateInteger w1_scb7P)
                    (GHC.Types.[] @ Char)
             of
             { (# ww3_ibkxp, ww4_ibkxq #) ->
             integral_prec_rc8qj
               w_scb7O (GHC.Types.: @ Char ww3_ibkxp ww4_ibkxq)
             } #)
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgDouble6 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$fPrintfArgDouble6 = GHC.Types.C# ' '#

-- RHS size: {terms: 115, types: 56, coercions: 0, joins: 1/7}
Text.Printf.$wadjust [InlPrag=NOUSERINLINE[0]]
  :: Maybe Int
     -> Maybe FormatAdjustment -> String -> String -> String
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U><S,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 152 0 0] 649 0}]
Text.Printf.$wadjust
  = \ (ww_scb84 :: Maybe Int)
      (ww1_scb86 :: Maybe FormatAdjustment)
      (ww2_scb8e :: String)
      (ww3_scb8f :: String) ->
      let {
        fill_sc9Ld [Dmd=<L,1*U>] :: [Char]
        [LclId]
        fill_sc9Ld
          = case ww_scb84 of {
              Nothing -> GHC.Types.[] @ Char;
              Just width_ac8ss ->
                case GHC.List.$wlenAcc @ Char ww2_scb8e 0# of ww4_i8PwI
                { __DEFAULT ->
                case GHC.List.$wlenAcc @ Char ww3_scb8f 0# of ww5_X8PGg
                { __DEFAULT ->
                case width_ac8ss of { GHC.Types.I# y_alNd ->
                let {
                  x_alN9 [Dmd=<S,U>] :: GHC.Prim.Int#
                  [LclId]
                  x_alN9 = GHC.Prim.+# ww4_i8PwI ww5_X8PGg } in
                case GHC.Prim.<# x_alN9 y_alNd of {
                  __DEFAULT -> GHC.Types.[] @ Char;
                  1# ->
                    let {
                      n_scaes [Dmd=<S,U>] :: GHC.Prim.Int#
                      [LclId]
                      n_scaes = GHC.Prim.-# y_alNd x_alN9 } in
                    case GHC.Prim.<# 0# n_scaes of {
                      __DEFAULT -> GHC.Types.[] @ Char;
                      1# ->
                        let {
                          x1_iax4c :: Char
                          [LclId]
                          x1_iax4c
                            = case ww1_scb86 of {
                                Nothing -> Text.Printf.$fPrintfArgDouble6;
                                Just ds_dc9cT ->
                                  case ds_dc9cT of {
                                    LeftAdjust -> Text.Printf.$fPrintfArgDouble6;
                                    ZeroPad -> Text.Printf.$fPrintfArgDouble5
                                  }
                              } } in
                        let {
                          lvl55_scbKg :: [Char]
                          [LclId, Unf=OtherCon []]
                          lvl55_scbKg
                            = GHC.Types.: @ Char x1_iax4c (GHC.Types.[] @ Char) } in
                        letrec {
                          $wxs_scb7Z [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                            :: GHC.Prim.Int# -> [Char]
                          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                          $wxs_scb7Z
                            = \ (ww6_scb7X :: GHC.Prim.Int#) ->
                                case ww6_scb7X of ds1_iax4j {
                                  __DEFAULT ->
                                    GHC.Types.:
                                      @ Char x1_iax4c ($wxs_scb7Z (GHC.Prim.-# ds1_iax4j 1#));
                                  1# -> lvl55_scbKg
                                }; } in
                        $wxs_scb7Z n_scaes
                    }
                }
                }
                }
                }
            } } in
      join {
        $j_sc9SI [Dmd=<L,1*U>] :: String
        [LclId[JoinId(0)]]
        $j_sc9SI
          = case ww1_scb86 of {
              Nothing -> ++ @ Char fill_sc9Ld (++ @ Char ww2_scb8e ww3_scb8f);
              Just ds_dc9cT ->
                case ds_dc9cT of {
                  LeftAdjust -> ++ @ Char fill_sc9Ld (++ @ Char ww2_scb8e ww3_scb8f);
                  ZeroPad -> ++ @ Char ww2_scb8e (++ @ Char fill_sc9Ld ww3_scb8f)
                }
            } } in
      case ww1_scb86 of {
        Nothing -> jump $j_sc9SI;
        Just ds_dc9d6 ->
          case ds_dc9d6 of {
            LeftAdjust -> ++ @ Char ww2_scb8e (++ @ Char ww3_scb8f fill_sc9Ld);
            ZeroPad -> jump $j_sc9SI
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgDouble4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgDouble4 = "+"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgDouble3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgDouble3
  = GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgDouble2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgDouble2 = " "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgDouble1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Printf.$fPrintfArgDouble1
  = GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble2

-- RHS size: {terms: 46, types: 22, coercions: 0, joins: 0/0}
Text.Printf.$wadjustSigned [InlPrag=NOUSERINLINE[0]]
  :: Maybe Int
     -> Maybe FormatAdjustment
     -> Maybe FormatSign
     -> String
     -> String
     -> String
[GblId,
 Arity=5,
 Str=<L,1*U><S,U><S,1*U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 80 160 0] 330 0}]
Text.Printf.$wadjustSigned
  = \ (ww_scb8m :: Maybe Int)
      (ww1_scb8o :: Maybe FormatAdjustment)
      (ww2_scb8p :: Maybe FormatSign)
      (ww3_scb8w :: String)
      (ww4_scb8x :: String) ->
      case ww2_scb8p of {
        Nothing ->
          Text.Printf.$wadjust ww_scb8m ww1_scb8o ww3_scb8w ww4_scb8x;
        Just ds_dc9e2 ->
          case ds_dc9e2 of {
            SignPlus ->
              case ww3_scb8w of wild2_X1X {
                [] ->
                  Text.Printf.$wadjust
                    ww_scb8m ww1_scb8o Text.Printf.$fPrintfArgDouble3 ww4_scb8x;
                : ipv_sc9qW ipv1_sc9qX ->
                  Text.Printf.$wadjust ww_scb8m ww1_scb8o wild2_X1X ww4_scb8x
              };
            SignSpace ->
              case ww3_scb8w of wild2_X1X {
                [] ->
                  Text.Printf.$wadjust
                    ww_scb8m ww1_scb8o Text.Printf.$fPrintfArgDouble1 ww4_scb8x;
                : ipv_sc9r1 ipv1_sc9r2 ->
                  Text.Printf.$wadjust ww_scb8m ww1_scb8o wild2_X1X ww4_scb8x
              }
          }
      }

-- RHS size: {terms: 117, types: 69, coercions: 0, joins: 0/0}
Text.Printf.$w$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: Double
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> Maybe FormatSign
     -> Bool
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(U)><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 950] 1080 420}]
Text.Printf.$w$sformatRealFloat
  = \ (w_scb8M :: Double)
      (ww_scb8Q :: Maybe Int)
      (ww1_scb8R :: Maybe Int)
      (ww2_scb8S :: Maybe FormatAdjustment)
      (ww3_scb8T :: Maybe FormatSign)
      (ww4_scb8U :: Bool)
      (ww5_scb8Z :: GHC.Prim.Char#) ->
      case ww5_scb8Z of ds_Xc9gq {
        __DEFAULT -> Text.Printf.$werrorBadFormat @ ShowS ds_Xc9gq;
        'E'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt 'E'# ww1_scb8R ww4_scb8U w_scb8M of
             { (# ww7_scbea, ww8_scbeb #) ->
             Text.Printf.$wadjustSigned
               ww_scb8Q ww2_scb8S ww3_scb8T ww7_scbea ww8_scbeb
             });
        'F'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt 'F'# ww1_scb8R ww4_scb8U w_scb8M of
             { (# ww7_scbea, ww8_scbeb #) ->
             Text.Printf.$wadjustSigned
               ww_scb8Q ww2_scb8S ww3_scb8T ww7_scbea ww8_scbeb
             });
        'G'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt 'G'# ww1_scb8R ww4_scb8U w_scb8M of
             { (# ww7_scbea, ww8_scbeb #) ->
             Text.Printf.$wadjustSigned
               ww_scb8Q ww2_scb8S ww3_scb8T ww7_scbea ww8_scbeb
             });
        'e'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt 'e'# ww1_scb8R ww4_scb8U w_scb8M of
             { (# ww7_scbea, ww8_scbeb #) ->
             Text.Printf.$wadjustSigned
               ww_scb8Q ww2_scb8S ww3_scb8T ww7_scbea ww8_scbeb
             });
        'f'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt 'f'# ww1_scb8R ww4_scb8U w_scb8M of
             { (# ww7_scbea, ww8_scbeb #) ->
             Text.Printf.$wadjustSigned
               ww_scb8Q ww2_scb8S ww3_scb8T ww7_scbea ww8_scbeb
             });
        'g'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt 'g'# ww1_scb8R ww4_scb8U w_scb8M of
             { (# ww7_scbea, ww8_scbeb #) ->
             Text.Printf.$wadjustSigned
               ww_scb8Q ww2_scb8S ww3_scb8T ww7_scbea ww8_scbeb
             });
        'v'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt 'g'# ww1_scb8R ww4_scb8U w_scb8M of
             { (# ww7_scbea, ww8_scbeb #) ->
             Text.Printf.$wadjustSigned
               ww_scb8Q ww2_scb8S ww3_scb8T ww7_scbea ww8_scbeb
             })
      }

-- RHS size: {terms: 16, types: 16, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgDouble_$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: Double -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scb8M [Occ=Once] :: Double)
                 (w1_scb8N [Occ=Once!] :: FieldFormat) ->
                 case w1_scb8N of
                 { FieldFormat ww1_scb8Q [Occ=Once] ww2_scb8R [Occ=Once]
                               ww3_scb8S [Occ=Once] ww4_scb8T [Occ=Once] ww5_scb8U [Occ=Once]
                               _ [Occ=Dead] ww7_scb8W [Occ=Once!] ->
                 case ww7_scb8W of { GHC.Types.C# ww9_scb8Z [Occ=Once] ->
                 Text.Printf.$w$sformatRealFloat
                   w_scb8M ww1_scb8Q ww2_scb8R ww3_scb8S ww4_scb8T ww5_scb8U ww9_scb8Z
                 }
                 }}]
Text.Printf.$fPrintfArgDouble_$sformatRealFloat
  = \ (w_scb8M :: Double) (w1_scb8N :: FieldFormat) ->
      case w1_scb8N of
      { FieldFormat ww1_scb8Q ww2_scb8R ww3_scb8S ww4_scb8T ww5_scb8U
                    ww6_scb8V ww7_scb8W ->
      case ww7_scb8W of { GHC.Types.C# ww9_scb8Z ->
      Text.Printf.$w$sformatRealFloat
        w_scb8M ww1_scb8Q ww2_scb8R ww3_scb8S ww4_scb8T ww5_scb8U ww9_scb8Z
      }
      }

-- RHS size: {terms: 117, types: 69, coercions: 0, joins: 0/0}
Text.Printf.$w$sformatRealFloat1 [InlPrag=NOUSERINLINE[0]]
  :: Float
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> Maybe FormatSign
     -> Bool
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(U)><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 950] 1080 420}]
Text.Printf.$w$sformatRealFloat1
  = \ (w_scb9f :: Float)
      (ww_scb9j :: Maybe Int)
      (ww1_scb9k :: Maybe Int)
      (ww2_scb9l :: Maybe FormatAdjustment)
      (ww3_scb9m :: Maybe FormatSign)
      (ww4_scb9n :: Bool)
      (ww5_scb9s :: GHC.Prim.Char#) ->
      case ww5_scb9s of ds_Xc9gq {
        __DEFAULT -> Text.Printf.$werrorBadFormat @ ShowS ds_Xc9gq;
        'E'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt1 'E'# ww1_scb9k ww4_scb9n w_scb9f of
             { (# ww7_scbed, ww8_scbee #) ->
             Text.Printf.$wadjustSigned
               ww_scb9j ww2_scb9l ww3_scb9m ww7_scbed ww8_scbee
             });
        'F'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt1 'F'# ww1_scb9k ww4_scb9n w_scb9f of
             { (# ww7_scbed, ww8_scbee #) ->
             Text.Printf.$wadjustSigned
               ww_scb9j ww2_scb9l ww3_scb9m ww7_scbed ww8_scbee
             });
        'G'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt1 'G'# ww1_scb9k ww4_scb9n w_scb9f of
             { (# ww7_scbed, ww8_scbee #) ->
             Text.Printf.$wadjustSigned
               ww_scb9j ww2_scb9l ww3_scb9m ww7_scbed ww8_scbee
             });
        'e'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt1 'e'# ww1_scb9k ww4_scb9n w_scb9f of
             { (# ww7_scbed, ww8_scbee #) ->
             Text.Printf.$wadjustSigned
               ww_scb9j ww2_scb9l ww3_scb9m ww7_scbed ww8_scbee
             });
        'f'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt1 'f'# ww1_scb9k ww4_scb9n w_scb9f of
             { (# ww7_scbed, ww8_scbee #) ->
             Text.Printf.$wadjustSigned
               ww_scb9j ww2_scb9l ww3_scb9m ww7_scbed ww8_scbee
             });
        'g'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt1 'g'# ww1_scb9k ww4_scb9n w_scb9f of
             { (# ww7_scbed, ww8_scbee #) ->
             Text.Printf.$wadjustSigned
               ww_scb9j ww2_scb9l ww3_scb9m ww7_scbed ww8_scbee
             });
        'v'# ->
          ++
            @ Char
            (case Text.Printf.$w$sdfmt1 'g'# ww1_scb9k ww4_scb9n w_scb9f of
             { (# ww7_scbed, ww8_scbee #) ->
             Text.Printf.$wadjustSigned
               ww_scb9j ww2_scb9l ww3_scb9m ww7_scbed ww8_scbee
             })
      }

-- RHS size: {terms: 16, types: 16, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgFloat_$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: Float -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scb9f [Occ=Once] :: Float)
                 (w1_scb9g [Occ=Once!] :: FieldFormat) ->
                 case w1_scb9g of
                 { FieldFormat ww1_scb9j [Occ=Once] ww2_scb9k [Occ=Once]
                               ww3_scb9l [Occ=Once] ww4_scb9m [Occ=Once] ww5_scb9n [Occ=Once]
                               _ [Occ=Dead] ww7_scb9p [Occ=Once!] ->
                 case ww7_scb9p of { GHC.Types.C# ww9_scb9s [Occ=Once] ->
                 Text.Printf.$w$sformatRealFloat1
                   w_scb9f ww1_scb9j ww2_scb9k ww3_scb9l ww4_scb9m ww5_scb9n ww9_scb9s
                 }
                 }}]
Text.Printf.$fPrintfArgFloat_$sformatRealFloat
  = \ (w_scb9f :: Float) (w1_scb9g :: FieldFormat) ->
      case w1_scb9g of
      { FieldFormat ww1_scb9j ww2_scb9k ww3_scb9l ww4_scb9m ww5_scb9n
                    ww6_scb9o ww7_scb9p ->
      case ww7_scb9p of { GHC.Types.C# ww9_scb9s ->
      Text.Printf.$w$sformatRealFloat1
        w_scb9f ww1_scb9j ww2_scb9k ww3_scb9l ww4_scb9m ww5_scb9n ww9_scb9s
      }
      }

-- RHS size: {terms: 126, types: 80, coercions: 0, joins: 0/0}
Text.Printf.$wformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     RealFloat a =>
     a
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> Maybe FormatSign
     -> Bool
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=8,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><L,U><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 0 1010] 1150 420}]
Text.Printf.$wformatRealFloat
  = \ (@ a_scb9I)
      (w_scb9J :: RealFloat a_scb9I)
      (w1_scb9K :: a_scb9I)
      (ww_scb9O :: Maybe Int)
      (ww1_scb9P :: Maybe Int)
      (ww2_scb9Q :: Maybe FormatAdjustment)
      (ww3_scb9R :: Maybe FormatSign)
      (ww4_scb9S :: Bool)
      (ww5_scb9X :: GHC.Prim.Char#) ->
      case ww5_scb9X of ds_Xc9gq {
        __DEFAULT -> Text.Printf.$werrorBadFormat @ ShowS ds_Xc9gq;
        'E'# ->
          ++
            @ Char
            (case Text.Printf.$wdfmt
                    @ a_scb9I w_scb9J 'E'# ww1_scb9P ww4_scb9S w1_scb9K
             of
             { (# ww7_scbeg, ww8_scbeh #) ->
             Text.Printf.$wadjustSigned
               ww_scb9O ww2_scb9Q ww3_scb9R ww7_scbeg ww8_scbeh
             });
        'F'# ->
          ++
            @ Char
            (case Text.Printf.$wdfmt
                    @ a_scb9I w_scb9J 'F'# ww1_scb9P ww4_scb9S w1_scb9K
             of
             { (# ww7_scbeg, ww8_scbeh #) ->
             Text.Printf.$wadjustSigned
               ww_scb9O ww2_scb9Q ww3_scb9R ww7_scbeg ww8_scbeh
             });
        'G'# ->
          ++
            @ Char
            (case Text.Printf.$wdfmt
                    @ a_scb9I w_scb9J 'G'# ww1_scb9P ww4_scb9S w1_scb9K
             of
             { (# ww7_scbeg, ww8_scbeh #) ->
             Text.Printf.$wadjustSigned
               ww_scb9O ww2_scb9Q ww3_scb9R ww7_scbeg ww8_scbeh
             });
        'e'# ->
          ++
            @ Char
            (case Text.Printf.$wdfmt
                    @ a_scb9I w_scb9J 'e'# ww1_scb9P ww4_scb9S w1_scb9K
             of
             { (# ww7_scbeg, ww8_scbeh #) ->
             Text.Printf.$wadjustSigned
               ww_scb9O ww2_scb9Q ww3_scb9R ww7_scbeg ww8_scbeh
             });
        'f'# ->
          ++
            @ Char
            (case Text.Printf.$wdfmt
                    @ a_scb9I w_scb9J 'f'# ww1_scb9P ww4_scb9S w1_scb9K
             of
             { (# ww7_scbeg, ww8_scbeh #) ->
             Text.Printf.$wadjustSigned
               ww_scb9O ww2_scb9Q ww3_scb9R ww7_scbeg ww8_scbeh
             });
        'g'# ->
          ++
            @ Char
            (case Text.Printf.$wdfmt
                    @ a_scb9I w_scb9J 'g'# ww1_scb9P ww4_scb9S w1_scb9K
             of
             { (# ww7_scbeg, ww8_scbeh #) ->
             Text.Printf.$wadjustSigned
               ww_scb9O ww2_scb9Q ww3_scb9R ww7_scbeg ww8_scbeh
             });
        'v'# ->
          ++
            @ Char
            (case Text.Printf.$wdfmt
                    @ a_scb9I w_scb9J 'g'# ww1_scb9P ww4_scb9S w1_scb9K
             of
             { (# ww7_scbeg, ww8_scbeh #) ->
             Text.Printf.$wadjustSigned
               ww_scb9O ww2_scb9Q ww3_scb9R ww7_scbeg ww8_scbeh
             })
      }

-- RHS size: {terms: 19, types: 21, coercions: 0, joins: 0/0}
formatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: forall a. RealFloat a => a -> FieldFormatter
[GblId,
 Arity=3,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><L,U><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_scb9I)
                 (w_scb9J [Occ=Once] :: RealFloat a_scb9I)
                 (w1_scb9K [Occ=Once] :: a_scb9I)
                 (w2_scb9L [Occ=Once!] :: FieldFormat) ->
                 case w2_scb9L of
                 { FieldFormat ww1_scb9O [Occ=Once] ww2_scb9P [Occ=Once]
                               ww3_scb9Q [Occ=Once] ww4_scb9R [Occ=Once] ww5_scb9S [Occ=Once]
                               _ [Occ=Dead] ww7_scb9U [Occ=Once!] ->
                 case ww7_scb9U of { GHC.Types.C# ww9_scb9X [Occ=Once] ->
                 Text.Printf.$wformatRealFloat
                   @ a_scb9I
                   w_scb9J
                   w1_scb9K
                   ww1_scb9O
                   ww2_scb9P
                   ww3_scb9Q
                   ww4_scb9R
                   ww5_scb9S
                   ww9_scb9X
                 }
                 }}]
formatRealFloat
  = \ (@ a_scb9I)
      (w_scb9J :: RealFloat a_scb9I)
      (w1_scb9K :: a_scb9I)
      (w2_scb9L :: FieldFormat) ->
      case w2_scb9L of
      { FieldFormat ww1_scb9O ww2_scb9P ww3_scb9Q ww4_scb9R ww5_scb9S
                    ww6_scb9T ww7_scb9U ->
      case ww7_scb9U of { GHC.Types.C# ww9_scb9X ->
      Text.Printf.$wformatRealFloat
        @ a_scb9I
        w_scb9J
        w1_scb9K
        ww1_scb9O
        ww2_scb9P
        ww3_scb9Q
        ww4_scb9R
        ww5_scb9S
        ww9_scb9X
      }
      }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgDouble_$cparseFormat
  :: Double -> ModifierParser
[GblId,
 Arity=2,
 Str=<L,A><S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead] (ds1_dc9lW [Occ=Once!] :: [Char]) ->
                 case ds1_dc9lW of {
                   [] -> errorShortFormat @ FormatParse;
                   : c_ac8qx [Occ=Once] cs_ac8qy [Occ=Once] ->
                     Text.Printf.FormatParse (GHC.Types.[] @ Char) c_ac8qx cs_ac8qy
                 }}]
Text.Printf.$fPrintfArgDouble_$cparseFormat
  = \ _ [Occ=Dead] (ds1_dc9lW :: [Char]) ->
      case ds1_dc9lW of {
        [] -> errorShortFormat @ FormatParse;
        : c_ac8qx cs_ac8qy ->
          Text.Printf.FormatParse (GHC.Types.[] @ Char) c_ac8qx cs_ac8qy
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgDouble [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Double
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Double
                               Text.Printf.$fPrintfArgDouble_$sformatRealFloat
                               Text.Printf.$fPrintfArgDouble_$cparseFormat]
Text.Printf.$fPrintfArgDouble
  = Text.Printf.C:PrintfArg
      @ Double
      Text.Printf.$fPrintfArgDouble_$sformatRealFloat
      Text.Printf.$fPrintfArgDouble_$cparseFormat

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgFloat_$cparseFormat
  :: Float -> ModifierParser
[GblId,
 Arity=2,
 Str=<L,A><S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead] (ds1_dc9lW [Occ=Once!] :: [Char]) ->
                 case ds1_dc9lW of {
                   [] -> errorShortFormat @ FormatParse;
                   : c_ac8qx [Occ=Once] cs_ac8qy [Occ=Once] ->
                     Text.Printf.FormatParse (GHC.Types.[] @ Char) c_ac8qx cs_ac8qy
                 }}]
Text.Printf.$fPrintfArgFloat_$cparseFormat
  = \ _ [Occ=Dead] (ds1_dc9lW :: [Char]) ->
      case ds1_dc9lW of {
        [] -> errorShortFormat @ FormatParse;
        : c_ac8qx cs_ac8qy ->
          Text.Printf.FormatParse (GHC.Types.[] @ Char) c_ac8qx cs_ac8qy
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgFloat [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Float
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Float
                               Text.Printf.$fPrintfArgFloat_$sformatRealFloat
                               Text.Printf.$fPrintfArgFloat_$cparseFormat]
Text.Printf.$fPrintfArgFloat
  = Text.Printf.C:PrintfArg
      @ Float
      Text.Printf.$fPrintfArgFloat_$sformatRealFloat
      Text.Printf.$fPrintfArgFloat_$cparseFormat

-- RHS size: {terms: 48, types: 28, coercions: 0, joins: 1/2}
Text.Printf.$w$sformatString [InlPrag=NOUSERINLINE[0]]
  :: [Char]
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=5,
 Str=<L,1*U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 30 0 34] 249 0}]
Text.Printf.$w$sformatString
  = \ (w_scbad :: [Char])
      (ww_scbah :: Maybe Int)
      (ww1_scbai :: Maybe Int)
      (ww2_scbaj :: Maybe FormatAdjustment)
      (ww3_scbaq :: GHC.Prim.Char#) ->
      join {
        $w$j_scbac [InlPrag=NOUSERINLINE[0], Dmd=<C(S),1*C1(U)>]
          :: GHC.Prim.Char# -> ShowS
        [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        $w$j_scbac (ww4_scbaa [OS=OneShot] :: GHC.Prim.Char#)
          = case ww4_scbaa of ds_Xc9hU {
              __DEFAULT -> Text.Printf.$werrorBadFormat @ ShowS ds_Xc9hU;
              's'# ->
                let {
                  g_sc9L1 :: String
                  [LclId]
                  g_sc9L1
                    = Text.Printf.$wadjust
                        ww_scbah
                        ww2_scbaj
                        (GHC.Types.[] @ Char)
                        (case ww1_scbai of {
                           Nothing -> w_scbad;
                           Just n_ac8rC ->
                             case n_ac8rC of { GHC.Types.I# y_alNd ->
                             case GHC.Prim.<# 0# y_alNd of {
                               __DEFAULT -> GHC.Types.[] @ Char;
                               1# -> GHC.List.$wunsafeTake @ Char y_alNd w_scbad
                             }
                             }
                         }) } in
                \ (x_i7Rxi :: [Char]) -> ++ @ Char g_sc9L1 x_i7Rxi
            } } in
      case ww3_scbaq of ds_Xc9gq {
        __DEFAULT -> jump $w$j_scbac ds_Xc9gq;
        'v'# -> jump $w$j_scbac 's'#
      }

-- RHS size: {terms: 79, types: 54, coercions: 0, joins: 1/3}
Text.Printf.$wformatString [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     IsChar a =>
     [a]
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=6,
 Str=<L,U(C(U),A)><L,1*U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [90 0 0 80 0 34] 480 0}]
Text.Printf.$wformatString
  = \ (@ a_scbaN)
      (w_scbaO :: IsChar a_scbaN)
      (w1_scbaP :: [a_scbaN])
      (ww_scbaT :: Maybe Int)
      (ww1_scbaU :: Maybe Int)
      (ww2_scbaV :: Maybe FormatAdjustment)
      (ww3_scbb2 :: GHC.Prim.Char#) ->
      join {
        $w$j_scbaM [InlPrag=NOUSERINLINE[0], Dmd=<C(S),1*C1(U)>]
          :: GHC.Prim.Char# -> ShowS
        [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        $w$j_scbaM (ww4_scbaK [OS=OneShot] :: GHC.Prim.Char#)
          = case ww4_scbaK of ds_Xc9hU {
              __DEFAULT -> Text.Printf.$werrorBadFormat @ ShowS ds_Xc9hU;
              's'# ->
                let {
                  g_sc9KX :: String
                  [LclId]
                  g_sc9KX
                    = Text.Printf.$wadjust
                        ww_scbaT
                        ww2_scbaV
                        (GHC.Types.[] @ Char)
                        (case ww1_scbaU of {
                           Nothing ->
                             map @ a_scbaN @ Char (toChar @ a_scbaN w_scbaO) w1_scbaP;
                           Just n_ac8rC ->
                             case n_ac8rC of { GHC.Types.I# y_alNd ->
                             case GHC.Prim.<# 0# y_alNd of {
                               __DEFAULT -> GHC.Types.[] @ Char;
                               1# ->
                                 letrec {
                                   $wgo_scbaA [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                     :: [a_scbaN] -> GHC.Prim.Int# -> [Char]
                                   [LclId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []]
                                   $wgo_scbaA
                                     = \ (w2_scbau :: [a_scbaN]) (ww5_scbay :: GHC.Prim.Int#) ->
                                         case w2_scbau of {
                                           [] -> GHC.Types.[] @ Char;
                                           : y1_i7Jcp ys_i7Jcq ->
                                             case ww5_scbay of ds1_iax4j {
                                               __DEFAULT ->
                                                 GHC.Types.:
                                                   @ Char
                                                   (toChar @ a_scbaN w_scbaO y1_i7Jcp)
                                                   ($wgo_scbaA ys_i7Jcq (GHC.Prim.-# ds1_iax4j 1#));
                                               1# ->
                                                 GHC.Types.:
                                                   @ Char
                                                   (toChar @ a_scbaN w_scbaO y1_i7Jcp)
                                                   (GHC.Types.[] @ Char)
                                             }
                                         }; } in
                                 $wgo_scbaA w1_scbaP y_alNd
                             }
                             }
                         }) } in
                \ (x_i7Rxi :: [Char]) -> ++ @ Char g_sc9KX x_i7Rxi
            } } in
      case ww3_scbb2 of ds_Xc9gq {
        __DEFAULT -> jump $w$j_scbaM ds_Xc9gq;
        'v'# -> jump $w$j_scbaM 's'#
      }

-- RHS size: {terms: 17, types: 22, coercions: 0, joins: 0/0}
formatString [InlPrag=NOUSERINLINE[0]]
  :: forall a. IsChar a => [a] -> FieldFormatter
[GblId,
 Arity=3,
 Str=<L,U(C(U),A)><L,1*U><S(LLLLLLS(S)),1*U(1*U,1*U,U,A,A,A,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_scbaN)
                 (w_scbaO [Occ=Once] :: IsChar a_scbaN)
                 (w1_scbaP [Occ=Once] :: [a_scbaN])
                 (w2_scbaQ [Occ=Once!] :: FieldFormat) ->
                 case w2_scbaQ of
                 { FieldFormat ww1_scbaT [Occ=Once] ww2_scbaU [Occ=Once]
                               ww3_scbaV [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                               ww7_scbaZ [Occ=Once!] ->
                 case ww7_scbaZ of { GHC.Types.C# ww9_scbb2 [Occ=Once] ->
                 Text.Printf.$wformatString
                   @ a_scbaN w_scbaO w1_scbaP ww1_scbaT ww2_scbaU ww3_scbaV ww9_scbb2
                 }
                 }}]
formatString
  = \ (@ a_scbaN)
      (w_scbaO :: IsChar a_scbaN)
      (w1_scbaP :: [a_scbaN])
      (w2_scbaQ :: FieldFormat) ->
      case w2_scbaQ of
      { FieldFormat ww1_scbaT ww2_scbaU ww3_scbaV ww4_scbaW ww5_scbaX
                    ww6_scbaY ww7_scbaZ ->
      case ww7_scbaZ of { GHC.Types.C# ww9_scbb2 ->
      Text.Printf.$wformatString
        @ a_scbaN w_scbaO w1_scbaP ww1_scbaT ww2_scbaU ww3_scbaV ww9_scbb2
      }
      }

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
lvl22_rcccn :: forall c. [c] -> [Char] -> FormatParse
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []]
lvl22_rcccn
  = \ (@ c_ac8Zj) _ [Occ=Dead] (ds1_dc9lW :: [Char]) ->
      case ds1_dc9lW of {
        [] -> errorShortFormat @ FormatParse;
        : c1_ac8qx cs_ac8qy ->
          Text.Printf.FormatParse (GHC.Types.[] @ Char) c1_ac8qx cs_ac8qy
      }

-- RHS size: {terms: 6, types: 8, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArg[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall c. IsChar c => PrintfArg [c]
[GblId[DFunId],
 Arity=1,
 Str=<L,U(C(U),A)>m,
 Unf=DFun: \ (@ c_ac8qD) (v_B1 :: IsChar c_ac8qD) ->
       Text.Printf.C:PrintfArg TYPE: [c_ac8qD]
                               formatString @ c_ac8qD v_B1
                               \ _ [Occ=Dead] (ds1_dc9lW [Occ=Once!] :: [Char]) ->
                                 case ds1_dc9lW of {
                                   [] -> errorShortFormat @ FormatParse;
                                   : c1_ac8qx [Occ=Once] cs_ac8qy [Occ=Once] ->
                                     Text.Printf.FormatParse (GHC.Types.[] @ Char) c1_ac8qx cs_ac8qy
                                 }]
Text.Printf.$fPrintfArg[]
  = \ (@ c_ac8Zj) ($dIsChar_ac8Zk :: IsChar c_ac8Zj) ->
      Text.Printf.C:PrintfArg
        @ [c_ac8Zj]
        (formatString @ c_ac8Zj $dIsChar_ac8Zk)
        (lvl22_rcccn @ c_ac8Zj)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl23_rccco :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl23_rccco = GHC.Types.C# 'd'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl24_rcccp :: Integer
[GblId, Unf=OtherCon []]
lvl24_rcccp = 16

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl25_rcccq :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl25_rcccq = "0X"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl26_rcccr :: [Char]
[GblId]
lvl26_rcccr = GHC.CString.unpackCString# lvl25_rcccq

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl27_rcccs :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl27_rcccs = "0b"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl28_rccct :: [Char]
[GblId]
lvl28_rccct = GHC.CString.unpackCString# lvl27_rcccs

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl29_rcccu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl29_rcccu = "printf: illegal char conversion"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl30_rcccv :: ShowS
[GblId, Str=x]
lvl30_rcccv
  = errorWithoutStackTrace
      @ 'GHC.Types.LiftedRep
      @ ShowS
      (GHC.CString.unpackCString# lvl29_rcccu)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl31_rcccw :: Integer
[GblId, Unf=OtherCon []]
lvl31_rcccw = 1114111

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl32_rcccx :: Integer
[GblId, Unf=OtherCon []]
lvl32_rcccx = 8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl33_rcccy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl33_rcccy = "0"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl34_rcccz :: [Char]
[GblId]
lvl34_rcccz = GHC.CString.unpackCString# lvl33_rcccy

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl35_rcccA :: Integer
[GblId, Unf=OtherCon []]
lvl35_rcccA = 10

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl36_rcccB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl36_rcccB = "0x"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl37_rcccC :: [Char]
[GblId]
lvl37_rcccC = GHC.CString.unpackCString# lvl36_rcccB

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl38_rcccD :: Maybe [Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl38_rcccD = GHC.Base.Just @ [Char] lvl26_rcccr

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl39_rcccE :: Maybe [Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl39_rcccE = GHC.Base.Just @ [Char] lvl28_rccct

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl40_rcccF :: Maybe [Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl40_rcccF = GHC.Base.Just @ [Char] lvl34_rcccz

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl41_rcccG :: Maybe [Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl41_rcccG = GHC.Base.Just @ [Char] lvl37_rcccC

-- RHS size: {terms: 484, types: 219, coercions: 0, joins: 1/1}
Text.Printf.$wformatIntegral [InlPrag=NOUSERINLINE[0]]
  :: Maybe Integer
     -> Integer
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> Maybe FormatSign
     -> Bool
     -> String
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=9,
 Str=<L,1*U><L,U><L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []]
Text.Printf.$wformatIntegral
  = \ (w_scbbj :: Maybe Integer)
      (w1_scbbk :: Integer)
      (ww_scbbo :: Maybe Int)
      (ww1_scbbp :: Maybe Int)
      (ww2_scbbq :: Maybe FormatAdjustment)
      (ww3_scbbr :: Maybe FormatSign)
      (ww4_scbbs :: Bool)
      (ww5_scbbt :: String)
      (ww6_scbbx :: GHC.Prim.Char#) ->
      join {
        $w$j_scbbi [InlPrag=NOUSERINLINE[0],
                    Dmd=<C(C(C(C(C(C(C(C(S)))))))),1*C1(C1(C1(C1(C1(C1(C1(C1(U))))))))>]
          :: Maybe Int
             -> Maybe Int
             -> Maybe FormatAdjustment
             -> Maybe FormatSign
             -> Bool
             -> String
             -> GHC.Prim.Char#
             -> FieldFormat
             -> ShowS
        [LclId[JoinId(8)],
         Arity=8,
         Str=<L,1*U><L,1*U><L,U><L,1*U><L,1*U><L,1*U><S,1*U><L,A>,
         Unf=OtherCon []]
        $w$j_scbbi (w2_scbb6 [OS=OneShot] :: Maybe Int)
                   (w3_scbb7 [OS=OneShot] :: Maybe Int)
                   (w4_scbb8 [OS=OneShot] :: Maybe FormatAdjustment)
                   (w5_scbb9 [OS=OneShot] :: Maybe FormatSign)
                   (w6_scbba [OS=OneShot] :: Bool)
                   (w7_scbbb [OS=OneShot] :: String)
                   (ww7_scbbg [OS=OneShot] :: GHC.Prim.Char#)
                   _ [Occ=Dead, OS=OneShot]
          = case ww7_scbbg of ds_Xc9iF {
              __DEFAULT -> Text.Printf.$werrorBadFormat @ ShowS ds_Xc9iF;
              'X'# ->
                ++
                  @ Char
                  (case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
                          w1_scbbk Text.Printf.formatChar2
                   of {
                     __DEFAULT ->
                       case w6_scbba of {
                         False ->
                           case $wfmtu_rcccl
                                  lvl24_rcccp (GHC.Base.Nothing @ [Char]) ww1_scbbp w_scbbj w1_scbbk
                           of
                           { (# ww9_scbej, ww10_scbek #) ->
                           Text.Printf.$wadjust
                             w2_scbb6 w4_scbb8 ww9_scbej (map @ Char @ Char toUpper ww10_scbek)
                           };
                         True ->
                           case $wfmtu_rcccl
                                  lvl24_rcccp lvl38_rcccD ww1_scbbp w_scbbj w1_scbbk
                           of
                           { (# ww9_scbej, ww10_scbek #) ->
                           Text.Printf.$wadjust
                             w2_scbb6 w4_scbb8 ww9_scbej (map @ Char @ Char toUpper ww10_scbek)
                           }
                       };
                     1# ->
                       case $wfmtu_rcccl
                              lvl24_rcccp (GHC.Base.Nothing @ [Char]) ww1_scbbp w_scbbj w1_scbbk
                       of
                       { (# ww9_scbej, ww10_scbek #) ->
                       Text.Printf.$wadjust
                         w2_scbb6 w4_scbb8 ww9_scbej (map @ Char @ Char toUpper ww10_scbek)
                       }
                   });
              'b'# ->
                ++
                  @ Char
                  (case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
                          w1_scbbk Text.Printf.formatChar2
                   of {
                     __DEFAULT ->
                       case w6_scbba of {
                         False ->
                           case $wfmtu_rcccl
                                  lvl21_rccck (GHC.Base.Nothing @ [Char]) ww1_scbbp w_scbbj w1_scbbk
                           of
                           { (# ww9_scbej, ww10_scbek #) ->
                           Text.Printf.$wadjust w2_scbb6 w4_scbb8 ww9_scbej ww10_scbek
                           };
                         True ->
                           case $wfmtu_rcccl
                                  lvl21_rccck lvl39_rcccE ww1_scbbp w_scbbj w1_scbbk
                           of
                           { (# ww9_scbej, ww10_scbek #) ->
                           Text.Printf.$wadjust w2_scbb6 w4_scbb8 ww9_scbej ww10_scbek
                           }
                       };
                     1# ->
                       case $wfmtu_rcccl
                              lvl21_rccck (GHC.Base.Nothing @ [Char]) ww1_scbbp w_scbbj w1_scbbk
                       of
                       { (# ww9_scbej, ww10_scbek #) ->
                       Text.Printf.$wadjust w2_scbb6 w4_scbb8 ww9_scbej ww10_scbek
                       }
                   });
              'c'# ->
                case integer-simple-0.1.1.1:GHC.Integer.Type.geInteger#
                       w1_scbbk Text.Printf.formatChar2
                of {
                  __DEFAULT -> lvl30_rcccv;
                  1# ->
                    case integer-simple-0.1.1.1:GHC.Integer.Type.leInteger#
                           w1_scbbk lvl31_rcccw
                    of {
                      __DEFAULT -> lvl30_rcccv;
                      1# ->
                        case w3_scbb7 of {
                          Nothing ->
                            case GHC.Base.eqString w7_scbbb (GHC.Types.[] @ Char) of {
                              False -> lvl30_rcccv;
                              True ->
                                Text.Printf.$w$sformatString
                                  (GHC.Types.:
                                     @ Char
                                     (case integer-simple-0.1.1.1:GHC.Integer.Type.integerToInt
                                             w1_scbbk
                                      of wild4_i7Vf0
                                      { __DEFAULT ->
                                      case GHC.Prim.leWord#
                                             (GHC.Prim.int2Word# wild4_i7Vf0) 1114111##
                                      of {
                                        __DEFAULT -> GHC.Char.$wlvl wild4_i7Vf0;
                                        1# -> GHC.Types.C# (GHC.Prim.chr# wild4_i7Vf0)
                                      }
                                      })
                                     (GHC.Types.[] @ Char))
                                  w2_scbb6
                                  (GHC.Base.Nothing @ Int)
                                  w4_scbb8
                                  's'#
                            };
                          Just a1_i890t -> lvl30_rcccv
                        }
                    }
                };
              'd'# ->
                ++
                  @ Char
                  (case $wfmti_rcccm ww1_scbbp w1_scbbk of
                   { (# ww9_scbem, ww10_scben #) ->
                   Text.Printf.$wadjustSigned
                     w2_scbb6 w4_scbb8 w5_scbb9 ww9_scbem ww10_scben
                   });
              'i'# ->
                ++
                  @ Char
                  (case $wfmti_rcccm ww1_scbbp w1_scbbk of
                   { (# ww9_scbem, ww10_scben #) ->
                   Text.Printf.$wadjustSigned
                     w2_scbb6 w4_scbb8 w5_scbb9 ww9_scbem ww10_scben
                   });
              'o'# ->
                ++
                  @ Char
                  (case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
                          w1_scbbk Text.Printf.formatChar2
                   of {
                     __DEFAULT ->
                       case w6_scbba of {
                         False ->
                           case $wfmtu_rcccl
                                  lvl32_rcccx (GHC.Base.Nothing @ [Char]) ww1_scbbp w_scbbj w1_scbbk
                           of
                           { (# ww9_scbej, ww10_scbek #) ->
                           Text.Printf.$wadjust w2_scbb6 w4_scbb8 ww9_scbej ww10_scbek
                           };
                         True ->
                           case $wfmtu_rcccl
                                  lvl32_rcccx lvl40_rcccF ww1_scbbp w_scbbj w1_scbbk
                           of
                           { (# ww9_scbej, ww10_scbek #) ->
                           Text.Printf.$wadjust w2_scbb6 w4_scbb8 ww9_scbej ww10_scbek
                           }
                       };
                     1# ->
                       case $wfmtu_rcccl
                              lvl32_rcccx (GHC.Base.Nothing @ [Char]) ww1_scbbp w_scbbj w1_scbbk
                       of
                       { (# ww9_scbej, ww10_scbek #) ->
                       Text.Printf.$wadjust w2_scbb6 w4_scbb8 ww9_scbej ww10_scbek
                       }
                   });
              'u'# ->
                ++
                  @ Char
                  (case $wfmtu_rcccl
                          lvl35_rcccA (GHC.Base.Nothing @ String) ww1_scbbp w_scbbj w1_scbbk
                   of
                   { (# ww9_scbej, ww10_scbek #) ->
                   Text.Printf.$wadjust w2_scbb6 w4_scbb8 ww9_scbej ww10_scbek
                   });
              'x'# ->
                ++
                  @ Char
                  (case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
                          w1_scbbk Text.Printf.formatChar2
                   of {
                     __DEFAULT ->
                       case w6_scbba of {
                         False ->
                           case $wfmtu_rcccl
                                  lvl24_rcccp (GHC.Base.Nothing @ [Char]) ww1_scbbp w_scbbj w1_scbbk
                           of
                           { (# ww9_scbej, ww10_scbek #) ->
                           Text.Printf.$wadjust w2_scbb6 w4_scbb8 ww9_scbej ww10_scbek
                           };
                         True ->
                           case $wfmtu_rcccl
                                  lvl24_rcccp lvl41_rcccG ww1_scbbp w_scbbj w1_scbbk
                           of
                           { (# ww9_scbej, ww10_scbek #) ->
                           Text.Printf.$wadjust w2_scbb6 w4_scbb8 ww9_scbej ww10_scbek
                           }
                       };
                     1# ->
                       case $wfmtu_rcccl
                              lvl24_rcccp (GHC.Base.Nothing @ [Char]) ww1_scbbp w_scbbj w1_scbbk
                       of
                       { (# ww9_scbej, ww10_scbek #) ->
                       Text.Printf.$wadjust w2_scbb6 w4_scbb8 ww9_scbej ww10_scbek
                       }
                   })
            } } in
      case ww1_scbbp of wild_X23 {
        Nothing ->
          case ww6_scbbx of ds_Xc9gq {
            __DEFAULT ->
              jump $w$j_scbbi
                ww_scbbo
                (GHC.Base.Nothing @ Int)
                ww2_scbbq
                ww3_scbbr
                ww4_scbbs
                ww5_scbbt
                ds_Xc9gq
                (Text.Printf.FieldFormat
                   ww_scbbo
                   (GHC.Base.Nothing @ Int)
                   ww2_scbbq
                   ww3_scbbr
                   ww4_scbbs
                   ww5_scbbt
                   (GHC.Types.C# ds_Xc9gq));
            'v'# ->
              jump $w$j_scbbi
                ww_scbbo
                (GHC.Base.Nothing @ Int)
                ww2_scbbq
                ww3_scbbr
                ww4_scbbs
                ww5_scbbt
                'd'#
                (Text.Printf.FieldFormat
                   ww_scbbo
                   (GHC.Base.Nothing @ Int)
                   ww2_scbbq
                   ww3_scbbr
                   ww4_scbbs
                   ww5_scbbt
                   lvl23_rccco)
          };
        Just ds_dc9hS ->
          case ww2_scbbq of wild1_X25 {
            Nothing ->
              case ww6_scbbx of ds1_Xc9gq {
                __DEFAULT ->
                  jump $w$j_scbbi
                    ww_scbbo
                    wild_X23
                    (GHC.Base.Nothing @ FormatAdjustment)
                    ww3_scbbr
                    ww4_scbbs
                    ww5_scbbt
                    ds1_Xc9gq
                    (Text.Printf.FieldFormat
                       ww_scbbo
                       wild_X23
                       (GHC.Base.Nothing @ FormatAdjustment)
                       ww3_scbbr
                       ww4_scbbs
                       ww5_scbbt
                       (GHC.Types.C# ds1_Xc9gq));
                'v'# ->
                  jump $w$j_scbbi
                    ww_scbbo
                    wild_X23
                    (GHC.Base.Nothing @ FormatAdjustment)
                    ww3_scbbr
                    ww4_scbbs
                    ww5_scbbt
                    'd'#
                    (Text.Printf.FieldFormat
                       ww_scbbo
                       wild_X23
                       (GHC.Base.Nothing @ FormatAdjustment)
                       ww3_scbbr
                       ww4_scbbs
                       ww5_scbbt
                       lvl23_rccco)
              };
            Just ds1_dc9hT ->
              case ds1_dc9hT of {
                LeftAdjust ->
                  case ww6_scbbx of ds2_Xc9gq {
                    __DEFAULT ->
                      jump $w$j_scbbi
                        ww_scbbo
                        wild_X23
                        wild1_X25
                        ww3_scbbr
                        ww4_scbbs
                        ww5_scbbt
                        ds2_Xc9gq
                        (Text.Printf.FieldFormat
                           ww_scbbo
                           wild_X23
                           wild1_X25
                           ww3_scbbr
                           ww4_scbbs
                           ww5_scbbt
                           (GHC.Types.C# ds2_Xc9gq));
                    'v'# ->
                      jump $w$j_scbbi
                        ww_scbbo
                        wild_X23
                        wild1_X25
                        ww3_scbbr
                        ww4_scbbs
                        ww5_scbbt
                        'd'#
                        (Text.Printf.FieldFormat
                           ww_scbbo
                           wild_X23
                           wild1_X25
                           ww3_scbbr
                           ww4_scbbs
                           ww5_scbbt
                           lvl23_rccco)
                  };
                ZeroPad ->
                  case ww6_scbbx of ds2_Xc9gq {
                    __DEFAULT ->
                      jump $w$j_scbbi
                        ww_scbbo
                        wild_X23
                        (GHC.Base.Nothing @ FormatAdjustment)
                        ww3_scbbr
                        ww4_scbbs
                        ww5_scbbt
                        ds2_Xc9gq
                        (Text.Printf.FieldFormat
                           ww_scbbo
                           wild_X23
                           (GHC.Base.Nothing @ FormatAdjustment)
                           ww3_scbbr
                           ww4_scbbs
                           ww5_scbbt
                           (GHC.Types.C# ds2_Xc9gq));
                    'v'# ->
                      jump $w$j_scbbi
                        ww_scbbo
                        wild_X23
                        (GHC.Base.Nothing @ FormatAdjustment)
                        ww3_scbbr
                        ww4_scbbs
                        ww5_scbbt
                        'd'#
                        (Text.Printf.FieldFormat
                           ww_scbbo
                           wild_X23
                           (GHC.Base.Nothing @ FormatAdjustment)
                           ww3_scbbr
                           ww4_scbbs
                           ww5_scbbt
                           lvl23_rccco)
                  }
              }
          }
      }

-- RHS size: {terms: 19, types: 18, coercions: 0, joins: 0/0}
formatIntegral [InlPrag=NOUSERINLINE[0]]
  :: Maybe Integer -> Integer -> FieldFormatter
[GblId,
 Arity=3,
 Str=<L,1*U><L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,1*U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scbbj [Occ=Once] :: Maybe Integer)
                 (w1_scbbk [Occ=Once] :: Integer)
                 (w2_scbbl [Occ=Once!] :: FieldFormat) ->
                 case w2_scbbl of
                 { FieldFormat ww1_scbbo [Occ=Once] ww2_scbbp [Occ=Once]
                               ww3_scbbq [Occ=Once] ww4_scbbr [Occ=Once] ww5_scbbs [Occ=Once]
                               ww6_scbbt [Occ=Once] ww7_scbbu [Occ=Once!] ->
                 case ww7_scbbu of { GHC.Types.C# ww9_scbbx [Occ=Once] ->
                 Text.Printf.$wformatIntegral
                   w_scbbj
                   w1_scbbk
                   ww1_scbbo
                   ww2_scbbp
                   ww3_scbbq
                   ww4_scbbr
                   ww5_scbbs
                   ww6_scbbt
                   ww9_scbbx
                 }
                 }}]
formatIntegral
  = \ (w_scbbj :: Maybe Integer)
      (w1_scbbk :: Integer)
      (w2_scbbl :: FieldFormat) ->
      case w2_scbbl of
      { FieldFormat ww1_scbbo ww2_scbbp ww3_scbbq ww4_scbbr ww5_scbbs
                    ww6_scbbt ww7_scbbu ->
      case ww7_scbbu of { GHC.Types.C# ww9_scbbx ->
      Text.Printf.$wformatIntegral
        w_scbbj
        w1_scbbk
        ww1_scbbo
        ww2_scbbp
        ww3_scbbq
        ww4_scbbr
        ww5_scbbs
        ww6_scbbt
        ww9_scbbx
      }
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Text.Printf.formatChar1 :: Maybe Integer
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.formatChar1
  = GHC.Base.Just @ Integer Text.Printf.formatChar2

-- RHS size: {terms: 42, types: 17, coercions: 0, joins: 0/0}
Text.Printf.$wformatChar [InlPrag=NOUSERINLINE[0]]
  :: Char
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> Maybe FormatSign
     -> Bool
     -> String
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [40 0 0 0 0 0 0 160] 280 0}]
Text.Printf.$wformatChar
  = \ (w_scbbB :: Char)
      (ww_scbbF :: Maybe Int)
      (ww1_scbbG :: Maybe Int)
      (ww2_scbbH :: Maybe FormatAdjustment)
      (ww3_scbbI :: Maybe FormatSign)
      (ww4_scbbJ :: Bool)
      (ww5_scbbK :: String)
      (ww6_scbbO :: GHC.Prim.Char#) ->
      case ww6_scbbO of ds_Xc9gq {
        __DEFAULT ->
          Text.Printf.$wformatIntegral
            Text.Printf.formatChar1
            (case w_scbbB of { GHC.Types.C# c#_i8rxX ->
             integer-simple-0.1.1.1:GHC.Integer.Type.smallInteger
               (GHC.Prim.ord# c#_i8rxX)
             })
            ww_scbbF
            ww1_scbbG
            ww2_scbbH
            ww3_scbbI
            ww4_scbbJ
            ww5_scbbK
            ds_Xc9gq;
        'v'# ->
          Text.Printf.$wformatIntegral
            Text.Printf.formatChar1
            (case w_scbbB of { GHC.Types.C# c#_i8rxX ->
             integer-simple-0.1.1.1:GHC.Integer.Type.smallInteger
               (GHC.Prim.ord# c#_i8rxX)
             })
            ww_scbbF
            ww1_scbbG
            ww2_scbbH
            ww3_scbbI
            ww4_scbbJ
            ww5_scbbK
            'c'#
      }

-- RHS size: {terms: 17, types: 16, coercions: 0, joins: 0/0}
formatChar [InlPrag=NOUSERINLINE[0]] :: Char -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,1*U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scbbB [Occ=Once] :: Char)
                 (w1_scbbC [Occ=Once!] :: FieldFormat) ->
                 case w1_scbbC of
                 { FieldFormat ww1_scbbF [Occ=Once] ww2_scbbG [Occ=Once]
                               ww3_scbbH [Occ=Once] ww4_scbbI [Occ=Once] ww5_scbbJ [Occ=Once]
                               ww6_scbbK [Occ=Once] ww7_scbbL [Occ=Once!] ->
                 case ww7_scbbL of { GHC.Types.C# ww9_scbbO [Occ=Once] ->
                 Text.Printf.$wformatChar
                   w_scbbB
                   ww1_scbbF
                   ww2_scbbG
                   ww3_scbbH
                   ww4_scbbI
                   ww5_scbbJ
                   ww6_scbbK
                   ww9_scbbO
                 }
                 }}]
formatChar
  = \ (w_scbbB :: Char) (w1_scbbC :: FieldFormat) ->
      case w1_scbbC of
      { FieldFormat ww1_scbbF ww2_scbbG ww3_scbbH ww4_scbbI ww5_scbbJ
                    ww6_scbbK ww7_scbbL ->
      case ww7_scbbL of { GHC.Types.C# ww9_scbbO ->
      Text.Printf.$wformatChar
        w_scbbB
        ww1_scbbF
        ww2_scbbG
        ww3_scbbH
        ww4_scbbI
        ww5_scbbJ
        ww6_scbbK
        ww9_scbbO
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgChar [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Char
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Char
                               formatChar
                               Text.Printf.$fPrintfArgChar_$cparseFormat]
Text.Printf.$fPrintfArgChar
  = Text.Printf.C:PrintfArg
      @ Char formatChar Text.Printf.$fPrintfArgChar_$cparseFormat

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgWord1 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$fPrintfArgWord1 = GHC.Types.C# 'u'#

-- RHS size: {terms: 64, types: 48, coercions: 0, joins: 1/1}
Text.Printf.$w$sformatInt3 [InlPrag=NOUSERINLINE[0]]
  :: Word64
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> Maybe FormatSign
     -> Bool
     -> String
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 30 46] 272 0}]
Text.Printf.$w$sformatInt3
  = \ (w_scbbS :: Word64)
      (ww_scbbW :: Maybe Int)
      (ww1_scbbX :: Maybe Int)
      (ww2_scbbY :: Maybe FormatAdjustment)
      (ww3_scbbZ :: Maybe FormatSign)
      (ww4_scbc0 :: Bool)
      (ww5_scbc1 :: String)
      (ww6_scbc5 :: GHC.Prim.Char#) ->
      join {
        $j_scbjD [Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
          :: Maybe Int
             -> Maybe Int
             -> Maybe FormatAdjustment
             -> Maybe FormatSign
             -> Bool
             -> String
             -> Char
             -> ShowS
        [LclId[JoinId(7)],
         Arity=7,
         Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
         Unf=OtherCon []]
        $j_scbjD (ww7_scbbo [OS=OneShot] :: Maybe Int)
                 (ww8_scbbp [OS=OneShot] :: Maybe Int)
                 (ww9_scbbq [OS=OneShot] :: Maybe FormatAdjustment)
                 (ww10_scbbr [OS=OneShot] :: Maybe FormatSign)
                 (ww11_scbbs [OS=OneShot] :: Bool)
                 (ww12_scbbt [OS=OneShot] :: String)
                 (ww13_scbbu [OS=OneShot] :: Char)
          = case ww13_scbbu of { GHC.Types.C# ww15_scbbx ->
            Text.Printf.$wformatIntegral
              (case ww5_scbc1 of wild_X4S {
                 [] -> Text.Printf.formatChar1;
                 : ipv_sc9p3 ipv1_sc9p4 ->
                   case lookup
                          @ String
                          @ Integer
                          GHC.Classes.$fEq[]_$s$fEq[]1
                          wild_X4S
                          intModifierMap
                   of wild1_X1B {
                     Nothing -> Text.Printf.$fPrintfArgInt2;
                     Just m0_ac8rH -> wild1_X1B
                   }
               })
              (GHC.Word.$fIntegralWord64_$ctoInteger w_scbbS)
              ww7_scbbo
              ww8_scbbp
              ww9_scbbq
              ww10_scbbr
              ww11_scbbs
              ww12_scbbt
              ww15_scbbx
            } } in
      case ww6_scbc5 of ds_Xc9gq {
        __DEFAULT ->
          jump $j_scbjD
            ww_scbbW
            ww1_scbbX
            ww2_scbbY
            ww3_scbbZ
            ww4_scbc0
            ww5_scbc1
            (GHC.Types.C# ds_Xc9gq);
        'v'# ->
          jump $j_scbjD
            ww_scbbW
            ww1_scbbX
            ww2_scbbY
            ww3_scbbZ
            ww4_scbc0
            ww5_scbc1
            Text.Printf.$fPrintfArgWord1
      }

-- RHS size: {terms: 17, types: 16, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgWord64_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: Word64 -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scbbS [Occ=Once] :: Word64)
                 (w1_scbbT [Occ=Once!] :: FieldFormat) ->
                 case w1_scbbT of
                 { FieldFormat ww1_scbbW [Occ=Once] ww2_scbbX [Occ=Once]
                               ww3_scbbY [Occ=Once] ww4_scbbZ [Occ=Once] ww5_scbc0 [Occ=Once]
                               ww6_scbc1 [Occ=Once] ww7_scbc2 [Occ=Once!] ->
                 case ww7_scbc2 of { GHC.Types.C# ww9_scbc5 [Occ=Once] ->
                 Text.Printf.$w$sformatInt3
                   w_scbbS
                   ww1_scbbW
                   ww2_scbbX
                   ww3_scbbY
                   ww4_scbbZ
                   ww5_scbc0
                   ww6_scbc1
                   ww9_scbc5
                 }
                 }}]
Text.Printf.$fPrintfArgWord64_$sformatInt
  = \ (w_scbbS :: Word64) (w1_scbbT :: FieldFormat) ->
      case w1_scbbT of
      { FieldFormat ww1_scbbW ww2_scbbX ww3_scbbY ww4_scbbZ ww5_scbc0
                    ww6_scbc1 ww7_scbc2 ->
      case ww7_scbc2 of { GHC.Types.C# ww9_scbc5 ->
      Text.Printf.$w$sformatInt3
        w_scbbS
        ww1_scbbW
        ww2_scbbX
        ww3_scbbY
        ww4_scbbZ
        ww5_scbc0
        ww6_scbc1
        ww9_scbc5
      }
      }

-- RHS size: {terms: 64, types: 48, coercions: 0, joins: 1/1}
Text.Printf.$w$sformatInt2 [InlPrag=NOUSERINLINE[0]]
  :: Word32
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> Maybe FormatSign
     -> Bool
     -> String
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 30 46] 272 0}]
Text.Printf.$w$sformatInt2
  = \ (w_scbc9 :: Word32)
      (ww_scbcd :: Maybe Int)
      (ww1_scbce :: Maybe Int)
      (ww2_scbcf :: Maybe FormatAdjustment)
      (ww3_scbcg :: Maybe FormatSign)
      (ww4_scbch :: Bool)
      (ww5_scbci :: String)
      (ww6_scbcm :: GHC.Prim.Char#) ->
      join {
        $j_scbjN [Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
          :: Maybe Int
             -> Maybe Int
             -> Maybe FormatAdjustment
             -> Maybe FormatSign
             -> Bool
             -> String
             -> Char
             -> ShowS
        [LclId[JoinId(7)],
         Arity=7,
         Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
         Unf=OtherCon []]
        $j_scbjN (ww7_scbbo [OS=OneShot] :: Maybe Int)
                 (ww8_scbbp [OS=OneShot] :: Maybe Int)
                 (ww9_scbbq [OS=OneShot] :: Maybe FormatAdjustment)
                 (ww10_scbbr [OS=OneShot] :: Maybe FormatSign)
                 (ww11_scbbs [OS=OneShot] :: Bool)
                 (ww12_scbbt [OS=OneShot] :: String)
                 (ww13_scbbu [OS=OneShot] :: Char)
          = case ww13_scbbu of { GHC.Types.C# ww15_scbbx ->
            Text.Printf.$wformatIntegral
              (case ww5_scbci of wild_X4S {
                 [] -> Text.Printf.formatChar1;
                 : ipv_sc9p3 ipv1_sc9p4 ->
                   case lookup
                          @ String
                          @ Integer
                          GHC.Classes.$fEq[]_$s$fEq[]1
                          wild_X4S
                          intModifierMap
                   of wild1_X1B {
                     Nothing -> Text.Printf.$fPrintfArgInt2;
                     Just m0_ac8rH -> wild1_X1B
                   }
               })
              (GHC.Word.$ctoInteger2 w_scbc9)
              ww7_scbbo
              ww8_scbbp
              ww9_scbbq
              ww10_scbbr
              ww11_scbbs
              ww12_scbbt
              ww15_scbbx
            } } in
      case ww6_scbcm of ds_Xc9gq {
        __DEFAULT ->
          jump $j_scbjN
            ww_scbcd
            ww1_scbce
            ww2_scbcf
            ww3_scbcg
            ww4_scbch
            ww5_scbci
            (GHC.Types.C# ds_Xc9gq);
        'v'# ->
          jump $j_scbjN
            ww_scbcd
            ww1_scbce
            ww2_scbcf
            ww3_scbcg
            ww4_scbch
            ww5_scbci
            Text.Printf.$fPrintfArgWord1
      }

-- RHS size: {terms: 17, types: 16, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgWord32_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: Word32 -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scbc9 [Occ=Once] :: Word32)
                 (w1_scbca [Occ=Once!] :: FieldFormat) ->
                 case w1_scbca of
                 { FieldFormat ww1_scbcd [Occ=Once] ww2_scbce [Occ=Once]
                               ww3_scbcf [Occ=Once] ww4_scbcg [Occ=Once] ww5_scbch [Occ=Once]
                               ww6_scbci [Occ=Once] ww7_scbcj [Occ=Once!] ->
                 case ww7_scbcj of { GHC.Types.C# ww9_scbcm [Occ=Once] ->
                 Text.Printf.$w$sformatInt2
                   w_scbc9
                   ww1_scbcd
                   ww2_scbce
                   ww3_scbcf
                   ww4_scbcg
                   ww5_scbch
                   ww6_scbci
                   ww9_scbcm
                 }
                 }}]
Text.Printf.$fPrintfArgWord32_$sformatInt
  = \ (w_scbc9 :: Word32) (w1_scbca :: FieldFormat) ->
      case w1_scbca of
      { FieldFormat ww1_scbcd ww2_scbce ww3_scbcf ww4_scbcg ww5_scbch
                    ww6_scbci ww7_scbcj ->
      case ww7_scbcj of { GHC.Types.C# ww9_scbcm ->
      Text.Printf.$w$sformatInt2
        w_scbc9
        ww1_scbcd
        ww2_scbce
        ww3_scbcf
        ww4_scbcg
        ww5_scbch
        ww6_scbci
        ww9_scbcm
      }
      }

-- RHS size: {terms: 64, types: 48, coercions: 0, joins: 1/1}
Text.Printf.$w$sformatInt1 [InlPrag=NOUSERINLINE[0]]
  :: Word16
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> Maybe FormatSign
     -> Bool
     -> String
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 30 46] 272 0}]
Text.Printf.$w$sformatInt1
  = \ (w_scbcq :: Word16)
      (ww_scbcu :: Maybe Int)
      (ww1_scbcv :: Maybe Int)
      (ww2_scbcw :: Maybe FormatAdjustment)
      (ww3_scbcx :: Maybe FormatSign)
      (ww4_scbcy :: Bool)
      (ww5_scbcz :: String)
      (ww6_scbcD :: GHC.Prim.Char#) ->
      join {
        $j_scbjX [Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
          :: Maybe Int
             -> Maybe Int
             -> Maybe FormatAdjustment
             -> Maybe FormatSign
             -> Bool
             -> String
             -> Char
             -> ShowS
        [LclId[JoinId(7)],
         Arity=7,
         Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
         Unf=OtherCon []]
        $j_scbjX (ww7_scbbo [OS=OneShot] :: Maybe Int)
                 (ww8_scbbp [OS=OneShot] :: Maybe Int)
                 (ww9_scbbq [OS=OneShot] :: Maybe FormatAdjustment)
                 (ww10_scbbr [OS=OneShot] :: Maybe FormatSign)
                 (ww11_scbbs [OS=OneShot] :: Bool)
                 (ww12_scbbt [OS=OneShot] :: String)
                 (ww13_scbbu [OS=OneShot] :: Char)
          = case ww13_scbbu of { GHC.Types.C# ww15_scbbx ->
            Text.Printf.$wformatIntegral
              (case ww5_scbcz of wild_X4S {
                 [] -> Text.Printf.formatChar1;
                 : ipv_sc9p3 ipv1_sc9p4 ->
                   case lookup
                          @ String
                          @ Integer
                          GHC.Classes.$fEq[]_$s$fEq[]1
                          wild_X4S
                          intModifierMap
                   of wild1_X1B {
                     Nothing -> Text.Printf.$fPrintfArgInt2;
                     Just m0_ac8rH -> wild1_X1B
                   }
               })
              (GHC.Word.$ctoInteger1 w_scbcq)
              ww7_scbbo
              ww8_scbbp
              ww9_scbbq
              ww10_scbbr
              ww11_scbbs
              ww12_scbbt
              ww15_scbbx
            } } in
      case ww6_scbcD of ds_Xc9gq {
        __DEFAULT ->
          jump $j_scbjX
            ww_scbcu
            ww1_scbcv
            ww2_scbcw
            ww3_scbcx
            ww4_scbcy
            ww5_scbcz
            (GHC.Types.C# ds_Xc9gq);
        'v'# ->
          jump $j_scbjX
            ww_scbcu
            ww1_scbcv
            ww2_scbcw
            ww3_scbcx
            ww4_scbcy
            ww5_scbcz
            Text.Printf.$fPrintfArgWord1
      }

-- RHS size: {terms: 17, types: 16, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgWord16_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: Word16 -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scbcq [Occ=Once] :: Word16)
                 (w1_scbcr [Occ=Once!] :: FieldFormat) ->
                 case w1_scbcr of
                 { FieldFormat ww1_scbcu [Occ=Once] ww2_scbcv [Occ=Once]
                               ww3_scbcw [Occ=Once] ww4_scbcx [Occ=Once] ww5_scbcy [Occ=Once]
                               ww6_scbcz [Occ=Once] ww7_scbcA [Occ=Once!] ->
                 case ww7_scbcA of { GHC.Types.C# ww9_scbcD [Occ=Once] ->
                 Text.Printf.$w$sformatInt1
                   w_scbcq
                   ww1_scbcu
                   ww2_scbcv
                   ww3_scbcw
                   ww4_scbcx
                   ww5_scbcy
                   ww6_scbcz
                   ww9_scbcD
                 }
                 }}]
Text.Printf.$fPrintfArgWord16_$sformatInt
  = \ (w_scbcq :: Word16) (w1_scbcr :: FieldFormat) ->
      case w1_scbcr of
      { FieldFormat ww1_scbcu ww2_scbcv ww3_scbcw ww4_scbcx ww5_scbcy
                    ww6_scbcz ww7_scbcA ->
      case ww7_scbcA of { GHC.Types.C# ww9_scbcD ->
      Text.Printf.$w$sformatInt1
        w_scbcq
        ww1_scbcu
        ww2_scbcv
        ww3_scbcw
        ww4_scbcx
        ww5_scbcy
        ww6_scbcz
        ww9_scbcD
      }
      }

-- RHS size: {terms: 64, types: 48, coercions: 0, joins: 1/1}
Text.Printf.$w$sformatInt4 [InlPrag=NOUSERINLINE[0]]
  :: Word8
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> Maybe FormatSign
     -> Bool
     -> String
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 30 46] 272 0}]
Text.Printf.$w$sformatInt4
  = \ (w_scbcH :: Word8)
      (ww_scbcL :: Maybe Int)
      (ww1_scbcM :: Maybe Int)
      (ww2_scbcN :: Maybe FormatAdjustment)
      (ww3_scbcO :: Maybe FormatSign)
      (ww4_scbcP :: Bool)
      (ww5_scbcQ :: String)
      (ww6_scbcU :: GHC.Prim.Char#) ->
      join {
        $j_scbk7 [Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
          :: Maybe Int
             -> Maybe Int
             -> Maybe FormatAdjustment
             -> Maybe FormatSign
             -> Bool
             -> String
             -> Char
             -> ShowS
        [LclId[JoinId(7)],
         Arity=7,
         Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
         Unf=OtherCon []]
        $j_scbk7 (ww7_scbbo [OS=OneShot] :: Maybe Int)
                 (ww8_scbbp [OS=OneShot] :: Maybe Int)
                 (ww9_scbbq [OS=OneShot] :: Maybe FormatAdjustment)
                 (ww10_scbbr [OS=OneShot] :: Maybe FormatSign)
                 (ww11_scbbs [OS=OneShot] :: Bool)
                 (ww12_scbbt [OS=OneShot] :: String)
                 (ww13_scbbu [OS=OneShot] :: Char)
          = case ww13_scbbu of { GHC.Types.C# ww15_scbbx ->
            Text.Printf.$wformatIntegral
              (case ww5_scbcQ of wild_X4S {
                 [] -> Text.Printf.formatChar1;
                 : ipv_sc9p3 ipv1_sc9p4 ->
                   case lookup
                          @ String
                          @ Integer
                          GHC.Classes.$fEq[]_$s$fEq[]1
                          wild_X4S
                          intModifierMap
                   of wild1_X1B {
                     Nothing -> Text.Printf.$fPrintfArgInt2;
                     Just m0_ac8rH -> wild1_X1B
                   }
               })
              (GHC.Word.$ctoInteger w_scbcH)
              ww7_scbbo
              ww8_scbbp
              ww9_scbbq
              ww10_scbbr
              ww11_scbbs
              ww12_scbbt
              ww15_scbbx
            } } in
      case ww6_scbcU of ds_Xc9gq {
        __DEFAULT ->
          jump $j_scbk7
            ww_scbcL
            ww1_scbcM
            ww2_scbcN
            ww3_scbcO
            ww4_scbcP
            ww5_scbcQ
            (GHC.Types.C# ds_Xc9gq);
        'v'# ->
          jump $j_scbk7
            ww_scbcL
            ww1_scbcM
            ww2_scbcN
            ww3_scbcO
            ww4_scbcP
            ww5_scbcQ
            Text.Printf.$fPrintfArgWord1
      }

-- RHS size: {terms: 17, types: 16, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgWord8_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: Word8 -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scbcH [Occ=Once] :: Word8)
                 (w1_scbcI [Occ=Once!] :: FieldFormat) ->
                 case w1_scbcI of
                 { FieldFormat ww1_scbcL [Occ=Once] ww2_scbcM [Occ=Once]
                               ww3_scbcN [Occ=Once] ww4_scbcO [Occ=Once] ww5_scbcP [Occ=Once]
                               ww6_scbcQ [Occ=Once] ww7_scbcR [Occ=Once!] ->
                 case ww7_scbcR of { GHC.Types.C# ww9_scbcU [Occ=Once] ->
                 Text.Printf.$w$sformatInt4
                   w_scbcH
                   ww1_scbcL
                   ww2_scbcM
                   ww3_scbcN
                   ww4_scbcO
                   ww5_scbcP
                   ww6_scbcQ
                   ww9_scbcU
                 }
                 }}]
Text.Printf.$fPrintfArgWord8_$sformatInt
  = \ (w_scbcH :: Word8) (w1_scbcI :: FieldFormat) ->
      case w1_scbcI of
      { FieldFormat ww1_scbcL ww2_scbcM ww3_scbcN ww4_scbcO ww5_scbcP
                    ww6_scbcQ ww7_scbcR ->
      case ww7_scbcR of { GHC.Types.C# ww9_scbcU ->
      Text.Printf.$w$sformatInt4
        w_scbcH
        ww1_scbcL
        ww2_scbcM
        ww3_scbcN
        ww4_scbcO
        ww5_scbcP
        ww6_scbcQ
        ww9_scbcU
      }
      }

-- RHS size: {terms: 64, types: 48, coercions: 0, joins: 1/1}
Text.Printf.$w$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: Word
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> Maybe FormatSign
     -> Bool
     -> String
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(1*U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 30 46] 272 0}]
Text.Printf.$w$sformatInt
  = \ (w_scbcY :: Word)
      (ww_scbd2 :: Maybe Int)
      (ww1_scbd3 :: Maybe Int)
      (ww2_scbd4 :: Maybe FormatAdjustment)
      (ww3_scbd5 :: Maybe FormatSign)
      (ww4_scbd6 :: Bool)
      (ww5_scbd7 :: String)
      (ww6_scbdb :: GHC.Prim.Char#) ->
      join {
        $j_scbkh [Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
          :: Maybe Int
             -> Maybe Int
             -> Maybe FormatAdjustment
             -> Maybe FormatSign
             -> Bool
             -> String
             -> Char
             -> ShowS
        [LclId[JoinId(7)],
         Arity=7,
         Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
         Unf=OtherCon []]
        $j_scbkh (ww7_scbbo [OS=OneShot] :: Maybe Int)
                 (ww8_scbbp [OS=OneShot] :: Maybe Int)
                 (ww9_scbbq [OS=OneShot] :: Maybe FormatAdjustment)
                 (ww10_scbbr [OS=OneShot] :: Maybe FormatSign)
                 (ww11_scbbs [OS=OneShot] :: Bool)
                 (ww12_scbbt [OS=OneShot] :: String)
                 (ww13_scbbu [OS=OneShot] :: Char)
          = case ww13_scbbu of { GHC.Types.C# ww15_scbbx ->
            Text.Printf.$wformatIntegral
              (case ww5_scbd7 of wild_X4S {
                 [] -> Text.Printf.formatChar1;
                 : ipv_sc9p3 ipv1_sc9p4 ->
                   case lookup
                          @ String
                          @ Integer
                          GHC.Classes.$fEq[]_$s$fEq[]1
                          wild_X4S
                          intModifierMap
                   of wild1_X1B {
                     Nothing -> Text.Printf.$fPrintfArgInt2;
                     Just m0_ac8rH -> wild1_X1B
                   }
               })
              (GHC.Real.$fIntegralWord_$ctoInteger w_scbcY)
              ww7_scbbo
              ww8_scbbp
              ww9_scbbq
              ww10_scbbr
              ww11_scbbs
              ww12_scbbt
              ww15_scbbx
            } } in
      case ww6_scbdb of ds_Xc9gq {
        __DEFAULT ->
          jump $j_scbkh
            ww_scbd2
            ww1_scbd3
            ww2_scbd4
            ww3_scbd5
            ww4_scbd6
            ww5_scbd7
            (GHC.Types.C# ds_Xc9gq);
        'v'# ->
          jump $j_scbkh
            ww_scbd2
            ww1_scbd3
            ww2_scbd4
            ww3_scbd5
            ww4_scbd6
            ww5_scbd7
            Text.Printf.$fPrintfArgWord1
      }

-- RHS size: {terms: 17, types: 16, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgWord_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: Word -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(1*U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scbcY [Occ=Once] :: Word)
                 (w1_scbcZ [Occ=Once!] :: FieldFormat) ->
                 case w1_scbcZ of
                 { FieldFormat ww1_scbd2 [Occ=Once] ww2_scbd3 [Occ=Once]
                               ww3_scbd4 [Occ=Once] ww4_scbd5 [Occ=Once] ww5_scbd6 [Occ=Once]
                               ww6_scbd7 [Occ=Once] ww7_scbd8 [Occ=Once!] ->
                 case ww7_scbd8 of { GHC.Types.C# ww9_scbdb [Occ=Once] ->
                 Text.Printf.$w$sformatInt
                   w_scbcY
                   ww1_scbd2
                   ww2_scbd3
                   ww3_scbd4
                   ww4_scbd5
                   ww5_scbd6
                   ww6_scbd7
                   ww9_scbdb
                 }
                 }}]
Text.Printf.$fPrintfArgWord_$sformatInt
  = \ (w_scbcY :: Word) (w1_scbcZ :: FieldFormat) ->
      case w1_scbcZ of
      { FieldFormat ww1_scbd2 ww2_scbd3 ww3_scbd4 ww4_scbd5 ww5_scbd6
                    ww6_scbd7 ww7_scbd8 ->
      case ww7_scbd8 of { GHC.Types.C# ww9_scbdb ->
      Text.Printf.$w$sformatInt
        w_scbcY
        ww1_scbd2
        ww2_scbd3
        ww3_scbd4
        ww4_scbd5
        ww5_scbd6
        ww6_scbd7
        ww9_scbdb
      }
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt1 :: Maybe Integer
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$fPrintfArgInt1
  = GHC.Base.Just @ Integer Text.Printf.$fPrintfArgChar7

-- RHS size: {terms: 32, types: 26, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt64_$sformatInt :: Int64 -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ac8rI [Occ=Once] :: Int64)
                 (ufmt_ac8rJ :: FieldFormat) ->
                 formatIntegral
                   (fixupMods ufmt_ac8rJ Text.Printf.$fPrintfArgInt1)
                   (GHC.Int.$fIntegralInt64_$ctoInteger x_ac8rI)
                   ufmt_ac8rJ}]
Text.Printf.$fPrintfArgInt64_$sformatInt
  = \ (x_ac8rI :: Int64) (ufmt_ac8rJ :: FieldFormat) ->
      case ufmt_ac8rJ of
      { FieldFormat ww1_scbbo ww2_scbbp ww3_scbbq ww4_scbbr ww5_scbbs
                    ww6_scbbt ww7_scbbu ->
      case ww7_scbbu of { GHC.Types.C# ww9_scbbx ->
      Text.Printf.$wformatIntegral
        (case ww6_scbbt of wild_X4S {
           [] -> Text.Printf.$fPrintfArgInt1;
           : ipv_sc9p3 ipv1_sc9p4 ->
             case lookup
                    @ String
                    @ Integer
                    GHC.Classes.$fEq[]_$s$fEq[]1
                    wild_X4S
                    intModifierMap
             of wild1_X1B {
               Nothing -> Text.Printf.$fPrintfArgInt2;
               Just m0_ac8rH -> wild1_X1B
             }
         })
        (GHC.Int.$fIntegralInt64_$ctoInteger x_ac8rI)
        ww1_scbbo
        ww2_scbbp
        ww3_scbbq
        ww4_scbbr
        ww5_scbbs
        ww6_scbbt
        ww9_scbbx
      }
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt4 :: Maybe Integer
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$fPrintfArgInt4
  = GHC.Base.Just @ Integer Text.Printf.$fPrintfArgChar14

-- RHS size: {terms: 32, types: 26, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt32_$sformatInt :: Int32 -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ac8rI [Occ=Once] :: Int32)
                 (ufmt_ac8rJ :: FieldFormat) ->
                 formatIntegral
                   (fixupMods ufmt_ac8rJ Text.Printf.$fPrintfArgInt4)
                   (GHC.Int.$fIntegralInt32_$ctoInteger x_ac8rI)
                   ufmt_ac8rJ}]
Text.Printf.$fPrintfArgInt32_$sformatInt
  = \ (x_ac8rI :: Int32) (ufmt_ac8rJ :: FieldFormat) ->
      case ufmt_ac8rJ of
      { FieldFormat ww1_scbbo ww2_scbbp ww3_scbbq ww4_scbbr ww5_scbbs
                    ww6_scbbt ww7_scbbu ->
      case ww7_scbbu of { GHC.Types.C# ww9_scbbx ->
      Text.Printf.$wformatIntegral
        (case ww6_scbbt of wild_X4S {
           [] -> Text.Printf.$fPrintfArgInt4;
           : ipv_sc9p3 ipv1_sc9p4 ->
             case lookup
                    @ String
                    @ Integer
                    GHC.Classes.$fEq[]_$s$fEq[]1
                    wild_X4S
                    intModifierMap
             of wild1_X1B {
               Nothing -> Text.Printf.$fPrintfArgInt2;
               Just m0_ac8rH -> wild1_X1B
             }
         })
        (GHC.Int.$fIntegralInt32_$ctoInteger x_ac8rI)
        ww1_scbbo
        ww2_scbbp
        ww3_scbbq
        ww4_scbbr
        ww5_scbbs
        ww6_scbbt
        ww9_scbbx
      }
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt3 :: Maybe Integer
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$fPrintfArgInt3
  = GHC.Base.Just @ Integer Text.Printf.$fPrintfArgChar18

-- RHS size: {terms: 32, types: 26, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt16_$sformatInt :: Int16 -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ac8rI [Occ=Once] :: Int16)
                 (ufmt_ac8rJ :: FieldFormat) ->
                 formatIntegral
                   (fixupMods ufmt_ac8rJ Text.Printf.$fPrintfArgInt3)
                   (GHC.Int.$fIntegralInt16_$ctoInteger x_ac8rI)
                   ufmt_ac8rJ}]
Text.Printf.$fPrintfArgInt16_$sformatInt
  = \ (x_ac8rI :: Int16) (ufmt_ac8rJ :: FieldFormat) ->
      case ufmt_ac8rJ of
      { FieldFormat ww1_scbbo ww2_scbbp ww3_scbbq ww4_scbbr ww5_scbbs
                    ww6_scbbt ww7_scbbu ->
      case ww7_scbbu of { GHC.Types.C# ww9_scbbx ->
      Text.Printf.$wformatIntegral
        (case ww6_scbbt of wild_X4S {
           [] -> Text.Printf.$fPrintfArgInt3;
           : ipv_sc9p3 ipv1_sc9p4 ->
             case lookup
                    @ String
                    @ Integer
                    GHC.Classes.$fEq[]_$s$fEq[]1
                    wild_X4S
                    intModifierMap
             of wild1_X1B {
               Nothing -> Text.Printf.$fPrintfArgInt2;
               Just m0_ac8rH -> wild1_X1B
             }
         })
        (GHC.Int.$fIntegralInt16_$ctoInteger x_ac8rI)
        ww1_scbbo
        ww2_scbbp
        ww3_scbbq
        ww4_scbbr
        ww5_scbbs
        ww6_scbbt
        ww9_scbbx
      }
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt5 :: Maybe Integer
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Printf.$fPrintfArgInt5
  = GHC.Base.Just @ Integer Text.Printf.$fPrintfArgChar22

-- RHS size: {terms: 32, types: 26, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt8_$sformatInt :: Int8 -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ac8rI [Occ=Once] :: Int8) (ufmt_ac8rJ :: FieldFormat) ->
                 formatIntegral
                   (fixupMods ufmt_ac8rJ Text.Printf.$fPrintfArgInt5)
                   (GHC.Int.$fIntegralInt8_$ctoInteger x_ac8rI)
                   ufmt_ac8rJ}]
Text.Printf.$fPrintfArgInt8_$sformatInt
  = \ (x_ac8rI :: Int8) (ufmt_ac8rJ :: FieldFormat) ->
      case ufmt_ac8rJ of
      { FieldFormat ww1_scbbo ww2_scbbp ww3_scbbq ww4_scbbr ww5_scbbs
                    ww6_scbbt ww7_scbbu ->
      case ww7_scbbu of { GHC.Types.C# ww9_scbbx ->
      Text.Printf.$wformatIntegral
        (case ww6_scbbt of wild_X4S {
           [] -> Text.Printf.$fPrintfArgInt5;
           : ipv_sc9p3 ipv1_sc9p4 ->
             case lookup
                    @ String
                    @ Integer
                    GHC.Classes.$fEq[]_$s$fEq[]1
                    wild_X4S
                    intModifierMap
             of wild1_X1B {
               Nothing -> Text.Printf.$fPrintfArgInt2;
               Just m0_ac8rH -> wild1_X1B
             }
         })
        (GHC.Int.$fIntegralInt8_$ctoInteger x_ac8rI)
        ww1_scbbo
        ww2_scbbp
        ww3_scbbq
        ww4_scbbr
        ww5_scbbs
        ww6_scbbt
        ww9_scbbx
      }
      }

-- RHS size: {terms: 32, types: 26, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt_$sformatInt :: Int -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ac8rI [Occ=Once] :: Int) (ufmt_ac8rJ :: FieldFormat) ->
                 formatIntegral
                   (fixupMods ufmt_ac8rJ Text.Printf.$fPrintfArgInt1)
                   (GHC.Real.$fIntegralInt_$ctoInteger x_ac8rI)
                   ufmt_ac8rJ}]
Text.Printf.$fPrintfArgInt_$sformatInt
  = \ (x_ac8rI :: Int) (ufmt_ac8rJ :: FieldFormat) ->
      case ufmt_ac8rJ of
      { FieldFormat ww1_scbbo ww2_scbbp ww3_scbbq ww4_scbbr ww5_scbbs
                    ww6_scbbt ww7_scbbu ->
      case ww7_scbbu of { GHC.Types.C# ww9_scbbx ->
      Text.Printf.$wformatIntegral
        (case ww6_scbbt of wild_X4S {
           [] -> Text.Printf.$fPrintfArgInt1;
           : ipv_sc9p3 ipv1_sc9p4 ->
             case lookup
                    @ String
                    @ Integer
                    GHC.Classes.$fEq[]_$s$fEq[]1
                    wild_X4S
                    intModifierMap
             of wild1_X1B {
               Nothing -> Text.Printf.$fPrintfArgInt2;
               Just m0_ac8rH -> wild1_X1B
             }
         })
        (GHC.Real.$fIntegralInt_$ctoInteger x_ac8rI)
        ww1_scbbo
        ww2_scbbp
        ww3_scbbq
        ww4_scbbr
        ww5_scbbs
        ww6_scbbt
        ww9_scbbx
      }
      }

-- RHS size: {terms: 89, types: 60, coercions: 0, joins: 1/2}
Text.Printf.$wformatInt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (Integral a, Bounded a) =>
     a
     -> Maybe Int
     -> Maybe Int
     -> Maybe FormatAdjustment
     -> Maybe FormatSign
     -> Bool
     -> String
     -> GHC.Prim.Char#
     -> ShowS
[GblId,
 Arity=10,
 Str=<S(LLLLLLLLC(S)),U(A,A,A,A,A,A,A,A,C(U))><L,1*U(1*U,A)><L,U><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [60 30 0 0 0 0 0 0 40 46] 428 0}]
Text.Printf.$wformatInt
  = \ (@ a_scbdf)
      (w_scbdg :: Integral a_scbdf)
      (w1_scbdh :: Bounded a_scbdf)
      (w2_scbdi :: a_scbdf)
      (ww_scbdm :: Maybe Int)
      (ww1_scbdn :: Maybe Int)
      (ww2_scbdo :: Maybe FormatAdjustment)
      (ww3_scbdp :: Maybe FormatSign)
      (ww4_scbdq :: Bool)
      (ww5_scbdr :: String)
      (ww6_scbdv :: GHC.Prim.Char#) ->
      let {
        lb_sc9K3 [Dmd=<S,U>] :: Integer
        [LclId]
        lb_sc9K3
          = toInteger @ a_scbdf w_scbdg (minBound @ a_scbdf w1_scbdh) } in
      join {
        $j_scbkL [Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
          :: Maybe Int
             -> Maybe Int
             -> Maybe FormatAdjustment
             -> Maybe FormatSign
             -> Bool
             -> String
             -> Char
             -> ShowS
        [LclId[JoinId(7)],
         Arity=7,
         Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
         Unf=OtherCon []]
        $j_scbkL (ww7_scbbo [OS=OneShot] :: Maybe Int)
                 (ww8_scbbp [OS=OneShot] :: Maybe Int)
                 (ww9_scbbq [OS=OneShot] :: Maybe FormatAdjustment)
                 (ww10_scbbr [OS=OneShot] :: Maybe FormatSign)
                 (ww11_scbbs [OS=OneShot] :: Bool)
                 (ww12_scbbt [OS=OneShot] :: String)
                 (ww13_scbbu [OS=OneShot] :: Char)
          = case ww13_scbbu of { GHC.Types.C# ww15_scbbx ->
            Text.Printf.$wformatIntegral
              (case ww5_scbdr of wild_X4S {
                 [] -> GHC.Base.Just @ Integer lb_sc9K3;
                 : ipv_sc9p3 ipv1_sc9p4 ->
                   case lookup
                          @ String
                          @ Integer
                          GHC.Classes.$fEq[]_$s$fEq[]1
                          wild_X4S
                          intModifierMap
                   of wild1_X1B {
                     Nothing -> Text.Printf.$fPrintfArgInt2;
                     Just m0_ac8rH -> wild1_X1B
                   }
               })
              (toInteger @ a_scbdf w_scbdg w2_scbdi)
              ww7_scbbo
              ww8_scbbp
              ww9_scbbq
              ww10_scbbr
              ww11_scbbs
              ww12_scbbt
              ww15_scbbx
            } } in
      case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
             lb_sc9K3 Text.Printf.formatChar2
      of {
        __DEFAULT ->
          jump $j_scbkL
            ww_scbdm
            ww1_scbdn
            ww2_scbdo
            ww3_scbdp
            ww4_scbdq
            ww5_scbdr
            (GHC.Types.C# ww6_scbdv);
        1# ->
          case ww6_scbdv of ds_Xc9gq {
            __DEFAULT ->
              jump $j_scbkL
                ww_scbdm
                ww1_scbdn
                ww2_scbdo
                ww3_scbdp
                ww4_scbdq
                ww5_scbdr
                (GHC.Types.C# ds_Xc9gq);
            'v'# ->
              jump $j_scbkL
                ww_scbdm
                ww1_scbdn
                ww2_scbdo
                ww3_scbdp
                ww4_scbdq
                ww5_scbdr
                Text.Printf.$fPrintfArgWord1
          }
      }

-- RHS size: {terms: 22, types: 23, coercions: 0, joins: 0/0}
formatInt [InlPrag=NOUSERINLINE[0]]
  :: forall a. (Integral a, Bounded a) => a -> FieldFormatter
[GblId,
 Arity=4,
 Str=<S(LLLLLLLLC(S)),U(A,A,A,A,A,A,A,A,C(U))><L,1*U(1*U,A)><L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_scbdf)
                 (w_scbdg [Occ=Once] :: Integral a_scbdf)
                 (w1_scbdh [Occ=Once] :: Bounded a_scbdf)
                 (w2_scbdi [Occ=Once] :: a_scbdf)
                 (w3_scbdj [Occ=Once!] :: FieldFormat) ->
                 case w3_scbdj of
                 { FieldFormat ww1_scbdm [Occ=Once] ww2_scbdn [Occ=Once]
                               ww3_scbdo [Occ=Once] ww4_scbdp [Occ=Once] ww5_scbdq [Occ=Once]
                               ww6_scbdr [Occ=Once] ww7_scbds [Occ=Once!] ->
                 case ww7_scbds of { GHC.Types.C# ww9_scbdv [Occ=Once] ->
                 Text.Printf.$wformatInt
                   @ a_scbdf
                   w_scbdg
                   w1_scbdh
                   w2_scbdi
                   ww1_scbdm
                   ww2_scbdn
                   ww3_scbdo
                   ww4_scbdp
                   ww5_scbdq
                   ww6_scbdr
                   ww9_scbdv
                 }
                 }}]
formatInt
  = \ (@ a_scbdf)
      (w_scbdg :: Integral a_scbdf)
      (w1_scbdh :: Bounded a_scbdf)
      (w2_scbdi :: a_scbdf)
      (w3_scbdj :: FieldFormat) ->
      case w3_scbdj of
      { FieldFormat ww1_scbdm ww2_scbdn ww3_scbdo ww4_scbdp ww5_scbdq
                    ww6_scbdr ww7_scbds ->
      case ww7_scbds of { GHC.Types.C# ww9_scbdv ->
      Text.Printf.$wformatInt
        @ a_scbdf
        w_scbdg
        w1_scbdh
        w2_scbdi
        ww1_scbdm
        ww2_scbdn
        ww3_scbdo
        ww4_scbdp
        ww5_scbdq
        ww6_scbdr
        ww9_scbdv
      }
      }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Word64
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Word64
                               Text.Printf.$fPrintfArgWord64_$sformatInt
                               parseIntFormat @ Word64]
Text.Printf.$fPrintfArgWord64
  = Text.Printf.C:PrintfArg
      @ Word64
      Text.Printf.$fPrintfArgWord64_$sformatInt
      (parseIntFormat @ Word64)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Word32
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Word32
                               Text.Printf.$fPrintfArgWord32_$sformatInt
                               parseIntFormat @ Word32]
Text.Printf.$fPrintfArgWord32
  = Text.Printf.C:PrintfArg
      @ Word32
      Text.Printf.$fPrintfArgWord32_$sformatInt
      (parseIntFormat @ Word32)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Word16
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Word16
                               Text.Printf.$fPrintfArgWord16_$sformatInt
                               parseIntFormat @ Word16]
Text.Printf.$fPrintfArgWord16
  = Text.Printf.C:PrintfArg
      @ Word16
      Text.Printf.$fPrintfArgWord16_$sformatInt
      (parseIntFormat @ Word16)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Word8
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Word8
                               Text.Printf.$fPrintfArgWord8_$sformatInt
                               parseIntFormat @ Word8]
Text.Printf.$fPrintfArgWord8
  = Text.Printf.C:PrintfArg
      @ Word8
      Text.Printf.$fPrintfArgWord8_$sformatInt
      (parseIntFormat @ Word8)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgWord [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Word
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Word
                               Text.Printf.$fPrintfArgWord_$sformatInt
                               parseIntFormat @ Word]
Text.Printf.$fPrintfArgWord
  = Text.Printf.C:PrintfArg
      @ Word
      Text.Printf.$fPrintfArgWord_$sformatInt
      (parseIntFormat @ Word)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Int64
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Int64
                               Text.Printf.$fPrintfArgInt64_$sformatInt
                               parseIntFormat @ Int64]
Text.Printf.$fPrintfArgInt64
  = Text.Printf.C:PrintfArg
      @ Int64
      Text.Printf.$fPrintfArgInt64_$sformatInt
      (parseIntFormat @ Int64)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Int32
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Int32
                               Text.Printf.$fPrintfArgInt32_$sformatInt
                               parseIntFormat @ Int32]
Text.Printf.$fPrintfArgInt32
  = Text.Printf.C:PrintfArg
      @ Int32
      Text.Printf.$fPrintfArgInt32_$sformatInt
      (parseIntFormat @ Int32)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Int16
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Int16
                               Text.Printf.$fPrintfArgInt16_$sformatInt
                               parseIntFormat @ Int16]
Text.Printf.$fPrintfArgInt16
  = Text.Printf.C:PrintfArg
      @ Int16
      Text.Printf.$fPrintfArgInt16_$sformatInt
      (parseIntFormat @ Int16)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Int8
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Int8
                               Text.Printf.$fPrintfArgInt8_$sformatInt
                               parseIntFormat @ Int8]
Text.Printf.$fPrintfArgInt8
  = Text.Printf.C:PrintfArg
      @ Int8
      Text.Printf.$fPrintfArgInt8_$sformatInt
      (parseIntFormat @ Int8)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInt [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Int
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Int
                               Text.Printf.$fPrintfArgInt_$sformatInt
                               parseIntFormat @ Int]
Text.Printf.$fPrintfArgInt
  = Text.Printf.C:PrintfArg
      @ Int Text.Printf.$fPrintfArgInt_$sformatInt (parseIntFormat @ Int)

-- RHS size: {terms: 31, types: 27, coercions: 0, joins: 0/0}
formatInteger :: Integer -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ac8rN [Occ=Once] :: Integer)
                 (ufmt_ac8rO :: FieldFormat) ->
                 formatIntegral
                   (fixupMods ufmt_ac8rO (GHC.Base.Nothing @ Integer))
                   x_ac8rN
                   ufmt_ac8rO}]
formatInteger
  = \ (x_ac8rN :: Integer) (ufmt_ac8rO :: FieldFormat) ->
      case ufmt_ac8rO of
      { FieldFormat ww1_scbbo ww2_scbbp ww3_scbbq ww4_scbbr ww5_scbbs
                    ww6_scbbt ww7_scbbu ->
      case ww7_scbbu of { GHC.Types.C# ww9_scbbx ->
      Text.Printf.$wformatIntegral
        (case ww6_scbbt of wild_X4S {
           [] -> GHC.Base.Nothing @ Integer;
           : ipv_sc9p3 ipv1_sc9p4 ->
             case lookup
                    @ String
                    @ Integer
                    GHC.Classes.$fEq[]_$s$fEq[]1
                    wild_X4S
                    intModifierMap
             of wild1_X1B {
               Nothing -> Text.Printf.$fPrintfArgInt2;
               Just m0_ac8rH -> wild1_X1B
             }
         })
        x_ac8rN
        ww1_scbbo
        ww2_scbbp
        ww3_scbbq
        ww4_scbbr
        ww5_scbbs
        ww6_scbbt
        ww9_scbbx
      }
      }

-- RHS size: {terms: 31, types: 27, coercions: 1, joins: 0/0}
Text.Printf.$fPrintfArgNatural_$cformatArg
  :: Natural -> FieldFormatter
[GblId,
 Arity=2,
 Str=<L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Rxi [Occ=Once] :: Natural)
                 (ufmt_ac8rO :: FieldFormat) ->
                 formatIntegral
                   (fixupMods ufmt_ac8rO (GHC.Base.Nothing @ Integer))
                   (x_i7Rxi
                    `cast` (GHC.Natural.N:Natural[0]
                            :: (Natural :: *) ~R# (Integer :: *)))
                   ufmt_ac8rO}]
Text.Printf.$fPrintfArgNatural_$cformatArg
  = \ (x_i7Rxi :: Natural) (ufmt_ac8rO :: FieldFormat) ->
      case ufmt_ac8rO of
      { FieldFormat ww1_scbbo ww2_scbbp ww3_scbbq ww4_scbbr ww5_scbbs
                    ww6_scbbt ww7_scbbu ->
      case ww7_scbbu of { GHC.Types.C# ww9_scbbx ->
      Text.Printf.$wformatIntegral
        (case ww6_scbbt of wild_X4S {
           [] -> GHC.Base.Nothing @ Integer;
           : ipv_sc9p3 ipv1_sc9p4 ->
             case lookup
                    @ String
                    @ Integer
                    GHC.Classes.$fEq[]_$s$fEq[]1
                    wild_X4S
                    intModifierMap
             of wild1_X1B {
               Nothing -> Text.Printf.$fPrintfArgInt2;
               Just m0_ac8rH -> wild1_X1B
             }
         })
        (x_i7Rxi
         `cast` (GHC.Natural.N:Natural[0]
                 :: (Natural :: *) ~R# (Integer :: *)))
        ww1_scbbo
        ww2_scbbp
        ww3_scbbq
        ww4_scbbr
        ww5_scbbs
        ww6_scbbt
        ww9_scbbx
      }
      }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgNatural [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Natural
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Natural
                               Text.Printf.$fPrintfArgNatural_$cformatArg
                               parseIntFormat @ Natural]
Text.Printf.$fPrintfArgNatural
  = Text.Printf.C:PrintfArg
      @ Natural
      Text.Printf.$fPrintfArgNatural_$cformatArg
      (parseIntFormat @ Natural)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfArgInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: PrintfArg Integer
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Text.Printf.C:PrintfArg TYPE: Integer
                               formatInteger
                               parseIntFormat @ Integer]
Text.Printf.$fPrintfArgInteger
  = Text.Printf.C:PrintfArg
      @ Integer formatInteger (parseIntFormat @ Integer)

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
lvl42_rcccH :: Text.ParserCombinators.ReadP.P Int
[GblId]
lvl42_rcccH
  = GHC.Read.$fReadInt_$sreadNumber
      GHC.Read.$fReadInt2
      Text.ParserCombinators.ReadPrec.minPrec
      @ Int
      (Text.Read.readEither7 @ Int)

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
lvl43_rcccI :: FieldFormat
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl43_rcccI
  = Text.Printf.FieldFormat
      (GHC.Base.Nothing @ Int)
      (GHC.Base.Nothing @ Int)
      (GHC.Base.Nothing @ FormatAdjustment)
      (GHC.Base.Nothing @ FormatSign)
      GHC.Types.False
      (GHC.Types.[] @ Char)
      lvl23_rccco

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl44_rcccJ :: Int
[GblId, Str=x]
lvl44_rcccJ
  = errorWithoutStackTrace
      @ 'GHC.Types.LiftedRep @ Int Text.Read.readEither5

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl45_rcccK :: Int
[GblId, Str=x]
lvl45_rcccK
  = errorWithoutStackTrace
      @ 'GHC.Types.LiftedRep @ Int Text.Read.readEither2

-- RHS size: {terms: 28, types: 35, coercions: 0, joins: 0/0}
$wgetStar_rcccL :: [UPrintf] -> (# [UPrintf], Int #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
$wgetStar_rcccL
  = \ (w_scbdz :: [UPrintf]) ->
      case w_scbdz of {
        [] -> case errorMissingArgument of wild1_00 { };
        : ds_dc93T us'_ac8uH ->
          case ds_dc93T of { (ds1_dc93U, nu_ac8uG) ->
          (# us'_ac8uH,
             case Text.Read.readEither8
                    @ Int
                    (Text.ParserCombinators.ReadP.run
                       @ Int lvl42_rcccH (nu_ac8uG lvl43_rcccI (GHC.Types.[] @ Char)))
             of {
               [] -> lvl44_rcccJ;
               : x_ic3wM ds2_ic3wN ->
                 case ds2_ic3wN of {
                   [] -> x_ic3wM;
                   : ipv_ic3CS ipv1_ic3CT -> lvl45_rcccK
                 }
             } #)
          }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl46_rcccM :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl46_rcccM = GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl47_rcccN :: Maybe FormatAdjustment
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
lvl47_rcccN
  = GHC.Base.Just @ FormatAdjustment Text.Printf.LeftAdjust

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl48_rcccO :: Maybe FormatAdjustment
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
lvl48_rcccO = GHC.Base.Just @ FormatAdjustment Text.Printf.ZeroPad

-- RHS size: {terms: 28, types: 34, coercions: 0, joins: 0/0}
lvl49_rcccP :: (Int, String)
[GblId]
lvl49_rcccP
  = case GHC.List.$wspan @ Char isDigit (GHC.Types.[] @ Char) of
    { (# ww1_i8hm4, ww2_i8hm5 #) ->
    case ww1_i8hm4 of wild_Xje {
      [] -> (lvl46_rcccM, ww2_i8hm5);
      : ipv_sc9ty ipv1_sc9tA ->
        (case Text.Read.readEither8
                @ Int (Text.ParserCombinators.ReadP.run @ Int lvl42_rcccH wild_Xje)
         of {
           [] -> lvl44_rcccJ;
           : x_ic3wM ds_ic3wN ->
             case ds_ic3wN of {
               [] -> x_ic3wM;
               : ipv2_ic3CS ipv3_ic3CT -> lvl45_rcccK
             }
         },
         ww2_i8hm5)
    }
    }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl50_rcccQ :: Maybe FormatSign
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
lvl50_rcccQ = GHC.Base.Just @ FormatSign Text.Printf.SignPlus

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
lvl51_rcccR :: Int
[GblId]
lvl51_rcccR
  = case lvl49_rcccP of { (p'_ac8tP, r'_ac8tQ) -> p'_ac8tP }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl52_rcccS :: Maybe Int
[GblId, Str=m2, Unf=OtherCon []]
lvl52_rcccS = GHC.Base.Just @ Int lvl51_rcccR

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
lvl53_rcccT :: String
[GblId]
lvl53_rcccT
  = case lvl49_rcccP of { (p'_ac8tP, r'_ac8tQ) -> r'_ac8tQ }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl54_rcccU :: Maybe FormatSign
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
lvl54_rcccU = GHC.Base.Just @ FormatSign Text.Printf.SignSpace

Rec {
-- RHS size: {terms: 640, types: 781, coercions: 0, joins: 0/14}
$wgetSpecs_rcccV
  :: Bool
     -> Bool
     -> Maybe FormatSign
     -> Bool
     -> String
     -> [UPrintf]
     -> (# FieldFormat, String, [UPrintf] #)
[GblId,
 Arity=6,
 Str=<L,1*U><L,1*U><L,U><L,U><S,1*U><L,U>,
 Unf=OtherCon []]
$wgetSpecs_rcccV
  = \ (w_scbdJ :: Bool)
      (w1_scbdK :: Bool)
      (w2_scbdL :: Maybe FormatSign)
      (w3_scbdM :: Bool)
      (w4_scbdN :: String)
      (w5_scbdO :: [UPrintf]) ->
      case w4_scbdN of wild_X60 {
        [] -> case errorShortFormat of wild1_00 { };
        : ds_dc99I cs0_ac8t9 ->
          case ds_dc99I of { GHC.Types.C# ds1_dc99J ->
          case ds1_dc99J of ds2_Xc9cg {
            __DEFAULT ->
              case GHC.Prim.leWord#
                     (GHC.Prim.int2Word# (GHC.Prim.-# (GHC.Prim.ord# ds2_Xc9cg) 48#))
                     9##
              of {
                __DEFAULT ->
                  let {
                    ds3_sc9Jl [Dmd=<L,U(1*U,1*U,1*U)>] :: FormatParse
                    [LclId]
                    ds3_sc9Jl
                      = case w5_scbdO of {
                          [] -> errorMissingArgument @ FormatParse;
                          : ds4_dc995 ds5_dc996 ->
                            case ds4_dc995 of { (ufmt_ac8uD, ds6_dc997) ->
                            ufmt_ac8uD wild_X60
                            }
                        } } in
                  (# Text.Printf.FieldFormat
                       (GHC.Base.Nothing @ Int)
                       (GHC.Base.Nothing @ Int)
                       (case w_scbdJ of {
                          False ->
                            case w1_scbdK of {
                              False -> GHC.Base.Nothing @ FormatAdjustment;
                              True -> lvl48_rcccO
                            };
                          True -> lvl47_rcccN
                        })
                       w2_scbdL
                       w3_scbdM
                       (case ds3_sc9Jl of { FormatParse ms_ac8uA c_ac8uB cs_ac8uC ->
                        ms_ac8uA
                        })
                       (case ds3_sc9Jl of { FormatParse ms_ac8uA c_ac8uB cs_ac8uC ->
                        c_ac8uB
                        }),
                     case ds3_sc9Jl of { FormatParse ms_ac8uA c_ac8uB cs_ac8uC ->
                     cs_ac8uC
                     },
                     w5_scbdO #);
                1# ->
                  let {
                    ds3_sc9Jt [Dmd=<L,U(U(U),1*U)>] :: (Int, String)
                    [LclId]
                    ds3_sc9Jt
                      = case GHC.List.$wspan @ Char isDigit wild_X60 of
                        { (# ww1_i8hm4, ww2_i8hm5 #) ->
                        case ww1_i8hm4 of wild2_Xje {
                          [] -> (lvl46_rcccM, ww2_i8hm5);
                          : ipv_sc9ty ipv1_sc9tA ->
                            (case Text.Read.readEither8
                                    @ Int
                                    (Text.ParserCombinators.ReadP.run @ Int lvl42_rcccH wild2_Xje)
                             of {
                               [] -> lvl44_rcccJ;
                               : x_ic3wM ds4_ic3wN ->
                                 case ds4_ic3wN of {
                                   [] -> x_ic3wM;
                                   : ipv2_ic3CS ipv3_ic3CT -> lvl45_rcccK
                                 }
                             },
                             ww2_i8hm5)
                        }
                        } } in
                  let {
                    ds4_sc9Jr [Dmd=<L,U(1*U,U,U)>] :: (Maybe Int, [Char], [UPrintf])
                    [LclId]
                    ds4_sc9Jr
                      = case ds3_sc9Jt of { (n_Xc8wR, cs'_Xc8AH) ->
                        case cs'_Xc8AH of wild3_X2D {
                          [] -> (GHC.Base.Nothing @ Int, GHC.Types.[] @ Char, w5_scbdO);
                          : ds5_dc98o ds6_dc98p ->
                            case ds5_dc98o of { GHC.Types.C# ds7_dc98q ->
                            case ds7_dc98q of {
                              __DEFAULT -> (GHC.Base.Nothing @ Int, wild3_X2D, w5_scbdO);
                              '.'# ->
                                case ds6_dc98p of wild5_X2K {
                                  [] -> (lvl52_rcccS, lvl53_rcccT, w5_scbdO);
                                  : ds9_dc98r r_ac8un ->
                                    case ds9_dc98r of { GHC.Types.C# ds10_dc98s ->
                                    case ds10_dc98s of {
                                      __DEFAULT ->
                                        let {
                                          ds12_sc9Jz [Dmd=<L,U(1*U,1*U)>] :: (Int, String)
                                          [LclId]
                                          ds12_sc9Jz
                                            = case GHC.List.$wspan @ Char isDigit wild5_X2K of
                                              { (# ww1_i8hm4, ww2_i8hm5 #) ->
                                              case ww1_i8hm4 of wild7_Xje {
                                                [] -> (lvl46_rcccM, ww2_i8hm5);
                                                : ipv_sc9ty ipv1_sc9tA ->
                                                  (case Text.Read.readEither8
                                                          @ Int
                                                          (Text.ParserCombinators.ReadP.run
                                                             @ Int lvl42_rcccH wild7_Xje)
                                                   of {
                                                     [] -> lvl44_rcccJ;
                                                     : x_ic3wM ds13_ic3wN ->
                                                       case ds13_ic3wN of {
                                                         [] -> x_ic3wM;
                                                         : ipv2_ic3CS ipv3_ic3CT -> lvl45_rcccK
                                                       }
                                                   },
                                                   ww2_i8hm5)
                                              }
                                              } } in
                                        (GHC.Base.Just
                                           @ Int
                                           (case ds12_sc9Jz of { (p'_ac8ur, r'_ac8us) ->
                                            p'_ac8ur
                                            }),
                                         case ds12_sc9Jz of { (p'_ac8ur, r'_ac8us) -> r'_ac8us },
                                         w5_scbdO);
                                      '*'# ->
                                        let {
                                          ds12_sc9JB [Dmd=<L,U(1*U,1*U)>] :: ([UPrintf], Int)
                                          [LclId]
                                          ds12_sc9JB
                                            = case $wgetStar_rcccL w5_scbdO of
                                              { (# ww1_scbep, ww2_scbeq #) ->
                                              (ww1_scbep, ww2_scbeq)
                                              } } in
                                        (GHC.Base.Just
                                           @ Int
                                           (case ds12_sc9JB of { (us''_ac8uo, p'_ac8up) ->
                                            p'_ac8up
                                            }),
                                         r_ac8un,
                                         case ds12_sc9JB of { (us''_ac8uo, p'_ac8up) ->
                                         us''_ac8uo
                                         })
                                    }
                                    }
                                }
                            }
                            }
                        }
                        } } in
                  let {
                    ds5_sc9Jv [Dmd=<L,U(1*U,1*U,1*U)>] :: FormatParse
                    [LclId]
                    ds5_sc9Jv
                      = case ds4_sc9Jr of { (p_Xc8wW, cs''_ac8ui, us'_Xc8AR) ->
                        case us'_Xc8AR of {
                          [] -> errorMissingArgument @ FormatParse;
                          : ds7_dc97y ds8_dc97z ->
                            case ds7_dc97y of { (ufmt_ac8ut, ds9_dc97A) ->
                            ufmt_ac8ut cs''_ac8ui
                            }
                        }
                        } } in
                  (# Text.Printf.FieldFormat
                       (GHC.Base.Just
                          @ Int
                          (case ds3_sc9Jt of { (n_Xc8AD, cs'_ac8ug) ->
                           case n_Xc8AD of wild3_ic9ud { GHC.Types.I# x_ic9uf ->
                           case GHC.Prim.>=# x_ic9uf 0# of {
                             __DEFAULT -> GHC.Types.I# (GHC.Prim.negateInt# x_ic9uf);
                             1# -> wild3_ic9ud
                           }
                           }
                           }))
                       (case ds4_sc9Jr of { (p_Xc8AL, cs''_ac8ui, us'_Xc8Bx) -> p_Xc8AL })
                       (case ds3_sc9Jt of { (n_Xc8AD, cs'_ac8ug) ->
                        case n_Xc8AD of { GHC.Types.I# x_alN9 ->
                        case GHC.Prim.<# x_alN9 0# of {
                          __DEFAULT ->
                            case w_scbdJ of {
                              False ->
                                case w1_scbdK of {
                                  False -> GHC.Base.Nothing @ FormatAdjustment;
                                  True -> lvl48_rcccO
                                };
                              True -> lvl47_rcccN
                            };
                          1# -> lvl47_rcccN
                        }
                        }
                        })
                       w2_scbdL
                       w3_scbdM
                       (case ds5_sc9Jv of { FormatParse ms_ac8uk c_ac8ul cs_ac8um ->
                        ms_ac8uk
                        })
                       (case ds5_sc9Jv of { FormatParse ms_ac8uk c_ac8ul cs_ac8um ->
                        c_ac8ul
                        }),
                     case ds5_sc9Jv of { FormatParse ms_ac8uk c_ac8ul cs_ac8um ->
                     cs_ac8um
                     },
                     case ds4_sc9Jr of { (p_Xc8wW, cs''_ac8ui, us'_Xc8AR) ->
                     us'_Xc8AR
                     } #)
              };
            ' '# ->
              $wgetSpecs_rcccV
                w_scbdJ
                w1_scbdK
                (case w2_scbdL of {
                   Nothing -> lvl54_rcccU;
                   Just ds3_dc99X ->
                     case ds3_dc99X of {
                       SignPlus -> lvl50_rcccQ;
                       SignSpace -> lvl54_rcccU
                     }
                 })
                w3_scbdM
                cs0_ac8t9
                w5_scbdO;
            '#'# ->
              $wgetSpecs_rcccV
                w_scbdJ w1_scbdK w2_scbdL GHC.Types.True cs0_ac8t9 w5_scbdO;
            '*'# ->
              let {
                ds3_sc9JJ [Dmd=<L,U(1*U,U(U))>] :: ([UPrintf], Int)
                [LclId]
                ds3_sc9JJ
                  = case $wgetStar_rcccL w5_scbdO of { (# ww1_scbep, ww2_scbeq #) ->
                    (ww1_scbep, ww2_scbeq)
                    } } in
              let {
                ds4_sc9JH [Dmd=<L,U(1*U,U,U)>] :: (Maybe Int, [Char], [UPrintf])
                [LclId]
                ds4_sc9JH
                  = case cs0_ac8t9 of wild2_X2C {
                      [] ->
                        (GHC.Base.Nothing @ Int, GHC.Types.[] @ Char,
                         case ds3_sc9JJ of { (us'_Xc8zY, n_Xc8AT) -> us'_Xc8zY });
                      : ds5_dc95N ds6_dc95O ->
                        case ds5_dc95N of { GHC.Types.C# ds7_dc95P ->
                        case ds7_dc95P of {
                          __DEFAULT ->
                            (GHC.Base.Nothing @ Int, wild2_X2C,
                             case ds3_sc9JJ of { (us'_Xc8zY, n_Xc8B3) -> us'_Xc8zY });
                          '.'# ->
                            case ds6_dc95O of wild4_X2J {
                              [] ->
                                (lvl52_rcccS, lvl53_rcccT,
                                 case ds3_sc9JJ of { (us'_Xc8zY, n_Xc8Ba) -> us'_Xc8zY });
                              : ds9_dc95Q r_ac8tL ->
                                case ds9_dc95Q of { GHC.Types.C# ds10_dc95R ->
                                case ds10_dc95R of {
                                  __DEFAULT ->
                                    let {
                                      ds12_sc9JP [Dmd=<L,U(1*U,1*U)>] :: (Int, String)
                                      [LclId]
                                      ds12_sc9JP
                                        = case GHC.List.$wspan @ Char isDigit wild4_X2J of
                                          { (# ww1_i8hm4, ww2_i8hm5 #) ->
                                          case ww1_i8hm4 of wild6_Xje {
                                            [] -> (lvl46_rcccM, ww2_i8hm5);
                                            : ipv_sc9ty ipv1_sc9tA ->
                                              (case Text.Read.readEither8
                                                      @ Int
                                                      (Text.ParserCombinators.ReadP.run
                                                         @ Int lvl42_rcccH wild6_Xje)
                                               of {
                                                 [] -> lvl44_rcccJ;
                                                 : x_ic3wM ds13_ic3wN ->
                                                   case ds13_ic3wN of {
                                                     [] -> x_ic3wM;
                                                     : ipv2_ic3CS ipv3_ic3CT -> lvl45_rcccK
                                                   }
                                               },
                                               ww2_i8hm5)
                                          }
                                          } } in
                                    (GHC.Base.Just
                                       @ Int
                                       (case ds12_sc9JP of { (p'_ac8tP, r'_ac8tQ) -> p'_ac8tP }),
                                     case ds12_sc9JP of { (p'_ac8tP, r'_ac8tQ) -> r'_ac8tQ },
                                     case ds3_sc9JJ of { (us'_Xc8zY, n_Xc8Bk) -> us'_Xc8zY });
                                  '*'# ->
                                    let {
                                      ds12_sc9JR [Dmd=<L,U(1*U,1*U)>] :: ([UPrintf], Int)
                                      [LclId]
                                      ds12_sc9JR
                                        = case ds3_sc9JJ of { (us'_Xc8zY, n_Xc8Bk) ->
                                          case $wgetStar_rcccL us'_Xc8zY of
                                          { (# ww1_scbep, ww2_scbeq #) ->
                                          (ww1_scbep, ww2_scbeq)
                                          }
                                          } } in
                                    (GHC.Base.Just
                                       @ Int
                                       (case ds12_sc9JR of { (us'''_ac8tM, p'_ac8tN) -> p'_ac8tN }),
                                     r_ac8tL,
                                     case ds12_sc9JR of { (us'''_ac8tM, p'_ac8tN) -> us'''_ac8tM })
                                }
                                }
                            }
                        }
                        }
                    } } in
              let {
                ds5_sc9JL [Dmd=<L,U(1*U,1*U,1*U)>] :: FormatParse
                [LclId]
                ds5_sc9JL
                  = case ds4_sc9JH of { (p_Xc8wj, cs''_ac8tG, us''_Xc8Ac) ->
                    case us''_Xc8Ac of {
                      [] -> errorMissingArgument @ FormatParse;
                      : ds7_dc94X ds8_dc94Y ->
                        case ds7_dc94X of { (ufmt_ac8tR, ds9_dc94Z) ->
                        ufmt_ac8tR cs''_ac8tG
                        }
                    }
                    } } in
              (# Text.Printf.FieldFormat
                   (GHC.Base.Just
                      @ Int
                      (case ds3_sc9JJ of { (us'_Xc8we, n_Xc8A2) ->
                       case n_Xc8A2 of wild3_ic9ud { GHC.Types.I# x_ic9uf ->
                       case GHC.Prim.>=# x_ic9uf 0# of {
                         __DEFAULT -> GHC.Types.I# (GHC.Prim.negateInt# x_ic9uf);
                         1# -> wild3_ic9ud
                       }
                       }
                       }))
                   (case ds4_sc9JH of { (p_Xc8A6, cs''_ac8tG, us''_Xc8AT) ->
                    p_Xc8A6
                    })
                   (case ds3_sc9JJ of { (us'_Xc8we, n_Xc8A2) ->
                    case n_Xc8A2 of { GHC.Types.I# x_alN9 ->
                    case GHC.Prim.<# x_alN9 0# of {
                      __DEFAULT ->
                        case w_scbdJ of {
                          False ->
                            case w1_scbdK of {
                              False -> GHC.Base.Nothing @ FormatAdjustment;
                              True -> lvl48_rcccO
                            };
                          True -> lvl47_rcccN
                        };
                      1# -> lvl47_rcccN
                    }
                    }
                    })
                   w2_scbdL
                   w3_scbdM
                   (case ds5_sc9JL of { FormatParse ms_ac8tI c_ac8tJ cs_ac8tK ->
                    ms_ac8tI
                    })
                   (case ds5_sc9JL of { FormatParse ms_ac8tI c_ac8tJ cs_ac8tK ->
                    c_ac8tJ
                    }),
                 case ds5_sc9JL of { FormatParse ms_ac8tI c_ac8tJ cs_ac8tK ->
                 cs_ac8tK
                 },
                 case ds4_sc9JH of { (p_Xc8wj, cs''_ac8tG, us''_Xc8Ac) ->
                 us''_Xc8Ac
                 } #);
            '+'# ->
              $wgetSpecs_rcccV
                w_scbdJ w1_scbdK lvl50_rcccQ w3_scbdM cs0_ac8t9 w5_scbdO;
            '-'# ->
              $wgetSpecs_rcccV
                GHC.Types.True w1_scbdK w2_scbdL w3_scbdM cs0_ac8t9 w5_scbdO;
            '.'# ->
              let {
                ds3_sc9JV [Dmd=<L,U(1*U,U,U)>] :: (Int, [Char], [UPrintf])
                [LclId]
                ds3_sc9JV
                  = case cs0_ac8t9 of wild2_X2z {
                      [] ->
                        case lvl49_rcccP of { (p_ac8tY, cs'_ac8tZ) ->
                        (p_ac8tY, cs'_ac8tZ, w5_scbdO)
                        };
                      : ds4_dc976 cs''_ac8u4 ->
                        case ds4_dc976 of { GHC.Types.C# ds5_dc977 ->
                        case ds5_dc977 of {
                          __DEFAULT ->
                            case GHC.List.$wspan @ Char isDigit wild2_X2z of
                            { (# ww1_i8hm4, ww2_i8hm5 #) ->
                            case ww1_i8hm4 of wild4_Xje {
                              [] -> (lvl46_rcccM, ww2_i8hm5, w5_scbdO);
                              : ipv_sc9ty ipv1_sc9tA ->
                                (case Text.Read.readEither8
                                        @ Int
                                        (Text.ParserCombinators.ReadP.run
                                           @ Int lvl42_rcccH wild4_Xje)
                                 of {
                                   [] -> lvl44_rcccJ;
                                   : x_ic3wM ds7_ic3wN ->
                                     case ds7_ic3wN of {
                                       [] -> x_ic3wM;
                                       : ipv2_ic3CS ipv3_ic3CT -> lvl45_rcccK
                                     }
                                 },
                                 ww2_i8hm5, w5_scbdO)
                            }
                            };
                          '*'# ->
                            let {
                              ds7_sc9JZ [Dmd=<L,U(1*U,1*U)>] :: ([UPrintf], Int)
                              [LclId]
                              ds7_sc9JZ
                                = case $wgetStar_rcccL w5_scbdO of { (# ww1_scbep, ww2_scbeq #) ->
                                  (ww1_scbep, ww2_scbeq)
                                  } } in
                            (case ds7_sc9JZ of { (us''_ac8u5, p'_ac8u6) -> p'_ac8u6 },
                             cs''_ac8u4,
                             case ds7_sc9JZ of { (us''_ac8u5, p'_ac8u6) -> us''_ac8u5 })
                        }
                        }
                    } } in
              let {
                ds4_sc9JX [Dmd=<L,U(1*U,1*U,1*U)>] :: FormatParse
                [LclId]
                ds4_sc9JX
                  = case ds3_sc9JV of { (p_Xc8wz, cs'_ac8tZ, us'_Xc8Ap) ->
                    case us'_Xc8Ap of {
                      [] -> errorMissingArgument @ FormatParse;
                      : ds6_dc96u ds7_dc96v ->
                        case ds6_dc96u of { (ufmt_ac8u7, ds8_dc96w) ->
                        ufmt_ac8u7 cs'_ac8tZ
                        }
                    }
                    } } in
              (# Text.Printf.FieldFormat
                   (GHC.Base.Nothing @ Int)
                   (GHC.Base.Just
                      @ Int
                      (case ds3_sc9JV of { (p_Xc8Aj, cs'_ac8tZ, us'_Xc8B8) -> p_Xc8Aj }))
                   (case w_scbdJ of {
                      False ->
                        case w1_scbdK of {
                          False -> GHC.Base.Nothing @ FormatAdjustment;
                          True -> lvl48_rcccO
                        };
                      True -> lvl47_rcccN
                    })
                   w2_scbdL
                   w3_scbdM
                   (case ds4_sc9JX of { FormatParse ms_ac8u1 c_ac8u2 cs_ac8u3 ->
                    ms_ac8u1
                    })
                   (case ds4_sc9JX of { FormatParse ms_ac8u1 c_ac8u2 cs_ac8u3 ->
                    c_ac8u2
                    }),
                 case ds4_sc9JX of { FormatParse ms_ac8u1 c_ac8u2 cs_ac8u3 ->
                 cs_ac8u3
                 },
                 case ds3_sc9JV of { (p_Xc8wz, cs'_ac8tZ, us'_Xc8Ap) ->
                 us'_Xc8Ap
                 } #);
            '0'# ->
              $wgetSpecs_rcccV
                w_scbdJ GHC.Types.True w2_scbdL w3_scbdM cs0_ac8t9 w5_scbdO
          }
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_rcccW :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
f_rcccW = GHC.Types.C# '%'#

Rec {
-- RHS size: {terms: 80, types: 70, coercions: 0, joins: 1/1}
uprintfs [Occ=LoopBreaker] :: String -> [UPrintf] -> ShowS
[GblId, Arity=3, Str=<S,1*U><L,1*U><L,1*U>, Unf=OtherCon []]
uprintfs
  = \ (ds_dc9ew :: [Char])
      (ds1_dc9ex :: [UPrintf])
      (eta_B1 :: String) ->
      case ds_dc9ew of {
        [] ->
          case ds1_dc9ex of {
            [] -> eta_B1;
            : ds2_dc9f0 ds3_dc9f1 -> case errorShortFormat of wild2_00 { }
          };
        : ds2_dc9f2 ds3_dc9f3 ->
          case ds2_dc9f2 of wild1_X2t { GHC.Types.C# ds4_dc9f4 ->
          case ds4_dc9f4 of {
            __DEFAULT ->
              GHC.Types.: @ Char wild1_X2t (uprintfs ds3_dc9f3 ds1_dc9ex eta_B1);
            '%'# ->
              join {
                fail_sc9Jb [Dmd=<L,1*C1(U)>] :: GHC.Prim.Void# -> String
                [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []]
                fail_sc9Jb _ [Occ=Dead, OS=OneShot]
                  = case ds1_dc9ex of wild2_X2x {
                      [] -> case errorMissingArgument of wild3_00 { };
                      : ds7_dc9f7 ds8_dc9f8 ->
                        case $wgetSpecs_rcccV
                               GHC.Types.False
                               GHC.Types.False
                               (GHC.Base.Nothing @ FormatSign)
                               GHC.Types.False
                               ds3_dc9f3
                               wild2_X2x
                        of
                        { (# ww1_scbev, ww2_scbew, ww3_scbex #) ->
                        case ww3_scbex of {
                          [] -> case errorMissingArgument of wild4_00 { };
                          : ds9_dc9et us_ac8sk ->
                            case ds9_dc9et of { (ds10_dc9eu, u_ac8sj) ->
                            u_ac8sj ww1_scbev (uprintfs ww2_scbew us_ac8sk eta_B1)
                            }
                        }
                        }
                    } } in
              case ds3_dc9f3 of {
                [] -> jump fail_sc9Jb GHC.Prim.void#;
                : ds6_dc9f5 cs_ac8s8 ->
                  case ds6_dc9f5 of { GHC.Types.C# ds7_dc9f6 ->
                  case ds7_dc9f6 of {
                    __DEFAULT -> jump fail_sc9Jb GHC.Prim.void#;
                    '%'# ->
                      GHC.Types.: @ Char f_rcccW (uprintfs cs_ac8s8 ds1_dc9ex eta_B1)
                  }
                  }
              }
          }
          }
      }
end Rec }

-- RHS size: {terms: 17, types: 26, coercions: 9, joins: 0/0}
Text.Printf.$fPrintfTypeIO_$cspr
  :: forall a. ((a :: *) ~ (() :: *)) => String -> [UPrintf] -> IO a
[GblId,
 Arity=3,
 Str=<S(S),1*U(1*U)><L,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 140 60}]
Text.Printf.$fPrintfTypeIO_$cspr
  = \ (@ a_ac8Va)
      ($d~_ac8Vb :: (a_ac8Va :: *) ~ (() :: *))
      (eta_B2 :: String)
      (eta1_B1 :: [UPrintf]) ->
      case GHC.Types.heq_sel
             @ *
             @ *
             @ a_ac8Va
             @ ()
             ($d~_ac8Vb
              `cast` (Data.Type.Equality.N:~[0] <*>_N <a_ac8Va>_N <()>_N
                      :: ((a_ac8Va :: *) ~ (() :: *) :: Constraint)
                         ~R# ((a_ac8Va :: *) ~~ (() :: *) :: Constraint)))
      of co_ac90t
      { __DEFAULT ->
      (GHC.IO.Handle.Text.hPutStr'
         stdout
         (uprintfs
            eta_B2
            (GHC.List.reverse1 @ UPrintf eta1_B1 (GHC.Types.[] @ UPrintf))
            (GHC.Types.[] @ Char))
         GHC.Types.False)
      `cast` ((IO (Sub (Sym co_ac90t)))_R
              :: (IO () :: *) ~R# (IO a_ac8Va :: *))
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
Text.Printf.$fPrintfTypeIO [InlPrag=INLINE (sat-args=0)]
  :: forall a. ((a :: *) ~ (() :: *)) => PrintfType (IO a)
[GblId[DFunId(nt)],
 Arity=3,
 Str=<S(S),1*U(1*U)><L,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= Text.Printf.$fPrintfTypeIO_$cspr
               `cast` (forall (a :: <*>_N).
                       <(a :: *) ~ (() :: *)>_R
                       ->_R Sym (Text.Printf.N:PrintfType[0] <IO a>_N)
                       :: (forall a.
                           ((a :: *) ~ (() :: *)) =>
                           String -> [UPrintf] -> IO a :: *)
                          ~R# (forall a. ((a :: *) ~ (() :: *)) => PrintfType (IO a) :: *))}]
Text.Printf.$fPrintfTypeIO
  = Text.Printf.$fPrintfTypeIO_$cspr
    `cast` (forall (a :: <*>_N).
            <(a :: *) ~ (() :: *)>_R
            ->_R Sym (Text.Printf.N:PrintfType[0] <IO a>_N)
            :: (forall a.
                ((a :: *) ~ (() :: *)) =>
                String -> [UPrintf] -> IO a :: *)
               ~R# (forall a. ((a :: *) ~ (() :: *)) => PrintfType (IO a) :: *))

-- RHS size: {terms: 13, types: 13, coercions: 0, joins: 0/0}
Text.Printf.$fPrintfType[]_$cspr
  :: forall c. IsChar c => String -> [UPrintf] -> [c]
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C(U))><S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 120 0}]
Text.Printf.$fPrintfType[]_$cspr
  = \ (@ c_ac8Vv)
      ($dIsChar_ac8Vw :: IsChar c_ac8Vv)
      (fmts_ac8qY :: String)
      (args_ac8qZ :: [UPrintf]) ->
      map
        @ Char
        @ c_ac8Vv
        (fromChar @ c_ac8Vv $dIsChar_ac8Vw)
        (uprintfs
           fmts_ac8qY
           (GHC.List.reverse1 @ UPrintf args_ac8qZ (GHC.Types.[] @ UPrintf))
           (GHC.Types.[] @ Char))

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
Text.Printf.$fPrintfType[] [InlPrag=INLINE (sat-args=0)]
  :: forall c. IsChar c => PrintfType [c]
[GblId[DFunId(nt)],
 Arity=3,
 Str=<L,1*U(A,1*C(U))><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= Text.Printf.$fPrintfType[]_$cspr
               `cast` (forall (c :: <*>_N).
                       <IsChar c>_R ->_R Sym (Text.Printf.N:PrintfType[0] <[c]>_N)
                       :: (forall c. IsChar c => String -> [UPrintf] -> [c] :: *)
                          ~R# (forall c. IsChar c => PrintfType [c] :: *))}]
Text.Printf.$fPrintfType[]
  = Text.Printf.$fPrintfType[]_$cspr
    `cast` (forall (c :: <*>_N).
            <IsChar c>_R ->_R Sym (Text.Printf.N:PrintfType[0] <[c]>_N)
            :: (forall c. IsChar c => String -> [UPrintf] -> [c] :: *)
               ~R# (forall c. IsChar c => PrintfType [c] :: *))

-- RHS size: {terms: 17, types: 26, coercions: 9, joins: 0/0}
Text.Printf.$fHPrintfTypeIO_$chspr
  :: forall a.
     ((a :: *) ~ (() :: *)) =>
     Handle -> String -> [UPrintf] -> IO a
[GblId,
 Arity=4,
 Str=<S(S),1*U(1*U)><L,U><L,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 130 60}]
Text.Printf.$fHPrintfTypeIO_$chspr
  = \ (@ a_ac8W1)
      ($d~_ac8W2 :: (a_ac8W1 :: *) ~ (() :: *))
      (eta_B3 :: Handle)
      (eta1_B2 :: String)
      (eta2_B1 :: [UPrintf]) ->
      case GHC.Types.heq_sel
             @ *
             @ *
             @ a_ac8W1
             @ ()
             ($d~_ac8W2
              `cast` (Data.Type.Equality.N:~[0] <*>_N <a_ac8W1>_N <()>_N
                      :: ((a_ac8W1 :: *) ~ (() :: *) :: Constraint)
                         ~R# ((a_ac8W1 :: *) ~~ (() :: *) :: Constraint)))
      of co_ac90y
      { __DEFAULT ->
      (GHC.IO.Handle.Text.hPutStr'
         eta_B3
         (uprintfs
            eta1_B2 (reverse @ UPrintf eta2_B1) (GHC.Types.[] @ Char))
         GHC.Types.False)
      `cast` ((IO (Sub (Sym co_ac90y)))_R
              :: (IO () :: *) ~R# (IO a_ac8W1 :: *))
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
Text.Printf.$fHPrintfTypeIO [InlPrag=INLINE (sat-args=0)]
  :: forall a. ((a :: *) ~ (() :: *)) => HPrintfType (IO a)
[GblId[DFunId(nt)],
 Arity=4,
 Str=<S(S),1*U(1*U)><L,U><L,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= Text.Printf.$fHPrintfTypeIO_$chspr
               `cast` (forall (a :: <*>_N).
                       <(a :: *) ~ (() :: *)>_R
                       ->_R Sym (Text.Printf.N:HPrintfType[0] <IO a>_N)
                       :: (forall a.
                           ((a :: *) ~ (() :: *)) =>
                           Handle -> String -> [UPrintf] -> IO a :: *)
                          ~R# (forall a.
                               ((a :: *) ~ (() :: *)) =>
                               HPrintfType (IO a) :: *))}]
Text.Printf.$fHPrintfTypeIO
  = Text.Printf.$fHPrintfTypeIO_$chspr
    `cast` (forall (a :: <*>_N).
            <(a :: *) ~ (() :: *)>_R
            ->_R Sym (Text.Printf.N:HPrintfType[0] <IO a>_N)
            :: (forall a.
                ((a :: *) ~ (() :: *)) =>
                Handle -> String -> [UPrintf] -> IO a :: *)
               ~R# (forall a. ((a :: *) ~ (() :: *)) => HPrintfType (IO a) :: *))


------ Local rules for imported ids --------
"SPEC formatRealFloat @ Double"
    forall ($dRealFloat_sc9L4 :: RealFloat Double).
      formatRealFloat @ Double $dRealFloat_sc9L4
      = Text.Printf.$fPrintfArgDouble_$sformatRealFloat
"SPEC formatRealFloat @ Float"
    forall ($dRealFloat_sc9L2 :: RealFloat Float).
      formatRealFloat @ Float $dRealFloat_sc9L2
      = Text.Printf.$fPrintfArgFloat_$sformatRealFloat
"SPEC formatInt @ Word64"
    forall ($dBounded_sc9KO :: Bounded Word64)
           ($dIntegral_sc9KN :: Integral Word64).
      formatInt @ Word64 $dIntegral_sc9KN $dBounded_sc9KO
      = Text.Printf.$fPrintfArgWord64_$sformatInt
"SPEC formatInt @ Word32"
    forall ($dBounded_sc9KJ :: Bounded Word32)
           ($dIntegral_sc9KI :: Integral Word32).
      formatInt @ Word32 $dIntegral_sc9KI $dBounded_sc9KJ
      = Text.Printf.$fPrintfArgWord32_$sformatInt
"SPEC formatInt @ Word16"
    forall ($dBounded_sc9KE :: Bounded Word16)
           ($dIntegral_sc9KD :: Integral Word16).
      formatInt @ Word16 $dIntegral_sc9KD $dBounded_sc9KE
      = Text.Printf.$fPrintfArgWord16_$sformatInt
"SPEC formatInt @ Word8"
    forall ($dBounded_sc9Kz :: Bounded Word8)
           ($dIntegral_sc9Ky :: Integral Word8).
      formatInt @ Word8 $dIntegral_sc9Ky $dBounded_sc9Kz
      = Text.Printf.$fPrintfArgWord8_$sformatInt
"SPEC formatInt @ Word"
    forall ($dBounded_sc9Ku :: Bounded Word)
           ($dIntegral_sc9Kt :: Integral Word).
      formatInt @ Word $dIntegral_sc9Kt $dBounded_sc9Ku
      = Text.Printf.$fPrintfArgWord_$sformatInt
"SPEC formatInt @ Int64"
    forall ($dBounded_sc9Kp :: Bounded Int64)
           ($dIntegral_sc9Ko :: Integral Int64).
      formatInt @ Int64 $dIntegral_sc9Ko $dBounded_sc9Kp
      = Text.Printf.$fPrintfArgInt64_$sformatInt
"SPEC formatInt @ Int32"
    forall ($dBounded_sc9Kk :: Bounded Int32)
           ($dIntegral_sc9Kj :: Integral Int32).
      formatInt @ Int32 $dIntegral_sc9Kj $dBounded_sc9Kk
      = Text.Printf.$fPrintfArgInt32_$sformatInt
"SPEC formatInt @ Int16"
    forall ($dBounded_sc9Kf :: Bounded Int16)
           ($dIntegral_sc9Ke :: Integral Int16).
      formatInt @ Int16 $dIntegral_sc9Ke $dBounded_sc9Kf
      = Text.Printf.$fPrintfArgInt16_$sformatInt
"SPEC formatInt @ Int8"
    forall ($dBounded_sc9Ka :: Bounded Int8)
           ($dIntegral_sc9K9 :: Integral Int8).
      formatInt @ Int8 $dIntegral_sc9K9 $dBounded_sc9Ka
      = Text.Printf.$fPrintfArgInt8_$sformatInt
"SPEC formatInt @ Int"
    forall ($dBounded_sc9K5 :: Bounded Int)
           ($dIntegral_sc9K4 :: Integral Int).
      formatInt @ Int $dIntegral_sc9K4 $dBounded_sc9K5
      = Text.Printf.$fPrintfArgInt_$sformatInt

